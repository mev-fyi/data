[Music] foreign welcome to Unchained your no hype resource for all things crypto I'm your host Laura Shin author of The cryptopians I started covering crypto eight years ago and as a senior editor at Forbes was the first mainstream media reporter to cover cryptocurrency full-time this is the June 20th 2023 episode of Unchained you know it we know it they know it the system doesn't just need an update it needs a complete rewrite web 3 offers that rewrite it allows us to take control back and to truly own what's ours visit okx.com rewrite the system to learn how Asians buzzing and everyone's going to token 2049 Singapore on September 13th to 14th apology srinivasan Mike novogratz Arthur Hayes and 200 others will hit the stage joining over 10 000 attendees visit token2049.com for 65 off with the code Unchained Link in the description Buy trade and spend crypto on the crypto.com app new users can enjoy zero credit card fees on crypto purchases in the first 7 days download the crypto.com app and get 25 with the code Laura Link in the description today's guest is Hayden Adams founder and CEO of uniswap Welcome Hayden thanks so much for having me it's amazing that uniswap is on to its fourth iteration already let's walk listeners through the evolution of uniswap from V1 through V3 sounds great and before I even say that I just maybe I don't know if you know this but Unchained was actually the first podcast I ever did and uh last time we spoke yeah I don't know if I knew I might have known that it was so long ago it was like 2018 wasn't it yep launched in 2018 and uh I don't remember exactly when when we spoke but it was around then yeah yeah I I also don't remember exactly um but amazing that it's been five years because it feels somewhat recent to me which is kind of funny but anyway um I'm glad that you made Unchained your first podcast Choice yeah definitely it was great back then and excited to to be here now um in terms of like the evolution I think even what you just said there like it in some ways it feels like we think of you know swap as having been around for a long time um and and amms and all this stuff that we talk about uh with on-chin trading but you know unisoft has only been around for five years and before you swap there were other projects experimenting with amm but it was like a relatively untested new thing and going from you know unified V1 which launched in November 2018. back then it was like is this a thing will this have a place in the world will there like is there some need for on-chain trading and is there some need for automated Market making uh to today where you can swap you know trades billions of dollars a day has you know there's been over one and a half trillion dollars traded since then um on the protocol like and it has such an act like amms are actually the predominant way people trade between crypto to crypto assets and uh on chain right limit like back then it was like does amm have a role relative to limit orders and today it's like oh do limit orders have a role relative to amm's uh in the space of unchain trading which is really interesting uh probably jumping the gun on on some stuff there really you know you saw V1 built that uh initially almost as like a solo side project it had a lot of help along the way but you know it essentially was the only full-time person on it uh developed it under a you know got a grant from the ethereum foundation and launched it in November 2018. uh it got like all this initial excitement and Traction in the in the industry uh I think in part because it really like resonated with people's values in the space at the time it was kind of the anti-hype like there was all these like projects that had set huge expectations uh raised huge amounts of money and then didn't really deliver on the hype uni swap you know all it had was this small Grant uh no one knew about it until it was live and working and it really resonated native with people and it really like matched like the level of decentralization the uniswap reached you know where it was like non-upgradable um you know immutable permissionless anyone could create you know an asset anyone could add create a liquidity pool that resonated in the early days and so it got this initial traction and excitement from almost like long tail projects on ethereum and you know so I raised money and farmed a company I was like this just the idea to me had been validated so I decided to take it to the next step and form the company and just remind people those original polls were based on that x times y equals K cotton just explain that for people yeah I mean it's it's not really that you know the idea is that in traditional exchanges you have you know limit orders and and you're matching up buyers and sellers uniswap had this pooled liquidity model where you deposit two tokens into a pool uh you know they would be paired against each other and you could buy one for the other and sell you know you could buy and sell between them and it would just move the price along the curve and that curve uh is just x times y equals K where there's like a constant you know value and that was how prices were set it was very simple uh very like simplistic but it worked and I think that that is like such a key to this whole story is that there was a lot of early like the the earliest negative baby feedback that unisot received was like this is too simple and too dumb like you can't you can't just like create a stupid dumb on chain trading strategy and expect it to like make you know be profitable for people to do or beneficial for people to do and I think in a way they were right in a way it was too stupid and dumb to really like you know exist forever but at the same time it provided like the the benefits of it offset the downsides of it if that makes sense like the level of decentralization it achieved the level of like um you know like like the fact that no one needed to trust anyone else the fact that anyone could create you know anyone could could create a liquidity pool uh without having to have like an extreme level of sophistication like yes it wasn't sophisticated enough for the most sophisticated people to want to come in and participate in it but it was like unsophisticated enough that anyone could participate in it and uh the ability for just anyone to create a liquidity pool was so different and new from anything else that was around at the time even other early amms didn't have an experience where like anyone could come in and create a pool at least even like at the front end level if it allowed it at a small contract level so that was such a big unlock that it didn't matter how inefficient the system backing it was at the time because no one else there was no other way to do the things that allowed you to do for certain people but from there we spent the next you know four or so years basically building new versions of the protocol improving it um V2 took it from V1 basically only allowed you to trade between eth and an erc20 token uh and it was and it was kind of a interesting very opinionated uh simply I it was my first you know coding project is one way to look at it and so it was it was okay but it wasn't like it wasn't a system on which an entire like industry could could be built to put it one way and so V2 really was just like upping like the the architecture the code quality you know it did add a few more features it allowed you to trade and the erc20 for any erc20 which enabled things like stable coin to stable coin trading instead of just eat the stable coin so it added like a few new features it was just like better infrastructure uh easier to interact with but it wasn't and like just a better code base and that was sort of what going into the at the launch of V2 probably you know it's always doing a few million dollars a day in trading maybe like five to ten in that was in Spring 2020. about a little bit over a year after the launch of V1 and that is sort of when things kind of like went crazy and we had what was called defy summer and uniswap V2 went from doing like five 10 million a day in trading in the spring to buy the fall it was doing you know it had passed a billion dollars a day in trading with a token added to the protocol every 10 minutes for the entire summer and just as a reminder also I think that um Milestone was also reached partially because of the sushi swap vampire attack yeah for sure definitely um like there was I mean it was growing really fast over D5 summer as like you know compounded launch and all these other projects had launched their tokens and more tokens were starting to come out and so it was already accelerating but then definitely yeah when Sushi swap happened it really did go parabolic at that moment you know uniswap liquidity went from a few hundred million to a few billion and then the daily trading also went up proportionally and I think what the reason you Sushi was so good for uniswap was because there was sort of this like chicken egg problem of people like there wasn't enough liquidity to like support the volume to support the liquidity and we didn't really know how unisop would operate at like that scale and Sushi kind of the sushi vampire attack because of the way that it was structured really incentivized liquidity to pour into uniswap and the plan was to migrate it all at once but so much liquidy reported to uniswap that people got to see how it how it operated at you know billions of dollars in scale as opposed to like low digit 100 millions and uh it sort of performed very well and so I think that you know even after the sushi vampire attack migration happened the liquidity didn't really leave unispop I mean some liquidity did but the units of liquidity after the vampire attack was much higher than it was before and definitely the whole you know and then after after all of that there was even more projects launching and that was like really like a pretty kind of like a moment of a lot of change in in the space um from we had actually been working on V3 since before the launch of V2 though we v3s the earliest ideas of V3 development were like ideas that we've been playing around with while developing V2 and so even at the time we launched V3 we did we realized concentrated liquidity was like the next step and I think that for a while some of that stuff felt like it was a distraction from getting where to where we knew we wanted to go with V3 I think ultimately I'm glad it all played out and it worked out for the best um and it was an exciting time uh but we launched V3 about a year after V2 and about six months after the whole Sushi uh Saga kicked off um and V3 basically made the protocol a lot more you know V2 was a very simple price curve and everyone had to like opt into the single way of of managing their liquidity and trading it and it was you know somewhat inefficient uh but it was like the same for everyone so it was so simple anyone could do it and there was no like competitive Dynamics between LPS because they were all kind of like in it together for better for worse but I think the downside was sometimes it was for Worse the you know G3 came out I think at the time of V3 there was a lot of open question like there was I think it took a long time for people to understand it I think people are still kind of wrapping their head around V3 even today and it came out about two years ago and you know it it basically just let people set price ranges in which their liquidity existed and so uh you know in the in the sort of you can it can you can kind of approximate in order back with it a little bit like you can imagine like if you set a you know I'm going to trade this token between this price and this price in a very narrow range that looks very similar to creating a limit order I think it's still kind of different uh you know there's sort of like a pro rata nature to it where you're still pooled with other people and it's still along a curve not at a single price I'd rather to say V3 increased like the It essentially increased their Capital efficiency it increased the flexibility for liquidity providers very significantly but maybe to lead into where I'm going with before like you know I'd say that V3 was still an extremely opinionated protocol and what I mean by that is the way that we develop V3 V3 was essentially the best single implementation of an amm that we could imagine at that time and I think it did very well V3 kind of tooking this off from like kind of like significant market share to like you know today it's like 85 90 in in on chain trading on ethereum and uh has just sort of like completely outperformed uh the the V2 style pools in terms of you know the the share of volume and the efficiency of it but it was like very opinionated that the process of basically designing an amm in in my experience has been like getting in a room with smart people and just like arguing for hours about trade-offs and minor trade-offs and like it's just like endless bike shedding is one way to think about it uh you know and every single decision we made impacted other things other and it's like things that benefit LPS hard swappers things that benefit act you know the increased complexity adds new features but like makes it harder to integrate and that hurts developer and every single part of the entire code base was just like a constant series of trade-offs and I think that that's what's to me really exciting about where the unisplot protocol can evolve with UNICEF E4 is you know to be used by V4 is about taking creating a basically like an amm platform where people can express their preferences and uh choose where they want to be in like the amm design trade-off space and definitely it adds additional complexity and there's a lot of things that that you know there's a lot of implications to that and I think that like people are still wrapping their heads around V3 they're definitely still just wrapping their heads around uh around before but for me at least I think that I feel really confident about it as like the direction for where this protocol should go next and so I'm and I'm personally really excited about it you know the Utah protocol has become such a like important part of the industry like it's there are quite literally like thousands and thousands of teams and projects there's hundreds of thousands of tokens on the protocol there's tens of thousands of projects that are built on top of it and to me I I view uniswap like I view ethereum and it's like it's a core infrastructure layer for you know ethereum maybe is a core infrastructure layer for more things but uniswap is still like this core infrastructure layer for creating liquidity and and trading on chain and it serves all of these different projects it's just one thing is that when you say it's like ethereum it's not only ethereum in those ways but I feel like this new V4 is also becoming more like ethereum in the sense that uh when vitalik was dreaming up ethereum part of the reason was that he was noticing that people were trying to innovate on bitcoin and the way they were doing it was adding new features to blockchains and both of you so with ethereum what he did was you know he's tripped all that away it's like a programming language and then anybody can have any idea that they haven't upload it to ethereum and you're essentially doing the same thing but for amms and you're uh I I don't want I mean I don't want to describe it but just very briefly you're stripping it down so like other people can be like oh I have an idea for an amm that you know does fees this way or that it you know does what I don't know what all the different variations are but it's like literally the same move yeah definitely I I think that that totally resonates with me and I think that like I definitely have like looked to ethereum uh as guidance for for you know what I think is like a good good project within the within the crypto space and uh has like good philosophies behind it um you know you know and there are you know a lot that can go into that and there's a lot to yeah but um definitely like a move towards greater expressiveness and customizability and generalizability and it's not turning complete like ethereum but it is closer to turn complete than you know the newest pop E3 in in that you can express more preferences and uh do a lot more with it so aside from that in fact that you know you were sort of dictating choices onto developers um there were also actual problems just like with using it and stuff so what are some of the problems that you wanted to try to solve with uniswap V4 and what are the features and solutions that you've come up with yeah that's a great question let's see so unisoft V3 like I'd say that for me some of the most interesting I say that like one very interesting starting place is fees like liquidity provider fees not you can ignore the other forms of fees of gas fees and governance fees and all that I'd say that like liquidity provider fees uh for like the longest time in unisoft history it's always been like what is the optimal fee and you know how do you set it and all of these for liquidity providers and the answer has always been like like the V1 it was like okay we're just gonna you know we don't want like we don't want to introduce some governance system we don't want to introduce some like like let's just make it you know 0.3 percent and that that was that was the number it was the magic number and it kind of worked you know in a way um actually started out as 0.25 and I was on a plane with vitalik and I we were having conversation and he said and I was like oh I don't know we're at 25 might be too low and he's like we could do 0.3 and I was like okay and I changed the code and that's how it happened that was that was all the thought that went into it um vaguely looked at uh V2 kind of had a similar pattern V3 introduced feet ears which was basically like anyone could deploy you know you could deploy pools with a bunch of different features and the idea here is that like the more sophisticated liquidity provision the the the more trading volume that's going through a pool probably like very often lower fees are better than another thing is like the the volatility of the asset like in a very volatile asset you might need higher fees to make up for uh you know losses that you might incur for providing liquidity right when you're providing liquidity you are taking on price risk and the way that you offset those losses is you take as you earn fees and so if an asset is very volatile you usually want higher fees however there is like this other thing which is that like there's there's different forms of volume there's some volume that is just driven by volatility and then there's some volume that is driven by just user demand to trade an asset and there's papers theorizing around like the optimal way to set fees based purely on volatility and if you imagine a world where the only trades that exist are trades probably going way too deep on this one very specific thing but if you if you imagine a world where like the only uh trade to Arbitrage trades you can like theorize around like the optimal fee to set but you don't know how that optimal fee will impact the user's demand for trading into that liquidity that is not driven by Arbitrage but driven by just like a desire to trade one asset for another and you know some people think you kind of think of the users as like maybe the less sophisticated and the Arbitrage Traders as the more sophisticated so it like any there is no like single way to set the optimal fee the only the only way to do it is in imagining an Arbitrage only world and so in the Arbitrage only world the higher the volatility but then there's also another factor of gas costs and the lower the gas fees actually the lower the optimal fees for liquidity providers and that's because the lower the gas fees the smaller Arbitrage trades are worth making and so if you lower the liquidity providers fees you have a lot more Arbitrage uh closer to the current price and so there's sort of like this benefit of having in a lower Network fee world you also want a lower recruiting provider if you world so there's like all of these like inner like it's kind of a complex situation and so there are like a lot of interesting ways to experiment with setting it sorry with V3 we had like a few different granular features like we had like one percent point five percent point three percent and point one percent something like a few of them and that allowed people to like better liquidity providers can make their own choices and Alec kid across them and that increased the flexibility while fragmenting liquidity a little more and there's a gas cost in post the more liquidity split across liquidity pools the more gas costs you're wasting to Arbitrage between the pools and if I want to make a trade and it's a very large trade I now need to wrap maybe some portion of my trade to go to the point three percent pool but only up until it moves to trade point three percent but then like the remaining should actually now start or like once the trade like the price impact has increased Beyond maybe a better example so if you imagine a point three percent pool and a one percent pool if you make a trade that moves the price on the 0.3 pool more than one percent you're going to want to start including liquidity in the one percent pool because the price impact of the point three percent pool is no longer offsetting the the you know the fee of the one percent pool and so these are like very fundamental problems right like the more the more pools you have the more liquidity is fragmented at the same time the more like the less you can express your prep like at the same time like there's no single best way to deter I'm in the optimal fee and the way that you know it works on an order book is just everyone is choosing for themselves and it's very efficient to aggregate that all on chain and or off chain and it's not very efficient to to allow anyone to set any fee and aggregate all of that uh on chain and so you kind of need like liquidity to coalesce around certain certain features I'll just say with unisoft V4 I think one of the most interesting problems is it basically just like says like anyone can create any system for how the fee is set you can continue to do Dynamic fees and you can continue to do like static fees there probably will still be like point three percent uh fee to your pools but there might be like and this you know feet here moves with volatility and this v-tier in this fee you know and you can create systems like that as well you know I think that like it's going to be very interesting to see like I think like entire amms have been created to just experiment with feed designs and I think something that's very nice about uniform V4 is you actually don't need to create an entire amm to experiment with C design so you can create save fee fee like a dynamic fee hook which is much simpler and easier to do than creating an amm and it's much easier to get people to trade into it and it's much more like adoption of it and just explain hook uh because you know this plays a key role in unit swap B4 yeah unified V4 introduces what we call hooks which are various points in you know every transaction on YouTube has like there's like a life cycle to a transaction like you know like for a swap maybe you like send the tokens to the pool like the price adjusts and then we'll send your tokens back the idea of a hook is that it's arbitrary like you can insert arbitrary logic when you create a pool you can create you can Define like the hook Logic for that pool like how and you can create a hook contract that interacts with various points in the the life cycle of a transaction and so you could imagine you have a hook that before every swap it runs some arbitrary logic or you can have a hook Square after every swap it runs some arbitrary logic or before anyone adds liquidity and through these hooks you can basically create and you can also have hooks that that basically adjust the fee uh for the pool in real time and maybe it's doing that by like before the swap it checks the price and based on the price relative to the previous price it has some implied volatility number and adjusts to the up or down based on that right that's the type of thing that you can start doing but at its core a hook is like an external smart contract that's interacting with the uniswap protocol is that how to think of it you can think I mean that's one way to think about it I I would I they're sort of like um how the smart contracts are organized is interesting with you and Swap and we can get up down a little bit but generally speaking you could think of it as smart contract logic that can interact with the protocol at various points within like not like today you know you have transactions that can interact with the pool but they can only interact like before the entire transaction has happened and after the entire transaction has happened but there's sort of no way that you can kind of like interject at like points within a transaction generally speaking it's like logic that you're that you're sort of guaranteed will run with every transaction that interacts with that pool I actually thought there was a there was a I listened to like a 30 second clip with uh was it chopping block or the where they were talking a little bit about that like what's different here um and like what can you do externally versus within a hook and what is like I think like an example of something that you can do that you can only do with hooks that you can't do today externally is you know a like there's a certain like so one of the features in you know swap V2 and V3 is this price Oracle and for the price Oracle to be you know to work you need to guarantee that it will have that it will be updated before the first swap of every single block and to have that type of strong guarantee you can't do that externally because you could build a router that checks the price before it swaps and and checkpoints it but someone else can always interface directly with the pool and avoid updating your Oracle and so the the cool thing about the the hook contract or the hook design is that you can create a pool that will guarantee the properties of your Oracle in a way that a routing a hook and a router could never do that's an example I think there are others another maybe example like part of where hooks came from is we had since before V2 we've had this like running idea in the back of our head and you've probably heard some of it like around like essentially a what what it would amount to like a back running hook this idea that like if someone makes a trade that moves the price away from the current market price on unit swap that creates a profitable Arbitrage opportunity that someone else can capitalize on and generally speaking if you're a liquidity a liquidity provider on a pool you want you know everyone wants to like internalize as much of the value like as they can like if someone else like if you're creating a valuable opportunity for someone else you'd rather take it yourself and so there has been like the idea of floating around for a long time of well can we create can we like have a you know at the end of every spot even swap trade it calls to a Smart contract that smart contract has the right to background that trade if it like pays some of the the profits back to the the swapper I also like an idea we've been playing or liquidity providers either way and that was like an idea we've been like playing around with in our heads for a long time and and to make that work you again you need a guarantee that every swap otherwise like the people cannot like people won't swap for the router that like if there was a router that lets you back that like if liquidity providers you know are depending on an external system to do this backgrounding then people are just going to trade through a different router that doesn't do that because you know they like so you sort of have this like um this ability to guarantee properties for liquidity providers for swappers for for whatever for for external projects that you don't get with with externally built systems uh the other thing that I'd say is that like the smart contract design patterns of building some of these things externally are a lot more complex and messy and inefficient than building them internally with hooks and so I think that that's like another important kind of factor uh where like definitely like a lot of things that can be built with hooks can be built externally but there are fundamental benefits to doing them with hooks in terms of like there are like it's like you know it's built into the pool you sort of have like there are like often efficiencies or better smart contract design patterns that you get there just to understand like who is going to be contributing these hooks like Who develops them how does it get decided what gets adopted it's a little bit like asking who's going to build smart contracts on ethereum and it's like it like there's probably a lot of people and a lot of different reasons I'd say that like some examples for one like we've built a few hooks like as even as examples to prove the system that we find interesting and useful so you know one hook that we built is what we call t-wam uh which is we can get into what that means and what it does but it essentially you know makes it much easier for people to make very large orders on the protocol that execute over a long period of time and we think that that's like an interesting feature we don't think that you know building it as its own custom amm would be a lot more work and infrastructure to maintain and uh so we we have it you know developed it as a hook we you know we built a limit order hook which we we find interesting we built you know surprise Oracle hooks so we built a few so I'm sorry I need to understand this because so the time-weighted average Market maker it's for people who it's probably like a whale who wants to make a huge order that would typically move the price a lot that would cost them a lot so what they want to do is they kind of want to chunk their purchases out or sells or whatever out in a way that it moves the Price Less which makes the trade more profitable for them so one question is like uh for these hooks um is it that the person who wants to do this time weighted you know average um you know transaction are they um saying okay for this liquidity pool as I do my transaction I'm choosing this hook or is it that there are certain liquidity pools where they say we have this hook so every time you use our pool it will always time weight average your transaction I'm not sure yeah no that's a good question a little bit so the way that I put it is that first off the you know when a pool is the the Press who determines the hooks for a pool like when a pool is deployed the deployer of that pool gets to choose what Hooks are you know set for that pool like the the pools for a hook are determined at pool creation and so liquidity providers choose to deposit liquidity to pools with specific hooks on them because they think that those hooks will like be you know are where they should provide liquidity for various reasons T wam orders are orders that people would make externally when they people would submit to um orders to pools that support tym would that have a t wam hook because they want that feature and functionality liquidity providers would provide liquidity to this pool because they actually get fees from tum orders that execute through it yeah but then one other question so um because you said like a liquidity provider can have multiple hooks on their liquidity pool so is it that um I might use the same pull but I'm not doing a t-wam transaction but I'm using a different hook that is also available on that liquidity pool so meaning like because when I I guess what I'm trying to ask is is everybody who's making a t Wim ordered like all doing it on the same pool or is it that um multiple different types of transactions are all happening on the same liquidity pool depending on how many different hooks they have two amps are like adding New Order types to existing liquidity pools every single pool is uniswap V3 like every single pool has like the built-in logic and functionality of unsolv3 I can provide liquidity uh other people can swap through it you can create hooks that like check if you're if you're providing liquidity in some way and prevent you from doing it and so like you can add restrictions through hooks but generally speaking if you imagine a pool and then someone adds a t wam hook and an Oracle hook like you can still it's still uniform V3 you can still provide liquidity and swap like normal but you would also would have this option of submitting additional a different transaction type to that same pool which would be additional you know fees earned by liquidity providers on that pool so like someone like I can make a regular swap on this pool I can also do a tum order on this pool liquidity providers provide liquidity to this pool because they earn fees on both swaps and on tym orders okay so basically hooks are optional for users yeah hooks are optional for users in in a sense you can have hooks that like constrain the logic of a pool you can have a hook that says you can only provide liquidity to this pool if it's full range liquidity and so you can like prevent people from like you can add hooks that like almost like remove features to some degree like you could have folks that add additional constraints to a pool same way you could add a hook that adds a new feature but generally speaking uh a a hook that adds a new order type is an optional order type to use it doesn't necessarily mean you can't use the other order type and generally speaking unless you have it hooks it explicitly modified uh the functionality it still is like the base the base system is still unusual uh V3 and concentrated liquidity okay so in a moment we're going to talk about more examples of hooks but first a quick word from the sponsors who make this show possible we've said it once and we'll say it again the system doesn't just need an update it needs a complete rewrite web3 offers that complete rewrite because it extends Beyond just money staking nfts defy earn web3 has become a world of its own but who has time to juggle between five different crypto apps okx wallet is one of the best apps for everything web3 it allows you to store trade earn and manage your crypto and your nfts across 60 plus blockchains all in one place and now it's one of the only self-custody wallets that doesn't require a seed phrase there's just no other wallet that says powerful yet so simple give it a try at okx.com web3 join over 10 000 attendees for this year's biggest crypto event at token 2049 Singapore on September 13th to 14th Sandeep from polygon Eric Wall Chris berniski and over 200 others will hit the stage joining the industry's most influential for an unforgettable experience added the Formula One Grand Prix race weekend Singapore will transform into a crypto hub for a week from September 11th to 17th with over 300 side events that will make for unparalleled networking opportunities Builders and investors at the bleeding edge of innovation will drive an agenda that covers the ever-evolving regulatory landscape the convergence of crypto Nai web3 gaming nfts in the metaverse defy scalability interoperability and many more visit token2049.com for 65 of regular tickets with the code Unchained Link in the description join over 80 million people using crypto.com one of the easiest places to buy trade and spend over 250 cryptocurrencies with the crypto.com Visa card you can spend your crypto anywhere and get rewarded at every step up to five percent cash back instantly plus 100 rebates for your Netflix and Spotify subscriptions and zero annual fees new users enjoy zero credit card fees on crypto purchases in their first seven days download the crypto.com app and get 25 with the code Laura Link in the description back to my conversation with Hayden so we talked about this T wam hook which you guys created are there any other examples that you feel will be either common in that you're either creating and we also I think meant to address who it is that will be contributing the hooks and how they get adopted yeah I think that's a all great all great topics I'd say that like one other maybe interesting hook example is just and again this is something that like people have tried to do in other ways in external ways but like uh you could definitely have you know at any given moment a lot of the liquidity pool but like a lot of the liquidity in a pool is not being used it's just sitting idly and so you can imagine you know you can imagine Hooks and and this is another example of something that is very tough to do externally because people have tried to basically keep out of range liquidity and lending pools and then like every as the price starts to approach like so you can imagine an important property of unit swap is that like it is like it is like solvent right like you need to get like that is an important property you sort of a guarantee that like liquidity that you're expecting to be in the pool will be like available when it's needed and with externally built systems you kind of rely on people to frequently like update their like if if you have a system where some liquidity is like elsewhere but you need it for a given swap you need to have like like there's all these like you need you need to have people that are like managing systems that are like pulling liquidity and with and like every like 10 minutes or something and then like if the price moves too fast suddenly is not available the point being that like with hooks all liquidity that's not in the current narrow price range could be stored in other contracts doing other things but then in real time if a price moves the price outside of you know like get to a point where it needs additional liquidity you could just like pull the liquidity from those other systems in real time yo yeah basically on demand within within a swap um so I think that's like an interesting category people have talked about like it was very tough to create pools right now for things that like look like you know like the wrap staked eth uh or like very tough to create pools for like fees that uh for for pools for anything yeah and so I think for like interesting hook patterns well and they will allow you to have like tools that are like earning yield in other places which are kind of interesting I do think that like experiments with v designs are one of the most important ones and will probably be one of the most used ones uh there are a whole bunch of other ones I'd say that like things around like internalizing Mev for like leaking less value just leaking less value out of fools generally and and um are pretty interesting but so I'm sure you've heard you know the chatter about all this because I think so many people when they heard this the number one thought was how do you keep this secure and you know like when I was writing my other book and I wrote about the Dow hack like something that I learned and I don't know if this is still true but the Dow hack occurred because of an interaction with an outside contract and I believe that um this is generally kind of a dangerous thing for any smart contract to have like this external contract to interact with it so how do you prevent people from adding like maliciously designed hooks that are for instance meant to be rug pulls or in general how does the security of these hooks get vetted yeah I think that it's good to look to ethereum again uh in part for this answer and I'll I'll unpack it more but like you know ethereum isn't good because you can't create unsafe smart contracts ethereum is good because you can create safe smart contracts and I'd say that like it is somewhat similar with with hooks like the same way that like today people can create tokens that are unsafe people could create tokens that are safe and like uh the same way even like these problems right now like like you know we talked a little bit about like things can be that are can be done internally can also be done externally like that's also the case for like things that like unsafe hooks can also be you know managed by creating unsafe tokens and people create you know and so I think that like what's really important here is actually that hooks make it easier to experiment in amms in safe ways um and definitely like how front ends interact with pools you know that are a little bit different right like maybe and and how users interact with pools right might be a little bit different um but generally speaking the core thing here is that like the cool the good thing about hooks is you can create they say and you can verify a hook is safe and it is easier to create a safe hook than it is to create an entire from scratch safe amm and so I'd say that like how we handle what Hooks up here to users in our interface right might be you know might be different even from what other people do with other interfaces but I'd say that like I would not you know in our own products right we wouldn't want to expose you know random LPS to pools that have hooks that we don't know what they are and what they do so then are is there some process for adding hooks that goes through like some Central gatekeeper to make sure it's all safe so it's kind of like I think it's a process for deploying smart contracts not really but there is a process for choosing what smart contracts we like the same way that like aggregators right have they're trying to create as many aggregate as many liquidity sources as they can but they're only going to aggregate a liquidity source that they deem is safe for their users and so there's no like anyone can create a hook to do anything uh some hooks might not need a front end some hooks might like be involved in the niche operations of some specific protocol we don't need to verify it because it's not meant for our users it's meant for a different project and their own users uh but for us you know we're gonna you know for our liquidity provision interface we're gonna like you know uh as as hooks are developed and as as uh you know people create liquidity and pour them into hooks we're gonna you know as hooks are kind of we're gonna like audit and verify and whatever like hooks meet our security are and have some level of usage we're gonna like you know try to expose those to our users but the cool thing is that like anything so anyone it's completely permissionless to create a hook but it's not advisable to to tell your users to go into a unaudited hook uh in fact it's extremely inadvisable you probably should never if you're operating a front end or if you're building a front end you should definitely not just expose every possible pool with every possible hook without any you know consideration okay so essentially every front end is deciding which hooks get exposed to their users is that what you're saying yeah for pools that that even need front end you know some pools don't maybe don't even need front ends but yeah generally speaking uh you know it's kind of up to front ends to decide the same way that it is after front ends to you know decide what liquidity sources they they integrate or what other or what protocols they integrate it's you know it's going from a desk to a DEX you know it's going from a decentralized exchange like protocol to like just like almost like a decentralized exchange platform and so not every possible implementation will be safe but I say that like maybe again can reference that that one like something that came up on on the the again I watched like a two minute clip but uh I thought they were very interesting uh topics but uh one of the things that came up was like around like this idea of there maybe there being like two types of like there's like kind of default configurations and then like scary everything else I say that it's gonna be a little bit more complicated than a little bit more like of a spectrum than that I say that like there's probably a default configuration that like looks almost identical to uniswot V3 uh right like you can do unisoft V3 maybe the most popular configuration actually might be unisoft V3 but removes the Oracle which saves gas right so because one opinionated choice we made in unison V3 and V2 was adding this Oracle and the Oracle adds a gas cost for every swapper to create this public good of a price Oracle that can be used in external systems but some people might not want to pay that cost and so maybe the most used hook will actually be zero Hooks and that alone will be better than V3 because it's like cheaper for certain people um but you know I think that there are also going to be like a wide spectrum of like I think that there's going to be a lot of development a lot of innovation across the ecosystem and over time hooks will be developed that modify the pools in ways to benefit people and they'll be tested and they'll be audited and they'll be like you know and and as more and more are created they'll you know like they'll start to like be more than will start to be exposed to people so it's not going to be like two worlds of like like no hooks default configuration in like any hook oh super scary there's gonna be like a whole Middle Ground of like hooks that have started to like gain some you know have been battle tested hooks that have been like you know like it might be that like there's 10 hooks that are used like there might be a power law distribution maybe a few hooks will be like massive unlocks to the ecosystem and a lot of pools will use them and you know and then there will be a long tail of hooks that like are used only in a few pools or in Niche situations or for each specific user projects and front ends it's kind of like tokens right like the tokens kind of have a power law of usage there's like but there's a massive long tail and uh it's not really like oh there's three good tokens and everything else it's like danger territory don't touch it it's like there's like a you know there's a Spectra and we we you know we're in front it's up to front ends and and users to like you know think about how they they interface with things and and so one one question um because these hooks can be used across multiple liquidity pools and we've seen in the history of crypto that there are many times when things that are audited end up having vulnerabilities in them and so what if you know I don't know like 20 of all the liquidity pools have this one hook in it that ultimately uh you know you guys realize that there's some kind of bug as far as I understand like once you deploy it's out there and I think it's the same for the hooks so then what happens do you uh like quickly whip up another version of uniswap that like doesn't allow this hook and then try to get people to migrate or like I I don't even know how that affects things do those liquidity pools just decide we're going to abandon and deploy new ones or I I don't know what you do in a situation like that what are your thoughts you could start you always could start with like the base case right like the the security of like a unit swap like it's it's kind of like what happens if there's a bug and you saw V3 like all it's like right now all V3 pools like use the exact same logic and it's been very well battle tested people now feel pretty secure in it like I can tell you while we tested it like harder than anything we've ever tested before like at the launch time it was still scary as a developer because yeah like announced the other day I meant to look at seven and V3 yeah and V3 uh I don't know I mean I know the thing is processed like one and a half trillion in volume I don't think that there are any major bugs that can cause anything maybe not somebody said this but yeah now I definitely see maybe it's referring to a bug in V4 which is reasonable there was a user bug report you know part of the build building public um someone had found before I will mention that V4 hasn't even been code Frozen let alone audited and so the bugs are expected at the stage right part of the idea of like opening it up this early you know I'm sure we would have like eventually caught that and it would have made it through auditing but it's actually much better and faster to have people out in the wild discover them and report them and fix them uh so this is that's kind of relating to the building and public thing I'd say that generally speaking the kind of idea of a hook that is unsafe is very similar to like an amm that is unsafe right people can build you know if people wanted to experiment with new functionality in amms today they would build a new amm from scratch the surface area for doing that experimentation is much scarier but you in that world you have to audit the entire you don't just have to audit a hook any limited constraint of things you have to audit the entire system so if you want to create some new amm functionality but if you want the base case a unit swap with no new functionality then you can use no hooks uh if you want to add functionality the surface area of what you can build with a hook is much more constrained and it's much less likely to have a bug and it's much less likely to you know to to have a security vulnerability um and and definitely there's like it's not impossible for a hook to be unsafe but it's easier for a hook to be safe like what what Hooks are replacing is like custom logic and amms or externally built things and those things are just as likely to have vulnerabilities if not significantly more likely right the things that hooks replace are either like things that are built externally to pools that try to like add on additional logic to it or things that are entire new amms and both of those are much riskier than building a hook so to me it feels like a significant security upgrade for for people that want New Logic I totally get that but can you just play out my scenario like if that did happen what would you do if if there was an unsafe hook and it but if it was one that was popular like you know affected a huge percentage of the pools I mean I think like an unsafe Hook is the same as like an unsafe amm implementation for the pools that use that hook so like definitely like you wouldn't need to migrate liquidity to a new version of the protocol you would need to like withdraw liquidity from the those hooks and if you wanted the same functionality deploy a new hook that fixes the bug like you could migrate to a new pool like you don't need to exit before you just need to exit the pools within V4 that that have those hooks um in in that world and also cut off any any way in which other pools might interact with those yeah I think that like generally speaking like there's like today right in yourself there's like external like the their accounting logic is partially just using like separate smart contracts and so each smart contract is keeping track of its own balances and they don't interact with each other there's definitely like and before there are like all liquidy pools exist in a single contract and so I think that that aspect does um I think for some people you know evoke like oh is there like some sort of a contagion type of of possibility across pools right but I'd say that like I don't know maybe that wasn't what you're getting at but like I'd say that like that probability I'd say it's still like if there's a bug in unison V3 it affects all pools and so like you still have the same like a bug will affect everything and so and before a bug would mean that like our accounting logic is broken that prevents pools from like you know certain interactions like it's sort of like it's like a similar class to book like to me like a you know the ability for Pool Stop contagion between them would be a similar class of bug to like be three having a bug that like you know it's like fundamentally broken generally speaking like first like there have been other projects that have done single tin style designs right great balance of V2 has been out so many years before we before you go into that make sure to describe Singleton like yeah and I totally forgot because yes for you had a new contract for every poll it was expensive now you're going this Singleton contract route so describe one Singleton and yeah Singleton is just that all all pools live within a single smart contract and that makes it much today when you do a trade that about to cost many pools and has many interactions the the sort of uh need for pools to communicate with each other tokens to be transferred between pools directly that adds a lot of gas cost and with use and the cost of deploying a pool involves creating an entirely new smart contract um with Singleton the cost of deploying a new pool is just like updating a little number within a smart contract and so the gas cost of dribbling pools goes down 99 which is which is pretty nice approximately you know um the code isn't Frozen so you can't really promise gas benchmarks and then um the cost of Trades that route across many pools all like internal transfers but between pools you don't have to really pay nearly as much gas cost for them because it's like updating internal balances instead of transferring them between smart contracts and so ultimately the purpose of this is to create great much greater gas efficiency when routing between multiple pools and to much and to significantly lower the gas cost of deploying pools as well and okay so yeah because you're right when I framed my question to you about if there's a malicious hook I was thinking about the different polls as being different for contracts but you're right thank you for reminding me it's a Singleton so then that makes it feel even more alarming to me but why are you seemingly not very alarmed yeah I mean I think that this is one of the reasons why we like really benefit from being in this ecosystem where a lot of development is happening and like and like we've got we've you know even like seeing that like bouncer did it and like it has worked for a long time for them has given additional confidence but I'd say that like generally speaking like you know these these smart contracts like they're they're open source today like they're they need to be very well tested and they need to be you know very well audited and uh we've seen you know other projects have done similar designs I mean like generally speaking we need to like yeah like you need to like test it like a spaceship right like it's not but at the same time like that was already the case like you could have separate pools and you'd still need to like if like V3 was like also terrifying in its own way because it was like a complex smart contract code base and the probability of there being like you know a bug in Singleton is not significantly higher than the probability of there being having been a bug in V3 and I'd say that the kind of process one of the one of the reasons I'm really excited about this like slower build and public rollout process is it gives a lot more time for a lot more eyes on the code uh before it goes out so it's like an additional layer of security uh from that and go into detail on that so like you know you just made an announcement about V4 but you didn't actually deploy it which is what you did previously when you had a new version so you've now publicized the code so what are the steps before you actually deploy yeah I mean I'd say the steps right now there's there's no specific timeline this depth right now is like we put it yo we put out a vision for what we think unusual fee for should be if we were like if we were to follow a V3 style path we and put it out like what we do from now is we probably spend like several months cleaning up the code base and improving it and optimizing it what's happening now is that it's it's public there's like a time for people to read and digest the code base would be integrators would be hook Builders people who have like experience with amm design people have an opportunity to look at the code base uh think about our vision for it give you know that we have contribution guidelines in the GitHub repo people can open issues and with with things that they think are good about or you know needs should be changed or or bad about it they can if there are open issues that that you know they can create they can write the code themselves and create pull requests and and propose modifications to the code base they can you know look for bugs they can fix documentation all of this has already started to happen people have already started you know Finding bugs finding optimizations opening opening issues and it's like massively accelerated how fast certain things have been like like we would have eventually probably but it would have been like a much longer process and I'd say there are a few things that might factor into when this thing actually launches I'd say that one thing that probably factors in is like definitely you need like several months of it being public I think to like really adequately have time for people to give their input uh discover optimizations discover bugs um obviously there'll be a uh so that's part of it there is a kind of interesting aspect where this Singleton system we created is combined with this other thing that I don't need to really get into called flash accounting which is really just how we do the logic for the accounting logic um in a way that like is more optimal for running across many pools and and the and that the the optimal form of this like this the way that we handle Singleton in the accounting logic of creating all keeping all pools solvent and efficiently routing across them is made significantly more optimal by an upgrade coming ethereum upgrade uh EIP 1153 and it was you know it's slated for include for inclusion for the Cancun hard Fork it's a you know very like it's not only useful for us it's useful for many other projects in the space it's a very cool upgrade that just makes it cheaper to up you know to to temporarily store things within smart contracts right transient storage it's just about it's like a temporary form of storage meaning that it's like similar to like a flash loan where you can borrow something as long as you pay it back off the end of the transaction uh transient storage is just you can use storage as long as you delete it by the end of the transaction in the world where you do that the cost to ethereum for temporary storage is much lower the cost on an ethereum node for temporary storage is much lower than the cost for permanent storage um kind of intuitively maybe makes sense and because you know that's one thing that the nodes all have to update and store something new forever and and the other one you know nodes don't need to actually update it they just need to like verify the logic and so that upgrade makes new soft V4 significantly more efficient and in my opinion it probably should not be deployed until after you know so until after transient storage uh goes live on ethereum and then there are some modifications that would need to happen to the smart contract at that point to integrate with transient storage so if you were to like give a ballpark estimate of when you might actually deploy what would you say now I say that like essentially what you need is you need to you know there's several months of community input feedback then there's probably like as a code starts to ossify hopefully you know it's probably like uh in in the world where the community kind of goes with like post post trans and storage which I think is very likely because it's just much more optimal probably would be like a few months after Cancun hard Fork uh at the earliest because you kind of need time to like integrate with with transient storage and then after that frees the code and then go through an auditing process and so you don't really want to audit the code too much until the code is frozen you don't really want to freeze the code until you you've made any modifications if the transient storage you know so I'd say that like if the you know Cancun hard Fork happened in September and I don't know if it will um but it might um then maybe it could go live in like November December something like that that could be a timeline but I but I don't know it's not really fully up to me it's like there's gonna be like a social you know there's been a lot of conversation on social consensus I think there'll be a little bit of like social kind of uh convergence on on on what is what makes sense to do here all right so I'm sure you've also seen in addition to the chatter about potential security issues with um uniswap V4 that people also are talking about the new business license which um this appears to have happened after the sushi swap incident when you know famously a copy the code and did a fork and did this vampire attack on uniswap as we discussed and I wondered you know after that you went to this two-year license where um people could not use the code for two years they could see it but not use it and with this version you've extended that to four years why did you decide to go with um a a business license at that length yeah I think it's a great question and I think that like there's also been like kind of General chatter around like what is open source what is Source available and I think that like there's definitely like definition and I think that like definitely be busl is is like you know different from GPL and MIT and I think that like people say that's sorts available about open source is like Fair like totally fair and like you know I don't think that there was any like intention to like muddy the language there on our part okay yeah people yeah took issue with the tweet that says we've open sourced V4 I think that like source of Open Source is like a verb Source available isn't but but we've made sources again it's fair I think it's fair there wasn't like an intention in that I I do think that the USL for what it's worth is a little bit categorically different from other you know types of proprietary licenses in in a pretty meaningful way and I think there's a reason that it has had significant definitely like we were one of the first projects to use it but many other projects use it now today um and it's and I do think it's like categorically different than than you know a fully proprietary license and what I mean by that is you know the way the USL works is that after some amount of years it it sort of is like forced to go GPL uh it's guaranteed to be GPL and it can only be accelerated it can't be extended and GPL is uh when projects can use your code GPL copy left which the GPL means that like yes anyone can Fork it uh but they also have to go open source it's sort of a there's like two types of Open Source it's like you know like like GPL is kind of like the viral form of Open Source where like anyone can integrate it but they also have to become open source is that also the term copy left GPL and copyright okay and then and then MIT like anyone can use in any way and they they don't need to open source so for an MIT code base someone can integrate it into their project and you know have that project be closed source and so it's not like viral in the same way I'd say that you know what's interesting about BSL is that it's like guaranteed to eventually be open source right so after four years or at four years or earlier V4 will be GPL so there's like sort of like a there's like a Time window for which it is proprietary and it's like fixed at start and it can only be accelerated so both uniform labs and unit swap governance can independently you know you know uh Grant like additional licenses or um and governance can actually shorten the the the period of time for which it is for which it is uh open source um until it shortens the BSL time and makes it full GPL I will say that like a lot of the like early I think open source first off we're like massive open source fans here like almost everything we do our wallet fully open source which is more than more than most wallets for what it's worth um our our web app fully open source you know usual V3 which was BSL two years ago is now GPL in a fully open source you swap V1 V2 uh the things that we've built in have been Fork thousands of times we've benefited from those Forks we've like you know benefited from The Innovation that's happened on this park we're we're I think we're really big fans of it I do think that like some of the like early like open source kind of philosophy didn't necessarily factor in this like World of crypto where you have like like within days economically incentivized you know thousands of economically incentivized Forks when there was a period of time where there was probably like 20 unisoft V2 Forks per per day and they were all creating incentives and they were also with low quality as well and so I think that the the idea of like BSL is a little bit like one I think that like first off it's in part an acknowledgment that maybe it's not just just Labs that should make this decision so uni holders actually do have there's an ens subdomain that is like uniswap Dash license.uniswap.eath that governance controls directly and if they want to like modify like if they want to make it GPL there could be a vote today so part of it is like going Beyond Labs other other stakeholders can can have a a say in this decision um we which is interesting and kind of an innovation in licensing on its own right um and I'm sorry you said the token holders can do that yeah there's uh the the gov uniform governance directly controls an ens name uniswap.eath and there are subdomains to that ens name that can be updated by governance votes and the official license of unified V4 if you read the text says you know the the change date with change date is when it goes from uh BSL to GPL um is uh you know four years from now or sooner at any date specified by the text in this ens file uh and so governance can actually directly vote to shorten that if it wants to um so part of it is like maybe this isn't even just our code base maybe this is like a communities code base and and they can decide um uh if they if they wanted to be forkable sooner uh but but how did you come up with four years after you already did the two years because the two years was kind of controversial but now you've doubled it so a lot yeah yeah I think that like I think that you know the two years look partially I think that the two years like there were probably like voices but like I say that like first off in the lights it's kind of like worked pretty well in a sense where like it prevented a bunch like a lot of low quality folks from happening super early on I am interested to see how people build on top of V3 um at this point but at the same time I think that like I don't know I kind of think that that decision should also be up to like the broader community and ecosystem and I think that like there were definitely uh you know concerns with the community around like maybe this should have gone on for a little bit longer and uh I think one thing that is really interesting is that we actually one of the reasons we chose two years is that we thought anyone could rebuild this in two years turns out no one could and so I think that three years is interesting uh as well uh or four years is interesting as well I think it's partially it's just like a decision you can't reverse so I say that like you can always we can always you know it can always be shortened through a governance vote from four to three to two to one but you can never extend it and so the thought was that like it was kind of successful for the use of community uh the the USL license and I think it's a big reason why a lot of other projects have adopted it to that issue with the Wormhole thing on deploying to BNB I don't remember how what the whole thing was it was like you guys wanted to deploy there and then there was this issue about the bridge and blah blah and then it was like getting close to the deadline of the two years and you were worried that somebody else would deploy you to swap on BNB did all that play a role in trying to extend it Beyond two years no I actually barely fell I thought I I barely actually followed that that one I I funny I I'd say that like um there definitely were I'm trying to remember the situation I think they're like definitely there were like governance votes on the bib chain deploy in part because the license was going to expire and there was some desire within the community I think maybe when you say you I'd say that it wasn't I actually wasn't like you know it's but um but yeah there were like proposals um governance proposals that were voted on uh and there was like a time in consideration uh mentioned in those proposals um but no I don't think that that was like the the you know solid influence I think it's more just about like maybe just in everything in V4 design to be like kind of flavor favored some level of like flexibility and optionality and like the the sort of period of USL it uh is like irreversibly in One Direction and not irreversible in the other direction and so you know if if the community really like does not if and again they're sort of like different communities right but like if the uniform Community doesn't like the four-year license they could there could be a vote to shorten it it could never be a voted extended so that's yeah mostly for PR reasons it's not like they literally couldn't extend it it's just that no no they legally can there's no license like the license is no River like it legally cannot be reversed uh in four years no matter what the vote no matter what community votes on it can never it is guaranteed to be GPL and that's I think that what I say when it's like when I say vsl is like categorically different than GPL okay is that it's like oh sorry nothing GPU obviously it is but then then like a different proprietary license because it's like forced to go GPL uh after you know and so there's nothing I can do or anyone can do to make this code proprietary Beyond four years from now okay I see so I also want to address another thing that people have been discussing um there was some chatter that uniswap kind of borrowed some features from clocks Croc swap initially people were using stronger words like plagiarize but once I dug into the details it's more like maybe it was inspired by is perhaps the or exact phrasing um but I just wanted to give you an opportunity to address any of those criticisms or just clear up what happened yeah I'd say that like generally speaking can definitely there was no no plagiarism in fact a different a different protocol recently accused us of plagiarism and then uh because they thought that the that the code was written because they like looked at like a commit that showed it 11 days ago but if you actually look at the real community history that extends from before it was open sourced our our implementation happened a year before their implementation so this was not  swap thing but there was another there was another thread that came out but um definitely no plagiarism I say that like generally speaking like there's this funny conversation that happens which is like who invented uniswap that's that's a really good question right because um some people say I invented uniswap um some people say bank or Bank of The Bancorp team says the vancore team invented uniswab um some people say vitalik invented in the spot some people say you know um some people say that uh Alan Liu from gnosis he wrote a blog post that inspired some of you in swap work and some people would say Alan Lou invented you the spot another you know interesting question that people say invented you swap uh this would be like I believe Tyrone uh tarun Anthem would be like this math economics professor in the 1970s invented uniswap and like the and the the reality is that like you know everything is built on top of everything and everything is like and uh also and it's like two different ways sometimes you like you know you you look to inspiration and like I say that like even like seeing how like the bouncer handled bouncer V2 in the Singleton like did like make us feel a little bit better about Singleton as a design pattern and it wasn't we the way we implement it is actually very different from the way they implement it for what it's worth like we have a pretty different approach to it um I like I I there's a lot of protocols out there there's been many protocols I've heard of cockspot but there's been many protocols that have claimed you know spot plagiarized them that I haven't even heard of before until I've seen the tweets claiming plagiarism so I I say that like generally speaking like good ideas like like of like some things are like kind of like convergent like if something is a good pattern like multiple people sometimes converge on it as an idea at the same time uh additionally like sometimes like you know sometimes you do hear things and they make their way into the common sphere and you think about them and you they influence what you're doing I think good protocols do take the best patterns that they see around them for sure it's not plagiarism to like you know learn from learn from the industry you're operating in um uh you know plagiarism is directly cop you know directly copying code and like drag like so I'd say that like generally speaking we exist in this world there's a lot of innovation that's happening around uniswap there's a lot of interesting design patterns we're learning from them we're also having our own ideas and we're like converging on what we think is the optimal am design and I I don't know like the specific features I I lit I don't even know if crocsoft is open source yet I don't know the specific features of that protocol um yeah um yeah it was something like whatever they use some technique for one problem and then you guys had borrowed the technique to a different problem it wasn't like apples to apples or anything like that and I think that two people are friendly um but you know again it's like I think they had um one of those licenses um whatever it was that yeah the copy left one where um if you use it then you should be also copy left again they didn't you guys didn't copy it exactly so that doesn't apply really um yeah but anyway I just saw so many people talking about it I figured we should just address it yeah there was another there was another one where there was like um that came up like also the fact again a lot of people want to be like oh yeah we didn't but um there was like one that came up where like there was like an MIT version and a GPL version of my library and like we linked to the GPL version even though there was an MIT version in the MIT version we could have until we like you know accidentally linked to the wrong version but like so there's like there's things like that that come up we like always appreciate like you know these types of things but at the same time like uh you know we also like some of these like we've been like V4 is built on ideas that we've been like trying to build for like five years right it's like it's not it's not um and and we've tried to learn from the best of our contract patterns in in the industry but there's no not no specific accusation I've seen so it feels like it's had any any real way yeah so Sam comedian of frax tweeted under appreciated benefit of all pool tokens living in a single contract in univ4 every stablecoin's Blacklist function is effectively dead and I saw that in the replies um Columbia business Club Professor Austin Campbell said that this poses the risk that the U.S could put a freeze order on uniswot V4 or blacklisted I don't know have you looked into that risk and is this something you're trying to mitigate for uh I don't think that I think that like things like this like people use DC is a token that has a blacklist function like they could already be like you know they could already like Blacklist any even spot pool um this idea is definitely that like oh maybe you like the you to Blacklist one you have to Blacklist all of them but I think that like the way that usdc Blacklist has been used historically has been always to like you know targeted individuals not at like entire you know protocols right like technically like you know it could like also like mess with like you know maker Dao or Ave and um I I don't think that this is like you know they're like the sort of idea of like um to me it doesn't feel like there's any like categorical difference here from like what's already been out there in the world like there is some like oh it's like harder to be like more targeted at specific unistop pools or something like that but you could still like freeze like usdc for any like user who would want to withdraw from their uniform like and again it's not I don't know I think it's like it's like a funny observation I guess in a sense but it's not like a in my mind it doesn't really change the like fundamental you know dynamics of what what is possible and isn't possible with the usdc uh Blacklist I think it's like about the same just that in in some in some capacity I don't know okay so now I have a question and um you I'm sure are very well aware that U.S Regulators are looking at ways to regularly defy and one of the suggestions that we saw like potentially making its way through Congress last fall was the notion that the front ends would be regulated and when I was you know learning about kind of these hook contracts and everything I couldn't help but think oh could a hook be used to implement like kyc AML and you know maybe that might require us to have like blockchain based identities so it could be like super far in the future but I just thought oh is that like something that Hooks could be used for like is it possible to create um I mean it's it's like trivially possible to create pools it for what it's worth it's already trivially possible to create pools that require kyc like you can create a token in the transfer function requires kyc and then only people will only be able to swap with that token if uh if if they are kyc'd so like that's already yeah yeah because there's already kyc D5 yeah okay right and so like yes you could instead do it within a pool instead of within a token I don't think there's like again like I don't think there's like a categorical Oracle difference in terms of what is possible um I think that maybe like is it more gas efficient maybe it is I don't know but it doesn't like that doesn't to me seem like a like a a meaningful like uh like like difference in like capabilities in terms of like what you know how regulation plays out that's obviously very you know that's that's like a separate thing and I think that like there's no like I don't think that there's like a direct suddenly unit spot V4 like it's like categorically different in how it interfaces with something like that I'd say that like you know yes it is possible to create hooks that do that but I don't think that like it's it's also possible to create pools in fact people have already created pools that do that historically people have created tokens with whitelists that you know and created pools on unisoft with them and like those have existed for actually those they were ones that existed back in the V1 days that did that um oh interesting there was uh that project uh Realty uh it was like real estate they were tokenizing like houses and they created a white list and you could only you know we I don't think we like Anyway long story short there was like there have been projects that have been playing with this concept since like the beginning of time or since the beginning like for a long time but like I don't think D4 is different on on that front um it's like always been possible it's okay it's never been like hard-coded into the protocol as a requirement I think it's like a decent it's like you know I and I see uniswap Lake I see ethereum like I see the Internet it's like a decentralized piece of infrastructure that you know that you can that can that can you you can do a lot of things with and you can definitely like it's you can you can both break the law on the internet and comply with a lot on the internet the internet is the internet and I'd say that like you know when you're building a product on top of a decentralized protocol like you should definitely like like we obviously always like you know like there are a lot of things that we do in our front end to make sure that we're compliant with like the laws that that you know in in the jurisdictions in which we operate like we have lawyers we we you know we do things to protect our users Etc and so I'd say that like maybe the only thing that I'll touch on with like laws making their way through is like generally speaking what is a little bit uh unsad and unfortunate is that like the US's approach to regulating crypto has been you know is is not been very very thoughtful or very good and it feels like the US is like way behind other countries in terms of how they think about crypto and how they're approaching regulating it um you're starting we're starting to see like European countries uh you know France the UK like start to like try to understand defy and like study it and and be be thoughtful around how they interact with it and what to do with it and then you have the US where it feels like it's mostly like political grandstanding and are you thinking about moving anywhere because you live in the U.S I mean I'd say that like generally speaking like I first of all I mean I love living in the U.S I don't I don't want to move I'd say that like we do always consider like oh like should we ever open up an office somewhere else but I'd say that like generally speaking um you know uniswap has users all around the world right the US isn't the only country that exists as much as sometimes people pretend it is and so like 70 of our users are outside the US um I I you know I don't know I I like where I live um don't don't intend to I I also you know uh do do my best to you know I just I I you know I don't feel like oh I'm like in like legal danger living in the US because I you know I'm very thoughtful about the legal risks I take on and people get very mad at me sometimes when you know our company makes decisions uh based on you know managing our legal risk but sometimes sometimes you gotta do it so um we've alluded to this throughout um but it does seem that you know the way this is going other projects that might have thought of building their own automated market makers might instead now just build on uniswap and you know because of all the customization and everything it sort of feels like it could become kind of like the Amazon of this type of activity you know this sort of like everything store for anything swap space so I was wondering if you thought that would affect the core principle of decentralization that crypto is built on but look I think that you know I I don't I don't really know I don't think so I think that like look anyone can always you know compete with it anyone can always like you know uh build an alternative amm system I'd say that like the ability to customize more with it like I'd say that like if people are using unislav because it is better than Alternatives it's not really like it automatically essentially like the the important thing is that like you can compete with it the you know like it's definitely I'd also say that like there's a difference between like the types of powers like it's still like the cool thing about us V4 is it's still an immutable smart contract right like like even though like it might gain like momentum and traction and network effects like that doesn't give like me Hayden Adams as like the person who created the company that did a lot of the initial development of it I still don't have the ability to like steal everyone who uses its funds right like I still don't have the ability to like prevent someone from like I don't have the ability to prevent from someone from using Ubisoft V4 like someone can build a project on top computers before and uh you know and uh yeah they're you know uh too soon I guess but I other um like like the sort of like fundamental like what matters like the fundamental properties right like ethereum gaining market share relative to other l1s doesn't like centralize the industry necessarily I'd say that like it's you know in some ways like the bigger theme grows like the more decentralized it is and so I I I I don't think that like you know in a world where like I had a secret back door to uniswap like maybe that would be really bad um I think that like generally I mean not maybe that would obviously be very bad um and that would be a very centralizing Force but I'd say that like the protocol you know in it sort of in the sort of like decentralized state that it reaches and the sort of way that the smart contracts are immutable and and all of that I think is like um if it continues to gain in market share and growth like it doesn't automatically mean greater centralization because there's no like single person who has you know inherent control over the system and so you know uh they're actually yeah yeah that's such a good point I just realized you're right like it it just creates like um almost like God I'm not a biology person so hopefully an environmental person listening to this won't get mad at me but but like I think of like like certain ecosystems or you know like you go into like a forest where there's Moss everywhere and you just imagine like there's all kinds of activity happening on that so it kind of creates like some sort of habitat for like all different types of developers and whatever to to build on so um all right well Hayden this has been such a fascinating discussion thank you so much where can people learn more about you and your work uh yeah people can learn um about me and my work I guess I'm I'm often on Twitter you know swap on Twitter at uniswap uh uniswap.org um you can uh read about the protocol contribute to it at uh you know in on our on the uniswap GitHub you can download our Mobile Wallet if you like mobile wallets uh you know you just bought wallet um launched recently um but yeah learning about our work just you know uh listen to this podcast episode you already finished I guess um listen to other podcasts I've done recently read our blog um I don't know yeah all right it's been a pleasure having you on Unchained yeah it's been great being here probably you shouldn't wait five years until the next time yes we'll have you back sooner all right thanks so much for joining us today to learn more about Hayden and uniswap V4 check out the show notes for this episode Unchained is produced by me Laura Shin with all from Kevin pukes Matt pilchard Zach seaward Juan aranovich Sam sriram chinni Hogan Jeff Benson Leandra Camino jamdar Shashank and Margaret Correa thanks for listening foreign 
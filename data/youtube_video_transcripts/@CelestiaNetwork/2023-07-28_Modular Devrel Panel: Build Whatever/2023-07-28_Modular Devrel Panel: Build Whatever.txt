uh we also have a special guest here today Daniel from scroll yeah a little Cameo up here I was gonna just try to act like I was Tina but whatever works yeah you could yeah I think I think you do a fair firm uh impression uh hi everyone I'm uh I'm David Phelps uh I I am not a devrel I am a founder of a project called Joe craze where we build Unchained contests that are really used for customer acquisition and retention which means my job is talking to devrels all day because they're really I think the people in the ecosystem who do the acquiring and retention of our users who are devs um so I'd love to talk about that a bit and I think like to start um I I guess an open kind of question I have is like you know what is the responsibility of getting people into this space um versus like what is the responsibility of getting people who are already in the space into your specific project and how do you think about that um I I can start so when it comes to getting people into the space you have to think about it from their developer Persona like are they coming from the gaming sector are they coming from the web 2 sector in Denver each one of them you have a different strategy for like onboarding them into your specific platform but for people already in this space who understand those technical um um complexity that come with webtree you definitely have a different strategy for the developer's Journey um for web three people so it actually depends on the developer Persona that you you're targeting so first celestial I mean we're modular we go for everyone right but like there are priorities obviously yeah yeah I mean it's it depends on what is the priority so right now we really like evm developers um because evm is the biggest uh developer market for web3 um and we also uh looking at Cosmos like we focus on Cosmos um and within that people who want to build in defy or gaming or nfds each one of them would have a specific kind of developer's Journey so that we onboard them with their favorite smart contract language do whatever demo application they want to build so that they know how to like add complexity over time and build their dream products I think generally all the devrels here and all the devils in general see themselves as Educators so I think all of us see our roles as bigger than our companies because people up here I don't really know exactly but we've all worked at different protocols no one works for one project for like 20 years and that's the only thing you care about onboarding too so I think at least for me speaking like I like meeting people where they are and for me getting them onboarded into my specific project matters less just because first and foremost I believe in education I have like certain principles that I stand by so for me it's more important to get people thinking about blockchain and meeting people where they are if it's like they know nothing about it then we go there if they're like I really want to like spin up my own roll up then like we go there yeah as for me I I don't do what you describe I don't have an overarch angle I like educating people but it's a mean to an end and my objective is to get as many people building in my in my ecosystem right so I guess one of the challenges where do you draw the line as to what people need to know and that's what you were describing right you have to Define your user Persona my perception is that especially when you're a small company and we're in a small ecosystem you got to focus so there are some people I just don't talk to I have a bunch of resources to point them and if they want to pick these up I'm happy to help them but the people I go after and I make sure they follow up I tend to draw the line to a pretty small number of people so I tend to focus on specific uh developer and specific developer category um usually defined us usually like we don't do a lot of Outreach we spot people on social media we ask questions and then we follow up with them yeah exactly yeah but I think like you said maybe we just have different kind of profiles because before I was in crypto I was an educator I taught cater to talk computer science so I just have a different view of what devrel looks like I think yeah I think for any of these right like oftentimes devrels are you know a developer's first Contact in the space with any project um whether that's through YouTube videos or being at a conference like where the accessible piece of our projects and so um I'm happy to have lots of conversations with people that want to build on starknet or want to build anywhere else right like um I think we have kind of a responsibility to give developers the best experience in the space to keep them around in the space like that is the thing we're still trying to do and if that doesn't mean they land on scroll like no real skin off my back honestly right like I want them to have build the best products they can and so if that means I can make connections to other folks like that's that's great too all right so let's make this a little bit spicier I think everyone's given the nice answer here which is we all want to grow the pie for the ecosystem get more people here but you know there are some L2 Wars going on right now really uh and you know so I'm especially curious we have two great you know L2 if we can call if we even use that term anymore uh devrel's here and you know there's been certain battles between let's say you know scroll versus polygon I think has been you know a pretty it's like the WWE for you know modular people uh to follow on Twitter um so like I am also curious like I mean how do you think about you know differentiation uh with competitors on you probably haven't you know easy answer for this one with Cairo which we'll come back to but um like how yeah you know to what degree are you are you really competing with you know others have very similar Tech but maybe different ideologies or different communities you know and different values uh in in and and to what degree is that play a role in in your work and Daniel would love to start with you on this one yeah I mean I think you named out a lot of the things that are differentiators right like maybe at the tech level if I'm not talking to someone that's interested in protocol level research stuff they might not be too interested in the difference between zkevm back ends and zero knowledge proofs right and so there's no reason to really get into some of those details if we think that um yeah so again like I view devrel as a social practice not just a technological education thing which education is social too but um at that level um I think you can let how you interact with devs how you engage them how you like see and try to meet their needs be a differentiator right and like other teams do great devrel and it's great to look at them and be like they're supporting their developers better than we are like what are we doing wrong here what can we steal from them to like better support devs um but I don't know maybe that's the too nice of an answer but yeah I mean those are the categories of different but what's what's the specific differentiator yeah I guess it is um but there's a there's another aspect too where it's like you know the background context being like obviously the polygon folks are like brilliant right and the worst engineer at zkevm is like a far better Dev than I am right so like um I think I can talk about like what drew me to scroll which is like this kind of like really true intention of being Community First and like trying to engage with individuals and less of like a transactional relationship with the people that are like maybe building on us right um and maybe that just kind of like comes back to to my interests personally but I think we're all trying to solve a really hard question which is if we're like sticking to certain crypto ethos at least that I believe in is that we're trying to solve like multi-million dollar engineering things like that's the human capital that it takes to have this happen which brings in VCS in the world if there's vzs in the audience I love you but we also don't want corporate capture of these protocols and the technology that we're building right and so um doing our best to make it clear and to like make sure that there's Pathways that say like as we're building scaling solutions for ethereum we have to scale the technology but we also have to scale the community and the ethos and the things that actually make it special or else we'll lose ethereum before we end up getting these billion users right so um the way I approach the phrase differentiation when people be like okay so why should I build on Celestia over ethereum because of 48 44 or um polygon of veil or eigenlayer and one of the biggest differentiators actually drew me in was that we don't have an execution environment and that's so liberating we don't really care what people's execution environments are so if you're coming from the evm world you can build a roll up on top of Celeste if you're coming from the Solana world you can also build a roll up on top of Celestia compared to any what you would call competitors which I don't really call competitors but they're all attached to one execution environment which is the evm and they're very limited in the kind of market share they can capture and developer space whereas because we're actually like more like we don't have an execution environment that for me with the biggest differentiator any kind of L1 that comes out right now with a unique execution environment the way I see them oh that's a cool new roll up on top of Celestia so that's how I approach it can I ask you a question about that I feel like there's like something interesting there where as a product you your your developer audience would seem to like stray a lot from I think these people just building smart contracts right like doing protocol design that needs your product is like a much deeper tier of knowledge and experience and other things and so do you feel like you're you're put in a position to like suggest a DA layer as a solution to things that it's not a solution for or do you just try to mostly hone in on these I guess like maybe the underlying question is like how many Roll-Ups do there need to be and like how do you see that for for like talking to devs about what they're trying to build yeah so the challenge there has been like initially coming into Celestia like my assumption was like you know the whole thing about it was deploy your roll up as easy as deploying a smart contract but to capture most devs in the smart contract space they're like you know they come with a smart contract go they're like they're so excited oh modularity and stuff and then they go to the docs and the first thing they got to do is run a node and then deploy a roll up and they're like wait a second I just want to deploy my smart contracts and play around with things right so that was initially an interesting challenge to try to address because you want to capture two different types of persona that emerged as a property of modular uh ecosystem one it goes um smart contract developers and then there's a new category called that I'm calling roll-up developers and the roll-up devs are what I would consider emerge between the application smart contract devs on the upper layer and core devs on the bottom layer because it allows you to mix strengths from like deploying a roll-up and then deploying a smart contract on it but it was a gap in the beginning and how I addressed it was we deploy testnet like so I have a big test net driven development strategy for onboarding developers so that the first thing they're if they're interested in an evm we provide them a test first so they can you know deploy their smart contract they're like okay I'm playing around with it and then take them and do the roll up if they're interested to deploy a roll-up which could be like a few lines of code for them that's actually a good story because I remember like six months ago or something I was helping the East Denver team organize like a pre-eat Denver Workshop series and they were like we specifically want to get like people who were maybe thinking about hacking for the first time like pulled all the way in so let's do some really easy beginner workshops for something that they can come to East Denver and do and feel you know feel proud of like yes I did this one thing for the first time and I remembered that was kind of one of my worries when Josh my friend at Celestia was like can we do a Celestia one and I was like well these are people who like maybe have never coded before like have never done anything in crypto coding before so I don't know if they're gonna be able to like deploy their own roll up I don't know if that makes sense and Josh was like no like it's gonna be easy and I was like I don't know like they're people who don't even know like how to set the solidity version of like in the compiler and we ended up doing it and they ended up finding a way to like address it but I do remember at one point in Celestia that was something that I was worried about is like how do you capture the vast majority of developers when the vast majority of developers are not protocol developers but rather app developers so it's good to see how you guys have solved for that in the last couple of months like the answer test Nets like for every new architecture that you want to build like let's say it's uh let's say it's an Emerging Market kind of evm test net uh it kind of you know L1 that wants to become an L2 on top of ethereum stuff you can build an architecture for that we have a thing called the quantum gravity bridge where it allows you to roll up to settle on ethereum or any other settlement layer but take data from Celestia so from for the application Dev they'll be like okay that allowed me to have an optimism roll up that is scalable for my application but I don't know if I'm confident enough in running that roll up on a you know in a test environment so you provide them a test step for that architecture for them to see the benefits of scalability otherwise might want to do a sovereign roll-up which what we call um that allows them not like um to pay a fee to the share you to the settlement layer and stuff to become sovereign in that sense and people might be interested in that um and see what that architecture is like we provide them a testament for that um so for any kind of specific architecture you we just give them an RPC endpoint and a faucet they don't have to really understand how it got deployed but it allows them to deploy the application and see how easy it is and then it takes them to that next step after which it deploy their own node frankly I mean I'm very biased about like nodes and stuff I love running a node I think everyone should be running a node even a light node or it doesn't matter if it's Celestia or ethereum or any kind of protocol running a node should be really straightforward um and I think like everyone who the developer should do that but also you don't have to maintain one because that's like infrastructure level stuff throughout the dev it's nice to have a something like impure or something else that actually improved your developer experience but even that's even though that's available just for like the practice you should be running a note just to practice practice for the end of the world like when we off to run our own nodes so I think there's a recurring theme here which is you know the tech is getting more complex every year which means the learning curve for new people entering the ecosystem is getting harder and so you know this answer you know create test Nets like create sandboxes for for devs to plan the person I'd really love to hear from here is Henry uh because I think in some ways probably you know starkware has the most uh formidable Tech maybe perhaps it could say in the space and so I'd love to hear how you're facing those challenges of getting people onboarded to Cairo which even for for deep devs is a uh not not often their background yeah um I mean I agree with you we do have interesting Tech but there are really interesting interesting stuff everywhere and there's a lot of stuff I don't know about back so just we don't have the greatest Tech we have great Tech everyone has a lot of us formidable formidable sorry so yeah so how do you onboard people on on Cairo and how hard it is well I don't know often the question comes like why should I learn Cairo is it difficult and everything and like I have a few one-liner so usually I ask people like hey is solidity the last language you'll ever learn most people say no right because it doesn't make sense like the the point is convincing them that it makes sense right so it's showing them why it's worth learning a new language versus using something you already know and I think that at the end of the day nobody stays in an ecosystem because there are slightly better tooling or the developer experience is slightly better people stay for either a deep conviction they have in the fact that the tech is good and powerful or for the community like David said earlier and I fully agree with that so I tend to focus on those stuff right the developer experience is not great not great of course but this is something that most people can overcome and if you explain and you take time to explain then most people will will overcome it so it will overcome it so we just focus on the on what's in the distance and the people around you that's what we tend to do does that make sense yeah I mean I think um yeah I feel like starkware is in a pretty cool position right because on the one hand you do have this barrier to entry but it lets you kind of have that style right where you were finding people that are already interested and then you can like pull them in a little bit I think the the quote that I think of is um I someone in your team has compared it to eating glass right and like web3 is full of masochists that like for some reason want to like run up against the bleeding edge of technology and just hit their head against a wall a lot but once you've done that right you've kind of created like a community of people that have gone through this collectively together um fully and like they understand deeply what everyone else is kind of like working with and doing um and it kind of like creates this moat for your project and your product where a liar too right you can take that smart contract like our goal is to like kind of be a boring product in a sense right we want to be as evm compatible as possible so you can take your code from mainnet and put it on scroll but that also means you can take your code off of scroll and throw it anywhere else right and so we really have to focus in on figuring out like what does it need to build that Community when we don't have a shared glass eating ritual but yeah I think the glass eating meme is awful but but it is fun I'll say this and we're at an interesting point now because the dev experience and the user experience is getting much better so we're gonna have to switch a little bit that the way it works and I'm really curious to see how we're gonna get to community who are like super tight eight glass together how they get familiar and nice with people who are not and who are not in the club yet and who won't have to smash their head against the wall I think I maybe had a similar experience from my time at fuel because we also had a programming language that we created and we're trying to onboard people too and what I found was kind of the same thing as you is that people who people were masochists and they're like there's barely any documentation it we have like a new release every day so my code breaks like every other day the tooling changes every day like my commands from yesterday don't work but they were into it and they were in The Forum helping other people answer these questions like they kind of became advocates for the community for other developers and I always tell people they're like oh is it going to be hard to learn a new language like am I going to be able to pick this up and I'm like I think all the developers I always tell them like what's the first language you ever learned they're like python or JavaScript or whatever and then I compare it to solidity I'm like how different is it really like it's not that different like just different syntax but everything is pretty much the same and that kind of helps them get to a place where it's like the language itself really isn't the problem and I think Cairo is probably the same thing like the language itself really isn't that hard to learn it's really not that different all of the mental models for how to program are the same you just have to look up is it a is it a colon is it a semicolon is it a comma and like that isn't that hard you just look it up but the real thing is like why are people coming and I feel I think it was like we were building a different VM and that was something really interesting to developers who were trying to look beyond the evm so less about the language I see a lot of mistakes people make when it comes to languages they look at oh we're designing this really really good language that's gonna replace solidity or something like that and that's valid but the thing is the best language never wins in terms of adoption it's always what people are most interested in solidity is notorious for not being that great but it still has the largest adoption um like sway versus Cosmos for example both the rest space cosmosm is inferior this way but yet cosmosm dominates the cosmos Community nobody's like saying like you know all the things about the featured added in sway are much better than in Cosmos and yet Cosmos and dominance and even though it's Hazard things so it's always like the way I see it I see I don't see oh python is better than JavaScript solidity is like sway is better than solidity I see where's the market share and I'll just go for that because I'm not going to be there to improve the programming language I'm just going to go for the developers that are interested in the ones that have the largest programming language um adoption foreign yeah this is interesting I mean something I think a lot about with community building is that there's almost a trade-off between acquisition and retention you know if like users are very easy to acquire they're often very hard to retain because if they were easy for you to acquire they're going to be easy for someone else to acquire as well I think this is what you're getting at with a broken glass right it's like it's very very hard to acquire devs to your ecosystem once they're in they're gonna stay right so it's a hard acquisition often leads to like really good retention and I think that there's almost a trade-off here right because it's like there are things we want Network effects for like languages for languages you want as many people as possible using that because that's what's going to dominate right you want cosm you know Cosmos solidity like take over it doesn't matter what else comes along if they're dominant in that position on the other hand like within your own project like starknet you might not want to get as many people involved as possible you might just want to get the really really good ones right and so there's different goals at play here right between like you know trying to scale language versus trying to scale a company and I'm yeah I'm just curious how you guys think about retention here and you know of users too yes so when we talk about acquisition versus retention we're looking at a sales funnel right correct right but in devrel you can't look at it as a sales funnel you have to look at it as a cycle like it it's more like a cycle that the developer Journey has to be a continuous cycle so on the uh acquisition part this is what we call like you know developer marketing like how do you get them to notice you like whether it's a hackathon that where they see oh like um your protocol building a hackathon there's a conference um like a Twitter post a blog post and stuff that gets gets their interest so they they go to your documentation and then there's like five stages of that journey and stuff but like basically by the time that there's a retention at the retention model you're basically have uh like you know them so well you know what they're looking for they helped improve your product with feedback and stuff and you're just thinking about developer success how do we give them a grant and stuff because they're like they went through all of that journey and stuff and when they go get a grant or they maybe get an investment to start their startup with that new application they built on your protocol that actually continues the cycle because you can use that success story to pull in new Dev back to their acquisition model so it's actually more of a cycle because keep in mind we're not selling anything that requires you to like buy something and then like you know you're you know you sell it exactly open source code right so it's much harder to quantify it from a sales point of view rather than from like contributions and like you know projects being built on top of that protocol I mean it almost sounds like we're building you know like building like religions in a way right where it's like you wanna you wanna draw somebody in so that they will then draw more people in as well like that's that's your point here yes crypto and MLM is crypto there's this thing that I use called the orbit model that's used to describe like how we grow communities and I learned about it like sometime last year actually while I was working in crypto and it kind of describes what yeah says where it's not about like how long do they stay in and then when do they leave and how much money did it take to acquire them or how much time but rather a way of looking at it as like orbits where there's an outer orbit where there are people who like are aware of you but don't really care are not involved there's people who are observers sorry these are The Observers and they're people who participate somehow they like like your tweets or they want to show up to your thing they want to show up to your side event and then there's people that are building on you and then finally there's like the core team there's like people who are diehards people who are like The Advocates or whatever program you have who are like fall into that category so instead of looking at it as like acquiring and retention it's like where are they in that map and for a lot of people it's like a Venn diagram of all the different ecosystems we're all observers to most ecosystems were we tend to be like particip in a few and then we're like the core of one or two so right it's not like Winner Takes all some like zero sum but rather how can you get the most people as close to your inner circle as possible yeah and your strategy with that orbit model is basically for for every orbit level you're trying to get us that you're trying to think of a strategy to pull them to the next orbit level until they get to become Fanatics like that's like the closest orbit to the core Dives these people are like your Die Hard fan they see your core devs as Superstars and rock stars um you see a lot in the past especially with ethereum like if you go to any ethereum hackathon a lot of these um hackers when they see a core Dev from the EF or like from the EIP process they look up to them you know so it's like you know they're like they read about them they see them on Twitter they see them under called and stuff um so these are your Superstars and you know having those Fanatics at that close level there's a lot of strategy you can do for you know keeping them in that orbit like you know inviting them to dinner or like you know special limited edition swag or like hang out with your core devs and stuff compared to people at the farthest orbit were might have signed up to a newsletter and you're just sending them updates until something Peaks their interests that they go into your community and find out more I kind of like thinking about it in terms of acquisition and retention the orbit model I hadn't heard about it but it sounds interesting but in terms of acquisition and retention I feel like it's not exclusively a sales thing right I mean it's about how you get people interested and do they stick around they can go somewhere else but I don't know I feel like it makes sense and on my end does should devrel focus on acquisition versus retention I think I think you should be aware of both because doing acquisition without retention make no sense and you can't do retention if you don't have acquisition right um and on our from Life perspective what really impacts this is mostly like the maturity of your product if the product is really hard to use you have to focus on retention a lot and you mentioned this earlier right and when tension we do a lot of retention through Community stuff like you mentioned because that's what made people stick around in my experience and as far as acquisition go we do a little bit of that but um but it's it's not where we spend most of our Focus now we're again in a fun place where this is going to change in the next few weeks I'm super curious to see how this is going to go but how do you quantify it I don't try to quantify it I I like I don't try to quantify it and put numbers on because you mentioned Community for the retention partner in fact Community should be for both like would Community get acquisition and would Community get retention I mean you can use Community for everything and we try to use the like we try to scale through the community everything we do like at the end of the day we don't want to be a central up where everything goes through us we want to empower the community to grow itself right all right and to a certain extents this goes for Tech infrastructure but also for this kind of stuff so I mean we use Community for retention but also for acquisition I I look forward to the kpi session we have after this on our metrics here but I think there's also something fun I think that maybe is maybe on this panel unique to scroll but I'm not sure which is that um you know you you mentioned Dev personas a little bit right but like more and more at scroll I've been trying to like evangelize internally internally that it's it's hard to call our devs a singular Community right like we really have to start thinking about the devs that are building on our platform and consuming scroll as a product versus the devs that we want building scroll right like we want people contributing to our core protocol we want people contributing to our ZK circuits and building interesting things on the edges of the ecosystem that blur the line between like core code and stuff that ends up living on an evm right um and for each of these you kind of have to have different tactics and different ways to approach it and really think about like what motivates a someone that's writing Halo 2 circuits in an open source context versus your adaptive it's also like it must be a much smaller Community right I mean the number of people who are able to write this kind of circuit and contribute to scroll like you you don't treat a community with a few tens of people hundreds of people the same way you treat the community with like thousands of people no I think that's kind of the point there right like we have 500 000 people in our Discord that's not a community right like that's like it's it's it's something very different right and so I think I want to like let I think most of the time when people on web3 use the word Community they're talking about an audience um and I don't think that's something that we should be deluding the word community and that's why I think like identifying actually what are the sub communities the set of communities that make up the scroll Community lets us really like meet the needs of those devs right whether it's five hardcore people that like really want to learn these circuits really deeply or as people like we have you know we have a decently large devrel team at scroll and we have folks that I think um do general education super super well and they'd be very poorly suited to be devrels for the circuits and by letting on people kind of focus on those things and know what they're good at and know where they need to like push things off to other folks really helps us kind of focus in on that um you mentioned that one sector is smaller than the other I don't think it matters because if you find me one really good core Dev who's external to the team that's worth a lot and my point is not in terms of value it's internal in terms of tool right you don't communicate with 10 people the same way you communicate with a thousand right of course like a telegram group yeah because you want to follow the one to end relationship with developers right but like for when it comes to the core protocol there are a lot of programs and strategies you can do to actually align core devs external and internal around your core protocol like the EIP process um which is actually based on ietf standard and python enhancement proposals like Azure process is something that's actually really well done because in the end when you have so many external core devs like in ethereum they call it cat hurting because it's really hard like to get everyone together and stuff but at the end of the day you have a really dedicated Community even though it's small of core devs who actually understand the protocol in and out even if they're not paid or they're like you know an external researcher and stuff they actually care and they're actually building that Community like look at Tim Baker Tim Baco is not necessarily A devro in the traditional sense but he does have that devrel um Persona when he would go on every EIP call for the all-core devs he would live tweet about what people are saying and then he became the coordinator of the EIP process after that because a lot of people follow it who's saying there was a lot of debate in ethereum there was like hey what's updates on the merge and stuff like that so yeah I mean like even just a smaller Community it's still like that's the community that changes everything related to the protocol um if you look at Gap there's probably like 30 40 people in the world who understand that like as like in an hour right so even though it's smaller these people are super valuable because they're such an important that depth is so important for ethereum you know so so yes I think you're you're not something that I'm really interested in which is attention economy like you know to what degree is important to play into like what you referred to before as rock stars in the ecosystem right like if you get one of those rock stars in the ecosystem that's gonna do a lot of damage for for you so what it came this is this is really for you I think you've been pretty unique in this because you've you've developed I think a Persona as a Creator in the space um like you know which is like you're gen Z devrel right so like people follow you and they know you as a personality not just as a Dev they know you for like where you're going what you're doing and it's like people people love you for that and so yeah and this is what Yaz was saying before too you know to what degree is it is important for for everyone here to be a rock star to what you know or to what degree is important to think about you know attention economy and how you're commanding like this new world we live in of like the Creator economy like where you are a Creator or at least maybe some of your devs are also creators that command wide audiences and people care about on a personal level as as well uh this is really a question about brand and brand building I'll start by saying I don't think I it was a purposeful thing I think it just happened over a long period of Time personality was just too strong yeah Vibes were too good and then people were just like feeling it no but I do think that in devrel a lot of your job is to be on the Forefront of Technologies that's like this new thing exists you're one of the first people in the space that knows how to do it so you have to make the video you have to write the dogs like you have to make it possible for everyone else to know how to do it and I think because of that it kind of creates this like image of like rockstarism where it's just like it's just by Nature if you're one of the first people in the space who's able to do something because you're the closest to the devs who made it you're the closest to the people the John Adler's of the world who you can sit down and be like hey how do you do this and then you make it palatable for everyone else um but how important is it honestly people ask me this all the time like teams come up to me and they're like how important is it to have like a Twitter personality be my devrel versus just like you know someone who's a good engineer and I always tell them it's not the most important thing like that's not the thing you should be optimizing for but it is important I think it is important and not just because for your brand but because brands are built around people they're not built necessarily around Tech because like Daniel was saying there might be a point where your Tech is so similar to 10 other companies especially as L2 Wars rage on I think in a year they'll be five to ten more evml twos so it's like if they're all the same the differentiator isn't the tech it's not like the I don't know the like low level stuff that matters but it's how does the people on your team make everyone feel how do you lead a community how do you yeah it's just like how do you make people feel how do people feel about you and how do people trust you I think when you're a devrel it's more about trust and someone asked me they're like I posted a picture of me playing basketball here in Paris and they're like do you ever work at these conferences and then I replied I was like devrel is a long game as a joke but it's true because it's not about like me trying to sell you whatever project I'm working on right this instant and like you have to use it today but it's a relationship that gets built over many months and sometimes many years and it's something that in a year and two years when I'm working on something people are gonna be like oh I trust what she's working on because over the last two years I've seen her be like XYZ adjectives and now I have trust in this person and that's how brands are built I think yeah I mean it feels like a huge shift that we're seeing across all of culture which is that you know brands are now a reflection of the people who work for them rather than people being a reflection of the brand they work for and yeah I'd be curious everyone else is thinking about this question of how important is it to be a Twitter personality um my strategy has always been to make the core Dev the Rockstar so I tried as much as possible to create that culture in ethereum that allowed for core devs to actually become more visible and stuff now it's kind of tricky because cordov they don't necessarily want to be very public basing and stuff and they don't have to be right but like people should know who the core devs are so I focus more on actually making the core depth on my team um more visible and there's a lot of ways that we're planning to do that and stuff because I want like you know like an element of trust and who is building this protocol and how like who they are and stuff and to follow you know what you know kind of features we want to implement the trade-offs and stuff when it comes to me personally I mean I've been in the space for six seven years um I don't really care about building a Twitter Persona I think it's important for a lot of people but for me I'm not tweeting that much um I tweet maybe like you know spicy takes every now and then right but um it's not my way of trying to pull in people um to the space I'd rather utilize more like uh like the you know like the protocols Twitter account for that kind of stuff um for me it's yeah I think that's more for like the personal brand and personal brand is super important um but I think like getting people into that space doesn't only have to come from your Twitter account it can come from different greater accounts and that can you know be utilized more yeah I wish I'd lived in a world where personal brand was a phase phrase that didn't exist but it does um I think core tenets of devrel um like values that you just have to have are accessibility and empathy right and I think the Twitter thing can be a double-edged sword where one if people feel like they kind of like know you and they can kind of know your personality it makes them feel very like free to come up to you and start a conversation and tell you about what they're building and ask you questions and kind of breaks down that barrier so for accessibility it's incredible right but I think also if you if your persona and brand pushes too far from like letting you actually be real and empathetic to needs and people come and like start seeing falsity there um that can be an issue as well because I think what it can do is as a devrel it can put you to have transactional relationships as opposed to ones that are like more long-lived and more I don't know actually worrying about people as opposed to the transaction um so does personality matter I'm not very good at it so I said no no but jokes aside I I don't I'm kind of like you yes I don't like that much making things about me I also but but but I see the power of this and it does you people follow people so you need people leading the pack and then again I think my uh my Approach would be slightly like the same as you shine light on people who can lead other people I would tend to shine light on people in the community people who have interesting life stories people who are doing inspiring stuff people who are accessible and trying to instead of like being the light in the dark that leads people being the catalyzer that makes various lights shine and if possible ideally outside the core team and outside the the lead developer because it helps with decentralization and it helps multiply viewpoints all right well this is this is all the time we have I just want to say everyone's being modest in the stage but these actually are four rock stars of the ecosystem so a big round of applause for everyone here [Applause] 
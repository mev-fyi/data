online all righty uh welcome everyone to another uh celestia community call this is our community call number two i'm yaz i'll be your facilitator for this uh community call and we have a lot of exciting update that i'm really excited uh to share with you along with the rest of the celestia team so yeah let's get started um so on the agenda we have status updates on the marquee testnet that will be covered by a smile we also have an overview and demo of the data availability api that's been launched on monmouth testnet and finally we're going to do an overview of the new golang west client for celestia node um to kick it off our smile will take over right now hey everyone uh thanks guys um yeah just a brief update from the mamaki testnet um so in the beginning we uh like shortly after we published the test net in the sense that like people started joining we realized that the tenement release that we used the latest one tournament 35 was kind of unstable on the p2p layer and we spent quite some time trying to debug this and use the legacy [Music] is the legacy flag there without going into much detail i think besides those hiccups in the beginning because of our our validators being creative we kind of managed to stabilize the network um it's kind of it's it's still kind of not optimal but it works and we're working closely with the tenement team i think a big shout out to evan was not on this call unfortunately but like he worked very closely with the tenement team to fix some bugs on the tenant peer-to-peer uh stack um [Music] yeah um we also found some bugs on our end and then celestia app which is very good that's why we're launching a test net and uh we we're fixing these bugs uh basically as we speak and and working on those uh both in like apps on the node um yeah again big big thank you to our validators for being so patient uh with with the with the with the launch and with the hiccups that happened on the way but like it seems to work very very fairly well and uh maybe as a heads up we will eventually um yeah follow whatever decision the actually not it's not entirely clear we will make a decision depending on how like the cosmos sdk decides the cosmos sdk team decides um which tenement version to use in their next release like which is 46 but depending on that we'll decide how to move forward to test that but there will be an upgrade fairly soon either way um but not this week most likely next or the following week or weeks um [Music] yeah we've we've seen a few block explorers um i think one worth mentioning is by lazarus who is also trying to parse the pay for data transactions um yeah i think that's it from the from the test net uh a quick update on the qgb um the team there has found a bug on the relayer and is working on fixing it the like a proposed solution is called like a universal nonce i can link um i can link the issues for those that are interested to follow along in um [Music] in the chat here i think it's more makes more sense um yeah and for the ethereum and optimum updates uh i'd rather give it to tomash thank you [Music] okay regarding uh optimum and uh eternal updates uh we we're facing uh some slight issues with uh stabilizing dog production on [Music] right now we fixed most of the [Music] most important backs and because of the initial problems with block production on on the testing itself uh block submission from optimus was pretty problematic we hit some issues with two small timeouts and we've failed operations but right now we're we're preparing a determined based chain to run on uh on the makai tesla and we also preparing tutorial to run how to run optimum based so abci based cosmos based roll up on on top of market testing yeah thank you um have we covered any kgb updates oh i mentioned those i mean it's like the team is working on like fixing the bug in the relayer um if john has anything to add to that i'm happy uh let him speak but i think it's too detailed to um it would take too much time to explain the issue at the end even so i think we should go over to like demo the data availability api which is more hands-on and more interesting and an overview by of by tomash of the the rest and uh client yeah all righty uh all right so so it sounds good um all right so now we're gonna uh go over to overview and demo data availability api and to demo it uh rene gonna demo it so i'm gonna stop sharing my screen and when i whenever you're ready hey can everybody hear me fine yeah yes okay cool um i'm renee i work on the data availability node uh at celestia it's a goaling implementation of the of the data availability node maybe we'll have some other kind of implementation later on in the future but for now it's go um i am going to walk through like our data availability api right now it's like very new very fresh um so i'll just start sharing my screen i'm also going to go off videos easier for me um is it working fun okay cool so um i'm gonna go over two of the uh end points that we have uh for now they're like basically the only two end points that really matter um i it will kind of take you through like the flow of a pay for data transaction um in the celestia network um and if you don't know what a pay for data transaction is a pfd transaction it's like kind of like the core transaction type that the celeste data availability network will will deal with um because it's just a way for you to post um messages to the network and then pay for for that um so the uh celestia node exposes an endpoint called submit underscore pfd where you can actually submit um data under a given namespace the namespace has to be eight bytes uh hex encoded um and you can submit any arbitrary uh data and pay for that um as long as you can pay for it essentially um so i in the left side of my screen you can see that i have a node running um this is a light node and as you can see there are like a bunch of logs let's say sampled past header um the primary function of a celestia data availability node is to perform sampling over the network and there are like different types of sampling and the light node performs like light sampling so it's only sampling for a certain amount of shares to guarantee it with a high probability that the block data does exist on the network and there are also other node types like a full node for example that will perform full reconstruction uh on block data but that's kind of outside the scope of this demo so for now i'm just going to demo basically submitting a message to the network getting hopefully a successful transaction response uh with a block height uh in which like at which block was this message included and then using that block height i will attempt to retrieve the data that i submitted from the celestia data availability network so um my node is already running like for the for the purpose of the demo i have a node running um so that it's synced up to to the network head so that we can actually work with this node um and i will go ahead and do a post request with a payload um that will comprise like the pay for data transaction so by the way also lets you know to expose their um rpc by default on port 26658 so just so you know um then we have the data the payload here and then the endpoint is submit pfp and so there's also this like neat little uh playground uh thing that will allow you to generate some like arbitrary namespace id with like a hex encoded message and um so i'm just going to use that to generate a random namespace id um so in the payload of the post request you have namespace underscore id field that takes a hex encoded namespace id then you have the data this is your payload whatever data you actually want to submit to the network and that is going to be just hex encoded bytes of whatever length um and then you have the gas limit field which you can set yourself i'm going to do 60 000 and then you can submit this to the celestial light node and sometimes it takes a while because what's actually happening under the hood right now is that the celestial light node will proxy this transaction into the consensus network because there are two separate pdp networks that are operating with celestia one is the consensus network that is responsible for like ordering the transactions and end basically producing the blocks and then the data availability network which is responsible for like um essentially doing sampling and data availability for the celeste network and so it kind of takes a while because the celestial light node is like proxying this transaction to its like um core connection we call it it's just a connection to a consensus node uh like a celestial core node so it might take a little bit of time another reason for the time is that the transaction is submitted in synchronous ways so it will it will return the post will return when the block is finalized so yeah it's it also depends on the block times which you may give like additional even for 30 seconds yeah exactly so it is a synchronous call so basically we are waiting for a proper like transaction response um which can take a little bit of time um but in the meantime we will post like links to the docs um of how to do submit pay for data um and then hopefully you guys can like follow along even right now or play around with the api afterwards give us feedback um there are like many ways that you can give us feedback you can open an issue on the celestia node repository you can like tweet at us at celestia org you can contact me on discord you can contact any of us on discord contact me on twitter um yeah just follow along with the docs and then play with the api a little bit and let us know if we're missing something um or if we like if there's something that you'd like to see or something's not working for you something's confusing because this is still in like development and it is um definitely rough around the edges especially the thing like the way that um the the namespace data is returned back it's like base64 encoded i'll talk about that later we just need to iron out some of the uh rough edges i guess of like the api um so it's yeah it's definitely still in development and we'll we'll definitely expand it and like make sure that it's um that it's like i guess getting better and improving constantly it's taking a bit of time to submit this transaction sorry guys um love live demos it is really taking some time yeah um yes so while we wait for it to submit a transaction um maybe we can share the the tutorial itself um [Music] yeah the note tutorial um i'm gonna add it to the uh chat um to the zoom chat maybe if you want to share that screen oh the zoom chat yeah [Music] okay yeah so that way um anyone who's following along you know they're like a tutorial and guide on how to like you know get started submitting pfds and requesting the data back to follow along with what when are you doing yeah so basically what we're supposed to be getting back is is something that looks like this and it will take a while um unfortunately but uh yeah you you get a tx response that looks like this if it was successful it gives you the height at which the transaction was included and then what you can do is use that height um in order to do a like get namespace data request so the we have two endpoints basically to get the um data given back to you and one of which is a little bit more technical it's like the get name space share so it basically returns to all of the um like chunks of the message that you've submitted to the network uh in a not very nice format and then there is a much nicer endpoint called namespace underscore data uh which is also a get request that tomasz actually implemented for us very nicely um that will give you back just like the message in in as a whole um so we'll be using that for the tutorial or like for the demo sorry um yeah it's taking a really long time i'm sorry this uh i don't really know why it's hanging so long um it could be because uh jacques just said that just a new block just when so probably like the mamaki tests it taking a while to produce a new block yeah sorry um should we do like some sort of q a in the meantime i or not q a but like maybe go into depth on on one of the yeah um um we yeah we can definitely do in q a um like our amazing community organizer uh can relay any kind of question uh uh back to us um but if there's no questions so far um maybe we can just proceed to tomorrow while we wait on the transaction to come through and then we'll dedicate the final uh uh time for q a yeah yeah that sounds good i'll stop sharing them alrighty um so the next next stop um let me show you my screen uh we got we have uh an overview from from our on the new goal line grass client for celestia node um so i'm going to stop sharing on the floor for the mouse [Music] i'm sharing my watching to find proper window um [Music] okay actually there was actually there was a question um i'm just gonna we're just gonna read it out um so someone asked like how much of celeste is on the aws um yeah that's a tough one it's more question for our validators i guess um but i would say that even on a test net on celestia like omamaki it's not representative for the actual like maynet launch even if um validates might use a different setup for test nets then for uh for like maintenance so it's like i can't really answer the question um i would think it looks kind of similar to like on the on the hub or on on similar chains though um where i don't know how much it is but i would assume it's like roughly like 20 percent or 10 percent maybe of notes but that's just like a guess so okay search interrupt okay and what i wanted to show today is go cnc so go client for celestia node rest interface we we created this uh repository it was extracted from the code used in optimind uh to to access a node and we would like to invite anyone from the from the community to contribute to to this project right now we already have some uh prs and some issues you can choose from all of them are good first issues or help wanted issues this help on that issue is a bit more complicated so it's not the best first issue but we have some first issues it's both coding and documentation so i think that everyone can jump in and start contributing as i said we have some community contributions some are even our origin already already merged so um so yeah this is this is this repository the main idea in this repository is to create a client a go client that will wrap entire rest and http handling logic inside inside the libraries you can use it programmatically we we're we're mapping uh end points of research node one to one so we have methods like header balance sub tx submit pfd which is implemented because we already need it and namespace shares and namespace data because we also already need this one cool part is that we have integration technique that is using docker to to set up a temporary network using um using [Music] both single celestia node and single celestia app instance and we can run tests without accessing actual testament so the test is very simple we spin up the docker in the setup phase of the integration test suite we're creating a client and this also shows how you can use client europe in your application so we have some random data some random hard-coded namespace you can submit the data submit the pfd and use use namespace data to get the response as rene i mentioned earlier we're using the height from from tx response yeah all the issues we create and we probably will create more issues uh inside the superstory we try to have it uh we'll say user-friendly so we have the link to the spec of the uh of the methods the documentation aspect of the method uh we even have uh a link to a code in in celestia note where where it's uh where it's actually implemented so you can pick up all the details and yeah this is basically it uh i can also show how it's used in as in optimum uh so in optimism we have a plug-able data layer architecture so one of the data layers is celestia and it's a celestia ago we're implementing methods like submit block which is pretty simple it just it marshals the block submit pfd to the configured namespace checks the result this is one thing that we may want to move into go cnc so we also checking application level errors because it may be the case that we were time outing or something like that so then some pfd will return an error and another thing is that everything will go fine but on the application layer there will be some issue uh for example we're submitting duplicated transaction which will be which will be also reported so we need to handle this uh right now we're handling this in optimum but we may want to throw uh return an error from submit pfd i guess i i will create an issue in ocnc soon for someone to to implement this and we also have retrieved blocks method which is using namespace data it retrieves the data and then the tries to sterilize and if it's necessarilized uh we're basically done and this is all i want to do to show about uh go cnc and once again i wanted to uh invite everyone to to contribute and to create new new issues to create some uh more tests and some using methods and create documentation samples and so on amazing uh yeah so everyone um [Music] check out the links in the youtube chat for um the github repository um and this is a great way to get started with uh contributing to a go language client for node um and to get started with development on top of celestia with a community maintained um sdk um finally we want to share that we're hiring so if there's um anyone out there interested in joining the celestia team you should definitely apply on our link job.lever.com celestia currently um the thing you're going to be working on is golang cosmo just ck tendermint and lip the vote that we're looking for is cosmos sdk engineer indo a devops engineer a networking engineer and a senior senior database engineer um yeah and now uh so please click out the link apply and we'd love to chat with you um finally we're gonna leave this space we're gonna leave this time for a q a currently we have a few open questions um let's start so where can i get the hardware requirements so for the hardware requirement i'm going to share with you here it depends on the kind of node that you want to run right so if you want to run a validator node at the top of the section um i'm going to share hopefully somebody would be able to uh share on the youtube live yeah over here the first section is always going to be a hardware requirement whether you're running a validator node a consensus full node or from the data availability side um bridge nodes um there's always going to be a hardware a hardware requirement section for each node type um and yeah now we can go to the other question when will we see an example of an execution layer on celestia uh so with intermittent optimum um we can um we'll with the ethernet optimum work uh being done we'll have documentation on a settlement layer um that is evm compatible and that will help like you know allow developers to get started building on top of ethereum and optimum and we're hoping that we can start demoing um or you know having documentation ready within the next two weeks to a month um so the team is working on that and we would be able to share more uh in the coming a few weeks um another question is when is the incentivized test net being launched um we haven't announced a launch date yet but hopefully this year or what we're anticipating um if there's no more questions we can go go back to renee we know you want to share all right let me stop sharing and show renee's uh go for it okay all good yeah cool so okay so this took a while um sorry uh okay so we did just to refresh everyone we were doing a um submit pay for data transaction um and we were submitting this arbitrary data uh under this namespace and so the we we got a transaction response and it was successfully included and we have a block hide it which it was included uh which is important because then we are actually going to use that for our namespace data query um so all that we need in order to query the um the node for the namespace data is we'll hit the namespace data endpoint we need our namespace id under which we submitted the data and then we need the height at which the data the message was included and then we will get our data back as base64 encoded which is kind of annoying but we will decode it back into hex and i've done something wrong i haven't copied it properly oh we've got two messages here second i guess it was included twice um okay so yeah then we have our um our message data back uh i know it's not really like cool uh to see but like the path of the of the transaction itself was really interesting and um the fact that like the light node can retrieve the message back that the fact that the data availability network is syncing blocks from the consensus network uh extending them and then making the shares of those blocks available to the to the network is pretty cool i know it's not really much of a of a demo but it's where we're at right now and we obviously want to improve the api later so definitely give us some feedback and if you have any questions about any of the end points right now uh or how things work please shoot them in the in the um youtube comments or however that works um but yeah now it's it's finished so we can go back to q a all right sweet um i'm gonna go back to sharing the final slide let me see all right yeah so again you know check out the link we're hiring um if you have any more questions we can hang out here and do a quick round of q a for any more question from the youtube live stream um otherwise um uh otherwise we would like uh we can end the call early uh oh yeah i figured a question um so one question is could could it be possible to offer this proposal of consensus solution for change outside of the ibc ecosystem um i'm guessing okay offer this proposal consensus solution i'm guessing for tendermint so i guess the question if contender may work outside of the ibc ecosystem um uh i'm not sure uh ismail you want to take that one sure i mean uh i i interpret joel's question as like does optimum and like all like these roll ups can they can i work outside of the ibc ecosystem yes they can um i mean ivc can also work outside of tenement there's like a misconception that like ibc um the spec with only works with tenement which is not correct but um it's it's generally enough that you could have like a single node or like a proof of authority thing or like some committee or yeah and then and and definitely ibc is generally enough to like capture roll-ups as well but there's no implementation so um that definitely needs like a separate ibc client for rollups and um [Music] i mean celestia my main chain will be connected through ibc to a bunch of other chains but and the rollups it's up to them to decide how to bridge to other rollups there might be canonical easier solutions where they where where like if they use a common settlement layer and bridging might become easier if it's a cosmos sdk based rollup ibc is probably the most natural thing but as i said that needs to be a new client implementation um i guess if that sounds if that answers the question um let's ask joel and on youtube uh hopefully answer the question otherwise he joel is free to come up with any follow-up question um um before we go to the like the next question um we can also expand more on the one previous question will we see an example of execution later on celestia we already covered etherement optimum uh one kind of execution environment at evm base but the plan is uh like at least long term to have all different example documentation tutorials on how developers can integrate their execution environment offshores with celestial data availability layer and that is like definitely the plan and if any of you have any kind of execution environment um that you'd like to see being deployed on top of celestia um feel free to reach out to us and we can we can talk more about this um and yeah hopefully that answered a previous question like you know expanded upon more all right there's another question if i use optimum should i spin a light node or a full node to test my pet project deployed on mamaki what note type is easier for developer user experience um commands wanna take that one yes of course uh light note is enough currently uh for development on milwaukee i configured [Music] my own celestia app it's but it's only a full node it's not a validator it's a full node and i configured um pruning so i'm not keeping historical data so it's it's light on my disk and i don't need much space for it and i'm using a celestia light node and it works fine so i would say it's easier and it requires less resources so yeah i'm running this on my very small home server and i would say it doesn't require any significant hardware to run so great definitely it's a full mode of celestia app and or you can use brand you can use public public endpoints and uh light node for uh for for celestial node this is enough for for testing optimize amazing uh let's see if do we have any more questions and hopefully this answered um one of the viewers question hey um so far no more questions um maybe we'll get another minute um [Music] or two before we can wrap up maybe in the time that we wait for more questions to come we can do a little icebreaker with the team um talking about what is your favorite color um i'll go first black anyone else same here yeah i wear all black but my favorite color is red red yeah like super bright red grenade also mostly wear black but obviously the celestia purple is my favorite color i also am a fan of purple right do we have a name for like the specific purple uh color uh using celestia uh probably has the name it definitely has a hex like uh some some hex code i do remember like i was half joking because there was a long discussion about the color to use and if it's the exact color long time ago [Music] there's another question.com what is the profile of the new strategic partner that celestia plan to implement in the future so i guess it's a question on what kind of uh what kind of like i guess the category of strategic partners uh selected planning to work with um as it goes closer to launch um dt you want to answer that one sure i think i think i need clarity on that question um we are interested yeah i guess like from a from a product perspective or like what is the question um i'm just gonna paste the actual question um i guess i mean i know vague i think we're i think we're interested in any project that wants to try um building modular and uh leveraging our roll-ups um and so we're we're open to chatting with anyone and um yeah anyone who's interested in our ecosystem or orbit should definitely uh get in touch great alrighty um okay it seems there's not any more questions let me double check again um uh yeah syndrome no more questions i think we can wrap it up um like you can stop sharing the screen um as i think there's one more where it's in the chat all right um yeah i think the one the last one or the one about the profile of the strategic partners um [Music] all right i think that oh it's called uh tarot purple adidas like the the actual name of the purple color that is used by the logo oh no that was just what my what i wanted to name it um i think that was all the questions i thought there was one more but that seems to be it all right great um so thank you everyone for joining another community call um um if you have any kind of feedback on like the like the structure to call um we're we're just like at the moment experimenting with what work what doesn't work um and certainly um for the next call we'll um um you know we'll make it more inclusive so people um can ask more questions um in an interactive way um also and again thank you to all the validators validating on mamaki and like you know you guys are the real ogs uh thank you so much for all the support in helping spin up mamaki testnet and to all the developers out there um get started with the data availability api that renee went over and start um contributing code to um go cnc which is like the golang rest wrapper for the node uh celestia node that tomas went over and if you have any more questions um shoot us a dm on twitter or come hang out in our discord um and yeah thank you all for coming um we appreciate your time and take care 
hello alrighty so the whole theory that I have for this panel is that all the talks that we just saw they're sort of like movies this is more like the features on the DVD this is this is something to go you know get to know these guys this is something to sort of I I hope that if we if we uh don't answer any of these questions and we just sort of go with the flow I'm totally okay with that um this is just too just to go with the flow just something interesting so um we already sort of have an intro so I'll just run through these intros really quick right here we have Ben Fish he's the CEO co-founder of espresso he's also an assistant professor he has some incredible research that that widely used today so uh proof of replication I just learned this for file coin literally the most used uh I'm supposed to talk on a microphone the literally the most used ZK proving system today no big deal um also vdfs and even some economics research on mining really great work we also have Connor so Connor is just a general purpose gigabrain I have learned so much from him he's oh yeah he's the CEO of roll kit apparently he's an engineer and a researcher at Rocket I personally I've learned a ton from Connor about how you actually decentralize Roll-Ups and without using consensus to use something like four Choice rules it's really really interesting work and you've also done work with MPC and you're also uh you were a guitar teacher yes so he can riff okay and then we have Josh Bowen so Josh uh you are known I think for your width and depth of knowledge which is rare uh you've done work again some also some research at Celestia on execution environments fraud proofs optimistic rollups and um before that you read edger node right yes and then before that we don't want to talk about that no okay there's a Google he worked at Google okay okay so the first question is what is love no I'm just kidding this is not like the Lex Friedman podcast um but we could talk about that yeah okay um the first topic I really want to get into is not really um comparing which is best with like consensus into centralization but one of the really interesting things with this panel is that we have three shared sequences or with roll kit a way to build shared sequencers with as a roll up but they're all in very very different contexts so it's like these the all of these folks and all these projects are incredibly smart but they made different decisions based on that context so if we can dive into the why and the how of why we use the consensus algorithms that we used then I think that gives us a better understanding over the problems that we're trying to solve which of course shows us what we're what shared sequencers actually do because sometimes if you go on Twitter uh one of the leading questions is just like WTF is a shared sequencer so we can just go in order then sure yeah um so the way that I view it is if Roll-Ups are built on top of the layer one then ZD default shared sequencer should be the the layer one if it's not the layer one what are you doing right well you're trying to do something that the layer one doesn't provide so if you're trying to build Roll-Ups on top of ethereum and I'll talk about building Roll-Ups on top of Celestia in a second but if you're trying to build Roll-Ups on top of ethereum ethereum is a dynamically available protocol meaning it's very available it's works even if 10 of the network is online it has very slow 15 minute finality so we decided that well what does it make sense to build for a shared sequencer that is not the layer one but sits on top well something that provides a different property and that's fast finality so that's what Hot Shot our consensus protocol does it optimizes for getting 12 000 validators to be able to reach consensus within a few seconds uh it sacrifices the availability guarantees that ethereum has in the sense that if less than 75 percent of the network goes offline then it may not make progress um but that is the reason we did that if you were building a shared sequencer on top of a different L1 like Celestia which uses tendermen then it may make sense to use something else right um tendermint we didn't decide to use tendermint because tender mint is not optimistically responsive that's like a separate discussion it's like it it is it is it can have fast finality but it it doesn't necessarily scale to as many nodes if you want to retain those fast finale guarantees so HotShots designed to scale to ethereum's validator set because we want to be as close to the L1 as possible just providing a different property in this case fast finality instead of high availability um never thought about using roll kit as a shared sequencer that may be a possibility but we've been we're more interested in using shared sequencers with roll kit roll kit is meant to support all different kinds of sequencer schemes because we've identified many and the trade-off space between them all is unbelievably complicated so uh we like shared sequencers a lot because one of our goals has been to allow people to launch chains without needing to provision a validator set and when you've promoted that idea and got everyone excited about it and then they find out they have to have sequencers then it's not it doesn't seem as cool anymore so you can do you can do a roll up without sequencers easily if you do the base Roll-Ups the no sequencer roll ups but those inherit the block time of L1 which on Celestia is 15 seconds 15 second finality 15 second blocks a lot of people want to go faster than that when when people think about Roll-Ups they think about arbitrary and optimism which give very quick soft confirmations and provide a very fast ux to the users and if you lose that when you go to develop a rule roll up you're going to be sad so shared sequencers let us do this no validator set easy to launch and also have the fast user experience so shared sequencers are probably one of our highest priorities to integrate into real kit as soon as possible yeah if they're going to redirecting what the other panelists have said right like I take a much more kind of like practical background like I'm not an academic by any means and so you know I the evolution of vastra as a project came out of my work at celestion broadly what we were working on was like how do I deploy a roll up on top of celestion what are the components necessary to kind of do that right so we go look at like why are there sequencers in like ethereum roll up we've all seen like the based roll-up design mechanism right but the fundamental reality was that users would prefer faster response times and slower response times I often reference right there's some research from like like 1991 on like how do users feel about like user experiences and like web applications right and like roughly it says users want to click a button and expect it to respond within like one to four seconds shorter is better there's probably more modern research on like mobile uis right everyone's used like an older phone or like iPhones are known for having like much faster latency and it feels kind of smoother right but users like responsive user experiences to Evan's point right with the centralized Roll-Ups we got these very very fast responses and again I'm kind of cynical or like you know I view it as practical right if we want to say hey we have these centralized sequencers we want to decentralize the sequencers if you sacrifice the latency benefit that is the reason they move to centralized sequences in the first place users are going to say oh this is just like a degradation of my Protocol no one in like a roll-up wants to be like the first mover to say cool I'm going to use the shittier experience that my users like less than the centralized ones so it's kind of our job will be like we think decentralization is important then we need to provide a user experience that is adequate that users will actually use the damn decentralized thing because I am not optimistic that users are going to be just like altruistic actors who say no I use the thing that is the most decentral like no they don't they use the thing that is convenient for them that makes their life easy we need to provide a decentralized solution and I think shared sequencers are a way to do that while minimizing against the it should be easy to deploy a roll up right we can't have everyone do this problem like if we want a thousand Roll-Ups we can't have every single project need to do this process every single time yeah if you um going back to the point of like taking away the fast responsiveness have you guys ever taken away ice cream from a child it's like that's not fun okay so next topic another way to think about a shared sequencer is it's it's a committee and it can perform some sort of service for Roll-Ups as a committee and specifically like um there's just like a lot of different services that you can provide doing that for example like with espresso you can provide da and with uh with asria as far as I understand you can do something like IBC and uh like settlement like with the evm portion so I'm curious to dive into what are the other committee Based Services that we haven't already touched on or what are some committee Based Services that you think would be useful for roll-ups so again we can just go in order yeah well I mean the it's interesting that you think of it as a committee uh I mean the committee cannot if the committee is like uh 12 000 nodes or if it's if there's the same set of nodes as the underlying L1 then it's not necessarily committee it's the same physical set of nodes but it's logically playing a different role of offering a modular component of the overall services that a rollup needs primarily ordering and then availability can come for free as part of that but then you bring up a good point like what other services can you get from an ordering layer so we've been talking about in our talks how shared ordering layers like espresso like Astro also give you interoperability guarantees um beyond that if you you could think about adding validity checking as well so what if rollups could also just settle directly to the shared sequencing layer then you might ask well what is the layer one doing right well the layer one is still there Perhaps Perhaps layer one is being used for availability but the layer one and a half for some reason and is better at um at providing for example it may be easier to add a a custom op code to verify ZK proves that the layer one and a half that is uh that is faster it really depends on what you want to move between the layers because the layer one can provide all these Services as well I can't think of anything we want besides a fast dumb decentralized ordering machine okay I'll give a more optimistic take I guess like like fundamentally I've used shared sequencers and this is going to my kind of like like Cloud SAS Enterprise SAS background right and this is the land of middleware right like what like when I joined crypto I think one of the weird things to me was like you know the architecture was like oh there's like ethereum and then you just like slap a UI on top of ethereum and I'm like that's not what Enterprise architectures look like there's like 13 layers between like an Enterprise service bus and like some Oracle DB from like two decades ago right and like the mobile app you use to check your insurance right layers exist and middleware is used to kind of intermediate between these and to like reduce complexity of interactions with like a broader kind of ecosystem of things so if we think about shared sequencing again it's a committee what can you get from this committee I think of it as like you know we've used the term decentralization as a service but also it's like what can a roll-up get for free by using a shared sequencer um again it gives these soft commitments to like my talk right there's bridging benefits if you say you still need some kind of bridging guarantee of like the candidacity of this chain rain this is less useful if you're doing like a settlement to like ethereum thing right where you say well okay you know is the roll up defined by the bridge well the bridge on ethereum has control over the ordering of the roll-up and thumb mechanism then that's fine from a bridging but if a roll-up wants to bridge to like some extra domain space it's going to need to make an attestation of the canonicity of its given Fork to that receiving chain um we could also think about things kind of like farther out like okay is an oracle you know is it a roll-up of like the shared sequence or whatever but you could say part of the data stream of this shared sequencer is some set of Oracle transactions from off chain how is that happening is the committee of the shared sequencer having you know an increased amount of state and actually making some claim over the validity of you know this off-chain data there's various things like that but I think really the way to think of it is like it's a stream of data generally we assume the roll-up is only kind of filtering out the stream of data directly relevant to it there is potentially data you could push into that stream that gives a shared timestamp of it across all the Roll-Ups that they may choose to filter out as well so again you could have some Json format for Oracle data and all the roll up to the shared sequencer can choose whether or not they want to parse out that Oracle data and use that in their state machine there's a pretty broad design space there but it's unclear what will be like useful and I think the research on like what are the kind of trade-offs and security guarantees and whatnot of these things but like like I think we're solving the Oracle problem here but there's potential like ux benefits it's like a rope developer yeah that's really good um one of the things that I was uh to lead into the next topic is Mev and PBS specifically so some of the things that I was trying to hint at is with with these community-based Services is that whenever you use a shared sequencer and if that shared sequencer is using some sort of Mev infrastructure that Mev infrastructure is like sort of already set in place for you so um to get into the Mev part monopolies are bad in general that's usually a safe thing to say amongst crypto people and most folks in general but we don't always get rid of all of the monopolies and I think especially from Ben's talker you had some really really good answers to this so I really want to dig into monopolies and basically profitable censorship so we still rely so crypto like we like to think about getting rid of monopolies yet we have each proposer has a monopoly over which block is used for that given slot so I kind of want to dig into um who captures Mev in the system and how can we change that to be more programmatic and no matter which direction we want to go in um how can we change that so yeah we can just again go in order yeah I mean this this conversation is relevant even just talking about uh layer ones like without rule ups but the same problem happens with uh with seek shared sequencing layers for elops too um so it's interesting that you said wait a minute the proposer in a consensus protocol has a monopoly on a slot it gets to decide what goes into the slot um so this is I think one of the really interesting things about consensus protocols there's a there's a number of papers on this like there's a paper called Monopoly without a monopolist a blockchain is a monopolist a a proposer has a monopoly over one single slot right does this slot-based Monopoly Behavior achieve Monopoly pricing meaning do users pay for um pay pay the price that maximizes the revenue of the blockchain or do they pay basically the market clearing price for Supply equals demand and so ignoring Mev of ordering and sandwich attacks and all that right if we just look at what's the price to include a transaction EIP 1559 has solved this problem users pay even though the proposer in the consensus protocol has a monopoly users pay the market clearing price and the reason is that if the proposer is not willing to process the transaction of a user paying the market clearing price the next proposer will so having a monopoly for a short period of time does not give you a monopoly over prices for the and this is the key property blockchains that's why they have to be decentralized right because I'm elected once in a blue moon to process a block if I don't take the transactions as they are paying the market clearing price there's someone waiting in line who will just do it so I cannot make a credible threat to users to reject their transactions paying below market clearing price now when it comes to Mev this isn't the case because the transactions are available to me I can sandwich attack them I could even get the help of a bunch of Builders and Searchers to figure out how do I extract as much about a value as possible by reordering the transactions in front of me that you have the willingness of a proposer and a later slot to do it without extracting value doesn't matter I can do it now because the transactions are there now and that's why we need to move towards order flow auction design where we introduce an ideal functionality that has a privacy element to it which Shields the transactions from the proposer builds a system which is ideal and stable for users so that all users submit their transactions there and then we turn the proposer back into a passive entity that can either take the block output of this ideal functionality or have nothing at all and again that proposer does not have the ability to make a credible threat to users to not take their transactions if they send it to the ideal functionality they just tried to take anything that's available to them at the time so and it's very hard to design those ideal functionalities it involves a lot of cryptography perhaps trusted execution environment but that is the direction the industry is going in that's what flashbots and Suave are working on and those are only work with highly decentralized ordering protocols that's why we're advocating for shared sequencing yeah yeah so to respond to that really quickly it's like we in theory you have multiple different Builders so maybe multiple different swabs or something like that and the proposer since they do still have this Monopoly for this one block is very short and it's very limited they still can pick the block that gives them the most profit so this is sort of where I was uh but right but the block that gives them the most profit may be the one that has all the users and the one that has all the users is the one that is shielding users from Mev so you can either design something that's stable for the proposers or you can design something that's stable for the users if all the users are participating only in the order flow auction that gives them the best execution price the the the the short-lived proposer has no choice but to take from that pool otherwise it doesn't have any transactions to process it can't make a credible threat to users to say no don't submit there I won't take it because it has a short turn and then it's gone I guess those proposed like the spicy like Counterpoint right of like dumb flow is dumb I guess and like what I mean is that like generally when we think about like retail flow and like users getting sandwich it's because they're like unsophisticated actors and like they're not necessarily doing like the labor to find what is like the optimal execution for them right and then there's also like we can think about user preferences and like Financial senses but like also in like a product sense right so like I spent like years at Google right like what does Google do well Google provides you a lot of free services like are those Services free no Google's monetizing that on the back end with ads and why are they doing that because users don't like friction and transactions are friction you know crypto talks a lot about transaction friction because if it's like two and a half dollars the main transaction won't do it well like when apps came out like the App Store and like apple right it was like 99 cents to like buy an app or whatever it's like no money right like functionally use an app for like 10 minutes you should be willing to pay a dollar for it right but people didn't so they made them all free and then they monetize on the back end users Trend towards things that are low friction and they monetize on the back end we see this in financial systems right with like Robin Hood and payment for order flow right users don't think and they don't read the MBA paper papers that say like hey maybe it's sub-optimal for you to actually be like submitting transactions that are free and then you get like marginally worth execution though the actual quality of execution on payment for order flow it seems to be like an unanswered open question from like analytics and like availability of data but like fundamentally like users use the thing that is low friction not necessarily like the thing that gives them like Optimal execution so I think like again like I'm very positive on like like Suave and like flashbots but I think it's gonna be a very hard-fought battle to say we are able to convince users that they should only submit transactions to this if that may result in some marginally higher transaction cost for the user and then someone else comes along and say I will ruthlessly front run and sandwich you but you will not pay any upfront transaction fees the users might say yeah I am fine with that so I do think there is like something from like a product perspective that maybe like trickier to get from like user demand rather than the kind of like again like the ideologically like corrective like we just need all the user flow to go through um one of these kind of like tee environments and therefore we can't do all the sandwiching attacks when you're yeah what if the users just like don't care I think we're moving the target I mean whatever is good for users is good for like let's define what's good for users that's the ideal functionality maybe it's not paying for failed transactions maybe it's not paying Monopoly prices maybe it's both but if we design something that's stable for users then that will be stable for a blockchain too only if it's decentralized and that's the key Point yeah yeah and I agree on that it's just like defining what like what is actually a user preference across like many parameters it's like hard agreed oh if you use a lot of a lot of people talk about uh Roll-Ups inheriting liveness and censorship resistance from their base layers uh we found that if you build a sovereign roll-up on a DA layer which is built such that it inherits censorship resistance and liveness from its base layer fundamentally you leak a form of Mev to the validators of the base layer called profitable censorship and if you don't want to uh leak that Mev because maybe you don't want to create anything like gas Wars on the base layer then you can't inherit liveness and censorship resistance from the base layer so if you're using a shared sequencer and your shared sequencer has its own consensus and its own proof of stake in its own token the cost to create a liveness failure on the shared sequencer is the cost of one third of the stake if it's tenderbent style and that could be very high that could be high enough that roll-up developers don't feel as though they need to build a forced transaction inclusion mechanism from L1 it might be censorship resistant enough on its own and so uh the shared sequencers do can help remove that Mev from da layers this is really really good before we finish it up on Mev do you all envision any way for a roll-up to be able to capture its own value just like that like like what what would be like more of like a mechanism design for for a roll-up programmatically capturing Mev as opposed to only relying on something like Suave or whatever's built into the shared sequencer I mean I think that if a roll-up is using a shared sequencer then that the shared sequencer becomes part of the role of this protocol and so it does need to be programmed into the shared sequencer um you can always view things as roles participating in some kind of order flow auction so if you do design order flow auctions then maybe there's a way of doing it without programming it into the into the shared sequencing protocol but I think that that's the opportunity that we have right now so one of the ways if we didn't really touch on none of us really touched on this in our talks but um with base roll up if you use the L1 then there isn't really a way of programming into the base layer like oh roll up should get back this portion of Mev we designing these decentralized protocols on top of the layer one have that opportunity now and I think it's important for adoption it's important for at least the major Roll-Ups out there to be convinced to use espresso or Astra or oil kit right an important thing to do is to say here here's a credible Revenue sharing protocol in place that can allow you to get back the value that you're creating for the system rather than the system taking all the value and so that is a I think a very important research problem that I'm trying to get people excited and interested in we have some in thoughts on that I shared a little bit in my talk you can have like alternating blocks where in some of them you run independent auctions some let me run joint auctions independent being one for each roll up joint being auctioning off wholesale blocks for all the Roll-Ups at once and that allows you to estimate and approximate the marginal contributions of each more more directly and and um and then use that to inform some reallocation strategy but this is a wide open problem that welcome everyone to think about and and offer better Solutions on we think a lot about how you can do Mev redistribution and things like that and we suspect that the way it might work is if you're if whatever layer is doing your transaction ordering has really really good censorship resistance maybe with something like a threshold encryption scheme or possibly with a multiplicity style scheme that Duality proposed you can use verifiable sequencing rules and maybe something like protocol and Builder to capture that Mev and do interesting things with it there's also of course all the all the various and epbs smoothing and Mev burn schemes that are coming out of the ethereum world uh and maybe those would would have some way of ensuring that it gets captured and redistributed in some Equitable way as well I guess I'll just throw like a contrary point in here maybe of like so from our view of like the idea that like deploying a roll-up should be as easy as deploying like a smart contract or whatever the term we use there was a question to me of like who is the roll up and what I mean by that is like you know not the mechanism design of like calculating like the counter factual of like a single auction versus like a combinatorial auction of like what is the value that this roll-up deserves which question of like who is the entity that like represents this roll up and how is the shared sequencer aware of that being like a distinct entity so it's kind of this question of like and Ben we've talked about this like various research things like where do you pay back like the roll-up itself like what is the state machine that is like actually calculating and like you know receiving these funds and choosing like to distribute them like to our thing we think from like a ux or like a developer experience it's important that like there's not like a registration phase for like a roll up to like sign up to the shared sequencer that's kind of an intentional and why we're like a lazy shared sequencer so to this degree it's unclear who would be like the valid entity that is being rebated the actual funds even if we had a magical way to calculate like the optimal value that should be returned it's like well who are we actually giving this to and then the other point I think of is like where do we want this value to be like returned to should we be thinking about like the roll up as some like nebulous entity or like application developer should we think about like the users right what if we see some space where you know I didn't have you know tough time in my talk to cover but like what if users are doing something where they have some kind of front end or singular order flow thing whether it's like Suave or some other kind of aggregation mechanism that is actually using multiple distinct State machines and then settling to a single shared sequencer well that user may not have some kind of like preference for one of these chains versus the other and so should we be thinking more about rebating the Mev to the users and again to Ben's point right going to order flow auctions of like well actually we're trying to get the Mev fairly back to the user and you know just right now in the current like Mev design even on like eth right like 90 of that mmv is captured by the proposer so that's like the entity where you have to get that margin from to give back to the user but it's unclear if we want like an intermediary up to like give it to like the sequencer or like you know the nebulous entity that is the roll up really we just want to be giving it back to the user and giving them like best execution price nice okay so much good Alpha right now um let's let's focus um on base Roll-Ups based Roll-Ups are a critical part of shared sequencing you can't really have shared sequencing without some sort of lazy execution so I'm not really sure on the um exact definition of based roll-up but effectively you agree on the transactions beforehand and then you execute them so this is what I think what Josh was talking about earlier on his talk where you have um sort of like an optimistic relay where you're you're submitting a block you're submitting some sort of transactions and then you have some sort of arbitrary execution environment on top so another thing to do with Mev is I'm curious on like with this execution environment itself on reordering the transactions or doing something to do with a base roll-up capturing again this goes back to like programmatically capturing its own Mev is can you have a base roll up that doesn't necessarily respect the ordering of the shared sequencer and can that like be beneficial in any way do you see that as like a viable thing or I mean a very fair answer is no no but no and or is it only yes and can we do a no and okay no uh anyways it gets into the definitions of a roll-up can Define its own State transition function so and that could be on a block level for example you could have an ordering of transactions in a block but then an application which reads all those transactions like takes the average and then uses that to determine like the state of an amm so you can process you can Define your state transition function to be not just executing transactions in the order that they appear but it could be some deterministic function of how they appear in blocks you have to of course break it up into some parts you can't wait forever until you decide what your transition is but you could do transitions on a block level as opposed to an individual transaction level and that does give you some ability to Define these reorderings but the key thing is you can't do it in a dynamic way you can't do it in an opinion opinionated way anyone looking at what the shared sequencer outputs and knowing the the state transition function knows what's going to happen there's no like Dynamic thing that the rollup can now do so that's the nuanced perspective yeah doubling right like the state transition function like we argue like it has to be deterministic right how you order it you can just say I read it backwards like why I don't know because you choose to right like I think a batch auction is probably like the cleanest thing if you have like an amm like a penumbra style bash auction right like everyone gets the same price it doesn't care matter if you're at the front of the block or like the back of the block right but like it has to be deterministic you're not like doing like a random shuffle because again then the shared when they're like against like what is the commitment giving you if you're like ah someone's gonna randomly Shuffle It by some exogenous extra protocol rule you're like right well you won't come to consensus on it then like what are we doing here right um so it doesn't have to be deterministic again like how you order it how you refund it like fine but also from like the shared sequencer perspective like it's just like including the transactions it doesn't really care what you're doing after the fact that's on you the the name of the concept is verifiable sequencing rules I believe and it reduces the problem of fairness to the problem of censorship assistance if you can get something included then it will be ordered fairly according to the verifiable sensor verifiable sequencing rules there was a research day talk about it from uh Mathias it's it's quite good Target I'd have a general opposition to like the concept of like fairness being like a thing there might be some like useful economic definition for it but like I think arguing of like fairness is where we get like spam and whatever right like all of the first come first served things of like oh is it fair and like was it fair that the guy has like faster hardware and like a better like a shorter ethernet cable is like faster than you well maybe not fair but something that you can capture and redistribute possibly yeah exactly so what I was trying to go with that is that you definitely need a deterministic function but could you design a deterministic function that can Direct Value capture to somewhere where you want some sort of programmatic Mev capture so something like a batch auction like what you were saying yes but I think that can only be the value capture within the state machine of that specific roll up that cannot be the value capture of say an inclusion fee within the shared sequencer like you on your roll up cannot deterministically reorder something and such that you extract value from like the inclusion fee on the shared sequencer yeah I mean it's also important to know though that if you have a deterministic function and you are the protocol or the Builder that does have Dynamic control over the ordering of transactions that then go into that state transition function you are the entity that can figure out which order is going to maximize my own profit or which order is going to maximize some profit so you don't really have control just by defining the state transition function over where the profit goes and that's why you still need to get back to this order flow auction design that we were talking exactly because the proposer has Monopoly over not the proposal well again it comes back to consensus protocol the not the proposer has a monopoly for one slot right which is important because that means that it will take whatever output it's given if that's the only output from some order flow auction that it can choose from that's the consent that's why consensus protocols that's why blockchains are good right blockchains turn proposers into monopolies from one slot and that's why each con centralized systems are bad because you have a monopoly over all slots and it's amazing that when going from Monopoly over all slots to one slot allows you to achieve non-monopolistic behavior in a system that's like the coolest economic thing about blockchains um but you still need to solve this like Builder side you need to solve this order flow auction that designs a system which is stable for users if you really want to mitigate or minimize Mev or control where it goes your verifiable sequencing rules can't they don't know if somebody sold on a centralized exchange after they did a swap for example for example great if how all the Mev is extracted that's nice okay so we're bear with me we're gonna bike Shadow on naming just a little bit fun um Okay so one of I think actually the main criticism of shared signatures is just the name so like do you think that shared sequencing is a good name like is it Justified or would you rather go with something like I've heard shared proposer I've heard sure shared aggregator is it not sure it seems reasonable but maybe not even that I don't know what do you guys what do you guys think are we going in order here I think that when it comes to names there's no there's no perfect name for anything so I mean blockchains aren't a great name I'll say it [Music] um they they made a lot of sense for for proof of work consensus but um you know other other consensus protocols may not be blockchains but but it's the thing that catches on and it's a thing that resonates with people and it makes sense and I think that shared sequencing we've all now been using it and of course once you start using something people are going to point out reasons why it may not be the perfect term um but in the end of the day it's a pretty decent term and sequencing refers really to finalization of the sequence in which Roll-Ups will execute their transactions we could add that to the title that's a mouthful and I just don't know if there's another name that's like nice and short and succinct that captures it but if somebody comes up with one you're the winner I think it's a good name a lot of people like aggregator I think that's a good name as well I guess I'll say like yeah we made like a very intentional decision to like use shared sequencers like it was like a marketing term right but like fundamentally like people that use the same shared sequencer have a shared view of the sequence of transactions so like certainly better than like settlement layer where everyone's like what the hell is a settlement layer what are you settling what is settlement right we're like no no you use the shared sequencer you and everyone else using it has a shared view of the sequence of transactions that feels pretty explicit right yeah we implicitly assume that it's like in our terminology right like a lazy decentralized shared sequencer but again you just have to pick words and put it in your marketing copy are there any other misconceptions on shared sequencers that you guys would like to address now shared sequencing is not one roll up shared sequence is not shared execution it's not shared building per se it makes some set of shared building easier I don't know shared sequencers are real that's a great segue into uh does anyone know really quick how much time we have left oh wow okay well okay that's great um no no there's no need we don't have time I was gonna we were just gonna handle if Roll-Ups were real or not so we'll just uh we'll just leave that for next time all right thank you everybody I'm super I was super excited for shared sequences before take them now I'm extra excited for shared sequencers foreign 
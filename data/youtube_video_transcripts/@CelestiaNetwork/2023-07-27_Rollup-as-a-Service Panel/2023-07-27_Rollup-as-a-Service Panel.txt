okay well everyone good afternoon thank you so much for joining us for our rollups as a service panel um I'm Tracy Wang I'm a deputy managing editor at coindesk excited to moderate because we have four um Roll-Ups as a service projects all on stage and so um you know hopefully nobody starts fighting but uh but why don't we just start with you know if we can go down the line and have everybody introduce themselves kind of a little bit of your background any other previous projects you've worked on that are notable and you know kind of how you got to where you are in just like a 30 second intro yeah sure um hello if you haven't if you weren't just here for my talk I'm Matt I'm the founder of Caldera um got into crypto um back in like 2012 2013 um bounce kind of in and out of the space did a lot of stuff around startups some performance engineering for things like games and operating systems and found my way back into the space working on relative service trying to you know unlock scalability for novel applications on ethereum yeah hi everyone uh Yoshi here from all year so um I actually I started my research by in 2012. many consensus protocol and also privacy mainly publishing uh sort of research papers but in back in 2016 and 17 uh together with some clicks we started to do research on scaling mainly sharding at that time so we co-founded silica and uh basically pushed the midnight for the sharding protocol and later on I also working on some more teaching approach and then around two years ago we started earlier to build this decentralized geolog service protocol for application to quickly spin of a roll up and skill their applications hey I'm Neil great to see some familiar faces here founded eclipse and prior to that I was working at Citadel as a Quant researcher in the Commodities group I did like power gas electricity and then I left I was briefly building an evm for the cosmos SDK so people up here might know like ether mints or Atmos and stuff like that so what this was instead was you take the regular webassembly virtual machine and you try to run evm by code through that and the advantage of doing it that way is you get better Atomic composability between evm smart contracts and was on Smart contracts so that was the thinking my main reason for doing that at the time was actually Tara because Tara had a lot of momentum so in Terra d-pad I just scrapped that project and I went back to the drawing board I was chatting with the Celestia folks for a while I was chatting with some folks at CK at Xerox Park and finally like ended up building Eclipse because we wanted to address this Gap we saw on the market for really highly parallelized high performance as burlaps uh hey everyone my name is kotok uh kind of started building uh on ethereum in 2018 but then I got the AIML hype uh of that time but then like I realized it was not for me and uh back in 2020 that came back came back to the space and uh started uh learning uh reading and researching more about scaling in general uh I I worked with the ethereum foundation uh uh in the PSE team a little bit working on uh the Hubble roller project and the BLS wallet project and uh also uh work with live pair for a little bit moved their protocol from maina to arbitrum and I think last year uh I took inspiration from Hubble and like spin up uh spun up a stacker and it was uh basically a framework for building uh Roll-Ups and yeah that's pretty much about me all right thank you so we are at modular Summit and so if you guys can briefly talk about kind of how Roll-Ups as a service kind of fits into the modular vision of of the world and also if you can give like a very very high level definition of like what a roll-up as a service is for any of our new joiners that might not know and uh I think there is this uh you know similarly that some people use that like Amazon web services is to web 2 as like Roll-Ups as a services to web3 I don't know if that's a you know directly like a good comparison and so if you can kind of explain what Roll-Ups as a service is and kind of how that fits into the modular vision of the world uh why don't we start with uiq oh great so uh for your best service right so um I think we are talking about modular a lot um today and probably tomorrow so as we know right um like uh two years ago like Mustafa mentioned about these uh Celestia and also modular at that time we are trying to move from this uh monolithic blockchain model to this modular models in that case we try to decouple the monolithic sort of a design from these execution layer settlement layer D layer into multiple multiple like modules like Celestia handling is Da and execution basically belongs to different Azure Labs like we know the optimism arbitrum all different zq relapse and then we also have the settlement they are typical women uh we mean like the ethereum so in that case right when we talk about modular for your library service is mainly like for us um like we mainly focus on this execution layer like really run and the show labs for the applications so that's sort of the definition for the modular when we talk about the usual app service but as you mentioned right for uh if in limit terms it's really like AWS or cloud services in the crypto world so people can really just Define the parameters names and just click a button and then quickly either use us or some of our like projects uh like platform to quickly launch azola for their application it's either like sort of evm compatible or it can also be wasn't compatible even svm compatible or even like JavaScript compatible right it's really like in general execution layer but mainly for a lot of these decentralized applications um sorry my explanation a little bit long it's it's not as short and like like as the number one yeah snail do you have anything to add or take issue with no iq's answer yeah I like that analogy AWS for crypto that's very flattering I'm going to use that um yeah what's I feel like what's uh interesting well I won't get too much I feel like what I'll just say but what's interesting about all layers that it's reducing the fixed cost substantially by making it so short-term roll-up that's kind of the idea the ephemeral rollup but yeah roll up to the service it's like managed infrastructure this way you don't have to actually do the deployment yourself and more than that you don't have to maintain its reliability some other team and you're Outsourcing that to them though I think a word can go wrong is when the roll up as a service is spending too much time on consulting or things like that because that's not scalable Revenue in SAS terms and I mean Ras the whole name kind of like tries to piggyback off the connotations of SAS yeah of course uh so also I think it is nice to make a distinction between rollup as a service and roll up Frameworks for now uh so as uh Neil mentioned low uh it's basically managed infrastructure for rasp projects uh so for us it's mostly around like the framework model so it's uh it's interesting that still it can be thought about as AWS because aw has other services also that yeah you can use to build uh the cloud uh project as well so for us we think of it more in terms of like building tools uh for uh creating those State machines and creating those roll ups instead of like having a chain uh which you can deploy applications on but yeah the AWS example still works well I guess the reason why that AWS example doesn't quite work is because we don't own the hardware ourselves at least I don't think any roll-up as a service at this point owns it and that's why AWS works so well because they get economies of scale when more people use AWS their data centers grow or whatever it's like the whole Amazon flywheel and maybe that is the direction that roblox's service can move in they start to like vertically integrate even further yeah to build off of that like I think the if for a technical audience the example I like to give her like platform as a Services it's like a Heroku or like render Railway there are a bunch of these that are built effectively on top of AWS or gcp um but then offer services on top that's effectively what I think all of us are doing I suspect none of us are running our own Hardware we're all on top of a public Cloud um I think that the definition was was good so I don't have too much to add the one thing I'll also say is like I see ropes of service as like the distribution layer for the rest of the modular stack right so if you you have like the roll-up Frameworks themselves right stacker being one of them um you have like da shared sequencer networks Etc when people you know but who are like the people and the projects that applications or people who want to build chains are going to come to they're probably going to come to us and so we get to act as kind of like the top of funnel for all the amazing projects lower in the stack um and help them Reach adoption as well yeah the one thing to keep in mind is like Heroku never became a huge business though because as a result like when a company got big enough they would just move off of Heroku saying that's something that distinguishes Roll-Ups to service which is that you want to build in something that makes it a little stickier or like builds in a network effect into the whole deployment um if we like let's back it up a little bit and kind of talk about you know do you think that like kind of roll assistance service only makes sense if we exist in a world where there are like a lot of Roll-Ups do you this is a two-part question one do you think like we need Roll-Ups or whether you think that there will be a future with a bunch of Roll-Ups and why do we need them as a service yeah I'm happy to go um so uh I think honestly like there's less of a distinction between whether we need Roll-Ups versus like whether we need block space um like you know really like Roll-Ups are on some level in implementation detail and the reason why we've seen a lot of you know proliferation of Roll-Ups as a service versus like side chains as a service right which could have been done back in like 2017 2018 and kind of was done with like Enterprise blockchain but didn't really go anywhere is that with like Roll-Ups it's much easier to provide them as a service the model makes more sense and it's easier to be more aligned with a chain like ethereum um and so that's kind of one of the reasons why we've we've seen proliferation of rollups of service and the motivation behind that is just more block space and varying types of block space uh on blockchain network so like we've you know all of us has probably spent some time talking about like fully Unchained Games on-chain social high throughput applications High latency applications um all sorts of blockchain applications that are you know continuing to further like blockchain is this platform for for like General compute if you see those Trends moving like you need some way to scale and roll up to the service I think are just the easiest way to get there and then the question is like why Roll-Ups have service versus just like Roll-Ups in general or hosting it yourself I think it is similar to like the cloud services model where like you could run things on bare metal there was a time when people did that I remember an anecdote from like the early Facebook years like every time they added a new University they like physically went into like a server farm and like racked a new server and like added that to their platform so like you could do that with in a Roll-Ups you know real world without needing role as the service it's just adding another layer of abstraction on top uh also uh to add on top of that you mentioned like do we need so many Roll-Ups and stuff so I personally see roll ups as more on uh more on the application side of things than chain side of things so I think uh the the whole uh theme for today has been at least in this room has been like roll up should be as easy to deploy as smart contracts right so uh over to uh like right now we are building smart contracts uh applications are smart contracts but in the future uh if if you have like better tooling and better infrastructure on that we can just start building applications as a roll up so instead of the applications being deployed on a roll up application becomes a roll up in itself so I think one of the most prominent examples is dydx uh so dydx is like uh just doing uh before that uh before it moved to uh its own chain uh it was basically a stack x uh app and that's something which I see happening more uh once we build uh better infrastructure to deploy apps like that yeah all right so that point on like the block space being the reasoning I guess what's interesting to me is like there's a lot of commodity block space to l1's out there I think they're far from saturated so I actually think of the biggest reason why people deploy their own chain is economics and that also explains why we never saw side chains as a service because the fixed cost for a side chain for it to actually be secure is much much higher for a proof of stake chain you actually need some amount of stake probably millions of dollars to secure that chain and on top of it you need like 100 validators Each of which is burning some amount of money every month so you're burning millions and millions of dollars which for a roll-up the fixed cost is very low because you only need a small number of sequencers so what you're inherently doing is you're you're reducing the fixed cost and the trade-off is that you've increased the marginal cost because now you have to post every transaction to an L1 you have to pay for DNA but the upside is that when there is execution congestion and things like that then you actually share in that upside so you're going from being a rent Seeker to being like more of a homeowner so that's my thinking uh and yeah as far as why Roll-Ups the service I I'd agree like it's just too Commerce it's not something that I think application developers should be thinking about if they're as far as like running their own stack reminds me of like when people used to have their own in-house data centers I said it all we used to have that actually and it was it was actually much cheaper than using AWS if you don't account for the engineering time the wind into maintaining that whole system So eventually we pushed everyone to AWS that confused a lot of the portfolio managers because they're like what like the in-house thing is so much cheaper that's considered I wasn't really doing the accounting properly they should have been Amber they should have been properly attributing the engineers that worked for the reliability team and and trying to like average out that cost as well uh actually I can provide some extra real world examples um because we all talk about this blog space in theory right so we know that your life can provide much a cheaper block space and also at the same time uh if we can provide for our proof of validity proof we can still derive the security guarantee from the L1 select ethereum but beyond that we need some real world example right one of the example I can give is that we are working with one of the biggest gaming Partners right now so the thing like they got a lot of ips from Sega Ubisoft and some of them so the thing like the uh they couldn't really do this manual Consulting one by one for their Partners so what they have right now like collaborate with us and later use us to launcher July for the games that they can make it scalable like for example instead of assigned like 10 people or 20 people team like consulting company and to talk to different like sort of ips right now the can just use us to quickly just click a bunch of buttons and quickly launch the multi sequencer with fraud proof like roller for them for to to serving to serve their customers in that case like you can quickly realize uh like just skill the business not just like talk to them one by one but really like once they got the deal and then they can quickly spin off the rollout for them that's something I believe like probably if like all of us like especially in the room right we believe in the web 3 future we must probably eat the pie of uh internet industry right so in that case definitely we we have to Envision like in the future more and more the movie applications will use blockchain in the future right at the back end so in that case we definitely need a much more scalable and high performance like infrastructure so what we can provide this panel for the developers to use yeah got it thank you um could we go down the line and kind of talk about I mean now we're all convinced that roles as a service is the future like why is your project uh the one that developers should work with yeah great question I think this is going to lead to some interesting answers um for us we're really focused on providing the most mature Stacks that exist so op stock optimism and arbitrum orbit and also we have a really really high focus on customizability anything from like changing the chain parameters easily using Altier choosing which stack to use all the way down to like custom stateful pre-compiles we've been working on interfaces to allow developers to do that more you know all the way to uh you know potentially like additional VM level modifications as well we have a big focus on middleware I think one of the things we've realized is just like as uh what it takes to produce a viable chain doesn't stop at the sequencer we're really focused on providing additional infrastructure looping in folks we work with with other infrastructure Partners creating a broader ecosystem of modular services and you know modular infrastructure and we you know our focus is just on devx ease of use and getting people to through the market with a viable roll-up in the shortest amount of time so on our side we're a little bit more crypto native like for most of the team members join the crypto space since uh 2016 building these public blockchains so for us right we are mainly focused on these um decentralization security so the staff you can use earlier where our dashboard you just click button within two minutes you can launch a ruler but what you can have is really a decentralized sequencer you can choose the number of sequencers you have and also also multi-vm support right now it's uh evm and wazam compatible and beyond that we also have our own proof system so it's you can choose the settlement layer like ethereum or the evm chains and later like if there are anything wrong you can have a challenger Wi-Fi to do the challenge for the proof so that this sort of like the most of the uh like I mean advantages we have is really to highlight the decentralization and the security so that's why we spend like almost so two years on the implementation for the this multi VM and the proof system yeah yeah I guess my idea is that like all the roll-up Frameworks to some degree are in their infancy and that especially optimistic rollups none of the Fall proofs are permissionless or enabled so to me what distinguishes like different roll-up Frameworks or Roll-Ups to the service is what they chose to focus on and consequently consequently what they could not focus on and because that implies the trade-off in terms of their positioning so for us we focused on one was high throughput and high performance and the trade-off there is that the nodes are heavier so they're beefier nodes but they're very powerful so you could run like just an unheard of number of transactions and we have games that are posting literally hundreds of transactions per second on chain and it would only be possible with a parallelized evm so that's one reason and then the other thing is avoiding vendor lock-in and that's something that also implies the trade-off to some degree because it means that there's no strict allegiance to any ecosystem you can actually pick which ecosystem you want to roll up to be aligned with but as a result Eclipse itself is not really aligned with the specific ecosystem it's more like people when they deploy an eclipse chain they choose the positioning for it and they have to to make that positioning known so that's kind of how I think about it uh trying to think if there's anything else that really distinguishes because I feel like all the Integrations things like that like everyone has to provide any block Explorer you have to provide Bridges these are just necessary conditions to having a viable roll up uh so for us I think of EV stand at a like a little different from all the other projects right now over here so our focus is mostly on like uh developer experience so we want to build a system so that you have like a very web to style of building web3 native applications and that's what we are going towards so it's not a chain that we are providing it's it's a toolkit that we are providing it has a bunch of Library functions so you can think of it as like how you develop uh uh react uh react front ends or something like that you have like a whole component system you pick and place components and you just place them so that it just like builds like your own State machine so that's that's the thing that we are focused on like uh building uh making develop uh making uh people uh easy uh give the give them access to build their own custom State machines and those custom State machines we are calling it as microvelops because they are like literally what you want them for uh to do so if you'd want to do like you want to build a token transfers uh application you just pick and place the components required to do that if you're building a gaming application you just taken like a ECS system and you just build a state machine out of that so that that's the that's the mode that we are trying to build in and provide yeah so moving over to economics like how do you envision uh you know roles as a service kind of monetizing okay I guess we'll start with Neil well I I don't think that there's like anything realistic Beyond like face plus variable the question is just like what is the variable fee charged on is it on like the size of the transaction or is it based on volume or something like that and then the question is how much is that fixed amount and it should be some function of the margin the cost of running nodes uh it should be some function of just like the mark it depends on like where the Surplus accrues whether it's the producers consumers uh heart but some some variation of Fix Plus variable so I actually I really like the data new and also uh matte just presented uh in the talk as we know right I also give a talk at ECC on the first day so the thing like we have to have the breakdown of all the roll ups either for the general purpose roll up or the application specifically roll up so in general it's like you are discussed right so three parts one in the execution cost so you can charge this part of fees from the users right to cover your L2 operator costs and probably also sometimes we import the data either to Da or to the L1 so this kind of average cost beyond that they are also like regular you know data to Da right so for games and I probably always prefer like a cheaper price so then it's a Celestia eigen da and it will probably add a better solution but in the end like I believe probably for all of us we we are trying to make it as mobile as possible for developers and the project that you can choose what kind of solutions or pricing plans they want but for either it's like sort of the normal pricing plan different tiers or we make it like pay as you go but in the end it's sort of like after uh the cost from the uh from the running infrastructure plus the service fees we can charge from these developers or projects beyond that I think one good thing like for all of us that uh if some of these roll ups are quite Successful by running these sequencers or executions right we can sort of have some premium on the lo2 fees either from the users or from the projects yeah but so how many different pricing plans do you guys have then uh no I just give one example it's sort of like the multiple ways right right like you can try price implant all these uh PSU world as different like models but in general we need to cover the cost for the L2 I mean in France yeah there's a lower down yeah yeah so if you're talking about like hypothetical pricing plans I'm curious like what your project currently is charging oh for me um I to be honest it really depends on the uh like sort of customers so I can give you one example like because we are providing like different types of products right one is so-called flash layer so for some rft mint and also some games the spin of The Flash layer for a few hours and then they tear down we roll up all the Ft back to the L1 like ethereum polygon so in that case uh it's like a one-time uh charge just for this flash layer and another one is like a relative like a persistent one so in that case uh it sort of like depends on the number of sequencers you choose and also the da so on our side we can charge like sort of the infrastructure cost for the number of nodes you run but at the same time if it's really successful there's a premium like sort of from the fees we can get yeah something like that but but still right uh it reads his back is some game providers I mean we work with them they don't change they charge nothing from the users yeah they so it's a zero gas we provide and and basically that in that case we can only charge the fees from the game providers yeah it's it's really case package at the moment yeah yeah so gasless transactions are interesting because how do you prevent spam with that specific architecture um so uh so so for for these games right uh they have typical they have the wireless yeah have a wireless phone users basically so that's why I say it's a really it's my case I mean a lot of these web tool applications um probably uh stacker has similar experience so their requirements are quite different from the crypto native applications they don't really know how to install metamask they don't really care like you tell them like 15 minutes 15 seconds two seconds they don't care they just want 100 milliseconds yeah so what can you do we have to make it very fast but at the same time need to fulfill their demands on all this stuff that that's why it's uh it's just some examples but in the long run definitely we can choose our customers right if it will be coming very big yeah well I guess like once you have a self-service thing though then you can't do it so like Case by case you have to have some like standard pricing yeah if I might jump in here I I think like one of the the interesting things about the raspace in general is like any given pricing structure has like certain kind of failure modes right like if you're if you're charging like you know a flat fee for hosting maybe a small amount per transaction you might end up securing like billions of tvl making like a few grand a month on the other end like you know if you're trying to charge based on tvl or Bridge volume you might be supporting like an on-chain game with no activity uh for very little so I think like pricing models um yeah like it it does sort of need to be a little bit bespoke when you're thinking about different types of applications um and like really like at least for us like our North Star is just like we want to price it so that the user feels like they're getting a fair deal like with the value we're providing and that might be different for different types of applications yeah that's an astute point about the failure modes of pricing models and actually offering different pricing models makes that problem worse because then like the amount you make is the minimum of all those you end up with like a it's like not a great outcome actually you want yeah you have to kind of accept the failure mode of your pricing well it's it's like something of like an iterated game right like like yes they're like you you could find like someone could act adversarially here but like you could just like presumably you're actually providing value to them they have some value you know that they're willing to pay well I think I like you can at least assume people are economically rational or they're gonna pick the best deal for their application so if you have like two pricing structures people always pick the one for their specific application that's more favorable for that app sure but but like you know if like the company ultimately has the decision like the power to make a decision there right yeah yeah like like I mean like like us take the one Roll-Ups no I'm saying that the Robes of service company has the decision of how to deal with oh right yeah yeah you don't have to offer multiple options yeah yeah yeah yeah um I mean it's just like typical Enterprise sales right also like uh uh it's a question from from you guys like how we see uh things differently on the experiment side but how do you feel like uh the companies running the application like putting putting it uh the charges on to the user like how does uh how do you see that happens it's just like uh what are your thoughts on that oh that's a good question um I think in certain cases it makes sense like like you mean basically charging users transaction fees like it makes sense in general um we as a company were very skeptical on business models that are entirely dependent on that on user paid transaction fees just because there's like pretty massive incentive incentive misalignment there right like you know we there are some folks like working in the space who are like you know they're taking some percentage of fees that users are making and like it makes sense now and you you'll see a lot of like VC tweets talk about this with like optimism or arbitrum right I don't know if anyone in the audience has seen these tweets like you know once 4844 gets merged in like the margins that optimism and arbitrary are going to make are like going to go to the moon like what's actually going to happen fees are going to come down margins aren't going to go up right margins are probably going to stay roughly the same well it depends on like how that's yeah plus is distributed right when costs go down for a business yes you can also make more money or it can be completely passed on to the customer that's that's yeah that's that's true but like historically what we've seen is that these get competed down to like to very little um I think that's because optimism and arbitrine though offer commodity block space like the the user or the DAP developer doesn't care about whether they're deploying to one of those or the other and therefore like they compete directly right yeah that's that's correct um it depends on how you view like the the ropes as a service space like do you view like on some level there's there's differentiation I think like like we we know that like when users talk to one of us they're talking to like most of us uh and so like on some level there's commoditization yeah I agree with that yeah the biggest benefits which is economics are are common to all chains all right um let's move on to developer pain points what are some of the you know Common pain points that you know teams that you work with bring up and kind of how do you plan on solving them and then also I want to leave some time for questions from our audience after this question it's got to be a liquidity fragmentation I think and interoperability and that's a tough one to like answer because for a lot of apps the right answer is that a roll up at this point is not quite right for it if it really needs to do heavy composition especially Atomic composition and even through shared sequencers espresso had this awesome Workshop yesterday on shared sequencers and they gave this toy example about a bank and the bank contract is on Two Chains it shares a sequencer so that sequencer produces full blocks for each of the two chains and what you want to do is you want to put usdc on one side and get die out of the other and the tricky part is making sure that it doesn't fail and it doesn't like you don't put usdc on one side and the die doesn't come out on the other side or vice versa die comes out and usdc does not go in and that basically relies on the Builder providing a block which is uh which is correct which because the Builder can execute all the transactions they know if the block they submitted is going to revert or not so you want to make sure that Builder is acting honestly so they said oh you can just give have the Builder put up some stake you can slash the Builder and that to me that was like a fun example but but after the at first I was like it seems reasonable but then for like an hour after the talk I was like there's so many failure cases for that actually because I mean if the bank could lose out and there's like collusion issues the stake size it was like the devils and the details there and also how do you prove the transaction failure or do you like use the L1 first but this maybe this is a tangent but um but my point is that Atomic composibility is really hard to achieve between Roll-Ups so as a result you basically have to kind of focus on apps that don't rely on that so much across change okay I I will continue uh using the real cases like we we handle uh recently I think the major like like issues right now is still about technical uh issues uh we we have some uh back to the like sort of the panel right the ask us to have this kind of latency you can have a try it's like you must provide this less than 100 milliseconds and basically you play a fully engine give every move on chain but at the same time it's seamless and no latency that kind of the ridiculous uh requirement like asked about our partner so the deal is like can you achieve it if you cannot achieve it then then uh forget about it so we have to spend a lot of time a few months to really like optimize and re-implement the execution layer ourselves to make it like even compatible but to achieve these last 100 millisecond latency but this is something like a extreme case right one one case like this another case that I we also got some crypto native partners that you want like um super decentralized like sort of zolab system um they they don't care about latency but they want it as decentralized possible and as secure as possible you better you have a lot of sequencers but at the same time you must have a proof system otherwise we won't use it because this one is used for public good or something that so it's really from one extreme with another extreme like is this includes a lot of these technical development to to tag a lot of technical challenges which the existing general purpose out to having like so solved yet but as sort of like uh um I mean I mean a provider we have to solve this technical question probably ahead of the these the big players in L2 space that's why I highlighted a lot of technical challenges here but do you think it's worth it I believe so because we all dream like uh probably for the next 10 years it's a word for web 3 right so we want to handle like billions of users to use uh blockchain for in in the normal application so in that case latency we need to solve it decentralization security we also need to solve it these are all the great properties for blockchain but at the same time you can see right uh I feel like we're still in the early stage it's not like we are talking about Russ and we feel like we already have uh four great companies but at the same time there are a lot of new problems we need to solve um and I believe it's too early and and we we really together fix like all these solutions for that yeah so um also uh VEC uh developer experience like building in web3 itself as a developer experience problem and uh that is also something we would want to optimize for so like uh if you're building a game you you write some component in solidity then you write a front end in some other language and then you connect them and like they so they just like it's just hard the integration is just hard and also like like you mentioned like the latency issue so uh we kind of categorize a two different things uh the developer experience and the user experience and uh you kind of like optimizing for both so you get like both both like the uh web 2 experience for for building with like I've been saying that over and over so uh that's that's the kind of thing that we are solving for uh on the experience side of things it's not just the developer experience but although the user experience that needs to go along with uh while building applications yeah I I want to leave some time for questions so I won't I won't rehash what they said all right do we have any questions from the audience um in in the case where you have applications that are seen as killer applications do you expect that you have to compete between the two the four of you and on offer sort of concessions to them to get them to build on you instead of some of the other people that are there I think there are cases when a roll-up framework is uniquely suited to serve a particular application and to me things like virtual machine compatibility actually result they actually represent a reduction in fixed cost or one-time cost for a user to use your rest for example like if you have svm compatibility technically a chain or a gap coming from Salon it doesn't have to use you right they could use an evm chain rebuild all their smart contracts and evm and that's what's funny when I remember when stockx or stockware was um built writing the contracts for dydx and Cairo people were dunking on that a lot but actually they were interpreting to me stalker was doing exactly the right thing all they were doing was it could have been built by two idx or it could be built by stockware but that's just some cost that's being incurred by someone they're just saying we're not going to pass it on to you we're going to we're gonna encourage ourselves so I thought that made sense uh but but yeah there are cases where uh where yeah definitely we'll be talking with uh with a few different like we they'll even just tell us hey we're talking to these other folks these are the models that they've given us like could you just like highlight the differences rather than giving the whole rehash yeah I I think it's I mean you mentioned concessions I think people are less focused on concessions when it comes to like pricing and business model um than they are on like which service makes the most sense for them like this is for a lot of applications like the biggest infrastructural architectural decision they will like ever make at least for like that version of the product um and so like typically we find it's like it's more on the fundamentals than on like price or anything else um should I just shout out thanks uh on some level obviously you're all kind of competing with each other but I wanted to ask who you view as your biggest competitors maybe in kind of an unexpected way you know is it is it no no no [Laughter] pick someone to cage fight amongst amongst the four of you no um is it like uh apps looking app developers looking at like the cosmos ecosystem um to have more modularity and control over their Stacks is it other l1s like what what are the Alternatives that your customers are looking at outside of launching their own Roll-Ups it depends on the stage of development that the application is in it depends on the vertical and things like that but overwhelmingly the competitor is actually the status quo just whatever they're already doing because because it just is cost for them but they have to put in a lot of effort to switch to another chain they're not necessarily even going to have their own chain I find that usually it's not between like Cosmos L1 versus rollup I find that that's not as common as I would have expected and I actually thought that we'd be competing with Solana more initially uh just because they're also a high throughput chain then I guess the loan is kind of fell out of favor became totally irrelevant oh they are no they're then I think it's a lot I'm super like long like totally and those guys I think they're really smart uh yeah but that's that's just uh reality like who who we typically find we're talking to yeah I think uh to his point like the stage of uh which the project is at its it's the most important thing so some some may want to spin off of our existing L1 protocol to uh to a roll up as a service or some uh some projects which are just starting out might just pick a chain to just build offer for a framework to build off of so I think that's that's very important all right I think we're out of time now but let's give a big round of applause to our panelists and a round of applause to our moderator please 
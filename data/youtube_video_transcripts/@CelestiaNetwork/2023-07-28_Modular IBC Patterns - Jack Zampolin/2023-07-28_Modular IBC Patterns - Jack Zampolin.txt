okay modular IBC patterns since we're here at the modular Summit everything's modular um just a quick introduction hi my name is Jack samplin I'm the co-founder and CEO of Strangelove you might know me from the cosmos Hub the cosmos SDK IBC Akash sommelier and or Noble I've been working deeply within the cosmos ecosystem for many years Strangelove is dedicated to building IBC and supporting its growth and that's uh what I've spent most the last few years doing and that's what my company does so just a quick refresher on IBC for folks I think this particular audience probably doesn't need it but I think the broader modular audience there's a lot of people unfamiliar with IBC especially the core underlying Primitives so I do think it's important to kind of dig through these so IBC is a general message passing framework for blockchains it's modular by Design and there's some key Primitives that are really important to think about the first one is clients so clients contain all the authentication logic which chain am I talking to what are its validators how do I know that the state transitions that's providing are valid connections and channels make up the middle layer which is the transport layer and this is the sort of like how do you connect one smart contract to another and it's the on-chain pieces that help Define that and then there's packets so from a developer's perspective that middle layer which we call the Tau transport ordering and authentication you don't really need to care about it's uh kind of the the key part of the protocol and it helps you build everything on top as a developer if you're a chain developer you might want to care about clients because maybe you have some unique consensus or you're an optimistic roll up or you're a ZK roll up and you've got some different cryptographic properties that your chain needs to authenticate it and you would encode that into a client and that runs on all of the chains that you want to connect to and then on top of all of this infrastructure we build the packets and this is the application data formats that you send data back and forth with so roll ups we've got CK Roll-Ups we've got optimistic Roll-Ups and some other stuff based Roll-Ups modular pilled Roll-Ups I don't know people are coming up with all kinds of stuff but for I think for like practical purposes there's really two we've got ZK Roll-Ups which are kind of the future an optimistic Roll-Ups which are the the today technology and I think that bringing IBC to each of those there's some unique challenges to each of these different architectures so I'm going to dig into optimistic Roll-Ups a little bit the dimension team was just up here and they showed you guys the right way to do optimistic IBC and I think that the the escrow thing that you guys presented was was really cool and like being able to optimistically accept that is one way to get around the dispute period this is the hard way this is not the easy way and the the dispute period does lead to some bad ux but like you guys had a really elegant way of getting around that this is similar to what Uma protocol is doing on ethereum and it is uh you know definitely One Way Forward that's kind of tough ux for users in a lot of ways and I think it can end up being hard to reason about then there's the easier way and basically this comes down to a committee whether it's a multi-sig a validator set um or some sort of combination of those there's a committee of keys that um provides that authentication logic and helps validate the data coming into your chain this tends to lead to much better ux and is a lot easier for users to reason about even though it introduces additional trust assumptions so um the right and the hard way I've talked to a lot of folks about it it's been hard to get people behind building that out and like building on top of that for a variety of reasons so I've been thinking a lot about committees and I I came up with kind of a fun little committee design that uh seeing if anyone's interested in um so let me talk about this Stamper idea you'd have a tender mint chain where essentially validators attest to the optimistic roll-up header so what does this mean each of the validators would be running a full node for the optimistic roll-up and then submitting the app hashes to the the chain via vote extensions or some other mechanism once you reach consensus on those headers you can write them to State and then clients would be able to trust those and the on-chain like client of this is basically a tender mint like client which is a huge benefit but there's instead of checking the Stamper chains state for packet inclusion you go check the the state of the roll up for packet inclusion so one of the benefits of this design is it is the minimal change to the set of like underlying Primitives and libraries that are maintained by the core teams that would enable us to like offer the developer experience that we want which is that the roll up connects directly to any other chain in IBC it is able to bridge seamlessly that way and from a developer perspective you just send a packet directly from your roll up to any chain in IBC that connects to that Network um and this is a cool design but I think the biggest problem with this is It's a committee like any other it's kind of fundamentally the same trust assumption as hyperlan or axillar or Wormhole or any of these other committee based interoperability Solutions so I probably not going to build this maybe somebody does if you're interested please hit me up but what I'm more excited about I think is ZK Roll-Ups where the hard way and the easy way is the same you use a Celestia light node to check for data availability and then you add the ZK proof to The Sovereign roll-up and suddenly you're able to connect directly from that ZK roll up to anywhere else in the IBC Network this is what users want bring in its all chains and Bridges at the end of the day and like this kind of eliminates this idea of the settlement layer in a lot of ways which I think is why it's tough from a mental model for a lot of folks so on that side of things we're going to be working with Duality Labs Sovereign labs and informal systems to help bring the first IBC ZK like client to Market and try to drive some value directly to the hub so from an architecture perspective what does this look like we've got Celestia where the ZK roll-up is writing all of its state two for the data availability layer and then Duality which is an ICS chain would be running this like client for the ZK Sovereign roll-up and helping enable communication with the rest of the roll-up with the rest of the IBC ecosystem that uh like client could run on any other chain but I think initially we'll probably just run it on Duality and I think that this project is going to be a good blueprint for future ZK roll-up Integrations because there's a lot of different CK Technologies out there we're not going to have to do this once we're going to have to do this like 10 to 15 times as these cryptographic standards change as the proofs get faster and faster and help improve in performance so yeah I guess that's kind of what I had prepared it's just kind of a brief overview but happy to answer any questions that folks have sir yeah for sure so which part should I break down a little bit more yes where does the Thunderman chain come into play in this sense yeah for sure so uh the roll-up would incentivize the tender mint chain in some way I think the easiest way is to have it the role a roll-up operator would deposit IBC into this would deposit usdc into this tenderman chain and say Hey validators I want you to finalize my rollup headers basically the validators would then spin Up full nodes for each of the roll-ups and because they're listening directly to the state transitions on the network on that P2P Network they're going to see the latest block headers as they come in each validator will have an independent view of that state and then every time they see a new header they write it to the the tender mint chain once and then you're checking every block once two-thirds of validators have seen the same header we commit that header into State you can then prove that header using the like client on a counterparty chain so that you can prove that that header is included in the Stamper State and then you can check it for packet inclusion on the roll up side does that make sense Yeah so basically it's really cutting short the optimistic time yeah which is directly this and this is like sort of I'm validating you so no need to worry yes and I think the key idea here is like one thing that I don't like about kubernetes and I think a lot of other folks don't like about committees is you end up having these multi-hop transactions and it kind of forces this really sub-optimal developer user experience and adds a lot of latency in many cases and with this committee the latency issue is still potentially there but I think that there's a lot of ways to shave that down and uh also from an app developer's perspective it offers that point-to-point IBC experience that most developers are familiar with and I think like practically Roll-Ups are going to want to connect to like five to ten key chains to help bring in liquidity and provide other markets and potentially provide services via IBC and having to do that over multi-hop it's a complicated developer user experience so that was kind of the motivation behind the design cool I think just one thing maybe I would say my only concern with this is that there is some bootstrapping cost in terms of making validators actually do it for your rollout because initially initially way back then like one one and a half years ago we also had this notion in mind but we really wanted to make it super easy and to bootstrap basically roll up yeah this is I I think this is the the complex part and the devil's in the detail of all these designs I think for that you know there's a lot of like restaking designs that you could potentially do where you're giving locking up tokens with the validator and they're getting paid in yield those most of those are in kind it's not really compelling for validators I think in order to make this system work you'd have to literally just pay the validators money in order to cover it one of the like cool and fun aspects of that design is that you uh the Stamper chain could easily degrade service for the Roll-Ups in the event that user doesn't pay they just start maybe finalizing only one every 10 headers and then if payment doesn't continue maybe one every hundred and then finally dropping service after a predefined period of time and you can easily offer different service tiers for different Roll-Ups and different payment methods and I think that there's a lot of like room and flexibility to innovate on that side of things um but yeah it's like again the market needs to be there a little bit in order for this solution to really be viable yeah cool thank you yeah absolutely anyone else have any questions Suzanne I saw you had one did I answer it already um with the stamp idea this would be like linked to the conditional clients idea that you were wanting so that you link the two yeah I think conditional clients is like a nice to have it's not necessarily A must-have you could so we've got that wasm client and go now that accepts sort of like arbitrary wasm code and I think this is going to go a long way to helping users only have to write their client once in Rust and then kind of deploy everywhere so like that's one key piece of this but one of the things we did when building that Walzem client is we took the tender mint light client from was uh ibcrs and wrapped it in a smart contract and a lot of the testing we did was against that tenderbend client to ensure that it has the same properties as the tender mclining go and we could easily Fork that contract and then in the functions where we're checking for packet inclusion within the um within IBC you just substitute the roll-up header instead of the Stamper header so it's a really light Fork of that client it would be an extremely minimal change set conditional clients would make this nice and easy and be a lot more ergonomic and space-saving but in order to ship it sooner you could easily do it the other way but I think that like this is one of many use cases for conditional like clients and it's yeah but it's not a dependency any other questions for folks awesome that sounds great thank you guys very much for your time really appreciate it today because have a great one 
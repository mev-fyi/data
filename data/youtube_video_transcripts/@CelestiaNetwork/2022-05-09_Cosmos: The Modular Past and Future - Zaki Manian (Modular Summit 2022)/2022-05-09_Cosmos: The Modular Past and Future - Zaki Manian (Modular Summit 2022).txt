all right oh you're already up next up we have zucky co-founder of many projects also one of the founding fathers of cosmos i'll let him take him away take it away he's going to talk about the modular past and future of cosmos cool doesn't seem like it's working is it working now cool awesome sweet here we go all right so uh what does cosmos have to do with celestia um this i think is the hardest question to answer because no one knows what cosmos is um uh and cosmos is is sort of this emergent bottom up uh uh effort or like emergent bottom-up system that like emerged out of like a bunch of work um on building blockchains uh in this modular way that started in 2014 um and so uh you know i kind of uh i'm frequently the like face of explaining the system architecture to the world um but like uh credit to jay for like basically uh foreseeing like a lot of the problems that like mustafa and alex just talked about which was we want to run a lot of experiments uh we want infrastructure to enable running a lot of these experiments back in the early days we were extremely capital constrained um you know how do you like we we could you could kind of understand the scope of the problem of how do you build like a global uh financial system but like you know it was just like a bunch of people who were like you know it was like small groups of people who were coding we had very little money um with very little resources and to build all this stuff how could you actually achieve uh the system uh another sort of sort of anecdote um just about like how this is all destiny um it's all it was all destined it was all foretold um the original idea uh that jay and ethan came to me with uh which was their idea for a public blockchain was called supertanker supertanker was basically the idea of have like one tendermint chain where you write the block headers from other tendermint chains too and then you would do fraud proofs if those those tenderness chains uh uh if those validator sets for those other tendermint chains like uh produce an invalid state transition so doesn't this sound like awfully familiar um but so my objection back then this is this is 2016. um my objection to the supertanker design was we don't have a solution to data availability that scales um like tendermint blocks can only be so big um we can't write like the transactions for hundreds or thousands of blocks uh to the tenement blockchain like we should do something else um and so i kind of like was very much pushing a bunch of other ideas about how you would get sovereign interoperability that i found in like mark miller's work from the 90s and that's how we sort of got to the the architecture that we sort of launched in 2021 um we had no idea uh that it would take that long but you know uh uh like there were many hijinks and adventures along the way so cosmos though has been this like uh so like mustafa mentioned uh abci um abci is sort of cosmos's modularity i'll get to a little bit of the origin story of that later but largely i would say the modularity that we built into the system has had a number of big success stories um so there are a number of chains that have used tendermint to augment geth um going back all the way back to 2016. uh we're uh maybe 2015 where like kobe shows up in the tendermint slack he's like i have guest running on top of tendermint let's call it ether mint um and then like you know all of this code was open source a lot of people ran with it we got and you get things like polygon and binance um which are sort of elaborations on this original idea of augmenting death with tendermint um you know the sort of team the cosmos the tender team like focused on the cosmos sdk and we've had a bunch of big block chains now that like have billions of dollars of uh value that use the cosmos sdk chain the sort of raw cosmos sdk and interoperate with the whole cosmos sdk ecosystem of wallets and block explorers and all these pieces and you get this like shared component architecture around the cosmos sdk with strong network effects so like terra luna osmosis atom that all works then we also have this like explosion of uh smart contract vms uh that have emerged in sort of this ecosystem so like you have agorik evmos cosmosome uh and probably there's going to be more it's very exciting and then you have people who have built like entire alt alternate application frameworks like oasis and penumbra and enoma and nomic so this to me is like hey like this is the this is the shining example of like sort of the social and like adoption benefits and how sort of making these choices to build tendermint through this abci interface as consensus separated from application has like yielded like enormous benefits uh to our entire industry um and so this is sort of to me like why modularism has been good um why i am really happy with like how we went about building uh tendermint and cosmos because i think all of these things have been massive wins um so our sort of layers of modularity are abci and abc i plus us uh application blockchain interface so there's when you build on top of tendermint you get this like list that's probably about a page of apis that you have to provide in your application and it's it's like sort of obvious things it's like okay like begin a block so like what should the application do and when a block is commit like when a block comes in uh deliver all the tx's so execute all the transactions uh end the block uh commit the block uh these are like the sort of standard apis it's pretty simple um you see you uh they're like if you like look under the hood of many other blockchain stacks you see like the same design patterns where like basically the same application consensus interface but what was what was unique about the tendermint approach was that we took this approach of uh sort of standardizing that api it hasn't changed that much since like 2015 2016. though abc i plus plus is a new thing that's coming out of the tendermint team um to sort of enable all of the things that we didn't foresee um and like you know hats off to dave ojo for like sort of like really extending the api in a general way um but this is like enabled things like optiment and celestia to use like uh abc in this really powerful way but like all of those people on the all those chains uh uh on the previous slide were are all abci users um the cosmos sdk has like also this modular interface where you can extend it with various modules um this has allowed like very diverse use cases like thor chain uh axelr like all of these things like really have like very different systems interfacing throughout this module architecture we also built ibc the inter like the sort of built-in bridging protocol to the cosmos and tendermint ecosystem in a modular way where you could actually pull out uh where you can actually extend the uh the client interface so like the transport layer like how do you authenticate like a message coming from which blockchain so we actually could have multiple security models um and then we've always had like support for many different signing algorithms and many different sort of cryptographic primitives uh inside of the cosmos sdk has also been a huge enabler and sort of uh innovation and integration with different ecosystems like you see all of these things coming out of the evmos ecosystem uh that support like the ethereum signing out algorithm and like people have tried with uh uh to build in support for like polka dot signature system as well okay so these are all sounds really great um but we've been doing this a long time and obviously hasn't all been beautiful um and and perfect um so tendermint itself uh is a bit of a monolith it has like excessive interdependency between things like consensus and peer-to-peer layers um and though a number of teams that have tried to build experiments sort of like within that system have failed because of just like sort of the overwhelming complexity of that uh task we have a lot of like large-scale users that are also like sitting on ancient versions of the system um you know like the uh the version of the cosmos sdk that polygon is using for their tendermint chain um is i think from 2019 um it's it's kind of terrible um we've also seen like a number of teams like kind of mostly binance like as the biggest one like take tendermint make a bunch of changes to it and then never open source or upstream their changes um phantom built uh there was like the first so like the dream one of the dreams of of cosmos was not only could you have many applications built on top of tendermint but you could have many consensus implementations because we didn't we don't believe that tendermint is like the end goal and state of consensus could also implement abci and phantom was the first blockchain to do this but it never really shipped and it's sort of sitting on the shelf um and then uh we basically abandoned the idea those are some community members you're trying to keep it alive of like sort of like making the uh sort of like uh local database of tendermint plugable um because modularity frequently imposes like a lot of sort of uh maintenance cost on the core team okay so how did this all start um so tendermint's modularity came about because of an ip dispute um uh there was one set of tendermint contributors who really wanted to gpl the entire software seat and another set and jay wanted uh uh te apache licensed it um and uh in hindsight i think apache licensing tendermint was like a huge reason why the modular systems uh uh uh like why this has become such an important modularity where and it's like one of the things that like worries me about sort of the modular blockchain stack is like we're playing too many games with like the licensing uh and the ip system and it's going to hold back innovation as people like do like business source licensing and stuff like that i think getting tendermint to be apache2 license was like a huge huge uh uh innovation enabler especially in those early days of blockchain so what we did was like jay came up with abci as a way of separating the gpl components from what he wanted to apache license uh and this is how we got the modular system that sort of formative thing sort of turned into like the philosophy of cosmos which is like sort of this like extremely modular uh system architecture um that i think has has has really proved its worth so this is the this is the start of modularity in cosmos uh what's the future hold um so um abci plus plus is this very composable thing or this very powerful addition to like the modularity system of tendermint um you can do a lot of things you can do mev mitigations uh i think one of the things that you've you see from like for instance starkware has this proposal about using tendermint to like decentralize the l2 sequencer um and like you can use abc i plus plus to require like a set of sequencers to agree on external data availability before producing like another uh uh another state update um and so like we are trying we have like we sort of uh somewhat intuitively somewhat informed by all of these emerging requirements as like sort of the modular stack evolves and we want to meet the needs of the modular sort of builders of modular blockchains we are somewhat we are like building these functionalities sort of in the core tendermint to like sort of enable people to do this without forking tendermint one of the other questions that we've been thinking a lot about and there's been a lot of conversations is can we extend ibc itself to be sort of fit within the roll-up uh uh paradigm um ibc is the sort of like sort of truck it's like it's certain currently like somewhat trustless in the sense of hey like we have this thing where you where the packets are authenticated by the validator set of the uh of the sending chain so like if you already trust those validators which you needed to because you were using that blockchain there's no additional trust assumptions but we could build um and we've sort of always wondered about like approaches to building like actual state machine verification so you actually could move away from trusting the majority of like a minority of those validators to just being able to say hey like the bridge itself authenticates or has fraud proofs and all of this stuff actually composes very nicely into like sort of the overall design of ibc um and i'm very hopeful that like one of the things that emerges out of the celestial work is sort of like an ibc ecosystem that does um sort of trustless settlement or like state machine verific verifiable settlement um but across like in this sort of like uh multi-polar ibc world rather than in this like sort of like hierarchical like settlement layer up world um we've been you know going back to the super tanker story we've been thinking about fraud proofs for the uh cosmos sdk also like if you kind of uh uh if you go back to the the historical split between polkadot and cosmos it was like we wanted to do like interoperable high multi-chain blockchains and gavin was like gavin and rob were like yeah we want to do all that too but we want fraud proofs um though they didn't end up actually doing fraud proofs um uh but we actually i think we have like a relatively good architecture for like adding fraud proof support to the cosmos sdk um and that'll allow it to sort of fit start like you to build applications in the cosmos sdk um actually then so open questions um we still really haven't like i've been like working in the zero knowledge proof ecosystem um for many many years but we still haven't been able to figure out exactly where zero knowledge proofs like fit in the cosmos ecosystem um and i still think that's like an open question it like it continues to be like a sort of uh a constant error of discussion i like talked to the mina team about using tendermint for data availability we talked to the star wars people about using tendermint for uh sequencer decentralization it seems like there's some piece that like tendermint is supposed to plug into like the zero knowledge ecosystem but we still haven't actually figured that out yet um so a little bit of predictions about the future um modular and monolithic blockchains are going to coexist for a very long time um there are still like there there uh uh there is a kind of uh uh purity to being able to like reimagine your entire system from the ground up um and uh there are things that you that i don't know how to build in the modular paradigm that i still think are useful in the blockchain space um like um but modular systems will outperform on decentralization i think like one of the coolest things about cosmos is the sheer number of teams that contribute at every layer of the stack and it is going you know what you will see what i expect to see with celestia is now you will start seeing teams that are building settlement layers and roll-up sdks and like zero knowledge proof you know execution environments they're all built on top of celestia but they're also going to contribute to like the core data availability layer they're all also going to find bugs they're going to improve the like uh because like as you build these module architectures it's very friendly to sort of modular organizational structure because you can have different organizations like own different parts of the stack they kind of can like uh and while you also have incentives because you're building it one layer to like fix problems or improve performance of other layers of the systems um finally like i have a project called similier and sommelier is to be like the best example of a thing that doesn't work in the modular environment like it is a blockchain that is sort of coordinating defy strategy execution on other blockchains and really the only way to do this is like if you own consensus up in like sort of your core application stack um and so this would be my like counter argument to like the the the modular blockchain thesis is going to rule them all um there's still going to be a place for monoliths uh i certainly have a lot of experience building them uh and uh that will be that um yeah and the the other thing is i think stuff like uh sort of like the direction that like many of mustafa's co-founders on uh on chains uh chain space uh have kind of gone down with like uh uh mistin and sui is another great example of like how you are building like highly uh like very interesting monolithic systems are still to be built so thank you very much questions you wanna do questions take some questions yeah [Applause] any questions can't see all right time for my walk excuse me here you go can you come on on the use of optimum with the celestia stack in terms of modularization yes so optiment is an alternate abci provider so like tendermint is like the normal abc i provider an optimum is an alternate abci provider and the expectation is like the way i think it's going to work is we are going to add um new apis to avci on optimum that add what's necessary for fraud proofs um in the cosmos sdk and then we'll add them on the cosmos sdk and then the dream is that eventually gets upstreamed into like sort of the tendermint provider um and so we continue to have like one abci but now we have these like fraud proof mechanisms um the other thing that like optimum is i think you know we need to figure out is exactly how we're gonna um because right now leader election is owned inside a like one of the questions i think is about this is um entenderment leader election is owned inside of tendermint it's not owned inside of the application um and we either need to change abci to like move that over or optimate will just have like a standard uh a leader election system for rollups like sequencers on top of celestia does that make any sense and is that yeah thanks thanks anything else guys any other questions ah-ha all right so yeah oh there you go uh thanks for the presentation my question is do you think that in the future monolithic chains will be more of a niche product that solves like let's say only one use case and if it is the follow-up question is how in diffusion you think model exchange can scale um so there is sort of the reality of the situation is is like there's plenty of room to scale monolithic chains um like it you do have to like exponentially increase the amount of resources that are involved in like sort of the core engineering um but like there's plenty to uh uh there's plenty to do in the uh in sort of monolithic scaling to get like you know an order of magnitude towards magnitude um throughput the the the real reason why i think um modular winds and the or like modular is sort of so like fundamentally important and like is basically like the future of finance layer um is because what we need is we need the infrastructure to become public goods um we need to like disperse the knowledge of how to maintain and build and improve and bug fix this to a very large community um you need lots of contributors and really the only two systems that i think that have ever done this are like the tendermint ecosystem and the ethereum ecosystem um everything else like the the the knowledge of like how to maintain the core system how to improve the core system how to change the core system is really like siloed in a very specific group of people typically a company um and like the modular architecture is the only reason way to do that and that's the only way we're going to build a system that is like fundamentally different from like the legacy finance systems that we're trying to replace um and so my my general bet would be like you may see monolithic systems really succeeding in like gaming uh like you know uh gaming nfts like all of these other uh entertainment more entertainment applications but i do think that the etherium sort of team uh and this you know is is very right in their sort of directionally right that like if you want to build the future of finance um modular is the only way thank you questions no no right behind you where ah go ahead um how trivial or non-trivial would it be for a monolithic blockchain in the future to evolve into part of a modular one as sort of a roll-up um so like alex was basically trying suggesting that it was it is like more of a content it is like more of a continuum than like an absolute and there's an extent to which that's true um but like i really think about these things as the social process of building them as being like is like what over determines like the future technical direction rather than like what the actual constraints of the software because like and so what i what i've yet to see is ever someone a project that started out building like sort of a monolithic architecture ever ending up with the social organization to do a modular to like build modular um they they just don't they don't know how to run a multi-stakeholder process right uh if you like the success of a of a of a monolithic blockchain comes from doing the opposite like not running a multi-stakeholder process being like we are going to build a blockchain we are going to make these technical trade-offs like if these don't work for you screw you um that is the that is the way in which you successfully build a monolithic blockchain if you want to build a modular blockchain you have to run this like multi-stakeholder multi-entity process um which is very messy and it's like harder to like figure out what's going on um you cut it requires a lot of engagement we see it in cosmos we see it in ethereum like happening in real life and uh that is a very difficult dif uh difficult social shift um so i think if innovations from the monolithic blockchain world actually make it into the module blockchain world it's mostly going to be like forking the code and like rebuilding the social infrastructure rather than like people like the monolithic people being like okay we like have gotten to the end of our monolithic story and we now are going to build a modular system thanks very much thanks all right anything else no questions ah okay there you go that was really interesting uh really interesting talk i wanted to ask you you mentioned that there are some features or functionality in monolithic blockchains that you think would be or you don't know how you would build in a modular blockchain so i was interested in like like what are the most challenging things to build in a modular system that currently exists in a monolithic um so what are the things that make some of these things really hard um one is where you want like so basically so there's like a like the story basically comes down to situations where you can like tightly couple the properties of consensus with the properties of the application so if you can like you want to change the rules of block production uh in a very specific way that's like about like observing external systems like what you what you need is like sort of monolithic total control you want to change uh you want to have encrypted transactions that like uh that are decryptable you want to uh uh you want to be able to control your scheduling in such a way that like you can execute that you uh uh uh like react to and execute to events like autonomously from other blockchains uh all of this kind of like tightly bound uh uh integration between consensus and the application still represents something that's like very hard to build in my mind in the modular ecosystem all right i think that's it cool thanks ducky [Applause] 
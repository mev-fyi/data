thanks everyone for coming Alex it's great to be here with you enjoying the week it's a pleasure all right um so we've only got about 20 minutes I believe and I want you to basically uh I want to get deep in the weeds with you about uh ZK sync and what you're building at ZK stack um maybe we could actually start at a high level you know I've heard you describe ZK stack actually as a set of architectures or Frameworks for people who want to build app chains so maybe we could get into some of the high level and almost like take us back to the room when you were originally ideating some of those decisions for ZK era and then we can get into some of the actual components about uh what makes up the ZK stack sure so what like let's start with what the ZK stack uh we have been focused on Ezekiel sync uh Ezekiel roll up technology for uh several years now we released era areas uh a the first zkvm live on magnet and install the the most popular ZK roll up also in ethereum network like where we are the most used L2 by number of transactions over the last month and third by TBL and we have seen a lot of interest in uh reusing the like a lot of interest from Builders who want to create their own blockchains their own roll ups their own application specific chains and we realized that we should just open like I mean the code is what was open source from the beginning but we want to adopt it in a form that makes it easy for anyone to build their own custom chains on ZK technology so ZK stack is a framework it's a modular customizable framework that allows you to take our code and create your own custom ZK chains you have a choice of all the different components for example you can choose the different data availability modes it can be a unchain data availability mode which will make your chain a ZK roll up it can be a validium it can be a mix of both called volition or we call it GK parter you can customize the sequencer you can have you can go for centralized sequencer or decentralized sequencer which we're working on or you can you might use something entirely different and reach the stack and share it with others uh you can customize the the way you you deal with like you might maybe you want to use your own token for some things like you have full control over all aspects of this tag but the the great the like really interesting property of ZK stack is it's designed from the beginning to be interoperable with others you can Stacks uh with other like what we call hyper chains uh using a new primitive we call hyper Bridges this is something only possible if you build if you start building in a shared ecosystem there are certain technical properties that you need to enforce in all of these chains have to use the shirts uh shared like base contract on on layer one of the shirt like people call it bridge I don't like the word bridge for for this type of thing but it it must be a shared thing and then you need to use this common standard for uh for passing messages and for for transferring assets and this is really powerful because then the hyper chains can be connected seamlessly and trustlessly in a huge unified liquidity ecosystem which can grow indefinitely just like the internet so that's what hybrid uh ZK stack and Hyper chance are initial in natural that's a really helpful explanation there and I want to get into the Weeds on some of those individual components I'd also actually even like to start a little bit more high level and just get some of the what were some of the original design principles and problems that you were trying to solve for so in talking about the hyper the hyper chain infrastructure it's clear interoperability was a big sort of design decision or um you know something that you prioritize in the beginning like walk us through some of the other original problems that you were trying to solve with the ZK stack uh so the we started gksync with the mission to make blockchains universally accessible for everyone so to scale blockchains while preserving the core values the core properties that make the blockchains valuable like but specifically public permissionless blockchains and I think by now it is very clear that ethereum has crystallized as as the well I mean to me it's uh it's my personal take like ethereum is is likely going going to be the settlement layer for um most of the internet of value we'll have some Alternatives but like for now they will have to compete with ethereum so we are focusing on ethereum but we're making the theater modular and extensible uh and spreadable um we have been thinking about like what's the end state of this internet of value have to look like like what what must be the the eventual like if we take the certain properties we have to articulate them well what do we want to preserve and then we have to imagine how does this look like on at scale so to we had an intuition which has been guiding us on those properties recently we published something called the ZK credito uh which is a manifested a mission statement of mission philosophy statement for the Ezekiel community in general uh where we articulate very specifically like we want trustlessness we want resilience we want censorship resistance lots of like the system must be accessible affordable by anyone like like and then like the list goes on uh there are I think eight properties there and then all of that has to work at scale meaning the um the the systems have to be able to grow just like the internet so one of the properties is called hyperscalability if you think of the Internet it's impossible to to conceive that all of the world's internet transactions web servers application servers are running on a single server right like or or even on a single Data Center it it just physically on scale right so you you end up with a multi-server multi-computational peripheral like Paradigm which supports parallelism to arbitrary degree where you can add more servers more uh links more data clusters to it and it will just grow and absorb arbitrary number of users an arbitrary number of transactions and apply to the work of blockchains this means you need to plan for a multi-chain world and if if we if we will have multiple chains running in parallel they have to be connected the same way internet services are connected like a simple example is an email you have your address I have matters like Alex at matalabs you have your address Michael at I don't know Gmail or block works or something you can send email from any address on any domain to any other address or any on any other domain in one click it doesn't cost you more in terms of effort time like it will just arrive in a few seconds or or cost the same with web pages and hyperlinks you can go from any domain any page and any domain to any other page in just exactly one click here I have to to spend more this is the property of hyperpages that we uh aim to preserve there or like this is this has been the core part of our design how do we create a multi-chain system following the vision of like the internet of chains first articulated by Cosmos and then polkadot that actually works that actually gives you trustlessness where you don't have to rely on validators of those bridges on some custodians where you have native assets that follow the bridging Paradigm like the the when we say Bridge uh we think of pieces of land connected by something over water so if you have a bridge between two islands you have assets on one Island you have like a pile of gold there or like a car of gold you can just move it over the bridge and so it will disappear on the first island and will appear on the other Island yeah but that's not how the bridges work today but we have like the inter chain Bridges between layer ones or or Sovereign chains more uh work more like you have to park the car on one side and then you get an IOU and then you go to the other side like we swim over and then you carry over this IU where the assets are actually in custody by someone else which is not native not extensible like you have to trust those guys and so on so like the uh we wanted to preserve this and the only technology which we have today which is capable of doing it at arbitrary scale is DK yeah your knowledge process validity probes this is what hyper hyper producing hypertens are based on so I really like that example of thinking about how the internet scaled and how it can't all be on one server obviously but like it's actually if you maybe go one layer deeper and look at the interoperability of the current Internet it's there is part of the web which is open and then you start to see like closed off clusters or parts that are slightly less interoperable with other parts of the web an example might be the great firewall of of China right now the internet works over there or like you know government sort of restricted networks or even frankly like Google or Facebook right which are kind of kind of open and interoperable but really are really closed Gardens that want to keep you on their platform so I would love to get a little bit more specific about how you see interoperability across different layer twos because my sort of in hearing you describe what the ZK stack will enable is a bunch of hyper chains that are highly interoperable with one another but it's the plan for that to be interoperable with other layer twos like the uh either other ZK Roll-Ups or like the optimism or arbitrims of the world like how do you see big sort of layer twos interacting with one another going forward um that would be an ideal goal for us in ethereum to come up at the standard that allows us to to to be completely interoperable that would unfortunately require some very fundamental changes at the bay at player one protocol so we have to to build some like kind of common Bridge that is designed for ZK architectures that is shared across all of us and it is basically enshrined into the uh base architecture maybe one day we'll arrive at that but first we need to experiment we will see this experimentation happening between different ecosystems a few of them are experimenting with this kind of designs with like a local ecosystem of application specific or generic chains more tightly connected than just arbitrary Roll-Ups on ethereum um so we'll see experimentation and maybe some standards will crystallize over time got it I want to actually get into some of the different modular components that you were alluding to before so there's data availability um provers sequencers Etc let's try to like close our eyes and put ourselves in the perspective of someone who wants to build their own hyper chain on zksync or using the ZK stack how would you how are they kind of thinking about what are the most important components kind of to tackle first and what are some of the options that they're looking at I like when that when I'm thinking from a builder perspective right my Builder had on I I'm thinking about properties of a system I want to to get I'm not thinking in terms of components I'm thinking like what do I want from the system uh for me the priorities would be number one security like this is something non-negotiable yep like you can't like if you're building a system their security does not matter you probably don't need blockchain you're on blockchain for decentralization and four the Ultimate Security where every user can verify all the transactions so that that is something highly important and they uh here ZK stack shines because we this is one of the most battle tested Frameworks that we have uh today with over half a billion dollar tvl on ethereum and um being the most used L2 of uh at least for the last month with 25 million transactions uh almost uh we invested over four million dollars in security Audits and like various orders for all component of the system with top tier Auditors in security contests we are having mechanisms for security defense in depth with delayed withdrawals and various other techniques and we're working on on extending this this thing because we the uh we have to keep in mind that all the roll-up Technologies are still relatively new and there can be bugs and you want multiple layers of Defense even if one layer fails it's still one to rely on others for security so that's the security perspective the second perspective uh the second property I would want from a uh from a system uh or from from a framework to build my chain on is reliability like highly reliable liveness this is critical for D5 applications this is critical for your users for fully for the Fantastic ux because if your system goes down for like frequently for prolonged period of times you're not gonna make it like people will lose trust and the system is not going to work so you really want to take a bottle less architecture and this includes also being able to accommodate spikes in activity right like surges in in the demand for transactions like if you're if you're like like let's say we're doing like 10 TPS on average uh right now like from organic demand uh but if capacity was only like 20 TPS a any event like a popular nft mint drop or some token issue would bring the network to its knees because a lot of people would try to reach it and we've seen it on on other networks like they are not capable of accommodizing this uh the the actual lot so the uh this is why we like we knew that that's going to be um an important factor we did not take guess as the uh the base for the chain we started building our own custom sequencer implemented rust from the beginning and we're capable of doing over 100 TPS comfortable now and like we're still working on on making things like we're far from optimal we can do thousands of TPS but the real lot that shows over 100 right and uh you know I think ZK is saying you guys were some of the early ones that really experimented with the Canon abstraction as well which just allows you so much more flexibility so am I correct in assuming that you know creators of these hyper chains they'll be able to specify whatever gas token they want uh the even the users today on GK sync era can specify what they want to pay their gas in WoW or you can you can have like um sponsored transactions for uh certain users like they don't have to need any gas at all yeah pay from Smart contracts or you can you can delegate uh um you can sponsor transactions from from some accounts like you have full flexibility and we we have a counter selection indeed natively implemented at the protocol level so it's not limited to certain types of accounts that you have specifically deployed any metamask wallet any other wallet in ethereum can profit from it and can do gasless transactions or or pay fees in any token yeah I wanna I wanna ask you a couple questions about sort of decentralizing some of the more centralizing parts of L2 design today maybe we can talk a little bit about the sequencer and then also the state of the prover how proving is done on ZK sure so sequencer is for some applications they will be happy with centralized sequencer especially for high frequency transactions with lower latency but most blockchain use cases require full decentralization of the entire stack we are very aware of this this is one of the priorities we're working with high priority on decentralizing the sequencer we will have some results in in in in probably a few months from now um the but it's kind of even a less in like lesser priority than decentralizing the prover paradoxically because you need to be able to at least distribute the prover across many different types of distributed compute systems of the cloud services or or user systems because otherwise you like if your prover uh has very high Computing requirements on the hardware you're going to be locked into the most efficient uh Cloud providers and they will have a lot of power over you right it will be able to just shut it down this was very clear to us from from the beginning and we invested heavily in in GPU optimizations and recently like just this week we announced boojram a new implementation of the proof system that actually orders thank you orders of making it more performant than than what we had before it's one of the fastest proof systems in the world we made joint benchmarks or like a seller Network made benchmarks across multiple different implementations uh which we published and uh interesting thing is our implementation of the GPU for this new proof system only requires like 6 to 16 gigabytes of RAM like it's we can bring it down to six like on on by default it's configured for 16. so you can run it on any GPU like on on consumer gpus on gaming computers on anywhere in the cloud on all the cloud services like we're not like previous systems required like hundreds like 500 gigabytes of RAM which will be prohibitively High barrier of Entry right so the idea maybe to you know state it for any of like a five-year-old brain like mine is right now if proofs are being done by you know one very large expensive computer and an AWS uh sort of service right now the idea would be to distribute that computation actually to Hardware devices with very low or very you know cheap well right now for existing Ezekiel Roll-Ups they are not done on one one huge computer that download many huge computers in parallel but you have to spin up and and shut down uh just in time depending on how your demand fluctuates uh so like it's actually like you you can like if the systems are not efficient enough or or have very tight specialization requirements for Hardware you might just run out of the hardware uh in on on those Cloud providers so like you really want something very generic that can can reuse any type of uh gpus designed for machine learning for for like all the generic kind of computations nice sounds like a really easy problem to solve well uh zero knowledge proofs made a huge uh progress over the last couple of years so like we we have very mature systems now indeed like in all the like you know it took a work of many Brilliant Minds to get to this state all the incremental uh improvements are um like not as as hard as as as the the they used to be like five years ago yeah so um I guess just I know we've got to wrap it up here now but uh yeah as you mentioned before to just give ZK uh sync a shout out yeah the tvl has been going up into the right transactions have been going up and to the right like what do you tribute that success to and then give us a little hint of what we should expect in the in the next 12 months anything you can share with the audience all right sure so we we treated more as a uh responsibility than a success at this stage because we know that those systems experimental people are trying things out uh um we the next step for us would be lowering transaction fees very significantly from where we are today we have two paths for this one is the transaction uh or like a data compression uh which will soon find its way to mainnet and right now we're we're a slightly above optimistic roll ups data compression techniques that optimistic rollups already use will bring us below them uh and on top of that we will have some really interesting properties resulting from the fact that we use state divs for data availability not transaction inputs like optimistic rollups and like basically all the other ZK AVM projects that I've seen uh which means for certain transaction types we will be hundreds if not thousand times cheaper or in other words you can you will be able to do many more of those transactions like think of Oracle updates you can do 100 Oracle updates for like 100 ticks of the same Oracle update in the same batch and you will only have to pay for one data availability slot because you're constantly updating the same slot and at the end we only have to publish this one build which will open really interesting possibilities for for whole class of applications that's really exciting Alex congratulations on the news and yeah thanks guys for listening [Applause] 
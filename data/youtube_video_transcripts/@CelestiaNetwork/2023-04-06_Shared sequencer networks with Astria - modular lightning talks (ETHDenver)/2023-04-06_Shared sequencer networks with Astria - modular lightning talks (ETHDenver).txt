some Josh I'm the founder CEO of of Austria we're building the shared sequencer Network there's kind of a lot of questions like what is a shared sequencer Network and someone intentionally like a novel term um what we view it as is like a distinct network of sequencing and specifically like lazy sequencing and that's a term I'll like cover a little bit further along um and kind of like I guess how many people actually know Celestia were kind of like papering over a lot of things but do people like roughly know the structure of like what Celestia is it's a D.A it doesn't do execution um wear a shared sequencer like fits in the stack and what we mean by shared so when we say shared we mean like you can have two Roll-Ups they can use Asteria the shared sequencer Network Asteria then submits transactions to Celestia as like a DA layer this is not a full architecture this is very much like a simplified architecture for kind of illustrative purposes here but that's what we mean by shared um and so where the sequencer kind of fits in um is because you can have multiple Roll-Ups or specifically users of multiple Roll-Ups submit transactions to a single sequencing layer and that can do the order on their behalf and the reason that we want this is this is kind of we view it as an extension of kind of the modular Celestia thesis where you separate components of what would historically be a single node um so you have a network and you have single node and that node runs all the things right and so like in a cosmos thing you have you know consensus node you have um a app side whatever whatever you're going to call like awesome SDK or whatever right um but you know that consensus what it's really doing is defining what is like the canonical chain um for a given thing so um like called a fort Choice rule right um Celestia then splits out the D.A so um you know as Barry mentioned um in the talk on kind of what they're working on with like ABC I plus plus and in their kind of in protocol Mev stuff um they're allowing you to get data availability at the consensus kind of time like intra consensus and like the multi-round voting I don't know the details but I know there's some guarantees you can get over the availability of ordering data kind of in this multi-round voting process that tendermint does um but what that is like so tenurement fundamentally and kind of like bft consensus mechanisms and what Celestia does fundamentally giving like data availability so Celestia broke that out but the other component that usually comes from this kind of consensus algorithm in a monolithic chain is this definition of the canonical chain the fork Choice rule um Celestia you can use Celestia for that there's very various designs here I will make the argument that it is not optimal for you to use Celestia's ordering guarantees as your defined ordering guarantees for your roll up and when I say ordering guarantees I mean like intra block within Celestia so like you have a Celestial block they're still running 15 second block times last I checked right um you understand that there's a guarantee of data within that given block however you are submitting raw bytes essentially to that um that Celestia and Celestia is going to pack those bytes in a way that optimizes the efficiency of the data storage within the celestion network right and work for the Erasure encoding and satisfies the data availability sampling and that's kind of like what Celestia is focusing on what it is not focusing on is giving you kind of preferential ordering and when I use preferential I mean that kind of in like the Mev sense similar the skip guys have done right where your block for your blockchain has some order of transactions within a given block if we go back to like Bitcoin times right people generally didn't give a damn right your transaction be at the start of lock you train that can be in the end of the block doesn't matter you're just trying to send P2P funds right we introduced D5 now there's an ordering intra block ordering to find some pricing um because of that you now have a preference on how your block is ordered um that's something that like you probably don't want to just like naively inherit from Celestia by doing something where you just say I'm going to have some mechanism where my roll up is going to submit a block to Celestia and some other user has to come along and say okay I know that there is data on Celestia and I can read that data off of Celestia but how am I supposed to assume the ordering of that thing you could kind of like pack that but because Celestia is permissionless anyone can submit transactions to Celestia right anyone can zoom a block it's not like what you would use in like an ethereum style l2.1 roll up where you have a inbox and that inbox is fundamentally defining what is the canonical chain you're getting your leader selection your fork choice or whatever from the on-chain smart contract on the layer one that is permissioned right now right arbitrary optimism there is one actor that is allowed to submit transactions to that inbox there's also the other inbox you know override mechanism essentially but fundamentally the head uh canonical chain is defined by an on-chain smart contract you just don't get that from Celestia so you have to get that somewhere else what we propose are that it may be useful to have a single layer a shared layer across multiple Roll-Ups that allows you to get that ordering guarantee and Define what your canonical chain is so that's fundamentally what we mean when we say shared sequencer layer the other important component of this is that we intend to have our shared sequencing layer also be a decentralized shared sequencing layer this is like a very large in my view like oversight that all of the existing Roll-Ups have done um they get away with it for somewhat similar reasons to why we fundamentally need this layer at all is because with the inbox model you can at least make the argument that hey we have an override you as an end user can go to the L1 pay your L1 fees and you can force include a transaction why the hell are you using a roll-up if you're still having to submit through the inbox model for Force transaction that's the question but you can at least make an argument that your liveness is not an absolute failure if you are censored by a centralized sequencer however as Sovereign Roll-Ups on top of Celestia you don't get the guarantee the papering over a little bit you could theoretically construct a mechanism where the definition of your canonical chain can just pick up data submitted directly to Celestia from any actor but broadly it's similar to think about as the assumption that you need to have liveness guarantees from your solver roll up layer or whatever is defining your fork Choice rule because those kind of things are paired together right if you're making a liveness guarantee we probably don't want a centralized sequence here because we don't have easy fallbacks you should decentralized that a lot of other reasons to decentralize things you know not least of which is like Gary Gensler has a vendetta against this industry I would not be personally comfortable standing on this soil and having a wholly centralized sequencer especially if it's one such as like arbitrum that is primarily doing things where it's arbitraging derivative trades between an offshore exchange that is not within the purview of the SEC that feels like something that the SEC probably is not a fan of so for that reason we can decentralize at this layer and and we argue right you know like decent relation is not hard if you come from like the tendermint cosmos ecosystem right like bootstrapping a tenderment chain really not that difficult of a task there's north of a hundred probably several hundred tenderment chains you can bootstrap a test net relatively trivially um we're just going to do the same thing right we're just going to you know use some kind of presumably tenderment style leader selection mechanism that allows you to have some rotation between different sequencers each one gets a slot you can either time those against Celestia you can have multiple slots within Celestia kind of up to you we've seen you know some learnings from L2 to L1 things on ethereum where you probably want a fixed block time that hasn't worked that well for optimism to have a variable block time but that's another component here um so how are we going to do this um I just threw these slides together last night because I'm hoping this like makes sense so yeah lazy sequencing right so um and this is borrowing heavily from like Evan Forbes Evan Forbes I assumingly go into more detail on your talk later this week but roughly you can think of it as like this is like what a blockchain does this is assuming like a singular node and we will assume it's from the view of the block proposer right you have on transactions these live in a mempool if it's Solana I don't know where they live this maybe just happens really quickly um but you have something like a mempool right um You have my transactions they're not ordered you then take all these transactions you put them in an order and then you execute them right so the key kind of like learning we're taking from the shared sequencer that gives us a lot more flexibility than kind of various other you know shared security design I think Cosmos is calling it replicated security Now um para chains et cetera et cetera we're just doing this step we are not doing this step and the reason we're not doing this step is because fundamentally this requires an under standing of you know you can think like think math notation right you have like a thing and then you put the tick for like the next time step right you need to know the prior State DB so at like T call the state time T at time T minus one you need the state DB then you can add the order transactions execute them get your new state D B get your new state route but if you want to share this across multiple different Roll-Ups then you need the state database of every roll up for which you might have transactions that are included in it that kind of fundamentally breaks the scaling benefit of Roll-Ups where role if they're fundamentally a form of sharding right we can say okay I put this state over here and I put this state over here if you say well one set of actors you know that are validators or sequencers or whatever you want to call them has to execute all of the state transitions of many you know disperse State TVs or state machines or whatever right whether they're homogeneous or heterogeneous um they're just doing more work right fundamentally it just takes more compute to do that you get all of the various kind of like undesirable trade-offs in scaling of you now have to have more storage um and it has to be you know fast storage right so you will assume like SSD storage is good enough um and then you have to do like the actual execution to reach that state route right so by doing Lazy sequencing we just take this and we put it into here and this is actually sufficient for getting a um like a canonical chain or like like determining like your fork Choice rule that's all you actually want because this conversion is fundamentally like deterministic right if you have a given State machine defined by essentially a binary right or a spec if you're in like ethereum land you have multiple client implementations if you take this you can always reach this um in the celestial terminology we call this like a pessimistic roll-up right where you have some guarantee of availability of the data and then you have ordering of that data you can always if you run a full node generate um the next like State DB right um various problems with this for like real world usage right this obviously doesn't support like clients um but that's something that I'm not going to cover in this talk too deeply I'm hoping to leave time for questions at the end um why are we doing this I think I kind of covered that at the start but generally like why because what we're seeing is quite frankly ropes are not focusing on you know decentralization right now um decentralization is not that hard but it is somewhat of like a BD lift right this is what we saw polka dot try to solve with parachain auctions they maybe made it worse by just enshrining a method that makes Gavin York very very wealthy um Kevin York Gavin Woods um again who's Gavin York um but yeah I make them Woods very wealthy but like para chain auctions you know you enshrine a mechanism for how we're going to essentially buy your way in interchange security with like replicated security has had Cosmo style issues of we have to go to a governance vote and then jayquan pokes his head in the room and now we have to destroy our system um and so there's various reasons why this is like problematic um and so like what I'm saying is like like decentralizing um the the desire for people to get an out of the box like I want someone to do the work of going and talking to 100 to 200 to 500 000 if you're ethereum though it's really not 500 000 but whatever like a large number of people to run chains in diverse um you know country Sovereign regions right for various reasons whether it is regulatory or whether it is liveness and uptime of the network um we think that can be offered as a service we think using lazy sequencing we can do that in a way that supports many heterogeneous State machines by not actually making that final execution stage um so yeah that's kind of like the argument for shared sequencing Network um questions I mean I have no like working relationship with Suave formerly like I talk to them um like I think structurally you can look at like if we go back to Suave so right if we look at just like this structure right like fundamentally and again like these Roll-Ups are like here for like um this is like an intellectual movement not like this is not how the block or the flow of data um but fundamentally right like if you have a layer in between like another layer in this case would be like ethereum for Suave or whatever right um or maybe they're even putting it in front of the Roll-Ups itself right like you do have an aggregation layer so I think it's structurally kind of similar in like architecture the way they're viewing it from like um like a market positioning like a go to market is suave as I understand it reading you know what public docs they have for now and talking the team a bit they view it much more as a preference expression environment and specifically a like I don't know like the terms but like private on demand or like not rather like private by default and then like revealed preference at the time you need to reveal the preference environment um and what I mean by like like your desired transaction should not be revealed except to like select parties right use like the historical version of privacy right where it's not like completely hidden because fundamentally right if you use this architecture right and you say okay cool we have a big basically mempool right that's what like Suave calls it right single unified auction for Value expression but it's a shared mempool you just slap a bunch of transactions in the mempool people can look at them across all things you have just created a larger pot of potential Mev that just makes a larger adversarial environment that again kind of going to the question of like executing the state DB for multiple things right like Searchers don't give a they're like oh cool I have to run like five blockchains it's like fine with me that is within the bounds of the effort they will do to find Arbitrage so now you again have made the game such that well-resourced actors have yet a further Advantage because of that Suave is doing a lot of work at look talking in how do you make this mempool private because it is like very very profitable for someone to have all this information and quite frankly I think from flashbot's point of view right it would be a very hard sell to change to say like you should use this private mempool it's going to make your Mev problems worse but you should trust us because we're good at Mev things like it's not a good sales pitch and they know that so they're working on sgx things they're working on you know any fhe things they're working on you know name many things there's so many different problems with scalability and whatever but like they're looking into that so I think struck architecturally similar what they're trying to do different you know and then one last one like they're targeting like existing chains right they're trying to integrate with like existing chains we are very much targeting this as a solution for you know yet to be created chains on top of Celestia to provide yet another component in this modular stack that makes it such that like you have more out of the box componentry that doesn't restrict like how you can develop your chain yeah Gabriel you had your hand up before foreign yeah so like it's a chain right like it's it's a chain they like pay for that there's various kind of like emergent Behavior like questions around like how they pay for this that can kind of tie into the Mev thing you can think of this as a potential environment where you could do account abstraction style things like fundamentally right if we think of like like the existing kind of like model on My Head Right you'd say like roll up one you want to submit tracks action for roll-up one you still own your key you have to sign a transaction for that roll-up then presumably you have to submit a transaction into the like shared sequencing chain right because that watch we Define The Ordering of it right so you can do it as either like a wrapped transaction where you're just signing two transactions that may be an undesirable flow there may be things you know account abstraction esque that can happen at this layer where you know you could have Mev things and essentially it becomes a payment for order flow style system where someone says hey I signed my transaction here I'm willing to put that in public that's free game to get front run sandwich whatever but presumably someone else will pay to include it and their return will be through sandwiching you front running you whatever like extracting value from you over a long term maybe that's a beneficial thing from like an end user perspective to say like hey I get free transaction inclusion but I'm gonna get like worse price performance on like an Arbitrage thing but you can also like still to some degree like specify what your slippage tolerance is for validity of the transaction going to the Suave thing we are also intending to look at the sequencer laying allowing some level of preference expression but we're somewhat restricted um in kind of like how agnostic we have to be of awareness of that you know Suave solves this you know um at least in the again the proposals I've seen with like multiple off-chain actors essentially where you place a bid and then it is a like post-fact um your bid is essentially a thing where you say I propose this transaction here's my signed transaction I will only pay you if you satisfy condition X condition X is verified um out of band by a um it's an oracle from the perspective of like the small off chain but some actor maybe they're validate or whatever on the other chain that then will submit proof I don't know what they mean when I say proof but you know submit some evidence that that transaction was executed to satisfy the bid and then they pay out it's a pretty broad design space for how they do this like fundamentally like what your goal is is to get an ordered block which is submitted as like a payment for blob right to Celestia um and then from that your roll up is able to look at that be a light client of the shared sequencer and essentially you have this path right where I read raw data I know how to order that data based off of being told how to order that data as a like client of a shared sequencer and then I know how to execute that by um my rollup and presumably what like a full node looks like in this whole stack is someone who is running one of you know like the minimum viable we like light client light client like full node of the roll up node right but you could also have actors that are full node full node phone node the relatively broad design space [Applause] 
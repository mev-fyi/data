I am Zaki you've probably seen me already so uh I am this talk is like sort of a appeal to people who are protocol developers mostly but a little bit of sort of philosophy of protocol design and generally like my thoughts about like what constitutes a full node and the sort of changing uh uh definition so I've been working on building blockchain like protocols for 10 years uh I've written a lot of like I've contributed and worked a lot on different layer ones uh so uh that that's back basically my background and my general thought is that okay so we started out with this like piece of software that didn't come from essentially anyone in the present Community Bitcoin and Bitcoin worked a certain way and every blockchain Network that has been created since has been in some ways inspired by the Bitcoin full note by like that original Bitcoin software and its core property of the Bitcoin software was you have this notion of a full node and in the original Bitcoin sort of concept every full node is a minor uh so you have this whole network of binders everyone was connected to each other in an ad hoc basis so there were no like special roles it's just network of nodes this flat topology and that is how we've sort of imagined every every uh every blockchain since then but this hasn't been a true description of blockchains uh basically for as long as I've been involved in them um so instead there have been parallel networks like sidecar pieces of software specialized uh uh nodes uh everywhere like we couldn't use blockchains today if none of this existed uh so blockchains would be completely unusable um that's been true since you know uh since like 2013 2014 right you've had like Bitcoin has something called the fiber Network the fiber network does fast block propagation between uh with a completely different block propagation algorithm uh between mining pools uh there's mining pool software which has been which is incredibly important for the operating operation of Bitcoin you have things like Med boost and flashbots um so what this has emerged is is an enormous difference has has happened between the actual protocol like the protocol that our users use um and what's in the full node software um and the and that makes it very very difficult for anyone to like reason about maintain uh these entire systems um so just like to kind of uh so Bitcoin is actually like a pool driven block propagation system there's no widely distributed Mev tooling um but like mining pools are in charge the pro the like Network that actually matters is the network between mining pools uh the uh transaction propagation system is how mining pools is like how mining pools end up ingesting transaction um the de facto ethereum network is a network that has a consensus system and a peer-to-peer wear and a mempool that does not actually matter um because Mev boost builds most actual blocks and there's an entirely other network between block producers and relayers and block Builders uh that is essential to the functioning of the system uh and is potentially vulnerable to uh exploits but isn't part of the core protocol and then in Cosmos we have this thing called protocol owned Builders where validators Bill build and check blocks together with consensus enforced rules to do value extraction and it's actually cool because in Cosmos we do seem to be moving um to a large extent towards more parts of it the software being in like the core binary uh which is good uh and more maintainable uh but also uh also like sort of a represents better the expanding complex but we've had a lot of problems because our full node software was never designed to do this um so like questions I would ask is like why do we write blockchains that have mempools at all it's really unclear why we do this um uh Bitcoin was basically designed with this idea that like any node in the network could you know will once in a while produce a block so we need to disseminate by flooding transactions everywhere um we have uh like we really care about the like resilience censorship resistance and self-repair properties of p2b networks but it's probably the most poorly tested and specified property of any piece of blockchain software like you have all of these papers uh that clearly specify like the consensus algorithms the rules the attacks uh no comparable sort of uh material exists for the P2P networks um uh so yes why don't protocol debts put these overload networks in the core protocol um so the networking layer is the Reese expressive spark of the stack we have like these crazy expressive smart contract languages uh we have you know the ability to like uh we have very complex and sophisticated consensus protocols um but we don't really have much expressiveness uh in this part of the stack uh every blockchain team even invents the wheel they run into things that they can't build with like the existing software so they'll like slap on an overlay Network and like add it to the nodes as the way uh you know things and like sometimes those will have centralized Parts like in Cosmos when we have Skip and Skip has become sort of canonicalized into some of the cosmos networks but like that's it's not something people think about as like part of the cosmos protocol um so yes we have these like Frankenstein blockchains Ismail was talking about how Celestia has this like Frankenstein P2P Network which is part tenderment P2P part lib P2P and uh people are always building these things with like other custom components um so I do think that like PBS is just largely a good thing and the formalization of PBS because it's driving more Innovation and attention towards these areas it's driving I think enforcing the uh the P2P like Engineers to like do more on the networking level um it's forcing us to consider the entirety of the block of like the of the network and the protocol as a whole and it is allowing it's sort of getting us closer to a world where uh the entire blockchain behavior is like more formally specified um but again like we've been seeing attacks um so like I would argue that the direction of moving from like Mev boost which is a form of protocol Builder separation but not an enshrined one even though every single ethereum consensus client implements it um is uh sort of a worse solution than uh enshrining PBS in some form and we've already seen attacks on nodes and losses of funds and security incidents uh in the in the in the med boost system and that is would be better dealt with if it was part of the core protocol um I'm just like kind of the other thing that I would observe is that so in the spirit of modularity app chain Builders want a lot more control than like traditional general purpose L1 Builders ever had uh L1 Builders did not expect that they would be able to control the uh Mev for their applications um it's tarun was just talking about this about this like trade-off between sophisticated unsophisticated users and sophisticated and unsophisticated application developers well if you have a if you have a application specific blockchain the like you don't have to deal with that trade-off because like the team is the this application team is the team that built the blockchain um so if they're sophisticated they will end up wanting probably a lot of control and they'll want to have their own sort of fairness policy and they'll want to be able to like punish and Slash and observe um and so as people are building toolkits for modular blockchains people who are building toolkits uh for l1s I think we have an obligation to start building in more tooling into these systems to allow this kind of control to be expressed and like the fewer ad hoc systems that people have to build where there's like no abstraction in the full node the better things will be um so yes the fundamental goal of modulism is lowering the cost of innovation it will hopefully result in more shared infrastructure there will be more libraries there will be more uh binary like pieces of software there will be more examples of uh Building Systems where like this block production and pre-consensus part of the network actually exists uh in the protocol in the core software um as we have like vendors for things like shared sequencing and intense mempools and execution like the more they can share components um uh it'll lower the cost of all of this uh you know the the sustainability of all of these pieces of infrastructure as like the market fluctuates up and down should be a concern to everyone um and is a big part of the long-term uh stability of the space uh so that's it thank you very much [Applause] 
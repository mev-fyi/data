thank you for coming my name is Josh I'm a Solutions engineer at Celestial labs I do a lot of documentation maintenance I kind of work on new integration like demos and stuff like that and that's what we're going to do today so welcome to the op stack Workshop we recently released an integration with a modified version of the op stack and this is something that posts call data to Celestia instead of ethereum while still settling on ethereum I didn't prepare any slides for this if you want to read more about it um this is all in the docs it describes in detail exactly what's getting posted where basically the op Batcher is written to Celestia op node reads the data back and op Batcher is basically what's taking all of the L2 blocks and batching them up to post to L1 in this case we're going to be running a local devnet that is using a local Celestia D.A and using a local L1 to mock ethereum and uh what we're going to do like after spinning this all up is we're going to deploy a smart contract to it to see that we can use that ethereum virtual machine to actually like with the op stack to actually interact with the smart contract so I guess like if you really wanted to interact with this testnet the easiest thing to do is to go to the bubs testnet this is a test net that we're running with Caldera and it is built with our modified op stack and this is something that we've made so that developers who are friendly with the evm can just build with the evm I guess I come from like more of an ethereum background and this is something that's really exciting to me I love a lot of the front end tooling that exists out there so it's really exciting to be able to to use that so uh again I'm not going to bore you with the text if you really want to read it I guess please refer to the docs the way that you could build on this test net is by going and using one of the RPC URLs to actually interact with the chain and then there's also a faucet on there so you can find your wallet as well as a block Explorer we're not going to do this right now but I do have a demo of how to deploy your own smart contract to the test net and then also how to deploy a Dap on the test net there's also the option to use something called third web actually I don't want to sign that right now but I guess don't sign messages blindly so you can see on this third web dashboard this third web is basically a tool that allows you to deploy contracts without actually having to write the whole contract their contracts are audited and just based off of that if you're going to do like an nft collection it's probably a lot easier to just use something that's already audited and written rather than Reinventing the wheel and on here you can also see the chain ID the RPC the block height and then we're going to get the latency to the actual RPC endpoint that we're using um so the reason I'm showing you this is I have a few demos here the first one is going to be the GM portal we're on the wrong Network right now I'm going to go ahead and switch to the bubs testnet and nice so this is a little dap that I built it should be displaying all of the posts on the wall but there's no pagination so uh they're living on the contract and basically it's been I didn't expect 12 000 people to post on this let alone like 500 even this is the same thing that happened on the previous version it someone bought it and it hit like 250 000 so if you're like a front-end developer in here and you want to add pagination to this like there's an open issue but I just haven't had time to do it um but this is like the first way to interact with the bubs test net we're going to get a pop-up in our wallet there to send that transaction we can then since we're not going to see it come through on the front end we can copy the transaction ID and then go to explore .bubstestnet.com put in that transaction hash and we're going to see that we made a contract call we're not going to see the actual information about that on here just because the contract's not verified but we can see that there is a call to make a GM that we called that and the data was GM so we can also go and see the contract that we interacted with and we can see that there's quite a few internal transactions uh looks like a few other people were posting on this a few hours ago um but another example demo that we have running on there is a little Marketplace that I built with third web so this is using the marketplace V3 contract and their Marketplace template and I've basically added a collection that I made with a python script um so if you want to go ahead and like mint an nft that's technically on Celestia this is the place to do it the URL is buildmarket dot XYZ and that can be found in the demos page in the docs too I have a don't I think I have a limit of one on this so I'm actually going to see that the claim limit is reached for me but if I were to switch wallets or have a different account it would work but I guess I shouldn't encourage civil attacks um so uh taking a step back I'm gonna go and we're going to set up our own op stack locally um if you start running into a bunch of like issues with things downloading we can go ahead and just like walk through it on on my end because I already have everything cloned but what we're going to need to do is open a terminal I'm using something called warp you can also use terminal uh yeah terminal or like item or whatever you have installed the first thing we'll want to do is set up our environment if you're on the Mac you just need to do the things under the Mac tabs if you don't have Homebrew already you'll want to install Homebrew and then that's going to allow you to add some dependencies that we'll use later on you also need to install golang if you're in the light node Workshop a little bit ago um you already have this installed I also have wget installed and JQ installed as well so I'm good to go on the dependencies on this so I will get into it the next thing we need to do is clone the repository I'm going to actually go ahead and uh just wipe the one that I have there so we can do a real demo I'm going to check out two version that is linked with so this is our versions 0.1.1 optimism it was on version 1.0.6 when we made this and Celestia node is on the 0.11.0 RC8 so that's the release candidate for version 11. and the next thing we need to do is set up ASDF this is going to help us manage our first I'm going to clone that the next thing we need to do is if you don't have like npm and yarn installed already uh you're going to need to use ASDF or some other npm like our other package manager to install the right versions so now that I've cloned and checked out on optimism I'm going to go ahead and do this in another tab oh no okay so I already have ASDF installed I'm going to go ahead and speed do that and we're going to be using node.js version 16.16.0 and I have NVM on here so I'm going to set my version of npm I guess honestly if you're in here and you don't have node or yarn it's probably going to take a long time to install the dependencies and build everything but the docs should work pretty perfectly like if you try this on your own and if they don't please submit a ticket or like reach out to us on Discord so I'm going to just double check I do have npm already uh well whoops sorry you can see the version uh the versions in like the optimism repo and uh I already have python installed so that's good to go I already have Foundry installed so that's good to go I also have yarn and Docker compose these are all the pieces that you need to build optimism it's kind of specific to the requirements for optimism unfortunately and there's a lot of dependencies but once you have all that installed and you have Docker running you need to make sure that's on we can actually build the devnet um so the way to do that is to change into the optimum as opposed to like the local development environment dependencies that we had on the last like in the last few steps so that's just for our computer but then we need to actually download a bunch of definitions and dependencies for typescript packages in this project it's kind of finicky on Macs so it I honestly expect some people to run into issues still I haven't tested this on something older than an M1 chip so there might be differences in different versions but we can see that everything was installed and we're good to go so the next thing to do is to run make build TS and this is going to build the whole project now what this is doing is basically compiling everything so that we can run run the devnet this is going to take a little bit more time it should take like three minutes max um in the meantime I'm going to clone I'm going to clone not the Austria Dev cluster but the GM portal uh and that is a front end and smart contract like a mono repo with a front end and smart contracts to deploy a jam portal which is basically the thing that I was looking at earlier and if we want to do that we can see du so change directories into that folder we're going to go ahead and check back on this typescript build and we can see that everything is going as expected we'll see some logs here we can see hard hat is compiling which is like a solidity contract tool and then we're also still running some checks on the rest of them I'm gonna go ahead and wait for the GM portal just so I don't get too distracted with it this should be finishing up in a second the next thing we're going to need to do is set some environment variables this is just so that optimism knows where the L2 address is and also where the sequencer batch inboxes and unfortunately I just need to wait for this to finish are there any questions right now yeah happy happy to answer me what's up it's a good question I couldn't tell you exactly we can go like I can jump in the code and actually look for that itself that's the wrong repo it's used as an environment variable and for some reason um like I think we have it hard-coded but it doesn't um yeah so this is used in the roll-up config and that's basically it's something that helps the bachelor uh I guess the inbox for the Batcher it might be where the L2 blocks go and then they get batched up by the Batcher and posted to Celestia and ethereum uh like the L1 in this case um I didn't build the entire like I didn't build the integration so apologies there but we can also shot here why not oh wow okay so it knows more than I thought it did about optimism so it's a smart contract on the L1 and the sequencer uses the batch inbox to like roll up all of those transactions and everything and then post it to the L1 that's really cool that that worked by the way I tried to do it for the light node and it uh I didn't have Windows and the the docks for Docker so it was like I don't know how to run it on Windows um so now that we have skipping ahead a little or sticking a step back uh I'm gonna go ahead and Export those environment variables I'm then going to run make devnet up and this is going to start up if you've ever used like truffle or hard hat you're gonna you can spin up really easily spin up your own layer one like ethereum on your machine what this is going to do is set up a big Docker setup with the layer one layer two which is the thing that we are really focused on it's also going to spin up a data availability layer it's going to be a mock devnet so a local Celestia devnet managed or maintained by the roll kit team and also the sequencer which is op node and that's the thing that's going to be reading the data back from Celestia also we have a batch submitter that's going to be posting to sashia and then we have the op proposer that's posting State routes to ethereum so like so things are still settling on the L1 at the end of the day um I didn't run it so I'm going to run make devnet up and we're going to see a lot of logs honestly um we'll just go ahead and keep an eye on them so we know what it looks like uh Onyx successful run I guess again I'll pause and see if there's any questions I might not know the answer but the bot might so nothing is off limits what sort of miles forward uh so like I guess my demos might not be the greatest example like I made a the GM portal is a contract that doesn't have a limit on how many people how many times a single address can post to it so like it got spammed like that's not really good use case but I think where this like becomes really useful is what's up do you go um it becomes really useful where for example uh curio is using this version of op stack to run a gaming roll-up so like the ideal use case for this is someone who wants to have like a lot of execution environment space more or less that's isolated from everyone else so they can run a game or run like a payments platform or something like that or a messaging service like like actual text messaging or something like that would go through chain um as far as the demos go um like the demos I built it's just a message ball and then like a Marketplace but those are both like the only thing that's happening on that Network so like you shouldn't really run into any uh like lag on that end of things does that help I I feel like the yeah the demos that I've built aren't the greatest example but the things that some of our partners are building are like really the the bread and butter of like why we have this yes yeah yeah um Diego a curio um Caldera is running a test net a manta is using the op stack modification as well but I think yeah so like some of those like where they really want like high throughput and a lot of scale for the execution environment uh those are the important ones it is still uh downloading some dependencies and go so um we're just gonna wait it out any other questions right now yeah so these are all the ones that I mentioned are all op stack evm uh we do have like a cosmos SDK evm that we're kind of working on with another team uh well we're not we're we're modifying it to be able to be used with roll kit um and that would be a cosmos SDK version of the evm similar to Ether mint which is like originally what evmos is uh evm was called um but those are going to be like a little bit different in architecture I don't think you could really like Post State routes to ethereum as easily by using Cosmos SDK so this is like uh this op stack like jailbreak or modification I forget what we called it exactly is um it's really meant to cater to the evm devs because there's a lot out there and I think um yeah in terms of tooling and accessibility it's probably a little bit easier to work with than Cosmos SDK I think one of the cool things about this though is that I'm also confused why it's stuck on this but this has happened like this happens um the other like cool part about it is we can have we can have an evm that is like basically actually the evm running we also have the option to use like a cosmos SDK version of the evm so like depending on who the developer is or what the actual use case is um I think that's like those two existing on their own is a good example of like what Celestia can be used for um there's also teams that are doing things like like Solana VM and movie um and stuff like that so um in terms of like why build on Celestia the goal is to allow anyone to to actually build whatever um we're kind of using that as like the new like slogan but we really want people to be able to build whatever and not constrain people to a certain tribe even if the tribe is great like the more tribes there are the more isolated things get and the less interconnected all of this is and uh I'm like quoting Mustafa from this but like from his fireside chat yesterday uh the more value that each one of these new L ones uh like builds and then extracts is detrimental to the entire ecosystem so like most of the like all l1's probably won't last in the long term uh like we've already seen some of them that have crashed and that basically like those people have just like sucked out the value from the whole entire ecosystem and that's not really a positive sum game it's pretty much Zero Sum so uh that's kind of like little ramblings on yeah things still building uh in the meantime I'm gonna go back to with the docs and get a command ready to view the logs there this is expected considering we're on conference Wi-Fi and there's probably a few people here now uh in order to stop the devnet you can run make devnet down and then if you want to like start all over you can do make devnet clean that'll clear out the old config and the old chain history if you want to view the containers you can do Docker RPS and it will show you all the containers that are running right now obviously we're not obviously sorry we're not going to have anything because there's nothing running if you want to once this is all spun up if you want to catch the latest block from the L1 you can use cast block latest with RPC or all flag to do that and if you wanted to do this for the L2 as well you can change it to 9545. another thing we can do is read the transaction call data from the L1 and then we can find that data on Celestia uh that I guess the next thing you can do with this uh after it you have built the after you've ran the make build TS I built the typescript dependencies you can actually also run this on a Celestia like devnet or test that and we're going to be using so if we're using a light nude this is like a more beta integration and I actually think I need to edit this a little bit it should work with mocha as well right now and we're going to be I actually think this is old don't need to worry about this um what we're gonna what we can do with a light node we're going to sync a light node on our own so that we can submit and retrieve blobs because if the node's not synced and not funded we won't be able to retrieve the latest blobs because we haven't sampled the entire chain and if it hasn't been synced I have a note here like you you'll run into errors and it'll look like there's something wrong but it's actually just a syncing problem yay okay let's get back to here so something happened on the build and I'm gonna clean that real quick and just try it again because it looks like it was a networking issue this is that it worked on my computer part of the workshop where it doesn't actually work um so yeah so we're going through the little test net page that the way that you set this up is the same way that you set up the devnet except the make Command is a little bit different it'll be testing it up and after you have your node synced you actually stop the node and it's going to use your local node store to post data to Celestia cleaning stopping it and cleaning the test net we're going to work the same way there um we're going to go back to the optimism category and in the meantime um I'm going to go ahead and deploy a GM portal dap real quick uh we'll come back to that we're going to use the bubs test net for now um so I'm going to CD into the front end uh and then I'm going to run yarn and yarn Dev and this is yarn is going to install dependencies yarn Dev is going to actually start up my my front end and then um I need to make a burner wallet so I guess the easiest way to do this uh we're gonna set up a new account that UI changed and it actually like doesn't look terrible but it's kind of confusing uh anyone use this recently what the heck what the heck all right there we go so don't do this at home um or don't do this on a live stream rather I'm going to go ahead and pull a private key from this wallet I'm gonna also open a new one uh so jumping around a little bit I'm gonna oh whoops I'm gonna export my private key from that burner wallet that I just made uh uh where'd it go oh no go uh like the safe way to do that would actually be to set it as an environment variable um like in a DOT EMV file uh but for the sake of demo we're just going to do this real quick we're also going to export the bubs RPC URL um that's interesting and then we're going to open it in this other like second window that we have we're gonna go into the contracts folder and actually have the command ready right here to deploy the GM portal contract to the RPC URL that we just set above with the private key that we have the issue here is that I don't have any funds in there so um I'm going to go ahead and send some from my other wallet just go with the like wanted to be safe this is actually not worth nothing it's just confused um so that transaction is going through if we want we can actually so so if we want to actually see that transaction on the Block Explorer we can go ahead and click that and we're going to see it on the bubs Explorer this is built with block Scout by Caldera and the next thing we can do is deploy the contract now that we have some funds so the compiler run was successful we're using forage we can see that we set up an evm we have some logs saying that the contracts talking to us saying GM and it's on Bub's test net we then can pull the contract address and we're going to go ahead and interact with that first through this command line and then we'll go ahead and interact with it on the front end so export contract address as the one that returned above I'm going to then send a GM I'm going to customize it a little bit just so you know it's real we're going to say GM from modular Summit 2023 all right so now we're making a call to the contract that we deployed on our evm that is a roll up running on top of a Celestia devnet and we're interacting with that we're going to get a response here in a second and we can see the transaction Hash a bunch of information about the actual call itself the logs gas used if you're like have been an ethereum Dev in the past or ever played around with this this should look familiar and hopefully is a little refreshing the next thing we can do is use a get all GM's call to retrieve the actual data from them it's going to be in HEX and we see that it uh just say GM from Paris we're also going to see that show up on the contract once we start it on the front end um so in order to like update the front end we need to update the ABI this is actually going to be the same right now as it was when I made it so I don't need to do that if we go to localhost 5173 though we're gonna see that we can connect our wallet oh wait oops um all right so I'm gonna go back here and pull that contract address again I'm gonna put it into this uh I do need to change some config in main here I'm going to change the RPC URL to http localhost 9545 I'm also comment out the websockets there and we can go ahead and get total GMS again and we can see that there's now two so once we get this front end working correctly which it should be right in a second we're going to go ahead and log in with that burner we made oh nice so I think I left a piece out of the tutorial um yeah so you need to change the RPC in main.tsx this is in the SRC folder you just need to change that to localhost like this um and the symbol and name and chain ID is all the same so you don't need to worry about that websockets are not going to work right now like as far as I know and that doesn't really matter we have the GM portal on like running over here we can see the posts that we made a little bit ago uh they're definitely from the address that I the address that I made as the burner for this um and if we want we can also interact with the contract from the front end so this is going to prompt a transaction in our wallet again we can hit confirm and look at that it should post in a second here um any questions that's fine thank you for coming we'll go ahead and refresh this again and we can see that that contract call went through we posted on the front end and if we really want to like believe it's real we can see that there are now three posts on there so this is but I think it's just a networking issue like conference Wi-Fi problem thank you for coming that was it I'm gonna go ahead and try it for one more so you would still be posting State routes as far as I know right to ethereum and then you would be no but we're also working on the firmation like both like um sovereign assumptions thank you I'm just trying to see if I can get this to build because you think that's why yeah it was a like a certain go package of some sort we'll see I definitely will give up on this after this one though uh if you're using Linux like if you're watching the recording of this or you want to go home and use Linux I know for a fact that you can like copy and paste this whole thing and it'll work um so if that's any like Silver Lining yeah but I think we're going to have the same issue again any questions any last questions I think I need to close this down a second no thank you for coming 
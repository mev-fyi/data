[Applause] hello everyone a quick little background about myself as was mentioned i'm co-founder at celestial labs which is a modular data availability layer uh previously before that i was doing a phd at ucl where i was focusing on layer one scalability and i worked on the first smart contract sharding research paper called chain space which was later kind of spun out into a startup that was that was acquihired by facebook but i was the only like team member that did not join facebook and i ended up working on lazy ledger and celestia instead um which i think was a very interesting like alternative design to blockchains so i'm going to talk about three main points today the first point is we're going to actually set the record straight on what is a modular blockchain stack and define it clearly and what is not what it is not and then we're going to give some examples of of configurations of blockchain stacks and we're going to talk about the key benefits of modular blockchains so when bitcoin was first proposed in 2008 and it proposed a model where it was a monolithic blockchain where effectively the full nodes and the validators they do consensus on the chain and they also execute the transactions in the chain so they provide consensus and computation on the chain and for the 10 years after bitcoin most blockchains followed the same model so when ethereum came around in 2013 it followed a very similar model to bitcoin except that it replaced the execution environment of bitcoin with a smart weather with a general purpose uh smart contract environment known as the ethereum virtual machine but effect but the actual like architecture of the blockchain was was similar architecturally in that it was monolithic and full nodes did the same general tasks but obviously the problem with this approach is that um if a validator is effectively and full nodes to verify the chain have to do effectively two things the first thing is they have to check if the chain has consensus and the second thing they have to check they have to actually process and execute every single transaction to check that all the transactions are valid and that obviously doesn't scale and it's quite limiting because obviously it doesn't scale if full nodes have to execute the entire state and transaction history of the network but if you think about what is like the most basic blockchain you can create like what is the most minimal layer one if you if you took bitcoin or ethereum and stripped it back to its core components what would you get and what is the core functions of layer one if you remove the execution from a layer one what you would get is a blockchain where full nodes do two things the first thing is consensus they take transactions and they order them and the second thing is that they ensure that the data of those transactions are actually available and the reason why you want to ensure that the data of the transactions are available is because that's all you need to have a to build an application on the blockchain to allow clients and users to know what's on the blockchain to compute the state of the application and i wrote a paper about this in 2019 called lazyledger which was the former name of celestia well i proposed a paradigm for blockchains where the blockchain is only responsible for consensus and data availability and all the execution happens of chain which i call client-side smart contracts or client-side or off-chain execution and that's basically the same model of how roll-ups work so for the off-chain computation you can use a roll-up um you know zk roll-ups were first in 2018 and optimistic roll-ups was proposed you know three months after i uh released lazy ledger paper and in the roll-up paradigm the roll-up execution happens of chain but you're only using the layer one chain only for data availability and consensus which is exactly what the lazy ledger kind of paradigm does so in this kind of model your effect what you're effectively doing is separating consensus and execution um whereas previous blockchains like bitcoin and ethereum nodes did consensus and execution in this new model layer 1 nodes only the consensus and data availability and the execution happens on a layer above above the stack and off chain not on layer one either as a roll-up or as a or as a different kind of layer 2 solution and this actually makes a lot of sense if you think about it um so you know in computers you have this thing called the osi model that proposes a modular kind of like stack for computing where at the bottom of the stack you have the physical layer which is actually the actual cables and wiring and hardware of the of the um like internet or on the network and then if you go all the way up the stack you get the application there you know like facebook and google but in between you have all of these different layers that can be swapped out and and you know i think blockchains are kind of shifting to this paradigm because it makes a lot more sense and i'm going to talk about why so let's talk a little bit about what are the actual layers in a modular blockchain stack once you decouple them from a monolithic blockchain so the first layer is consensus and consensus the consensus layer is simply responsible for taking arbitrary data or arbitrary messages and then providing an ordering over those messages so a developer would submit a bunch of messages to the network and the blockchain or the consensus layer will tell you in which order those messages are serialized and that's at a fundamental level that's what consensus does above that you have data availability and what data availability is trying to solve is once the kind of consensus nodes or the consensus layer has decided or determined what the ordering of those messages should be they usually commit to that as a medical route or any kind of other commitment but they also need to actually tell the network what the actual data in those messages are and because if they don't actually publish the data that they agreed on then users and applications would not be able to have know what the state of the application is because they don't know what the transactions are in the application and they wouldn't be able to generate things like fraud proofs in the case of optimistic wallet for example um so with data availability and there's some cool techniques you can do for like such as data availability sampling which lets you verify that the entire data is available by only downloading a very small percentage of the data then the third layer is the execution layer an execution layer takes the messages that have been agreed on ordered in the blockchain and have been made available and then does some computation or processing on those messages so in this example on the board you can see you know you take a bunch of transactions in and those transactions might be payments and then once you actually compute those payments you can know what people's balances are and in the execution layer nowadays people typically use roll ups whether optimistic or zk roll ups and you can prove to users the execution was done correctly by either using zk proofs or fraud proofs the final layer um which kind of sits in between the execution layer and the consensus layer technically is a settlement layer a cell element layer is basically like a special case of execution layer uh it's basically an execution layer that bridges other execution layers together so as i mentioned you would typically prove in a roll up whether a computation was valid using a fraud or zk proof a settlement layer basically does basically verifies this floor or zk proofs um on the settlement layer itself and provides dispute resolution on it and that will basically allow different um execution layers and roll-ups to bridge each other to bridge with each other and transfer assets with each other in a trust minimized way now having listed all of the main components of a modular blockchain stack like how do we define what a modular blockchain is so i define a modular blockchain as a blockchain that outsources fully at least one of the four components like it i.e it does not handle that component so so for example like solana wouldn't be a modular blockchain if you just added roll-ups to solana because solana's l1 still has a smart contract environment and its reas and its validators are doing data availability consensus and execution and they're not specialized in a specific task and therefore it's not it's not modular so what is not a modular blockchain uh so there's often some confusion on this a module like a blockchain that handles all the components but has a modular software design is not a modular blockchain uh a modular software design can be helpful to build modular blockchains like we use tendermint uh the abc i construction in tenement and is very helpful to build modular blockchains but the software like but deploying a blockchain using this modular software library does not make that blockchain modular in itself and secondly a network of blockchains where each blockchain network handles all the components is also not a modular blockchain for example avalanche subnets are not modular blockchains because each chain in that subnet in the network handles all the components that i just described therefore it's not modular let's go through some examples of what a modular blockchain stack could look like so as i mentioned there's these four components data availability consensus settlement and execution so you have one you have monolithic blockchains um like bitcoin or ethereum as it is you know traditionally where you basically have a like a general purpose smart contract environment and the validators and the full nodes handle all of those four components then you have roll-ups and in roll-ups the l1 handles the first three components data availability consensus and settlement but but not execution and the roll-up itself handles the execution of chain and then you have validiums and validiums are basically roll-ups or but they do not have on-chain data availability or they do not use um like the same layer one as the settlement or consensus for the availability and therefore they are not roll-ups but more like side chains um or by lydiums as as they're turned so this is kind of like the kind of modular design in the ethereum space that has been kind of like discussed so far but then there's also a more of a celestia-centric modular design or configurations of the stack so in celestia we're quite interested in this idea of sovereign roll-ups and in a sovereign roll-up um the sovereign roll-up uses the l1 only for data availability and consensus but it does not um have an enshrined settlement layer instead it does its own settlement and the reason why it's sovereign is because it can hard fork and it can upgrade without permission from the cell from a higher execution layer so for example if you have an ethereum roll-up your roll-up is effectively like a baby chain to the ethereum settlement execution layer and you can't really hard fork it without you know requesting without convincing the ethereum kind of social consensus to do so but with a sovereign role up because it does its own settlement it's effectively like its own layout one chain it's effectively like deploying your own layer one you can hard fork it and it can have its own social consensus you've also got this ideal settlement roll-ups and a starter metro roll-up is basically like a standard roll-up except that it only is only optimized not for general smart contracts or computation but for um settle for but for settling other roll-ups on top of it and i think uh yuri is going to give a talk about this today with this idea of l ones and l twos and l threes so like for example you can have an l2 that has l3s um but the l2 might only be up might only be supposed to be used for settlement for other roll-ups but you're not supposed to like post like host actual like applications on that roll-up and then you've also finally got this idea of a celestion which is basically a validium that uses celestia for data availability it's it has similar on paper has similar security tradeoffs as a validium except that it has slightly higher crypto economic guarantees because of celestia's data availability sampling and slashing here's a different kind of like current players in all of these different um like stacks as you can see there's currently a higher focus on the execution layers in this stack i think that makes a lot of sense because there's a lot more kind of innovation or divergence that can happen on the execution layer of the stack then the lower layers which kind of do more of a kind of like simpler role simpler but more important role let's talk about some of the benefits of a modular blockchain stack so first of all obviously the big one scalability so like intuitively marginal blockchain stacks are more scalable because there's a separation of resources and that means each node in each layer of the stack can be more specialized to a specific function so for example on the data availability layer the nodes don't do any computation they just do data availability and that means they can optimize their resources to uh like having high bandwidth resources rather than computation and they can be specialized just on that one task and the main benefit of this kind of comes from the resource pricing you're separating the resource pricing for different resources on network like you have different resource pricing for data than computation and finally in a modular blockchain stack it's quite common to use technologies like data availability sampling and fraud proofs or zk proofs and this is very important for scalability because the whole um like the whole the all of the scale blockchains you can't just increase throughput you also have to increase throughput while enabling users to still gain assurances about the correctness and validity of the underlying chain in traditional blockchains the only way you can do that is if the users actually re-execute every single transaction which most users cannot do but with technologies like data availability sampling and fraud proofs and validity proofs it allows ordinary users to effectively be first-class citizens of the network and have almost the same level of security as a full node that is actually downloading all the transactions without having to have the same resource requirements as a full node secondly flexibility is a major advantage of multiple module blockchains you can see there's a kind of a cambrian explosion of different execution layers that are innovating in different ways in the ethereum roll-up space for example and these different layers these different execution layers have different advantages for example you know fuel's execution layer is parallelizable for example and this is very important because um if you think about the history of the web and this i like before before the clouds or virtual machines were popular people used to just use shared web hosting providers you know like dreamhost or or you know geocities and that really limited the innovation of the web because you were limited to whatever like execution environment or programming languages that that host provider had on their server but nowadays no one uses that nowadays people just deploy like virtual machines on amazon ec2 and they effectively have their own operating system and they can install whatever they like on it and experiment with all kinds of different like programming languages and technologies finally i think this is more celestial specific but if you think about the different layers in a blockchain stack it's quite you know we have layer one which is commonly known as the consensus layer but the consensus layer only has value because people agree that it has value like people agree that the current ethereum chain or the current bitcoin chain has value a post opposed as opposed to some fork of ethereum because people because people have just agreed it by social consensus you know like if i fork ethereum no one's going to say that's the real ethereum so to define the real ethereum that requires you know social consensus and but applications on shared smart contract platforms and smart contracts do not have that same property instead they kind of um borrow the social consensus of the layer one that they're using or the execution environment they're using so like if you wanna if you have a smart contract in your ethereum you can't fork it uh without asking without convincing the social consensus of ethereum that's to some people as a feature but to others there's a bug and but with sovereign rollups you can actually have your own layer one execution environment that your community can hard fork and that it therefore has its own social consensus and i think this is very interesting kind of model to me the whole point of blockchains is that it's basically a social coordination mechanism for uh off chain social decisions that have been made i think there's kind of three main values um from my perspective of a modular blockchain stack or blockchain or the idea of blockchain modularism in general firstly users are first-class citizens citizens of the network thanks to technologies like data availability sampling and dk proofs and fraud proofs those technologies allow users to have the same level of security as a full node or similar level of security as a full node without needing the same resource requirements and hardware as a full node and so you're allowing end users to actually be your first class participants of the network secondly i think a second important value is um you know this idea of layer one fighting and layer one maximalism is kind of is kind of you know getting old and i think modulism is much more interesting um than maximalism because it's not a zero-sum game and if you allow develop developers should have the freedom to build their application how they want according to their use case and the more you know the bigger the more players there are in this module blockchain ecosystem and the more value there is to be created and finally i think an important value is that if they want to communities can choose to be sovereign um by deploying sovereign roll-ups and the main difference with that with other without with deploying your own l1 is that it's much easier to deploy a sovereign roll-up than it is to launch your own new um like layer one chain with its own consensus because you have to bootstrap you know a secure and decentralized validator set using something like proof-of-stake but with sovereign roll-ups communities for the first time have the ability to create a sovereign blockchain very quickly within minutes without having to worry about the overhead of maintaining and creating their own consensus network with a secure validator set because they can effectively have shared security with the data available layer without and without losing the sovereignty of their execution layer i think the reason why i think it's so important to kind of move towards a modular blockchain stack is because over the past 10 years we've kind of been stuck in this kind of cycle of like layer 1 chains being created all the time because the previous layer 1 chains could not scale and you can see this is not ending well because you know all the chains here have also run into performance issues and gas is transaction fee issues and uptime issues so clearly we kind of need to escape this cycle of new layer ones um with something that actually kind of works and i think the best way to do that is to have a modular blockchain stack and use technologies like roll-ups and zk proofs and fraud proofs and data availability proofs so if you want to free yourselves from the kind of limitations of monolithic layer ones then build modular and gain your freedom thank you everyone 
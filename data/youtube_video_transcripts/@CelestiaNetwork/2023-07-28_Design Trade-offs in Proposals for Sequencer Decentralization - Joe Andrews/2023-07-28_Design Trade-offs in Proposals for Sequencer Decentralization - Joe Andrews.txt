cool so um my name is Joe I'm one of the co-founders of Aztec and I'm going to run through PBS Mev and some of the considerations on l2s it's not quite as simple as we may think I'm Joe uh so so what is Aztec um we're a fully private ZK roll-up on ethereum we have private State and we have fully composable contract calls between contract a and contract B and we also have hybrid execution so there is Mev we have things like uh public function calls for amms and as such we're trying to think through what does decentralization look like um and we have a big focus on on launching decentralized you can follow me on Twitter and follow Aztec for more info on that I'm going to try and get through this in 15 minutes but um we're going to go through why we should care about decentralized sequences differences of block building on L2 versus L1 there are some key key distinctions a walk through of two proposals we've received in our RFP process for decentralizing the sequencer and a little kind of some thoughts on enshrining Mev auctions in L2 protocols so firstly why should we care about decentralizing sequences um I think it's fair to say the industry doesn't really care right now um l2beat has an amazing dashboard and I think no one including Aztec connect has made it past stage zero or stage one on the training wheels framework um if this was kind of like a report we're doing pretty badly you get the meme I think like some of the actual reasons we should care a lot of Roll-Ups are designed to be first so we want to be the first private roll-up the first CK evm and this actually kind of has pretty harmful consequences I think we should start designing things to be last they need to stand the test of time um decentralized systems need to be really robust we learned this the hard way with Aztec connect trying to decentralize a system with hundreds of thousands of users is way harder than just going to the Whiteboard and getting it right first time and if you're at the Whiteboard I think we can start to solve some of the issues in the L1 block supply chain and try and get to a world where maybe more than five people are producing blocks and the last one won't be a surprise I think regulation is a key reason to to do this um crypto's cryptos Global uh but regulation definitely isn't and having a very centralized uh point of failure is something we need to kind of work around especially with headlines like this between the differences between the UK and U.S for example all right so let's look at the differences between blocks on L1 and blocks on L2 um I think the first base to start is around the size of transactions um so for kind of non-private chains um you just submit a signature over kind of like a request or a transaction request but for a privacy L2 you submit a proof of execution so a zero knowledge proof of the transaction this leads to kind of much larger transactions um with Aztec if we use something like Goblin plonk and very wide circuits they could be kind of 20 times larger than a normal ethereum transaction this isn't a deal breaker but it just means that the same infrastructure or same things we need on on our one may need to be adjusted on L2 uh the second area is compute um so just a quick look at kind of like the CPU cycles that are needed to actually produce a block on on these different kind of domains uh first of all everyone's kind of familiar with searching there's a lot of compute that goes into uh the knapsack problem trying to figure out the correct ordering for a block on L1 and then you've got to execute all the transactions and do kind of the State updates for our two we're meant to be scaling ethereum so there's going to be a lot more searching as we had previously across domain searching across to vein Mev and much more transactions per second this leads to more execution um and you can see that already there's centralizing forces on the amount of compute you need to be a builder potentially on an L2 it doesn't really stop there for zkl2s we also have proof construction so constructing a proof of correct execution can be a million times slower than actually executing the transaction so when you're going to put all that together the summary is kind of block building on l2s is not really the same as block building on L1 so should we use the same systems to kind of produce our blocks and I think the main point of this slide is just this is like a huge centralizing Force if you need 10 times the compute 100 times the compute to be a block Builder and you're the fifth best block Builder is it really worth it to turn on your machine um so that's something we need to design around we don't have all the answers so we did an RFP to try and crowdsource some of them we had some fantastic input from teams like espresso systems and flashbots and Austria so thank you everyone who participated I'm going to run through two of the proposals now one of them was um written by me and one of them was kind of written internally but also it learns a lot from some of the espresso systems work they also have drinks names which I don't know where that came from if you want to kind of look at the in-depth uh write-ups you can scan these uh QR codes it's waiting for five seconds so the first one fanat um it really isn't that different to ethereum it tries to kind of take what works on ethereum and mold it a little bit for L2 and it really focuses on Fast uh transaction pre-confirmations um to do that um we use an L1 smart contract to like administer the whole process um and we have a proposal Builder separation like we're all familiar with a proposer likely with the help of Mev boost will submit a block header to the L1 contract and that will include uh commitment to The Ordering of transactions um like hiding hiding the actual ordering but a commitment to that through just a commitment scheme and a vrf output on their staking public key all proposers have to stake in this model and the vrf output between proposer a and proposer B will differ on each block um after kind of the proposing phase ends for a given slot or Epoch The Proposal broadcasts the block contents to L2 and provers who are listening to kind of uh the L2 can compare the vrf outputs look up on the L1 contract and see if it's a winning a winning score for the vrf if it is and all the data is available they can start constructing a proof from the contents so the cool thing here is that like anyone can submit that proof back to the L1 and it doesn't have to be kind of submitted for the gene to move forward uh like at that point in time it's needed to be submitted for finality but um you can kind of look at the chain and be like if I've got all the data uh and this is the winning vrf output I can I can move forward and eventually the block which has a valid proof and the highest VR out vrf output will become canonical this means that we can get soft finality by building or proposing blocks that build off um kind of unfinalized blocks if all the data is available and you can use this with shared sequencer designs um and kind of it's quite extensible much more like ethereum yeah if no proof submitted you kind of roll back to the last canonical block in B52 this is where things get a bit more controversial um my kind of goal with it was let's try and get rid of the proposer and to do that we enshrine an Mev burn auction in the protocol and we instead focus on decentralizing the prover Network so firstly I guess why does a proposer exist on L1 which may lead us to kind of see could we get rid of The Proposal on on L2 and I think it exists because you need to check or the work of other proposers um it's the main reason it exists a proposer on our one could technically lie um and other proposers check that work um that's kind of the power of the ethereum consensus model and it also exists for censorship reasons um The Wider the set of proposers uh the higher the chances are that eventually someone will come along who's not willing to censor me so it's pretty good reasons for it to exist on on our one and as such the block rewards on our one kind of incentivize creating a very large validator set on a zkl2 my claim is that these properties don't really hold so we don't need to check the work of other proposers you can't lie um ZK proofs mean that if the proof system is correct we just submit a proof to our one and we can inherit the checking work of all the proposals on L1 and we also don't need the censorship property because we can force direct Force transactions in directly from the L1 smart contract so these two kind of main reasons for having a proposer don't really exist on a on a zkl2 so what's the point of enshrining a proposer into the protocol who can really just sell their right to produce blocks to someone else instead we could use a block reward to incentivize a proving Network or something else in the protocol so how that works we split things in B-52 into two distinct phases there's a block proposal phase and a proof acceptance phase a bit like finet um there's no proposer here so the Builder is doing everything in this scenario the Builder broadcasters broadcasts a block header to the L2 Network this contains the commitment to the transaction ordering like before and a bid in the Mev burn option this is the amount they're willing to burn for this block to become canonical they also commit to payment to the staking Network who's going to help them make a proof later on stakers then vote on the L2 for which proposals they will construct proofs for likely based on how much they get paid but there could be other factors like censorship or other factors which influence this um and each vote is waste weighted by a vrf output from the stakers public key um the builder then kind of Aggregates all these votes on on the L2 and they assemble a transcript of the block um this is committed directly to L1 and it kind of allocates who's going to do what uh in the proof construction phase and also lets us Define a total score for the block and the L1 roll-up contract can rank these uh proposals by the score and the two weights are kind of the the sum of the proof of votes and the amount they're willing to burn we're still modeling this so it could be could change significantly um again like with fernet um because this is on our one at this point the prover Network can just look up on the contract and see which blocks have data available for them and are they safe to start constructing proofs for anyone then can submit a proof to the A1 roll-up contract and the same property kind of applies the the proof with uh the highest score becomes the head of the chain and you can play you can pay a block reward to the winner plus Uncle provers as well to keep liveness foreign so these proposals differ quite a lot on what happens to Mev and we don't know what the right answer is right now um but we can look at kind of other other l2s and see what's happening and see how we compare so an optimism um I think the the rough the rough model is a centralized sequence at the moment extracts Mev to fund public goods that's a great a great outcome on arbitrum I think with the time boost proposals um any Mev that comes from that or like fees will go to a dow potentially Aztec if we go forward with the finac proposal will look very much like ethereum you'll have a proposer and a builder who can extract uh Mev from the protocol and this will be facilitated by a market like flashbots for example if we go forward with B52 we've deleted the proposer so it's the protocol and the Builder that can extract the Mev via M protocol Mev auction so to help us decide on these uh we're doing a lot more research but I've tried to put together some rough economics of what I think the different variables are in this so if we look at kind of uh the revenue stack for a proposer um today it's roughly transaction fees block reward and the bribe they get from the Builder to get the block on chain and the costs are pretty straightforward there's also obviously the builders Revenue stack the ordering preference fee is designed to kind of just Encompass all of the different Arbitrage opportunities that exist or for the different builders and there's kind of unknown relay costs we don't really know who pays those at the moment but I guess it's species um and uh some costs associated with searching um if we were to kind of remove the proposer the Builder's Revenue stack could look a bit like this um so they would get the full transaction fees the block reward and the ordering preference fee and in return they have to increase their costs by doing some in protocol Med burn so yeah I guess my claim is that these are the same thing um so the bribe that's currently paid to the proposer could be paid to a protocol for a zkl2 um lots more research needs to be done on this to see if this is a good idea there's research on ethereum uh around maybe doing something like this but for a zkl2 I think the requirements are a lot uh less strict because we can rely on the L1 for a lot of these censorship properties so the main takeaways so far of where we've got to in our decentralization of the sequencer Journey um the two proposals were kind of going forward with at the moment um uh slightly based so it's not full Anarchy um you can't just submit Roll-Ups to L1 whenever you want but they do use an L1 contract to decide which blocks canonical and there's some scoring logic in that contract for both proposals they also both used a vrf this helps us kind of protect against 51 attacks and someone kind of uh acquiring too much of the stake or or other attack vectors here for net decentralizes proposers like ethereum and B-52 tries to decentralize the proving Network we need a lot more research on uh enshrining Mev markets and that's pretty much all I've got time for so instead of you guys asking me questions I'll ask one question to you guys should we enshrine Mev at the protocol or not if you have any thoughts please come and talk to me afterwards or now foreign 
okay so what we're trying to do is yeah we want to provide customizable Roll-Ups and what that means is we want people to be able to customize one the base layer or the da layer so whether it's like Celestia we support other ones which I'm sorry I'm embarrassed to say that during a Celestial lightning talk so far like polygon Avail support some others uh we'll support other virtual machines so right now we support Solana VM and evm and then we do some additional customizations based on what the app is it's a game maybe I want like verifiable Randomness maybe um you're like a ZK protocol and you need like custom elliptic curves or something like that so this is what we wanted to build and then the question is like how do we build it so historically like when Eclipse was first started uh I said let's say you want to just like the most obvious solution to building your own like customizable roll-up is we'd build it kind of like I don't know like arbitrum or something and we'd just start with evm and we'd like Implement settlements on all these different l1s then maybe we want to support svm and naively now you'd have to implement an svm like interactive fraud proofer or worse if it's like a ZK VM now you have to have ZK circuits for the Solana VM and all this stuff maybe you want to add like move in the future then we have to redo this whole process so there's nothing really gained by like like there's not much infrastructure that can be reused there's like orchestration infrastructure and stuff like that but all the settlement logic would be highly bespoke to each bytecode so what are some other Solutions here what one you could do something similar to like what ZK sync does ZK Sync has like some kind of shared intermediate representation where they take like let's say you're writing in solidity they compile it to like some llvm intermediate representation convert that to their own like like circuit or it's compatible with their own like ZK sync circuits but what's bad about that approach is now like I mean z case I'm trying to remember when this was they had this like big announcement that they had finally added support for Yule it's like language specific support because they have to re-implement this like bespoke compiler for their ZK sync machinery for every single language and the reality is not that many people are using Yule compared to solidity or all these other languages so that's a very like tedious again like one at a time type approach and then like the last approach which is what we opted for was just pick a VM and then uh so we picked the salon at VM for reasons that we can go into and let's say we want to support evm we have a smart contract that lives on the Solana VM and it basically acts as an evm by code interpreter and then of course like you want to support evm wallets so you need to and proxies so your evm wallet connects the proxy and that wraps it in a salon of transaction sends it to your Solana VM and in some ways this is feels kind of forced right because maybe there's like transaction size limits or gas limits that are more strict in Solana especially when the overhead of this interpreter and there's like ways that you can kind of like improve that but that's the downside of this approach but by doing this we just have to like Implement these bytecode loaders in the Solana VM uh we have to like have these proxy nodes but we can reuse all of the logic especially given that like for our ZK Solana VM we're using risk zero so we like basically take BPF programs and then uh like we have like this jit compiler that outputs risk five by code then we have to like make the memory accesses work correctly so then like it works in the risk the item for contacts for people who don't know risk zero is a ZK risk 5 VM so it can run any Frisk 5 program uh and and that's what we're using for our ZK settlement so uh so anyway so that's that's how we like support multiple VMS on the da part like we want to support multiple dla or so probably want to do some kind of sovereign settlement so that's the motivation behind why eclipse the architecture this way uh okay so it's slides here well in one thing Solomon there's I mean I said the Solana VM and even the evm to some degree it's not really built for to be used as a roll-up I mean and especially for the Solana VM because the state for Solana is not stored in a Merkle tree and that's important especially for an optimistic roll-up because let's say uh I said the way an Optima I'm gonna assume everyone knows how an optimistic roll-up Works to say let's say you want to dispute some like State Route you're like this is the last staproot I disagree I agree with uh here are the inputs and you have to be able to re-execute that on the settlement layer so that part of committing to the inputs and saying these were the inputs that belonged to the state tree at that time requires a State Bridge so without a state route you can't do that like kind of input commitment and then like re-executing like through some settlement layer that's like a little bit easier to do so in order to do that we have to like stake a sparse Merkel tree within the Solana VM and like you obviously want to benefit from the parallelism that's inherent in the salon at VM that's like part of why we picked it to begin with so you have to have a sparse Michael tree that's able to be updated in such a way that it's compatible it's consistent with allowing this like highly parallel execution layer so um so that's one difficulty another is that like we want to do Mev redistribution with things like skip that's tough because they want to completely removed the mempool so we have to like add a mempool back in and that like it has challenges of its own in terms of now we have to make decisions in terms of I mean it shouldn't it well I mean it's something we have to explore further with the skip team but ideally it probably wouldn't impact throughput very much but it's definitely something that Solana again like was not really designed for so these are like examples of the downsides of starting with the salon at the end okay uh this is like more high level stuff all right these are like use cases so this is all like gaming specific stuff but the thinking like so maybe to take a step like even further back behind like by Eclipse we want to let you spin up your own customizable Roll-Ups the question is like why would you want to do that and the answer is there's a bunch of use cases such as games or maybe physical infrastructure networks or Enterprise chains that maybe need to be of fat compliant or have additional like privacy layers on top or something uh maybe they need like custom op codes this is the roll-up thesis so maybe everyone's already like bought into this but this is why people would want to spin up their own chain and these are examples of specific features that like having your own chain can like give to a game some of these features are not actually specific to roll ups but this is just like maybe we're talking to Zynga or something someone who's like I'm not even I think it actually has a crypto team but someone who's like not super familiar with crypto another question is like why would they want to be in crypto at all so we have to motivate that for them as well so that that's what this is basically um that's that's basically it I I don't think it's like the rest of these slides are really super relevant but maybe it makes sense to open it up to q a or if there's anything that I glossed over uh happy to like dive deeper into that yeah how are you going to incorporate verifiables uh yeah so that one's top uh I mean the simple answer is you just have an oracle that's just like automatically built into like all of the maybe there's like a system program and you automatically deploy this to like every chain that's spun up if it's a gaming chain and then the way that that Oracle gets its data is through some like separate set of nodes that are doing some verifiably random scan and then you can always compare against the two or something or you could dispute so that that's one way um so when the like website for Eclipse says that you can because I read the docs recently um when it says that you can like deploy any VM rule you're not really playing any game envelope you're deploying a C Level VM with the evm inside yeah don't tell anyone yeah that's right all right all right all right got it got it so isn't are you guys redoing that or are you guys like picking the word from like neon uh yeah we work with the neon cam yeah so like half of our chains are evm actually what part of like develop a value parole of like a roll-up that Launches on Eclipse just like Eclipse play apart it would be the settlement process so we have like this honest minority settlement there it's like if you took a solvent roll up and just did no execution on it then that's that's what eclipse is providing so uh so I mean it's kind of unclear what would be the right Revenue model for something like that you could do like a simple SAS model where we just like don't take any cut we just charge a flat like Fiat like I don't know 100 Grand a year or something another option is you take a Char like a slice of transaction volume seems like a little bit more crypto native but then the run the risk you run is when a chain gets big enough it's running like millions of transactions a day or something there's some break-even point where they're like we should just be our own layer one which maybe is like the future of how these Roll-Ups will program this you start as like a roll-up and then you like establish like some critical mass of transaction volume and then you Branch off as you're like totally Sovereign L1 uh and another option is like you just have some like kind of staking mechanism so we're basically that's all to say we haven't finalized our tokenomics we don't know what the revenue model would look like like so you brushed on this but you skipped it over what was the motivation for using a Solana VFS yeah well we wanted a fast VM so I think of like the idea of trying to implement or re-implement settlement for every by code was just like out of the question so we didn't want to do that compiling to an intermediate representation we explored that a little bit there's some tooling like solang and like there are stuff where like like many languages can compile to some common byte code But ultimately like they're not super like sustained we'd want to like compile it to a bytecode that's good for the CK circuitry that we're putting together so it's better that we just have like one highly optimized like CK circuit for one byte code so that we didn't want like want to reuse anyone else's tooling for that so that was part of it uh and the salon VM is really fast so like it's parallelized has local fee markets which like every Roll Up is going to need at some point because I think that like one point like I mean totally tweets all kinds of crazy things but one thing I'd like is definitely true is what causes high fees is not really about like a lot of I mean on ethereum it is but in a lot of cases it's not about block space contention it's about State contention when many people are accessing the same piece of state that's what like causes like high fees and therefore you you don't want like if I'm like a guy like trying to just you or be a normal guy using a D5 protocol if there's a big nft mint going on that should not impact me and that's something I'd like Solana identified and built this fee Market to address and maybe they identified it because like they're one of the highest throughput chains that exists right now they're the only ones that like reach that critical mass Stephen like they learned through experience they're like nfts end up being a big use case they started saying like this is taking down the whole chain let's address that directly uh and like probably all these other Heights we put chains will end up hitting something similar like what kind of features does it have to have to or other things yeah we do bridging up from there too but yeah we haven't thought too much about asset issuance or anything maybe it's something we should chat about I'm curious when you're and you allow them to basically pick their da layer yeah how are you seeing preferences around that by default we spend that we go to Celestia like if they have no preference we always use Celestia and motion popular thing to say in this room yeah most people don't really seem to know or care yeah I mean the reality is I think it'll end up being like where do they fall in terms of like decentralization versus the costs they're willing to pay like that's something like that or like I guess you can use it it doesn't seem I don't see the advantage of using ethereum versus Celestia but maybe there's someone like like the Zynga what they ended up doing is they're just deploying their apps directly to the ethereum layer one so like these guys just like don't know what's going on so that that's kind of what's how some of these people think [Music] yeah so for the verifiers we actually like group that with the execution layer so as if someone spins up an eclipse chain we're like oh it's also on you to run a verifier like because it wouldn't be feasible for us to like try to verify for all these chains with all their different you know maybe they have different block times or something yeah that's the focus for now in terms of how to Market fit yeah so I I guess like part of the reason why we pick gaming is just like there's a lot of interesting areas for app chance so we just like flipped a client we're like let's pick one of these uh and like the the situation with gaming is that a lot of like crypto games the extent that they incorporate crypto is pretty limited so that those kinds of use cases are not as interesting for us but we try to push people to incorporate like more crypto native game mechanics like we would love to see some more stuff like streaming micropayments or like I don't know some kind of create terms games or things that like could only exist on chain and that's when we spent we have like these dogs have like a bunch of different game mechanics that we think would be interesting to see and like we want to be like design partners for these games especially given that a lot of the time if someone is in that category of games that are receptive to being really avant-garde they might not have the crypto knowledge to know like what's the right way or right mechanic that they can incorporate so we have to kind of act as that partner and give that expertise yeah uh yeah I wanted to like to kind of like follow up from what Barry asked about like you know people having preferences for da layers yeah to execution do you get people that are like oh I need like solidity in my life or I want to eat class and oh there are definitely people who have like strong preferences on VMS and even they'll have strong preferences on the da layer like what will happen is polygon will give someone like a million dollar Grant so it's like you have to deploy to polyone Avail so that then it's like there's not much wiggle room they have to use that DNA layer [Applause] 
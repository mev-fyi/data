so just a heads up I'll be talking about the blockchain info that is needed for to build fully launching games and really just launching games that uh really can break out of the niche right now and and start to be interesting um I will take perhaps a not quite a workshop format where uh I don't have a ton of Hands-On things that you can download on your computer and start trying things even though Keystone is uh is already open sourced um we're still polishing a lot of the stuff and probably you can expect a more thorough article next week which you can use to start building on Keystone if you like but today I will take a more need based or like I guess first principle approach starting from the experience that players are looking for or that can be uniquely addressed in fully on chin games and then the game paradigms that will arise and then I will talk about kind of our journey and building launching games and the the specific solution that we came up with which is called Keystone it's a fully launching game engine that we made in the past couple months uh and I'll talk about what problems that that solve okay let's get started so uh before I begin can I have a show of hands how many of you here are go or solidity programmers or like Engineers who who write code frequently um just just raise your hand curious and uh how many of you are like um in like RTS games or strategy game players okay sounds good so yeah let me briefly introduce myself I'm ija I'm one of the co-founders for curio and for those of you who haven't heard about us we are a fully on chain or a crypto native game infrastructure company uh dedicated to supercharging the arrival of of really cool and successful on-chain games and as I said earlier today I'll be talking ultimately about the tech that we really over the next uh the past couple months which is called Keystone I think it's a revolutionary framework onshine game framework that can change a lot of the things and solve a lot of problems that are facing on-train games today but before I get into that I will talk first about the experience that we're trying to shape that we think fully auction games have a unique stab at and the design paradigms that support those experiences so first a quick philosophical detour is what do you think makes the real world feel real is it just the rendering quality or is there something else and in our opinion humans have been social animals since the beginning and the relationships that we have with other people are really important and are very valuable assets of ours and but the the types of interactions are not very well created in the virtual world or in games compared to the real world today right think of one game that rivals or exceeds the complexity of social interactions that you have in real life there's not such a game even if there are many MMOs that claim to be uh you know very interesting and why is that right so let's take a brief look at kind of the current social models in in in games today so first how many of you recognize this this game over here yeah so yeah this is StarCraft is one of the most popular RTS games and the the thrill of commanding a bunch like a lot of armies and annihilating other people's armies is quite interesting I would say um but the social interactions if you think about it in Starcraft and in games like CS go and OverWatch are pretty purely competitive right there's not much out outside of directly competing with other players there's not really any cooperation or anything that sits between cooperation and competition right and that's very and that's drastically different from The Real World so this is what we call social 1.0 games the primary relation there is uh PVP or pure versus pure and on top of social one point we have 2.0 which are over overwhelmingly uh MMO or massive multiplayer online games and this game here shown here is is a MMO style strategy game called rise of Kingdoms it's one of the most popular strategy games on mobile um basically the longer but less strategic version of Sif if you're familiar with Sivan and the Paradox games uh and there's a lot of other category games that you may or may not have played or heard Eve online World of Warcraft all of these games what these games added on top of uh the first generation of social games with multiplayer games is the uh collaboration within a certain group and the primary competition happens on the level of the group not an individual in these games so if you think about it right in in Rise of Kingdoms for example you join as an individual as a player but you quickly you are quickly pretty much forced to join one of the existing alliances and if you don't join you're Annihilator pretty quickly if you join however you pretty much are binded to the group from that point on right you can still choose to leave and go to another Alliance but if you stay in one Alliance your goal is pretty much to to grind to put in time and to wail you know to put put in as much money as you can to kind of Reach the the top social hierarchy in the group and there's not really anything else that you can have right like let's say you're this player over here and you want to trade with this other player in a different Guild or group there's not really a purpose or a way for you to do that uh unlike the real world and you know whether it's a trade or a non-aggression pact between you two uh you can't really do that and it doesn't apply just to individuals this also applies to group let's say this skill on the left want to team up with the Guild on the right top right to let's say defeat this this Guild first they can't really do that they can verbally agree that you know we want to team up but if one starts to attack another there's not any way to to enforce that promise and because of that the the social interactions in Virtual Worlds have been very simple so what does the real world do better than games at Social relations in my opinion there are two very important things one the first is the existence of Highly valuable assets such as your house or anything that you think are really valuable and they serve as collateral for for your actions in in some like if they basically um let people take responsibility for their actions right because otherwise these very important things two people will can be taken away and but who will you know ultimately enforce these promises and Deals it's the the court or the law enforcement entities and which are actually effective in the real world right these things form the foundation of such a multifaceted social world uh in our real world how do we create that for online games or Virtual Worlds I think we already figured out half of the puzzle which is the existence of virtual assets which can be very valuable and argument arguably more safe than in the real world but we don't yet have a mechanism to protect people's uh actions and interactions around these assets and let's think of a specific scenario so here you have a grand strategy game you're playing and you see this this player of italic who's next right next to you and you have you're you're similarly strong you have both have a lot of troops um and you're fighting over a couple gold mines that sitting in between you let's say all of a sudden one day vitalik texts you and says this guy named Justin Sun approach is approaching both of you with lots of high-level Horsemen and you're gonna both gonna lose if you continue fighting against each other and you ask vitalik what he wants to do and he proposes a non-aggression pack a temporary one that basically you stop attacking each other for three turns and whoever violates pays the other 500 gold simple enough right this is probably the simplest kind of deal you can make but if you think about it if you agree to this and then decides oh I really you know you really want the gold mines in two turns and you attack vitalik anyways what happens nothing really happens right Vitality gets angry you know if lots of players does that to him he quits the game and but you know Justice Never Comes so what would add this missing law enforcement layer that enforces these interactions and Promises people make in January or actually last year around September October we came up with this system called treaty which is basically a smart using smart contracts but not in the purely Financial world of D5 nfts but in the moral context-rich gaming worlds so an example can be a non-aggression pack for three turns or forever two things as complex as NATO which is a defense pack that declares what type of capital is used in what circumstances you can define a guild currency imagine like Saudi Arabia with a lot of oil online um you know they can they can issue their own currency with their own schedule one backed for the barrel of oil to protect that resource you can have on-chain democracies other kind of government governance organizations that pass policies in different ways and all of that really is is open to players interpretation and creativity right as long as you have this framework and the the nice thing about treaty compared to traditional worlds is that traditionally game logic is is closed and even if it's open right you don't know the the game that you've seen through the front end is verifiably the game that the game company claims it to be right imagine I don't know how many of you are poker players but a lot of poker players online but much less than in real world because even if the probabilities tweaked in a very slight way even if it's not intentional it could cause very big damage right and that's why we haven't seen a lot of these uh there's no such thing that would actually make up the the social components so treaties uniquely also uniquely suited for blockchains and this is pretty powerful as a concept and we build a game out of it we basically started building this game in in November on top of our past kind of uh Forex we built demos before and we basically built a better demo or like a proof of concept where it's a Forex strategy game every player starts with a capital commands a bunch of troops and tries to capture the center tile which is the victory condition uh within a week so the game lasts for we lasted for a week in this January uh and uh I think when you hold the standard time for six hours you win so it originally we added the future treaty inside the uh how it works is our so our past game was implemented with uh with pure like fully smart contract based logic uh as well as social contracts so basically the game back end is uh is entirely written in solidity that lives on a custom evm roll-up that we have to maximize the performance while preserving evm equivalents and we basically at the beginning of a lot of player functions such as move or battle for uh there's a function that basically fetches all the treaties that the player has signed with other players and it checks the whether whether any of those treaties invalidate or disallows the move so or the the action let's say like science with any of you saying that I cannot move on your territory and if so uh if I do I'll give you 500 gold or I I maybe I just can't move onto your territory then that will get automatically executed when the trigger is met uh and it's the game was interesting in one part because the treaty actually affected the result of the game towards the end of the game I think it was 12 hours before there was one Alliance that uh so this is not the final picture the this this player over here and this player over here and then another player Alliance and basically held a lot of troops in a senate tile knowing uh hoping that you know no there's no Army that can defeat them it wasn't the case and there was one player who basically created a loan treaty that allowed them to loan armies from another player and basically pay them later um and they signed this treaty with another player who is farther away from the center who had no Victory against the victory on his own but had a lot of troops to to support this player so that player actually ended up winning because they got two people's troops and together raided the center so that was super cool and um you know people made a bunch of wives jokes um about just like spending a lot of time in the game um and and yeah we're building a breakthrough real-time World strategy game on top of this idea but kind of much bigger and we've already tested the game internally with prototypes and it's it's it's awesome um and we hope to launch the game in a couple months so that's the game building side uh on in qrl so let's get back to infra let's think about what uh I kind of briefly talked about our previous info with uh fully smart contract based logic as well as social contracts what do we actually think a robust layer of infrastructure infrastructure framework need to support these fully Unchained games to aim for these you know very high stake PVP and very rich social interactions we obviously need the first two things which are crypto native I would say the first one is composability that that's the term that people throw around but what I mean by composability is the ability for players to express any kind of relationship with other players in a way that the game engine understands and can execute and then the second piece is trustlessness of assets on chain but if we think about it right if right now uh I think you know smart contract based logic engines can totally do both of these but why are fully launching games still still such a niche and kind of unplayable to be completely honest it's you know the the elephant in the room is that game actually needs much better performance to support a lot of the best design paradigms that exist out there in the world right so FPS games TPS TPS games MOBA all of these games MMO games even some RPGs right require a level of performance and throughput that is simply untenable today with purely smart contract based logic right that's something that I think a lot of the the game framework uh infrastructure players today ignore or like intentionally not talk about right they like people keep saying uh launching games will be fundamentally different that is true the case but games still need to be playable in order to uh in order to be fun right so we you know we had the same problem uh in in this game that we built in January we optimize our smart contracts a lot and you know ran into statue deep issues many times use Diamond um and like use Foundry to test everything we we did our best and I think it's pretty well written I wrote the smart contracts uh but the reality is when 20 players are playing concurrently the each action such as battle right these uh which had a had a for Loop had a bunch of uh extra get functions because of stack two deep issues were costed around hundreds of millions of gas which is not because of I hope it's not because I'm a terrible coder but it's really because the game is very context Rich right and you need to actually get inside a lot of state that D5 and a lot of existing applications simply don't need and this is not unique to us I think uh you know a lot of other current Frameworks have this problem and but you you can just simply have players wait 15 seconds 20 seconds for each action and not this is not even counting you know taking games into continuous movement space where every move is like a small tile then the number of transactions you have is also pretty crazy and this is a problem you know the the Dark Forest on top right solve this or like avoid this problem by having each intake from several several dozen minutes like 15-20 minutes anywhere to several hours the primary action in dogforce V6 was sending energy Rays to conquer other planets and it's I think the most well-known full yanching game up to date and that worked for its purpose but most games that are really fun to people aren't this slow right and and because of that actually Dark Forest had a insanely High user entry barrier and that's why even though many people heard of it not that many people actually played and and yeah this is the proof that our game had the same issue the player here says the the blue ones which are the in the moving troops don't actually move and the red ones don't actually attack so people are challenging um are like questioning themselves for whether they're doing the right thing uh yeah so and why why is that right what caused these performance issues um fundamentally it's because you're using evm op codes to execute and basically implement the game logic that that evm wasn't meant to support right um and and that is like a hundred times slower than uh typical game engines and on top of that you don't have the game tick in blockchains and why is that bad one you can't really for example for pathfinding which is too expensive and too costly to implement in smart contracts you basically have to use the front end to do pathfinding which is very unfriendly to AFK or away from keyboard and on top of that right it's a huge performance bottleneck on its own because let's say you're trying to move from point A to point B and what that is is actually an intent where your movement looks like is every small step at a time right you might take 100 or 500 steps before you get to point B um but in blockchains or in today's launching games every mini step you take is a transaction and in the transaction obviously you need to check permissions you need to check you know timing whatever a bunch of other things that doesn't that usually doesn't have to repeat it for intent right but it have to be done like 500 times which adds to the the performance through a bottleneck and finally solidity is not this is a minor less important problem but a lot of I think today's simple launching games are are enough with solidity but there's a lot of uh like think of like ancient impact or the biggest like games that you see it's like very difficult to to create that in solidity because it's not meant for games and it's not that uh it's not as well tested as a lot of other more traditional languages like JavaScript or go and we basically uh thought of all of these problems and took several months to to really think first principles like what kind of experience do we want to preserve for players we definitely want to preserve this the full social composability we want to preserve everything being on chain the assets Beyond chain the logic Beyond chain and we also but we also want performance we also want players to one day play web 2 like games but with uh you know additional gameplay features on chain and so we made Keystone it's a pretty revolutionary roll-up based on engine framework made to specifically 100x the performance of on-chain games and before I dive into details this is a demo it's a tech demo it's not complete project but basically we put the Warcraft game on entirely on pane so everything you see here the the location of houses the buildings the every attack every movement of every troop the trees like all of that happens in real time on chain foreign so hopefully that that's pretty impressive to see and the interactive demo will come out in one to two weeks so you can definitely feel free to try it out on your own so uh we didn't count that part because I think a lot of the uh I'll explain get into the technical details but essentially a lot of let's say many troops are moving together that is a parallelized transaction or like parallelized action that you can count as one or many transactions and it's like basically not everything happens as transactions in this case like the the intent is a transaction but the actual change of state do not necessarily take place as transactions so key features of Keystone First of all it's a high throughput ECS game engine ECS basically means a way to store game States and we have things like Fast game tick and enshrine indexer it's uh in this end supporting basically the fastest RTS yeah we we wanted to put Starcraft machine but uh we couldn't use the assets so which is Worldcraft and it supports historical State querying so if you sign a treaty that says hey if I don't attack you for three terms you give me something right that four three turns part is not about the current state but historical State and the progression so that is definitely needed for a lot of types of treaties and deals and ultimately it supports automatically smart automatic smart contract execution uh with evm contracts and finally it's written and go so allowing for much better better and faster game development so this is the infrastructure this is the like details uh it's not that detailed I know but uh I'll briefly explain and then next week we'll have a more detailed article explaining everything you can also dive into our repo on our GitHub basically how how Keystone works is have the evm settings by side with the game engine or the game engine lives inside the evm so the game is really in chain rather than on-chain and these two systems Microsystems interact with interoperate with each other using stateful pre-compiles so the evm can read from the game engine and stores the state in in Merkle trees and vice versa and basically the evm has all of the the social contracts that players Define and they would you know let's say want to get the the number of goals that a player has that would be a pre-compile that gets a specific number right and and you can set state in the same manner uh in given now you're not violating the game physics and this basically serves as one system and has one game tick the data of the game in real time is hello to Celestia SDA and then to ethereum or whichever L1 people choose the community chooses uh for the like uh staking management and and the final payout um and and a lot of other features uh and the game is run by a community of audience a multi-cigar Floridians it could be one at the beginning and multiple and uh basically more and more over time um and if a guardian cheats the setup is pretty similar to arbitrons where if one of the Guardian acts maliciously the community can anyone can point out using the da that you know this this guy acted maliciously let's let's vote this let's another guardian and the multi-sik can decide to do that and basically invalidate the mistaken uh payouts so that's the setup and yeah we think this is kind of the first step towards uh building actual actually robust and interesting fully launching games that can get to social 3.0 allowing a lot of new types of interactions basically like I think the end state will be something like you are pro you're making deals with uh uh you know 500 a thousand players in the same game um in in various magnitudes you can do a simple resource to Resource trade with some you can do like you know life alliances with some others and you don't really have to worry about the renegging or like rug pulling you or whatever right because the system take care of take care of that takes care of that for you so you can truly focus on what's important and with that I think game developers will also have a much bigger design space to design these like games with complex social dynamics it wouldn't just be you know simulation games wouldn't just be physical simulation games it will be social simulation games as well so so yeah what are we doing to advance the plot from now on uh the first one is we'll keep improving Keystone uh we will basically uh publish or release V2 in a couple weeks by taking like we first uh publicly announced Keystone a week ago so we're still in the process of getting feedback in definitely by all means like uh give suggestions like this is a very early version there's probably a lot of problems let us know how we can improve it or go contribute some code to improve it yourself right we are building the flagship game as I mentioned earlier I think like today's launching games are insufficient and we really are waiting for a game that just gives people a Eureka moment right and we're aiming for that and ultimately I think the amount of design space that just opened is bigger than anyone's imagination and we certainly cannot explore all of it so we want to actively support other game developers and teams who have good ideas to build on Keystone to explore the uh you know whether it's like social interactions or some other thesis you have and we want to provide very intense like Hands-On type of help because we know that games don't just succeed because of simple mechanisms but because of holistic experience you need fairly good art you need Capital you need distribution all of that like are very uh like exhausting to think about so the resources we have there will share with you to build uh and more details on that will come next week so our Twitter for sure and yeah that's everything so um open for questions if you guys want to discuss more technical details yeah yes uh one of you yeah yes uh what is your question like why can't it why Canada manage the entire state so if I get your question correctly uh so this up let's say like we're running like the first game is last perhaps anytime between 30 minutes to three days let's say right then uh you know let's say payout that can be settled at the end of the game uh once all of the state is finalized there's a basically a challenge period where people can say oh like let me check whether the game is uh like is is entirely honest uh and once that happens like let's say for a day or seven days probably not seven days like uh the the payout will happen and yeah foreign so uh I'm not sure if I yeah oh yeah yeah you can you can yes yes you can change the L1 so the community like it's a solver roll up so people the community can vote to switch from yeast to polygon let's say right right oh I see uh I think it depends on what you change uh it's possible that you will need to yeah it's game specific yeah it's game specific so the biggest reason I would say is the like we want much better performance than using evm for executing game logic because that's the bottleneck that's the bottleneck that's facing on chain games right now and we want basically the equivalence of that in terms of composability and the security of assets while running much faster games uh uh yeah I think this is our current setup with like we've worked op stack uh and and uh like this this part is the op stack right now yeah yeah so most of the Improvement happens when you basically get in set state in the game engine um as opposed to using like get uh like get code and set code and oh sorry sorry that's no as opposed to um using like ECS uh ECS architecture that's built into solidity and yeah so basically like I I we benchmarked this it's over a hundred times uh I can't remember the details I think it's something like yeah I can't remember the details because there's it varies due to how based on how much data you're you're playing with but it's it's more than 100 times faster yes exactly right oh yeah you can do for for many games like 66 per second so approaching like today's games yeah whereas traditionally with on-chain games our previous TPS was around one in the best case um so that the latency comes down to something like 15 seconds when you have a bunch of players and the system is not also not stable right not for all of the games and there's one caveat to that is let's say when you have let's say you have some complex treaties that need to be checked on a very high frequency basis then you can't have 60 frames per second even if your games engine supports that because uh you might run into issues where like a practical example would be let's say we like let's let's say we sign a non-aggression pack and it's somehow very complex because of detail logic that basically needs to be checked every time you get close to my territory let's say and it checks every time you battle whether you're battling me right and if so the the condition the punishment Clauses is is triggered and if that smart contract function takes more than 160 of the second to run then what you can do is one either to slow everything down to how long that smart contract takes to run or you can have a lore of the game which basically revert some of the state changes if you find there's like kind of a judgment day type of thing where like I think of it as like tax auditing it doesn't happen every time you pay something but it can like check and punish you uh retroactively so uh no I mean this is like we can this is already resolved like we basically run this on top of like a roll up as a service um uh like provider so and and you know either us or them can take care of the gas yeah yeah the player doesn't have to pay for the gas oh spam uh I think there are many this is honestly we haven't uh we haven't run into as much spam problems so I think we'll have to think more detail on that but there's many ways like whether you're uh you have some action point type of system or you can look at like buy wallet and yeah there's there's a bunch of ways together yeah and the settlement frequency can really also be dependent on the game as well like you could have a scenario where you need very high frequency settlement then that could be done that's maybe some trade-off yeah uh-huh other questions or comments if not I'm cured a chill till I think show for 15 minutes so yeah oh you want players to pay for gas uh then we'd actually need to implement a gas like calculation mechanism for the game engine uh which we haven't done but I think that's an interesting thought yeah um what would be the what's the scenario you're imagining for players to pay like does does the player have to pay for every transaction because here's the thing right like let's say let's say in a continuous movement game every Movement Like do you pay for that or do you pay for an intent or do you pay like by a Time basis like every 24 hours um like what what what type of uh mechanism are you imagining um I don't know um uh okay well I I I think that will come with some trade-offs in performance probably um I would just ask like why you want players to do that because to pay for every like little movement um as opposed to maybe like if you're worried that people will rock the system maybe ask them to pay upon the sending of the intent and then reimburse them if the stock the movement is stopped at some point um yeah but today yeah but then it was probably then one week right I mean that's the shared problem with all fraud proofs I think uh or like fraud proof systems so I think it's like it's definitely not as critical as Divi because just there's much more stake at hand um yeah but it could be a very important once the game it's like scales with the importance of the game so um yeah I would say it's fairly uh it's it's not that it's not strongly coupled so it's definitely possible to change one without worrying about the other yeah their possible we've thought about that you can uh this ours doesn't do that right now but I I bet you can make a system that does that yes DLC system audio system like 3DS okay uh yeah that's a very um that that kind of has to do with like ordering um yeah so I think this is a problem that may very well occur and it probably occur uh it's kind of a good problem to have because you already you people are using them intentionally so one way to like throw is to like throw your hands up and make it into the lore be like you know if you make 3DS in some way and like people can still break it in some ways and like without punishment um the second would be like you uh I mean you can run some system that checks for the worst case uh like maybe your when your balance goes below a certain threshold based on the treaties you signed it like it says oh like I don't know like you you it may be possible you can't pay back all of your loans um so you get punished in some other way uh yeah I think it's it's Case by case but uh like I think it's safe to conclude that the sequencing absolute sequencing like ordering is not as important in like the evm or like ethereum as in in games because actually a lot of times it it's just like whoever seems to get first to the server does does whatever uh they need to do um but yeah that's a good question 
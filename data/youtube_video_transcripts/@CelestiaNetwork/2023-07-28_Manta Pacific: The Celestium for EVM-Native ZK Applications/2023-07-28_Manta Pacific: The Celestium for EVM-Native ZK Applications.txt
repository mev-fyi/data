okay so um I'm gonna try to go through these really quickly because I know we're running a little bit uh behind but a very simple explanation here is just you know this is a very fancy car right it's just a it's a Lamborghini and uh this is a Toyota Prius right and so despite being so different in some ways they actually share a lot of similarities and one of the similarities they share here is this company called Auto live um and autoliv is uh it does it manufactures seat belts and so whether you're sitting in a Lamborghini or whether you're sitting in a Toyota Prius you are using an auto live seat belt and the reason is because seat belt manufacturing requires you know compliance adherence regulations making sure people are safe when accidents happen and car companies right Lamborghini they want to build these super luxurious cars Prius Toyota Prius Toyota wants to build these for economical cars that are efficient right and so everyone has what they want to build in mind their vision for a perfect car but that perfect car doesn't require them to build the seat belts from scratch by themselves and so instead they purchase seat belts from autoliv and it's the same in many Industries right so in technology you've got software as a service system integrators that bring together pieces from all over the place and then even Airline seats so Airbus for example they don't build their own Airline seats to just buy manufactured Airline seats and stick them into planes uh and so that's exactly what we're doing uh using zero knowledge and so the problem with zero knowledge is that um it's traditionally extremely complicated for a solidity engineer right so if you're building a decentralized application you're focused on building an nft Marketplace You're Building focused on building some sort of defy lending protocol um you don't know cryptography you may not know rust you may not understand you know math behind elliptic curve cryptography and all that other stuff but that's a problem because ZK right now right and I think in the future of web 3 is a critical piece for actually scaling out a huge user base right if you've got um you know 5000 daily active users sure maybe ZK isn't necessarily important but when you try to scale that out to 10 million daily active users like what Duolingo has then all of a sudden now you've got 10 million people making data points on the blockchain every single day and every single data point is fully public and so that becomes a huge issue right because now it becomes a huge surveillance tool and so ZK inevitably is a critical component for decentralized applications but the problem is that there's not really any way for solidity Engineers to easily build these types of applications and so that's where we come in so we offered an environment where we actually abstract away all that complexity on the ZK side and offer it as sdks offer it as interface contracts so that solidity developers can actually integrate these features into their applications without having to build it from scratch themselves so back to the seat belt analogy you don't have to worry about the compliance you don't have to worry about the regulation you don't have to worry about the safety you don't have to worry about the the materials right like it's all there um through our circuits that are abstracted away through the smart contracts and so why is Manta Pacific that perfect environment to build it's because we have lowered and optimized transaction fees transaction costs for ZK uh related transactions on chain and so if you've ever used like a ZK tool on ethereum it's super expensive especially compared relatively to other applications on eth and so we've taken away some of that cost through using Celestia for the data availability layer we have modified the op stack through Caldera and we are introducing our Universal circuits um through the ZK side and so we call it ZK as a service it essentially allows people to build ZK enabled features directly into their applications only using solidity and I'll give an example of this just a second so ZK Shuffle is actually one of those example circuits ZK Shuffle allows um on-chain private shuffling so what that means is like if you're playing a card game right you probably want to um Shuffle the deck but if you Shuffle the deck without any privacy then everyone can see the state of the deck so everyone can see where every card is and that ruins the whole card game and that's why card games on chain don't exist right you might have card games off chain that bet with crypto but you don't have fully on chain card games but with ZK Shuffle using zero knowledge proofs and hormomorphic encryption you're actually able to achieve that and um yeah if you don't want to interface with the actual contract itself we have sdks as well and so our SDK allows developers to actually build even faster than just interacting with our contracts ZK Holdem is actually live on our testnet right now and in the past um two days of being live they've run uh about five thousand over five thousand games now um around the world from people that are actively playing online on chain poker fully on chain poker with each other uh you know you can try it out yourself and yeah so just to kind of give you an example to uh quantify this so we're building a very simple game a very simple game where we Shuffle the deck and then we choose a card from the top and then before we reveal the cards we um we place a bet and we place a bet we reveal the card the higher card wins basically right so it's a pretty simple game but if you were to build this game from scratch on any sort of evm machine it would probably take a thousand lines of code by comparison if you use the Manta interface contracts through the universal contracts it's going to take about 150 lines of code and then if you use the SDK itself it's only going to take you 30 lines of code to build that same exact game right so the amount of time and effort that it takes is significantly reduced not just on the coding side but also on the mental Readiness side because you don't have to think about the cryptography learn rust learn circom etc etc so it takes a lot of time or it takes a lot less time and it takes a lot less coding friction uh yeah so we're live um and yeah that's that's that cool I think I have two minutes left any questions all right yes the use of use of conjunction in the Universal State how does that architecture yeah good question so there's there's two phases to this the first phase is actually we're deploying the universal circuits as contracts themselves right and so that's going to enable us to just allow developers to hit the ground running from day one but what we are doing is we're um we're essentially building them into the pre-compiles on the execution layer and so in the future the verification happens directly within the execution layer uh and so that can help with covering costs even further so right now it's just smart contracts in the future it'll be on the execution layer cool you're using are you using the PSE ZK ebm or what store or using your own zkevm or how do you store things oh it's not a it's not a ZK evm it's an OP it's op right so we're not using um any sort of like ZK on the infrastructure level or the scalability side yes yeah so we're using so some of these circuits will be using like sumaphor from PSE and then some of these we're actually going to be building in-house okay cool yeah that's that's it thanks 
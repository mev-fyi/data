so from layer one to layer two and on to layer three hi um so so so first there was nothing right um we were all wondering aimlessly and then satoshi showed up and some people were doing some useful stuff but not many and then ethereum showed up a few days a few years later and with this beautiful concept of for the first time allowing general computation on on a public ledger and that was very exciting for a lot of people and this provided two massive benefits and delivered as promised unlike many many other projects a truly decentralized network and um and a secure one so delivered on security and decentralization so that's good um it failed massively to deliver on scale and then you know the years 2022 and now uh repeating the same numbers and 15 tps and now the whole moving from 10 uh 10 million gas per block to 12 and a half to 15 the sort of the gradual erosion there around decentralization and the high tech efforts involved in launching an evm compatible chain with 150 million gas per block or one and a half billion or 15 schmazilian and you know but scale wasn't provided so layer twos were born and so layer two was introduced as this new concept that conceptually says let's try and solve scale and of course the base layer or ethereum was retrospectively renamed layer one and uh we came on the scene in the middle of 2020 our first mainnet uh deployment with starkx which is a scaling service it's a sas business um that supports a bunch of use cases and that does solve scale we'll give a few examples in a second we started out with uh validium where data is stored off chain and this is very pertinent uh an event hosted by celestia we think that data availability is a massively interesting design space and we'll talk about that in a second but we launched starcx in validity mode and uh in valydia mode and we launched starkx in rollup mode one is with off-chain data with a data availability committee the other is with uh onshade on-chain data and as of this week we have a new mode called volition where the choice whether data resides on chain or off chain is actually made by the user not the application at the single transaction level okay um so the nice thing about these starcx deployments is that they you know they actually achieved scale to give you some numbers starcx over the past year has settled over 150 million transactions on ethereum uh over half a trillion dollars um in terms of scale we've reduced say dydx's gas per transaction from 250 000 300 000 gas per transaction to 480 gas so a 700 x reduction these we're talking about tens of millions of transactions on ethereum mainnet this isn't uh this isn't crypto twitter and this isn't some testbed and um and for so rare and immutable for example we reduce the cost of minting nfts from about 200 000 gas per minute to less than 10 gas per minute so a 20 000 x reduction so scale you know that was demonstrated in a very sort of powerful way but a few things were sort of uh not achieved in the process so first of all this isn't general purpose star cache star kick supports a bunch of use cases out of the box so payments and transfers uh spa trading minting and trading of nfts um perpetual contracts now a new use case called d5 pulling they're actually folks in the crowd here building a business around that but not general purpose and not composable you could think of these dark x instances as these islands run by these businesses dydx so rare immutable no composability so this beautiful vision of composability was not achieved and of course not permissionless you have to sign a contract with us there's an actual legal document in place so all these things were not achieved now for starkx we developed a programming language called cairo there were about five druids on the planet who could take a given computational statement and translate that to a set of polynomials all of them on the starkware payroll guess what they were terrified of their own occupation because when you said how about we modify the business logic from this to that they said well let's not do that anytime soon okay so or maybe the other guy can do that i don't want to touch the uranium and the core of this nuclear reactor and you know it's just too dangerous we need a programming language we need to turn this from sorcery into just plain good old programming and that's when cairo was born and starkix is powered by cairo now the minute we had cairo and we said this thing is becoming increasingly higher level increasingly more uh uh secure just by merit of sort of being battle hardened uh the obvious idea was to say well let's externalize this to everyone everywhere and so starknet was born we announced this in january of last year the public test net went live in june of last year and the alpha went live on ethereum mainnet in november and it's getting a fair bit of uh of attention in the ecosystem these days and this does give it gives general purpose it has composability and how it well right now much like our our friends at uh arbitrary and optimism the first uh with the proverbial crutches the the first phase of the network is in fact permissioned uh we want to make sure that the whole thing doesn't fall apart but the intent is within a few months time to make it truly permissionless the public tested by the way is permissionless for both deployment of contracts and sending transactions to the network um so all these things were achieved but still stuff was missing okay what was missing um so first of all scale is never the thing where you know no one ever said okay that's perfect that's enough skill for me uh thank you very much right um bandwidth being sort of the obvious uh example um but beyond that i think it's control and privacy being one example of control so how how did this whole thing sort of evolve in our minds how did this realization evolve in our minds so often you know when the narrative of these things you come in and you say well we thought about a and then we realized b and then we you know said c is really a forced move and reality is far messier than that and the reality for us was that a particular project came and said we want to do uh derivative trading we're in exchange and we said that's terrific uh you know the the you know we can build for you something like what we built for dydx perpetual trading perpetual contracts and they said no we want every form of you know all sorts of derivatives and we said well that's terrific go do whatever you want on start but you know you don't need our permission for anything and they said well the problem is that uh we're an honest to god sort of regular exchange and there are legal contracts god forbid with banks on the other side and those are denominated in that pesky fiat called us dollars and we can't have revenue coming in in dollars and costs fluctuating with uh gas prices they said if this network of yours is anything as successful as you expect it to be you know there's the you haven't sort of invented new physics this is going to supply and demand is going to dictate the prices of of gas here and we may not have a business and so at that point we said well how about you run your own instance of stark net okay so think of this as a wall garden okay and uh the beautiful thing about these metaphors is the minute you have the metaphor and you start using it it becomes a very sort of relatable way to sort of process these ideas so we started talking to all sorts of folks about this and it turns out that this concept resonates in a very powerful way with web 2 companies and web 2 companies they understand that something massive is happening okay but this kumbaya view of uh and excuse the kumbaya folks here above you know everyone going full unit swap and it's not going to happen it's not going to happen not because we don't want it to happen it's it's just not the way of the world there is companies exist for a reason and and economic forces are in play and all these things will continue to exist so control for companies is something that they need they need this because the regulator requires them or their business partner or their users um and uh and so that's where layer three was uh was born now the one thing we can immediately do in terms of layer three is move the stark x instances up there so what does that even mean so stark x much like the public stark net the transactions process there we create proofs and those proofs are verified on ethereum on layer one if instead of verifying those proofs on ethereum you verify those on the public start net in layer two conceptually you could say well this thing just moved one layer up okay and that's exactly what we intend to do this will be in production in a short number of months the the poc in-house is already done and so that's one very interesting thing but just like the the anecdote i told you you know about the sort of the birth of this idea uh this will also allow for private stark nets to be born and private stark nets will exist for single companies or for all sorts of consortia of all sorts and and we expect a lot of experimentation to go on there because say in the context of data availability the stuff that celestia is working on this is the space where you can you can knock yourself out you can move faster than the public chain you can move slower the public chain you can do all sorts of alternative stuff without building sort of the broader uh consensus that is needed for something like eap 1559 and we we firmly believe that that kind of experimentation is actually critical for this ecosystem to uh to succeed okay in my opinion if that doesn't happen then this this whole experiment will fade into the haze so you know of course you can have multiple instances of these things as many as you want you would have you know all these desired properties you can of course recursively apply this and say you know let's go higher up if you want there are of course trade-offs right the final settlement on the base layer gets delayed the further up the stack you move and the final step is to basically say well just like we're settling on ethereum just like there are trade-offs in the context of data availability for different applications so on and so forth there are going to be trade-offs in the context of the base layer not everyone and everything needs security the security offered by ethereum and we think that other layer ones are going to eventually adopt these tools i think that the basic uh the the solana approach of building more lanes is um well just like we see with highways that sort of typically ends in tiers and so they need proper scaling solutions in other layer ones as well and i think that's sort of the way things will unfold so this is our view sort of our story where we came from how layer two was born and now we're sort of moving to building out these layer threes in the uh in the coming months and years uh that's it i'm happy to answer any questions any questions aha all right take it away thank you very much for your presentation uh at which layer does it stop i like it you go um it there is no so what does it mean a layer three in this context it means that i prove a computation that takes place at layer three and instead of verifying that proof on in by a verifier smart contract on ethereum layer one i verified in a smart contract that's deployed on the public stark net now you can build this as high as you want you know at some point the question is why are you doing this sir but but do you then think that layer 3 3 is sort of the general optimization point for layers or it's it's i say i say this with a fair bit of caution and these things go in waves right so zaki a few years ago he described basically this notion of you know these different ecosystems have different names but zaki in 2018 i was new to this space this view of of these autonomous environments and the need for those you know he articulated that several years ago and then sort of everyone went sort of fully unit swap composability is the only thing that's the only and i you know when we started servicing dydx some of our investors who actually became investors of dydx later said the wall garden once again that metaphor that's that's so 1990 that's gone there are no walls and it turns out there are walls and sometimes people you know want them at different heights um but that's sort of it this sounds like a human need uh the metaphor i heard uh from one of the web 2 they refer to this as noisy neighbors i thought that was a cute uh expression they don't want noisy neighbors thank you yup i see you hold on from l1 to l3 what do you think is the most under-appreciated impactful economic force what is the most underappreciated economic force something that might be decisive so say like in coastal's theory of the firm how he identifies transaction costs as leading to large companies and small companies in the dynamics there and why everything might not be decided on an open market you might want to internalize transaction costs so for instance do you think there's something other than transaction costs such as privacy mev that might be decisive in the l1 to l3 landscape or the possibility of higher level roll-ups that we're not quite paying attention to yeah i mean i i i think that the the the the basic statement around uh this will all exist on a public chain first it was layer one then it was this will all exist on a layer two period no modifiers or qualifiers about it and people will say well there is a way to achieve privacy you can do true zk roll ups you know like our friends or at stick have already implemented yes you can that is true zk uh privacy but in many use cases there are all sorts of other grades that are of interest and value and far simpler and computationally more efficient etc and and those that level of control control is the word uh is is offered in layer three now how this will unfold in terms of additional layers i have no i don't know clue beautiful thanks any other questions hi so for projects that are considering deploying on their own private stark net or on the public stark net um beyond just having you know the scalability primary reason that you discussed what are the specifications and factors where you would push a project um towards one or another so um i'd like to think that we don't push them meaning meaning that that we're truly agnostic and i think the intent is to build a software stack that that turns that into reality meaning it would be perfectly fine for you to spin up your own private stark net and then if one day because you've concluded that composability for your business is in fact not terribly important interoperability is good enough you don't need the synchronous calls the async stuff is fine and in fact you have a beach head you exist and there are three but you have a beachhead which is your smart contract on there too for the stuff that you do want to be composable and then your business changes and you say well i actually need to be part of the public network here and um you basically plug the logic everything is implemented in starting contracts you can at the switch of a button uh become part of the public network so so the the intent is just to to reduce those switching costs to the to the greatest extent possible roy thanks for the talk um could you talk a little more about recursive rollups and hyperscale when it comes to l2 and the limitations that exist sure so um so recursive rollups are actually intimately tied to this concept and i'll explain the concept of layer 3 and i'll explain why right now for example we're minting batches of 600 000 nfts in a single proof which is a fair number of uh of nfts but that requires reasonably powerful machines in the cloud to do so and that is of course conceptually you know this is sort of goes against decentralization you'd like to sort of move to lower requirement on hardware you you'd like to cut down latency right when i when i batch six hundred thousand transactions two things happen a it takes me time to batch six hundred thousand transactions two transactions came in and another two it's gonna take a while for six hundred thousand to accumulate okay that's one thing the other is that once i have 600 000 transactions proving that is a very big computation so generating that proof takes a long time all this builds up adds up to significant latency which affects the ux so for recursive proofs what you could do is you could take let's say a hundred thousand transactions instead of proving a hundred thousand transactions in one proof i'd say let's split it up into a hundred batches of a thousand transactions and so we now can create in parallel and the emphasis here is an in parallel by much smaller machines um 100 proofs and these proofs from a computational they prove the same computational statement i verified the transactions in this batch they're all they all abide by the logic that we want to enforce here now you have a hundred proofs and now is the recursive step okay now is when you say well let me prove something else to you i'll prove something that actually has nothing to do with the application specific logic i'll prove to you that i have verified 100 stark proofs for these 100 proofs that i've generated okay and now i have a single sort of masterproof and of course you can do this in multiple steps so this is how recursion would work and this is something that we intend to deploy very very soon this is my stand-up meeting in israel now so uh reminder so um yeah and so this ability is of course needed in order to support uh the verification of proofs generated at layer three on the public starting yeah so these things sort of go hand in hand thanks yup uh that'll be the last question by the way we have to move on to the panel cool thanks um so in your diagram you've got l3's as sort of the the hyper scale point but um to the question you answered just earlier um if composability sort of continues to be a thing very valuable more of these private statements start to move on to l2 do you think you will do you think that's a concern in the long run that you will ultimately need to make the l2 the public start net sort of ultimately have be the place for all the throughput instead of effectively having sort of inverse upside down pyramid where you've got slow ethereum then public starting then hyperscale at the top with that middle layer become really fat fat and what's yeah like i i i i think i had you until just the very end the subtext i don't like it oh oh oh but i mean how about things heavy-bodied and right an asterisk yeah he's calling he's referred to as heavy-bodied so um i'm not sure i understand the cons fat in what sense as in so you're burdened with a lot of computation correct because of the desirability of composability at the l2 so i i don't know what the equilibrium will will end up being so for i for one i think we at starkware are sort of of the opinion that ethereum eventually will be the place where proofs are verified period that everyone else will be priced out of the market like the the actual transactions that they want to conduct there now whether there will end up being a public stark net whose purpose is to support the layer threes versus a public start net which is sort of geared at composability i don't know well we'll see thank you all right thank you all right thank you very much everyone cool [Applause] 
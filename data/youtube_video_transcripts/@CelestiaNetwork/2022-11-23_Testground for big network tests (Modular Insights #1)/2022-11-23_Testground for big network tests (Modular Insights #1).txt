today's news session is about test ground the tool that I'm a super stoked to tell you about and uh especially the topics of today is for uh big Network tests and uh to give you an overview uh so far in in our like playing field Community um there was not a lot of I would say attraction moving forward what is happening how you can basically do the testing there and the vanilla approach of how we do testing I would say the web 2 world or whatever is to have this big bucket here that deploys everything that it needs to be tested and we kind of get used to that mainly uh in integration testing like in Celestial node where we have a Celestia app inside deployed by a small instance and the swamp distance basically knows when to deploy a light or a full load and a bridge node so that's everything up the big minus of it is that it is not that scalable when you want to take it to a bigger picture and this is where fishcraft comes in unfortunately uh test ground is not very I would say uh beginner friendly written in a sense that documentation is kind of lacking uh so I would like to play the analogies game to do to today so you can yeah stay uh on sale management so to start it to start let's think about designing big Network tests as directing the movie and especially there's one specific movie that I always think about when I'm doing test ground tests and let's imagine right now we are uh Christopher Nolan and we want to do darker we have this awesome project where we're thinking about how to tell a story where there were a lot of parties a lot of parties involved and we want the viewer to have a different perspective of the same instrument and this is important because when we look from a different perspective of a human being we feel more attached and understanding of what basically has happened and the same falls down to test ground why right now like without the only team that is doing this test why it is making so much sense and uh yeah let's continue uh the phase one is how you want to tell a story so a test gone follows you to the same uh category where we have the Manifest on Top This is where we want to know what characters do we need uh like in dunker if you have a pilot you have a soldier you have a captain and you have a bunch of marine soldiers and um the second question that every time we want to answer ourselves ourselves in testcraft is what do those prototype characters need to tell the story uh for example a pilot needs to know that um here playing and overall all characters they need to be seeing that in one location so there's a bunch of prerequisites that all the characters should be aligned and same we have with manifest uh an example here uh when we are doing data availability sync across digital full node and white node we want to make sure that all of them are aware of those parameters to be kind of like in in the same set and here we have execution time how much we want to execute the test we have latency bandwidth so we can pinpoint and say that some participants will have less bandwidth and more latency vice versa we want to make sure that while there is how much they are uh how much persistent fears The validators Have and uh hear the submit times in message size is where we are knowing upfront uh how much data will be put into the box so we can increase the size this is the whole story demanded and uh imagine like here I've written down Bridge full White what happened wrong this is kind of in the set of tongue curve just imagine how much like every Soldier or Captain knows how much of the Army is on the opposite side so this kind of also work in the set and this is basically the Manifest it is I would say the overall requisites of what we need to know and the role here as the last one is where we want to take the perspective so the test ground we don't have the volunteer that's why we need to combine different roles and know from which point we are looking at the test and the phase two as we have Christopher Nolan we want to do the casting this is where we have composition and the casting falls into three big groups first is global uh for example we want to film it in France uh we put down in France the Thundercloud itself on the beach which they uh to start filming it and the groups uh it's what resources each of the groups need and which brands they need specifically for those and the same service this is where everybody is confused when they're learning tests Brown is which specific shot of the time that we're doing so imagine it would be kind of strange in a movie where you see a different perspective of actors during daylight time and then suddenly you see a difference seeing where uh Tom Hardy is fine when they're playing tonight it will basically make no sense and we will just lose the plot this is why sync service is kind of the same it gives all the actors all the roles the Baseline where they are in the progression of the movie and on the right I put down the test graphs did you see the global one where everybody is aware of how much cloudiness they are almost free cells full notes and right notes which size is the message side this I would say important for violators and uh yeah about that is it will be important to have persistent peers and everybody know that this movie will last for 10 minutes and the advantages you can see here uh there's a bunch of Builders it's just implementation detail what you want to know is that uh there is latency and bandwidth down below of each group and we have four groups uh first is father's second one is Bridge codes third is four nodes and fourth one is collected I haven't put down which notes here for the sake that for the sake of readability but yeah just bear in mind that Bridge notes are also shown in the composition file and as you see here uh we are allocating the amount of CPU and memory for each of um for each instance inside that group meaning that in the groups of file letters each founder and we already know that the 45 letters each file data will have at least three core cpu's and four gigabytes of graph and each of them have that here is zero latency and the bandwidth is 256. all the same is for full nodes uh specifically at White House you see here at this example we have 100 light bulbs in this group and each side note will have two CPU four gigabyte Drive uh however they only have bandwidth of 100 and we have an assumption here from White Light perspective that we will only get to the block height of 10 in this test case and then yeah whatever else is uh will be decided later on so let's move further uh to the phase three this is where it is from the perspective of our go files the scene this is where we can dive in into the actors perspective and know what exactly they're doing but what words should they say uh how they can use the sync service to stay alive but if it's 2 p.m at the day then what what is happening with them and what they say and especially this is very important is what is the pivotal moment from from their respect so as I said uh for a ligo to get block out of 10 the pivotal moment for the right Road will be uh if we're designing the situation here is that we are keeping up with the chip and because test case itself is kind of easy same to the uh said a full note and additional yeah we can also assume that the whole seat should be like that for a different perspective and uh yeah let's look a little bit at the code uh to show you the true colors of uh sincers I would like us to imagine more uh I would say a more to real life uh test case where a light note is syncing the past service it's not sinking it's not thinking the current headers I mean that it is starting from Genesis but let's say we'll start from uh we'll start from zero but the chain is already like the 12 height 100. so what will happen from from the dot go fast perspective as you see here uh first line we already see the barrier where we are waiting for events to be fired at us saying that we need to be aligned that this node has reached some blocks some blocks production let's say here it is 100 and before if if the block type hasn't been reached and the result hasn't fired that event all of Christians we don't care you see here how agnostic it is this code that we don't care about which amount of the original how many of them should be et cetera Etc we just know that some amount should fire an event and we will not go further if we won't reach that state later on as let's say 100 blocks have passed and uh 30 crystals and said yes we all reached to 100 blocks then we start creating so like where we are saying that defaults yes now we can start our light down and uh let's get the pivot alone for the light bulb is we want to reach to a specific height this is the beautiful moment for the live note and we know that we can Define that in the composition which was the casting and here you see we are doing two important checks first one is that are we still thinking if we're still thinking in the past meaning that we haven't released uh to the latest block right then it means it's a failure and the second chapter which is very important also to us from a lighthouse perspective is the dance status meaning actually are we dancing today this chain so we first asked keep up with the chain as it is uh passing basically we have passed that we have dust the past tenders quicker than the new blocks to be introduced and we also caught up to the latest two those are the two chapters and the beauty of this Pope as you see here there is there is no I would say specific mentioning of how much life and this is this is an awesome uh point where you can Define let's say you have 30 results but you today you want 100 light notes and tomorrow you say I want ten thousand like ones and this exact same code will work because we know this is this issue about it we can go back to the casting and basically uh imagine I don't know duplicating uh 10 000 Tom Hardy's and say everybody will fight play at the middle of the day and you need to do dog fighting in this guy and the premiere how it should look uh let's say we are now scaling up as uh I would say every viewer is uh test ground itself is I would say the pinpoint mechanism how much actors and how much roles we want inside the environment uh water and the cookbook is how to position it's fantastic who is going what day and inside the environment pattern you see that every yellow outside Circle has its own axis and what they should do with all the scene shooting that they should be doing and the sync service is kind of like our I would say da layer I mean DNA Network it's a Halo Network that controls at which timeline everybody is in and each of the yellow circle has its own test case where it is doing XYZ to see what is yeah going there um I would like here to uh to mention that we'll have a demo section and uh yeah I want to do the demo like right now and continue on the lower session outside so uh as you see here it is really simple how you want to execute test Bound in kubernetes cluster a small node yeah could you increase the size like a little bit sure is it better yeah it's just coming through blurry but yeah that's better okay I'll just do this kind of thing yeah let's go figure cool so here is our test case uh the composition that we're going to execute and just to give you a good tldr here we're saying we have 40 bio data sets uh with 40 pitch nodes so one per one ratio we have 24 modes and we have 100 lifelines and uh what I put down here is that everybody except for right node has 320 megabyte a megabits of bandwidth and the right door has only 100 and uh yeah I'm just trying to execute it because it will take some time and uh I just want to walk you through what exactly is happening like right now as you see here it is writing something like run is cute with ID this what will happen next is that we have here the dashboard yeah it looks kind of function right now bear with me it'll be better as time goes by and uh do you see what this ground is doing here I'll just make that's a little bit bigger Tess Brown is setting up all the all the images all the actors that it it's just preparing the set to be right uh it will take some time as I see that our awesome eks cluster has scaled down to save costs Alex awesome job but I think right now everybody should like a little bit for this so now as you see it is very I would say a straightforward dish from kubernetes point of view is that you can use I would say Cube cuddle to see what is happening inside and you already can see that yeah it is scaling up to a ridiculous amount but I don't know why we are not having this bit notes okay people take some time guys uh I'm I'm in the hands of of Tesla and kubernetes busted yeah somebody's waving uh hands this will happen last that's pointing for the demo it's scaling up but it takes around three minutes to become ready just so you know right because I'm watching in the background that it spins shitloads of notes but it takes a bit of time three minutes roughly okay so then uh to give you some overview what is eks that's really has asked me yesterday um it's the but imagine that it can scale up and down the amount of Parts uh as the test case needs so today we're executing around 200 uh pots meaning that 100 light bulbs 24 notes 40 results and 40 biod letters and uh the cost is scaling it up to fulfill our test skills but let's say after like uh 10 minutes of execution the cluster sees that it is kind of running without any uh necessary usage and it just scales down automatically so yeah it is kind of like an awesome disinfectant Alex just finished I'll say uh this week and uh yeah we Alex we call if correctly we uh just had to talk with Laura yeah I'm just expected to achieve that and Lauren is uh default from protocol apps and he's trying to help us out with this and he's also trying to live always 3D models so you see here what um is happening is that test ground saying oh I see that you want to fire up to 100 instances for the case DSC and uh this is I would say very interesting point of view is that PKS sees that it needs more power so it is scaling up and up and up like basically I would say and here we already can see that we have the status of how much actors are ready for the set so let's say yeah now it's 64 out of 200 already and uh as far as I'm concerned we still need some time to leave it to run out because oh yeah you see here again it is trying to scale up and it's filling up so Alex is right we just need to wait still um what we will do next is I'll show uh there's a secret I've prepared like a lot of Terminals and switches I want to show uh the perspective of the test plan for example from uh two boundaries one Bristol one full node and a light and uh this test case just to give you an overview of all the while that is they will submit um 180 uh 180 kilobytes of data which will mean we will have around 7.2 uh megabyte block meaning that the full node and light node will see it as 256 Square size of course so yeah it's still it's still still kind of trying to speed up Alex will it do this or we need to do another another one oh no it's it's called 78 it's still scaling up it's still requires more I I don't know how many did you launch uh I launched 200. right it's still updating capacity okay so while it's flexible sometimes it's not the most agile thing I can I can still continue on but I explain it how I think this text is a bit small for both so it won't work as this is still happening I'll just go here let's explain more details what is happening so as you see here the Builder uh I said it is a little bit of information detailed still uh all the test cases that we've written it is packed into a Dom container and that laptop container is spinning out to what the composition file told him to do meaning that if the test plan says Hey fault I think you are falling into the group of five nodes the docker file already knows what to do it just calls the dark profile that will described as test case it says yeah I'll just execute to see that was defined for me so this still going oh yeah nice as you see here finally delete it now we have 200 instances running which means for us if we go you cannot the pot we'll just see a ridiculous amount of file that is light notes ridges full loads this is awesome a really great height and uh let's see let's see the logs let's see the log stock is happening there so at the bottom up here what we will do is we'll just do I would say usual stuff from Twitter perspective and you see here folks we already at block one I'm a little bit sorry for the messages that you see here for influx DB uh it's kind of like still in progress but yeah we're already generating blocks so all 40 validators found each other and they're trying to reduce the loss let's go and look from the perspective of Aboriginal it is also a really interesting perspective what is happening on inside I'll just put down here code so we're already at block height three and oh nice so here we already have a bridge node that is split up and you already see that yeah it is already sinking from height so as the bridge node is running up and we see that uh height is already four what would be interesting for us is to actually start and look at the folder because there is some alphabets here I haven't looked at myself but let's do it together so the full node you see here in debug mode so it's already up and running which is kind of fast well yeah we have a full note and to give your perspective uh a month ago or two months two months ago powerful note to Dash a 256 block um yeah 250 256 website it needed around 60 to 80 Seconds and there's still some calculations that are in a separate page and today we can basically say that same use case what is the outcome is it better is it first so let's wait for the new blocks came up for the follow and see it ourselves and also let's put down here for the right note so blackmail is also fired up at 100 short yep really this is your logs that will do this that we have in the latest release I put down in debug mode so we can see a bit more so here's the Moment of Truth we here at the full note we see that we're treating the data Square for the block height uh for the block height five yeah and let's wait for the moment to see how much that costs for it because as far as we can see we are generating 7.2 um yeah 7.7 the black box now here or we have a little bit less meaning that we only have 31 transactions so something happened on the film 256 and where is it let's try to find it oh yeah here we have it so now it's a little bit better meaning that it was around 60 optimistic and 80 pessimistic now it's just 57. so some changes happen 256 was kind of like a bummer for me to test but now as you see here with big Network tests and then just to use my own eyes what is happening and uh yeah it's kind of what it is still as we are following up on this test case you see that uh there are a lot of different stuff that is uh making life not easier and what I wanted to talk about is first imagine right now I need to go through all these 200 uses of to see the Box it will be basically closely invariable and the second part is doing it once for example as an experiment is kind of okay to go through all the logs and read through and know what is happening still yep you see here height 7.7 seconds so it's getting better uh still we know that the this is the this is the point where we need automations so and the second part is of course how we can get rid of a lot of um errors along the way that we are having so yeah this is the issues that we have for this day but for the sake of doing experiments it's kind of like a pain that we can do so just to return uh to this execution you see that it's still running and already some of the participants have finished and some of them are still running meaning that we already can know that some of them failed because if it is succeeded but we're still not reaching this test case is still blocked by 30 or 33. so we already know that something bad happened along the way so this is where the interesting part coming comes in for me but it's kind of a time consuming is to learn go from the group or specifically instance file at which specific point so yeah you see this is kind of cool cool stuff you don't need a puppeteer you can just look at different perspective of an instance and the decision on your own so let's move a little bit uh from the hands-on experience uh so the ideas that we have uh I've been discussing this on during the onsite how what is the path forward and uh here are all the talk from perspective of testing as from devopsy's Office TV work and I didn't want to overload today's team knowledge session with this uh first one is the enrollment introduction to testcraft meaning that um we want to see how the marginal division is kind of it's kind of disease test because you already have all the basics of the basics of DNA better set up for you so from my point of view I mean from from what I think is that if we can give the devs the tool to just say uh spin up this Roman uh I don't know instance inside a full file data set with 100 boost notes and just follows by I don't know 300 uh close to one gigabyte of data what will happen then can my current implementation design work or not and the second part is was the shoe means working I would say that geekbench this idea was born after uh Gabriel and I were discussing how how much uh TPS we have on an L2 with four megabyte blocks of celestion so saying that one roll-up is occupying all four megabytes the how many GPS will have now because we can post data on test ground we can safely start to do that I mean the nearest we should and of course to make it more I would say uh giggly and funny I would say that it will be very funny for me uh to do how many GMS we can have for consolation one because uh testing is not kind of like uh just about numbers it's more about having fun uh in some cases and so far is test ground yes I was having a lot of fun and I think that From perspective to just know uh like in Google back in 2012 they were counting the distance between Earth to moon in Paris so you can kind of have the same people but with our own kids please still the challenges ahead you see that we have log analysis issue and uh the clustered out to be a little bit the question mark meaning that today we have a talk that protocol Labs maintained at Lauren Center is the main uh he's kind of like the guy behind right now moving the test run forward and uh yeah he already approached uh in the cult he already asked us about do we want to basically collaborate with uh purple labs and the apartment boxing code because we kind of know what can be done better and how we can basically tell us the roadmap for test ground as a public pool and the second and the first point here is cost analysis also I have a lot of ideas and seeing which is basically by ex colleagues who are willing to do this after they saw test ground at the certification Center because of a wonderful what is the extraordinary uh in the OSS form and uh yeah Lauren also knows this issue and uh he's very keen to learn more about what approach I took basically soft issue of uh filtering out specific officer you need from a test run but you have yeah a lot of participants shouting blocks that and uh yeah I think that in a couple of days uh we'll be more in touch and started and yeah have all these questions how we can solve that and uh I think this is all uh my main motivation for today is to bring some fun and uh hope that it was a fun storytelling you learned something new today and yeah thank you um I just I wanted to say um like I know this like presentation was extremely technical but um I don't think like anyone appreciates just how heavy of a lift this was to pull off and how few blockchains if any at all perform this kind of testing um like there's very few projects out there that have actually invested this much time in into like Network level testing and spinning up like creating these like uh scenarios where you can actually do these kinds of real world tests it's extremely valuable and it takes a lot of time and a lot of energy and it's it's like crucial to be able to like catch like we've caught so many different weird bugs inside of test ground now that has made it completely worth it like completely worth it and um I'm saying this because I come from like a testing background like I I was working at white block before and I'm like a big fan of like Network level testing and simulations like this um and back in the day like there were tons of blockchains out there that were like uh the only kind of testing they would be doing is just like spinning up test networks like we were doing with Arabica and Malaki and all that but it's very difficult to test for particular scenarios um in that kind of like controlled like to have a controlled environment where you can do something like that um and at the time there were just no like no projects that were willing to invest a time or like thought that it was important enough to do and of course like this leads to failures um in in the real world and and hopefully we can like create a more robust Network because of this like it's it's honestly like so immense of a lift like I I so appreciate the work that you're doing via and and Alex as well like this is awesome yeah I'm sure and like coming from academic background like these these tests were kind of common when doing scientific like if you come up if you're academic you come with a protocol you kind of expected to do these kind of tests so I was kind of surprised like coming in like coming to the cosmos space and dynamic space that in the industry people weren't doing this kind of stuff um so it's pretty cool to see like um like the site the tests that actual scientists do and Academia are being actually applied to Industry as well yeah like uh just to be so excited for your own folks uh we've been trying to be active to the test one community and uh yeah uh people do appreciate how they're pushing forward this whole big Network test idea and uh yeah uh regarding the blog post uh I think Mustafa we need to First do ship talk to construction as you see there is still a big bus stop and uh yeah let's think about maybe I want to write a blog post about block group instruction because today when Lauren asked me directly why we so much lightnodes I explained to him the test case if he was like what you are pulling this off and I said yes we have a paper that stated that you need this amount of flying clients we need to do that to say that the software implementation is not failing this is all I really need to do because like holy crap I mean even I think like even before that like the fact that there's testing like thousands of like clients or hundreds of black clients even that itself is a is interesting uh because like most chains don't have like clients in the first place let alone have testing infrastructure for like clients um yeah so moving forward um just to I would say that uh we want to do the tooling for this better as there's still a lot of room for improvements uh yeah and uh I guess we can just yeah discuss it after the call uh purple labs are really key into us uh and mainly they want us to at the point how different teams can learn from doing big Network tests because they already have some requests even from from new teams directly there are so many protocols that are doing something and they need this kind of knowledge from them okay if there are no more uh questions I guess yep uh then let's let's wrap it up folks I hope you have fun today and yeah see ya 
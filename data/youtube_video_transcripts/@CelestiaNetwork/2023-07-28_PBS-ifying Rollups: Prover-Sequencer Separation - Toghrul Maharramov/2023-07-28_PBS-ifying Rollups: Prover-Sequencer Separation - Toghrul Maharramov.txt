hello everyone uh before I begin I wanted to thank vitalik and George's for warming up the crowd it's really nice from them uh so strangely enough I'm not going to be talking about roll-up definitions today I'm talking about something else so my name is tall girl I mostly posts on Twitter and sometimes pretend to do research at scroll and today we're going to be talking about pbsifying Roll-Ups prover sequencer separation so you've probably heard about zero knowledge Roll-Ups or for the starkware folk and the crowd so they understand validium validity roll-ups uh so you have sequencers and you have provers in the system and sequencers perform the role of of ordering and then the approvers perform the role of computing the validity proofs for the given order and the way they work is the sequencer submits the batch the patch is also propagated to the proverb approver submits the Loyalty proof and voila you have the finalized State on the layer one and so why should we decentralize because in l2s and roll ups specifically you don't really care about correctness that much because it's already enforced by the L1 Bridge so why would you decentralize it makes more sense to just be centralized and be efficient so there are multiple reasons why you would do that so one resilience let's say if your sequencer fails what happens then if there's no backup or in many cases there's no decentralization then you're stuck and waiting for that sequencer to come back another reason why you would need to decentralize is real-time censorship resistance so while L1 Bridges guarantee long-term censorship resistance for a lot of applications that's not enough for example let's say if your app depends on Oracle updates and you're waiting for a long time and the sequencer is censoring you you're basically screwed in case there's a lot of volatility there's also throughput which is an interesting one because it might seem logical that a centralized system is more efficient because you have less overhead but in case of zero knowledge Roll-Ups because you can paralyze proving you can actually increase the throughput by decentralizing the provers and that's what I'm going to talk about later and so what are the requirements for a decentralized rollup so first we need to minimize the overhead it doesn't really make sense to add drastic overhead and make it really clunky and very complex it needs to have fast pre-conformations because if your lab has the same finality time as the L1 then especially in l1s that are not very fast it's not a great ux it has to be provable on chain so what I mean by that if you use some sort of a mechanism that agrees on off-chain ordering you need to be able to prove to the bridge later that the ordering was agreed upon via a certain mechanism so if there's not there's some non-determinism in the way you agree on the ordering it might be possible that basically the bridge might diverge and so we need a way where you can prove it on chain that it actually happened and finally which is the reason why I'm giving this talk is balance incentive distribution so in and I'll explain why it is important so why is unbalanced incentive distribution an issue so since sequencer is in the protocol are in charge of the ordering they get to keep all the Mev profits and it's likely they're in roll ups the med profits are going to be the large share of the total protocol Revenue and if that's the case then what's the incentive for protocol participants to become approver because if all the profits are collected by the sequencer then I'll rather become a sequencer but in case of ZK Roll-Ups we actually need provers sequencers we need a few but we don't need that many and so we need to incentivize provers and that's where PBS or proposal Builder separation comes in so in a proposal Builder separation proposal is installed either responsible for proposing and propagating blocks to the network and the Builder is a set there there are a number of Builders competing one one another in an auction to have their candidate blocks selected by the proposer to propose to the network and basically the whole point of PBS is that it outsources the computationally Intensive task of creating a optimal value extracting ordering to some specialized nodes that can actually do that efficiently and well in our case we don't have proposers and we don't have Builders so what should we do so we have prover sequencers operation so on top of doing what PBS does PSS also ensures that protocol generated revenue is relatively fairly distributed with the provers because as I described before the sequencers by default get to keep all the Mev and as with PBS there are two types of PSS there is enshrined PSS and external PSS and the role with the sequencers is essentially to emulate the role of the builders on the L1 and the role of the approvers is to emulate the role of the proposers in PBS and so these are the steps in PSS and then Shrine PSS so the sequencer bids in an auction the prover selects the highest bidding thing the winning bidder reveals the contents of the block the sequencers reach consensus blah blah blah that's it we have the ordering well the benefit of this is that it doesn't have a lot of overhead because we don't need a lot of sequencers the consensus should be relatively efficient and therefore it should be relatively easy to run but the downside is that it actually creates sort of a PBS inside PBS because I might be a sequencer I might be elected as a sequencer but I'm not really good at building so I'm incentivized to Outsource it to someone else so it's possible that you can create a market where sequencers Outsource it to someone body else which creates this Loop in which the value is leaked to some external parties because the sequencers just don't want to do it internally oh now it's working uh and the second type of PSS is external PSS and it follows a similar pattern so sequencers bid in an auction approvers select the highest paying bid the winning B bit is revealed blah blah blah blah blah blah but in this case Proverbs reach the consensus and with external PSS sequencers don't actually exist in the protocol the protocol doesn't know about them there are some external parties that proofers deal with and they can even avoid them and build the blocks themselves but obviously it's unlikely to happen because approvers are not good at building blocks and extracting value so they're likely to Outsource it and the advantage of the scheme is that it doesn't really require do the Instinct roles in the protocol and therefore it makes the protocol simpler and the feed distribution much more simpler so you don't have to deal with like two different models potentially two different staking models etc etc but it also has a massive downside it has quite a big overhead because the idea is that you should have a lot of Proverbs and if you run the consensus amongst approvers it's gonna cost quite a lot in terms of networking etc etc there are possibilities where you can for example use comedies and do random sampling and do that but the security drops that way and basically you might get into a situation when you have where you have a lot in this video whereas if you use the entire validator set then it's much less likely that you're gonna end up having a liveness failure so those are two options and we are not really sure which trade-offs are better and therefore the open question is I'll leave you with an open question to enshrine or not to enshrine that is the question thank you very much and if you have any questions feel free to ask [Applause] 
thank you for coming uh everyone and we hope you're having a good time at the modular Summit uh today I'm going to be going over how to run a light node first I'm going to go into a little bit into the architecture like of the different types of nodes and then we'll learn a little bit more about what the light node is used for I guess first I'll introduce myself my name is Josh I'm a Solutions engineer at Celestia labs and Celestia Labs is building Celestia which is a modular data availability layer one blockchain I was previously a developer Advocate and teaching assistant at my last companies or projects I'm a huge fan of like the good morning or GM like Emoji or just like the use of GM in this like weird crypto world and then I guess I got my start in something called developer Dao at the bottom there and this is a decentralized org that is really just like a place for people to grow their development skills like in the web 3 world so first we're going to go through what a modular blockchain is what shared security is and then a little bit about execution and settlement and how that fits into the picture with Celestia then we'll go over Celestia and kind of where it fits into the modular blockchain uh thesis and then we'll go into how to run your own light node so that is probably why you're here but I just wanted to do some background before we do that so first what is a modular blockchain we're here for the modular Summit you've probably heard modular more times than you want this weekend but let's define it modular blockchain is a blockchain that decouples the core functions of the blockchain as we normally understand it and these are execution settlement consensus and data availability execution and settlement often get combined into one but there are designs where this uh these two functions do happen differently a good way to think about modularity when it comes to blockchains is The OSI model for software basically this is the way that most of the tools that we use today are set up there's a different layer for each specific piece of the stack so when you send an email it's interacting with a lot of these different layers but we don't really see that as a user but the thing that it helps us with as a user is we don't have a bottleneck in any of those in any of those layers of the process so the way that we're thinking about blockchains and modular blockchains is splitting apart this current structure that we understand and breaking it apart so that people can customize it make it faster make it tailored to whatever use case for their application and this is what we're calling the modular blockchain era so historically we have a monolithic era where the everything is very tightly coupled it's all run on the same software and there is basically one monolith so you can think of this as ethereum or Bitcoin and in the modular software era we have the cosmos vision and the cosmos vision is actually tied together by the software that actually runs those blockchains so you can run your own blockchain on Cosmos they can bridge to each other but you have to actually set up your entire validator set and security layer the security layer is at the bottom and that's where consensus and D A happen at least in the modular stack and what this does is it allows people instead of using the same software on top it allows them to use whatever they want and this is something that allows people to actually build whatever they want and with the freedom of choice for software so let's say like in the optimistic view in the future there's a restaurant who's starting up their own roll up to handle orders and then there's some kind of delivery service they might work together but they could run different softwares and still interact with each other so breaking it apart a little bit the modular stack configuration can be seen in a few different ways you'll hear a lot of talk about Sovereign Roll-Ups where execution and settlement are coupled together and then they basically live on their own on top of Celestia but they can still communicate with other Roll-Ups there's also a design where there's a roll-up where it settles on something like ethereum for example but the execution environment could be its own uh its own entire own namespace and those are still going to post data to Celestia then we have something called a celestium where execution happens on the celestium but settlement and consensus happen on ethereum and basically call data just gets posted to Celestia instead of ethereum and call data isn't something that we really need to post to ethereum all the time so that's the reason that you can split that apart and kind of offload a little bit of your data availability to a data availability layer like Celestia or avail um or anything else out there so um I guess like looking at the stack as a whole is really important the web 2 Cloud stack is very centralized to a lot of data centers across the world and this requires a lot of compute like petabytes of data and all these I actually don't know the magnitude higher probably of servers in all these places very centralized locations uh but the vision that we have for building this data availability Network is to put the power of like the freedom of verifiability in the user's hands so that they can run their own nodes and verify the chain themselves and do do that on something like a cell phone instead of having to run a server in a way in a warehouse somewhere or even running a server at your home so why Celestia as I mentioned earlier we're trying to we're building a base layer and on top of that we want anyone to be able to build whatever they want so in the cosmos Vision this is possible to build something custom but you have to basically there's a lot of social coordination to organize all your validators and set up all those validators there's also a very high cost of maintaining that consensus Network and you uh taking a step back this is just not really sustainable in the long term if we have a lot of layer ones that are their own Islands but they're not connected by a common security layer and I'll get to more about that in a second and why uh like a it just doesn't make as much sense in the long run but what you can do by building on Celestia or another shared security layer is you can scale your execution environment where your smart contracts are without uh sacrificing throughput if you've ever interacted with something on ethereum you probably have had high transaction costs and you might have to wait a while but if you're able to put your users in their own environment that's just for a game or it's just for a restaurant or something like that um you don't have to worry about everyone else using the same execution environment and it makes things more scalable you also inherit the crypto Economic Security of the base layer it's kind of similarly to the way that people build on ethereum you really just have the security of the network that everyone else is running alongside you to back up whatever you're building so let's get to the nodes now I think that's probably why you're actually here so in a blockchain we have typically have two different types of blockchain nodes the full node in the normal I guess standard design it downloads all of the data from every single block and if every single one of us in this room submitted a transaction it's going to download and re-execute every one of those transactions but in practice this doesn't really make sense because it requires a high you just need a lot of compute you need a lot of resources and bandwidth which can cost a lot I think like running a validator could cost like tens of thousands of dollars a year just in the internet bandwidth that you would need to host it somewhere assuming you're getting a good enough connection to uh run that for the whole year and what this causes is a minority of users being able to verify the chain and you have to end up trusting something like a centralized RPC provider to say hey I want to check my wallet balance could you please tell me what my wallet balance is and you just get that response and you trust it but there's no way to verify that that's actually correct except for trusting the block producer or the the chain the validators and a light node validate only downloads block headers it doesn't verify the data and there's a lower barrier to entry and what this allows is this is not the celestial light node but it allows the majority of users to use run this node and at the end of the day we are looking forward to a future where more users are running nodes rather than just trusting the full nodes that are in practice a lot more centralized than something that someone could run on their own so when we're talking about light nodes there are different types of like clients or light nodes um a basic light client will just check the block header and it will trust the the body of the data a Celestial light node will download the header and then it'll take a tiny portion of the data and make sure that that adds up and basically all of us are going to put our heads together and say that we checked our portion of the block and the data that we think is there is it is there in fact so we put our heads together at the end not literally but um at the end we can say that 99.999 certain that all the data is there so if I go and fetch my balance from the core Network and it says I have one Tia and then I go and verify that with my light node that the data should be is available I have a very high certainty that my balance is one um so instead of having to re-download the entire block like a full node I can just check a small bit of that data along with everyone else and we can basically come to consensus and say that yes the data is there um so I think it's also important to distinguish the difference between data availability and um data storage data availability is transaction data that's getting verified for the first time so you can think of this as the transactions in the mempool or the transactions that are being verified in the current block and then data storage is the way that you retrieve old transaction data so um on social for example we still have data storage you can go and sync the history of the chain but the real important thing is the data availability that is the most recent uh the most recent transactions and we want to make sure that those are legitimate and by sampling them we can have a higher degree of trust that or lower degree of Trust on the validators and a higher degree of certainty that we the data is there so like zooming out a little bit the big picture of this uh one of the reasons I got excited about Celestia when I started learning about it was that one of the core like fundamental concepts uh that we are kind of building towards is this idea where more users we have running nodes the bigger the blocks can be and instead of like in the monolithic sense um the full node will download the full block and the bigger the blocks grow the more Hardware you need so you can imagine if the block size on ethereum doubled or the block size on I guess Bitcoin doubled you would have to scale all of those servers exponentially to keep up with the size of the box but by having more people sampling little bits of data with light nodes in the modular vision the cost increase that happens is much lower and you're able to by having more people sampling blocks you are able to allow the blocks can grow in size um so for example if everyone in the world was running a node uh it would be up there in uh like the petabytes blocks but obviously that's a like pie in the sky vision I guess I should stop before I go further are there any questions right now yeah so Mustafa yeah if everyone five billion people if they have a cell phone Mustafa said that I think you might have done the math uh we could have about 12.5 petabyte blocks but obviously we're not there yet so we're going to start small um so data availability sampling is something that makes this increase in Block size but minimal cost increase possible and that's the way that we're sampling little bits of data and then coming back to put our heads together and agree that the data is there so data availability sampling it allows light clients to have a high probability guarantee that the whole block is there and valid by downloading less than one percent of the block and this increases scalability reduces cost and allows more people to operate nodes on the network and actually have control and sovereignty over their basically the information that they're getting from the chain rather than having to trust full nodes so yeah I think a good way to like think about this is with compact discs or CDs and QR codes for example these two QR codes use Erasure coding which is some of the similar mathematical primitive to well it's what we're using in data availability sampling and basically the QR code on the left has a little bit more metadata built in so that if the chance that some of it is missing we can still actually retrieve it all and this basically uses a really fancy polynomial math to match uh like an exponential a function to the data that's there and if you are only missing a few pieces you have a pretty good chance of being able to reconstruct that data so uh on the right side here I think there's about 20 percent of the QR code missing but it will still scan and go to this the right place as the one on the left uh another I guess going back to the CD if your CD scratched uh to a certain degree it can still figure out what was there but once it's too scratched so if I took out like even that much it's not going to work but oops are we still good on sound yeah sweet so yeah I think these QR codes might go to the docs on how to run a node if you're interested in learning more about this I recommend reading mustafa's papers I would say first reading lazy Ledger which is uh pretty much the design for Celestia and the previous name for the project and then there's also a paper written by Mustafa Alberto vitalik and Ishmael on fraud proofs and data availability um and this is also one of the Core Concepts of how we are building Celestia so um I think I've already touched on all this but the benefits like after we know about the nodes and the architecture of Celestia this the three things we're really trying to get out of this new paradigm is scalability shared security and sovereignty so you can see in the shared security section instead of chain a and chain B each having their own consensus the a layers they're linked together so that they can inherit the same security properties from the base layer and then sovereignty is really important to us we don't think it's it makes much sense to constrain people to the ethereum virtual machine or the Solana virtual machine or move but giving them the the choice to use any of those or any anything else that's out there or anything else that might not exist yet like a JavaScript virtual machine we want that to be possible because uh the more tribes we have the the harder it will be to connect all this together so diving into shared security a little bit more we have the monolithic we can think of the the left side even as like the cosmos Vision almost where each of these is their own Cosmos chain maybe this is ethereum over here but this the amount of security that you can have in your chain is only it's dependent on how much uh basically it's dependent on this like the size of your network and by sharing a security layer that Network can grow expert like keep growing without you having to set up your own little one and start from scratch so you can think of that as like this little circle here take it might take a long time to get to the point where it's as stable as this one so in the monolithic blockchain design execution consensus and da are often coupled together and this basically just causes there's a lot of bottlenecks this way and what we're doing is splitting apart execution and da I think I've already touched on this it's just another diagram to help illustrate it so yeah I guess the why why we're here is to run the light node so we're going to get to that in a second uh but running a light node ensures that more of us can participate in the network and more of us can be first-class citizens of the network and not have to trust some centralized entity which could be corrupted very easily by governments or yeah Etc so yeah more light nodes equals bigger blocks so let's go ahead and I think I have a duplicate slide sorry about that we're going to get to running a node now so you might have seen that you've probably seen like things on Twitter of people running them on a Kindle uh Wayne weiner for example got it running on a Kindle I actually saw him this week and it was really cool to see that in person I actually got one running on a phone I have here I'll start it up later on and this is the the goal of what we're doing we want this to be as lightweight as possible we want as many people to be able to run this so maybe one day we can hit the 12 petabyte blocks or something like that so you might be wondering how can I run a light node and that's why we're here so let's get started there's a few different ways to run a light node I'm actually going to just hop over to our website now um so if you go to celestial.org and if we go to the explore tab uh also if anyone's following along and if you're not it's cool if anyone's following along and you want me to slow down just like flag me uh this is going to be like more of the demo portion of the workshop and I think we have time I might go through uh the three different ways to do it so when we're running a light node there's a few different ways we've already gone through what it is and the first way would be to run it using your command line so this is maybe if you're not a developer you haven't spent much time in your terminal this is probably going to be intimidating but at the same time we have a few other options we have the option to run this with Docker and what Docker is is a program that allows you to isolate an environment inside your machine that is separated from the rest of your computer without impacting uh like all of the programs that are already on your computer uh and then I also have a light node application that I made for Macs right now and you can in a few clicks get a node started uh but I guess the asterisk here is that it only works on M1 and M2 Max right now but if you do have a Mac uh happy to like help you get that started here so the first thing we're going to do is go over to the docs for run your node via command line and I'm going to go ahead and open a terminal on the other side if you're on a Mac you can use uh terminal and I'm just using a different program it looks I like the way it looks a little bit more so I think probably good let me zoom in a little bit and right now I'm just clearing off some old folders just so we can see what it looks like when we start from scratch uh so before getting set up this way is going to require some more dependencies if you're on Ubuntu uh so Linux we have some commands ready for you to upgrade your local environment and set up some some dependencies um the next thing to do is actually install golang so I'm going to go ahead and copy and paste this uh one thing to keep in mind is we have a few different networks right now and actually block space race is not running so you need to do this on either Arabica or mocha and then under once you select the the network you can go under and select your operating system so I'm going to go ahead and install go and this is going to download and build go for me so that I'm able to download the Celestia node software and build it what's that oh yeah so for Windows uh you can't build it on windows so you would need to use Docker and I'll go through that one next yeah so that that's can be done on Linux or Windows or Mac the the software just can't build on Windows itself is that an iPhone yeah no you could use a you could use a virtual machine like in you would have to set an app up that um connects to a cloud like virtual machine in the cloud but there's no is it good yeah I think so it just got caught on the chair it's okay oh no no so there's a short answer is no uh the longer answer is yes it's possible but I don't think you'll be able to set it all up right now because you need to create a new Ubuntu machine in the cloud and then like log into it from your phone and then do all the commands from your phone I don't know if it's ideal yeah yeah um I'll actually like I'll get that going here I'll give it to you if you want you can like start the script and run it yeah so you can get there like yes um so now I have go yes that's okay oh yeah yeah I'm gonna stay here actually and then we'll go to uh this picture here and blow that up a little bit so yeah thank you for asking I mentioned earlier that we have a consensus Network and that's where the validators live and we also have full notes there but then we also have the data availability Network and that's the place we're trying to grow these blocks and get more people running light notes so for a light node uh you need a we recommend about two gigabytes of RAM it's been done on less but in order for it to run smoothly that's the recommendation you need a single core CPU so single threaded and for disk space you might need 25 gigabytes of storage but this is a little bit probably too high you could probably get away with like five gigabytes um the one that I have running on the phone is only taking up uh like 80 of one gigabyte so uh you you could but it would be um it might be slower yeah but it should work actually I've never actually tried that um so you could have the software running uh in using external storage um it is possible and then for the other types of nodes the requirements are a little bit higher but really not terrible uh so we're going to go ahead and get back to the other page so now that I have go installed I need to set up the path in my computer and what we're going to do here um if you type in Echo dollar sign zero on a Mac or Linux you can see the type of shell that you're using and the shell is the little interface that we're in here so right now I'm in zsh this is a little just like a little fancier version than bash you can see that bash doesn't have all the fancy uh like highlighting and stuff like that in here I guess not really great examples right there so once you've done Echo dollar sign zero and figured out what type of shell you're in you can go ahead and set your path um for me that actually wrote it twice but it'll still work so the next thing to do is verify that you have go installed and we can see that I have the Darwin ARM version if you actually selected the Run the distribution it's probably not going to build there is a chance though that it might build and think it's working but it you want to make sure that the version is correct the next thing we can do is install Celestia node we're going to actually build this from the source code so we're going to build the binary or the software by downloading the code compiling it and then it will produce a binary for us so we're going to go line by line I'm going to copy it all at once but I'll explain exactly what it's doing we're first changing to our home directory just to make sure we're in the right place I wouldn't want to be doing this in my uh you know like writing folder or something I want to have it in my root directory so I know where it is or home directory I'm going to then get rid of any old copy that I have of this just to start from scratch I guess you could also pull it if you wanted to the next thing we'll do is get clone so we're going to download the source code we're going to change directories into Celestia node then we're going to change to the right version we're going to pick 11.0 RC8 then we're going to run a command called make build which basically runs some scripts to build the binary we'll then install the binary in the location that we want it and then build something called cell key which is a utility that helps you manage your keys so I will go ahead and hit enter there we're going to see that building should take about 30 seconds or so depending on the Wi-Fi and we'll just keep an eye on the logs here to make sure nothing funny happens and then just like highlighting again you want to make sure that you have the right operating system selected I should have pointed out if you're on a Mac the M1 and M2 Chip is the Apple version and then anything older than that is an Intel version so right now we are at the building Celestia part uh now it is installed Celestia and in a second here we'll see that it's built the cell key as well all right so we're like really close to this thing being ready to run I'm going to go ahead and uh give us a little bit more space on here for the logs all right so the first thing we can do now that we have downloaded it we want to make sure that the path is set correctly so this is using using the gopath um so we want to go ahead and check that we have 11.0 RCA if we want to really go look at it we can see the actual commit Shaw and we could reference this on GitHub let's say we wanted to verify we're running the right software make sure nothing's malicious this is how we know you'll also see the system version so again we're on arm 64 Darwin and we're on go 1.20.2 so the next thing to do is to initialize the light node um and we're going to do the P2P Network that's going to be the network that you've chosen here in the tabs we're going to use arabica because it's a devnet and it syncs a little bit quicker so we'll actually be able to interact with the node here so now I have a new I will go kind of line by line it has created a node store in my root directory or my home directory in uh dislocation and we have a new configuration file that's been created we also have a new keystore that's been created so this is your the key to your wallet the key to your node you want to probably save this somewhere safe but what we can do is take this address and go to the Arabica devnet page and go to the web faucet and I'm going to put my wallet address in there and click run and it will be sending me some tokens on the devnet so that I'm able to post data to Celestia so the next thing we want to do is start the node uh you'll you'll be running a similar command as the last one we're just going to need a core IP which is an endpoint to a core node and the core node allows us to join the P2P Network so we can basically pull data from those chord nodes and then verify the data we have an example command here we also have a lot of other endpoints on the documentation if you want to try out different endpoints or even use your own you could actually run your own full node alongside your light node and you wouldn't have to put it any endpoint in besides your own um so the first thing to do here we can just copy the command and go ahead and start our node up so at the beginning of the logs it's going to move quick in the beginning here we're going to see that the DNA node started we're also going to see the network as the chain ID um so if on the off chance you installed the old version on accident and it says Arabica 8 or Arabica 6 or something like that but it's probably not going to work but there's a reason that's just because it's an older Network that we don't run anymore um so you can see in the logs here that we are downloading old headers basically in hundreds um and we're sampling those headers as we as we download them we sample them and this allows us to slowly catch up uh to the most recent point in time we can also see that as it goes we're going to see well yeah so we're still syncing well it's going to take a while before we see new headers coming in I'm gonna just let this run in the background for now so this is kind of an optional section on keys and wallets you can see more information about your your keys in order to do this you need to be in the Celestia node directory that you downloaded earlier and uh we're just actually gonna list whoops I'm missing something there yeah there we go so this is going to list that key just in case we want to see it again but what we can do now is actually go to a different tutorial we have a node tutorial and this is in the developer section of the docs and what this allows us to do is send transactions or post data to the network and we're going to be using something called the RPC CLI this is the remote procedure called command line interface the command line interface is the ability to use it on the computer without needing to do like too much complicated stuff so the way that we're able to uh this is going to walk through the installation steps again so I'm skipping down to the bottom so we already have it running and we can get started right here so this allows us to type in a few commands in the command line and then we can get data back from the network so the first thing we're going to do is we're going to check our balance in order to check your balance or run any of these commands you first need to set an auth token this is basically a password so that no one else can use your node to use your funds and post data it's a just a security measure so that your your node is safe uh there's a little bit more here but it's not crucial to the demo so the first thing we can do is actually check our balance and we're using Celestia RPC state so State meaning like the state of the chain and we're looking for our balance so we can see that we have a hundred million uto which is a hundred Tia the U is for micro so it's 10 to the negative 6. and then what we can do is go back a little bit up I do recommend going through this whole thing on your own uh if you get around to it but what we can do is submit a blob so we have Celestia RPC blob and you can think of a blob as just data it's arbitrary blob of data getting posted to the network and the way that we're going to do that is we're going to use a submit pay for blob method and we're going to put the namespace in HEX form so you'll see the 0x at the beginning and then we'll do the data in HEX as well and this is the quickest way to just test out that that works on the top here we're going to see a log soon oh maybe not anyways we see the log on the bottom that we at this block height 126 000 512. we posted a blob to the network now in order to retrieve this we're going to need to let the node sync and this is something that might not be the case in the future but we're able to retrieve the data from the Block so I will copy the bottom here and then replace the block number with a 126 512. um actually okay we did get the data back so look at that and if we go to convert this back to hex I'm going to use base64 Guru because it just works if we want to convert this back to hex we can see that um we have the same data so the 0x we can ignore that's basically just a prefix but we have the rest of the data as F1 F20 and ending in uh 5f5 so it's the same data we can see that we just posted it to Celestia and retrieved it and that's pretty much like for now the demo on the running it from a binary side I'm going to go through real quickly how to run it in docker but if you do want to test out some more of the commands in here I highly recommend going through this tutorial in full you can check the balance of another address you can check your node ID the account address you can get headers uh we'll do that real quick so we'll go ahead and get the header from 126 512 and this is going to be the full header that's the thing that light nodes normally only download but the Celestia light node is also going to sample the data we also have some more examples on sorry I should have zoomed in node info sampling stats is something that's useful so we can see that we are not caught up all the way we're actually only at block 35 000 right now but we were able to retrieve that data um there are some more resources down here there's a little bit of a bug in this right now but if you want to play around with it feel free to check it out so going back to this page I'm going to go ahead and take my node down right now and you can do that with Ctrl C uh and then I'm going to just clear out this window and CD to go back into my home folder and get rid of that other one so the next way to do this is to run it with Docker if you're in here right now and you're going to try to use Docker there's a good chance the download might take too long uh so if you already have it on your computer all you need to do is start it up and we're going to go to the docker setup page that's linked from the home page to do that so with Docker it's actually only going to take one command um it's going to be very similar looking to the last one basically we're giving it an environment variable for node type as light we're giving it a P2P Network flag is Arabica and then we're telling it where to find the image the image is basically the binary that we built the celestial binary that we built from the source code and the ghcr is basically you can think of it as like Google Drive for software um so we're going to download that and start with Celestial light start and point to the core IP again as well as uh telling it once again that the network is Arabica so if we do this this is probably the easiest way to like get the logs showing this is also the way to do it on on Windows I'm just zooming back or scrolling back up to see that we have a confirmation that it did start we didn't get stuck in this little intro phase and the node is syncing so we can also go into Docker if we want you can also see the logs in there so let's uh yeah that's that's how to run it with Docker I guess the final thing here would be if you want to stop it you can just do Ctrl C again and then if you run Docker PS you'll see that there's no containers running so it's definitely been shut down so the last thing we could do is run this using something that is called Quasar this is a Mac app that I built to run a light node on a Mac OS machine without having to do anything you don't know how to do I would imagine most of us have installed a program on here before and I'm going to go ahead and delete it real quick so if you click Celestial light start it's going to take you to the docs to download this directly and I'm going to go ahead and yeah click download directly that's going to end up in my downloads folder we can actually check once that goes through we can see the size of it and it looks like it's only yeah 48 megabytes which is a pretty like low amount of there's a small amount of data to have to download to run this I would imagine the other ways that we did it just took up like maybe 10 five to ten times as much uh bandwidth uh now if I go to my applications uh what I didn't do it right okay so now that I've dragged and dropped it into my application folder I can go ahead and double click quasar it's going to give me a warning that's asking if I'm sure I want to download this and I I want to say yes if you haven't downloaded software from like a developer that shared it directly to you or like something off of the app store before you'll need to go to your privacy and security settings and then I'll select to allow applications downloaded from App Store and identified Developers so now that I've already done that we just bypassed a little warning I'm going to go ahead and delete the old node store that I had on here and uh I guess the one thing I can't do here is zoom in so uh what you need to do to initialize the light node is just click initialize your light node it's then going to say that the initialization was complete it's going to show your mnemonic it's also going to show you your account address you can click OK and then have a little bit of a safety check here to make sure that you've saved this somewhere safe so I have a little copy button you can copy this to your clipboard put it in a like password manager of some sort if you're not going to use this node for anything and you're just going to play around with it once you don't really need to do this and then the public address is also good to save just so you have like mnemonic or seed phrase matched up with some public address so now that I've done that we'll pretend like I saved it somewhere I'm going to click that I've saved it somewhere safe and now we can start the node so once we click Start the node we're going to see that the node is starting up basically this is just waiting to come online uh when we saw the log version It's the thing that everything that happens before it says Celestia light node started so now we can see that the network had see if I can change the resolution we can see it fine so yeah here we have a a few like statistics that we can see what's happening with the chain the network itself is at height 126 549. we have caught up in terms of downloading old block headers and bits to sample we are at about 90 300 9200 blocks right now and then we are sampled up to 7 600. so in order to see the power of our light node just the same way that we did in the command line we can open the faucet and we'll put in our address there that we copied using the little button in the app and we'll click run it's going to take some time obviously this has to be confirmed on a block so I'm going to go ahead and wait about like a few more seconds and do that in the meantime we can go to the Explorer and look for my account address and then we can see that I have 100 Tia on there but we want to actually double check that with the light node itself because this isn't being sampled this is just coming from a full node so if I check my balance on the Node now if I check my balance on the Node it should show up as a hundred it looks like it might have stalled though so I'm going to stop it real quick and start it and check that balance again cool so yeah I have 100 Tia in this wallet I'm not going to do much else with this but if you want to just get a node started this is definitely the easiest way and if you have any issues or have any suggestions on how to make this application better um you can do that on GitHub and I have it under JC Stein slash node app right now uh it's a good chance this might move in the future so just like keep an eye out I guess and if you want to learn more about the app and like what the features are I have a little bit more in the documentation on the site um so there's some more steps on installation and then troubleshooting in case you need to to turn on that setting uh yeah so that's all I've got I think I'm a little bit over time but uh I guess I'm also doing the next Workshop so are there any questions yeah thank you for coming yeah um and then uh yeah enjoy the rest of the modular Summit thank you again oh you could just uh you have Windows yeah yeah not Linux only on Windows yeah yeah so Docker yeah Docker would be the easiest um there's actually really no other good way to run it on windows so yeah Docker and then uh you need to download Docker and then you can run that command yeah yeah so uh I guess if you go to docs.celestia.org um you can see uh in the run a note section we have a quick start portion and in there we have some Docker images I guess it's also important to note we have a little chat bot that I made so um let's see what it says uh yeah okay uh I guess to be fair there is nothing in here that says like explicitly you can run this on windows so uh at least it didn't give us a wrong answer yeah there's no windows in here okay so that's something to add to the docs for me but uh yeah thank you for coming again I'm gonna probably take like a five minute break uh I guess some of you are here for op stack Workshop to be completely transparent I don't have any slides prepared or anything so I was just going to go through how to run that we're going to run a local devnet deploy a contract to it and then spin up a front end if that's cool with you yeah sweet 
hey guys bankless nation welcome to another episode of state of the nation david this episode we're going to be asking tim baco all about the merge are we there yet tim are we there yet i think we're only going to be asking tim when merge that's a whole show um well definitely we need an update on the merge because i feel like some things have happened recently that uh may look there were never dates for for for the merge of course but we want to get an assessment of actually when but also more importantly what needs to happen between now and the merge and timbako is the person to ask about all of these things he is a master coordinator on everything ethereum so uh david what else are we going to discuss with tim today yeah there are just a number of test nets that we have to get through and so we're going to talk about each step of the test test that's uh what needs to happen which which with each of those uh there's also like most uh hard forks in ethereum happen at that block height but not the merge the merge happens with a different uh like prerequisite i guess for like when actually the merge happens uh so there's a bunch of information parsed apart there and also overall there's just like a bunch of misconceptions we want to clear up no the ethereum merge will not reduce gas fees we're going to talk about why people think that and why it's wrong and also just talk about like what does happen at the merge like does ether issuance go down yes it does but why will users or apps have to do anything can you run a node without staking what other popular misconceptions there are and then of course what happens after the merge so after we asked tim baker win merge we will be asking all about the misconceptions and the things on the horizon beyond the merge as well but first we're going to talk about the road to the merge so that's what comes up next awesome all right and also uh our friends over at metamask have wanted us to tell you about the buy button inside of the metamask wallet i'm a super user of metamask it's fantastic use the extension use metamask in mobile but david i haven't noticed until recently that there's actually a buy button inside of both the browser extension and inside of the mobile wallet what does that buy wallet unlock for people yeah for me i use it uh when i need to top up a wallet uh for gas payments for example it's nice because you can use the buy button in metamask with your credit card or debit card or it can hook also straight into your bank account uh but if you just need to quickly get some like some eth into your wallet the metamask buy button is super convenient it has a bunch of just integrations with your bank accounts via different providers uh and so like i believe there's wire there's transact there's moonpay and so it's probably the fastest way to go from a credit card or a bank account into ether into your wallet for whatever reason maybe you need to buy a quick nft on openc maybe you need some gas and a brand new wallet and you don't want to dock yourself uh it's on both the desktop version so like listeners who are watching this on youtube right now you can open up metamask and we'll see a little buy button uh you probably didn't really think about that too often but it's also on metamask mobile as well uh being probably the fastest way to get from fiat into uh crypto uh you know buy buttons we like buy buttons more than we like sell buttons don't we ryan yeah you know what it always makes me sad whenever i pay uh get for gas fees in eth because i'm like oh i spent i spent eat i don't want to spend and so it's nice to have a way to automatically like buy that back right inside of the wallet extension you know if there was like an auto buyback option i'd probably just click that and have metamask replace all of the uh gas views i spent on either but that's possible to paying for gas with your credit card there you go there you go uh david before we get an episode with tim i want to ask you the question i always ask which is what is the state of the nation today i'm gonna go ahead and guess the state of the nation is annoying ryan uh my answer my answer was previously we are verging as in we are on the verge of the merge but since like everyone is asking tim when merge when merge i'm going to go ahead and say ryan that the state of the nation is really annoying for people like tim baiko who's always bombarded with the question win merge uh we're about to ask him the same question so we're the annoying ones this week ryan so yeah state of the name right is annoying yeah well you know it's kind of like the kids in the backseat of the car right always asking dad and you know tim's in that place but uh maybe we'll save that question toward a little bit towards the end i think it is getting close though david i think we are on the verge of the merge of regardless it's just like when exactly will that happen and i think that's not even the most important question right an important question of course is how do we make sure we get this thing right because it would be very bad if um you know we we did this a little bit too early before all of the boxes were checked and before we felt uh secure as a community so we'll talk about all of those things with tim baiko you want to say something and then we'll get to sponsors david yeah i'll say everyone's asking win merge but no one is asking about how's the merger doing and so we're going to ask tim baker how the merge is doing right after we get through some of these fantastic sponsors that make the show possible rocket pool is your friendly decentralized ethereum staking protocol you can stake your eth with rocket pool and get our eth in return allowing you to stake your east and use it in d5 at the same time you can get four percent on your east by staking it with rocket pool but you can get even more by running a node rocket pool is the only staking provider that allows anyone to permissionlessly join their network of validating nodes running a rocket pool node is easier to set up than running a solo node and you only need 16e to get started why would you do this you get an extra 15 staking commission on the pool to ease so your apy is boosted so if you're bullish staking you can increase your apy and get some extra tokens by adding your node to the decentralized rocketpool network which currently has over a thousand independent validators it's yield farming but with ethereum notes you can get started at rocketpool.net and also join the rocketpool community in their discord you can find me hanging out there sometimes in the chat so i'll see you there maker dow is the og d5 protocol the maker dao produces dai the industry's most battle tested and resilient stable coin using maker you don't need to sell your collateral if you need liquidity instead you can spin up a maker vault and use your collateral to mint die directly with maker the power to mint new money is in your hands the maker protocol is extremely hardened and operated by one of the most experienced dows in existence they've been here since the beginning they've seen it all and so you can mint die with the assurance that your collateral is safe soon maker will be present on all chains and l2s so minting dye can take place on oasis.app xerion zapper or any other d5 protocol that you use follow maker on twitter maker dow and learn from the oldest and most resilient down existence [Music] ave is the leading decentralized liquidity protocol and now ave v3 is here ave v3 has powerful new features to enable you to get the most out of d5 including isolation mode which allows for many more markets to be launched with more exotic collateral types and also efficiency mode which allows for a higher loan to value ratios and of course portals allowing users to port their ave position across all of the networks that ave operates on like polygon phantom avalanche arbitram optimism and harmony the beautiful thing about ave is that it's completely open source decentralized and governed by its community enabling a truly bankless future for us all to get your first crypto collateralized loan get started at ave.com that's aabe.com and also check out the ave protocol governance forums to see what more than a hundred thousand dow members are all robbing about at governance.ave.com hey guys we are back here with uh tim baiko talking all about the merge today it's a it's a merged check-in i think we're probably gonna have a few of these episodes on bank list but of course you guys know tim he's been on the bankless podcast number of times he runs the core protocol meetings called the all core devs call that essential acd call that you may have heard about for ethereum this is where all the devs come together they discuss what to do next with ethereum they get input from all corners of the ecosystem protocol researchers and client teams and everyone else and tim of course coordinates and is a liaison for a lot of that activity and tim also spends a lot of time talking to the outside world about the ethereum roadmap so he's the guy we can ask about the merge tim how you doing man it's good to have you back thanks yeah glad to be back um so aside from yourself i'm curious tim who else can we ask the question of when merged it's like you know because we would be doing this weekly if we could yeah yeah so um the reason i'm happy to come on here is that hope this way researchers and devs are not spending their time uh answering these questions and they can actually work on the merge so yeah they can obviously give you an answer but hopefully they can spend their time working on it instead um i mean trent from the ef is another really good person for this like he he just likes me like follows all of this and has a bit more like a community role and danny can also give you some some really good answers but he's like heads down writing all these specs so again um you don't want him to to spend too much of his time doing good stuff we've got another name that's good so tim and trent and then this is a message to the community every time you ask a dev or researcher when merged it delays the merge by another 10 minutes okay so we need to stop doing that we need to uh you know and we can only do it of tim and uh and trent now um but like so if the imagery here is like we are kind of the annoying kids in the back of the car asking the drivers the developers you know uh when when merge when's this all gonna happen i i guess the next follow-up question is maybe more broadly is what mile marker are we on okay so if uh the road to the merge is a hundred miles long what mile mark marker are we on at this point in time are we are we you know 70 are we 80 are we like you know 90 95 something like this right um it's it's weird because it's not like a straight world right like it's a winding road and there's some turns that get added as we just like hunt him yeah yeah um so i i don't have a a great like answer i mean like at a high level like you know we test nets are the last thing we do before going to mainnet and tomorrow we're forking the first of the three test nets we plant the fort um we did so and that's robson just to be clear um and we are forking robson a bit earlier than we otherwise would um because basically we're asking a bit more of node operators and stakers in this upgrade than we are in previous ones and so in previous upgrades on say the execution layer or even on the beacon chain the only thing people usually have to do is download a new version of the client that they're running and that's it they're good to go it takes like five minutes and that's it um this one's a bit more complicated so if you're running on the beacon chain or on the kind of execution chain of proof of work chain today you now need to download this other client which you may not have had before you need to configure it to work with your current client um and there's a couple extra parameters you need to set and so because this is like a bit more complicated than previous upgrades we figured it would be good to run robson first um as a way for people to kind of test drive this process and we do plan to deprecate the robson test net kind of shortly after the merge so even if you know it doesn't go exactly as smoothly as as we'd want um we're we're fine with that um because this way you know like home stakers for example or infrastructure providers can run through the emergence and figure out if anything went wrong we can fix all of that and then we'll hopefully have like a much smoother deployment on like gourley uh which would be like our next distance um but but at a high level you know it's we want to run through robson then there's two more test nets gordy and sepolia and once those are done we'd move to mainnet uh the big caveat is obviously if we found the big issue at any point during that then we'll want to pause and and fix that um yeah so in terms of steps there's not that many steps but it's very hard to tell you how long each of those steps can take yeah and each test net is actually a proof of work test net and so every test net is going to transition into proof of stake and so um is that correct uh kind of so two of the three are proof of work so robsten is and and sepolia is the gordy testnet actually runs under what's called proof of authority and that's basically we white list a bunch of nodes and we tell them you can produce a block at this at this time and we just rotate through them um so they'll all move to proof of stake but there's only two of the three that are moving that are moving from proof to work and rockstar is one of them yeah okay and so what are we testing with every single test net right each test net has various like variables and and of course the merge has a bunch of variables with it has the consensus layer clients it has the uh execution layer clients as we let's let's start with golly the one that's coming up here in a couple days what are we actually testing when we when we merge a test net right that's that's a good question um so ruxin is the one that's tomorrow here so yeah yeah um so what we're testing is basically whether you know the code and client works as expected um but further and that's usually what we test on desktops is like you know the assisting work as we'd expect in conditions that are more or less similar to maintenance um but for the merge we've actually done this quite a lot of times before uh with these shadow forks that we've run um so these shadow forks were kind of forks that would happen on test net domain nets but they would only have a small number of nodes that's controlled by testing and client teams that would fork um so we've we've done those i think about 10 times so far and so we have high confidence that like you know things work uh and we wanted to have that extra level of confidence because the merge is such a complex change um so i think the thing that we're looking at for test nets even more today than just like the code working is whether the community like manages to like smoothly upgrade um and and basically it's like you know once it's happened you know are the validators able to run through the commands is it clear uh what type of tutorials and documentation do we need to write for them um so i think that's like the additional parts that like we're really paying a lot of attention to here um and we know that this first one probably won't be perfect just because of how kind of new and different it is um but then hopefully for the next one which will probably be gordy um we could have fixed a bunch of those issues have better documentation and so that it goes smoother and and people kind of have many runs uh to try things on before it actually happens on mainnet and when it does happen on mainnet then they have really high confidence that their setup is is correct so this is not only a test net on of the software of the protocol of the code it's also a test net for humans right this is also social coordination in addition to actual code coordination yes and i feel it's like it's more than 50 the social part in this case because we've gotten quite good at doing just the technical part you know uh kind of in a more closed fashion so um we've really improved that over the past year but uh yeah obviously we still want to make sure that everyone in the community is able to run a node and and uh they uh they uh yeah they're comfortable when the image happens on that network okay so we've got three test nets that we are going to run a mock merge on it'll be a real merge for the actual test nets um uh and then after we merge uh robson which is kind of the one that's actually coming up in a couple days like do we just need to like sit and wait and watch robsten in this post merge state for a while what happens after the robson merge for the robson now right yeah that's a good question so um on robson we'll we will definitely sit and and wait and watch it i do suspect that'll be pretty uneventful because we've done all these shadow forks i think the thing that we need to then wait for a bit more is um the the code that clients have today works but it's still not quite as polished as you as we'd like it to be on mainnet and that's really the thing where i think we'll probably move to the next test nets once we just have like a bit more of a polished product from client teams and this is stuff like you know fixing some edge case issues having some better documentation having some better apis to interact with the network so things like that um so that when we do run tegori and sepolia um it might not be a hundred percent what it will be on main net in terms of code but it'll be you know 90 plus percent if not like 95 or 99 so you want it to be quite close and and um again you know it might happen that robson has an issue on the network and we'll obviously watch that and monitor it and fix it if it comes up um but because we had all these shadow forks um i think we're we have higher confidence that like the transition should should actually go quite well um the other thing that we'll also see on robson is robson has like way more integrations with products you know like ether scan supports that metamask supports it a bunch of applications have their like core test deployment on it um and even though we've we've done this also with another test that we launched called kiln um it'll just be useful to see like this is like a i don't know kind of top tier test net in a way that's really broadly supported are there any weird tooling or integration issues that aren't directly code by caused by like the code of the merge but just like because things are changing and this tool did not plan for it and that's definitely something we want to um and that's definitely something we want to be aware of yeah so say it's robson merch merge day which is again coming in in a couple days what what are you going to be looking at like what data are you trying to collect or is it more of like you kind of know it when you see it kind of a moment yeah uh so a couple of things so one is just like does the network finalize is it generally stable we have kind of a list of a bunch of metrics that we look at so like you know that's like the baseline you know did it work um two the thing that i will look at is just like are there some big services that have issues you know say either scans stopped working uh that would be that would be bad and we want to figure out why um so that's the other big thing and then three is it's a bit more qualitative but it's just like do do people did people manage to upgrade you know like for example you're going to eat steak or discord it's like is it like chaos or are people generally like okay with what happened um and i think um again like assuming the technical stuff is is correct and there's no issues there then i suspect most of the work is about um how do you um yeah how do you just make it easy for people to to use this software yeah so is the merge ready isn't really like a binary yes or no it's more of just like a vibe of like how much chaos is their post test net merge and like do we feel good about that right and one thing that's worth highlighting is the reason for that is the ethereum network is pretty resilient to things being imperfect right like it's designed to assume that things are not going well um so this is why like we can have these shadow forks and they can go well and even imagine a world where like proof of work is banned tomorrow or like all the miners disappear they attack the chain we could probably merge with the software that exists today and the network would be would be fine um but the question is like then we we need to spend all this time fixing all these edge cases issues on the network that's live in production with like hundreds of billions at stake and we'd rather avoid that right it's like if we can find an issue before having it on main net rather than after it's it's much better to fix it before um even though the network could probably sustain like a lot of different types of these issues um and and i guess the reason for that is just like if you if you take a bit of a like bigger view of like the entire ethereum road map you know if we don't just want to ship the merge you know we have a ton of things we want to ship after um and say we shipped the merge like in two weeks but then spent the next six months fixing a bunch of bugs that are like trickier to fix because they're already on mainnet and stuff like that it would just slow down everything else we have to ship after um and so it's yeah this is why even though it can like appear like it's ready and it's like we're not looking for like much or like things don't necessarily break super loudly um we do want to like zoom in and find those small issues where things break or are not perfect um so that yeah when the transition happened on main net hopefully there's you know there's kind of nothing to do after and we just we just move on to the next thing yeah the rule of thumb measure twice cut once comes to mind the idea is that like we could merge right now if we wanted to but we would perhaps have a lot of collateral uh collateral damage as a result of that and so what we are doing now is we are preemptively fixing that collateral damage before we move merge so that the whole entire thing is smooth rather than rough um tim what is like a catastrophic thing that you that you are worried about like what keeps you up at night with like the robson merges uh and or test net mergers that you definitely do not want to see in the actual live merge um so luckily like we've hit a lot of them i think so one thing that's it's a bit broader than the merge but it is this idea of client diversity um so i think we've done we've done really good work on the consensus there side with regards to crime diversity uh prism is now well under two-thirds and and that's really healthy um on the executioner side we still have like a super strong dominance by guest um and one thing that does keep me up at night is if we go to the merchant that stays correct um if there are cases where like the majority of the network is using death and there's a bug and guess that would be really bad and you can imagine something like you know imagine that geth has a bug which prints even just one ether or deletes one ether that it shouldn't right it really it affects kind of the the the the whole purpose of this chain which is you know to have like a immutable ledger that people agree on based on on a specific set of rules so if death had an issue that like broke some of those rules and it was run by a majority of nodes that just like on it on the cl side uh that would be really bad for the stakers running those clients um and it would lead it would put the ethereum community in like a very awkward spot of having to choose between like do we bail out you know potentially the majority of the chain because uh you know most people are using that or do we actually enforce the correct protocol rules even though it might harm the majority of the stake on the network um so that's that's one thing that keeps me up at night like i definitely want people to try and like use other clients um and and this is literally the best opportunity we'll have in ethereum's history to reset the balance uh of this um and this is maybe something people don't know but um it's almost not as much a problem right now on on the proof of work ethereum because all the mining is done with death and so that means that if there was a bug in geth very weirdly like all the miners would agree on it because they all run geth because of flashbots um whereas after the merge flashbots has updated their infrastructure to be client agnostic so you don't you know it doesn't have to be get you can you can run any execution layer client um but that's the big thing it's like if if people keep using geth as a majority client on the network and there is an issue with it uh regardless of when after the merge it doesn't have to be right out of the merge um that could put us in a really bad position so um that does keep me up at night so so uh i'm i'm kind of getting this uh this imagery of like uh you know a school play right everyone's rehearsing for this school play right and people have memorized their lines and there's all sorts of these other parties you know there's kind of the stage crew you know there's the scenery there's the spotlight all of these these pieces need to uh come together and what you're doing now with these test nets tim is uh you guys are doing dress rehearsals essentially and so you know there's going to be shouldn't just be one dress rehearsal there should be multiple dress rehearsals and each of these test nets provides another opportunity for a run through of the play where everyone's lines are rehearsed and everyone knows you know what spot to be and that sort of thing and so the first dress rehearsal is happening uh within the next 48 hours or so the robson test net as you mentioned um and and so i i'm kind of curious as we think about these these dress rehearsals too david asks you the question of um you know what keeps you up at night but what sorts of things do you anticipate could go wrong in one of these dress rehearsals like what's the analogy of like you know the lead actor he forgets his lines or you know this actress is not in the right spot or forgets to come out from backstage what sorts of things might happen or is it completely unpredictable so i think yeah if you look at the dress rehearsals it's like the people don't show up this is like the advantage and and and imma you know i'll take an example like with ether scan for example um actually ether scans have a bit different because by default they'll be included because they follow the chain but let's take uh someone like light though right like lido today is a pool that's just live on mainnet in the beacon chain and i'll pick on them because they actually have showed up since like the first test net and i know i know they're actually on top of this but imagine a world where idol doesn't show up um you know they don't they don't get any of the blog posts or they see them and they don't care um and then we we have the merge happen on test nets and you know it looks like everything's all right and then it comes on my net and for some reason lido operators like mess up their upgrades um and either that means that they're like going offline or like at worst they're signing the wrong things so they get either like a penalty because they're offline or they get slashed um which is really bad if even in the case of lido because it's like a big part of the network if all of their operators were offline um then it might actually affect like the the finalization of the chain which would also be really bad um so i think this is like you know one example just like if large projects like don't pay attention and don't do anything it can affect obviously like their end users but also like if they are stakers or or like infrastructure providers that stickers use it might affect like a large part of the chain and and leave the like uh disruptions there and and this is kind of like on proof of work right like when you have these upgrades on proof of work you want all the miners to upgrade and you want like the software that miners use that also work and not have bugs um so i think that's like the things like if people just like ignore completely these these these uh blog posts and announcements that we make and they just you know get to mainnet and then do it wrong because they haven't practiced um that could be bad um and like i'll give you another example is like for example uh at the merge transaction fees become available to validators right um so if you're if you're a validator you can put in an eth address and when you create a block that's where the transactions go uh but imagine something like coinbase or kraken which has a staking pool it might not be as simple for them right because they have it's not actually their ease that they're staking they're taking all their users eth so i suspect for them it's a bit more involved than just for like a solo validator who will just plug in their ledger address right like they'll just say okay send the funds there if you're coinbase or kraken you might want to think about like okay what are we actually doing with these funds are we compounding them you know like if we get all these transaction fees should we just give them the users now should we just compound them um and so that's the type of stuff where like you want them to have thought about these problems and have a solution for them weeks or months in advance you don't want them to read the blog post or mainnet and be like oh oh man we're gonna get these transaction keys now what do we do with them um so yeah i think it's really just about like paying attention and like and similarly you know one last one is like if none of the solo stakers see it like you know if one solo sticker misses the memo ethereum will be fine but it's like as a community it's super important that we reach that part of the community and that they're aware and that you know it's not just big projects and infrastructure providers updating but like if solo stakers can't upgrade and none of them have upgraded that's also you know super super bad for your theorem so yeah that's that's what's so it's it is it's so it's just like a dress rehearsal right there there are lots of different kind of active actors and you know participators and you know there's kind of a choir maybe there's a band and you know if you get one or two instruments that are off or a minor character doesn't show up in costume like who cares but if you have someone like like lido and they're scheduled to uh to sing their solo at you know midway through the show you know and that doesn't go well they don't come out on stage and you got a real problem so the uh the dress rehearsal the objective of that is to kind of just run through it all and like it's funny because like how do you know that you are ready for show time it's like well when you have a few successful dress rehearsals under your belt and everyone knows where to be and then then you're kind of ready to go to the show so it is as david said earlier it seems to be more like a vibe right like oh we've done this a few times we're feeling good about it everyone's now confident and we have this rough consensus that we are ready to go but also at some point you do need to be like we need to ship guys and we are ready to go because you could spend time in just dress rehearsal over and over and over again and then the audience is never going to actually be able to see the show and you could get stuck in that too so i guess this is just a judgment call is this rough consensus as far as when to ship and maybe that explains why it's so difficult to nail down a date yeah i think so and i think the thing the thing that like at least client teams look at is like are they comfortable in the software that they're shipping um and they're you know we get feedback from users and you know both large and small on that i think you know the thing that we definitely like if if like a large or even like there's something that breaks for a bunch of small users comes up then like yeah we might choose delay things there to make sure it happens smoothly um but that's different than you know say infer was not ready for the merge um because they don't pay attention um then that's kind of on them at some point it's like you know if they run a business um it's on them to monitor this stuff and again i'll pick on infrared because i know they actually follow this stuff super closely and and are quite involved but like you know if if they kind of tune down for six months and then they're like oh wow the merge is happening um i we would not block it on them like i mean you know we and hopefully they they're aware and and they can prepare and and at the end of the day you know if infera is not ready for the merge it is like a bad user experience for a lot of people using ethereum but it's not a threat to the protocol you know and that means that stay again imagine you know and for us not not uh ready for the merge and like i don't know say open season and for a user um well they may like not like infra as much anymore as like a you know a service provider and they might change something else and like that's that's all right uh so it becomes more of like a you know quality of product concern there um and again i i i'm not saying this because i don't think infer is ready like i think you know they're very active and on top of this so just an easy easy example to pick on well tim i'm going to have to ask you the question when merge but i'm going to ask that question right after we get through some of these fantastic sponsors that make the show possible arbitrarily is an ethereum layer 2 scaling solution that's going to completely change how we use device and nfts over 300 projects have already deployed to arbitrary and the d5 and nft ecosystems are growing rapidly some of the coolest and newest nft collections have chosen arbitrarium as their home all the wild d-fire protocols continue to see increased usage and liquidity using arbitrary has never been easier especially with the ability to deposit directly into arbitrary through all the exchanges including binance ftx hobie and crypto.com once inside you'll notice arbitrary increases ethereum speed by orders of magnitude for a fraction of the cost of the average gas feed if you're a developer who wants low gas fees and instant transactions for your users visit arbitrum dot io slash developer to start building your dap on arbitral if you're a d-gen many of your favorite dapps on ethereum are already on arbitrary with many moving over every day go to bridge.arbitrum now to start bridging over your eth and other tokens in order to experience defy nfts in the way it was always meant to be fast cheap secure and friction free the layer 2 era is upon us ethereum's layer 2 ecosystem is growing every day and we need bridges to be fast and efficient in order to live a layer 2 life a cross is the fastest cheapest and most secure cross chain bridge with across you don't have to worry about the long wait times or high fees to get your assets to the chain of your choice assets are bridged and available for use almost instantaneously across bridges are powered by uma's optimistic oracle to securely transfer tokens from layer 2 back to ethereum a token proposal is being deliberated as we speak in the across forum where community members will decide on the token distribution you can have your part of across the story by joining the discord and becoming a co-founder and helping to design the fair fair launch of across if you want to bridge your assets quickly and securely go to across.to to bridge your assets between ethereum optimism arbitrarum or boba networks the brave browser is the user first browser for the web3 internet with over 50 million monthly active users control your digital footprint with built-in privacy and ad blocking inside the brave browser you'll find the brave wallet the first secure crypto wallet built natively inside of a web 3 crypto browser web 3 is freedom from big tech and wall street more control and better privacy but there's a weak point in web 3 your crypto wallet the brave wall is different bravewall is built natively inside the brave browser no extension required which gives the brave wallet an extra level of security versus other wallets with the brave wallet you can buy store send and swap your crypto assets and you can even manage your nfts and connect to other wallets and defy apps all from the security of the best privacy browser on the market whether you're new to crypto or a seasoned pro it's time to switch to the brave wallet download brave at brave.com banklist and click the wallet icon to get started all right bank of station we are back and we've got this handy little graphic shout out to trent van epps for putting this graphic together and this really shows the timeline of the dependencies between now where we are on the very far left with that we are here indication to where we're going on the very far right podcast listeners it might be useful to open up the youtube if you want to look at the the uh the graphic here uh so just to navigate this thing on the the blue line the blue line up top and the of the three lines is off chain these are social layer consensus choices that are being made uh and also some test net merges as well which we've talked about and then below we have the green consensus layer and then the red execution layer and at the end of this graphic is when these things merge hence the merge and so tim i'm wondering if you can walk us through this with this graphic we've already talked about the test net client releases robson sepolia and gourley and that's what is in the very near term robson goes live literally in the next 48 hours but then we have some remaining steps can you walk us through the remaining steps between now and the merge right yeah so this assumes all the tests that's go go live we just talked about that um so it's worth hitting on like when we get to this next step you know terminology terminal total difficulty like what that is and why why it matters and how the mergers may be a bit different from other uh other ethereum upgrades um so generally when we have an upgrade on on the ethereum proof of work chain we use a block number so we say as of this number um you know the new rules apply to the chain um and this is kind of easy for clients to handle generally because even though there's forks on the network what happens is like you know even across multiple forks well if you're in the block before the upgrade happens you don't have the new rules and if you're the blog the block after that you do have the new rules and it's easy to triage between that so even if you had imagine like three different proof-of-work forks kind of competing for which one is the valid one well you just activate the fork on all three um up to us when a certain height is hit um and then eventually you know those forks resolve there's a single canonical chain but it doesn't really matter that like on the two kind of side chains you've like activated the hard fork as well um it just means that like the transactions in those blocks were either valid or invalid um the thing with the merge is that um we want to make sure that like the merge is only triggered uh unlike one major chain right like we want it to be pretty clear that like this is where the merge is happening um so instead of using a block number uh we're using the total difficulty of the chain so for those who aren't familiar with proof of work uh every block on a proof of work chain has a specific difficulty value like how hard is it to mine it and if you sum all those values together you get the total difficulty of a chain um so it's like how hard was it mine block one plus block two plus block three all the way to the head um and this is like a really costly measure to fake because you know if you want to increase the difficulty of the chain you actually have to mine it uh and and um whereas if you wanted to increase the block number of the chain what you could do is you could start a fork where you like really slowly drive the difficulty down to zero and then mine a bunch of blocks when the difficulty is zero and and you'd have like a really high block number on a chain that doesn't have a lot of proof of work difficulty um so by using this terminal total difficulty what we're saying is that when we hit the specific amount of proof of work on the chain is when we would trigger the merge um and that means that if you want to create like an alternate chain there um you would have to spend a ton of money to do so and there's not really an incentive to do that um and so we we choose a specific total difficulty value which we call the terminal total difficulty value and once we've exceeded that on proof of work that's when the actual transition from proof of work to proof-of-stake gets triggered um and if your listeners are like super familiar with proof-of-work they'll realize that this also doesn't fully guarantee you don't get reorgs because you could get like short term reorgs like we have on mainnet basically with uncle blocks um but those are fine because basically what would happen is if you hit the ttd um and there's like three blocks which satisfy kind of the condition and the condition is like that block's total difficulty is bigger than the ttd but its parents isn't so it's like literally the only block that's like exceeded that threshold so if you have a couple different blocks like competing uncle blocks you would simply have the validator pick one of those and they'd all be valid blocks so you know they have kind of a choice over it but they don't there's not the risk that like somebody then reveals another completely different chain you know that was built months ahead months in the past and has a higher difficulty like basically if that were to happen it's kind of the same threat model let's say a 51 back on ethereum and if we assume that proof of work is secure um you know that's not something we should hit with um so yeah i'll pause here i see you have a question david uh i think just the summary i think that's correct is that this ttd mechanism makes the actual event of the merge unpredictable which makes it impossible to coordinate an attack around is that a good summary uh it's not that it's unpredictable it's that it's very costly to fake right so basically if you wanted to hit the ttb on an alternative fork you need to spend as much hash rate as you would do to mine the ethereum main net right and so that's and and while you're doing that you're basically foregoing uh yeah yeah that you could get on maintenance and so that's that's kind of the thing it's just like it's really costly to fake and you don't really get anything from that attack except like messing with the merge um so um and similarly that cost today is on the order of like doing a 51 back on ethereum which like you could actually get more out of you know if you're thinking about like roi on your on your attack um so yeah it's just it's just like a a higher security threshold uh and and harder for people to tamper with so this is the reason tim you guys are using a ttd rather than a block number here right so i guess just to zoom out on this on this graphic for people on youtube or the podcast uh we talked about the dress rehearsals the test net client releases ropeston and and the others that is happening now um the ttd date will be chosen or the tt the total difficulty uh number will be actually chosen an all-core dev call after the successful dress rehearsals happen and then they're committing to a live performance basically it's like the dress rehearsals are done we are going to make a live performance happen we're going to have our first big show our only big show we get to put up the posters we get to say ttdx what will that be is that sort of a hashrate i'm not used to thinking in uh as dates as hash rate so so yeah yeah so at ttdx base and you can map that back to time as precisely as a block number so like you know with block numbers we we usually have like a range of days like we can't predict it on the day exactly like we we can do the same with with okay so we'll have a range of range time and then we have uh two client releases one of course is the consensus layer which is the beacon chain that's the proof of stake chain that's happening right now and the other of course is the execution layer which is the existing kind of geth an existing ethereum main net that's all proof of work uh and then it sounds like there is this period that we see on the bottom of this graphic called pre-activation for both of those client releases both bellatrix which is the consensus the beacon chain and paris which is the existing ethereum proof of work main net uh that gets pre-activated and then there's some time period between the pre-activation and the actual time when the the ttd number hits any idea on like what that that time range will be between pre-activation and the you know ttd are we talking like hours we talking days uh we're talking probably like small number of weeks and weeks okay yeah and and maybe just to take a step back and explain like why you need to run through this whole process um so like you mentioned like bellatrix is the name of the changes that happen on the beacon chain which kind of allow it to speak to the the current proof of work chain and paris is kind of the mirror image of that it's the change we need to do on execution clients which allow them to use the beacon chain rather than proof of work to come to consensus um and so we need those releases to be out and and like those changes to be active on the network before the transition happens and and what that means in practice is like when those changes go live uh there'll be like a hard fork on the beacon chain like there was for altair and what happens after that hard fork is the beacon chain is just pinging the proof of work chain and saying like have you hit ttv yet have you hit ttv yet have you hit tv yet and so it kind of knows to wait and it obviously knows what to do once once the ttv is hit um and so basically because we uh we want to give people time to like upgrade their notes and whatnot um before the ttd is actually hit um that's why we want to have choose a ttd value have like this hard fork so give people a couple weeks for to upgrade their notes for the hard fork even though the hard fork doesn't really change the functionality of either until the ttd is hit um and then give a couple more weeks for the ttd to actually be hit and the reason there is that you don't want the ttd to be hit before the hard fork happens um because that would mean that like the beacon chain and the execution chain aren't even aware that they should be listening for a ttd so like nothing is going to happen on the ttd um and the worst case scenario is if the hard four if the ttd was hit kind of when only some of the nodes but not all have upgraded then you'd have this weird case where like uh you know some nodes are following the hard fork other nodes have no ideas happening and this is why having like some buffers there just gives people gives people plenty of time uh to know what's happening and to run the upgrades um but at the same time also it's worth knowing and because ttd is a function of difficulty on proof of work um we don't want to predict it too far out because if the hash rate changes a ton which we could expect to happen because the merge is happening and people might sell their gpus it might take us a longer time to hit it um so this is why like a small number of weeks is probably this sweet spot where like it lets people enough of a it gives people enough of a heads up to upgrade um but also you know imagine that like the hash rate starts dropping or maybe instead of hitting it in two weeks we hit it in three weeks but we don't want to go from like hitting it in eight weeks to 16 weeks like that would be really bad um so but but that that that once we have the uh pre-activation of paris and bellatrix uh both those clients then it's just basically a countdown it's it's a shot clock to uh ttd it's actually hitting and i'm it's a drama i'm sure we'll have charts i'm sure we'll have websites i'm sure we'll have you on like three or four times i'm sure tim when it actually cuts over is that all like automatic does anything need to happen no it's all automatic and this is like why this is so hard like it would be ten times easier to shut a theorem down for a day and restart it on proof of stake like and seriously like you know like i don't want to put a percentage on it but like at least 50 yeah at least half of the work is caused by like this has to happen like instantaneously like there's no doubt yeah it would be much much easier to just shut it there and down for a day and then restart it under a proof of stake so we really are swapping the engine out mid-flight that's really yeah yeah and this is why there's so much work because if you from the view of a smart contract imagine you're like a smart contract you're on the last proof of work block the next proof the next block comes 12 seconds after and it's proof of stake but nothing has like changed from you like a small things have around like the difficulty op codes and whatnot but it's like there is no down time there's no for end users sending a transaction you know imagine you sent the transaction five minutes before the merge and it's pending like it might get included in the last proof of work block the first proof of stake block and there's really no difference like the the network doesn't doesn't know and and and this is why it's so important because you know so much of this stuff is interconnected uh if we if we went down for even like 10 minutes you know imagine like how it would wreck like d5 for example um and and yeah that's where the difficulty is it's just like having this happen without any downtime uh for applications right it's like it's the indiana jones swap where you swap on the the sandbag to take off the the treasure right it has to be instantaneous or else bad things happen uh it is nice to see a a core community of developers prioritize uptime to such a large degree so i definitely do appreciate that in the d5 financial system that i envision for us in the future so tim uh how long would this all take after all the test nets and the bell tricks hard fork and deciding the ttd like well when i talked to justin drake at permissionless and preston van loon they were like well the uh the ice age is coming in august and they said that they're pretty bullish from this being able to get done in august uh do you share that august conviction or what what is your perceived timeline on this whole thing yeah the hard thing with timelines is like unknown unknowns right it's like sure there's a world where like everything goes right then like we merged in august and and but at the same time if you set that expectation and say we find a weird sync bug on one of these test nets and it takes us two weeks to ship to to ship it fixed then it's like well maybe it's on august and it's september and if you find two of those they're like oh maybe it's not early september is like mid-september if you find like three or four then like oh maybe it's like october and so i think i i struggled to put like a really precise month just because of that the thing i am like really confident about is like for it to not happen in 2022 there would have to be like a really terrible thing that happens or like an incredibly unlikely sequence of like medium bad things it's like if you told me you know will we find a bug for the merge i'd say like sure there's probably a good chance will we find like two bad ones like uh maybe three that seems unlikely but it's like the odds of like finding seven or ten to me are they're tiny but like it's it's not impossible right it could happen but it's just very small or the odds of something like i don't know there's like a massive attack on ethereum right then we have to literally drop everything for three months and like fix that orders like i don't know something in like the real world like when covet hit in 2020 right like and like things just like go crazy for like three months so i think like for it to not happen in 2022 something if that scale would have to happen either like a huge unlikely strain of like medium bad events or like something catastrophic that like hinders her ability to make progress for months um and i think then like yeah if you're thinking about like you know when can it happen otherwise it's like how many hiccups do we hit and if we hit like none at all then sure august probably makes sense but like i i've disappointed myself with optimistic timelines many times before so i you know i don't want to set the expectation that it happens in august and like we find a sync bug like in july and client teams feel like they can't properly fix that because they need to ship the merge a month later um and so that's that's really the main thing why it's hard to make a prediction but i do think it's like it's definitely on the order of like a couple months from now and whether it's you know two or four or like i don't know i guess the worst case would be like five now or something for the end of the year like that's really a function of like how many issues do we hit um but more than that there would have to be something really bad that happens and um and this late in the process i think it's very unlikely that it would be something that has to do with the merge itself it's almost like a like event yeah external event or or again like a really unlikely sequence of internal things but it's yeah well like i said at the beginning everyone asks the question when merge but uh no one really asks the question how's the merge doing and so kind of going back to the whole like it's not really a date it's more of a vibe tim overall like how just how do you feel you feel good i feel good like yeah yeah i i'm i'm really happy about like client teams work like i think uh like yeah it's it's going well there's still some like issues we're ironing out here and there but like it definitely feels like you know we're not only going downhill from here but like we're quite far down the hill and that's really good um i think i i'm also pretty optimistic by the fact that like i've spent the past couple months reaching out a bunch of random projects and asking them to test stuff ad hoc and and and like making sure that we don't have any blind spots and stuff and so far so good there um i think the last bit of information is kind of what we talked about first on this call is like how will home stakers like you know run through this upgrade like are they gonna have a bunch of issues or not and and i hope that's not then and i've been spending the past couple weeks trying to write these blog posts and like or and getting client themes to write explainers about how to upgrade this and and that's something we're going to keep doing um so like that's the the thing i'm probably most focused on right now but overall yeah i think i think it's looking really good um i'm i'm quite happy all right so uh maybe maybe two to five months is kind of the the time range here it sounds like unless something catastrophic or you know a number of small things go wrong yeah she was probably pretty optimist so two were early june it's like i think if it was in august it wouldn't be early august i think like the quickest is you know well i think yeah august to december you can probably quote me on that and then i'll also say like you know we won't ship the merge like past like december it's like yeah yeah so we got the window there so let's do this tim because um you know to kind of wrap things up we want to create there's a lot of misconceptions going into the merge we want to lightening round these misconceptions and like turn this into a youtube video so so people can clarify all of the misconceptions and i'm gonna go through five of the top misconceptions i hear about the merge and then maybe you can add but let's just reflect on each of these and give us the reason that these things are misconceptions and not true so i'll go through all five the first one is this there is a misconception that you can withdraw your staked eath after the merge is that correct or incorrect and why uh it's incorrect so the merge is basically only the transition to private state you're gonna need another upgrade uh to have withdrawals and the reason there is just the emerge is already the most complicated change we've ever done to ethereum and we wanted to limit it as much as possible to make sure that it goes well so the upgrade after the merge we'll have withdrawals and there's already specs being worked on for it so if you have staked if guys what this means is post merge it'll still be locked in place you will not be able to withdraw it but there will be another upgrade coming down the pipeline in the order of i don't know months are we talking about or years and that will be another uh upgrade post post merge maybe six months time range six months to a year or something like that is that what you expect him yeah basically that's usually what we what we do yeah okay there we go uh the second misconception that we hear so often is that the merge will lower transaction fees there's a little bit of truth here but it's just a tiny bit of truth can you tell us about this yeah yeah basically can you tell us about this misconception uh so in short it it it won't basically like uh proof of work versus proof-of-stake doesn't change the throughput of the chain uh ethereum strategy to lower transaction fees is uh roll-ups and making it as cheap as possible to use them and so that'll be a whole other series of upgrades which is also starting to be worked on okay so the merge will not lower transaction fees folks number three misconception the merge will lower issuance um actually that one's not a misconception that's true yeah that's actually true um so proof-of-work issuance i don't have the numbers in front of me but it's like 4.7 down to four point six percent point four six percent yeah something so and the way i the way i look at it um is if you go on an ether scan they have like an issuance chart for mainnet um and there's like four lines in it there's like proof of work issuance proof of work uncle issuance uh proof uncle rewards issuance and then they eat two issues that you can chain and so if you look at that like you can literally remove the three first lines and you just have the the proof of stake issuance left and it's about the 90 like the proof of stake issuance is about 10 percent of the total so it's about a 90 reduction it varies like on a daily basis uh you know there's some error bars on these numbers but like yeah there is a massive issuance reduction so putting that in misconception format some people think that the merge will increase issuance and it won't it will decrease issuance uh total each supply at least issuance over time will be decreased over time number four there's a misconception that users applications will have to do some work to upgrade maybe click a button and download something what is that misconception what will users and applications need to actually do uh post merge so assuming so again if you're not if you run a node or you're a staker or you're an infrastructure provider like you definitely need to do stuff blog.ethereum.org has the whole list if you're just using your theorem like sending transactions or deploying smart contracts um basically you need to do nothing like everything will keep working as is um the one small thing i'll say for smart contracts is if you use the block time uh or if you use the block number as i like proxy for time that changes a bit so like today blocks are about 13 seconds with a lot of variance after the merge they're always like a multiple of 12 seconds um so like for some yield farms and like apy products like that matters because if you calculate like a certain apy over a certain number of blocks after the merge you're gonna be issuing it slightly quicker um but it's it's not like a you don't have to do anything that will just happen uh you should be aware of that and if you want to upgrade your contracts you should but that's really like the only the only thing that can affect how applications work so if you are a regular everyday normal user not running a eth node there's nothing you will have to do if you're just using metamouse continue just using metamask you want to click any buttons there's no upgrade it will roll over automatically the fifth misconception is you can't run a node an ethereum node without staking so without 32 eth for example can you tell us about why is that a misconception tim yes uh so there's two types of nodes right on the network there's validators which are nodes that produce blocks which are like miners today to run one of those you do need to run you do need to put 32 eth and every 32 east gets you like an extra validator slot and you can think of it as a lottery like every block there's a lottery and uh your 32 weeks is like your tickets to like potentially produce the next block um so if you want to do that and be a validate on the network you you need that capital if you want to run a node on the network that's different from being a validator and what running a node means is you actually verify that the blocks and transactions that these validators create are valid so validator is like a really bad term because the validator doesn't just verify what they do all the nodes verify on the network what the validator does in addition to that is they produce the block and this is why like in mev they call them block producers not validators um but if you're just a normal user and you want to make sure that the blocks that are being propagated on the network and produced by validators are actually correct and that for example you know a staking pool doesn't collude to print itself a bunch of eth it is free to do that so like you can just download you know your consensus layer client your execution layer client and run that it will sync to the chain it will verify that the history of that chain you know the rules were followed or at least that there was like strong agreement amongst everybody that the rule were followed and then today you know like once you are synced every new block it will run it and make sure that like every transaction in that block uh meets the rules of the protocol um and that's like pretty important because the only the kind of biggest blocker that we have to validate there's commuting and changing the rules of the protocols is having a large number of nodes that are run by non-validators who just like act as a checked and make sure that they're not changing the rules of the protocol uh behind closed doors so if you run a node you do contribute to the security of the network uh you don't have to put up capital to do it it's a public good then to run a node a non-validating node it's kind of like you know voting in your local elections is sort of a you know a public good and a check on power yeah that's correct um tim i know you already have a call that started two minutes ago uh thank you so much for coming in between a very busy schedule of your day the last misconception you can drop off whenever if you do need to run the last misconception i'll bring up is that in the post-merge world the eighth state rate is going to be something like 15 percent uh that number has now no one really knows that number but like new consensus uh on very very informed individuals like polynya uh have converged around seven percent uh and so the current eth stake rate uh is like somewhere around four point something percent uh is going to go up to seven ish percent give or take post-merge not in the teens at all um tim thank you so much for coming on bank list and giving us all this clarifying information and allowing us to ask win merge in 50 different ways of course thank you so much for having me yeah have a good one guys bye tim there you go guys uh some of the misconceptions just to clear up so um you can't withdraw your staked eth after the merge number one uh the merge will not lower transaction fees if you've been told that that's incorrect uh the merge actually will decrease issuance so if you've heard it's increasing issuance that is incorrect users and apps will not have to do anything when they upgrade you still can as you can with ethereum right now run a node without staking fact it is a public good to run a node because it is a check on power that is essentially how we're voting in these blockchain systems and the last one david what's that about the eath stake rate it's actually more like seven percent ish rather than 13 or so does that count does does is mev included in that figure david mev is included in that figure uh the 13 to 17 east stake rate came on the assumption of a 70 30 block feed to tip ratio uh in at post eip1559 your transaction fee is split into two halves uh one half is the base fee which people thought was going to be about 70 of the total transaction fee and 30 would be the remainder tip uh now that eip1559 has been live for a while we have much more data we've noticed that these numbers have converged on at 90 10. uh so 90 of your transaction fee gets burned only 10 percent goes to the validators so that brought the uh e-stake rate down a little bit and then the other half of the story is that well when we first started talking about ultrasound money and the e-stake rate it was in the middle of d5 summer when like gas fees were like two to four hundred way consistently and now instead they're like 20 to 40 gray so that also brought the east stake rate down uh and so that went from like these very very high high number estimates of something like 13 to 17 down to a much more much more like kind of logical and reasonable number of seven percent however that does not mean to say that if the gas fees to go back up the estate rate would also go back up i don't even it's very hard it's like i guess what we're doing is we're just picking another point in time and crafting a prediction based on the market conditions right now and saying it's lower than 13 because it's a different you know market conditions but obviously so many supply demand dynamics go into that rate including how many validators are you know part of the network right and so this will all fluctuate but it's likely over the long run that we'll see you know between four percent and then at times into the double digits percent for uh the east stake rate and that will fluctuate over time as well um the other point is really interesting is so uh eip is actually burning more than we thought it is that's still very good for all uh ethereum holders of course so that that value just accrues to anyone who holds eth rather than just the uh just the validators so you know 90 is burnt it's actually a pretty surprising number to me but that has certainly been the case with the eip1559 david four layer twos start sucking up all the block space uh they're only like at three percent now one day they'll be at thirty percent one day ryan they'll be at ninety percent uh and gasps should be extremely high true true uh all right man so if we uh we got our answer i think when merge we're doing dress rehearsals right now merge in you know two to five months or so before the end of the year it's gotta happen so uh we are close and david and i will be continuing to sit in the back seat with the bankless nation asking everybody involved when merged uh as uh the weeks go by and the months progress but we are getting very close folks anything else you want to end on david the thing i want to end on is if you like this video the merge will come faster it's a verifiable fact so if you're watching on youtube go ahead and click that like button i see a 420 people watching it and i only see 141 likes so you all got some work to do and while you're at it you might as well hit that subscribe button as well because if you subscribe to bank lists you subscribe to win merge updates uh and so every time we ask when merge you will hear the answer as we get closer and closer and closer to that thank you everyone not available i'm incented i'm gonna go review this podcast it sounds great uh let's save us from the bear market risk and disclaimers of course as always guys none of this has been financial advice it's not uh merge advice we don't honestly know a date yet but hopefully we will soon eat is risky we want a ttd a ttd as is all of crypto you can definitely lose what you put in but we are headed west this is the frontier it's not for everyone but we're glad you're with us on the bankless journey thanks a lot 
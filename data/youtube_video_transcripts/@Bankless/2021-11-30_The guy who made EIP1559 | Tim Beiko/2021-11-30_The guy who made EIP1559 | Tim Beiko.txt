welcome to layer zero layer zero is a podcast of unscripted conversations with the people that make up the ethereum community crypto is built by code but it's composed by people and each individual member of the crypto community has their own story to tell cypherpunks understood that the code they write impacts the people that use it and layer zero focuses on the people behind the code because crypto is people all the way down and always has been today i'm speaking with tim baco timbeco has a similar uh timeline with getting into crypto that as i did got into uh the top of the 2017 markets and then found his way into what niche fits him best started working as a client project lead at consensus project manager and then eventually he hand-raised and used his uh position working on the bazoo client to really focus on eip-155 and tim raising his hand to take that uh effort on aip1559 led him into the role of being the all-core devs coordinator so this really this podcast is really a lesson in the dynamics of what it means to make upgrades to ethereum and very very true to what i think layer zero is all about is like who what code and who is proposing this code that ultimately becomes part of ethereum really needs to be considered because people the code dictates how people's lives will look what ethereum is will impact the people that use it and tim baiko's at the heart of what changes make their way into ethereum and what changes do not and so this uh this is a fantastic podcast to answer the question are there just centralized actors that can upgrade the code uh can vitalik just get whatever he wants in into code and upgrade ethereum as he see fits we've talked about these subjects directly and then also talk about um some overarching just uh you know decisions and and problems that you know will inevitably uh be part of ethereum's uh future and what we can do to solve those problems now uh also this is a lesson in client diversity and client development and so just a very informative podcast so let's go ahead and get right into this layer zero with tim baiko but first a moment to talk about some of these fantastic sponsors that make the show possible arbitram is an ethereum scaling solution that's going to completely change how we use defy and nfts and now it's live and has over a hundred projects deployed gas fees on ethereum l1 suck too many people want to use ethereum and it doesn't have enough capacity for all of us and that's why teams like arbitrary have been hard at work developing layer two solutions that makes transactions on ethereum cheap and instant arbitrary increases ethereum's throughput by orders of magnitude at a fraction of the cost of what we are used to paying when interacting with arbitrary you can get the performance of a centralized exchange while tapping into ethereum's level of security and decentralization this is why people are calling this ethereum's broadband moment where we get to add performance onto decentralization and security if you're a developer and you want to save on gas costs and overall make a better user experience go to developers.offchainlabs.com to get started building on arbitrom and if you're a user keep an eye out for your favorite defy apps being built on arbitrom many default applications on the ethereum l1 are migrating over to layer twos like arbitrom and some are even skipping over the layer ones entirely and deploying directly on layer two there's so many apps coming online to arbitrarily so go to bridge.arbitrum.io now and start bridging over your eth or any of the tokens listed and start having the defy or nfc experience that you've always wanted alcamix is one of the coolest new defy apps on the scene it introduces self-paying loans allowing you to spend and save at the same time deposit the die stablecoin into the alchemics vault in order to get an advance on the interest it generates borrow up to 50 of the total amount of your deposited die in the form of al usd stablecoin here's the craziest part the loan pays itself back and you cannot be liquidated unlock your assets potential in the ultimate defy savings account and brand new to elk mix is the eth fault where you can deposit eth into the application borrow al eth against your deposits while having your advance gradually paid back over time v2 is rapidly approaching which will allow for even more collateral types plus a variety of yield strategies to choose from harness the power of alchemix at alchemix.fi that's a-l-c-h-e-m-i-x dot f i follow alchemix on twitter at alcomixfi and join the discord to keep up to date with alchemix v2 and to get involved in governance hey tim how's it going i'm good how are you pretty good my man pretty pretty good uh still in seattle about to head into a plane to get back to san diego from the holidays where are you at i'm in vancouver and was just in san diego yesterday to celebrate thanksgiving with some friends oh bummer we miss each other i'm up north and you went down south and i was down south and you went up north so you you have one of those uh cool nft things i i can't remember what the name of that nft project is in your background um but i remember looking at those yeah i think they're called crypto trees so i bought it i didn't mint it uh i'm still looking for a good nft background if people have suggestions oh yeah you're gonna get flawless suggestions yeah this one is like decent but i don't know i i'm not like 100 in love with it either so yeah yeah i feel like that's how nfts go is like you never actually feel completely in love with them so you always have to keep on searching yeah so tim let's go all the way back for those that don't know tim is one of the lead efforts uh coordinating the the eth one so i don't think we call it eth one anymore but also largely the eip1559 efforts but let's go even even further back when was your moment that you first heard about ethereum right um a friend of mine told me about it and i ignored it the first time um that was a mistake a second time i heard about it was in the context of the dao but when the dao was a fundraising project and not a hack um and uh that seemed interesting and i actually bought my first eath to contribute to the dao i bought the absolute top uh i think like uh my buy went throughout coinbase there's always like a couple days like literally the day before the hack uh happened um yeah so that was my introduction to ethereum was the dow getting hacked i feel like this is a great exemplar story like your friend tells you about ethereum you ignore it and then you buy the top these are this is how people get into into crypto exactly yeah what kind of uh experience what was your your work life your career trajectory before crypto right um so i i kind of started out more on the business side i always started a bunch of projects um when i was in in high school i had an online t-shirt company uh shopify i don't think existed back then but you today that would be like a shopify store um then i actually i managed a painting company for like three years uh like actual painting of houses um i realized that doesn't scale really well so there's like really diminishing returns to scale uh with like physically painting things got interested into tech because it seemed like something you could like scale easier um and uh instead of going to college a friend and i figured out uh why not try and start a tech company so we spent a year trying to start a startup uh didn't work out uh the idea was to try and uh basically airbnb for your luggage space um so if say you're living in bali and you want something from uh france uh we would like match you with somebody coming your way uh and then you could pay them to bring uh whatever you want um and that that was also like a horrible tech idea because that also doesn't scale really well um but learned a lot about you know technology and um also realized how little i knew i kind of taught myself to code it a little bit while we were doing that and when the startup didn't work out i went back to school to do computer science instead of business um and basically did that um and then yeah after that i worked as a product manager and uh kind of kept doing that it felt like a nice intersection of like being involved in the engineering side but also not like just writing code so you always have had a entrepreneurial spirit inside of you yeah yeah pretty much yeah did they extend like a even earlier than that or is that kind of like the early stories i think the t-shirt business was the first thing uh and it was interesting because i was like i don't know 16 years old at the time were 15 years old and it was just like so hard to do everything from like getting your paypal account right because you're not 18 uh you know getting like set up on i forget what what i use for a storefront but like the equivalent of shopify like all those things are quite hard if you're not 18 years old um yeah was it was it the pursuit of of capital or the spirit of building something like what really resonated with you about it yeah so definitely the building more um capital was nice in that it was mostly like unconstrained right like when you work a job it's like you know you can work more hours or find like a you know slightly better paying job especially when you're like 16 years old your options are quite limited um and so uh yeah like i guess working on something that's like self-directed but also like you know if things work out you do get like a higher payoff um yeah i think those two things were really the the just a bit and then what made you decide computer science when you went back to was it was that that wasn't your undergrad was it yeah undergrad undergrad i guess trying to code i liked it i realized how little i knew and like how flaky everything i was writing was doing so you know there's a lot of like debates about how like useful it is to understand like the theory behind like computer science versus like just doing like say a coding bootcamp um and i think i'm very glad i kind of started with like the boot camp approach and and actually you know got to building things really quickly um but after that you kind of just realize how little you know uh so then going back and and looking into theory and i spent a lot of time in undergrad also doing ai and that was really interesting to learn um so yeah i you know i i enjoyed kind of getting just a better understanding overall of like how these things work behind the scenes so after you graduated with a degree in computer science and then you had you had some experience you know building being an entrepreneur like where did you think you were going to take that yeah so one thing i realized when my company didn't work out is i didn't want to start another company unless i knew i was like the best person in the world to do it and it was just something like meeting like as i had my startup i got to meet that you know a bunch of other founders and to me that seemed like one of the really not necessarily like necessary things for companies to work but like it it greatly improves your odd if you feel you're like in the top you know one or 0.1 percent of people that can actually tackle this problem um so i'm you know i was and still am kind of fine you know not starting a company for its sake but waiting until there's something where i'm like well nobody else can kind of do this better than i can right or you know mo the vast majority of people can't do that um and so yeah i and and i also realized uh while i was kind of running my company you know we were like a startup of three um that i didn't have like a good feel for like what does like a successful 10 percent company look like what does like a successful 50 200 you know 10 000 percent look like uh so during my my my undergrad i tried to intern up like a bunch of different sized companies to like get a feel for like you know what do they look like um and then after my undergrad i basically went to like a mid-stage startup for a year working on ai um and that was i think late 2017 early 2018 by that point i had been kind of following ethereum again like pretty much um but there's not a lot of jobs on ethereum if you're not an engineer um so an ai kind of felt like a better kind of career path uh so you know i worked in ai kind of followed the theorem on nights and weekends um and at some point just started searching for a job full time in this space i got just really bored of it after like eight months um and so i was looking at uh any ethereum job i could find yeah what was the uh the process of like work ethereum balance for you before you got into like full time before you got your job in ethereum what was like right yeah tell me about that so if i had to describe it quickly it's like booking a conference room for yourself and like reading the beige paper you know like you're doing crypto zombies uh so i would try to like if i wasn't too busy at work you know take time there to like you know study or read up on interesting things um spent a bunch of time on the ethereum subreddit um the the quality there was was quite high um and i i didn't actually go to like ethereum meetups like there weren't a lot of them in montreal um but i managed to get my ai company to pay to send me to a blockchain conference in austin um and then when the first east berlin happened uh my goal was to go there and try i bought a ticket for eastwood and a ticket for defcon uh and i was like i'll just go to those places and like get somebody to give me a job um and i was really lucky that i actually landed my first job right before going to eath berlin but that was kind of my plan is like in person it'll probably be easier to like meet these companies and and yeah find find a good fit so this was in uh 2017-ish right yeah late 2017 early i guess east berlin the first one was in 2018 so i kind of started looking you know like 2017 again probably like right before the top um and then kept looking throughout like the first half of 2018 and got something a bit later in the year yeah i know our timelines are are about the same uh well so why ethereum because in 2017 like there was there was everything right like there was eos there were a billion billion bitcoin forks like why ethereum yeah yeah so i you know i i'd known about ethereum since like the dao and and i just the project really resonated with me it did seem like it was trying to build something like genuinely new um i you know i'm just like not that interested but i say like bitcoin forks you know where to like tweak a parameter and like you know kind of derivative projects um so i and i don't know in 2017 aside from ethereum and like bitcoin and maybe a couple smaller ones like monero or stuff like that and zcash there weren't like a lot of actually legitimate projects um and i also felt uh the risk reward of working on say like an ico project was pretty bad um that's kind of what got me to decide to work on a theorem full-time is when there was this ico boom i was like you know all these projects might fail but clearly it shows there's like demand for ethereum right like there's demand for like using this platform and also the thing that i realized was like how kind of broken a theorem was like i don't know if you remember then but like icos could like plug the mempool for like two days or something like that and it was like really hard to get a transaction in and i was like clearly there's a lot of work to do at the protocol level there's like some demand for the protocol itself um and all the stuff built on top still feels pretty speculative and i was not i didn't feel like i knew enough to be able to say like you know this is like a project that is actually going to make it um yeah so uh yeah ethereum just felt like i don't like the platform order is like the most actual activity innovation happening on it um and in a spot where there's still a lot to do to actually improve their protocol while you were going through this 2017-2012 journey of learning how to get into the space were you more of like a lone wolf or did you have like company like a friend to go with you i remember in 2017 like i had like five or six like friends in a group chat right and so like that we all kind of shared knowledge what was your dynamic like that like that no like yeah the exact opposite like completely alone yeah there's like one guy who told me about ethereum and bitcoin and like we're not like close friends so like you know i you know i i like message him probably 10 times in the span of three years about it but like yeah no i didn't really have anybody i knew and i feel like that was also kind of true when you were building your businesses your early businesses when you were first experimenting with being an entrepreneur we were also also a lone wolf then too uh more or less like a lot of them had co-founders or i had friends involved in that or like made friends through the process um so i think you know a lot of them probably started with me more or less alone and then you know i kind of brought people into it um yeah what was your first job in ethereum uh so i i got super lucky uh consensus was just starting a protocol team um and they needed product managers so uh actually i tried i think it was like early in the year i applied i interviewed and they're like we're kind of looking for a product lead and not like a single pm um and we'll call you back if like we ever hire single pms and i thought they were just being polite uh and like say no but actually did call me back like four months later they were like well we hired a product lead now we're looking for actual pms are you still interested and i said yes so it was just like such a perfect fit uh and at that time consensus was building a client from scratch so i basically joined right after they had like the called the v1 but it was really more like a v0 uh like a very basic clients that could like sync the main net uh only had full full sync it was only an archive node so you know aside from like working in theory it really didn't do a lot like on mainnet um and then over the next couple years we basically got to like build that and add kind of all the features you expected like it you know standard ethereum client like fast sync pruning uh all the json rpc support tracing and all that stuff did this client have a name uh yeah so it was called pantheon it's basu oh yeah yeah yeah i remember it yeah right did you feel like equipped or like qualified uh to be able to do that like was that was that a challenge for you right um so i'm not sure there were a lot of people who would have been like a hundred percent ready i thought i you know i'd say i was probably 50 there my biggest like surprise or learning when i first started is i assumed i could like read the spec you know like the yellow paper the beige paper and like that would be like 80 of the actual client right like these are like the rules of ethereum but it's more the opposite it's more like 20 and like 80 percent of stuff in clients like for example fasync doesn't have a spec right like the spec there's like a pr on geth that explains how it works but it's like yeah there's so many things that are kind of like that where they're not or they're maybe specified somewhere but you really have to know where to look for um and it's quite obscure and you kind of have to learn by like either using the other clients uh or you know like trying to understand what they did um so yeah you know that was a lot probably the part where i had to like ramp up the most uh was just you know understanding all these these parts of ethereum that are like specified in the weird corners of the internet and is that is that true just because of like the chaotic nature of ethereum just it was a young ecosystem people weren't really writing stuff down like why why was that true do you think yeah i think that's that's that's part of it i think the other thing is maybe like you don't know in advance what what will be like the popular feature so for example like uh snap sync or sorry no fast sync uh is what get implemented and parity at the time had warp sync um and and snapsync actually turned out to be sorry fast sync snapsec is what they have now so i keep referring to that but fastsync uh just turned out to be like the better of the two and so everybody kind of converged towards that but like when they were implementing it you know they we kind of didn't know that in advance and for example for tracing it's the exact opposite parodies tracing apis are actually the ones that everybody uh say like ether scan or exchanges use um and then the get ones are are less used um and so yeah same thing it's just like you know people kind of didn't necessarily know in advance which one would would work yeah or also like how people would use them right like um there's a bunch of like quirks and like tracing apis like you know how you want it like figuring out if a transfer has actually happened can be quite hard uh if it's like a smart contract let's say sending an erc20 and you actually need to run through everything and make sure it doesn't revert and and only then can you actually like mark say the tokens is transferred um and so over time people like exchanges or block explorers they just gain really deep familiarity with like these apis and they know all the quirks around them and how to handle them and like yeah these things just become kind of cemented as like the the standard even though they didn't set out to be used like that or use used so extensively basically one of the things that that me and ryan are particularly obsessed with is are like and the broader ethereum ecosystem are like the values of ethereum and when you start to like build out a client is that where you start to become related to those things like how like building out a client and also like making sure that ethereum like retains the values that it was originally purported to have like was that a relevant conversation when you were building out this client yeah i think the biggest one is like you know all core devs it's probably the place where that like plays the biggest role um and i think the questions we had at basu specifically is like you know given basically was funded by like consensus and consensus is like a big organization in the space like you know should like our views reflect you know consensus is position every time should you have people kind of reflect their own views like how do you um how do you make sure that like you build this in a way that's just aligned with the other teams um and so yeah i think we we weren't you know super explicit about like okay what are like the values we want to embody as much as just like what the like every interaction we have like how does that reflect you know is this like a net positive for the ecosystem um yeah so i think it's yeah it's kind of all these small decisions of like how you act and like you know the the battles you picked and the things you know kind of when are you when are you willing to just like you know let others win and and this is like the hard part about the theorem like we have you know four clients and they all have like different trade-offs that they make and sometimes you know some feature can be like harder for you to implement because of you know your architecture stuff like that and just thinking about like okay how do we make sure this all works when we disagree with people like how strongly do we want to express that uh and you know overall like does this make ethereum better or you know does this just benefit us and i think we've tried to be really mindful of that um and the team still is so i'm no longer there but i think they still do like a really good job of that so it's less about like the ethereum values and more about just like the technical details of like if we build this in this way will that trip up other clients that build it in a different way yeah but but i think yeah i think one of the big values is like decentralization obviously and and like having multiple implementations was always something like that was important to ethereum um and it it was pretty critical like in 2016 when there were the shanghai attacks um and even now like you know if one client has a bug it's it's great that we can have others kind of uh pick it up even more so with the merge uh with the fact that like staking penalties are like anti-coordinated so i think it's just like the this idea of like decentralization and like resiliency is probably the one that like as a client team you spend most of your time thinking about um and that's like another interesting conversation like you know how much time or how little time i guess client teams spend understanding what's happening on ethereum um especially as it grows in complexity like you literally can't understand everything that's that's uh being built so just trying to figure out like you know where where do on on what like if they're in value can we have an impact and like you know how do we make sure we do a good job there yeah do you remember like a particular like decision or issue that that had to just like really be unpacked like for a good example for the listeners just so they can wrap their head around like these small choices that had to be made that what what you would have to consider and with that process sure so i can go like very technical and then like much more broad but like the very technical one for example is the eth networking protocol um so so the format by which nodes communicate with each other so when they send a new transaction how is that how is that formatted right and this is like you can think of it like how nodes talk to each other on the network um the the four you know these formats all have like uh assumptions embedded into them and we improve them and oftentimes if you want to create like a new sync algorithm when you're syncing you're basically asking a bunch of nodes on the network for for data about the network uh so this is where like things change a lot um and i think there's a lot of time where like uh geth has been like building new syncing algorithms and they've uh and supporting these these these networking formats is something that adds like a lot of technical depth to them and uh they really benefit when other teams kind of drop you know are able to also quickly deprecate that um so that they can just you know refactor their code and make their syncing work better so that's an example where i think we've always tried like with the basic team even though we we might not be implementing the same syncing algorithm as them for like another year uh to try and see okay how can we prioritize this thing because it helps them uh another thing that's really basic is just like adding testing infrastructure right like the ef maintains a lot of the ethereum testing infrastructure and it's really valuable when other client teams are able to like spare some resources to help improve that um and that's one thing you know we try to be mindful about um a bit more high level and probably relevant to like most of your listeners is like eip 1559 um so when we decided to start working on that it felt like something where we had kind of the skill set in the team and we also had the bandwidth and like literally nobody else in the client teams had they all had the skill set obviously but they didn't have like the bandwidth to do that um so that just felt like something that was like super valuable for ethereum where there was a lot of work that could be done and we knew that like we could do a lot of the work you know ourselves and then get it to a point where it was like a bit more ready so that when we started involving other client teams like that you know the foundation has been set um and that was stuff like obviously implementing the eip itself but just like building tools uh to test it better uh and stuff like that so yeah that was probably one of the biggest one in the past couple years where like i think we were able to to really have an impact i've always thought like the position of being a client dev is really really interesting because it there's a little bit of like evolutionary fitness that goes into into clients right like bad bad clients drop off good clients uh you know become downloaded more and the cool thing about crypto is it's it's all like biomimicry right and so whichever client can get themselves replicated more is a therefore a successful client yet at the same time like clients can't be in too much of a competition with each other because you don't actually want one client to have a monopoly right you don't want one one little organism to dominate the whole entire ecosystem because then the whole ecosystem will die off because you can't have centralization on one client uh so i've always thought it's like there's this tug of war between like you want to make the best client but you can't make it too good because then you then you smother all the other clients what was the conversation is this a conversation with client teams yeah so we've had this i think every team kind of agrees they're not going to make their client worse right like so you know like whether that's like the get team or you know aragon like they're all you know say very good on certain aspects like i don't think any team is willing to compromise to like make their client worse you know for for like the sake of client diversity just because you know at the end of the day we do want like to offer a good a good product for for the users um i think what we often compromise on is like making the client better but slower right like it's like we have we all have like these road maps for what we want to do but then if other people kind of have other stuff that's really important to them you know we're we're sometimes fine just like you know not not doing something but just making it in a way that you know gives others time to adapt and stuff like that um and for example you know like this happens a lot uh say with the aragon team today they have like a completely different architecture um and so oftentimes like if we can do things that like allow them to implement that better then i think we we really should try and do that um and and because you know even though they might not be the most popular client on the network today they're you know potentially like the most popular client in like three years and try you know leaving the room for that is is what allows us to have people who come in and like decide they're gonna build a whole new client and i wouldn't be surprised like after the merge kind of the the assumptions around like what the network should provide and what not kind of change and there might be a new team that pops up and that's like well you know we're going to build a client who like doesn't care about anything before the merge um you know if you want to validate proof of work sorry we just don't support that but we can be like really optimized for validating everything starting from the merge for example um and i think it's really valuable you want to leave the space for that because this is how you know we we keep having like better core infrastructure for ethereum um now i don't know like i'll shield the clients a bit more like when when you hear about like ethereum killers or like you know especially evm compatible ethereum killers or even like roll up solutions a lot of them reuse clients from ethereum like a lot of them you know will just forget and like build their whole uh kind of basically network around it uh tron avalanche optimism or all forks of geth um and polygon as well so i think that shows you like how good the software actually is um and we want to make sure that you know we we keep the software really good and we we give the space for people to come in and build like even better software on the foundation and for example aragon which is used to be called turbo geth is a client that like stores data in a much more efficient way but it also started as a fork of geth and now you know they still can bring some changes in but they've made like major modifications so i'm not sure it's like it's fair to them to call him a fork of geth anymore but they definitely started out as that and um yeah i think it's really valuable that we we we leave the space for new people to come in and improve on this stuff yeah well i want to keep on going on this conversation but but since we touch on it like why is everything a fork of death like why guess it's it's just so good um and and so i guess a couple things so i get this is extremely good it's also the all the oldest still running client um so there's a lot of you know people who are knowledgeable about it um i think the the license is is quite friendly um and and yeah like also people probably expect that it's going to be maintained you know forever like like for example parody was was very very uh uh popular as well and the the original team kind of walked away from it and there's been others who've like attempted to maintain it but like it's a really hard job to maintain a client and so it's you know even though some teams you know can come in a few engineers it's there's like uncertainty about like well will this thing actually still be there like in five years or am i gonna have to move off to something completely different and i think the get team has like shown that you know they'll they've been there since basically the start of ethereum and they'll probably be there like up to the end of the theorem so isn't this just like a massive public goods problem with because like if we need these clients to be maintained basically until ethereum dies like how do we expect these clients to just be maintained for the next like you know multi-generation time frames right right so i think luckily like the space has grown in terms of funding and um i think with regards to just like basic maintenance like think about like paying maintainers salaries we're probably getting into a spot where it's it's i wouldn't say easy but like it's it's it's a manageable problem so whether that's like you know through large grants either from the ef or others uh or through clients have you know working with say layer two teams or whatnot um that can then get paid for that work like i think there's there's more and more options where like you know starting a client can be say like a profitable business in a way um i think the biggest challenge and something i you know i i want to spend more time on is aligning the incentives so that the risk reward of working on a client is is better um so right now you know most client teams or most client teams like devs at best have like equity in the company they work for right like everybody who works at nethermind has like nethermine equity everybody who works at consensus has consensus equity and that's like a very indirect like value creation to capture mechanism um and um and there there is like obviously some amount of risk to work on the protocol but it's it's it's less than like starting your own you know d5 project for example you're not like starting from scratch um but i still think that the kind of reward for working on the protocol which is you know from zero past year salary to like some equity in some company that's like tangentially related to to the client and and also not necessarily correlated with like ethereum's rise um that's like way too low and so what you know the risk is that people are are able to take like a little bit more risk so they go from like working on the clients to starting their own d5 project which obviously riskier but then instead of getting you know 10 times the reward or like five times the reward they get like 100 or a thousand x times the reward right um and so what what i really want to make sure is like that we can create mechanisms where we can have some like rewards for these people that's coordinated with like the overall growth and adoption of ethereum um and what this could be in practice is something like you know asking projects to like donate a percentage of their treasury you know when uh to some fund that goes out to client developers for example um and and something like that where like if you can get new projects like that that are just starting out to have like a social commitment to that um then you know a subset of those projects will be really successful and that kind of provides some upside to the to the different people working on this stuff um obviously once you get into the weeds of it there's like a ton of of this details about like how do you you know how do you decide who's in who's out of the list you know how do you white people how much do you ask for projects and whatnot but like generally i think this idea of like if we could get projects to provide some sort of like upside contribution or fun um that would help make working on a client like a much better risk reward kind of proposition um it'll never be obviously starting a successful d5 protocol but like doing that is also taking way more risk and and i suspect there's a lot of people who'd be happy with just you know like slightly better upside given the risk that they already take um yeah so so that's one thing i think is really important and where the community can really kind of innovate on in the next couple years is is there a world where it doesn't have to rely on like donations or contributions but there's actually a way to like turn this into a business like i know i'm pretty sure like it's like blasphemous for a client to like have some sort of like you know fee in it right like but but is there any way so a lot of them a lot of them have businesses but the problems like those businesses are like they capture such a small percentage of the value so for example like a very common business with like uh e2 or like you know consensus clients is like you can offer professional support to like staking services right like consensus does this and i'm sure i'm not super familiar but like i'm sure basically every team will do this it's like if you're coinbase and you want to use you know uh consensus's client you can get like you know enterprise level support and and consensus obviously generates revenue from that and i think this is why i was saying earlier like i think you can build a sustainable business into starting these clients but you i know they don't like token gains right exactly they don't have like the exponential upsides that you see in like a lot of crypto native stuff and i'm i i haven't seen like a good proposal to like embed that in clients directly um that doesn't require say like you know on chain allocations the dev funds and i don't think that's something we want to do right um it starts to feel like a part right at that point exactly right yeah yeah and like i i would be very uneasy to have like something on chain that like sends funds to a bunch of addresses or to want addresses that just seems and there was a proposal for it a couple years ago that got shut down pretty hard so i i don't think we'll get we're not going to get funds from the protocol um and i think the revenue is nice but it basically pays for the salary and it's almost like we need some mechanism to pay for like the the upside or like the equity and that's like the bit that's missing um and yeah donations totally might not be the the the final or like the best approach um if people have suggestions send them to me uh i'm happy to to try and uh to try and get those working yeah say if for a thought experiment for example say we figure out as an ecosystem how we do actually attach the upside potential of a token to building a client uh and then say again in this thought experiment that we we successfully figure that out and then all of a sudden clients and tokens are paired and then like we have some sort of just like mania where like oh i can like make my token go 1000x by starting a new client and then we go from having like a handful of clients to like hundreds and thousands of clients right is that a problem if we have like hundreds and hundreds of clients yeah so i think you know the easy solution to that problem is like you time gated right like you so you time and future gate it so you say you know your client has to be live for a year and like the ef if you want to build a new client you know come see the ef's grant program or some other you know monolith now or something and like you know we'll give you funds to like actually try this and prototype this but like i think if you have any that sort of mechanism you you require clients to have been live for like x amount of time and it's it's like extremely hard to start a client so like most people will give up before a year i suspect um um so and i don't know maybe like a year is too short like maybe it's two years i don't have a strong opinion um and then you you like feature gate it as well it's like well can you like sync the mainnet and like process these blocks like or you know post merge can you like be a validator so there's like a couple things that like uh and say if you're a validator like you know can you like keep these metrics right like can you like attest to like x percentage of the blocks can you propose blocks on times and i think it's it's not that hard to define like the the baseline for what a successful client is it's quite hard to build it um and there's been you know probably 50 percent of teams who've tried that like have not made it to like this bar historically so yeah i i think that would be the way to go um and like and then you know if we have twice as more like there's a you know there there's a discussion to have like you know how much do we need and does it bring extra efficiency or not um and but that feels like kind of a happy problem like if like the problem we're having is like too many smart people want to work on this um you know i'm sure we can figure out a way to to to have them work productively yeah i want to pick up the uh client diversity question uh line again because are there conversations in the very very very long term like 50 to 100 plus years about the inevitable centralization of ethereum onto one client do people think that ultimately one client will kind of win out or is there like a conversation that like oh we can we just need to be able to balance it just enough where right what are like the long-term thoughts about client diversity in the very long term yeah so i'm sure people like have very differing opinions so like i can speak to myself like in what i see but like it's so one of the challenges with like not the very long term but say like the short to medium term is like people have like a really strong sense of pride in what they built right like so people who build a new client they're not gonna like pack up and go home and like be like okay i'll just like work on geth instead like people put like you know huge amounts of resources and efforts into that and so i think they want to make it successful so i think there's like this um this i don't know like inherent like motivation for for different people who started these projects to keep maintaining them um you know i think i i would be weary of only having like a single client like in the future like if you told me that like i don't know in like 50 years we have like two or three that seems like less bad um and and the challenge is like if one client goes down and has a bug um then like the ethereum network basically stops working right and and again that's maybe something that like we change our mind on as a community but so far we've had like an extremely strong bias on ethereum to like the chain doesn't go down right and ethereum's been has had like a higher up time than bitcoin uh the bitcoin chain has like very early on in its life you know stalled for a while while they put out a bud fix like that hasn't happened on ethereum um and and i think there's especially like as more and more economic activity gets built on ethereum right like you you what what we're selling basically the people building an ethereum is this like settlement layer that does not go down and that you can always rely that like you know post merge every 12 seconds there's a new block that comes in um and if for some reason the chain had to go down like for two days or like even a day and this is this is like the you know the amount of time you'd expect like an a plus engineering team if there's a bad bug to like wake up in the middle of the night find what the issue is fix it test it and ship it and get everybody you know to update their nodes you know realistically you can't do that within like less than 12 hours probably uh and like if the ethereum chain went down for 12 hours that'd be terrible like just think today you know what would happen with like d5 what would happen you know with like all the businesses who like rely on being able to accept payments um with all the insurance that's like on ethereum with and if you if you look out five ten years in the future it's like if traffic is selling on this imagine it's like market close in the us or in asia and like you know you're selling for the day and like it theorems down so like if if people had to like expect the theorem to be down i think you take away you know 50 plus percent of like ethereum's value proposition um and so i think we really want to be in a spot client-wise we're like this can't happen right and i'm not sure what the right number is it's definitely bigger than one i think it's also bigger than two um like it's it's not 10 or 100 but like somewhere in that range i think is is really healthy um and and i think it becomes even more healthy after the merge because some of these bugs can have impacts on like people's stakes right like so if there's just one client and there's a bug in it and the chain goes down um you know you you basically you know can can lose people money that are validating on the network and that's also something like yeah it's a big part of the value proposition like you can be a validator and earn income and if you do things right like you should be penalized so yeah i yeah i i know that's my opinion like some people might disagree um and i also think yeah if we wanted theorem to keep innovating in like 50 years the way to innovate is often to build something new because like for example geth could not build what uh aragon has built just because they need to support all the current get users so like new teams are able to kind of leapfrog and and kind of you know if in 50 years we have like all zero knowledge based ethereum i suspect we'd have a client that's built to like support zero knowledge proofs like from the core from day one and that would be way more efficient than whatever zero knowledge implementation is added to get um just because you can take all the decisions making those assumptions so yeah i think we'll always keep a few um it's really important for the resiliency i know some people might disagree with that though i definitely want to get into the zero knowledge conversation uh later but i also want to pick up on tim's story uh because uh tim you came on a lot of people's radar because of your efforts on eip1559. uh can you talk about the transition from working on on uh baesu into eip1559 you touched on it a little bit but just keep on going down that story yeah so i i kind of mentioned earlier like you know at consensus we always try to think about like what are things we can do that really help the the community and that like we're maybe uniquely positioned to do um and 1559 we kind of fit that bill perfectly because um it was like a huge effort like we knew getting into it it would be huge we under estimated all big but we we knew it would be big and bigger than we estimated um and we also like you know we wanted people to use baysu so we were like well if we're the first ones to get like a test net with 15 59 you know people want to try that and it'll be it'll be good for us um and we also saw like you know no one was really working on it so like there had been some original efforts done but the team had kind of stepped away um or you know they they weren't super like it was it was like missing momentum basically um and um and it seemed like something that was just uh mostly like desired by like a very large part of the community like it was somewhat contentious but like it felt like it i don't know eighty percent bet that like this thing will actually make it on chain assuming it's safe um and finally also yeah it's knowing like when 1559 was first presented the get team like basically had a bunch of technical issues with it and no one had like really addressed them but we have like a really clear list of like problems to solve um and so yeah so we you know we decided to take like one or two engineers have them like look into it really deeply at first to understand you know are we missing something here um and then you know we just started kind of prototyping it i started running calls with like the people who had been involved in the past to see like you know like what have you guys done you know what were like the blockers what are like the things we're missing to get the main net um there were a couple like really big changes we made to the spec that that really helped simplify it um so for example the original 1559 eip uh had like this transition period so it was like on we're gonna have a hard fork and like on the hard fork block you're gonna start with like one percent of transactions in a block can be 1559 and then like over like six months or a year i forget you know you'll have a hundred percent or maybe 99 like you always leave a bit of room for like legacy transactions but you kind of transition this way and that was super complicated because like we would have clients maintain like two different mempools one for 15 59 transactions one for normal ones you have to create a block and like you detail i cross check them um and if we got to the spot where we wanted to like actually deprecate legacy transactions you have this problem of like somebody signed a transaction five years ago they walked away in the woods and like now they come back and they want to submit it to the network and like they can't because you know um so that's one thing that like even though in in theory it might er in practice it might not matter much like in theory felt very important to keep this property like if you've signed an ethereum transaction we shouldn't like lock you out of the system um and so uh micah zoltu found like a really smart way that we could convert legacy transactions to 1559.1 um where we set the the gas price to both the max fee and and the priority fee um and that allowed not only to like solve that problem but also to simplify the spec hugely because then we had a way to have a single man pool and you can just like treat all transactions as though they were 1559 style transactions um and and you know like we just spent like a year basically that was one of like the bigger kind of you know fixes to the spec but we spent like a year going over this and trying to figure out you know what are like the problems here how can we fix it uh the other huge one was um there was no proof or like analysis that showed 1559 actually worked but everybody who yeah everybody who like had specked it and like looked at it from the client side kind of understood intuitively why it would work and why it was a better system but like some people were uneasy they were like well you know what if we're wrong um and so uh and this question is about like we don't really know until we see it in action and we can't really know ahead of time is that kind of the issue no it was more about like the economics of it like we don't know if this is like a sound economic system and like when you think about it you're like it sounds like it but like we were scared that like some economist would just look at it and be like oh no this is absolutely broken like you know somebody will do this and like you know kind of bypass the system um and so somebody basically helped and and hired tim rothgarden who's a computer science and game and game theory professor uh or economics professor who specializes in game theory um and he basically spent three months with his team researching in 1559 and trying to come up with a formal proof or model of like does this actually meet uh the goals that it's intending to um and he published like a 50 page paper the tl dr of which was yes it basically does um yeah and that was that was hugely valuable because at least it was something we could point to that was like you know somebody with like deep expertise in this field who also understands ethereum like you know was able to analyze this and like there was no like massive shortcomings in it um so it was just like yeah spending the time to doing all this and towards the end we got to a spot where like we were actually ready to put this on the main net and i think there was more work around like trying to educate the community around like what 1559 does and doesn't do uh so i spend a bunch of time wrote a bunch of articles trying to to explain that and like you know what can people expect like for example like you know people thought 1529 would like massively lower transaction fees on ethereum and sure it's trying to explain like what does it actually do to transaction fees um and similarly you know there was a lot of talk about like miners and how would miners react so i spent a bunch of times uh working with folks not only to analyze that but also to like talk with minors and you know try to explain to them this change um and trying to explain to them you know other revenue sources that they could get and like how they report pair for that um yeah so i don't know it was a lot of like very technical work at first then kind of transitioned to more like community outreach and just like a lot of explaining uh 1559. so a lot of your eip 1559 work came through working on besu yeah yeah basically and it was extremely helpful to be in that position because i had a dev team that could actually write the code right yeah and then and then you actually transitioned into a different role in ethereum how long after did that happen uh yeah so basically i think i'd been a consensus for two and a half years or so um and i was always like involved in the awkward ev's call because i was i was on one of the client teams um but i was also kind of the less technical person on those calls like i was kind of the only non-engineer there basically alongside hudson uh and sometimes you know other folks show up like puja and james hancock was there also earlier on um but like you know the cause is basically 90 engineers and then like some kind of people like us uh who are more on like the project and product management side of things um and towards uh basically the end of 2020 uh i was talking with hudson and he mentioned you know he had been doing this for i think five years up to then and wanted to move to something new um and you know that just felt like such a great opportunity like it felt like something where uh i knew kind of you know how awkward has worked uh i think i had some ideas about like how we could potentially improve it and also like my time like my opportunity cost for doing this wasn't that high like you don't want an engineer to run awkward devs like you want them to like write the code um so i was like i'm one of the few people who like understand how this whole thing works but also i can't actually write the clients so like the like next most valuable thing i can do is is try and like manage or run this whole thing um and and so yeah i got to talking with hudson and it seemed like a good transition one thing the ef was super mindful about is they really don't like taking people from projects and like bringing them into the ef uh they really want to like you know push many projects to thrive um so so one thing we did was i took basically six months to transition out of my role at consensus so that we could hire somebody new and and train her uh who's basically the new product lead for basu today segeda um and and i kind of started working part time at the ef and like went part time at consensus once we had hired sagitta so i could just you know kind of help on border and and then yeah over basically uh i think it was around march i was just like full time at the ef and no longer at consensus for the listener that isn't familiar and which i mean includes me at this point really can you just like tldr explain like m5 what hudson and how your role is with with the ef like what is it that's really happening right right um not super easy but like so the the main thing is every two weeks there's this call where all the different client developers get together to discuss changes to ethereum right this is how we plan you know network upgrades uh how we discuss you know new eips and whatnot and you need like a moderator for this call so that's kind of my job like a very basic level is like every two weeks i sit on this youtube call and i you know try to make sure that we uh you know we get through all the topics um from there you know to make sure like those calls generally go well um i spent a lot of time thinking about how can we make you know client development like a sustainable and like thriving thing and so that you know that includes things like working on grants programs or just you know talking with the teams and uh organizing workshops when we need to so just like you know making sure that like the kind of working environment around this is is is good um and then the other half of my job is basically explaining all the stuff that we do to like the broader ethereum community um and so stuff like this podcast or like uh you know writing these tweet threads that i do or writing articles um just trying to like take what we spend like all our time on and make it accessible to somebody who's like obviously familiar with ethereum but like doesn't want to spend two hours every two weeks listening to this call and trying to dig through like eips and pull requests and whatnot um so yeah i really see it kind of like twofold like internally work with the client teams make sure that like we're you know we have a roadmap for ethereum we're executing on it and like trying to like unblock the biggest blockers whatever they are as they come up and then kind of sharing what's happening with the broader ethereum community so that they can have like a feeling for what happens and obviously can participate if there's something that they they support or disagree with then my hope is like somebody can just like skip my tweet threads and be like oh man this is like a terrible idea and then like engage on this like one specific issue uh rather than to have to like listen to all the calls all year long and like the hope that you know nothing goes wrong right so you're you're a relayer between the community and all the client teams just relaying the data right and then yeah in both ways right like hey client teams like the community has these concerns or like hey client teams like there's this thing called eip159 that the community really really really likes uh and then probably vice versa too right yeah and i think that's given me too much credit so it's like if i had to simplify it i think i'm a better relayer from the core devs to the community and we've actually hired somebody to do kind of the opposite uh so trent van epps uh works with me closely and if i had to describe i'd say he basically does the opposite he's like better at going to the community and getting their opinion and bringing it back or like if we have something that really affects kind of the community like he helped a lot with 1659 and now with the merge for example trying to like reach out to like all the projects um yeah so it's basically two full-time jobs one is sending the information out and everyone is getting the information and yeah we obviously work yeah yeah and we work pretty closely together yeah hey guys i hope you're enjoying the show with tim thus far in the second half of the show we are getting into the details of what does it actually mean to make changes to ethereum who actually is a core dev am i a core dev are you a core dev uh some interesting conversation some interesting thought experiments coming up in the second half of the show before we get there a moment to talk about some of these fantastic sponsors that make the show possible matcha everyone's favorite dex aggregator has just launched an open beta for gasless trading so if you're trading more than five thousand dollars in common eath and wrapped bitcoin pairs then your gas fees on matcha are free and that's why you should be using matcha matcha routes your orders across all the various defy exchanges on ethereum polygon binance smart chain and gives you the best possible price without any trading fees or unnecessary slippage matcha has smart order routing that splits your orders across multiple liquidity sources if matcha sees that that it gets you better pricing trading on matcha is super easy because it pulls the liquidity for me into a single and easy to use platform and has even saved me multiple times from accidentally picking the wrong decks to trade on and getting a bad price matcha also allows you to make limit orders on chain so you can set and forget your d5 trades and they will go through automatically while you're away so when you're making a trade head over to matcha.xyz bankless connect your wallet and start getting some of the best prices and most liquidity when you trade your crypto assets living a bankless life requires taking control over your own private keys not your keys not your crypto that's why so many in the bankless nation already have their ledger hardware wallet which makes proper private key management a breeze but the ledger ecosystem is much more than just a secure hardware wallet ledger is the combination of the ledger hardware wallet and the ledger live app and if you're used to seeing all of your crypto services and favorite defy apps all in one spot ledger live is where you want to be not only does ledger let you buy your crypto assets straight from the app but it also hooks into all of the defy apps and services that you're used to using ledger live you can stake your ethan lido swap on dexes like paraswap or display your nfts with rainbow you can also use wallet connect inside of ledger live to connect to all the other d5 apps that keep coming online defy never stops growing and the ledger live app grows alongside with it so click the link in the show notes to see all of the defy apps that ledger live has and stay tuned as more apps come online and if you don't have a ledger hardware wallet what are you even waiting for go to ledger.com grab a ledger download ledger live and get all of your defy apps all in one space so like what's that like like what's it like to work with all of the client teams like our because they're all engineers right and so like the their engineering type that like the meme is the engineers they're really good at code but they're not really good at communicating and sometimes they're all kind of like lone wolves like what's that just what's that experience like right i think most teams have like some people who like are actually pretty good at both who are good on like the engineering and like the more project management level and and typically they'll like self-select those people and like have them participate um so i don't the city have to interact with like all the engineers right i can interact with like the subset who decides they want to like participate in like the project management um but yeah like i mean and i think i kind of see it as my job to like fit around their schedules or like their constraints rather than the other way around like you know they have to like write all the codes so you know uh yeah i just generally try to to to work in a way that's convenient with them whether that's like whatever platform you message them on or like you know what time you schedule meetings with them like just like all these small things that like you know uh ideally don't add too much friction to their day job of actually building the clients um but yeah like i know most teams have been like great to work with like i don't have any complaints about like them um and i think the the other part that's like really interesting is i work with with those and spend most of my time with those two but also like tend to work with basically everybody who submits an eip that gets you know some amount of traction and then i kind of help them you know get this in front of the right people um and and uh and do that as well so yeah i know i'm stoked like i get to work with like all the smartest people working on the protocol um and kind of observe and like sit around as as as they like build a theorem uh do you do you have to like do you worry about like your own impartial and uh what's right word impartiality impartialness like do you like it's like hey there's the thing that i'm interested in hey core devs let's focus on this or like are you kind of like a steward that is supposed to be apolitical and just facilitating communication right well have you ever did a balance that at all yeah yeah totally something i think about so for example when we did 1559 and when we decided whether it was going to be included i asked hudson to come and run those calls because i obviously had like a strong you know feeling there um i think yeah generally i'll try to be on the more impartial side um i think you can't be like a hundred percent impartial as well like uh and this is like when we were having 1559 you know conversations for example you know of sometimes there are like some bad faith arguments and if you just give you know as much of a platform to like bad fat arguments as the like good fat arguments you're not actually being impartial right you're kind of tainting the thing and i think that's something that's like a bit more subtle like that i try to think about a lot um at the end of the day like you know i can't really do much like even if i feel really strongly about something if the devs don't want to implement it like you know i can't can't force them right like and this is true of anyone not just me like you need to like actually convince people because and then it's like even if i convince the devs and like all the community hated it well nobody would download the software and so they'd have to do that so i think you need to be somewhat impartial but it's also um and what i spend like a lot of time like focusing on is finding out like what's the actual bit on which people disagree and like focusing the conversation there because i think a lot of time we lose like there's like you know say 10 arguments um but there's actually like one or two of them that are really important and like if we if we get like resolution on those people will like you know be okay with like all the other small issues um and so when we have like these discussions one thing for example i found really helpful is outside of the alcor devs called reaching out to all the client teams and being like hey what do you guys think about this what do you guys think about this um so that i can get to the call and be like well you know have the teams think this have the teams think that you know and like we can discuss this like one specific point of friction and like ideally move it forward um yeah so i yeah i know i think being somewhat impartial is really important i don't think he could be fully impartial um and another so for example another like bias that like i and i think all core devs have is like will benefit the ethereum mainnet over other like implementations of ethereum right uh so this idea of like interrupt like we won't try to like kneecap other implementations but like we'll always kind of put the ethereum maintenance first right um and you know that's obviously a bias because somebody from like cello or like avalanche come on the call and be like well you're not impartial and i think we're fine telling them well you know like we want to focus on the ethereum and like um so yeah i i think there there are like these decisions we've made and and i tried to like adhere to like the rough social consensus um and and yeah just to try and highlight like the biggest point of frictions between different people so we can ideally like spend most of our time discussing those this uh line from the cypherpunks i'll i'll repeat whenever i get the opportunity is that cyberpunks understand that the code they write impacts the people that use it and like the all-core devs call is like it's like the war room for all all changes all all bits of code that you know in theory will impact generations and generations down the line and like it's probably really really draining to think of every single decision as like all right well what about three three generations from now what about 200 years from now but like is is that people's thoughts and considerations like behind the scenes so i think the the part where we have it may be slightly easier than that is people are willing to attack the ethereum network today so we could usually get by saying like you know will will somebody attack this right like if they can um and and i'm not sure that's like a perfect proxy for like is this gonna be good 200 years from now but we we can also make more changes in the future right like if we realize something's wrong in 10 years i hope we'll be able to change it um so the one kind of main bit we always think about is like you know what's like the security implication of this and basically every eip that gets proposed kind of goes through this somebody like is using the ethereum they're like frustrated by something and they're like man i have like this perfect idea of a feature that like you know would make this so much easier to talk to other projects and they're like they all agreed like man this is great like such a good idea and then they come on cordes called and like they get pointed out well you know this like has like three security issues in it if we introduce it um and then at least have the eips just die there um and the ones that usually make it in you'll have the author kind of then spend you know months and in some cases years trying to come up with like some workaround that's like provides the feature that they originally wanted to but is also safe um and this is like 50 to like 90 of the work of actually getting an eip on the mainnet is like okay how do we you know make sure that it's safe um and that's really like the main lens by which we we we kind of view things um obviously there's like this implicit assumptions like we want to do stuff that's useful to people um but generally that's not like the hard part like it's easy to like look at a new feature and be like okay yeah this would help you know because it lowers gas cost because it improves ux and what not but then it's like it has all these other problems like that that people might exploit and and how do we how do we address those so so obviously vetting the code for for making sure it doesn't break ethereum is really really important but like have you ever experienced like a social attack as in somebody's trying to make their way into the all-core devs team to or to calls to implement some you know some social some social coordination attack because as as we know even outside of crypto like most most hacks are just like people social engineering other people right right have you ever has any story like this ever arisen so i think what we see a lot um a lot might be an overstatement but like what we've definitely seen like a few times at least is um people who come in with a with an eip and they have like an incentive to get it in um they're like much more unrelenting than the people who don't want to get it in so like say you come up with an idea and it's like you really want this and you know people are like well there's problems a b and c would it and and then the next week you come up and you're like well i really want this idea and like the person doesn't want to like repeat like i told you you know there's problems a b and c and and and you see that like it's it's almost like uh a war of attrition uh where like people would like try to bring up stuff over and over and over even though like the fundamental issues with them had not been been like addressed um and i think we've seen it a bit less recently but yeah in the past i think you know the way with that is we would just like tell people like you know like you can't really come back on the call until like you've addressed these things um and once you have you know we're happy to but i think that's really the things like the imbalance between people who want something and people who don't want it the people who don't want it having to like constantly re-justify why uh and like not wanting to like it's you know like it's not really their job so that's one thing i'm pretty mindful about um you know i think that like more subtle engineering attacks you know say like like very like i don't know like uh extreme scenario like the nsa infiltrates like you know a core dev team i think this is where the the clock the client diversity also kind of matters because like no client team can like single-handedly push a change unless they kind of convince everybody else right um and and then even if the client teams agreed then they'd have to convince the community to do that as well um and you can imagine stuff where like you only need to convince the client teams right like if it was like some backdoor and a cryptography function you know the amount of people running notes who can actually verify that is quite small um but like if somebody was coming in like shilling you know like their bls 12 library non-stop and like i don't know say like the get team was like oh yeah we're really on board with that and like other teams thought something was like fishy about it it it it would probably just stall right or at the or if not you know other teams would be like okay we'll do this but like we'll use a different library and so you kind of mitigate any impacts of that um and also like it's worth noting a bunch of teams have people that disagree with each other on the team right like so uh it's quite possible that like somebody again said it's like this example somebody tried to put it back door and to guess you know that the get team might not agree about you know do we want to use this library or not um and and so i think this is where it's really valuable like you don't want to have just one implementation that's guarded by one team because like if for whatever reason that team got compromised like you know the other teams kind of act as a sanity check um and that's that's pretty good yeah so part of the ethos of this whole industry is that it is reflective of what the people want right and the nature of open source systems is that you can contribute to them if you think that you have something valuable to contribute so vet this statement for me if you have something that you think ethereum can should go into ethereum you can actually get that done and and i'm talking about like not you or the client teams i'm talking about joe schmoe from you know wherever wherever in the world has a really good idea but he doesn't know you he doesn't know danny ryan he doesn't know any of the client teams yeah but he has a good idea can he actually get that code in there or is uh that is actually updating the code gated to a very small privilege number of people right so i've actually we have eip1 which kind of describes how to do changes to ethereum and i've updated that a note about this you know i think the difficulty the difficulty is proportional to two things one is how big of a change you're trying to introduce if like you know uh something that happens all the time for example is some teams working on like roll-ups for example use a pre-compile and they think the gas cost is too high and you know they come in like we don't necessarily know them and they're like look this gas cost is too high it would help us a lot if it was cheaper and we've run some benchmarks and we think it's safe if it's cheaper so like you know they can come in and like they're obviously familiar with ethereum like they don't know anything but like it's a simple change they're able to add rationale for it and that's pretty straightforward if say you want to like change how you know say an idea on the scale of eip1559 like you're gonna need a lot of like time and effort and convincing people to do this um so i think yeah like one part is like the difficulty is proportional to how big the change you want to make is and it's also proportional to like how big ethereum is right like because you're changing the system not just for yourself but for everybody else right so the basically the more ethereum grows the harder it is gonna be to make big changes because like you just have so many different people that depend on it um so you know like can like a random person who knows nothing about like ethereum come and you know make a massive change like realistically no can they come you know without having like connections and like propose something that's like intelligent and like well scope and like be heard and like have it critique like 100 like we get ton of those um if you're not sure you know you can reach out to me i i get emails from people that are like i want to come on all core devs and talk about this and i'll try to like let them know you know just like set their expectations and even if they have an idea you know i can tell them like look even if this works this is gonna be something that's gonna take like a year plus to get done and like you know if if this is something you want to commit to i'm happy to help you and like i'll put you in touch with you know people who can review and give you feedback on this but like yeah people should expect that it's not like a trivial thing to come on ethereum and and change the protocol and that's by design so tim who is an all-core dev how do you define that right uh hard questions so i think we use all core devs to define the call not like the people and i think i i've tried to like break it down between like client developers so so the people who you know actually write code into one of these clients um and then we have a bunch of other folks on the calls for extremely valuable like researchers obviously eip champions um i find it easier to think about that like what the people actually do i think when people ask this question they're like asking implicitly like who gets to make the decision um and you know it's it's a balance like i've i've mentioned this a couple of times already but like even for example this is i'll take the i know most like steel men version of this is like vitalik really wants a change vitalik has a list of changes he really wants to see on ethereum that's like don't get adopted because you know for whatever reason people don't think they're safe or like they're just not the priority and like even him like can't like force something through the process and get like everybody to like drop everything they're working on and unless they can just like rattle off like off a list of things that like that you know that vitalik wants that isn't going in just a really quick list i don't have the fullness but the one uh he talks about a lot is uh removing self-destruct uh that's like his uh one of like the fairly simple you know things we could actually do uh that has a lot of like kind of ripple effects right and that's an example where uh i think he'd be happy if we like decided like oh we're gonna remove saw this truck really quickly um and then when we look at this we're like well how the hell is this gonna work um and and nobody else i guess you know by nobody else has spent their time like figuring this out so um i think that's a good example where like you know and and and there's valid reasons for removing yet it helps with a bunch of stateless stuff and whatnot like he doesn't just want this for fun like this there's a strong rationale for why um you know i guess as a group we just end up having other priorities and and like nobody has made that their number one priority so even him and i'm not saying like it's not gonna happen but it's like even him can't like get everybody to drop some everything and focus on like the thing um and and if you know he might come up with a proposal that's like important enough but people would have to all make the call like oh yeah he's right and like we should drop everything to work on that um and so yeah when people ask about like you know who has like the power to make these decisions obviously like the group the group decides you know what code goes into what hard fork uh we have this concept of rough consensus so we you know we want people to generally agree we won't you know require like 100 agreement like a lot of people will just you know sometimes say like they disagree but not enough to block it if people have like really strong objections like it is possible for somebody to like you know single-handedly block or like delay something if they have like a sufficiently strong objection to it um but there's no hard and fast rule here um and then yeah even so if you have consensus amongst all the client teams and like some of the folks like say the the eip champions of the researchers you still need the community to adopt the change right like and you need everybody to upgrade their nodes and i think we try to be like we don't want to be into a spot where like we just ship a bunch of software and nobody upgrades it that's actually very confusing like it's bad and it's a situation we want to avoid so like generally the core developers won't like ship and upgrade that they feel would not get adopted by the community um but but it is a possibility like if if for whatever reason we you know we messed up there like we like misread things and like the community decided this is actually bad you know they don't they don't have to upgrade um and yeah so so i think you know obviously if you want to make changes to ethereum there's like a lot of value in spending time to understand how this process works and and you know kind of gaining trust from the people in it and you know providing good contributions and whatnot um but i don't think there's like anybody who can like single-handedly like change or like derail the process at this point and and i think that's like really really healthy uh it's probably way underrated like when like if you look at say like the the distraught or like the straw man like arguments against like our governance process and like how uh you know people will like say again like vitalik can like influence the entire road map and what actually happens i think there's like a massive gap there and like yeah that's that's really really valuable so in phrase differently would you say like a core dev is somebody that has uh a good idea the motivation to actually commit to that good idea the resources in order to prove that that idea is good and then and then like you know is ready to follow through on carrying that idea all the way to the very end of it of its execution that person is a core dev yeah yeah yeah and again it's like a fuzzy label right like so uh like that seems generally like a good definition i i think like what i don't like about this label is it's also like say you have like a researcher right like who spends you know two years coming up with something and they don't actually implement it like they're not at core devon that they don't write code but they're like hugely valuable because like they they've done like the work like for example everybody who like worked on the beacon chain spec but like doesn't write code for it you know i mean i don't know like you could debate whether you call them a cordev or not but like they're definitely a super critical part of the process and you know i i'd call it like a researcher but they're involved in the protocol governance for sure um so yeah it's a fuzzy label i'm just getting like images of the the whole like spartacus meme where everyone stands up and says like well i'm a core dev i'm a core dev i i wrote a tweet that helped the core devs like learn something like oh i i wrote the introduction paragraph to this eip i'm a core dev i'm a core dev right right yeah yes and like i mean i don't know i i don't want to like exclude people from it and i think yeah uh yeah maybe at the point we'll just start calling it all chords all together and get rid of that problem that's pretty funny um is it mean solomonia a chord f i mean i think um a lot of people like almost dismiss i mean because he of his attitude he's made like mega important contributions to theorem like he's worked on state channels monologue now was obviously huge um so you know i i think like people are are too quick to dismiss i mean um yeah that was mainly another reference maybe i'll try and find that clip and put it at the end of the show but when uh yeah yeah you know what i'm talking about listeners stay to the end but we'll put that one in the end uh so so tim uh are you gonna just facilitate these core dev operations for like the rest of your life or what what's what's next on the horizons for tim man i don't know um i i think it's really hard in a space that moves so quick as a theorem to like have like say a five year plan right because you know uh yeah is it possible to predict i you know i felt like obviously when i joined this like one of the main things i needed to do was get the merge done like that seems like a no-brainer um you know like and we're working on it it's the next big thing uh we're also gonna have like the the withdrawals from the beaking chain won't come in the same upgrade as the merch they're gonna come a few months after and like you know if if i think of like the merge being done for me it's probably those two upgrades um there's a bunch of stuff after that i feel really strongly about at the protocol level uh so the most the biggest one is stateless um so the the idea is that the amount of data on ethereum kind of keeps growing over time as more people use it and there's more data stored um but it'd be really nice to have a way to cap like how big a node is for a bunch of technical reasons um but you know just to have a kind of a constant or a ceiling on the note size um that's something we've been talking about since like 2017 2018 and and that i think after the merge we have a good shot of like prioritizing um that and like sharding but charting happens much more on the consensus there side so like the beacon chain teams will probably handle sharding for like you know 90 plus percent um whereas uh stateless happens mostly on the execution side um so i think that's like another big problem that like i have a uh i've basically been there since we've started talking about this i have a good feeling for like what the different trade-offs are how we can maybe get this done um yeah i i feel pretty strongly about getting this something may not i think if we had sharding and proof-of-stake and i also felt pretty strongly about the eip1559 like if with eib1559 proof of stake and and stateless i think you know ethereum could probably go along for 10 years without any upgrade and like still be you know be good um you know i think there's a bunch more stuff we'll want to do to make it even better but like yeah those things just felt to me like the major kind of flaws or like issues with the protocol and and i'd really like to help fix them is your entrepreneurial itch sufficiently scratched right now i mean i think it's i think you know my work is great in that it is extremely self-directed like an entrepreneur and i think i do have like the ability to like shape things you know like the other big part of of like stuff i like to work on which uh is like a bit lower on my priority list but it's like how do we formalize the governance processes for ethereum right like um and one thing for example i think is like a flaw in our process like i don't like that we actually rely on these calls every two weeks to make decisions i i think it's like a bit it's not great for like uh different time zones and like people who can't make the calls i think some people also like are not you know most comfortable like going on a call and like talking about stuff like they're more comfortable writing um so i i would love it if like we moved to like a mostly async governance process and we would still have calls you know i obviously we're gonna always need calls to like discuss stuff there's things such as higher bandwidth to discuss on on video um but like another way to phrase this is like i would be really happy if like the way that i end this goal this work is like by putting myself out of a job that you don't need somebody to run those calls every two weeks um and you're still gonna need people to facilitate but like it it does feel like the amount of context that like myself or danny needs to have to do this is extremely high and like i would love it if if you were able to like you know have a much simpler process where basically anybody say with like a project management background would be able to take in if like for whatever reason i stopped doing it um so i think that's from like a process perspective um i that's like something that bugs me and rick dudley had a tweet about that i think a few years ago that stayed with me he said you know if if you're if your engineering process uh requires genius to work every time you don't have an engineering process you have an artistic performance and i'm like i feel like we're we're not quite an artistic performance on all core devs but like we are a bit too close to that side for me to be to be comfortable and i really like it if we had something that's a bit more formalized and less dependent on like live calls that are run with people with a ton of context um yeah if somebody had to say yeah we'll see i mean once that yeah once all that stuff is done we'll see what i do next but i feel like i've got it on my plate for the next couple years uh so if somebody pinned you down and forced you to answer what would your answer be for win merge say 2022. so that's it that's a good hedge the whole year any if you if you had to pick a month yeah you you month is hard right so the reason picking a month is hard is because you know what i can control is like how much focus you know we have on the merge and i that's like my main thing like making sure we keep you know the vast majority of our focus on that think assuming and and then the other thing that's hard is like you know we might find like a massive bug at some point and and like if we find that a delay stains and it's like it's hard to know by how much but like assuming we didn't find that i think like early next year like sometime in february we can probably have the code like done right again we we might not like that might not happen if there's like a major issue um but assuming we got that the question is then how quickly does the community how quickly can the community upgrade for the merge and this is like a bit hard because the merge is like a really different upgrade it's not just you you update your node and that's it right like if you're a validator you're gonna need to run an execution client as well if you're like you know coinbase or like binance whatever running nodes you're going to need to like kind of change your setup and we we want to make sure that the community has time for that like we don't want like the merge to work at like the consensus level but then everything breaks right like all the staking pools break for example like that'd be terrible um and so it's hard for me to gauge exactly how much time the community needs what we've been doing uh trent has been taking the lead on this is having these merged community calls and literally they're kind of we'll share some updates but most of the call is just like answering people like wallet developers infrastructures questions like and and also figuring out like what do we need to do to get this like in an i easily in a good form for you to upgrade um so we've had one a month or so ago we have the next one this friday i think that's a way we can kind of speed run the process where like we don't want to wait till the code is completely finished just like reaching out to like infrastructure providers and we want to solve as many of their issues proactively as we can um and then it's like yeah so like if the code is done in february like we need two months we usually take about two months to deploy an upgrade that's like you know april but if for whatever reason like you know if etherscan was like well this is completely going to break things and like we just learned about it the last second we'd have to make a call like you know do we make it three months or do we go with like a broken and i say ether scan but like i suspect would be like all block explorers right like um and so that's why it's hard like i i would be disappointed if we don't get it in like the first half of next year um and i'm doing everything i can to get it you know within like as close as possible to the start of that first half i i don't think you know like i i think the code is not going to be done until like january or february so like you know i i think it's unrealistic to expect things like before you know april ish or you know late march or something like that if everything went like absolutely perfectly um but yeah then there's like a couple months that it's just unclear how how quickly we can get this out then and i think everybody involved in this kind of prefers safety over like shipping it like two weeks earlier um yeah so it's a matter of just not only having the code and having that just vetted and tested but also like watching coinbase raise their hand and coinbase says hey we're ready to go etherscan says hey we're ready to go and just like oh we get a gist of like everyone kind of says they're ready to go and so like let's go ahead and do this i guess yeah yeah basically and also like we we need to make sure things like mostly don't break so it's fine if they don't have like perfect support like we saw this with 1559 right like metamask didn't like support it like right out of the gate i took them a couple weeks after and i don't know i'm i'm fine with that if assuming like it doesn't like lock out users in any way i'm fine if like you know the protocol upgrades and then like things are maybe a bit like like sketchy for a week or two just as like infrastructure sets up but you just don't want to fundamentally break anything right you want people to be able to use the old version um and and have that worked and yeah so i i'm not saying we need to wait for like every single like infrastructure provider to be ready you know and there's good competitive pressures amongst them like for example you know if binance supports it but not coinbase like coinbase obviously wants to do it if like you know infra supports it but not alchemy alchemy wants to do it so like i'm you know i don't want us to like do kind of central planning here but i do want to make sure we're not completely breaking some major parts of infrastructure yeah well tim this has been a fantastic lesson as to like what it's like to be working on a client team and also just working very very close to the heart of ethereum if there's one thing that you wish was more common knowledge throughout the broader ethereum ecosystem what would that be um yeah i think that bits i mentioned earlier about like the process actually being quite decentralized now at the governance level i think even within the ethereum system some people might have like a picture that like you know certain folks are able to push stuff or like you know to like single-handedly veto stuff and i think yeah that's like gone less and less true and and that's really healthy um yeah so that's probably the one thing yeah well tim i i hear those criticisms and critiques all the time and so uh thank you for coming on and and producing a show with me where i can actually point people to actually direct them here so i that this will be a new resource for that awesome awesome tim thanks for coming on thank you for having me cheers we need a consensus of the core devs to do that i'll do it uh i mean you're not a core dev can i be a cordov no you're not a core dad how do i become a core dev um we'll talk about that offline hey we hope you enjoyed the video if you did head over to bankless hq right now to develop your crypto investing skills and learn how to free yourself from banks and gain your financial independence we recommend joining our daily newsletter podcast and community as a bankless premium subscriber to get the most out of your bankless experience you'll get access to our market analysis our alpha leaks and exclusive content and even the bankless token for airdrops raffles and unlocks if you're interested in crypto the bankless community is where you want to be click the link in the description to become a bankless premium subscriber today also don't forget to subscribe to the channel for in-depth interviews with industry leaders ask me anythings and weekly roll ups where we summarize the week in crypto and other fantastic content thanks everyone for watching and being on the journey as we build out the bankless nation 
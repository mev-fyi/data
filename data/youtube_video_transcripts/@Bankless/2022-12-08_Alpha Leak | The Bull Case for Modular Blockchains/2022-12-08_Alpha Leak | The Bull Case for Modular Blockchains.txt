thankless Nation welcome to this episode of alpha leak where we are talking about fuel network with John Adler fuel network is a layer 2 on ethereum but it's a different kind of layer too and that's really what I wanted to explore here today what about fuel is so different why is it built in the way that it is and why does John Adler believe that he is skating to where the puck is going where every other Layer Two is to focus a little bit too much on the short term in this episode you'll learn about why fuel is built in the way that it's built how it's different from the ethereum virtual machine and why the fuel VM the fuel virtual machine is new and improved and shiny and super fast and super executable and is going to be according to John The Logical conclusion of a layer two you'll also learn a little bit about the inner workings of fuel beyond the fuel VM the other parts of the fuel Network that make it tick and overall just get John's philosophy onto the layer 2 space fuel is a sponsor of the bankless podcast but that is not why we are making this episode we are making this episode so we can dive all the way down into the details that make fuel tick so we can learn more about it so without further Ado we'll get into this conversation with John Adler of fuel right after we talk to some of these fantastic sponsors that help you go bankless the reality today is that five corporations control the entire world of social media they own our names they restrict our content they monitor our every move and their time is up thanks to our sponsor diesel diesel is a layer one blockchain built from the ground up to decentralize scale social networks with DSO you can own your own identity content and social graph and take it with you across hundreds of applications already built on the censorship resistant diesel blockchain diesel storage advantages make it finally possible to build infinite State applications that can efficiently store and index large amounts of content and data fully on chain DSO also offers multiple crypto native monetization Primitives for developers and creators including social nfts social Dows social tokens and social tipping so in order to experience the social layer of web3 go to dso.com and claim your username that's deso.com if you've been listening to bank lists you know that we're fans of the modular blockchain thesis the idea that blockchains will separate execution from data availability and consensus allowing all three to become the best versions of themselves and fuel has built the fastest modular execution layer in the industry by supporting parallel transaction execution fuel unlocks significantly faster throughput for the web for your world fuel also goes beyond the limitations of the evm with its own fuel VM which is more efficient and optimized opening up the design space for developers and lastly fuel brings a powerful developer experience with its own domain-specific language Sway and a supportive tool chain called fork with fuel you can have the benefits of smart contract languages like solidity while adopting the improvements made by the rust tooling ecosystem letting the fuel development environment go beyond the limitations of the evm if you want to learn more there's a link in the show notes to see how you can get involved with a fuel Network in all of my years in crypto I have never been hacked scammed or lost money to a thief and a lot of that credit goes to my ledger Hardware wallet the love your Nano X and The Ledger Nano S Plus Hardware wallets allow users like you and me to secure and manage all of our crypto assets and our nfts all with the security of storing users private Keys offline and Out Of Reach from hackers The Ledger Nano X is the perfect Hardware wallet for managing your crypto and nfts on the go because it connects to your phone with Bluetooth and has a nice big screen for easy transaction readings Ledger has also upgraded the iconic Ledger Nano s and made the new Ledger Nano s device more defy and nft friendly making it the perfect Hardware wallet for beginners Ledger has truly maximized for both ease of use and security so discover which Ledger device is best suited for your journey by going and visiting shop.ledger.com welcome bankless Nation to this edition of alpha leak where we are talking to John Adler about fuel Network John welcome to the show hey David thanks for having me John you want to introduce yourself a little bit and provide some background and how you got into crypto and and we'll lead into that story all the way through to where we are now with fuel Network yeah sure So currently I'm I guess most recently and also currently I'm one of the co-founders of field labs and also Celestia Labs which are building two separate components of a modular blockchain stock uh which we'll dive into a bit later how I got into blockchain uh there's a story that I I feel like I tell this every podcast but basically my old grad school advisor when I was in grad school at UFT was really into blockchain uh he was involved in the early days of ethereum and and so on uh so he's been around there for a while uh one thing he likes to show students is this uh selfie he took with a mount Cox Sign Guy in Japan if you remember those like this guy was Asylum give me back a bit give us back our Bitcoins or whatever in Japan when Mount Cox happened and then he's a selfie with that guy so he's been around for a while he kind of introduced the students to blockchain and then since then you know that's kind of where I got exposure uh after that I guess I went to consensus to do uh General Layer Two scalability research so things like channels uh plasma and so on that's also where I created the optimistic Rob design Paradigm or I guess at the time it was called minimal viable merge consensus because it was intended to be minimally viable and not the end game since then I think we've come up with slightly better construction such as Sovereign Roll-Ups and so on uh but yeah and then after that I left consensus to start a few labs and Celeste labs that's kind of the tldr of my journey so you uh created the you said you created the optimistic roll up design structure does that mean you created what we now know as optimistic Roll-Ups is that is that what you said yeah I guess you could say that uh there was a bunch of competing and close design architectures floating around at the time which is which should surprise no one right everyone was kind of in a hodgepodge of various ideas with different parameters in terms of data availability how to do validity and so on but I was kind of the first person to at least publicly publish the exact construction that we now know as optimistic roll ups uh that specifically has certain properties such as uh it uses fraud proofs for validity permissionless block production to ensure State liveness and data availability on the main chain so combining these uh stability properties something that other people hadn't written about before which is kind of odd because if you think about it it's not exactly a complicated construction but it's one of those things whereas like it's obvious in retrospect but like at the time people weren't really thinking about these kind of constructions I think it's because at the time the prevailing narrative was plasma and people didn't like the idea of posting all the data on chain because they thought it was like it was a regression compared to the quote-unquote infinite scalability of plasmas so because of that people weren't too interested in that particular Avenue of research okay so uh you've been a you started as a scalability researcher at consensus you said you worked in in state channels plasma and then ultimately became uh optimistic Roll-Ups which which means you've seen the full trajectory of ethereum scaling research since day one uh since like we started with like oh we're gonna scale ethereum with State channels not realizing that that uh is limited um to where we are now with optimistic Roll-Ups but but you've taken optimistic Roll-Ups uh in a slightly different direction than I would say is like the status quo where the status quo or something like arbitrum or optimism where they are trying to be evm equivalent you're going off in a in a New Direction can you talk about that philosophy or design Choice with fuel and how it's perhaps different than the optimistic Roll-Ups than most people are familiar with sure so first of all it might be good to kind of give an intro to what fuel is uh the tldr is that it's the fastest modular execution layer okay uh fastest because uh it supports transaction throughputs uh transaction throughput along you know proportional to the cluster on a full node uh that is better than any other modular execution layer out there uh and modular execution there because it's something that's slightly more than just a roll up so we could perhaps talk about the modular execution layer part first sure and then go to the fastest part because the fastest part has like it's one word but it has like a million different column as to why it's like that right uh so the modular execution layer for those of you who uh for those who aren't familiar with the rollups uh should I maybe give like a one minute summary of a role love it okay so a roll-up is a blockchain like any other blockchain uh and it's attached it's attached to some data layer uh and then a data layer is like a layer one like ethereum or something else yes it could be ethereum it could be Bitcoin cash if you're in 2017 and you're vitalik uh it could be Celestia it could be eigenlayer if you want it could be it could be it you could actually have a blockchain that is its own data layer kind of like ethereum is today or Alexa Lana is right it's effectively its own data layer and we would call that kind of a monolithic yeah right with a modular blockchain the data layer is another completely separate blockchain uh so a roll-up will post its data to a data layer uh and it will progress its state transition function just like any other blockchain does and it will be able to allow users to verify that the blockchain is valid but the roll up rather just so there's no ambiguity here it'll allow users to verify the Rope is valid using either fraud or validity proofs or if we have any other Cube construction to verify validity without actually fully validating the chain because that's not it's not a roll-up it's just like to the blockchain right uh there's just it's just like I know side chain or something whereas maybe one definition to unpack is like a roll-up is a blockchain that posts its data as in posts its blocks to another Block Chain and that the fact that it's posting its own blocks to another blockchain makes it a roll-up not its own independent blockchain is that a fair definition uh that's unnecessary but not sufficient condition okay you also need additional conditions such as you would need fraud and validity right and you would also need a mechanism for permissionless insertion of transactions into the roll-up somehow right uh because if we don't have that then the roll-up can be uh halted or it can be censored uh so you need all three these three properties uh so what's a modular execution layer uh with a roll up uh most Roll-Ups you don't necessarily need what's called a settlement layer uh what a settlement layer is a blockchain it could be the same as the data layer such as in the ethereum model for Roll-Ups the ethereum access both the data and settlement layers uh the settlement layer will verify these fraud or validity proofs thus allowing you to have a two-way Bridge of funds between the settlement layer and the roll up uh you don't technically need that for a roll to be roll up like you could have a sovereign roll-up that could be its own settlement layer that could use another settlement layer or just like use a peer-to-peer uh for verifying product validity groups but regardless uh with a settlement layer uh uh the settlement layer is concerned with this two-way Bridge right and for a two-way bridge to work what you really need uh for certain VMS or certain like execution systems but you really only need is for some state route to be valid as long as the state route is valid or as long as the root of something let's say withdrawals is valid that is sufficient that is both necessary and sufficient to have a two-way bridge now the problem is that some Roll-Ups have taken this to an extreme in terms of optimization and have decided to forego everything else so if you look at the Bitcoin design paper right Satoshi spends one entire section of the Bitcoin design paper talking about light clients or simplified payment verification clients at the time right and he talks about hey let's put the transactions in a Merkle tree so that light clients can actually get a miracle proof to their transaction being included in a block right uh and if you didn't have light clients you wouldn't need a Merkle tree like full nodes do not care about a Merkle tree of transactions or even a Merkle tree of State like it's line of full nodes the Solana blockchain does not have a state route like a Merkle root over the blockchain state uh all account balances and contract state it doesn't have that and full notes a lot of full nodes still run but you can't have someone alike clients or other Solana has some weird way of doing like class but let's say you can't just land online clients just as a generalization without a state route similarly if you don't have a transactions route you can't have like clients either so some Roll-Ups have kind of taken the notion of uh the a layer two is just a roll-up and it's just concerned with his two-way bridge and nothing else and they've optimized away things like a transactions route and they just have a transaction hash and then you can't actually have an off-chain like client to the system which is weird right because now you're running a roll up and okay do you run like who do you trust in that case like if you think about the model who do you trust if you don't have a robot light client off chain that you can run how do you know the robe is valid like I guess you can trust that there's a powerful computer like you know verifying it and so on but you run an ethereum full node because if you don't run on ethereum full node then you don't actually know the roll up has any notion of validity or anything of that right so the trust model becomes very weird if you don't have option like clients in addition to not just like the trust model of has the roll-up being corrupted but the trust model of even interacting with the roll up right because I don't do just trust inferior to just give you all the data honestly right there's no like Miracle proofs that your transaction has been included in the block how do you know it has been right uh you just have to trust and Fiora completely at that point well why even have a roll up so a modular execution layer if I can use an analogy it's kind of like the difference between USB 3 and Thunderball three right where Thunderball 3 is basically for those who aren't familiar the USB standards due to you know the the you know designed by Council uh is uh you know has a bunch of optional components so you can get like a USB cable that uh doesn't include certain features like let's say display so you can get a USB cable that you say oh I can use this to connect like you know to a display but like you can't because it only has power right like a thunderbolt 3 cable has all the features similarly to thunder before and usb4 right this is all it is all the features so you're guaranteed if you get one of these cable it's more expensive but has all the features right uh and that's kind of the analogy is that just a roll up and just a layer two uh will be kind of like a USB 3 cable you don't know what you're getting and potentially you could want to do something and you can't uh a modular execution layer you can think of it like like a thunderbolt cable where it's like a roll-up that has all the features and one of the important features that it has is the ability to run an off-chain like client so you have the properties of a roll up you know the trust minimization the permission loss the trustless to a bridge but you also have the ability to run a light client for that roll up and that allows you to really have like trust minimized infrastructure okay I'm going to need you to check my understanding on this I'm going to try and like regurgitate uh what you said and you'll you'll correct me in some particular way um okay so you're saying uh a lot of Roll-Ups uh or and you're talking talking about the Bitcoin white paper and Satoshi emphasis on these like clients emphasis on on Merkel Roots uh and like my interpretation of just like what what is a Merkle tree what is a Merkel system is a compression system uh it's a system of putting a bunch of transactions into a smaller bit of data and by making that bit of data more manageable uh you allow more people to verify it more people to uh actually verify for the validity of the transactions that happened and so when you're talking about a layer two that doesn't have this uh like light client enable enabled uh Properties or just like any sort of like system for the layer two that makes it more manageable for other people to check the validity of you're saying that it kind of runs into the same problem that um bitcoiners previously would critique ethereum of is like yo your nose are way too big only so many people can validate the chain what's the point of having a truffle system if like you're the ability to run a node is so goddamn difficult that everyone has to just trust in fira so you're saying that we need a mod rather than just a roll-up which is uh the USBC model which is uh you know some one-off solution to create a roll up and all it does is verify the two-way Bridge so you can get your assets there but it doesn't allow users to actually verify the validity of the chain because these chains are just not optimized it doesn't have any sort of like compression tool like a Merkle tree for example and that means that no one can run a light client which means no one can validate their own the roll-up that they're on which means they're kind of just trusting The Operators of that roll up without being able to do it themselves and you're saying a modular execution layer has solved this problem by uh producing a more like abstracted uh Layer Two more an abstracted an abstraction layer between the ethereum layer one or any layer one and the fuel Layer Two is that a fair conclusion uh check me where I got one pretty fair except the last part I wouldn't say it as more abstractions I would say it just has more features okay okay more features everything up to that last part is is good pretty much yeah uh it's not a bad it's not a bad uh analogy yeah uh but yeah so uh that's kind of that's all that's kind of where the modular execution layer comes in is that you know we're really pushing for a system that isn't just a roll-up and it's not just a bridge but rather has all those features that use the respect out of a blockchain today that allows a trans minimized infrastructure so now it seems to be following the same trajectory of just like modularity in general right so the ethereum layer one is becoming modular and I think maybe the generalized critique is that like something like optimism or arbitrum or like a roll-up as we know it it's like a monolithic version of a layer two and you're trying to make a more modular version of a layer two is that also fair you can say that yes uh that's actually not a bad way of putting it in the sense that uh traditional Roll-Ups now they're moving towards being modular execution layers following fuel state but like more these traditional robs that you know Su everything except for the two-way Bridge you could that is not a bad analogy to think of them as more like a monolithic modular execution execution system whereas like they kind of tightly couple themselves to a very specific layer one and let's say we must operate in this exact one one we must operate in this stack and nothing else okay so what kind of flexibility does fuel uh gain by this design Choice by this design philosophy uh so it gains well one gains security for end users and two against flexibility so so just just so we're clear it's not just flexibility it's also security uh we covered the security adjust just prior so in terms of flexibility uh it allows fuel to be run or deployed rather uh to there's less constraints on which layer ones it can use for data availability and settlement right if you don't tie the couple yourself to a very specific stack you know this is layer one this is a roll up if you don't hide the couple yourself then that means you have more opportunity to go in different ecosystems right so the the fuel Layer Two can settle both its data both on ethereum and Celestia and another layer one if you wanted to yes okay that's kind of what I meant about like abstraction like as in like we could extract a way which data layer uh really is important to fuel so there's no there's no like layer one or data layer that fuel really calls home and I think a lot a large parts of our know just refer to the data layer as like da layer as opposed to ethereum right if you look at some other channels they'll call this specifically thing ethereum or they call it evm right in our case we've tried very hard to abstract that away not out of necessarily any ideological like concerns about ethereum which there are none but more about the more you tie yourself to any specific thing the more like weird code that you might inherit without even attending it right it prevents you from neces it prevents you or rather it makes it harder to ensure that your code is clean and free from like weird Legacy stuff sure and importantly it's that light client Merkle tree aspect that we were talking about that enables this property right it is the uh compression of all the data into like a little nice uh neat bundle of data that allows for that data to be able to go onto any data availability layer is that is that correct no that's orthogonal uh those are two different parts like okay the the fact that you can uh the fact that you know you have the ability to run adjustment it's not that's not that's not the only property that you know this difference between Thunderbolt and USB analogy here right there's additional properties that's a major one that I talk about because of security but those other ones like just building your software in a modular way abstracting oh my what is the data there and what can it actually provide uh that's that's another property okay one of the big new things about fuel is the fuel VM which is a meaningful separation from the ethereum virtual machine which so many Roll-Ups Arboretum again opportunism just emulate they recreate the evm as close to close to the evm as possible this is not fuel's design choice so talk about the philosophy behind this design choice and kind of how it fits into the overall broader fuel stack yeah sure so now we're getting to the fastest part yes cool uh and similarly to how the moderate execution layer has both a security component and a flexibility component as does the fastest part it has the fastest part and it also has a flexibility part uh so in terms of performance period uh the fuel VM is designed based on the evm actually so if you're familiar with the contract execution semantics of the ethereum virtual machine and some of the nuances and gauches there you can learn how the field of VM Works in like an hour it's very it's very simple because it's basically the evm but improved is what I like to call it uh it has uh a number of architectural changes that aren't too important I think to dive into things like it uses registers instead of a stack which leads to higher performance and Tire performance both in terms of register like uh register machine like a program on a register machine being executed is faster than on the stack machine and also because it reduces gas accounting overhead uh but that's kind of like that's kind of getting a bit too much into the weeds uh the kind of interesting thing is that the field of VM brings to the table in terms of performance is the fact that it can introduce new instructions that wouldn't really be introducible into the evm without a lot of bike shutting well along with all the architectural changes that will emulate certain eips on ethereum or that you know Implement them in spirit so I'll give it a few examples one of them is a memory copy right people would really like to have a memory copy instruction because it would just make certain operations much much cheaper especially custom cryptography uh the current approach is you can delegate call into the Identity pre-compile or sorry not delegate call I guess no static call you can call into the density pre-compile and then you know copy your data and then get it returned and then okay you have your memory copy and that's fairly expensive because you know you have to call a pre-compile versus just an instruction uh and people wish that forced things like custom cryptography they had a memory copy instruction why can't you implement it the answer is well because the EIP process is very involved uh there's a lot of governance uh uh complexity in the ethereum space because you know you don't want to just accept every single EIP that people oppose because then the evm would get very bloated and be impossible to maintain right and as we all know public goods funding on uh clients is kind of Fairly Limited uh which makes me somewhat happy that the Paradigm team is now choosing to maintain a rust evm implementation because nowadays we can be pretty guaranteed that at least we'll have one thing in this high performance that is also rust which is nice uh that is maintained and we don't have to worry about public goods funding as much but regardless back to the topic at hand uh so you know in the field VM we have a memory copy boom end of story uh it allows you to cheaply copy a memory from one place to another hello custom cryptography uh another example is a transient stores sorry can you can so that was like pretty Technical and for a non-technical person like me I I can you just like really distill down the impact of that maybe from for developers and for for users if it does impact them it will impact people who want to build custom cryptography in the evm and it'll impact people who want to use custom or do you use cryptographic Primitives that aren't natively supported by the VM so in the evm you have access to let's say a signature verification for ethereum's curve but you can't really verify signatures for other curves uh one popular curve or one popular signature scheme is e d DSA as opposed to ethereum's EC DSA right I need EDD essay is used by near Jews by Solana it's used by Cosmos it's used by a bunch of chains but they shouldn't be using it because it's garbage but regardless they use it uh people would like to for instance construct a bridge like a I think what they have a Rainbow Bridge or something right they would like to construct a bridge but to verify each e DSA signature with custom cryptography implemented in the evm is on the order of 1 million gas versus 3000 gas for an AC DSA signature verification like that disparity is on the order of you know three orders of magnitude difference that should not be the case like maybe we're talking about a factor of two three I don't know something like that difference is the what it should be not three orders of magnitude difference so and if the field of young people will be able to and uh hash cloak uh is actually writing I think they wrote a BLS signature verification in sway uh which we'll get to sway later but they wrote it for the field VM so you'll be able to write custom cryptography different hashing uh algorithms different signature schemes so that you can do things like bridging to other chains and whatnot and you can do that reasonably economically okay and so that's all about just like having one transaction or all transactions on fuel just overall have like a smaller footprint on whatever data layer that it settles down to which is where we get this like fastest claim right uh among other things yes okay all right so tell us about like the uh the current state of the fuel Network like uh when did it get started uh what are you guys working on right now where is there a road map and where are we in that road map yeah so uh I was about to talk about more more parts about the fastest but okay we'll talk about this oh if we're not done talking about the fastest parts we should absolutely talk about the fastest parts sure I have a few more Todd okay yeah where's where's next in the fastest yeah okay so uh there's a few other erps that have been implemented uh one of them is transient storage uh some people from uni swap have been pushing t-store into your load which are effectively and see how I can install this uh so storage on ethereum allows you to persist things across transactions right and memory persists only within a particular call so if I call it the intercept contract right it has some memory and that persists only within this call so you have two options you either persist things across transactions or you put persist things only within a call what happens if the unit subcontract calls I don't know to die a contract right then the die contract doesn't have access to the memory of the UNICEF contract but it'll be really nice if we get access to some some memory or some storage whatever you want to call it that persisted across the transaction so across calls in a single transaction and that was discarded at the end so it couldn't be used across transactions but it could be used across calls that's what T star and T load are uh there's a EIP for this uh and it allows you to do nice things one thing it allows you to do is it allows you to check for re-entracy at runtime without having to use storage which is very expensive uh then you can use t-storage uh other things you can do I mean uh I don't know there's a bunch of things you can do with this uh so the fuel VM has a shared memory architecture where memory is persisted across calls like this I can go into like more like deep dive into the technicals but the essence is that it has memory that is some storage location that is persisted across calls so it already has whatever t-store would give you so you could wait you know whatever the amount of time this EIP can you know can wait for uh until whilst in the back burner to be implemented or you can just build on fuel uh and uh so this this is part of potentially the flexibility that I was talking about the fastest is you know both performance but also flexibility uh in terms of performance uh it might also be worth talking about the field protocol itself because the fuel protocol isn't just a fuel VM uh the fuel protocol is designed to run multiple instances of the VM in parallel uh because each transaction in the fuel system uh declares which contracts it will touch if you know which contracts two transactions will touch and they touch like disjoint sets of contracts you can execute them in parallel because there's no like hard dependency between these two transactions so this allows us to execute transactions and therefore instances of the virtual machine in parallel and that's kind of the overarching fuel protocol so it's not just like you know a single VM that runs transactions one at a time it's more like an orchestrator that runs multiple instances of the VM in parallel and leveraging parallel transaction execution is also where we get a lot of performance scans because modern CPUs haven't really increased their single core speed in like the past like 15 20 years or something like that right I remember when I was a kid I was playing Half-Life 2 on a single core Pentium 4 and I was running at like I know 4.2 gigahertz or something like that I'm sure a lot of people had a panty before back in the day if you're my age uh and that was like the fastest single car processor at the time this was like right on the cusp of you know dual core processes started started to become a thing uh and I do nowadays I have you know on my desktop I have my processor is what like 4.8 gigahertz boost right so that's not even that much faster than 4.2 right and that was like those like 20 20 years later uh oh geez I'm old so uh but what have processors done well my my processor has you know 30 I forgot it was 32 or 64. I had a shitload of threads right and the old Pentium 4 had one thread so you know that is you know almost two orders of magnitude more performance is that is unused in a single core PM so with parallel transaction execution then this kind of uh unlocks the just using resources that are sitting there not being used like it doesn't require a more expensive machine it's just those resources are regardless of what CPU you buy nowadays it's gonna be multi-core and it's gonna have like at least a minimum of a threads unless you're gonna go really cheap and buy like you know not an Intel Atom Processor or something it's gonna have at least you know eight threads so you know those resources are unused currently in a single threaded VMS might as well use them so the first thing that you said is that uh the fuel Network you have a transaction that calls two different contracts and we can have this uh uh instead of having to call memory twice there's only like one persistent memory uh I'm gonna mess up the way that that's described but like it's just like it sounded like just a more efficient way of accessing memory in the fuel Network across contract calls uh which uh like uh again limited developer experience but it really just sounded like there was just like less resource load per transaction in order to get a transaction done and then we all that's a good way of putting it uh and one one thing we like to say is that we reduce waste a lot of it turns out that a lot of ways people want to use the UVM have to use the evm wastefully there's not necessarily even that the evm must be inherently slow and you must like completely change the architecture because we didn't the fuel of M is based on the evm uh it's that that it turns out people want to use the evm in certain ways and the evm doesn't have a good way of doing certain things therefore people you is what they use wasteful ways of doing those things we provide workarounds which ultimately become wasteful in terms of computational resources exactly and we just provide efficient ways of doing those things the layer 2 era is upon us ethereum's layer 2 ecosystem is growing every day and we need layer 2 Bridges to be fast and efficient in order to live a layer to life a cross is the fastest cheapest and most secure cross train bridge with a cross you don't have to worry about high fees or long wait times assets are bridged and available for use almost instantaneously across his bridges are powered by uma's optimistic Oracle to securely transfer tokens between layer twos and ethereum across its critical ecosystem infrastructure and across V2 has just launched their new version focuses on higher Capital efficiency layer 2 to layer 2 transfers and a brand new chain with polygon all while prioritizing high security and low fees you can be a part of a cross's story by droning their Discord and using a cross for all of your layer 2 transferring needs so go to across.to to quickly and securely Bridge your assets between ethereum optimism polygon arbitrum or Bowman networks the brave wallet is your secure multi-train on-ramp into web3 and is built directly into the brave privacy browser gone are the days of managing multiple wall extensions that put you at risk of fishing spoofs and tracking with the brave wallet you can securely manage your crypto assets across more than 100 different chains including ethereum layer tubes Solana and more all without downloading risky extensions the brave wallet is easy to set up and removes the headache of jumping between wallets and extensions it's lightweight but packed with great features like built-in token swaps buying and holding nfts with a gallery view and support for Hardware wallets but also much more than that because Brave is shipping new features every single month with a mission to make web 3 easier to navigate for its over 55 million users while extensions are a thing of the past so get started with Brave's web 3 ready browser today and experience a decentralized web seamlessly without all the Clutter you can download the browser at brave.com Bank list and click the wall icon to get started arbitrim1 is pioneering the world of secure ethereum scalability in this is continuing to accelerate the web 3 landscape hundreds of projects have already deployed on arbitrum 1 producing flourishing defy and nft ecosystems with a recent addition of arbitrum Nova gaming and social daps like Reddit are also now calling arbitrum home both arbitrim1 and Nova leverage the security and decentralization of ethereum and provide a builder experience that's intuitive familiar and fully evm compatible on arbitrum both Builders and users will experience faster transaction speeds with significantly lower gas fees with arboretum's recent migration to Armstrong Nitro it's also now 10 times faster than before visit arboretum.io where you can join the community dive into the developer docs Bridge your assets and start building your first app with arbitrum experience web 3 development the way it was meant to be secure fast cheap and friction free so there's something that you said in the very beginning of this where it was like uh something about the relationship between the fuel stack the fuel technology and a full node and it was like the the fuel allows you to leverage the full resources of a fold node in a way that's not very wasteful and this is kind of the theme that I'm I'm gathering here is that a transaction on fuel is uh like minimalist in that it only uses the minimum amount of computational resources it requires to get uh to get itself executed and then also on top of that you're adding like multi-core multi-threading with the fuel VM is that is that kind of a simple way to explain what fuel is yeah uh that is a uh it's not like anything magical like oh you know we used to be engineers at Qualcomm I don't know how to build like kernels and on like routers this is like very simple just reduce waste reduce waste in terms of you know trans make transactions you can make transactions execute Faster by making them waste less right you don't need like magical re-engineering of of anything of Hardware or anything like that you just say you know waste waste less I know boom your transactions faster is there any are there any numbers that you can put behind this like how many more times faster is fuel than like your typical optimistic Roll-Up uh that is hard to say without optimizations in the sense that our those like a design aspect to it like the design of the protocol and that does an implementation aspect and the implementation obviously requires optimization works that is independent of like the fundamental design of the protocol our implementation is currently undergoing uh the like the VM implementation is currently going optimization work as we speak it's been an ongoing for like the past month or so uh that has greatly reduced overheads uh I think like on the order of 10x just off optimization work but until those optimizations are complete then it doesn't really make sense to give any numbers uh because like if if the overhead is so high because it hasn't been optimized out yet then there's not really any comparison to make but you really should be comparing against your own optimized field VM versus an optimized evm uh there's still a little ways away but it'll be ready in the not too distant future okay is there some sort of like what number are you going for if that's fair like what number are we going to see uh well I mean if you're hopefully 100x on the same computer 100x faster than a typical optimistic roll up yes okay so I I know like Arboretum likes to do a ad I don't know add another zero they like to just say the I think the last number we got out of Arboretum is that we are seven times faster than ethereum so there's like arbitrum has seven ethereums worth of scale I know that that measurement has offended other layer twos but like if you wanted could like tell a normie like me how much more scale does it have that's like a nice thing to say so like does it go and say that like okay then fuel is 700 ethereums I don't know I some something something along those lines okay well that's a that's a certainly a big number uh have we have we covered all the the fast part of fuel uh yes I think we're ready to move on to your previous question about road maps maybe yeah maybe we could repeat it yeah so when did fuel when did the fuel project really get started uh what is the road map and where are we on that road map I feel a project I guess I can talk about the origins of fuel sure yeah uh which is that I think it was in 2000 19. yeah I think it was in 2019 when I left consensus uh to start it up with Nick and then Sam joined shortly thereafter very shortly thereafter it was basically the three of us in a cave with a box of scraps subsisting off of a single small grad from lithium foundation and we launched fuel everyone uh was it at the end of 2020 oh that's that seems too long okay maybe we started maybe we started this in 2020. the the years are all like these are all fuzzy I think okay I think we started in 2020. we launched field of view on at the end of 2020. uh and we started and fuel everyone was just for payments it was the first and currently only real optimistic roll up in other words ones with a fraud proof B permissionless uh professionalism block production see posting data onto ethereum and D no upgradability uh that exists on ethereum today and it was the first optimistic roll up regardless of true optimistic growth or not that was deployed to Main and ethereum uh right at the end right at the end of the year December 31st uh just just so we can say we deployed it in in that year a whole year before any other any other role uh and uh that wasn't the end game it was just for simple payments uh but it wasn't the end game uh we knew from the beginning that we wanted to build a system that allowed ethereum to scale not just in payments but that allowed ethereum itself to scale and that means a general purpose smart contract execution and towards the end of that year we had actually started working on what would become fuel V2 we started thinking about the VM architecture we started thinking about the language and here's maybe some fun piece of History we could actually talked to some people about uh if we had a VM and VM interpreter in Rust that we can compile down to wasm if we could use an interactive verification game over the implementation rather than the protocol itself and this is turns out uh we had chatted with some researchers about this and it turns out that that's the exact approach that both our optimism ended up unveiling as neat as nice Innovations uh in in the future what a good coincidence uh so uh we ended up not going down that approach for various reasons uh one of which is that you're tying yourself to a particular implementation and any weird bugs that that implementation may have any weird inconsistencies it also makes it harder to maintain uh and one thing that's very important with these systems and this will come into play with why we build sway is that building and maintaining are not the same thing uh you can sure build the system very quickly if you you know take some general purpose thing and run it over the implementation of your VM interpreter but then how do you maintain it right then do they have to like maintain two different instances of your VM interpreter one that's you know that you can run quickly and one that you can run the ivg over it's it's very it's gets very tricky and how maintenance is done uh so this also leads us to our language right we had also been thinking about what to do with our language we looked into move uh we were thinking also abusing the movie M but the move VM is not designed to be fast uh and it's not designed to be flexible it's designed for a very very particular and a very different way of using about assets uh and the move language was also uh very immature at the time and I'll tell you in the past two years or so since we looked at move I think this was at the very end of 2000 20. uh yeah at the very end of 2020. uh the language really hasn't changed that much uh like Swang has grown from literally nothing because it was created from scratch to you know the most mature blockchain uh development language in existence uh if I do say so myself uh from nothing and it's why or sorry and move has basically not changed at all in the past two years uh so it's good there's a good choice not to use it uh so in addition to you know it being immature and it following will be a different Paradigm one of the reasons not to use it is that it would be an upstream dependency uh for anyone who's worked in an open source code base uh it's really nice to use if your Upstream dependencies are maintained right if they're maintained then you can use them if there's a bug you ask the maintainer hey can you fix this release new version and all's good the problem is when it's not maintained then you have a choice you can either Fork it yourself and maintain it yourself so now you're maintaining some code that you didn't write it's not in your style it doesn't have the same conventions uh you I mean do you completely change the style to to your conventions right and completely change how they do things to work with your conventions at that point it's like can anyone else even use it or you're just solo maintaining it and it was like a big thing that could be very that transition could be very expensive and it could happen at a very inopportune time so when it comes to building sure taking on a uh Upstream dependency is nice and easy it makes things fast to build but again it's not just about the building it's about the maintaining and having an upstream dependency like that especially something that's like you know some software from Facebook then Libra then DM now it's it's like move is being forked to like different their Aptos as their flavor of mosui has their flavor of it was like who even owns like is there even a single maintainer with a core removed language I don't even know at this point right uh and having an upstream dependency of that is really really bad for maintaining your code so we chose to build sway instead right uh from scratch I feel like before I talk about somebody is it maybe good to go back to the roadmap version uh I think Sway and also the fork conversation are are similar should we also talk about Fork uh sure okay well I can I can also let you lead if you have a direction you want to go in oh well I I I was going to finish kind of talking I was going to finish talking about you know the timeline and roadmap thing as opposed to just diving into more tactical stuff cool uh because those this was more like a history lesson enough you know how we got to where we are right we launched vw1 we started thinking about field V2 and these were some of the things we were thinking about uh like move and then ivg and all the other stuff we ended up basically building the whole thing from scratch uh to avoid upstream dependencies and other issues of that so since then we've been building for the past two years uh the organization has grown from well zero contributors other than the founders I think we made our first hire in January end of January or something like that uh sorry of this year no of 20 20. 2020. okay all right 20 20 21 sorry okay we launched we launched field at the end of 2020 and then we started building field V2 in Earnest 2021 uh January up until now so the past two years uh the dates are hard uh so you know we made our first hire we've we've since grown to I think almost 70 contributors and the organization from now on uh back in uh back in the beginning of 2021 so I think we've done a pretty good job building out uh one of the best teams in crypto especially well for sure one of for sure the best compiler team and just one of the best teams period uh across our whole stock uh in crypto uh mostly Engineers Believe It or Not uh like 60 of those people are Engineers we really we really do need to hire more non-engineers so if you're if you are out there and you're a non-engineer you know if you're into like BD or if you're into uh Public Communication content writing uh if you're into like project manager I'm trying something like that please reach out to me after after this because we always need more of those uh so yeah and then Samsung will be basically been building we launched a oh sorry for the first year we built uh installed mode uh and then on January 2nd 2022 so this year so about 12 12 months ago or 11 months ago now to the date actually oh it's December 2nd so 11 months ago then we released all of our code base in public since then we've actually been building in public and there's an important distinction between uh us and potentially some other projects so not only is our code all open source our entire stack uh except for a couple minor components but those will change soon uh we're also we also build in public right some other some other projects roll up or not uh uh will for instance build entirely in private and they'll like release some blob and it's not even open source right or sure it's open source but they don't actually build in public they'll like push things out you know push things out just you know boom here's something we were working on this for the past year now you know about it uh at fuel Labs everything we build for the fuel protocol is built in public that was also planned in public we don't have like a private issue tracker that people can't see like you can go on our GitHub you can communicate with people through issues through PRS and stuff and that's how we do our work so it's very a big part of ethos uh it's not just about you know the software and the blockchain it's also about how is it built because people are a very important uh part of our culture uh so yeah so we made all the code public uh at the beginning of this year uh since then we've launched three test Nets one of them was for sway swap a port a few new swap the hybrid of unicever you want to be to uh ported to the swai language deployed to a private devnet then we launched two public test Nets beta 1 and beta 2 each of these about two months apart uh uh that uh had just increasing number of features uh and increasing sophistication and stability and so on I think we are gearing up for a beta 3 test net sometime early next year let's say uh that's kind of that's kind of it for the and that's kind of it for the spoiler so there'll be a few more test Nets uh we're rapidly approaching a minute launch uh what form that I'll take uh will lead to Future announcements uh but yeah uh that's effectively how things have gone in terms of development for the past couple years three years so how will an ecosystem come to be on fuel uh what's the the idea behind that because uh if I'm understanding this correctly like you can't just copy and paste uniswap code and deploy it to fuel that's what you talked about with like some sort of uh iterated code to make it work on the fuel Network how do you how do you expect an ecosystem to come to be on fuel how do you expect that story to go yeah uh it's not just how I expect an ecosystem become it's I can describe how an ecosystem came uh we already have a burgeoning ecosystem of uh very uh excited developers that are really engaged into the project uh and the language and just in a general ecosystem uh that have you know basically taken a look at sway they're taking a look at the field of VM and they're like wow they're so much better than any other chain I can get even today and this is the early days with rough edges imagine like a year from now when they've polished all those rough edges even more it's going to be insane and we already have like you know a dozen or so projects that are building on us and test that uh we hosted a Twitter space with one of them pool shark uh last night on this way you can look at the sway Lang Twitter uh and it has a space from just just last night uh just last night if you're in Eastern time I guess if you're in different time zones then it's not night and maybe not yesterday uh but uh uh you know they're building an amm that's concentrated liquidity liquidity for a recall correctly right we have a few other ones like an nft Marketplace and some other stuff uh that are being built today uh so this is like we have to attract developers out of Norris like we already have an ecosystem of developers being built uh that are already here and that's only going to continue to grow of course yeah do you have any like stats on users or daily transaction volume or any any stats of adoption like that that is something I don't have off the top of my head I'll have to talk to our growth lead on this I'm sure she has I'm sure she has some like a whole bunch of numbers and stuff but that's not that's not my area of expertise I just do protocol design is it would data like that be something available in something like Dune analytics or does the fact that it's a fuel VM make the finding data on fuel a little bit harder because it's not as easily plug and playable as other Roll-Ups yeah it's not currently as unplayable so it wouldn't appear in June that being said it's all unchain and the test Nets are public right like beta 2 is a public test net it has an open graphql endpoint that anyone can query I should also point out that uh it's not just like the fundamental protocol that has been improved over uh the evm we also made improvements to things like we have a native graphql interface so you don't have to use a third-party service like the graph the index things and then you know Expo is a graphql endpoint if you're you know some if you're like June or whatever right uh we also have a first party indexer service uh so if you want to build an application and then you know run various indexing on that you know like things like you know pools over time and like user uh you know accounts over time and all this other stuff we actually have a first party indexing service that you can plug into our node you don't have to use a third party like the graph wait for Integrations wait for all that governance and all that stuff you can just use our index or boom it just works that's all like a single unified tool chain and you can get all your indexing done that you can then plug into analytics analytics websites you know of course it's kind of currently Plug and Play into June but you know eventually it why not uh there's no reason that it can't happen or there's no reason you can't just run some graphql queries against the node on yourself because again the beta 2 network is public and like you can just you can just the blockchain is all on chain as they say right you just Square the chain do you have like a attitude or philosophy as like is do you where do you think the whole entire broad landscape of ethereum layer twos is going because each layer two has its own kind of directional philosophy optimism is really focused on like their bedrock and opeat op stack CK sync wants to do its uh prover circuit with a bunch of layer threes do you have any sort of like uh belief as to like where the broad landscape of all ethereum layer twos will go and and I'm assuming like you think that uh fuel is kind of leading in a particular direction that you think is uh the right direction but do you have any any takes about like where uh The Logical conclusion of ethereum layer twos go so I think there's two facets to that question one of them is potentially where do I think it's going to go in the short term and the second is where I think it's going to go in the long term sure so I'm pretty convinced in the short term that we're going to see two things happening the first one is Convergence around the evm as a focal point as it exists today uh other than you know fuel of course uh so this this will look like what we see today we have a bunch of uh blockchains going or a bunch of Roll-Ups going from now I guess what evm compatible to okay now we're evm equivalent right uh and then they're all going to deploy their solutions that are quote unquote evm AVM equivalent uh but then the next step to this and this is still in like the short term is people will want more they'll want more flexibility so I want more speed they'll want more something right uh and we can see this already you know you have projects that talk about oh why don't we add account abstraction why don't we add native support for t-store right hey you know I'm on I don't know but roll up XYZ you know let's Implement t-store and get people who have been excited about it all this time to use us and people want more uh and you're gonna end up I think in a weird scenario where uh welcome that's the long-term thing we're going to talk a weird scenario in the long term thing okay so in terms of you know people want more people want improvements to both evm and infrastructure like RPC endpoints and stuff uh you know they'll want parallel transaction execution in a way that isn't a denial service vector uh because you know some people are saying hey let's you know apply a parallel transaction execution to the evm with concurrent uh concurrency that's a denial service factor or rather well it's a dial service factor or it does nothing which is always the rock in a hard place it either does nothing or it's a denial service Vector in the worst case like if it is adversarial uh and the our ethereum team is using this approach uh which is why I think I think they're using the wrong approach of course uh fuel is not using optimistic concurrency right it's using like enforced parallelism in those transactions themselves uh and therefore it's part of the actual consensus of the chain it's part of the rules you know that there is going to be an opportunity for parallelism and then you can enforce certain payments and stuff around this you know if someone doesn't you know if someone you know makes a bunch of transactions that are all targeting in the same state you should pay more and so on right but you can do this as part of consensus because it's actually part of the transaction it's not just some implementation detail like concurrency is uh so what I think is going to happen uh is that you know people want more and guess what in that wanting more that is fuel right fuel is years I had plural of any other chain in terms of building some the next step of the EPM in terms of implementing these erps like t-store in terms of account obstruction uh in terms of you know eip-3074 for authenticated calling uh in terms of flexible transactions with Scripts all of these things feel has from the beginning right uh so when people start looking for more well guess what fuel has been there for years right and we're years ahead of anyone else so there's going to be no competition there is no second best as as someone would say so you're just saying that the fuel is the philosophy of skating to where the puck is going yes cool uh and that falls into what I foresee is what's going to be some long-term consequences of this evm convergence which is that as people want more we have now Crossroads it's either people are going to people are going to accept that they can't get more uh which is not good like I really wouldn't like that eventuality or people are going to just say hey let's use fuel because fuel has has it has everything we want and has all the more we want and it's already implemented we don't have to wait years all right it has better language better tooling better VM better everything why wait when we can just use fuel uh that that's I think the ideal scenario both for fuel and myself personally and also for the ethereum ecosystem I think uh because they're the there's a third scenario which I think is really bad which is that each of these roll ups uh which you know a lot of them are have certain Financial interests and political interests uh are going to start pushing through ethereum governance uh changes to the evm uh that benefit them and if they don't get those changes then they're going to start fragmenting what is the evm right imagine if Arboretum and optimism have two different ideals around some feature of ethereum right like an arboretum really wants feature X our optimism doesn't like feature X and thinks it should be feature y uh and an example of this is actually you know ethereum itself a DVM like basically our ethereum had such a thing happen where there were two competing proposals which ironically weren't actually competing necessarily but there were two competing proposals for how to implement BLS signature verification in the evm which I don't actually know why it was needed ultimately because you don't actually apparently you don't need it for withdrawals people are saying you needed it to enable withdrawals but then it didn't happen then it turns out you don't need it for withdrawals so I don't even know why it was needed but regardless I think the the reasoning at the time was to enable withdrawals even even that's still that's pretty important right and that's still taking a while so there are two proposals one of them was Implement BLS pre-compiles the other one is implement basic pre-compiles for General cryptography that people could then use to specialize uh at the application layer instead of at the consensus layer full rbls specifically right uh now the BLS specific ones you know maybe they're faster and cheaper but then they required you know you specifically need to know the PLS the other one is more General right but it could be more expensive uh and there's like a bunch of fierce competition and governance around which one of these two should be accepted of course neither of them ended up being accepted but you know when you have a situation like this imagine if you have two Roll-Ups and each of them think you know one of these is better what the  happens to governance then especially when these Roll-Ups are when they say they're evm equivalent like do they just stop improving their chain and  their users and send them all to fuel I mean I would like that right and I I think that maybe the ideal scenario for ethereum because then it avoids this This Disaster scenario of all these Roll-Ups now competing with each other for ethereum governance they're not competing it with each other for users they're Computing each other over ethereum governance and having a war through ethereum governance which features get implemented in the evm because they have to stay evm equivalent and if they don't then potentially even an even worse scenario happens where now each of these Roll-Ups branches off and has their own flavor of evm and evm equivalence and then they call themselves The evm I was like well what you do with slitty compiler do they each have a different version of the solidity compiler that can be used for their flavor of the evm like and then how do how do tools work and stuff right like both of these scenarios are really really horrific and that's what I foresee post evm convergence that people want more and this more will lead to what I hope is the ideal case that people will realize fuel is that more and it is bringing scalability to ethereum and bringing improvements to ethereum with all the security guarantees and trust us and decentralization Ethos and open building ethos that ethereum really values and they'll go to fuel because if not then it's looking very Grim in terms of what are the long-term consequences of roll-up teams fighting on the ethereum governance arena for their own purposes well John this is why I love these conversations because uh it's only developers because that can actually think in these such long-term time Horizon like Game Theory scenarios uh so uh that's definitely something that I now have to consider so so thank you for for sharing that uh yeah you won't sleep as well at night well there's I've never been uh bearish on ethereum actually being able to problem solve but uh yeah the the problems do only seem to get larger and larger uh as we go out into the future if you had a call to action for listeners developers whoever might be listening to this episode uh to help join the effort to make fuel a success what would you ask I would ask that you keep an open mind and try it uh you don't have to take my word for anything uh but you also shouldn't take anyone else's word right uh don't believe what you hear on Twitter necessarily and don't believe anything you hear out of my mouth what you should believe in is the code go look on our website go look at our docs uh go play around with our tooling and our chain uh and see for yourself that there is no second best uh and where are all of the links to go get that done yeah so if you want to uh I mean the main portal to everything is justfuel.network the website fuel.network uh you can also look us up on GitHub directly like github.com fuel labs you can follow us on Twitter uh which is at fewer Labs underscore potentially potentially that might be changing soon soon alpha alpha League uh but yeah that's kind of where you can go to kind of get started on socials and just code and stuff awesome well John thank you so much for joining me on this Alpha League episode uh speaking of alpha leaks uh and explaining to me the fuel ecosystem I appreciate it thanks so much for having me David and the bankers Nation hey we hope you enjoyed the video if you did head over to bankless HQ right now to develop your crypto investing skills and learn how to free yourself from Banks and gain your financial Independence we recommend joining our daily newsletter podcast and Community as a bankless premium subscriber to get the most out of your bank list experience you'll get access to our market analysis our Alpha leaks and exclusive content and even the bank list token for airdrops Raffles and unlocks if you're interested in crypto the bankless community is where you want to be click the link in the description to become a bankless premium subscriber today also don't forget to subscribe to the channel for in-depth interviews with industry leaders ask me any things and weekly Roll-Ups where we summarize the week in crypto and other fantastic content thanks everyone for watching and being on the journey as we build out the bank list Nation 
[Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] you okay can you guys hear me ya hear you I hear you awesome cool welcome to community call number six we have so yeah thank you to our guests we have a few things that on the agenda today that we are excited to share with you guys and we'll reserve ample time for like questions and stuff as well I guess maybe we could start with two things the first is just a super lightening round of intros and then maybe we'll just do like a very high-level project update as well I'll go ahead and kick off with the intros I'm Lane I'm a member of the USM team and my area focus recently has been in addition to attending a lot of like hackathons and conferences and stuff has been a tool chain around assembly script which I'm really excited about so trying to develop some tooling that looks and feels something like JavaScript or typescript that might be you know helpful to like sort of traditional web 2 and mobile developers so I'm hoping to have a prototype of this working at Def Con to share with everyone I guess we'll just go I don't know random consensus here who wants to go next Hey hello okay great hey guys I'm Jared I yeah I spend most of my time on be working on the test net for ewaz um and working on the tooling around that I'm pretty excited we're about to release a test net pretty soon I think we'll be able to give you guys a a little demo that today so I'm excited about that hey guys yet but that's that's it for me thanks Jared I can go next okay hi everyone I'm Alex I have contributed a little bit to different etherion projects a little bit on caps casper FFG a little bit on Piper and I'm just really excited to see where he was and goes so I want to try and help out wherever I can awesome yeah thanks for the intro and thanks for joining us you oh I'll go next I'm Casey I've been working on the chestnut with Jared a lot lately and so I think I'll be demoing what we have so far with the test net a little bit later also working on a some charting stuff and ideas and that's about it thanks Casey I can connect um I'm Anthony I've been walking on the on back and I've been 20 2008 and it was me so much and I'm you know he what are the pillars hey Anthony thanks for joining and thanks for the work you guys have been doing on embark we're really excited to see you awesome support added to that yeah Alex Pavel sorry you go hi everyone my name is Shubham part of the awasum team and well I've been focusing on writing and maintaining cases for for you awesome and lately I have been working on improving some somethings in in the in the blocks product thanks you go and yeah Hugo's gonna I don't know some combination of Hugo Jaron in case you're going to show us a demo of the like open-source black Explorer shortly Pawel I'm mostly maintaining and designing a BMC which is API to connect it was an engine to regular atrium clients insisting on yeah we can hear you okay yeah my name is Alex and he was and I'm working on the design the one of the VMS and mostly the system contracts and tooling around that and next to that I also work on solidity and you will and I guess are gonna talk a bit about one of these VMs at some point on this call cool I think that's everyone thank you for the intros yeah x'q would you as our as our team lead would you like to give a really short just kind of progress report in terms of where things stand high level and what our goal is for DEFCON and stuff yeah I think we did this last time and there's supposed to be every two weeks probably it hasn't been for like six weeks by now for those who are listening go on on or listening to this on YouTube at a later point we also tend to give these kind of updates on the atrium 2.0 course which is bi-weekly but we should also give the updates on on our community calls so where we do is stand currently is we have the basic specification kind of final and and we have the test regarding that basic specification I think around well over 90% there they're only a couple of edge cases which are not covered and to actually use those test fit we have two different implementations of the VMS one implementation is natively written in go in go atrium and the other one is a individual element which can be used by any kind of client supporting dimensioned EDMC api and there are two clients currently in existence which do that one of them is Aleph or which was called CPP tiem previously and and the other one is GUI terraeum although it is worth mentioning that in Ocoee theorem the support is currently not merged into mainline it is a it is an external ER but in Alif it comes built-in in the version 1.4 and 1.5 and this individual vm is called Hera and it is able to support multiple underlying the wasum engines it supports to regularly interpreters and a ahead of time compiler which would compiled to native bytecode or rather machine code mm so that's where we stand now we have this Hera VM with the different engines and our next focus for the next couple of weeks is to do extensive benchmarking between these different implementations of Awesome engines and the main goal with the benchmarking is to determine a baseline of gas costs for individual instructions but it is worth mentioning that this baseline of gas costs supposed to be more flexible that than it is in EVM and that is the other bigger project fear exploring at the moment to have some kind of governance on chain governance to change the the cost of the individual instructions I think these two big projects we have ahead of us and we do plan to complete them or at least get to a state where we have some kind of results by Def Con and we plan to have a workshop at Def Con to go to everything we go to today um but in a more extensive and more involving letter I think that should be good enough for an update you you you cool okay oh yeah maybe we could [Music] go into one of the presentations so so Alex was going to talk more about Hera and the VMS we wanted to show you guys what we've done so far on the test net that block Explorer etc case he's going to give us a quick update on benchmarking and he thoughts on which should go first I can just get benchmarking out of the way yeah so why don't you do that and also if you don't mind share a little bit of background about like what it is and why we care about it okay sure so with wampum as Alex said where it supports excuse me with Hera it supports multiple blossom engines so we have two interpreters to wasum interpreters binary n is the original one and then wabbit was more recently added and then a third wat third engine is a JIT engine which is wha them and the main reason we wanted to the main thing we want to benchmark is how these different engines you know how fast they are compared to both you know the jet engine versus the interpreter and the jet engine versus the native native implementations of primarily the pre compiles is what we want to benchmark so the benchmarking is not going to be as easy as we'd hoped because it turns out the test runners that are used for benchmarking on Jeff and parity and CPP they call the pre-compile functions directly so and these were used to benchmark the pre compiles both to determine the gas costs of the the elliptic curve pre compiles and the mod exp pre compiles last year for Byzantium so these benchmarks were used to determine the gas costs for those pre compiles and we can't use these these benchmark script scripts like we hope because they call the pre compiled code directly so we're gonna have to [Music] try a different approach to benchmark the webassembly engines and that's still a big to do that we're hoping to have ready screen ups and benchmarks by DEFCON and that's about it cool thanks Casey are there any questions about the benchmarking stuff okay cool yeah why don't we save the best for last so maybe I'll exit I'll hand it off to you if you want to talk about Hera and vm's and I know you were having trouble getting zoom running on your desktop but I could share my screen and you could kind of drive if you like yeah there's not really much to talk about it unless there's some kind of screen sharing so if you if you want to if you want to open the HERA beep on github that's a good start and then I'll say open a terminal cool yeah let me give me a sec to arrange windows let me see if I can do this side-by-side okay I'm gonna try to share my screen here I'm not sure if I can share two windows at the same time now just fine change just one one at a time all right I'm sharing Hera now I mean if you guys can see it and I can't okay so basically this dish would be just a quick start guide into setting up a client for the test net and in order to do that well it actually depends on it's essentially final at this point yet depends on how the native implementation in go atrium will progress and it also kinda depends on the benchmarks but perhaps I defconn will get to a point where it is not even necessary to you to use Hera thank yous one could just use GUI theorem with the built in with the built in vm and then this becomes really simple but I'm not sure if that's gonna happen by Def Con so using care is another option so as you can see it is the website for Hera or rather the the github repository and lean if you could just scroll down until they read me yeah section I'd sorry I just realized the people so two folks listening to the live stream they can't see my screen because the way zoom works you can't see your own screen so yeah it's fine Alex keep talking I'll keep juggling with it here and if it doesn't work I may ask Casey or someone else to share their screen instead so other people can see it I'll just post the link for now that's fine go ahead yeah so basically the the readme hopes to explain the build process and there shouldn't be too much explaining needed but some people had issues with this so in order to build here the prerequisite is a C++ compiler and the recent C++ compiler environment I'm using it on the Mac so any recent Mac works out of the box and on Linux usually it also works and I've turned the box DeHaven tried it on Windows if somebody would like to try it on me does it likely wouldn't work but possibly it just takes a couple of tiny steps to fix it and if anybody tries to do that we would welcome the fixes or just even a bug report what isn't working on Windows mmm but an editor so like a Linux and Mac it should be fairly simple to build there's like four lines in the readme how to build it one need to download no actually yeah that reminds me that we should have two more comments there and so one need needs to download this from get and update submodules and this is a part where a lot of people would struggle so probably should just put in it to read me and then there are those four steps to do and the end result will be a a file which is listed there until the builds less source less Lapera slash liquor that is oh that's gonna be the end result and that's all you need you don't need anything else from all the build process now we do plan to make releases of Hera so likely we also gonna have at least by Def Con at pre-built versions of these at least for Ubuntu and the Mac and then not even this process needs to be replicated that an expert had to actually use this in order to see all those commands lean can you open the II wasn't slash test net triple o when and if you stop yours I'll share my my screen I got it working Casey I think we're go thank you yeah so this is a much beefier read me because it tries to encapsulate a lot of different things let me see yeah can you please scroll down to the second part where it says get this Hera should be like in the middle there okay let my screen froze so here the first step is to actually download our special version of koa Tyrian which has this PMC support built-in and downloading that after downloading that one only needs to follow the the usual guittar in building instructions nothing nothing would be different compared to the official build guide for kuwaiti Rio so hopefully that wouldn't cause any issues for anyone well at least anyone who has built go atrium prior and then you can skip the second step because you already have the binary built as explained previously and and the the next step the list how to actually use go a Tyrian with with this hair of yem noticed Esther 3po this readme will be updated when we get closer to the official launch of the test net with the genesis file and all the actual instructions you have to connect to the test net um so probably this will be the place to look for that but maybe we create a different kind of documentation and we will share all of those and that's about building a next part that we wanted to mention a tiny bit and that's so what we discussed so far is is more like for just getting started with her and just using it as a regular client but the next step just a few words about how to get a bit more involved into the development process mmm so the first part I think which could be interesting is to try different was an engines so we have talked about different ways of engines a couple of times already on this call and Leanne if you could highlight that evm see options line which is down there Tex or EMC options hmm so hair supports different options and through these options it is possible to change what kind of engine is used in herre and with Kuiti reom this environment variable is the current way to pass down those options to Hera Lane can you open the D heritable and scroll down to the runtime options so during the runtime options there there is a first line engine and if this is omitted so no option is specified then it just default to the default engine which is binary n' but that can be overridden by supplying this engine equals rabbit for example which we use a different engine or engine equals hwadam which will turn on the ahead of time compiler and and one other thing to mention there lien if you could scroll a bit up so by default only binary in is built but during the build process if somebody's interested to play with these other engines then they need to be turned on during compilation time and then as well as and not only completion time but also at run time they need to be selected so by supplying the compile time options all of those engines added on top will be in the binary but it will always just default to binary n' and then at runtime it can be selected which one to be is to be used and then the last part of it hera is where to contribute to her so this would be one of the more stable parts of the the current tooling we have but this mostly applies to the binary and engine so as you can see there in the leap readme it says like under Babbitt and Wabun it has limited support and it's working progress and so one good contribution could be to extend that limited support for example in rabbit and too much the support in the supportive of binary so basically what this means is as compared to EVM very VM has specific op codes for state accessing and modifying instructions instead of specific op codes we have host functions so which are kind of like functions contracts can call and all of these house functions are implemented in our binary and support but watham and vibe it only has support for a limited number of them and in total probably if we have 30 of them or 25 but Babbitt only implements six or seven and those six and seven which are implemented are needed for pecan pies and so they are very limited and so one good way to start contributing to he was him if you already know C++ is by extending this house function support in Babbitt so Lane could use a scroll up to the source code so this located in the SRC directory and an easy way to to get started is by comparing with a bit dot cpp and binary and at CPP and and the last thing I wanted to mention here is that we already did a bounty I get coin bounty and adding a couple of options to edit and we plan to do more of those bounties in the future so just keep an eye and if you C++ dev this would be a good way to start yeah that's that's all I wanted to share by Tara for the moment awesome thanks so much Alex sorry I'm just juggling Windows here okay cool I've got it switched back over to the meeting yeah that was that was great I think that's really helpful I think people who are interested in contributing we've certainly see if you've seen a few people pop up and get her and stuff I think this is a great kind of getting started guide and we'll be working on like videos and tutorials and documentation and stuff to go along with the launch of the test net uh yeah I mean in the interest of time I think we'll need to you know we have 25 minutes left why don't we dive right into the to the test net demo okay see if you want to share your screen and click off sure so originally I think Jared wanted to show off the chestnut since he's been doing most of the work on on the the deployment scripts for the test net and getting you know trying to get like guess a guest node communicating with CPP but then his internet broke this morning but Jared um you feel free to type in uh yeah no I mean nothing to say for me you know we have we have a meteor the meteor in contract working fairly well the tooling is working pretty well I think I mean this demo this time was not going to show it but I think you know moving forward more tooling around the pre compiles it's gonna be a very interesting application of like what we're doing here but yeah Casey feel free to like go ahead with the demo unfortunately I saw him on my phone I an extra ste was being presented but okay yeah and Hugo also has been pushing some some PRS to the Explorer and the in the studio I don't know yeah thanks for those you go appreciate it you guys should also mention that we have a beautiful new logo here for you awesome designed by Hugo and if you've seen like webassembly it should look familiar thanks you go yeah no fooling hopefully we'll have some he wasn't t-shirts for Def Con yeah that's cool so we've just masked the the IP address for now until we're ready for a public launch so that's what you see up here in the URL but the main thing is we have three features here so let's start with this we'll start with the Explorer or you guys can see my screen right okay so we're at about you know six thousand five hundred twenty four blocks for is based on ether chained light so it's a fork of ether ether chained light where we've added a few was um wasn't features which I'll get to first so this is sort of the workflow for a new user would be to go to the faucet and if you have and so we made sure that this faucet works with made a mask so when we go to made a mask and you would put in whoops and you've put in the the URL what you're not supposed to see or for the RPC so we've opened up the RPC port so that you can use the test net even if you're not running a node locally let's request let me do the console here to request one eighth boom got a just a transaction now if we go to the Explorer if it's been mined yet and you know so we've got one so this is my chest account so now I have some tests at wha some coins now let's go to the the studio the studio is a tool for deploying awesome contracts so let me pull up this code I have for a a wasn't contract okay so here we pasted in so this isn't the high-level language so a high-level language like assembly script or rust but this is the compiled assembly web assembly code it's just one module and then it imports these new eyes and host functions and this is actually just taken from one of our test cases so we're just deploying a test case here and then we just add some some value and then submit the transaction and I do his have a web assembly excuse me a minute mask pop-up you might not be able to see it so I'm just confirming the the made a mask pop-up and so status success so it has a new contract address and I will switch back to the Explorer and there's the new contract so let's check out this transaction so yeah this is the web assembly bytecode and it's a new contract so we'll check out this contract what oh I know it's there so this code tab was a new feature we've added and so we're using a wabbit je s mod wabbit Jas which is a little JavaScript package that will convert the binary webassembly byte code into the text format which is called wast and so if you see the difference the code I pasted did not have these calls to to use gasps this call to use gasps so this call from to use gasps was injected by the metering contract maybe now would be a good time if Alex or somebody wants to jump in and explain how how this uh use gas metering where this data is coming from this using seven gasps see okay see if you can keep this page open it should be easy enough to explain or so basically if you look at all the instructions after they use gasps statement you started with the 964 store if a Const you recall hmm so basically right now each of these instructions cost one gasps each and the metering contract is just assuming all of them and and getting a sum of six and for some reason that turns into a seven which I don't know why but basically just counts all of those instructions and and uses the and the actual gas cost for each of those instructions right now set to one an insert statement there now in a different example where we would have branches this would look a bit different because this summing happens within each of the branches but here we don't have if we just have a single branch so there's no extra magic going on and and the way this statement is added into this contract is by the Demetri injection process which is done by a system contract living on well it's actually part of the states so we should be able to see the system contract in a block Explorer as well so basically when somebody is deploying a contract and that contract is passed down to the system contract which does validation as well as metering injection and returns the final version which is then deployed to the network mmm so Casey maybe if you would just want to show and the Demetri contract well I'm not sure how much you can show about it but should be there in the network so go to the list of accounts boom this is my account these are some test contracts oh no this is the mirroring contract we're not going to be able to see the wasps code because the yeah so it's pretty big and whoops so this is this is all code that parses a Wazza module and then injects metering statements and unfortunately it it's too big to so the you know the rabbit j/s module for converting the Oise m to wast runs on it run runs out of memory so we can't see the wast code but this where the metering contract lives and that's what injects this this use gas statement here on on deployment one thing I can do is I can send the transaction to this so this this contract hasn't actually been executed yet but so if I send a transaction to it using minimum asked I think we can take seat by the way thanks for the great demo we had a question from the audience which is can you also see the gas price and like the gas cost of a transaction I guess inside the Explorer let me see what what the Explorer so I just did another transaction here it is so the gas limit was sixty one thousand five and thirteen guest use was forty one thousand nine I'm not sure where that well yeah some of it would have been the storage store some of it would have been in this seven so if i refresh here we do see that the storage value was written and this key is broken so we'll we'll fix that but um we can see that the contract was executed with because now there's so value in the storage awesome thank ya so here's the cashiers we don't have a good breakdown of how much of that is the S store or or uh la some instructions but anyway um I think that's everything right we saw the studio we saw the Explorer and you saw the faucet so that is our chestnut do you want to show the account list what did you do that yeah go back to the back account list yeah this was another feature we we added to the to the Explorer we had to implement an RPC method in in death and CPP to keep keep equal to two parity in order to support this feature on on the II wasn't estimate but yeah so this is our faucet account then this again is the contract so what's worth mentioning is right now there's only that single metering contract with a lot of zeros but on the final test that they're gonna be a lot more of those system contracts and because we have a other one which is able to compile even bytecode into it wasn't bytecode or at least execute a vm bytecode and so that's another system contract and additionally we have all the current byzantium pre compounds written in webassembly so they also gonna show up here and we also have a couple of other so-called pre-compile implemented which were proposed for the main net but they haven't been implemented for the mania may not yet but he was intestines gonna have it some of those include extra elliptic curves well one of them is a recovery function on the IDI 255 one nine which can be used to support more DNS SEC verifications so that would enable other deities to be used and another one is a different pairing pre-compile which can be used by Sokratis if we do have a couple of fodder of pecan pies on on the plate um so if anybody is interested to contribute today at Ford just please ask around on the indicator channel and we can point you to the right place awesome thanks guys we have ten minutes left Alex I know you wanted to mention the governance thing also we should say at least a few minutes for questions so yeah I guess are there any questions about any of this I guess we can take silence to me and everyone is just in awe at the amazingness of what they just saw I guess one thing to mention the advantage of having all the metering logic in this in the system contract and then having more pre compiles as awesome contracts is as a you know as a core developer or developing a new client currently with with IBM you'd have to implement all this logic yourself directly in the client it's a lot more code to write you know so pre compiles you have to find some library or if not then write it yourself and whatever language you're writing your client in but with webassembly you would just that the code is is just in a web selma contract you don't have to write anything else it's just a you just use the your your web assembly engine okay so we have another audience question which i think you're kind of already in the process of speaking to but just to raise it explicitly could these pre compiles be deployed as contracts um yeah they are the archon contracts right let's say as I say the killer feature you know one killer feature of webassembly is users get to deploy their own pre compiles so I'd have a follow-up question to that which is how that interacts with like gas and things so like that's awesome if we can have like contracts instead of pre compiles but let's say like the e azam you know function just takes too much gas is there a way to get around that or any limitation there Alex you want to take that or so we don't don't really have a final answer to that because that we also depend on benchmarking this at a baseline the idea is that a lot more things gonna be possible in a contract gasps why stand it was possible with EVM and that's based on the fact that it it's more close to the metal it's not a 256-bit VM it's a 64-bit VM or rather instruction set which can be effectively efficiently compiled to you to machine code so by did assumption we do hope that a lot more things gonna be possible as regular contracts and there wouldn't be a need to overwrite the gas cost and that's what pecan pies are doing they're overriding the cost but of course this doesn't mean that everything should will be possible to be written as contracting in awesome and certain things likely will still take more gas than what the block would allow and in that case you would still have to push in the clients to achieve it as a pre-compile and but I think it would be harder to give reason for it because if eventually the goal is that the gas costs really closely are aligned to the actual computational power needed and and supposedly the overhead of running wasn't should be fairly low and if you follow that logic then say your contract is taking 10 times the block limit and Sadie was am execution is 30 percent slower than machine code then it would be wouldn't be really feasible to ask you to have it as a machine code because it still would take longer than what the block should take so I think it will eventually give us guidelines what can be done in a block and we wouldn't go into the way of having pre-comp eyes which take arbitrary gasps as as we do now I'm not sure if that there was like something useful it's an explanation oh yeah no I was spot-on Thanks yeah just to add to that the important thing for enabling users to deploy their own pre compiles is that the wizened gas costs be calibrated to JIT engine execution speeds because jet engines are like a hundred times faster than an interpreter so as long as the webassembly gas costs are calibrated into Gipp speeds then it should be you know hundred times cheaper and and fairly close to would have you know what the pre compiled a navy implemented pre-compile gas cost would be makes sense awesome cool thanks so much so yeah and the last kind of final few minutes here Alex do you want to talk about the governance thing and Casey I think all if you could turn off your screen sharing but I should please don't turn it off because you could open the sorry can you go to the design repo please you and on the branch service the branch drop down to select the sentinel governance and then click on Sentinel that MD so basically what we would like to achieve is in the long term all of these system contracts would have some kind of Unchained governance but that's a really really long term goal and they II wasn't team isn't really in in into designing governance systems we're only working on designing the VM part of it but we're still really interested in having a prototype of this because it would be really harmless in a test net to experiment with Unchained governance which would have such a profound effect on the system because it changes the way gas is charged and so current idea for this prototype is that we actually split this metering contract which is called a central into two parts and we don't try to do on chain governance for everything and so rather of having on chain governance for replacing the entire logic what we plan to do is just have undoing governance for the gas cost of the individual instructions so this page case if you scroll a bit down this page should be really interesting to those who do who are familiar with solidity already and have done any kind of taps so the goal is that we have defined two interfaces here one interface is the cost table so basically all the costs are going to be deployed as a contract and this is the interface to retrieve individual instruction cost from that contract and the plan is to have all of the displayed on the block the block Explorer and if you don't think that it yet implemented but that would also be it could start for someone who is familiar with JavaScript and has done some kind of tough development and this would be a great way to get into even by just having this displayed on the blockchain Explorer and the second interface standard is the Sentinel in turf interface to the system contract and the sentinel is that the contract is 0 0 X a which K is already shown under the block Explorer with the giant white code which couldn't be decoded so this interface is the way to talk to the sentinel the first method there is validated meter that is the actual method used to pass down a contract during deploy time it does all the magic and it returns the the modified version now regarding governance the more important part is the get cost stable in the set cost stable so the gate cost stable would return the address of this cost able contract and and that's the the actual version used by the sentinel and and obviously set cost stable is a way to change that now the idea is that we have actually reached out to a couple of governance projects and the idea is that they would but anybody is from the ecosystem anybody is free to implement this interface and we would encourage every other project he haven't talked to you maybe there's so many other governance projects editor which haven't really promoted themselves yet so please just consider implementing this and the goal would be that each of these governance systems would like to have at least two of them on the network but each of these words get to a consensus in their own ways whether it's a voting process whether it's based on reputation whether it's based on something else and they would get to a consensus in the Earth's own system and we would have a intermediate contract on the network which has the address of all these governance systems and all of these governance systems then can submit the proposed new version of the the this cost contract and and if there is an ik this isn't specified yet but say if there is a hundred percent agreement then this central governance contract execute the change on the network now all of this is really early and in design and development so even if you're not really into developing dubs but have good ideas hat it should be improved please just join the channel and start a discussion or alternatively just open an issue on the design repo yeah that's oh yeah and the the last part case if you could scroll to the bottom and so there is a link there simple implementation of the above exists under the central governance project so if you click on that that is a travel project and which has a version of these contracts implemented and so basically that's the way to you to get started on on with any kind of governance tab just use these contracts and get it to work with these and then it should work on the test that without any changes yeah that's all I wanted to say about the governance awesome thanks Alex thanks Casey cool yeah I've got the audio wrong there thanks Alex thanks Casey yeah that was that was awesome I'm gonna I've got a hard stop now so I'm gonna kill the live stream but yeah thanks everyone on the team for sharing thanks guys for listening and and and people on the live stream people with questions we hope to do this again in I don't know what do you think Alex what's the next one gonna be I think we're planning to do one more before Def Con is that accurate yeah that was the plan hopefully hopefully it's gonna happen some two week prior to depth on yeah awesome says I mean something like three weeks from now and and check out the Gator I am / he was um slash lobby Channel yeah we'll post updates there thanks everyone thanks guys okay thank you bye bye [Music] [Music] 
[Music] so [Music] [Music] [Music] thank you [Music] [Music] [Music] so [Music] [Music] so [Music] [Music] [Music] [Music] [Music] [Music] [Music] hello everyone and welcome to number 103 of the ethereum core devs meetings i'll be your host hudson and we'll jump into it with some exciting yellow v3 updates from the client teams and we'll go through um all the regular ones and then also pooja is going to be talking for ethereum js who has given uh her an update so uh james if you want to go through everybody yep uh let's go through also happy new year everybody hope you had a good holidays and where is my list let's start with uh nethermine can you start this this is updates on your readiness uh so the in december we updated 2929 implementation to make sure that it passes all the consensus tests from the development branch and everything is green now with the demand for the berlin 2929 and then 27 18 29 30 so both were implemented to the extent where it worked for a basic operations and it obviously would fail in some cases which were not yet fully specified and may change so we're just waiting for the final specifications decisions on those ones and then we also built already the packages for the gmp library for the faster i think it was two three six five i believe the number so that's that's ready to change and that's a reason of the easy change after that so everything is ready and the other the other ones uh were implemented long time ago the ones from yellow view ones too all fine great thank you and basu uh everything is implemented we're still working on the testing for 29 30. um martin from geth provided some uh cross-referencing some crop referencing data so just trying to check against those okay and open ethereum uh yeah it should be everything already so we finished implementation in december so yeah we don't expect a new thing so yeah everything down cool and get yes we are yeah it's 29 30 18 that is remaining after that is mainly some regular what's called yeah surrounding stuff but on that one i did generate some uh reference tests to share that i shared with ry uh but i saw that light client has been doing some updates in so maybe we need to change those once again and maybe like science would like to talk a bit about how the implementation is where it's at sure yeah i'm really sorry that it didn't get done before christmas i had some personalities but i it should be up to spec now there was one thing i needed to change after you or one main need to change after you made the cross client test cases i i hadn't updated the signing hash to generate as just an rlp list it was still concatenating a type byte so i i fixed that and then i went ahead and i updated the the cross client test so if you want to pull the new ones right that should have the proper signature hashes okay do you think that's why martin had to uh he couldn't deserialize them immediately he needed to change i think the parody bit or something although it probably should have changed more than just the parity bit if you didn't rlp that whole list yeah i'm not sure if the parity bit should be the issue there it should be the hash that it was created from the vrs yeah okay so you should not start another vrs sorry the whole transaction i'm surprised it didn't break more catastrophically than when martin tried to deserialize my block body but okay thank you so we're pretty much at the at the end here i wanted to give kind of just a sanity check on stuff that we're doing we actually i think pooja had js or did that happen already oh yeah um uh i i can go ahead with the updates on json i have been provided by holger uh the team lead forum from the js uh they are closing to have their client ready to join the test nets development is taking place in a mono repo they haven't done any release yet reflecting the changes and the current state is that the client is now getting a reliable connection on mainnet and is processing the blocks with javascript vm with decent enough performance for yolo test net readiness they still need to improve the connection reliability on the pu poa network improve the hard work integration and do some other fixes all yellow v2 eips are implemented and they are interested to join the first ground to test their client and they should be ready latest by the end of this month that's it cool and your v2 is uh who would be the best person to point them to to being able to uh to connect i don't know if your lubi 2 is [Music] anything to connect to this stage yeah all right um in a few weeks it would be i guess it depends on the answer to this next question so let's go to uh thank you peter for relaying that and great update from from the js team i'm excited to see that work coming along so the at this point we're pretty close to having the clients ready to implement things and i just wanted to check that deploying yellow with e3 does it add value now and or would it be would going to main test nets be more of value just to take a pause and to think about that as a group like which should be the priority and i guess like the in my opinion the reasoning behind that i think is if we were to deploy on yellow v3 and run that and then run a test net that especially especially on the poa test nets that are already running like or even robson um what value would it add to have yellow doing the exact same thing that the next test nets are doing i guess i guess the one thing is if yellow breaks from the new eips we wouldn't have to relaunch the main test nets but i want to hear opinions if that's not the case or like we're overthinking it but pretty much that's the only thing so that's that's the reason why we don't want to launch on test dance because things break quite often and people rely on the testaments okay well that sounds good um are there any other opinions on that otherwise i think james what would you say about this you can go ahead martin yeah i was going to say i mean launching launching the test net from the perspective just launching in the explorer the faucet and stuff it's not that much work compared to you know implementing all the stuff um so i don't think we need to over think it too much you mean launching the yellow test net right you're launching like okay not robsten and gordy and all that right yeah i mean we have the templates for doing it now and they're pretty slick to just it's it's fairly easy to launch because it's more difficult to you know pick up all the old transactions and replay them and make sure that all the everyone gets on the same test net but actually just launching the yeah the basics is not too much work now so i think we should do that yeah okay is there just thinking of timing is is there like a could we say something like have it up by next friday so people can start joining before the next awkward eps call kind of thing i i think that's a bit too optimistic because he even if if if we are happy with the 2930 implementation it's going to take at least a week to get it merged because it needs to you know a fairly thorough review so then after that it's launched we can like consider after that merge we can do the do a release which contains the but our next release is going to be a big one i'm not sure what that's going to be um yeah i guess we could launch the test net even though we haven't made an official release yet though but one week is a bit maybe uh cutting it does it help like can other client teams help with that um yeah like say you know if in basically we have it merged before its merchant gets does it make sense for us to try and start the test net and then you know forget the the join once it's merged um or i'm not familiar with the tooling yeah i mean you will be very welcome to do so but um then you would have to do it from scratch because uh the like ansible test and the puppet definitions they all base they're based on cats okay yeah yeah faucet the explorer and all the other impress are based on gas got it um yeah that might make it turn it from like a few days to much longer um cool so the next chord i've called maybe yeah that would be a better aim i think but what would really so personally i think you know yolo testnets are nice and fun but what's really really awesomely useful is when these test nets can be activated for fussing uh so if you if other clients are finished with the yolo v3 implementation uh and make sure that it can be enabled for fusing then uh yeah we can get that started and that i i mean i can get that started way before our pr is merged because yeah that just runs local what's the list of things that i guess that's something i could help coordinate i think yeah i i think by this time all client devs knows what's needed because we have uh passing calls and discuss these things so i don't think i need to explain too much about what's needed from the client things okay so i can just follow with client teams and then we can work on getting that up next week while you guys are finishing the pr so then we can have yolo stuff by maybe the next chord f call yep does that sound reasonable with everybody and then i'll start looking at tentative fork block dates proposals kind of things like that the week after in preparation for next call in case we need them so i'll have the math and stuff done for that great was there anything else james that's it for me excellent um next up uh well if you have i don't think anyone else has anything maybe just i'll clarify the action items so the note for the note takers oh perfect okay this next week reaching out to clients to get everybody done what they need for fuzz testing so that can happen soon um then the guest team is working on final reviews so they can publish yolo v3 and then before next week's call hopefully get yolo up and running so we can talk about next steps including fork date proposals great the next agenda item item two um first bullet point would be evm 384 update um that was asked about in the agenda notes so if you click on that it'll come up with the question is there anyone here who can speak to that it's usually uh axic i don't think he's here today though hi uh i think i can understand that this is like new update v5 being prepared but that's not ready at this point so i don't think we have we have anything to present in this meeting um i was like i added this question to the agenda for a reason that uh the pollutants with uvm 384 is not like speed of the principal operations or whatever those can be achieved to use a reasonable degree like there's a degree which we can call reasonable uh compared to like naive implementation non-optimized native code but the problem with implementation of final cryptographic operations is that evm itself adds an overhead which is twice as large as the cost of those mathematical operations and i wonder if it's even addressable and like i posted around two months ago i think because the comparison between uh how much it would cost run-ins to pre-compile in different pre-compiles different implementation of pre-compile compared to how it's like can be implemented in evm and what is the current gas costs of payload operations in evm 384 and the difference can be up to 10 fold comparing like the fastest native implementation to the uh like uh optimistic view on the evm384 and if there is no update on this i would have been questions like maybe it's a dead end and we should just because no one uh disregarded that there is need for more cryptographical primitives in is 1.0 already uh and if it's a dead end we should just go back on track and continue to uh like and get back to pre-compile and formalize the process of uh introduction implementation and a kind of acceptance of cryptographic pre-compiles in general like make formal criterias like we did for based on the work for 285-67 for example uh so well it's like a long uh long uh long statement but uh it's you you took the the two ten times uh more costly in gas from your your benchmarks or from the update with v4 uh i think is the one which was the latest posted public update uh like i taken the guess fork which was also posted in those nodes uh i take in the code which was used for benchmarking which i assume implements something close to the pairing function uh or paying function in full it's not that important and i just look at the numbers which like amount of gas which evm like which is spent to run this contract and then i looked at the how much gas it's it's actually spends on this new vm 384 op codes and it's only like one third at maximum uh so at the end of the day it just becomes uh that the gas which is spent on control flow and evm code not related to evm 384 operations but just for whatever it is there uh in a compiled code to ensure the control flow is already a few times more expensive than the pre-compile which does everything yeah yeah okay uh so yeah i think like more or less that's that's that's that's accurate and that's what the the next update is going to address to to some distinct i mean uh but yeah i think that's that's that's what we also see uh so uh i think in terms of i mean i personally benchmarked uh this evm 384 uh implementing pairings or like some some other stuff i'm not really into details what exactly uh that the implementation we have uh if that's that's a complete final final version of and this is exactly match with the of the ap but anyway uh in terms of like runtime speed they are comparable in terms of gas cost this issue that uh because like mostly all the computation up codes in evm are like at least 10 times 10 times overpriced comparing to anything else or any anybody that you can find uh that's that increases the like this virtual gas cost of the implementation and that's what we we try to address in the next update uh but there's like internal discussions still like how exactly approached this and uh yeah it's it's rather complicated issue yeah so like as you mentioned those are potentially 10 times more expensive than actual time which is spent for those operations sometimes overpriced comparing to i mean they should be ten dollars cheaper that's that's my my position on that at least oh well i mean my question is like is it even fixable in the observable future because uh partial gas costs proposal was either rejected or stalled like half a year or a little bit more more ago so we wanted yeah yeah so like i mean i mean fixable in terms of our core depth coordination i don't have opinion about that in terms of technical technically fixable yeah of course yeah well i mean there is no doubt that it's technically fixable uh like but in terms of coordination uh which already like uh nine months since the last four i don't remember actually sorry uh and it stalls like the events 384 as the proposal is great it's like it's just the same as the plague pre-compile which is unusable for practical purposes in its current form uh so if the work continues to actually fix all it together and i must like it would require a lot of free pricings in evm implementation itself this is a good work but i say that yeah okay so yeah we need something we need the solution and solution was made already yeah yeah i can speak to um kind of a little bit of what we've been thinking roadmap wise behind the scenes and starting to get feedback uh later but i don't think it's fair to ask paul like what that's gonna be i guess because that's more of a group decision yeah this goes back to the bls uh versus evm384 discussion which we decided to put past berlin uh yeah it's related but it's like more related to also generic approach like i don't know if it applies to every case to every other maybe future uh cryptography compile which can come up there was a lot of work done for bls there was a lot of testing cross implementations and was even you know we won without problems found in this uh people like james i don't didn't see him in participants today he did a lot of work for just uh separately from me and other people to run an extensive ma one month of fuzzy testing of the library was uh like with kind of gray box testing in edition and explicitly testing the exceptions which are in a spec so there was a lot of work done which can be first of all kind of we can see that bls implementation should be considered safe on top of this we can use this process on what we all did to kind of ensure the safety and make it like a standard for all in principle cryptographic proposals and well third and like if it's more and more delayed and as i was also mentioned in this analysis of gas cost for evm384 implementation now there is also a wonderful library from supranational uh blst which is like insanely fast uh formally verified and uh so it's a c library and since all clients already use the c library for uh segp signatures uh like standard extreme signatures maybe it would be even a good idea to kind of all agree and standardize it as a like reference implementation which also will uh eliminate risks of consensus divergences so i want to start i want to say real quick without taking a position i do believe that it's not consensus among this group that there is no safety concerns although i agree there has been a lot of testing with again without taking a position there has been safety concerns regardless of how much testing there's been due to the nature of precompiles in general and comparisons to how 384 is structured well i mean no code can be claimed safe i think in principle within the uh changes like we think that uh go language uh itself got a security update due to vulnerability so it's a standard library so like then we should even start to talk about the standard libraries and potential promise calculations uh in different languages no code can be claimed safe can be claimed like save up to our bar which is set to something or to the best of our knowledge and effort but yeah no code can be claimed safe and like i might have absolutely yeah i might have not i might have not been clear i thought you said that it was considered safe by the group but i might have misheard your exact wording on that so that's just why i was pointing it out um but this is kind of a discussion topic that's been going around and around and i think the requests that you made for newer benchmarks that people like paul has been doing is a fine request but it's not like we're going to be able to release either 384 or the implementation you've been working on until at the earliest the next hard fork which we will hopefully be soon discussing pre berlin to start making plans um it could be post berlin that we really get around to solid concrete plans for the next hard fork but um that's something where i would recommend having a lot more ascent communication as i usually try to bring up um with getting those benchmarks together and using the chat rooms for 384 and for the uh implementation uh space that and the magician's thread that you have um it's not about including in the berlin it's uh more like about the approach to cryptographic recompiles in general formalizing the process of acceptance um and then like if it goes into the next one and not in berlin it's it's still fine it's just that there are primitives which would be great to see in this 1.0 yeah but that's going to be included in the current form yeah i was gonna say i don't i don't know if it's worth it to try to formalize some uh you know official this is how we will include this is the process to include the future upcoming crypto pre-compiles um i think we're gonna have to take it on a case-by-case basis i mean to decide is pre-compiled is is it worth it for this one and why what and how much testing and what is the core you know i don't think we should spend too much time formalizing everything there that's just my opinion yeah and i would i would agree that so far we've taken the approach of we do things as they come up before instead of deciding how to do things before they actually happen and i feel like this kind of fits in the spirit of that unfortunately we had this problem that every time the work is done uh it's only rejected on a form of like like based on the on like subjective opinions that well it's not safe something like this well if it can at least set a bar like yeah it should it should be considered so trying to set an arbitrary bar or something like i like i understand that the intention here is to help get pre-compiles and we'll help get cryptographic functions so developers can use them and that's something i totally agree with by going back to when we were discussing this and the reason why i kind of pushed on unwinding doing bls is one evm they're the the it wasn't to me about the safety concern it was the we have this discussion that needs to happen that's going to take a while and we have other eips that are ready to go and we need to for focus on getting those out instead of continuing pushing things back and so the last couple months the last couple of all chord f calls have been focusing which is great because we found the um 2830 was a lot more work than we anticipated which is we wouldn't have found out if we kept pushing back on this bls stuff because the evm8384 team is still going so it's so um like i understand frustration that sometimes things get kicked back or it takes longer than you than people would like and i i it isn't like we just got to keep moving some things at some point uh it it's it's also not my point uh so i mean vls was ready to the point to be included into the first test net and since it was 384 proposed and like sand was kind of uh removed from yellow v2 and v3 and uh like removed from berlin uh including fine with this it's not my point my point is just that problem so it's this problem in general and like it's a form as a process for uh well at least it should not be swept under the table and say well everything should only happen after berlin i don't put it for berlin like that we need immediate discussion i should i only identify the problems that well what would be good to look at and it may be used as a standard or a internal bar for cryptographic primo meters but uh i just wanted to emphasize that pre-compiles are still most likely the way to go and the attention should be paid so so martin you might have had a comment i saw you on mute but i i wasn't sure yeah yeah maybe i unintentionally did but oh that's fine either way i what i kind of think right now is that the longer time that goes without any changes being done to the code base the bls code base um i mean guess we're still doing fasting not cross-climbing but still uh crash passing and it would make i think it's good if it's like six months since and the change was made to the code and it's maybe even used in a couple of projects and but i mean six months ago all the code that was written was kind of brand new fuzzing looks to be a well paralyzable process so it's not a matter of time it's a matter of computational power one might think so yeah so like it's it's also not a great comparison like i know james did not say like was the random fuzzing but uh kind of attacking with it with specific factors which potentially can trigger discrepancies and mathematic in the code itself which done some mathematical parts and like error handling or input validation uh so it was kind of another view on testing such pre-compiles do you mean james prestwich from the cello team when you say james yeah yeah i mean i mean yeah i mean this is james but he's not he's not in the call uh yeah he's not here uh so uh like there was a great amount of effort put in there and like this process of fuzzing for whatever reasons can also continue indefinitely that's why i'll continue to mention that well maybe we should at least say that it should be equivalent of six months of fuzzing on like 16 core cpu of this pack on all threads or whatever so we can at least try to achieve something not say like well we fasted for a month but we're like local laptop one single core instance in cloud or or what what so we can put a check mark on something more formal without saying like let's keep this code and change for next six months and see like well if it's a change that nothing happens but people will also stop paying attention to this problem and uh like they will they get so frustrated and stop they afford to find the bugs improve the code quality uh and continue to work in this uh after it's included yes it's frozen it can be frozen even if it can be improved but before this if it's just stalled for months months a year then it will not be like possible to easily get back to this work okay um anyone else have comments on this some just thoughts continuing work well connecting with james expressworks on because he also had did the other bls precompile with with the cilla network so continuing work with him um i think it's totally fair that we took a while to focus on berlin and it's definitely even though it's not come up on calls it's been it's still on my mind that that problem has not been solved and it's something that we should or i my opinion we should be addressed somehow in 2021 or this this year and like the stuff to move forward the work that you're giving my suggestion would be that there is currently an unknown amount of pre-compiles that the evm384 would be able to supplant and then there is a currently unknown amount of precompiles that it wouldn't and there and just get and getting closer to more definitive what is and what it isn't on in the implementations is this going to take a while for the evm 384 team and it's not really fair to them to ask to like have a conclusion on this call today and i don't know is it worth having like some separate calls to discuss this it feels like every like second quarter of calls we end up spending a fair amount of time in this i guess crypto pre-compiled versus evm384 um that maybe it just needs like a separate track so that people are able to make you know to have these discussions and and make a bit more progress um i think the other thing that like you know it's probably worth discussing is how it's being used on e2 and the data that we get from from that um but it just feels like it yeah it's it's like uh maybe too early and there's a breakout room doing a breakout room but it feels like yeah it's more it's not like a one-time thing you know like what 1559 you know we have i don't know monthly calls because there's just like a lot of progress that happens and a bunch of different teams working on this with different updates and this feels like it's maybe not the exact same thing but close enough that having like a more yeah a different track might be helpful because it would be good to have the discussion with the evm team beforehand so that they're also more prepared and and and the expectation of the discussion too so that is a great idea yeah well i mean my report is few months old i i posted in a quarter of chats and like i was hoping that maybe some questions from it can be answered but well it happens that those are not and frame was unclear so i also needed to state why it may be the case and most likely it will be the case that native code still needs to be included and then there should be a process for this inclusion i think we should move on to the next point yep sounds good to me so um before we do that we do need to decide would there be who would be up for attending or contributing to a monthly breakout room call because we wouldn't want a breakout room call with just two people uh yelling at a wall okay oh sorry go ahead martin no i thought you you were asking how many people would be interested in attending or did they misunderstand yes no that was exactly what i was asking yeah i would okay and then ry you said you gave a plus one so it sounds like basu could have some representation or was that for a different message that was a different thing i was a plus one in micah's message that like clearly the bls 384 thing was just like a instance of the issue of like more um of you know just pre presetting requirements um you know which does sound like an all core devs kind of discussion which maybe we don't have today but just like it's not a breakout room kind of discussion um and it would be good in the future so that this doesn't keep happening yeah so you're saying it's a process discussion more than maybe technical on some level well i answered it in chat but it's actually both so okay we can continue writing okay so um puja if you could um kind of talk to someone or james and puja or whoever can coordinate part of this talk to some of the client teams about participation in maybe some something like a monthly call just to both get updates on fuzzing on um alex's stuff and uh i guess whatever the evm 384 updates are i think that would be beneficial and save us time in the all-core dev meetings and and mass sounds good yeah i'll connect with the alex uh james and james prestwich with yourself okay and yeah the 384 team i can get a heads up too i think they have some area of the ether r d discord where they hang out i think um thanks everyone for that the next one is eip2937 um that is the set indestructible op code by vitalik uh and oh the okay the italics here today um if you want to go ahead sure uh so it's the center of self-destructive indestructible ap is meant to be a companion to the account abstraction eip the goal is basically to allow um people to create contracts that guarantee that they cannot be self-destructed which basically means that they guarantee that their code actually will exist and continue to exist and in basically the same form forever and this is valuable because it allows um account uh uh abstracted accounts to have uh libraries like basically they would be able to make external calls to these contracts without the um nodes i'm having to redo those calls if the industry if the library is like to get uh like basically without worrying about the possibility that the libraries get modified and then i believe um someone who could maybe provide some more um info on this angela and tyler are here today um and i think um they can if whoever wants to go first uh yeah so um initially the spec was to create a transaction-wide global set variable but we ultimately decided that was unnecessary and implemented it as a local variable to each execution frame [Music] okay and uh is tyler here i didn't see oh goodman okay yes um yeah i think the talent covered it uh why it's why it's useful why we implemented this just to make sure code can't like do some rug pool trickery through delegate calls to self-destruct and kind of ensures your code will always exist and be there okay do we have questions on this uh mike i think you raised your hand uh yeah just can someone give a very very short like one or two sentence reason why we don't remove self-destruct seems to cause us no end of trouble and i think we've already discussed this i just need a reminder and and wanted to ask this same question too to be honest uh the talent can you answer that or either that you or angela or tyler that i guess the reasoning behind removing self-destruct is that the right question micah what why don't why don't we still prove self-destruct like self-destruct continually causes us headaches there might be there might be walls that can only ever exit with a self-destruct and this is the the age-old issue of worried about those contracts having full breaks correct okay so i think just very briefly chiming in there because i was also somewhat involved in like the kind of obstruction and then and self-destruct uh discussion there i i i think basically like general agreement is that it would be really like the best solution to get rid of self-destruct completely but i think the set indestructible uh like the beauty of it is that it's like really really simple and and non-controversial so you can basically already just have that in the next fork after of the balloon or whatever it would be quite easy to do to get there i think of course that these ecops always have some subtleties or something but um um and it just gives you like a lot of tangible benefits already not it's completely outside of the khan abstraction um um context so um so basically the idea is if someone else wants to really champion completely removing self-destruct i think we would all be happy to kind of join behind that effort but it's just not non-trivial and so basically just not doing other things because we want to get rid of cetera completely but then we never do because it's complex yeah i feel like then then it's just better to get go with the second best one that's just really easy to get as it is easy when compromising and and and destructible doesn't preclude like removing self-destruct entirely at some point later right like that would just turn the opcode into a no up um and what's the expectation that uh the solidity compiler would admit as like by default um indestructible and i guess you would just need to add a flag and it would just like the idea would be that you would just like set the first bite of the contracts to be in the industry the seven destructible up code and then like move all the offsets the code offsets by one and so forth but in effect we will be adding additional complexity in order to dance around something that should have been removed long ago i wouldn't call this non-controversial yeah i mean i personally am in favor of just removing self-destruct like i think like yes it is egg breaking but on the other hand uh make egg breaking an egg now is always easy is easier than uh doing it uh any years from now especially given that we're in a rapidly growing ecosystem but like that discussion would take a while um a lot longer than missing a single call okay um and this is also something where we plan on improving the process for discussion around eips such as so so that we do not have people coming in to the calls and proposing in the ip and then it kind of suddenly being stuffed in when there might be other higher priorities so that's not to say this isn't important but just to assuage anybody who has process concerns around eips being brought up randomly or kind of anything making it into the agenda there's likely going to be discussion and maybe even changes uh to how that works at a process level yeah um removing self-destruct idea uh i think that would be extremely breaking not just from the wall perspective but actually the whole new upgradability pattern which is possible with create 2 i think there are several availability uh contracts which rely on self-destructs to be able to upgrade themselves in general i think this indestructible looks nice but i think there are it's lacking a lot of specification but i broke most of that on theory magicians so i guess we can take it offline okay any other comments on this um the fact that it's used for upgrades is basically that this feature was intended to be something different so it's it's used it's i would say improperly used essentially because it was not supposed to be for this and uh maybe we should discuss better ways better future ways for upgradability yeah a bit late for that now you mean so you mean for like future hard forks beyond berlin artem uh well the sooner we remove self-destruct uh the better but my question was not about the some specific time frame but rather that if there's a problem where that removing self-destruct will break uh upgradeability of contracts then we should discuss the alternatives yeah that's yeah i guess i'm kind of confused where that's coming from too well i think it's more about the fact that it breaks contracts that are already deployed and it breaks the general pattern yes exactly yeah that was my point that there are most likely contracts which have been programmed to use this feature and if we remove self-destructs we're going to break it okay any other comments okay thanks everyone i want to go over the last two decisions made and also make sure because i think we have piper from trinity now just get a word in about anything related to berlin or future updates and what trinity's up to um but evm 384 basically the for the note taker puja and james are going to coordinate on a potential monthly call that could happen to discuss both process and technical issues and concerns that were brought up in this call in order to save time in the all-core devs calls from repeated discussion over similar issues eip 2937 was presented today by some of the team that has been implementing it and there will be a sync discussion primarily on the ethereum magicians forms for continued iteration of this eip and then finally let's go to piper piper did you have any updates um that you want to discuss with everybody or announce or anything like that piper might actually be away right now i think he might have had something sorry i was tying a string on a balloon for my daughter it was very important that's a really wonderful excuse uh it uh i don't have any updates at this time no okay no problem just want to make sure you got a chance um the final uh piece of this uh agenda um after berlin i'll be stepping down from the role of coordinating and recording and basically all the things related to the eth 1.0 core dev calls uh if you click on that link there is a tweet thread that i put that kind of outlines uh explanations as to why and things like that but basically i've been doing this for three years i guess and it's grown tremendously and i think that although i could keep doing it there are other things i want to pursue inside the ethereum ecosystem and also in other ecosystems such as the cash um that could take up some of my time um but i've you know loved doing this and i'm really excited that there was behind the scenes coordination to um have the role replaced by tim bico who's on the call so everyone welcomed him to the new role once we do the transition it's going to be a multi-month transition where tim takes on more and more responsibility and uh he already does a lot for agendas and sometimes recording and stuff like that but um it's not going to be till the plan is kind of tentatively after berlin would be when i'm kind of at least shifted off if not completely done uh with the all core dev calls so uh tim did you want to say anything uh sure real quick uh first of all you know thanks for doing this for so long hudson um it's uh pretty big shoes to fill um but i'm i'm very excited about uh getting started on this um because i'll be doing this full-time you know over the next couple months right now uh my priority is finding somebody to replace me on the basis team uh the work there um but i'm slowly ramping up part-time into this and one of the first things i i want to do is just chat with a bunch of folks about how we can uh improve these calls and just the processes in general i think that's you know kind of been brought up today a few times already so i've started you know having some chats informally uh and i'll probably be doing more of those over the next few weeks and and months and trying to share kind of the the feedback uh as i as i get it but yeah excited to get started on this awesome and i want to give a special shout out to james uh hancock and puja uh ron john cause uh they've been uh tremendous help uh you know james has been the hardcore hard fork coordinator for a bit uh through good times and rougher times of discussion uh and pooja's been great uh coordinating a lot of the um ethereum cat herders related coordination problems that have occurred uh with discussions in the past and some of the stuff like breakout rooms and eips and peep and ep video calls that have been good at explaining to the community the importance of some of these low-level protocol changes oh james did you have something you're unmuted well i was going to say snaps for heads and this has been quite the long ripe for all of us well thanks and it's been great having you i'm sure i'm not the only one with that cinnamon awesome um so yeah that's pretty much it um also paste what did i have i had tim's tweet thread it's not even that long uh but the yeah mine's in there if you have any questions just let me know uh but yeah i'm not leaving the ethereum ecosystem that that's also the last thing i want to say because there was some confusion that because the tweet thread was me leaving a role that a lot of people knew about they thought i was leading the ecosystem but that's not true i'm still doing stuff internally at the ethereum foundation in different roles and with stuff with cat herders and other community things so uh yeah that's it for me and that announcement um so yeah thanks everybody this has been great honestly i've loved doing this for so long and i think the new chapter is going to be great with tim uh let's see is tim gonna grow a beard no i've done it in the past and i've saved it could we get hudson to send tim his beard you know i think we need an eip and then a lot of discussion i think this is a good use of bitcoin grants yes uh or or a prediction market actually more so could get whatever auger poly market on this um okay so that's the last item what else is there anything else that anyone has that was not on the agenda uh yeah if i may take a couple of minutes to go with a quick announcement uh that is related to the eips that are considered for berlin um in the upcoming weeks we are going to have two cons one with martin and vitalik on january 15th for eip2929 and eip2930 at 1300 utc and another call with greg on january 20 at 18 30 utc for eip2315 so if people have questions or they would like to have an overview i think that would be a good time to interact with the author's instruments and recently we have also recorded an episode with the guillaume ballet that is on binary try that is not related to uh berlin but if people are interested uh they can watch the episode i just pasted the link to the playlist and uh thanks for doing this pooja i think it's been really helpful and to be clear if you're in this call or if you're a community member who is interested in this type of low-level development reach out to pooja so you can get the zoom link before the meeting starts and you just heard the dates so feel free to ask if you if there's uh time zone confusion or anything like that thank you okay is there anything else from anybody uh i have posted the link to the self-destruct removal eip which was posted uh in june uh last year it's 27 51 in case anyone wants to take a look okay thanks so much for doing that that's that's very helpful to see um to see what the previous conversation was is there any magician's post you're aware of or is that linked in the eip uh it's not linked in the eap let me just link it separately in the chat okay or even the all core devs chat if you aren't able to get it in before the zoom call ends um that'd be helpful um all right cool anybody else looks like we're ending early thanks everybody the next call is in two weeks on january 22nd at 1400 utc and everyone have a great day and happy new year happy new year thanks guys thanks happy new year [Music] [Music] [Music] you 
[Music] [Music] [Music] [Music] [Music] [Applause] [Music] [Applause] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] so [Music] no [Music] [Applause] [Music] [Music] [Music] so [Music] so [Music] [Music] [Music] and we are live uh so good morning or evening everybody uh welcome to awkwardev's number one one three um we have mostly london stuff on the agenda today there's been a lot of work on that uh over the past couple weeks um no background today no i guess i can kind of blur it or put my ethereal background if people prefer that back in the blockchain um cool okay so for london um first thing so every team i think was sinking to baikal this week which was the new devnet i don't know if someone wants to give a quick summary of where things are at with the network i can give you vital status so in its stats we have five nodes two gaf two nether mines and one bezel they are all in sync as far as i know turbo gf is in sync too i'm not sure about open ethereum in nethermind we implemented three funds the last one five five nine does limit changes and eib three five four one all clients seem to be working fine but it will be good to test it in the same way as uh you come from the ethereum js team tested the allowed network so you can feel free to do that that's all i think um yeah is anyone from open ethereum on the call to give a quick update of where they are i thought i saw i'm not sure that they posted a boot node um but if anyone from the team wants to share where you're at yeah yeah we have the updated issue on because the github still missing the guest refunds they be implemented for the bike also we're not able to sync at the moment okay so this is the last one you have to implement okay got it um so what do people feel makes sense in terms of the next steps for baikal um my personal preference is probably to keep it up and running basically until the fork uh and the reason for that is it gives uh imp it gives basically tool tooling and whatnot um you know a network that they can use that's already up uh if they want to play with 1559 or stuff like that does anyone disagree with that do people think there's other things we should do with the network i think it sounds good i i don't know how much how many transactions has been sent over it i haven't i personally have not done anything um but it would yeah it would be good if you keep it up to so so other people can experiment more with the up codes and going up and down on the gas limit there were some changes made on the 1559 spec regarding to how much the gas limits well the mechanics for how gas limit can vary up and down so it will be good if that also is tested i'm not sure if if that has been covered i suspect not got it yeah so i think i agree that makes sense i know abdel had built a tool that we could use to spam uh the the networks we built when we were developing 1559 i suspect we should be able to use that on bikeout as well assuming uh there's an address with enough eth so in general just keeping the network up obviously letting open ethereum the time to to sync up to it um having both you know manual transactions on it and people playing around with it and then trying to to to make sure we test the limits of uh the the gas limit up and down um that seems reasonable anything else on on bike owl okay um so next up on the agenda uh i had the eip 3541 which is the eip by aksik which has been implemented in baikal we didn't want to make a decision about inclusion in london last time because it was kind of the first time that it was brought up on the call um i'm curious how the people feel about uh including it in london now uh it seems everybody's had it implemented so yeah any thoughts objections support i'm in support let's include it cool anyone disagree with that okay i feel much better because when we take stuff out at the last minute that's usually a bit risky so let's include uh 35 41 into london i'll update the spec right after this call similarly uh over so two calls ago i think we agreed to move back the difficulty bomb to uh december 1st roughly rather than q2 which was originally proposed in eip3238 james has been working on an alternative eip so three five five four which pushes back the difficulty bomb uh so i think the first uh the first increase would happen i believe around december 7th you said james um do you want to take a minute to walk us through like uh i know you you worked on some some uh back tests for it to make sure it lined up right uh do you want to yeah yeah so the there's a um a script in the eip itself you can run to check it this and it looks at the difficulty adjust coefficient based on the current uh epic what it would be that's kind of pushing up the difficulty so that block time increases and i went back and looked at the last three times that we first saw the difficulty bomb go off and all of them were right as it hit 0.1 on this ratio um which if we were to do this nine million seven hundred thousand then point one is reached on the december seventh which is when the first time that epic of every 10 000 blocks the epics switches over on december 7th um so it looks like it's pretty good i use yeah i don't know if anyone else looked at it but i went as and on to as many avenues as i thought up to to double check and so at this point i'm pretty confident about it the the only risk is if the difficulty on the network changes significantly then when the then that when that point one ratio happens could happen earlier or later yeah i just eyeballed it and looked at the numbers you know the current eip that that we added in near glacier uh which is gonna go out soon and basically we're adding an extra 700 000 blocks to that eip which is roughly four months uh so july plus four months was uh december so that was my very low tech way of eyeballing it um did and i i think i thought geth has already get already has a pr open for this um i don't know yeah we actually we we merged the original uh number and we have a pr for the second so we have 9.5 but we have an open power for 9.7 million okay um does anyone else have thoughts about this yeah sorry there was a comment by james in the chat that like yeah july plus four month is november but the bomb was going off end of july not beginning of july so it's basically end of november not uh november 1st um cool does anyone is everyone okay basically moving this into london and updating uh 3238 to have uh instead 3554. no objections yes yeah last call uh okay so in london um this is going very quickly um now to something i think might take a little more time on the call uh jason rpc naming i was hoping we could resolve this async but it seems like it's an impossible problem um basically uh go go for it yeah which is i think if there's some way to schedule this we should come back in two months and rerun and have someone rerun those numbers to check that the ratio doesn't change at all so like four or five awkward hours from now yes i will absolutely uh do that yeah good yeah good call um jason rpc naming so i'll try to summarize where things were at and hopefully we can come to a decision on it now and the main reason why would be really good to come to a decision on it now is we're building these test nets for infrastructure providers and basically the naming of the fields is the main thing that's blocking uh people from playing around with this obviously they can support it then you know change lands in the future but that's kind of a bad experience um so i think it was two weeks ago uh the get team put up uh put up a uh just uh talking about basically the json rpc renaming in the header field renaming uh we got the pretty quick consensus on how we would rename the headers um but for the json rpc um the argument from geth was uh we should use kind of variable names that were shorter than the ones in the eip so the eip uses max priority fifa gas and max fiber gas um and stuff that's kind of aligned with the other uh naming conventions uh that are used in json rpc so the two that were proposed were gas tip cap and gas vcap which obviously aligns with gas gas limit guess use gas price um then uh we kind of had this this long conversation on discord with a vote um and it seemed people liked base fee per gas uh to to to specify the base fee priority fee for gas for the the fee for the fee the priority fee and fee cap or gas for the fee cap um one problem with that is that priority fee for gas doesn't make it clear it's a maximum value so it's not actually the the value that you pay but it's the maximum that you're willing to pay so the obvious suggestion there is you change that the max priority fee for gas then you're basically back to a spot where two of the three terms have the same name as the eep uh so it would be weird to also not switch back to just using uh the eep um obviously get suggestions was moving away from using the the terms in the eep um and the one the one concern that people seem to have with get suggestions or at least the biggest one was uh people didn't like the fee term um so instead of that we could use gas price cap one challenge with gas price cap is it's obviously very close to gas price and it might be more error prone um and people also don't like the tip team term so an easy fix there is gas priority cap um so that's kind of where things are at i don't know yeah if people have opinions or thoughts this is the time um yeah sorry for asking this question right when you summarized everything but is there anywhere a kind of concrete summary slash suggestion of [Music] yeah what what the current or what's the left most recent proposal yeah i just posted it on github i added a comment to peter's uh gist yesterday to summarize it so i think as i understand it um not everybody agrees on this obviously but base cheaper gas seems universally agreed upon and the two that i think could work for the other fields would be gas price cap and gas priority cap so i don't know this is kind of hard to really bike shed the specifics of the naming just with the voice i i personally worked with text as well yeah i i personally prefer to not have the per gas post fix i'd rather have a gas prefix and then describe i think that lends itself to shorter names and it's similar to how we already described the gas price i was i was leaning towards that earlier because of the the following the reasoning that gas price oh that meant per gas but then i read what mike wrote that yeah it's that different thing because you know with the gas price it's it's kind of obvious because of the connotations with price that it's you know the price you pay per unit whereas for the others i don't actually i think it's more clear if it's per gas than if it's a gas prefix so yeah i i'm leaning i'm personally more in favor for gas as it is more explicit uh i'm sorry so this is just about the naming right now yes yes and it might seem like it's a waste of time but we tried for a while yes i i think i think nobody gives a like let's look forward to something else i think you're wrong there there are yeah my experiences people have pretty strong opinions about it and are not willing to like uh or at least it's hard to get the consensus on it async yeah yeah the thing the thing to kind of bear in mind is that we can make this choice once and it's going to be a pain in the ass to change it later and if we do a bad choice it means the ux is going to suck and it's going to be confusing and people are going to shoot themselves in the foot and they're going to not understand that this is actually not the value the the the cost for me is going to be multiplied by 25 000 um because it's per gas and it's not you know an absolute uh so if we can avoid that i do think it's uh important yeah and one thing uh i think micah was the one who mentioned that on discord uh a lot of apps will just pass through you know these parameters to their users like they'll take whatever is from json literally exposed that um so yeah i agree if we can have stuff that's more descriptive that probably makes sense um matt do you have another um another reason to prefer the gas prefixed ones other than uh shortness inconsistency i guess i know i think those are my main this is the main reason you know the like if we start doing um [Music] max priority fee per gas now you're having you know fifty percent or more just describing trying to set up what this even means if you're saying max you're saying per gas you're saying priority fee that's the thing whereas you could just say gas fee cap or gas tip cap and so now it's a much i find that easier to reason about and i i don't really agree so much with micah's reasoning that price is what's giving it the per unit of gas i think that i i think gas is what's saying that this is per gas because you could have tx price and that would not be you know per gas still that would be per tx so i think i'm one of the few people at this point still on the gas prefix train so i'm not gonna die on the hill but i i prefer it and maybe my preference is unfounded because i have spent the last few months staring at these names and the thought of having to type 2x more characters to do something is probably not something that we should be using to decide how everyone else is going to interact with it but those are my thoughts personally will personally buy you a text editor that has autocomplete i thought you were personally going to hire someone for me just to fill out the remaining characters excuse me i'll finish this for you okay go ahead he will he will write you a macro so that that those names are just one keystroke we can fill the grant out for that i think um so i guess does uh aside from my client does anybody else like strongly in favor of the gas because i uh i think martin and peter's not on the call but he was also in favor of that um yeah i was just gonna say um so i don't speak on behalf of the whole guest payment personally so nobody else willing to defend gas um in that case it feels like there's also more clarity and just we would be using the same um we'd be using basically the same terms as the eep right so we would have max priority fee for gas uh fee fee cap or gas and base vapor gas um and that would just uh yeah so we basically do not need additional names for json rpc does anyone oppose that last chance if not uh i will let the folks working on the spec for json rpc now oh somebody's pinging and scar yes he is on the call oh yeah i um i i think i'm weakly kind of in agreement with uh litecline but i i don't have like any strong opinion i personally don't think like i i also have like a little bit of problem with priority but i think the proper place to discuss that would just be the eap itself so we will need to do some changes to 1559 so we can reopen all those cans of worms regarding priority fee that like the word priority there we've gone between i think six different words in the eip um trying to find a solution if someone has something novel and new uh we can give it a try everything is problematic and i think the core reason why we're struggling is because that that particular value means two different things to different people so if you are gas warring then it is the thing to get you to the front of the line if you are just a regular user with one five five nine it is the thing that gets you into the block and so it's serving dual purposes sort of and so finding a name that satisfies both is very hard and so we end up keep changing it to kind of just swap between name minutes for the favor the one thing then we need to favor the other and then back and forth if anybody can come up with a word that handles both uh please share it and we will use that word any too um but uh yeah i guess okay so let's let's just stick to using the the terms that are in the eep uh expose that in the json rpc um and hopefully we'll have uh a json rpc spec ready in the next in the next week or so anything else on json rpc okay um i guess the last thing i had on london is trying to figure out how people feel with regards to timing for the upgrade i believe everybody aside from open ethereum has the eips fully implemented um a couple was it months or calls ago um we had kind of this this tentative timeline where we would basically try to you know agree to a client freeze today which is i think where we're at um so that teams would have another two weeks to release a client that's london compatible um and then we could have the first test net fork on june 9th and the first main net fork on july 14th um how do people generally feel about that schedule uh did he feel something that's realistic uh is it something we want to push back a bit yeah any thoughts there um i mean i think that it is a bit optimistic and i think that maybe i have the feeling that this might be the most yolo hard work we've done so far but yeah still i think maybe we should just bite the bullet and do it anyway so because we have this we need to get the next hard work out um and we've been working on 59 for a long time i think the big problem with this would get theme is that well i mean the consensus uh changes are one thing but there's you know a lot of things that need to be touched in the transaction pool logic that's a lot of touch changes need to be done for the miner and for various other subsystems um so it's a big upgrade and [Music] we're not going to be able to do a client freeze anytime soon i think because um yeah there are still even if we have the base functionality we we and we don't even have that one merged but even if we did there would be another two or three prs uh follow-up prs to and this uh other stuff so i think that we can live with the dates i think but um yeah i'm just throwing it out there that it's we need to do a lot of testing is this something where like changing it by two weeks would you know help a lot or is it something where you know in a perfect world you'd have two extra months uh to do the testing and i guess sorry the reason i asked that is this date was mostly set because of the difficulty bomb there's been kind of an increase in hash rate on the network so i suspect we probably have uh you know a few weeks of leeway if that makes a big difference for clients we definitely don't have like months of leeway so that's kind of the yeah so for me personally my i always think that testnets ultimately are there to test um to prepare for mainnet so i don't think we should postpone test net deployments i think if anything we should do them sooner so that um we have more time to actually test everything on the test net before it hits maintenance but i know that other people feel differently about testnets got it um how do other client teams feel they see nethermine open ethereum turboget we are generally okay with the timings um and yeah i think i agree that we want to say the community to move with the tooling and experimentation and if they have the test nets earlier uh this will be the better i think that date was announced for a while and we haven't changed it in a month first so um if we see any problems any problems whatsoever in the test nets then we should review and consider the n2f maintenance a bit further down but for now i would stick to this mid-july date um yeah i agree that uh i don't think we should be postponing the test nuts um but also i don't know whether we're ready for a code freeze yet we definitely have the meat of the eeps all in um but similar ancillary logic like uh mining and uh transaction pool we need to double check um open ethereum i agree with last statement yeah we're not fully prepared for the phrase freezing and we're already a bit late for that but in general for the july 14 i think that would be a problem okay and so right now basically the first test that would be on june 9th which is three ish weeks uh is that right yeah three and a half weeks um you know martin seemed to feel that keeping it close is better does everybody also agree with that because we could also push the test that back one week or if if that made a difference but then it's like we get less time on test nets before we go on main net would be i guess if people want to push back the test nets to get more time for the client freeze now's the time to speak up otherwise we can keep the first one on july 9th sorry june 9th which is the first one uh so i had robston the first one but uh this is just because that's what we did for for berlin so robsten gordy rinkeby um we can absolutely change them if there's a reason to and the main the main date would be the main update is july 14th as of now so the robstone test net would be live for like four uh six weeks before the hard fork uh then it would be five weeks then like or sorry five weeks then four weeks then three weeks uh between the last test net and maintenance and obviously if anything goes wrong on the test nets and whatnot we can we can push back the magnetic um yeah but assuming everything goes smoothly that would be the schedule i think that sounds okay uh yeah also james has a comment of like you know if we push magnet two weeks back we could get five weeks on the test nets um yeah um okay so um so basically let's let's do that i had proposed some blocks uh for those dates in the github issue um yeah so like just if people want to like uh to put them in the clients now um but basically a block on june 9th on robston would be 103.99301 uh june 16 on gordy would be four nine seven nine seven nine four uh june 23rd on winky b would be eight eight one three one eight eight and then the main net four block uh on july 14th would be one two eight three three zero zero zero um so unless anything is wrong with those blocks i double checked them yesterday um i propose we we go with those and this way clients can uh can start putting them in whenever they're ready and working on their release does that make sense this might be parking onto an earlier conversation if we just did the test net blocks but then didn't set the main net block until we know a little bit more how the test list goes or do we want to do them all kind of now-ish i guess like one question i'd love to get a sense of is like if like we run the test nets and and it's like we need to push mainnet out by a week would that be a big deal or like is that kind of okay so i think a handful of weeks is okay um the only challenge it's basically the same challenge in why you want to hard code all the blocks at first some users might download a version which has london enabled only for test nets that they think they upload they think they've upgraded but there actually isn't like a block number in for mainnet um so you kind of get the similar thing where if we do push back the the fork block um it's not the end of the world but you you risk having some people think that they've upgraded they don't read the blog posts or the announcements or whatnot and then they're on a version which has the wrong fork block for mainnet um so it's not you know it's not something i think we should do unless we find like a a major issue or we realize you know we're absolutely not ready um but it's also not impossible and and the other end is if we have the main net blocks in and everyone's in style installed the clients and then we need to delay two weeks then there could be a part of the network that's splitting two weeks earlier than the other one if they didn't if everyone has to change their the client that they have yeah we usually avoid uh hard coding mainnet blocks together with the testnet blocks so we add tested box numbers first and then we release after the first test that's going successfully release the next version with mainnet set like historically we've seen mainnet block number changing um until the last weeks and we didn't want that to risk that like not switching felt for us uh less risky than switching in the wrong block and trying to revert that yeah that's totally something we can do for london if people are more comfortable with that we can wait you know until the robsten fork and then you know we can keep the current block like tentatively and if everything goes well use that one but yeah if people want to wait before we hard-coded in clients um yeah to see that the the the robsten and maybe like the uh the gordy fork goes smoothly do people prefer that yeah that's probably what we i mean that's what we probably that's what we've done historically in gas as well i think okay okay so let's use um let's basically use the uh the current uh tested blocks that were proposed uh i see thomas has a comment about the main net block uh to add one more zero um so anyways we can kind of bike shed around that one offline um but yeah let's let's use the current tested blocks for robston gordy rinkeby assuming uh the fork goes well um we'll basically have a fork right after the will have an awkward f call right after the robson fork um so we can decide there if we feel comfortable setting the the main net block um yeah cool before before we move on out of the london stuff um so someone brought up that in order for wallets to correctly uh do transactions speed up they need to know what the clients are going to accept and gossip for transaction speed up and so there is value in us kind of coming to some general consensus on what's the requirement what each client requires for speeding up a transaction speed up the transaction mean replace by fee basically and so um i guess the first question is is do clients have the various clients decided what you guys are going to do for that yet yeah we were calculating the uh the miners fee i mean like the payment to the miner has the selection process for which transactions to evict and which to keep okay so you calculate how much is going to the miner specifically and then you sort by that and then you kick out the okay yeah anyone else i think i think for the uh geth implementation specifically that litecline and i uh helped with um we had like a little bit of an internal debate like uh i i personally kind of preferred the like specifically for replacement right not not for general eviction but just for replacement from the same xander same ones um i think there are two alternative approaches you can either just uh you can either basically for enforce like a bump of both uh the fee cap and the tip or you can basically just um uh require a bump of the of the tip as long as of course the tip is remains um small or equal to the v-cap um and i i think both both basically work uh it should just be like trying to just do the same thing um because otherwise the mempool gets fractured which is no idea doesn't the ladder if you just bump the um miners portion doesn't that allow someone to spam a transaction that they know won't get mined because you say you're imagining set your your feet cap to zero and then you can just bump the minor fee over and over and over again so we don't allow transactions with a tip greater than the fee cap exactly so so basically like because because we are ready it's basically the same situation that we have today without 1559 we enforce like a minimum tip or like a minimum today of course minimum gas price and and so basically it is like there's a minimum of how costly like the first bump is and then each subsequent bump will be more costly and similarly today if the gas price is at i don't know 60 grey or like 100 grey or something and your transaction right now is a gas price of one then you can bump a couple of times before you'll get close to the inclusion zone um and this basically property will kind of be the same afterwards basically like that but but given that like your your total vcap must be higher than the the tip basically every time you bump the tip you kind of also have to keep up the total cap and so you're getting closer and closer to inclusion and so it's basically the same as it is today okay so i think the key there is that you do not gossip transactions and have a tip higher than the cap is that correct under any situation that's correct yes i think technically they are includable in the book but at least the catholic implementation right now would not cost it now okay um whatever we decide on we i definitely do think we should make that available to wallets as soon as possible so once each of the teams has decided what your strategy is going to be please share it somewhere it can be in like 1559 the channel in r d discord or somewhere and so they can get those collated and out to wallets because they will need to kind of use the lowest common denominator strategy for dumping if they want to be able to gossip across the whole network it's like whatever the most strict client is is what you'll have to follow so yeah on that uh trend i don't know if trunks on the call yes trent is going to be working on a sort of cheat sheet for wallets uh regarding 1559 so if people can just yeah dump that into discord uh trent and i can can definitely uh keep track of the keep track of the responses and share that with wallets maybe it's a follow-up unless specifically on the replacement that there was any anything else to discuss but like as a follow-up um i think a couple of months ago um we we talked about the kind of like the rules around memphis in general as well and i kind of looked into that as well and um i think while it's not consensus critical it's also valuable to have those this this in sync as well between different clients um otherwise again there's this function uh situation where different clients keep different transactions in in memphis and different ones and then um that's just like really inefficient for because you you might re-gossip transactions a lot and so on and so um i just wanted to kind of ask what the best process would be to maybe offline or something just double check that clients ideally do the same and if they don't kind of maybe come to agreement or something um yeah like what would be the best way of um just kind of reaching out to our clients maybe we can discuss this on on discord and you know on the 1559 dev channel i think some folks are actually discussing this right now um and scar i shared the write-up you had done that kind of explains in more detail which you basically went went over just now um so perhaps it's useful to like have people look at that and explain how they differ or like don't differ from it um and yeah we can definitely document the the differences and yeah sounds good then i'll look over it again today and just make sure it's still in sync with what the get implementation at least is doing today if i can also just make one last comment the the way it sounds like several clients have implemented it is i think like the most correct way you're using whatever the effective gas price of the transaction is so you're subtracting the base fee and then service determined that's how the miner is going to earn that sort of is like what the network deems is the best transaction but since the base fee is constantly moving that's needs to be recalculated each transaction and it's not a linear relationship as you begin to get to the point where transactions become invalid their fee cap the base fee goes past the fee cap you would need to start removing those transactions so you have to recalculate this ordered list every block whereas if you use the fee cap which is not changing as your ordered list then you don't need to reorder all transactions every block and the way that we're doing that with geth is there's a min heap of transactions and so you only reheat once the heap has been has seen some number of removed transactions and structurally needs to be reheated so it's not clear if that it's not clear to me if we can allow the resorting on every block generally i'm trying to avoid any sort of degradation of performance and so i can run a benchmark to see to compare how those would look but that's just the main difference between those approaches also i would take issue with saying that this would be the most correct way of doing it because i think uh the main kind of consideration they went into recommending the fee cap instead of the current effective tip basically as a criterium is just that um we expect like under most normal conditions like the vast majority of the mempool in 1559 to be below the count base fee because like this only on average like one block worth of transactions kind of above the includability zone basically um and so like especially for eviction where we're most interested about the kind of like the least valuable transactions those will always almost always be below include includability so the effective tip right now will always be zero for them um and just sorting by tip generally doesn't work as well because usually like the the effective tip that you end up paying will be much lower than the tip if the tip is large but you have low include ability because you'll only barely be able to get in and so like your effective tip will be small and so i think actually kind of like the c cap is the most correct way of for sorting and not the effective tip and not the tip but again i think it's probably better a better fit for offline and it's not consensus critical so it's not kind of like critical to have that be in sync in time for the test nets but yeah and it's also something we can update once 1559 is live right uh so obviously we we want like the best behavior that we know of now but once we actually see usage on the network and how the mempool is working we can definitely change uh yeah how transactions are stored based on that yes i think that's correct cool um anything else anybody wanted to bring on 1559 or london in general um if not light client had asked for an update on uh rainism and word emerges at i see we have uh danny on the call um i know you've been on top of that or and i know also a lot of the actually client teams have been working on this so um does anyone want to kind of walk through maybe the past couple weeks of what happened with rayanism and were the work related to the merge is that yeah i can give a quick high level um so there was the rainism nocturne devnet that launched i believe a couple days ago uh there's a block explorer up and a fork monitor up if you want to check it out i believe all 12 client combinations are working on that uh which means there's kind of four eq clients and three e1 clients you can mix and match all of them and they're all running there and running validators which is very exciting um this was definitely a major success um but also definitely kind of in this prototyping zone uh we did not test the fork transition and we are not testing like historic uh state sync which is two critical things um definitely in the wrapping up phase um we validated all the things that we wanted to but now i think it's time for production engineering on uh the final things for london and the altair fork at the same time we're working on specifying a couple of the last things and greatly enhancing testing on on the spec for the merge spec based off of some of the stuff we did here and some of the stuff we've just been intending to do so i think the idea is to shift back towards some other production engineering get the merge specs in the next iteration and then once we get altair and london releases out a shift back into some production engineering here um so devnet's up devnet went really well devnet will probably go down um early next week and we will shift back into other things post altera post london we'll do some more multi-client uh testing stuff and probably have much more of a conversation here on all things and and i guess over the next like couple of all core devs we can talk more about uh planning and stuff there are client teams here if you all have any ads please do i mean and otherwise i can help with any questions if anybody has to dig deeper on that cool another thing to notice we're doing some bike shedding if you'd like to jump in um on api uh transport format for all those that enjoyed the naming discussion so much go join the consensus client naming discussion um and and a quick announcement i think this is shared another channel but um the merge calls will now be on the same week as the east 2 calls on thursday at the same time so we're going to be doing a three-week break rather than two-week break uh this is to try to help with some of the folks that are up pretty late for the e2 call and the merge call to kind of stack them together so we will do merge and then immediately into these two calls these two calls usually aren't very long usually like 30 45 minutes depending on what's going on so it shouldn't be too bad so we're gonna try that out cool thanks for the update and any clients have anything to add okay um that's oh trent you had them i don't want idea and like did a lot of work um if you were involved in it you know that proto's been updated making this thing happen i mean same to all the engineers but thanks broto sweet um yeah trent you had uh you wanted to talk about the 1559 ui call yeah thanks tim i know you mentioned it earlier but i can just go over it again and uh reiterate what you already said which is uh similar to the london readiness call we had a week or so ago we're going to be doing something similar but focused on people that work on wallets and interfaces so this would be like metamask argent rainbow status things like that so if anybody's listening to the call and you work on a wallet please reach out so we're going to do two things which is put together a cheat sheet of basically what you need to know and hopefully keep it updated as things become more solidified and just a list of resources that devs can look to and then there will be a call i think about in a week two weeks from now um we don't have a time yet but we'll try to pick a slot that works for everybody who's interested in being involved with this and we'll just go over what people have been thinking about so far with regards to how they're presenting um these new transaction choices to users um and hopefully get people on the same page with what the best practices are so yeah like i said please reach out and just let me know if you'd like to be added to that i'll be sending out an email um probably early next week to figure out a time great that's it um and then in the chat there was one more comment uh so piper has been working on a core dev apprenticeship program uh to get folks who want to start working on core development for ethereum uh to work on it over the summer and receive a stipend for that work um there's a blog post that went out on the ethereum blog yesterday so if you just go to blog.ethereum.org it's the most recent post it's called core dev apprenticeship so if anyone listening is interested in that there's all the information in the post about how to apply uh and piper can answer all of your questions about the program cool anything else anybody wanted to discuss or yeah give it a shout out to i wanted to say one thing that um so i've been slowly handing things over to tim over the last like couple months for the hard four coordination rule role i've done it for about a year almost two years it feels like and i'll be moving into some other things so this will probably this will be like my last call as that and i'll be leaving the ef as well um i don't know exactly what i'm going to do next but part of it's probably going to be eip stuff because i keep getting drawn into it and i like working with you guys so it's been a pleasure it's been a pleasure having you thanks james thanks for all your work thank you james yeah and yes there's definitely more than enough work on the eip side if uh you're not sure what to do i'm gonna try and wait at least four weeks before jumping into things but i already tell i'm gonna i'm i'm excited about stuff so yeah that's a good call to take some time off cool uh anything else anybody wanted to bring up okay well thanks everybody uh i can't believe we finished half an hour early given everything that was on the agenda so yeah i appreciate it and i will see you all in two weeks thank you everyone thanks everybody thank you cheers [Music] [Music] [Music] so [Music] [Music] [Music] [Applause] [Music] [Applause] [Music] so [Music] [Music] so [Music] [Music] [Music] [Music] [Music] [Music] [Music] so [Music] [Music] [Music] [Music] [Music] [Music] [Applause] [Music] [Applause] [Music] [Music] so so [Music] so [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] foreign [Music] [Music] [Applause] [Music] [Applause] [Music] [Music] [Music] so [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] [Music] foreign [Music] [Music] [Applause] so [Music] [Applause] [Music] foreign 
foreign [Music] very excited to be here Devcon is just such amazing event and you know the energy here it's incredible and just excited to be able to talk to you guys today um so yeah I'm Harry I am the CTO and one of the co-founders of octane Labs the company that built Arboretum and I'm here today I'm going to kind of walk you through a bit of the history of arbitrum and how we got here um where we are today and then talk some about sort of where we're heading and what the future looks like so arbitrim is actually originally came up with really cool history in 2014 actually before ethereum had even launched one of our co-founders Ed had the idea of hey this thing is really cool but it doesn't seem like it's going to scale um now at the time it was very early and the idea ended up sort of you know forgotten to history for a little while in 2017 we started working on it um at the time we were at Princeton University academics thought hey this is really cool and interesting and it seems like there might be something that'll that'll really grow here and we started out we wrote a research paper back in 2018 it's crazy because it feels like yesterday to me but it's almost ancient history um in uh in crypto time um and then uh managed to somehow uh and I still not completely sure how um to found a company around it um and share it with the community so at that point we had this idea we were building um back in February 2020 um just around East Denver we actually had the first Arbors from test net um it was a lot different than it is now um actually we started with um technology that looks a lot like it looks more like an included features um like our Nova chain has today which I'll mention a little bit but it was not a roll-up it had a committee um it had sort of off-chain agreement but it had a lot of features like it has now and doing application specific change so interestingly sort of a lot of where we are now it was too early then um but uh there was sort of a lot of ideas that have been bouncing around that I think are now sort of coming out as uh really popular um and then we went from there we launched test Nets we figured out arbitrary contract deployment we figured out arbitrary messaging um we uh actually got our main net out and this was back in May of last year we we launched our mainnet to developers only we had a few months there and then in August so over a year ago now we launched on mainnet um and that is how we we ended up you know building Arboretum one getting it out there it's been an incredible time since then but the building never stops um you know if you if you stop in crypto you might as well you know you're done um nothing is ever sort of you know research always continues no technology today will be sort of it'll all look ancient in five years um and kind of arbitrary when we launched already looks ancient compared to arbits from where it is today uh because this last year we worked on our Nitra upgrade which I'm going to be talking about some today um we launched our Nova chain which as I said sort of actually takes a lot of ideas from our original paper um and sort of the world is now I think in a position where they make a lot more sense than they did then um we went through a really sort of challenging and interesting thing which was the live upgrade of our arbitrim chain to an entirely new technology stack um and it was really interesting to us we did it kind of a couple weeks before the merge um and it was essentially our merch um and that certainly not not you know the same amount of coordination necessary but the idea of kind of taking a technology stack and somehow well with a running system actually kind of replaced the technology underneath it with a newer version with a more powerful version that allowed it to be cheaper faster all sorts of good stuff um which has made it for a a really exciting uh year for us um so Arboretum one um just to kind of jump into like well what is this thing I've been talking about I walked you through the history but you know it's nice to sort of dig in a bit more talk high level um what does arbitrim provide why should you care hopefully most people here already know um but it's certainly nice to say um low-cost transactions um security rooted in ethereum so inheriting security rather than trying to have independent security which is really powerful which is what Roll-Ups give us and really really really full compatibility with ethereum which is the thing that only optimistic Roll-Ups at least today can provide and means that sort of tooling languages everything just works and it's been really huge for developer adoption it's meant that the learning curve and the difficulty of applying on arbitrum has been incredibly low and it's how we've been able to get so many people involved and have so many people benefit from the technology that we're building um so just a couple stats and this is actually slightly out of date because the market is down and the slide was made uh before the um so I think it's more uh two billion plus now um although the amount of value in East I think has increased um so you know from it depends how you look at it um but arbitrim is going strong um we have a huge amount of adoption huge amount of projects huge amount of users um and it's just been sort of incredibly thrilling to watch it feels as though it's been like forever now but it was only a little over a year ago that this all became possible um we have a huge ecosystem we have kind of native apps we have ethereum daps that are kind of have been on L1 and started out there but then it migrated um we have tons of infrastructure support from all sorts of different companies um shout out to uh to tenderly that just launched uh our full arbitrum support recently which was very exciting um and arbitrim is becoming a major part of ethereum um two kind of interesting charts here one being oh and it's not rendering very well but you can look on etherscan yourself um one being that arbitrum the arbitrum sequencer is one of the biggest gas Spenders on ethereum um that we are now sort of using a significant amount of L1 resources in order to power the roll-up which is really exciting um and also very exciting that that will hopefully go way down um with 4844 which I won't talk about too much in this talk but uh is extremely exciting that and the other thing being the amount of eth is just in arbitrum that our Bridge escrows funds that are deposited in the system um and the amount of funds in that bridge is a very kind of very significant chunk of of eth which is crazy exciting and then the other thing to look at and this is sort of just you know very exciting and also has been kind of vastly improved with Nitro is how cheap it is to use um I think we're on average coming in at somewhere between kind of 10x and 50x price production um compared to ethereum this has got I'm better with Nitro as we added compression L2 costs are quite low because of all the efficiencies of the system and the fact that kind of the gas limits can be quite high and so you can see we have we have up here just L2 fees which is a very nice site to look at you can see that we are coming in sort of just a couple cents to uh to transact in the simplest case we're doing each transfer um and even smart contract execution is very cheap and easy um so I mean that's one thing always to look at is essentially each transfer it's easy to be cheap but also to be cheap with uh with contract execution where users can use a lot of gas and it still comes in cheap is is really uh really important and I think one of the areas that I'd say is sort of especially of course this presentation and the last one obviously for people who saw both are covering kind of you know similar ideas and I think this is one place to distinguish optimistic rollups is that we can do a lot of execute a lot of computation a lot of execution at very low cost um and just sort of for Roll-Ups in general and this is sort of General across uh across DK Roll-Ups across optimistic rolls but I think it's really important to talk about um is just looking at sort of what sort of what Roll-Ups can give you versus side chains um so with Roll-Ups for daily we were using ethereum and we're depending on ethereum for data availability all transactions get posted um unlike side chains where kind of it's the data is separate maybe they're posting headers back but it's an independent system we have a bite cut for a second but I'm back um we have um L1 to L2 bridging that's enforced through the security of the roll-up and that's sort of one of the most important features of Roblox to me is the fact that the is part of the system there's no sort of independent uh multi-sig no independent Bridge mechanism the bridge is the roll-off which is really fundamental as opposed to sort of needing some sort of messaging layer that's independent from the security system um Roll-Ups use fraud proofs uh well or fraud proofs for optimistic Roll-Ups fraud proofs of course um which means that anybody can the correctness of the chain um and it means that basically you don't need two-thirds honest you don't even need half honest um you would only need one honest validator in order to secure the system which is an incredibly powerful property um as opposed to needing kind of and then just to mention a little bit I'm mostly talking about the roll up today but I want to also mention Nova um which is sort of our our kind of version of Arbor tribe but with the data availability committee there's some really interesting trade-offs here um and it's a kind of a very active design space that I think the whole roll-up Community is exploring um which is ways to make data cheaper posting to ethereum is the expensive part and so being able to move that off Chain by having a committee where you're not worried about a majority you're only worried about a couple on that committee being honest is a really powerful thing and it's what allowed us to be able to offer a platform that could really be repetitive with sort of other non-roll-up systems which don't have the cost of posting to ethereum um it's an interesting trade-off it does make some sacrifices in security maybe we think about it is that we're not competing with roles we think if you can afford a roll up you should use it what we're competing with is other solutions that don't have that level of security and try to provide something more secure than they are um now just a little bit about sort of how Nitro works and sort of how to imagine the system um a lot of times with Roll-Ups because it's so compatible it's kind of a black box um you have the RBC you point at the C you use it just like ethereum and that's it but it's really I think you know valuable to really understand what's going on um and really important so we've split it up into a number of steps and this is we have done this a lot how do you explain this thing it's complicated there are a lot of different pieces I think the latest iteration is one that we're pretty happy with um so we start off by talking about sequencing and this is probably you know the role of the sequencer is one that sort of most well known in how Roll-Ups work sequencer is a is a is a um node that orders transactions it receives transactions in it puts them in an order um and then it runs them it evaluates take transition function and it produces blocks well that basically sounds like how ethereum works if you replace sequencer with miners although for the sequencer there's one entity rather than a lot of them the interesting part is in parallel or slightly trailing The Ordering of transactions the sequencer is also batching and compressing those transactions and posting it to the L1 chain now one key thing to understand here is that the sequencer is not attesting to State routes the sequencer is not making claims about what the result of executing those transactions are like what the result is all it's doing is saying this is this are these are the transactions so there's no such thing as sort of claiming something valid you into that sorry claiming something invalid um you could post an invalid transaction certainly but it would just be ignored by the state transition function and rejected and the sequencer would be out some money but it wouldn't have any other consequence and so that gets posted to the L1 chain and then picked up by the actual roll-up security mechanism which I'm not going to be able to to get too much into in this talk but there's some great material about online so what does this mean in terms of finality which is one of those important questions because you have these systems and you have like you have when metamask says okay the transaction's in a block but that's not enough finality is this really important question which is when can your transaction be reversed um it's one of the things that with with the uh with the merge has changed a lot for ethereum in very interesting ways um and sort of arbitrum has its own notion of basically how you can tell when a transaction is final and so we split it up into three phases we have soft finality where the sequencer said it's the order if the sequencer is honest that's what the order is but you're trusting the sequencer and so for many applications this is this is actually pretty good um currently the sequencer is being run by us long term the sequencer will be decentralized over a number of parties um no need to trust it but you can and a lot of people do after that is kind of the really important Mark though which is when can you actually not trust the sequencer because trust if you just trust it the whole time it's a centralized system and for particularly for kind of exchanges for anybody doing cross-chain stuff you really don't want to introduce any trust assumptions and so for that basically the idea is that after the sequencer has posted a batch on chain the order is set once the transaction posting that batch itself has L1 finality the system is completely deterministic so any node off chain can get a guarantee of what the current state of the chain is based on batches posted and so if you're familiar with optimistic rollups we have and this is the last phase the certification process which takes seven days the only thing that's for is to prove back to ethereum what the result is because after 10 minutes after a batch is posted and finalized on L1 anybody in the world looking at the chain other than ethereum can know and the reason for this is really simple ethereum can't actually run all the transactions because then it wouldn't be a roll up and then it would be expensive ethereum's not running them we're using fraud proofs but off chain anybody can just run the transactions themselves and calculate the result so now that we have that down what is the state transition function I mentioned it quickly um but it's sort of a very core part and that is basically with Nitro we now have essentially a wrapper around the kind of core Geth implementation of ethereum State transition function which means our functionality can be essentially identical with Geth we don't need to worry about Corner cases we don't need to worry about weirdness and about matching matching implementation specs because the guest team doesn't imagine it does an amazing job of that and we can just lean on their work and on gets correctness for our correctness which is really valuable because it's incredibly hard to get all of those Corridor cases correct and we don't need to and then I think the last part that I'm going to talk about today is how execution and proving are different um which is really interesting and really where where we get all of our where we can get most of our performance from and this is something actually that changed with Nitro before Nitro there was a VM it ran transactions a result was produced and that also contained and that was also a proof that's very inefficient because proving tends to be something that's very slow with Nitro instead we split up these processes and so we have basically One Core code base compiled in two different ways one to run at Native speed on your computer at exactly the same speed any any evm chain can and one compile to wasm and used for proving both from the exact same code so there's not there's no need for kind of multiple implementations there's no need to worry about is the client in sync with the prover and all sorts of weird edge cases you can get into there it's using the same code and this is and you know I like to show the slide just because it's it's when we first started showing it I think it was sort of very recent now it's it's uh two years later which is kind of insane which is really kind of how we ended up here and how I think the ethereum community came to this path um which is the idea that Roll-Ups are the way that ethereum is going to scale and I think that's sort of really important to us and really we the way we think about it is that kind of yes there are multiple different Technologies yes we're all building but kind of really what we're doing is we're empowering ethereum to actually kind of be competitive against other alternative blockchains um since those two systems in combination can do much more than other blockchains can do alone um and then just at the end I wanted to mention so what is Nova I mentioned it once it's got this other system all Nova is and this is really cool is adding this data availability committee um so otherwise the diagram is exactly the same it's just what I explained but rather than batching and compressing and posting to L1 we instead batch and compress handed to a committee have them generate signatures and post those signatures to ethereum um which is how you get so much cost savings um when using when using the Nova chain but why it has an additional security assumption compared to ethereum um and then I just wanted to wrap up a little bit by talking about sort of I talked a lot about where we are and sort of what's great about the technology I want to really talk about sort of where the technology is not yet and what still needs to be done um and this is something that's been sort of a huge effort for us to try to figure out um there's so much going on there's so much complexity that really sort of keeping people aware of kind of the status of this technology of where we are is really important um l2b um for anybody familiar has done an amazing job with this and I would highly recommend anybody who hasn't to read through their security analysis which they've done on all the major Roll-Ups um but just to talk about kind of where arbitrum is in this regard so Arboretum is I think right now fair to say the only optimistic roll up in production with fraud proofs which is incredibly exciting and which was we have been since launch and is really cool to us to actually like lead tech first we come from an academic background the tech is important but it's not a full roll up yet and I wouldn't want to consider it that because for arbitrum validation is currently permissioned um which is one of our big priorities for this coming year is to drop permissioning now it's not just us there's a great set of validators I think actually in the coming weeks we're going to do an announcement where we list all the different entities that are currently validating the Arboretum chain um but having it be fully permissionless so you can truly make good on the promise of anybody can force it to be correctness is critically important next is the sequencer's fast finality guarantees they're very useful and in practice we're running the sequence now which is fine as a short-term solution but these guarantees only hold if you trust that sequencer and so getting a more distributed system where you can kind of have a much stronger guarantee that the ordering you get quickly will definitely be the ordering you get when those batches are posted on chain is a really important step forward to again reaching sort of this this real promised future and the last one and I think this is sort of the hardest kind of com the hardest issue and I think the biggest the biggest sort of discussion and one that's sort of really important and has been having happening a lot here is how do you think about handling critical bugs in these systems that fundamentally this is sort of a really scary process if ethereum hits a bug or Bitcoin hits a bug they will fork and fix that dog because it's in the core protocol and those protocols can Fork but what do Roll-Ups do Roll-Ups are smart contracts and so figuring out sort of if ethereum would fork and fix an issue in arbitrum that would be amazing but I think that's a long way to come and that's sort of what you get into when you imagine enshrined Roll-Ups which is a whole other conversation um but how to do sort of without that um in a way that maximizes decentralization while also protecting ourselves from the risk of bugs because anybody who's sort of extremely confident they don't have bugs today um I think is is overconfident um and sort of figuring out what the balance here between sort of necessary critical emergency paths and security for users is a really important question um and I know just sort of shout out to one one idea that vitalik's been been running with a lot recently there's some really cool work being done around the ideas of having multiple provers and having a majority of those provers need to all agree because then if one of them has a bug as long as the other one doesn't have the same bug then they can be checks for each other and if you have multiple Implement multiple independent implementations then you get a lot of the same Security benefits that client diversity has for ethereum um as for roll-up security which would be a really big thing so yeah thank you all for uh for for bearing with me through this and I hope it was interesting um been a total blast being here and and uh yeah I think we should probably have a few minutes for questions hey thanks this was great um do you see optimism's bad joke and arbitrans Nitro converge in the specifications so there's absolutely been a lot of kind of very interesting convergence between Arboretum and optimism over the years um both projects obviously that have been building for quite a long time um I think that sort of and this is you know I don't think this is happenstance that like we've learned from each other and kind of designed models have shifted I'd like to say and then you know take this with a grain of salt because I'm obviously biased um that sort of our initial design was much more influential um particularly interactive fraud proofs um which were a mechanism that we have been kind of arguing for for years um and finally one out on versus the alternative which was on fraud proof um which kind of was the original optimism design um so I think there's a lot of alignment there and a lot of coming together and I think there's a lot of room for standardization um yeah hi Harry thanks very much um just on the last topic you were talking about about critical bugs and how you could fix them and the sort of issues that raises I was thinking about what Danny was talking about in his talk in the opening day uh you know minimizing governance uh do you see any Prospect of breaking out the arbitrim design into multiple components where a bunch of them are immutable and you're able to restrict the governance to just a small part no it's a really great question and I think it's it's something that sort of as we are now kind of in and I'll say kind of for context Nitro was our biggest priority for a very long time because it really kind of was solving key performance issues um that users were having I think our next priorities are all around really deep diving on these questions of exactly how much can you minimize upgradability is a really tricky thing because a lot of the time if anything is upgradable then that component could be captured um and so really figuring out sort of like if there's if there are ways to sort of modularize your security in a way to create protection is a great is is sort of a really interesting open-ended question so for instance a modular stack which is just a set of layers on top of each other doesn't really help there if some of them aren't upgradable because if you control an entire layer chances are you can do whatever you want um so figuring out sort of what Arrangements there are um to minimize that I don't have a great answer but it's a really interesting uh area for work hey thanks for the great talk um so asking kind of like a spicy question what is like the core reason why you are still maintaining a white list on the fraud proofs and then you know if that's for like you know gath reasons or like dos reasons or whatever is there a reason you wouldn't deploy you know a version of like arbitrum on something like Gourley that has you know non-white listed you know fraud prover so that you can increase kind of the confidence of people by able to generate fraud proof or at least run that mechanism themselves no it's a great question no and you know I really appreciate when people ask critical questions I think a lot of times in this space there's a lot there's too much trust that's put into teams and it's really important to be be skeptical um so there's no there's a few different reasons I think kind of both the sort of performance of the roll-up protocol as many parties come in and sort of confidence in sort of the underlying fraud proof mechanisms which have been growing over time um are sort of kind of core reasons I think that in this coming year and I fully expect um within the six within the next six months um we will have uh those fraud proofs on Main net um as to why not gorilla it's an interesting question um we totally could I think the main argument against it is that having the code on testnet and the code on mainnet be exactly the same is the best way to sort of minimize the chances of bugs um we have if you're interested um a large amount of fuzzing um that sort of has been done on the fraud proof mechanism itself um which is obviously sort of not very visible um to to users but there is quite a bit of it would be definitely happy to point at that thank you so much Harry Calendar please give him a big Applause [Applause] [Music] 
me being like this meeting is being recorded okay I think it's two seconds this is a good spot to kick off um good morning everyone um this is the eighth uh 444 call posted the agenda in the chat here um as always some spec updates um then that updates and then uh we have some updates on the Builder side as well today um so hopefully we can cover those um to kick off uh we had this issue from the last call um that lines issue around uh old finalized data whether we want to consider it available um there's been some movement on this in the past few days um I I see Danny you're the last person here I think who's commented you want to give a quick update on where things are at I think Micah actually commented I haven't read that yet um okay so I think there's a there's like General directional agreement on what to do here one would be first and foremost to not add the complexity of the Unbound um D.A requirement and then it's a matter of do you by default think that data is not available if you can't get it past that window if you need to um and thus don't do reorgs or do you by default think that it's available um there's like kind of a security in ux trade-off here um I think one of the big I think people generally want to by default assume false but then if you're past this window um if you don't do an additional trade-off at that point you're like kind of have some trouble uh catching up um so yeah I mean I think from a security standpoint if you haven't been in sync for 20 30 days uh you actually should get a recent piece of information from the network because of the week subjectivity period um so like that's not a terrible security trade-off but in you know most cases you could just sync the network from there and be safe and be fine and find the head so it's like a bit of a trade-off although Micah Micah jumps in and says like well this is exactly what it should be uh because of the the security issue with the subjectivity so um I can Circle back on that and make sure there's no final input between now and Thursday and then try to make a microfinal call on Thursday um I think fortunately this is not blocking core development this is like more on the edge case side and we've decided certainly to go from on not in the complex direction of the Unbound window so Thursday reasonable unless there's comments right now where we could try to Hash some stuff out I don't know if all the relevant parties that have been on this theater here uh but yeah and if anybody has some additional information or sees the trade up differently than I love to hear yeah thanks for the update to anyone here have some comments or thoughts okay so yeah let's try and uh get this resolved by uh the CL call this week yeah I'll ping um and a public channel that pretty much we're like What final comments on the support Thursday sounds good um sweet the next one also also a dark lion issue that we uh I think there had been nothing since the last call like when we discussed this and there hasn't been another update on it yet but basically the um the blog the blocks by root Edge case um I know yeah basically Sean was the last one to comment two weeks ago um not sure because any updates there or a way to move it forward given it's been kind of stale um I felt that line actually opened a PR for this it's um three one five four oh you're 13 hours ago okay nice I missed that um okay so I guess yeah then we can just review this PR I don't know if anyone has any comments on it already or given it's pretty new I suspect most folks have not had a chance to look into it okay so uh people can look at that uh async and then the last bit on the spec uh xiaoway had some uh testing updates uh with regards to uh The Trusted setup um the call no um oh is she sorry oh yes yes ceremony will generate the due to trust this app with 65 elements and previously we used the [Music] um full like four thousand and and 96 elements for the Menace that pre uh preset and four elements for the minimal preset which is like it won't be matching uh to the the main setup so now we use uh set it to 65 for the testing trusted step so I think it won't change the definite consensus but it seems it would be helpful for the kcg library to uh to use the 65 right now so just need some quick reviews and I think we can merge it in the spec release this week yeah we discussed this with donk red and George and other people on the library side and that's definitely what they want and there's not really a big trade-off in just keeping it to the size of the ceremony cool and I guess if so if we start the devnet we should use these new values I get like I guess what's the impact of if we start devnet 3 with the old size obviously actually breaks everything to change to change its value um is I guess is that a correct assumption this is something you need to say I thought this was just I thought this was just for the spec tests yes okay okay okay oh got it got it okay okay sorry my bad yeah but definitely we want to use the production level 4096. right right that makes sense okay um anything else on the specs every column this specs section is getting shorter which is a very encouraging sign we used to spend like 50 minutes just on this um okay um next up then uh devnet three I know uh over the past couple weeks we've been trying to get it started with the minimal uh set of clients um I don't think that's happened yet um so I guess I'm just curious to hear from the different implementations like where things are at um are there any blockers and um yeah we can we can go from there um I don't know if anyone wants wants to start otherwise I can call people um I can give update on prism site so we're past still dispatch has um I think I've implemented most of the sync stuff so I'm waiting to test it so I'll probably just test it um with multiple prism notes first to see how that works I also posted like an interrupt um instructions on how to set up prism and get so um but that's just one pair so I'm trying to do multiple pairs right now so yeah if that goes well with if I can do a sync with multiple prism notes then I think for our end we are clear for definite three nice uh hi Robin from Lighthouse uh so we are in a similar BoatUS prison we managed to do local interrupt with multiple Lighthouse nodes and multiple death notes and we we were able to send blobs into this local Testament and it works but right now we are ironing out a few bugs and also we are testing sync as well locally and I think we should be in a good place to start a local to start a development pretty soon it's like we're just ironing out bugs right now thank you hey everyone from the lodestar side um we've been able to pass the Alpha One hotfix 2 spec tests we're able to run a load star local only multi-node devnet uh with like a fake El attached I can make blobs so right now we're currently working on a guest interop in CI right now but we're running into some issues with that the latest rebase get French is again breaking for that interop um and also the um well the last commit that kind of worked for us uh with the Geth interop was um the one ending in zero Charlie Bravo seven uh it runs successfully interopla without any of the blob transactions um what else The Blob transactions generated generated using the c k z g Library it causes an invalid Casa G commitment error and death um seemingly as it might be that the case that g libraries are not interoperable right now but we were able to actually interrupt with ethereum JS um got that to work with uh blob transactions submitted between those do we have an example blob um where we're seeing that difference I can I can look into why go kcg is not accepting it yeah I can um I can pass get good gender who's been testing this to pass on the information to Robert great thank you where did you get that trusted set up like are you maybe using different trusted setups I don't know what the current convention is that um because currently they're all like test testing setups right so someone I don't know where they came from they should have all been updated to use the consensus specs one which is um but I did hear about interoperability problems as well last week um it seems that some of the rappers are not updated I tested go kdg last week and uh it's interoperable with a different Library so I think it's a wrapper problem but yeah if you can send the uh The Blob as well to me it'd be great I can check it out so who is who's maintains the wrappers is that Dan says still Dan uh it's multiple people so uh for node.js it's done for never mind it's Alexi okay so I guess we can Loop them in if we get more suspicious of that um uh yeah uh we we in the mind we used to uh uh just stop different from uh that one from ckg if you use the standard one it will fail uh well but we can like think on that uh never mind still uh is not syncing with I guess prism Network we have some bugs uh but I hope we will uh his everything uh during the next week it's a stage thanks oh yeah Andrew oh yeah so so for three years um as Phil mentioned we we have I've been working with good gender he's kind of he actually is on both of our teams so he's been very helpful with getting lodestar E3 MJS um interop working we have at least on our setup been able to run um each JS and load star together and sync and send blob transactions um here again we're we do have a blocker with the um the ckzg library I mentioned this to Kev that the uh the verify kzg proof method that's in the ckzg library is not exposed by the wrapper so I can't fully implement the pre-compile right now um so that that's one blocker for us I haven't implemented as far as I can but we can't we can't do that last proof verification of the two points that get provided um in the input so um I have shifted today to start kind of looking at trying to maybe do some more interrupt we have the same I think Phil Mission we have this verify Casey deep error when we try to percent art we try to generate blob transactions using our code and send it to Youth and it it rejects them with this kcg error so um that's one here and then maybe that's probably I'm assuming a kcg interop issue um and I'm hoping to try to start working maybe see if I can get ethereum Jazz to hope maybe sync with prism at some point this week um we're still our PR to pull in timestamp based hard Forks is still in Flight hoping the agenda now able to get that merged in the next couple of days because that will hopefully allow us to start trying to go on the latest devnet3 spec but um otherwise we've made some good progress in the past week just being able to generate blobs and at least sync with lodestar so that's that's promising all right yeah sorry I was just gonna so load star is using the npm package as well as far as I know yeah I think you'd have to confirm with I mean like when I looked at it looked like the same one when I was doing my interop testing yeah I believe that's correct okay uh I'll ping Dan to update the npm version because I think that's basically the issue here uh that it's using an outdated version um and yeah if that's not if that's not the issue then I'll just look into ckzg to see where the issues are vasu is definitely not ready for definite three uh so far what is done is parsing of the transaction stronger and to work the network payload and it's basically it uh so this week hopefully will have somebody working on a transaction pool and we will start doing the kcg proof integration we'll just see with the Jade today um this week but definitely not ready for definitely yeah similar update for uh Aragon um progress but um not not ready yet okay and I think that's everyone is there now their team that has an update yeah hi uh yeah sorry uh yeah for Tech who oh we've been working on uh storage uh and we have things depending on the networking and thinking so our goal is to basically start implementing the spec tests see if they pass and hopefully some timing generate to start joining the defense sounds good any other team that I've missed um so we are not ready for the for the testing or we we got a bit more numbers on the different uh elliptical backend libraries I pasted the link in the chat and yeah the interesting thing is that uh it could be something wrong with our CKC leave binding but we got a significantly better performance on on verification uh with rust blst implementation so is there uh I don't know maybe some somebody knows is there benchmarks on the ckg kcg without any bindings do we have those I think there are there are such benchmarks that you can run from ckcg without any bindings yes I don't know if they do the operations you wanted to do but there is a benchmark tool okay if anyone knows uh please give a link for that and another interesting uh outcome is that at least for a proof generation the parallelism is working pretty good with a little efforts so I think it's possible to to get really good results with more efforts for Approved generation for multiple blobs at once so that's that's the results thanks thank you Eddie other client updates I think the only one we don't have an update from is Nimbus right now oh yeah and Henry I see you're on the call do you want to give a quick update that I saw there was like the initial PR for Olympus um yeah sure um so Nimbus has basically started over the last few weeks I've been working on it with help from the Nimbus team um not going to be ready for devnet in the uh well for at least a few weeks but um but basically the status is we've got some Scaffolding in the corn Nimbus repo a bunch of basically most of the scaffolding I think is in place um I'm working on the ckzg bindings right now um as those of you on that telegram group have seen um and I think one once that is done which is basically today or latest tomorrow um I'll start wiring those calls into the um into the co-validation and gossip and and stick it from there so um yeah it's we've gotten a late start but it's coming along very cool okay so it seems like there are definitely a couple teams like getting close to devnet having like some single kind of combo interrupt running locally um in terms of like next steps like should we try and get that launched in the next week um do people feel like we need a bit more time than that um yeah I guess I'm curious you know uh prism load star or prison Lighthouse you all seem like almost ready um yeah what do you feel is is a good thing to aim for I feel like as we get towards the holiday there's probably like less people available so like if it was just us and my house launching a definite by ourselves then doesn't really make much sense so I don't know after I I would prefer until early January but yeah I don't really feel strongly either way I guess it's up to others the Terrence if it's up and running wouldn't that make it easier for other people to join in I mean right now it seems like testing is a little awkward if the if the death event was running then wouldn't that make it easier yeah yeah I know that definitely yeah that's a good point right yeah so yeah I was gonna say if I would prefer we can get if we can get it going next week with you know just a couple clients and I think it would be worth it yeah like from lighthouse we agree like uh right now we can like if we have some help from the devops team like I think we can like uh launcher that means maybe sometime early next week like there are some bugs that we are earning out but I think that if we have something uh that everybody can sort of try to connect to from their own client combinations then it's definitely helpful even if there are but if even if the internet has bugs like it'd still be helpful okay so I guess yeah let's try and get it running um and then the people think it's possible to get this done before the next call like before Tuesday or um are we gonna need more time than that I say let's shoot for it um I mean it's not it's not a certain thing but it feels like we're really close yeah I agree I think it would be good to like if we can leave for the holidays and have the death net running like in the background and and even if it's not everyone on it like it's just good for anyone who wants to test or with not that it's yeah it's there exactly okay so let's try and let's try and get uh at least a minimal a question on that I guess like just to make it a little bit more explicit what's our sense of what the path is to get that devnet up and running like it sounds like prism lightheart Lighthouse um and Geth are probably the closest with maybe another mind and load star and ethereum JS I mean like do we want to start with two do we want to start with three or four how are people feeling about that so prism death has been on our previous combination for devnets and we've only had that in the past um that seems like the reasonable pair to get started now um it would be nice to have um Netherland Lighthouse also if we can get those in but um I I'd be fine setting that up with just a single pair just to again help the others get testing I think oh please turn sorry yeah I do think Lighthouse is slightly more ahead of us at this point just because because they do tested multi-nodes in terms of syncing we haven't tested that so yeah feel free to replace pretty simple Lighthouse to Star as well I guess it doesn't mean that much difference either one of them but yeah just like I well I do want to point out the fact that we we haven't tested uh multi note sync which I I probably can test in the next few days yeah I think that's fine with us we are like as I said earlier with uh ironing out uh sync edge cases but uh I think will be good to go like maybe sometime early next week okay so I think yeah let's start Lighthouse Gap it seemed like that you um the two uh most ready ones then we can add prism to that so like prism get and then we can add another mine and you know try out nevermind Lighthouse another mine prism um I think if we have even like you know just Lighthouse gath up and running would like some infrastructure by uh by next call that's already a good start and then maybe in the week after that we can add person another Vine to it um so I think yeah if we if we didn't have like the four um the four clients like the next two weeks or so that would be that'd be really good yeah I think this would be epic if we could get this out before Tuesday huge any I guess any other questions or concerns people have about getting this out um I had one question about the ckcg library but do we have test vectors available sorry I've been out for the last week and a half so it's already been answered not available um hello yeah so there are test vectors for the blob generation and I've just added some for the verified kdg proof uh after what if your MJS told me um can link you to the test vectors um I can generate a uh a release schedule that just changes them into Json files because right now you have to do go run star.go uh yeah on the JS kzd rapper I also just pinged Dan in our company slack um just to like re-emphasize that we want to cut a new release Kevin Kev you think that that's likely to fix the issue yeah I think that's the main issue there right now um if not then I can go into because if Dan cuts a new release I can run it against the test vectors which work for a go kdg and I can just quickly see that um we'll get that out today all right thanks sweet anything else on the devnet okay let's do it let's try to get a couple clients running by next call and then a couple more by the end of next week um sweet okay uh on the Block large block uh testing uh Giorgio says uh he couldn't make the call but he gave a quick update uh on the Discord saying that um it's ready to run EF devops is prepared we're trying to do this tomorrow um anyone else have comments or thoughts about this okay so hopefully we get the a proper run then um tomorrow so uh and potentially some more during the week um so then next week we can kind of review them and figure out um if and how we want to approach mainnet uh in January uh next up uh Gabby had an update on the Builder's spec um yeah and I see you posted uh you posted a hack MD in the agenda do you want to take a minute or two to walk us through this yeah sure hi everyone hi I'm gavi hey I've been working on the on the with their spec changes with shimmy we are participating on the on the protocol fellowship and this is our first time doing spec changes so yeah any any feedback is published it and yeah the changes are not super early but we need to update the both the beacon API to include the types for the 344 and we also need to do some changes on the middle derived API aspects to other changes they are really well summary on the on APR but to give a quick overview we needed to include the Beloved KCC commitments on the fork formation container the signer Builder beep this is the the container that is returned by the get execution failure and from nbos and then we also need to include the a new endpoint that we decide to do a version to for the submit blinded block to also include the blog sidecar with a new Signet becoming envelope cycle container and but yeah the the one open question we have for for that last change was if having this version 2 was the way to to vote because we get some early feedback from metagrift that there was some preference for not reusing for reusing the existing API calls instead of creating a version two but then also Enrico Associates that he he saw that yeah having another version doing this case makes sense so that's one thing that uh yeah coming something similar feedback will be great yeah that's for the the questions and finally to mention some action items that we we were thinking to to do going forward is implement this Builders pack changes on the uh that led to be done on the lighthouse code ways and then once we have that ready generate some test vectors to share with the dashboard theme to have some early early testing because Sean from Lighthouse with a share with us that that the previously there was some some issues with other works so having that that kind of uh test early was actually a good thing to go to have yeah that's everything thank you everyone cool thanks for thanks for sharing um Alex had some comments in the chat I don't know Alex anything else to add uh yeah I'm just gonna say that I think we can get away with everyone uh I was looking at like the versioning rules and basically they say we only want the new version if we basically break what's there which we wouldn't do at least we wouldn't need to do because we can just add this like metadata that says this is like A4 for four Block versus something else um either way generally from looking at this document it generally looks good and I'll go review the PRS and yeah nice work awesome thank you yeah thank you of course anything else on the Builder specs okay um lesson uh I had this um some basically the the benchmarking stuff we talked about last week I don't know um if there's been any updates there that anyone wants to share um yeah basically the the pre-compiled gas costs benchmarking um yeah so I think Marius ran uh the benchmarks on his computer uh and it in the worst case we've got around 60k but this is like the the worst case and I'm thinking maybe we should reevaluate how we do the pre-compile um benchmarking like maybe take 10 000 iterations of the average case um does anyone so I think to add here like the worst case here doesn't mean it's the worst case in terms of the data but it's just that uh like on the same data it has a slight distribution of run types right here and that's because of garbage collection rather than anything to do with the actual computation right so there's no way you could provoke like it's to do like uh a hundred times the worst case if you include the prequel pilot hyper tabs foreign like what's a reasonable yeah what's a reasonable part of the distribution the target um but yeah we can have that conversation offline yeah that makes sense uh I guess we're also waiting for other clients to um post what their benchmarks are um I think most other languages are also has a garbage collection so it might be around the same results but from Russian and uh like I say I was saying nevermind has uh some intermediate results that they can post later so um yeah it'll be good to have a sanity check across at these two two clients sweet anything else on that front okay anything else anyone wanted to cover okay well we can wrap up here um like we said last week we'll have a call next week and that'll be the last one uh this year so yeah thanks everyone and um yeah hopefully we can get this that's launched oh yeah I'm not gonna be here next Tuesday because I'm getting surgery um but I did want to just and Danny's Danny's going to be running the call uh because I think Tim's knocking me here as well but I did want to just say that um like six months ago we started this effort I think it felt like a long shot that this would happen in like 2023 and now here we are six months later and we have every client like close to interrupting sometime in January and I think are gearing towards the place we're all gonna be in person uh like to make that happen uh and then have a like commitment at the core dams level to ship this as a fast follow ideally in Q2 of next year and like I just want to say I've never worked on ethereum core development before but that feels like an incredibly remarkable achievement for like six months and I don't think that that would have been possible without everyone in this room like showing up every Tuesday for the last six months to make this happen and like being super positive and super engaged and I just want to say thank you to everyone I'm not going to say it next week so like thank you for all of your hard work um it's been an honor and a joy to get to collaborate on this and I'm really excited about um bringing it to production and scaling ethereum together in 2023. thank you I don't think we can and they call it on a better note than that um so yeah thanks Jesse for for wrapping up this way um thanks everyone and talk to you all in the Discord yeah all right thank you bye 
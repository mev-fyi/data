you should have good specification on what you want to implement for example this can be a white paper so you know what your project will actually be doing right and next you're gonna model how you want to implement the different parts of your system here the third step of security starts because what you should actually be doing is you should develop a threat model listing risk possible attack vectors and possible mitigation of different so how different actors May threat your system and already at this stage think about what can go wrong or How could an attacker attack your project this is similar like in traditional information security that is stride attack models or many more which you can use to think with this you can start modeling your system and then start implementing it but please don't just implement it implementing and documenting what you're implementing should go hand in hand ideally you start documenting what your system does what your function do early and when you're writing code when you're writing a function you're at a very low level very deep and very concentrated on this very function making it efficient making it nice making it safe but you risk losing the whole picture writing documentation helps you to place this function in the big picture and gives you another angle to look at your project and how this function interacts with multiple parts of your system and where a project should arise so writing code and documentation should go hand in hand unfortunately we see it often with our clients that they write documentation as one of the last steps and sometimes then the documentation simply describes what they see the code is doing right and then it's not really helpful for us as auditor because reading the code we can do this ourselves so I understand writing documentation is really boring and stuff we won't cover this in the workshop today if you want to see a perfect example on how good specification and documentation is done I point you to UNI swap they have a very nice white paper which contains the specification what your system does and in addition to that they have very nice documentation on what the implementation of the smart contract does what the individual function expect is input what they do and what they have as output so I recommend checking out this for your project what we're going to focus on in the workshop today is testing your project unfortunately that's auditor we've seen it often that projects are not really tested and testing covers lots of things so sometimes we need to guide our clients and point them to links on how they can efficiently and meaningfully test the project so we want to give you some pointers and some initial training so you can get it started with your own project this will include unit tests property-based testing forked mainnet test at the very end we'll talk about further things you should consider to get your code in an auditory State and even after the audit is completed once you deploy your code to mainnet there are further steps you should take to ensure the continuing security of your smart contracts yep that's the only slide covering specification and documentation as I said you should tackle this early on apart from the threat model we discussed you should think about invariant things that should always hold things that should always hold when the system is in this state and new invariants when the system changes into another state this can help you find bugs early and the last point this is not only to have nice documentation for the auditor or for you during your development process no the documentation is also critical for the users of your project so they know what they interact with for other D5 protocols that interact with your protocol they need to rely on your documentation that it's extensive and accurate when they integrate with your functions they mostly refer to your documentation and there's also reason why you should have good documentation to avoid problems when third parties integrate with your system so in the next part of the workshop we are considering a smart contract example and based on this example we're going to step through the workshop the example is a simple fund it's a smart contract that holds funds in the form of erc20 tokens users can buy into the fund by depositing the underlying token of this fund and they get pool share tokens back and there's a fund administrator who can use these funds for trading with uni swap are they compound the goal is of course that he increases the value of the fund at a later point the users of the funds the holders of the pool share can withdraw their shares and hopefully made a profit of course it's a toy example and the quote in the repo is for this Workshop only shouldn't be used for production because I'm very sure there are tons of bugs in it so in our small contract we will have the users the fund owner as the two parties interacting with that let me switch to the code as it's important to get a good understanding of the code before we think about the properties and write the test to avoid confusion yeah this code is all in the GitHub repo I shared earlier with you interested to follow along so here I opened our code sorry that's already the test that's the fund so it has a lot of code to get it going right is our fund we inherit from sc20 so we have our pool shares right built in we have some admin staff or stuff to attract the tokens I will find supports we'll take a fee it's three percent so as we it's when we deploy the fund we deploy an underlying asset this is what we will use for the funds value calculation and we'll add the token a supported asset the owner can add further tokens the order owner can remove tokens both functions are not really relevant for our test cases each token needs a price feed so that its value can be evaluated here we have deposit and we draw these are the two user-facing functions and these are also the two functions our tests gonna cover so let us quickly go through them so we have a good understanding we deposit an amount it gets transferred from the user we estimate the total value of the user we need to handle the special case for the first depositor separately as the funds doesn't hold any value back then and we would have zero value so the standard case after the fund is live and holds fund is the else Branch we calculate the total Supply calculate how many pool shares to mean for the user and how many pushes to mean for the admin fee will go in more details here shortly with the test withdrawing pull shares basically the opposite you give up shares you hold and you get a proportional amount of tokens transferred to you obviously your pushers are burned then there's a manage function which the admin can use to trade with the funds tokens but it's not going to be used in this Workshop down here we have a functions to estimate the value of the fund yeah lots of information a quick time frame and I hope you have the code in front of you and should any questions arise during the tests we can always go back to the code and let me switch back to the slides Let's Get It full screen perfect yeah so most important points of our funds is its interface because that's what we're gonna interact with in the test everyone can call deposit and redraw only the owner can manage the fund at Price fits and add tokens foreign implementing a smart contract it should adhere to some specification right in our example the fund should have a fee of three percent and this fee should be taken when the user deposits money and gets his pool shares at this time three percent of the value should go to the owner and the owner another property is the owner should always get this fees when a user deposits no user should be able to deposit without paying fees to the admin another important property we want to have in our smart contract is that Redemption for user always worked and cannot be blocked let's first start with testing and there are different kinds of tests in your smart contract you have small internal helper function which may also be public like our estimate function which estimates the value of the fund you have the buy shares functions deposit functions which is a bit takes more steps right and ideally you have tests on every level you test your unit tests for each function you do integration tests for processes that include multiple steps but in the end you should also like test your system like it is in production and with smart contract the production environment is the blockchain right you deploy it into the blockchain and there it interacts with other existing smart contracts so you should properly test it integrating with the smartcock tracks on chain so you don't get any negative surprises or any incompatibilities or anything let's see what we're gonna discover with our contracts with this let's go to the first warm-up exercise and in this Workshop we're gonna use Foundry there are lots of Auto grade tools available which all work similarly for example brownie or truffle you for your project or hard hat you may use whatever you like yeah the same basic concept we are presenting here apply similarly so for the warm-up exercise we should want to write a test case which are certain that the user's pays three percent fee to the owner and if the user redraws that he gets 97 of the value so if the user deposits and withdrawals immediately he should get 97 of the value back because the other three percent is the fee for the owner yeah so let's jump into the code we are back into the code editor and we move from The Source directory into the test directory so if you want to follow along you can open the integration test file how Foundry works you write your test files in the test sub folder and you call them integration.t.sol and it's basically solidity so as you can or as a developer you're familiar with solidity no need to learn another language or anything else you can just use what you used to solidity and continue you inherit from test and you have all this fancy stuff available which allows you to impersonate another account distribute E4 to another account move in time or whatever you need in your tests and with your test you cannot simply test your function as is right it's a like a blockchain you first need to set up the state meaning in our case we first need to deploy our fund but deploying the fund alone is insufficient we need to also tokens the underlying tokens of fun interact with the token the user deposits so we first need to build up our environment so that's what the function setup does in Foundry we deploy a new wrapped e for token we mean one token so one is to the deployer we impersonate the deployer address which we've just taken a default address up here we deploy our test fund we convert our ether into wrapped if as our fund works with es20 token the owner deposit so the fund is already initialized and holds some value and at this point we have the fund up and running ready for testing now we also need users interacting with the phone right so we give some money to Alice also in the form of E4 and down here also to Bob we impersonate Alice deposit if as rap defer and approve the fund so we can easily call deposit and he can do it transfer from so after setup we have an environment setup where fund is live and both addresses of Alice and Bob have rep div and have already approved the fund so we can easily use them for testing and writing a test is really simple and remember what we wanted to write a test for we wanted to see if the code of the fund we implemented adheres to our requirement that when depositing three percent of the fees go to the admin and that the user can withdraw at all time so of course this is like the high level statement we need to make this a bit more Concrete in order to be able to write a test case and the test class we want to write is if you deposit and immediately withdraw you should get 97 back right so that's what we want to implement and it's really easy we first impersonate Alice so don't worry this one is already pre-coded but we'll have two more examples with kind of live coding so we impersonate Alice we query her balance we use her balance redeposit this no sorry we get Alice's balance of rep div but we know that from the setup that it's a unit so we deposit everything and adjusted everyone know Unis stands for 1 to the power of 18 so one if and which has 18 decimals as well right now that you get confused here so we have Alice balance up here we deposit it we check how many shares of the fund Alice has we we draw it we check Alice's balance afterwards so now we did our actions right and here we write our condition we want to assert we want to assert that the Alice difference in balance is equal to the fee she is supposed to pay for depositing one unit of her share tokens and this should hold if we implemented our smart contract correctly so with this test case uh let's run it sorry so what I'm basically doing here with match I just take which test case to run it runs the test but it unfortunately doesn't pass reason the assertion failed now we can tell Foundry to give us more variables output to figure out what went wrong and minus V you can go up to 5V it defines the level of verbosity the output should have so now we see the reason is that the assertion failed we should have paid three percent so she deposited one that's three percent of 1 to the power of 18 but actually what Alice paid in fee is a bit more so either our test is written incorrectly or the smart contract has a bug let's quickly go back to the test the test itself looks fine right we deposit we withdraw we are certain that we didn't pay more than the fee so let's go to the smart contract what happens up on deposit we transfer Alice's money first to the smart contract and only afterwards estimate the fund's value and based on the value with already the funds of Alice transferred to the fund we mint the shares and this is incorrect as Alice's token which it transferred to the fund shouldn't be taken into account into so if we transfer the tokens from Alice first to the fund the value of the fund already increased but we haven't issued shares for this increase yet right so the shares the existing Shares are overvalued and Alice gets less shares and then can only redeem less and doesn't get enough so the solution is we need to estimate the value of the fund first only afterwards transfer Alice's token to the contract and then issue the shares based on the amount before Alice transferred her funds we did this we store this and now let's see if what happened to our test and as we see writing a test case while developing our smart contract um helped us uncovering a stupid bug which otherwise would have remained in the court until maybe the auditor would have found it way later of course this test just shows that it works with these values we passed it's no guarantee that it works in general with all values so in the next step I want to talk about property-based testing this is like random input test this is similar to fuzzing I guess it's a terming issue because fuzzing is mostly seen as Black Box testing while property-based testing you call it when you do randomized input when you know the code you interact with so Foundry allows us to test a function call with a random value and see if our assert condition hold for all these random values we check we still have no guarantee that it works in any case but of at least we have a way better feeling that it works with big numbers which may have triggered an overflow somewhere it works with small numbers where maybe rounding issues lead to failure it just allows us to cover a much broader space of potential values and we have a much higher chance to actually detect issues on our smart contracts yeah this is basically what describes the difference up we have the unit test case where we just test one fixed value the example we just did below we have the property-based testing where we write the set of action depending on a random value where we assert something and we just tell our tool to test it with many value and see if it can break the condition yep so for this example we want to try to work on the condition the owner should always get fees when user deposits so back to the code still in integration and we want to test that the owner gets a non-zero fee so the rough idea behind our test case is we save store the owner's share balance we let the user deposit we query the owner's share balance again and it should have increased right after a after a user deposited because disassigned fees to the well I just saw that I've already implemented it forgot to delete it so yeah codewise we query Alice's balance sorry no let me delete it and that's a that's not worth it okay Okay so let's consider this part first we created that's the code for storing the fund owners balance before then we impersonate Alice Alice deposits we create a fundamentals parents afterwards we checked that the difference is bigger than zero of course this is a simple demo test case you could actually expand on this condition and check that the expected amount has been received but just for demo purposes and Foundry will use random values here but based on the full range of the unsigned integer which is way too large for actual valid amounts of photo combatants right and especially in this case we're also constrained by Alice's token balance so we can tell Foundry to bound the value in this case we bound it to the up to the balance Alice has because if we exceed Alan's Alice's balance and try to deposit it obviously won't work right so let's see how this test works and what we see here this one passes now and actually while developing this Workshop we had a minor Buck which we first didn't realize only caught it in testing and we see here for demo purposes we only did 256 run right with 256 random value but didn't find any breaking value you can create tweak these numbers for actual project um so this gives you already a way better feeling that your code works with lots of different values instead of just with one but still not good enough right sure yes no specific reason I mean yes absolutely correct yes you need to get more elaborate here and for an actual project you need to think more about what is a meaningful test case and tweak these values good catch yeah good yeah actually I don't know but it definitely makes sense to text the edge cases they found it doesn't do it by default the definitely should be part yes test deposit yeah good question yeah yes I agree you probably should use the expected value to avoid errors there yeah invest uh I don't know parametric or something yes admittedly writing good tests takes time right you need to design them properly you need to implement them properly and you also need to see check that your tests are bug free I remember a story once we audited the system after two weeks of audit we found a broken functionality while manually reviewing the code but we're really puzzled why is this code broken because they have a test case and it seems to work only later we realized that the test case was broken and the small contract was actually wrong so tests help you but don't guarantee you that it's Error free yep and now the best of all mainnet test your D5 project won't be Standalone it will interact with many tokens many different defy systems even if you took great Care Reading their documentation reading on how the special special behavior tokens might have you should still test as like in production as close to the production as possible and lots of tools out there now enable testing against Forks of the mainnet what this basically is you run tests against the local copy of the real ethereum Network so you integrate with the real Ave with the real uni swap you use the real usdt code and this helps you detect more Corner cases and other unexpected one big Advantage this helps you to uncover is to help the tech undocumented and unexpected behavior of protocols which may break your integration again we have the example that Redemption should always work and let's see if it actually works in our code or not for this we go to the Fork mainnet test file and what we want to implement is a function test USD and I give you 30 seconds to quickly think about how you would implement this I I just deleted it you probably saw its three lines of code give you 30 seconds to quickly think then we'll gonna do it together we want to test that redrawing always works and we know from the okay in the integration test we had the setup function right we deployed our own web if token we deployed our own fund and everything we deployed our own because we had to build the whole environment ourselves and if you note the Zapped up function here is different we don't deploy our own tokens instead we interact with the real wrapped e for token on chain and the real usdt token on chain and the real chain link price feeds um Foundry is gonna do a local copy of the current mainnet state of this contracts and their state locally which our tests will run again so we're not deploying a default mock token contract but we're running it against them so we are basically again testing um the setup function still deploys the fund right and the fund owner deposits his one wrapped E4 so at this point where our test results the fund owner already has shares of the fund and can simply redraw and we simply want to test if we drawing works so let's go to the implementation and first we need to impersonate the deployer hard to hold the microphone and type that's how you do it next we wanna see so our withdraw function takes an argument the share amount right so we need to see how many shares we have like we just query the deployer's balance of front shares and now we actually try to withdraw and do you think it's gonna work because you've seen the code of the fund right it should work the withdrawal function looks good have you checked the withdrawal function is it going to work you would need to add your own API key here and I have it as environment variables work last chance ah guess the internet is not good so I need to order a hotspot here yeah so if we need to download mainnet data we need internet and I forgot to spin up my Hotspot in time which hopefully will allow us to yeah couldn't get no I also lick my command key so I'm gonna need to revoke that one damn I especially did it in the environment variables in order to avoid this but okay uh thanks no I'm not connected to my phone that should work yeah okay if it doesn't work I'm gonna have to explain you yeah fortunately no chance so actually the surprise is as we're now running our code against live on chain code and we're integrating with rep and usdt and the rep if transfer will work as expected however usdt doesn't really adhere to the esc20 standard in the sense that their transfer from function doesn't have any return value and our code of the fund actually depends expect the return value here on esc20 dot transfer the interface specification of esc20 expects a return value so if solidity so if there we don't get a return value back and our transaction will revert and this is a well-known strange Behavior case of the usdt token which have led to problems in real life and every developer integrating with this token should be aware of and this should also serve as an example even if you have expectations that you interact with legit esc20 tokens there can always be weird Corner cases or weird unexpected behavior and that's the beauty of forked mainnet test and that's why Fork maintenance tests are absolutely essential to have with your project yeah yes of course but then it takes a long time to set up your local test environment when you need to do the real stuff always and the alternative doing fog main test is so easy so straightforward business yes yes true true but you need to carefully inspect everything and it's hard when you don't know the bug in advance right how to look up what you need to look out for yes please yes yes yes that's what didn't work now because I don't have internet connection we would have create Alchemy to give us the state data we needed for our tests yes it's really these lines of code you give up you point them to an address and it all does everything you don't see how it works it's easy and simple to use so you download the state and based on this date you start evaluating your stuff right you start progressing the state and I guess there you do dynamically generate your addresses how do you know which state you can't right but we've specified the addresses of the contracts we interact with yes yes you need to see the right that's what we list up here and then use finder yes yes you can specify the block so if you don't specify one it just takes the latest one but you can also specify a previous block yes cool um that was the interactive part of course this only covered multiple tests in case there's way more you can do and what we didn't talk about you should have proper development process right this includes code reviews you do merge requests another one member of your team reviews it gives you feedback you discuss you have proper coding standards and guidelines you adhere to and important to note not all bugs can be uncovered by tests if your tests pass it's never proof of correctness there can still be bugs because you didn't think about test case that would have triggered the bug and formal verification of the code can bring you to the next level but again doing formal verification you need to come out with properties and specification if you don't write the pro pro specific specs you may miss out on other bugs and what's absolutely necessary is to have a external to have an audit of the code both internal and external ideally to get the code into an audit Readiness state after you've done all of this after you're done with your project it shouldn't be shouldn't go directly to the auditor instead the internal team should take a step back and audit the project themselves and this already helps to uncover a lot of bugs and then in the next step give your code to an audit company which is going to do a total review give you an intermediate Report with potential issues and then give you time to address this discuss potential problems and how they can be mitigated after that your code should be ready for deployment but that's not the end of the road right even after deployment even after you did everything perfectly before and you should monitor your system especially if it's a D5 system right depending on finances and stuff check if it's healthy in a financial way or if unexpected Behavior but this is very Project Specific but you should look out for um a bug Bounty is a very valuable uh addition for your project so if there is a bug that has been missed it gives incentive to the writer to actually report it to you so you can fix it in time and approach that we didn't talk about here you could what we've seen from clients is you could also implement it as testy driven development so you don't start with the code but you write the tests and then you write code which make these tests pass and you approach it from this way we've also seen this but very rarely and then this yeah stateful testing there's way more you can do here you but then I need to refer you to the internet or invariant based programming yeah that would conclude my workshop I'm here open for any question open to discuss your project also if you see us walking around at Defcon don't hesitate to to us if you have any questions thank you any questions yes the uh the code the folk minute one or the integration okay um so you you seems to you are you're using the deployer you're you're using three addresses deployer Alice and Bob yes these are two three and four uh yes so Foundry provides you with some default addresses which you can just access with two three and four okay they resolve to proper addresses yeah this but but these are recompiled contracts no these are just random addresses you can add funds to but I mean I mean no that are just like EOS you are right that zero X1 is a pre-compiled contract but this is something completely different this is Foundry specific this results to such an address okay long address as you used to ah okay okay I see yeah because otherwise if you yeah you're right pre-compiled contract but that's something different okay okay great um the other thing wanted to ask is so you you have a test that asserts that in the same let's say in the same block if you deposit uh you will get like if you for instance if you deposit and withdraw yeah you will you will get the same the same amount of shares or less yes because of the fear yes so but but something happened happening right how you can because it seems like everything is it's one transaction specific and you're not going to you're not going to uh assert about uh things that can happen in the middle yeah no we are not asserting so in this test case we write these test scores are Atomic right and of course you are right in the real world if you deposit first if another action happens in between and the fund value changes when you redraw then of course then the value doesn't add up anymore all right all right but yeah if you need units in this context because you you can still do it like this right but you need to write these actions in between yourself or somehow come up with how you can simulate them but you don't want to write the actions right you know you you want the faster to be able to simulate them without needing to write the actions because you don't know what can happen it's a very good idea yeah but it's probably not in the scope of this testing you probably need other tools enabling that I'm not sure if it's possible because I think it's also great documentation on family which you definitely should check out okay thank you yeah please so most of the time Ford King for mainnet you need during your setup function and then it's basically done then if the tests don't them self also fetch new data should be fast otherwise it guess it depends on the Node you connect to yes it really depends on the individual application what quite clever yes please we're running out of times it's one part of but it's not the Holy Grail right it's not enough yeah yeah I mean any auditory part of a reputable firm should make it clear in the executive summary or somewhere that it's unsafe right yeah so you need to read the audit report carefully to figure out if there are doubts yeah I think there are other companies which are way further in this way like runtime verification and certificate I mean they have a lot of talk here which I recommend to attend yes are there other advantages of testing in solidity other than just not having to use a new programming language versus testing in like JS or something it's just simple for the average developer right if you need to do this JavaScript mocha JS test with the icing create it's way simpler here for the average developer cool thanks a lot everyone [Applause] foreign yes definitely agree thank you thank you [Music] [Music] thank you thank you foreign foreign [Music] foreign [Music] [Music] hey [Music] foreign [Music] thank you [Music] so if you want and you have a computer available you can go to that link I have like the full lecture notes there uh they're a bit more extensive than the things I'll go over now so if you like if you like that then you can pull it up I guess I started my clock when I started talking so that means we're going so why am I doing this talk the candid motivation is I want you as developers to do more of the work that you assign to Auditors yourselves um we get a lot of questions you know someone signs up for an audit the audit is going to start in two months the code will be Frozen and then we are invariably get the question can we help you prepare for the audit somehow can we help you get like make sure that the audit runs smoothly um there's a few obvious ones let's see do you have a pointer I do uh these things I'm not going to talk about because I hope dearly that if you hire an auditing company you have good tests they run they pass you have integration tests you got documentation and you make sure that your devs are available for the couple of weeks that you're going to spend on an audit if in case a question comes up those are the basics but I know a lot of teams are really really highly skilled and they're very motivated and they want to do more if they can so uh well what can you do what's what's the secret sauce to getting a good audit actually what's the secret sauce of the Auditors Auditors like us different audit companies do different things but we have our own little method of working which I'm going to share with you um invariance we like something called invariance sometimes you call them Properties or property-based tests or whatever your favorite equations over State I usually just use the word invariance for everything they help you find more bugs right better docs trust your code more they help Auditors because you know as Auditors especially we we're going to be looking at invariants and trying to find more of our like invariants of our own basically so if you come with a little set of these that you've already gone over you've done some of our work for us and we can focus on like either deeper work or we can work more efficiently and get you done faster um so we want you to come up with invariants if you're on chain code um they're also good fuss targets we're going to get to that uh they also one thing we found especially developers they can tell you exactly like oh you have to go to this function and this function you will see exactly uh where this variable get updated and everything and once you start talking about invariants and we say things like well just to sum of all balances always match the total balance and so on then we find that a lot of Auditors or sorry developers start looking at their code from a new angle because this is sort of a top-down angle it's almost like you're coming back to the design phase moving out of like the optimized imperative code and thinking in a more declarative fashion um don't have to read all this I just like to have a thing I know this is being recorded I I myself like to pause slightly talks and like read slides uh so I put more on here than uh I'm gonna read so don't read all of it I'm just going to say really quickly here's what we can structure this talk uh we're gonna go over like how to make invariants I call that state is just equations uh then how to prove invariance at least uh in a pen and paper fashion which is what we often do uh talk about how to approach things when you can't really get your proof to work and also how to use your invariance to do fuss testing and even monitoring if that's your that's something you want to do um and if you have code working right now if you have a laptop up like you can bring up your own code uh go over your own code link because I'll be explaining how to come up with invariance if something comes to mind and you want to write that down please do that I'll be working over an example from an audit we did a while ago so if you don't have any code you're working on right now or you just want to follow follow through now and then go out and start working on variants on your own after the session that's fine too uh I'll also it's a lot to cover an hour isn't really enough uh anyone here interested we can just just grab a table I'm happy to take anyone from this crowd anywhere and just keep going with the workshop if you want to keep working on invariants afterwards so just just grab me we'll find a table somewhere and as many of you who want to keep going we'll just keep going I like this a bit too much it feels almost pathological but I love when developers come up with invariants um so testing versus invariance testing is I guess I didn't see the the previous talk but I think he was talking about how to do better tests tests are sort of like the camping knife it's like if you know what you're doing you can use it for almost everything and you'll get out of most things by just doing a bunch of testing it's our first and most robust line of defense um there's a myriad of resources to help you test better there are talks here probably how to test better um so again I assume you already know how to do tests I assume you do unit test that you do integration tests you try deploying on test Nets and so on um and my analogy for tests is sort of like an experiment right you're trying a single thing you're going to see what happens if I do exactly this call or I do this little sequence of calls um it's great and we often like especially test driven developers like to talk about testing as you know some sort of silver bullet or even if they say it's not then you can kind of feel like oh the test is testing is what you need and that's going to solve your problems um but I don't know any developer that actually trusts their code enough it's like oh my test Suite passed uh bring on the billion dollars TDL like that that doesn't happen right you're like you sit down and you like really think through it and you talk to your colleagues like well are we sure like have we thought about everything um and it's sort of like that's sort of like Theory um recently about code is like developing a theory it's like what if if the experiment is or if testing is just an experiment like in in the physics or like a science context they help you verify that your theory is correct and if you do enough experience you might be pretty convinced but you also probably want to make sure go over your theory and see if like are there any holes in it does my theory leads to inconsistencies even if you tried 200 prime numbers where maybe prime number 201 is going to be the one that breaks your little mathematical theorem so you need to be reasoning about uh what your theory is saying um the thing is there's very few resources about this I had one five minute talk by my professor when I started college saying like here's how I run over code in my head and I think that's that's the end of it and it feels like recently about code is something you learned from experience uh it's something we're always doing when we're debugging doing code review doing design discussions we're kind of like simulating things in our head um but there's not met much resources about it no one's really teaching you how to do it it's just sort of like well you're a good developer with time you learn it so I want to change some of that by giving giving you some structure if you don't know where to start reasoning about your code to make it more secure here's going to be a few steps to get you going um this is meant to either intimidate you or titillate you depending on what your uh what kind of person you are um but we're doing something that's sort of analogous to math proofs so in math you were taught both like Computing answers like figuring something specific out but also how to do proofs how to make sure that the algorithm that I'm doing is always going to work again it's sort of like the analogy testing versus uh reasoning experiment versus Theory uh reasoning about code is analogous but proofs before anyone say Curry Howard like I'm not talking about something like that if you're a theoretical computer scientist I'm talking about something very straightforward that I think anyone who has taken a basic code boot camp should be able to do um and just like proving uh there's a method there's a bit of artistry it's not always straightforward I can't guarantee you that your proofs will work even if your theory is correct but there's a structure to it you don't have to just be flailing around trying to prove random stuff um and with that we get to the actual invariance what is an invariant what are we looking for and what are we trying to do um so this is very small um so one way to think of a good invariant it's something that it's obvious that the code is doing or should be doing um but like if it works correctly it should be doing this specific thing but it's sort of incidental from the code nowhere in the code is just like directly enforced it's just something that sort of should be obvious from your business logic um ideally it's really something really high level like aliveness uh like a liveness claim that you know this contract can never get stuck and so on but to be completely honest starting with really simple and variants will get you quite far most of the time and we'll do a very simple invariant here today uh and I can tell you from experience that even those really simple invariants that aren't like super high level claim that the entire protocol is perfectly secure they still help you find bugs in your code and we find bugs all the time using them um invariants defined as it's not varying its constant in mathematics is unaffected by a designated operation uh and or an invariant quantity function configuration of a system it's something that's always true uh you can think of what's the code behind the code because the code is very exact it's imperative it tells the computer or like the evm exactly how to do every little step uh so it's not it's it's imperative not declarative is one way to say it and here's your chance to be declarative you say something like you know here's the equation that should always hold I think in the ERC erc20 contract should have this property right you keep track of the total balance you're minting you're burning uh you're transferring and we just kind of assume or like we hope or we might be very very confident that the total balance is going to be the same as the balances in each individual account that has interacted with the mapping of balances so this is just a way to say take all the balances in the mapping and sum them up if someone knows way too much about the evm like I do then uh just think of us every every time you wrote directly into a mapping technically the mapping contains a bunch of other stuff but don't worry about that uh and again a gradient variant is something that's obvious from the intended business logic like this like of course you know the total balance should be just all the actual balances that are out there but it's not necessarily obvious from the code nowhere in the code of the stat there's no one summing over the balance anywhere in the code here's a working example if you want to if you don't have any code of your own you want to pull up and follow along on your uh laptop you can go to uh GitHub alchemics Finance V2 Foundry repo it should be pinned at the top uh we're working at the contract Alchemist so we're going to be like Ctrl fing through a little bit of it if you want to follow along properly uh or you can just watch the slides uh really quickly this is sort of a slightly more involved version of the the sum of all balances total balance invariant they have something called shares that they're used to uh that they use to make sure that you get your you know your your yield in proportion to how much you have staked uh essentially and then for every specific yield token there exists a total shares valuable so slightly more involved than this the sum of all balance this is total total balance invariant here's how you frame it as a mathematical equation if you go into the uh mapping of all yield tokens where that contains the token address as a key and a set of params that's this yield token params if you go into param's total shares that should be equal to the sum over all the accounts uh this value of each account uh that's just one invariant we come up with we proved uh it turned out helpful I'm not sure if we actually find any found any bug on that one but you know we do find bugs on those kinds of things quite often um but the question is like so if you're sitting here with your own code for example or you're watching this later are you thinking about your own code how do you come up with good invariants uh how do you come up with like looking for something like this and there's a few tricks um first is to come up with many like try to think of anything you can State as an invariant uh state that as invariant and then focus on the ones that seem to be important um second one is go over storage variables do you have uh do they have like obvious relationships this was a good example you have the balances and you have the total balances of course that should just stick out as a sore thumb like that's these these two things should have a very tight relationship between them um ghost variables is a nice trick that's sort of just like introducing variables that don't exist directly in the code but that you can use when you're reasoning over pen and paper I'm going to give you an example de-optimizing is always fun like you're doing a lot of optimizations even if you're not doing even if you're not a big Optimizer you're not iterating over all the accounts of all your users for example that's the sort of optimizations as solidity developers we need to optimize but what if you just think I don't have to optimize at all you write the code as you would in a dumb Java program and then you just State the invariant say like well this this Nave implementation and this optimize implementation are identical modulo gas usage um go to your design spec I hope you have one you all right design docs right read it over see if there's anything you're mentioning there that's obvious like that's something that there's a good chance something that says something in the design dock like well these these two variables should have a relationship to each other that might not have been carried over to your code comments uh so you should go to invariants and you can also work from unit tests like replace some unit test values and start thinking about what if we'd start fussing it what if we use symbolic values what properties would they have to satisfy and then just try to State them as you know equations or something similar it doesn't have to be a mathematical equation it can also just be a very exact description that's what happens if you open a math paper it's it's not all just a set of equations it's a formal formal line of reasoning written in English and that's fine too uh so ghost variables are just a way to introduce variables into your invariance or your system descriptions that don't exist on the chain or that you don't have on the Chain um so impossible to compute functions we've seen already some some overall balances you could think of that as sort of a ghost variable you can't really do it on chain for several reasons but you're absolutely free to use it in your in your invariance and just make sure that you know whenever you're adding or subtracting from a balance somewhere in that mapping then you know that sum gets updated um another one is like well total deposited ever for example how much ether has this contract ever received maybe you're not actually tracking that you can't probably actually track that in your in your contract but if you're just reasoning about the um about your contract then you can say like well how much ether has ever been in this contract make that a variable and use that in your questions and hopefully you may decide that some of these ghost variables actually deserve to become State variables it might make sense to actually keep track of these on chain the way we do with totals even if it's just for monitoring even if it's just a little view function even if it costs a little bit of gas it's going to help you reason about your code monitor your code and like make sure you can run your tests on um on chain State forever uh here's an example of de-optimizing just to give you a quick look of what that can look like here's a really simple optimized you know normally optimized piece of code when you give rewards then you increment the total reward ever variable that should be a semicolon there uh and where did all semicolons go must have done a search replace oh well um because what happens when you keep copying over from different resources um and then when you withdraw rewards you just calculate you know whatever a user has a specific stake and you can say the last time they're reserved if they received a reward you calculate how much reward they've earned since then then you update some variables and you send them some tokens the really dumb way to do this is when you say give rewards uh you just iterate over all the users and you give them a bit of reward and then when they withdraw you just set their rewards to zero and you send the tokens you can't do that right that's not really possible and if you do that I will slap your fingers but if you can definitely make a statement like hey these things will give the exact same uh results for a single user right if we call to give rewards with a certain number of amounts and then I call withdrawal rewards I should receive the same things from both of these implementations that's a nice little variant um oh no this this would be just like you know in an adult like we're going to get to like part of the reasoning yeah I want to also emphasize and I will emphasize a few times you need to show your work again like I feel like a math professor here but like show your work because there's a lot a lot of work involved in coming up with the invariants and improving them and if you do this to yourself and your notebook and then you throw your notebook away then you know well the next person is going to have to redo it or the auditor is going to have to redo it and that's can be expensive for you so make sure that you you know have it I don't know how you like to document things if you like to do it in your codes you have to be new code comments or if you want to have a Google doc somewhere whichever this but but this like you could have a few pages in a Google document that say like hey what if we implemented like this here's our actual implementation these should be equivalent here's you know uh pen and paper proof showing that it should be yeah so yeah this this doesn't work in in a real contract because sorry oh yeah don't go deleting all your semicolons like all the experience examples here are illustrative it's not uh they're not this one isn't pulled from an actual deployed code uh it's just you know a quick example of what de-optimization looks like um or I could say oh it's it's pseudocode like because some of you might be riding Viper and this the process still works so um okay now we get to actually proving them so you come up with something that you say like well this should always hold over my contract forever uh proving I had a math teacher who said like well proving sounds scary like oh it's you you just need to convince someone how good does your proof need to be well you're gonna have to show it to someone if that's you if that's your friend if that's nature magazine then you know whoever you're talking to you need to convince them that yes I know like my argument is sound and it's complete and you know my my uh my theorem holds right uh the good thing about code is that it's usually boring and straightforward it's uh pretty mechanical um because hopefully the code is pretty straightforward and all you need to do is check a bunch of places which can be boring but uh straightforward usually so how do you prevent a variant well straightforward you uh figure out where are all the variables or ghost variables that are ever written to where are they modified if you find all the locations in the code you lists every function that modify any of these invariants you make a list it's a Google doc if it's you know if you have some cool emacs tool to do that go ahead just make sure you have a list of them um so this is like manual verification like of course there's tool we work with tools we mechanize things we love building tools to do these things but it's actually really very useful especially for smaller contracts to just do it as pen and paper a lot of times so don't get intimidated when I say like just write it down like write it down into document and follow through it's it doesn't actually take that long most of the time um then you check what's called a base case you check that the invariant will hold from the start in the Constructor uh the initializer wherever just make sure that like your invariant isn't invalidated immediately as the contract is deployed uh that's usually the easy part and then the hardest part is the inductive case you find all the locations that you noted here and you go over all of them uh you can assume as you go into the contract that that's the transaction start that the invariant holds and then you just look at all the locations that modify the variables you do some symbolic updates uh just say like I'll show you what that means in a second and then you check that your invariant still holds if you do all these and you find that the invariant holds from the beginning and it holds at the end of each function if it held in the beginning then you're done like the American holds forever and this contract um on the working example so if you pulled up the code then you can control F for our variables which are total shares and balances um if we look over the contract I usually use a silver Searcher and some other tools just look to get an initial search for where are all the places where these variables can be modified there are more structured ways to do this but just this juice is the fastest um make sure you look for assembly code because you know it can modify your storage variables um and make sure you find all the relevant locations uh I'll also look in the contracts you inherit from because you know modifications can happen there as well and use a dependency graph tool if you need to in this case we find uh these three functions modify our total shares and balances add yield token issue shares for amount and burn shares these two are internal this one's external uh I can just tell you the ad the first one add yield token uh is fine it just sets the values to zero uh Constructor and initializer doesn't really touch any of this so everything's zero so we get initially zero equals zero because the total shares for every yield token starts at zero and all the balances start at zero so this is a sum of zeros and we get zero equals zero that's true so the variant holds initially and then we go and find um the issue shares for amounts we find that in these two locations are variables to balances and total shares get modified um technically it also makes sense to reason about like is there could there be re-entrancing here actually in this case that wouldn't matter um are there many different paths through this function no it's a very straightforward function technically there's a path here but it doesn't matter for us because we always only um the only relevant changes are in this basic block there's failures but if this function fails then you know State doesn't get committed and still fine so we find that we add a number of shares to total shares read very carefully accounts recipient balances you're talking shares yes heel talking still talking yes okay we just add shares to both sides note that we don't really care how the shares were computed like we this might be an external call like anything can happen here it doesn't matter what we know is that if we come to this location of the code and we go through this line and this line our invariant will hold once we're out of it uh this one has left us an exercise to the reader it's slightly more not challenging it's just exact same thing um but I mean like now we've proven this invariant and it may Sun sound slightly meaningless but it's sort of like that that was one of those questions that come up as you're developing hey am I sure that well total shares and like the uh and the balances they should always match uh I should check that at some point uh maybe I haven't but like now you have checked it and you've wrote down your proof hopefully and now you know and you don't have to worry about it that's one good thing um you can convince everyone that the invarence holds uh the case may seem trivial but as things get hairier the bugs get scarier and this class of bugs are definitely out there people do forget to like do the second variable update I mean you it wouldn't be crazy to find this code without uh the second line here it happens you know someone slips through a code review and then it happens and now you're in deep because this is actually used to calculate rewards and if this line was missing you'd be in deep trouble and your Auditors would find it and report it a critical affordability uh and again make sure you save yourself some somewhere useful somewhere you can find it somewhere you can show your colleagues so you don't have to redo your work um Chris is anyone did anyone pull up some of their own code and it's looking for invariants in that oh someone okay cool okay so I know that you're all hardcore super developers and your code is not always this straightforward um so what you do then uh failed proofs and I don't mean like if you find that the proof doesn't hold then you know you're very it's invalidated and you need to like make sure that you know figure out why why it doesn't work and fix that what I talk about here is fail proofs is when you actually fail to prove it you didn't really conclude that your invariant doesn't hold uh you're not sure it holds what can you do especially as code gets get Terrier uh well so this when that happens it's actually a good guide to refactoring and refining your code um so here's some basic tools that we can use and we usually recommend like if we can't prove if we can't prove an invariant and we really try to uh then we usually ask you like hey can you make this a bit more clear because we haven't been able to convince ourselves we haven't been able to convince you uh you should want to be convinced of this invariant and until that happens we should make sure that we can either help each other reasons through the code or we can make the code more easy to reason about so if the function's logic is too complex if you really don't want to refactor one thing you can do is you can instead of giving a name to each function you give a name to each basic block does everyone know what I mean when I said basic block okay going back um so basic block of code is a code that will always be executed together so for example if you enter this if you enter this function um This Can't Fail there's no branching here this can't fail there's no well this can fail actually so um but if we okay if we ignore reverting failures for this case which we can because you know reverts will just mean that nothing happened these three lines will always be executed together uh and so will this condition but this line may or may not be executed so you can think of this as a basic block and this is a basic block if you have a while loop then the body is a good example of a basic block if there's no more branching in it basically anything that's like you can treat a solid chunk of code that will always be executed together with each other if you had thrown this line into here or like another if case then it would not be in the same basic block and then it would be harder to reason that your invariant holds um so yeah I mean that's what a basic block is a single piece of code that would always be executed together um and if you have really complex logic and your functions are really big you might want us instead of giving labels to just a function so you give labels to each basic block and the reasoning works the same way if you can prove that after each basic block as you go into it and as you come out of it the invariant holds then you know your inductive proof is fine and you're in Marion holds um what we find sometimes is that you will only like the variables that need to be updated together are updated in slightly different places uh and then we get an argument like well you know but they will always because of like some sort of reasoning about the possible execution conditions they will still always be executed together well why don't just co-locate them put them right after one another to make it easy to reason about them if you have complex arithmetic expressions with rounding ignore that for now uh treat numbers as real numbers don't worry about rounding at all you can do rounding error analysis separately write your stuff as functions imagine it's all real numbers make sure your invariant holds and then you do rounding error analysis we did a talk on that yesterday I'm sure you can find the link in the Devcon videos about how to do rounding error analysis to make sure you're contracts are safe if you have a bunch of different invariants a nice thing is to do what's called framing conditions you just write over each function which storage it modifies so you can look at a function and say like well this function modifies all these storage variables if it doesn't modify any one of the ones you care about then you're fine if it modifies one of the ones in your invariant but not one of the others then you know look out but it's just a good way to build up your code with comments that will make it easier to reason about in a structured way if you see doing this more and more um again did you check everything Imports inheritance both up and down uh inline assembly there's a bunch of places where you can have storage modifications that you weren't thinking about uh control effing does is not enough uh and if the code keeps changing if you're doing this as you're prototyping you're doing it wrong this is like once you've done a proof and you checked everything and your code changes you will need to recheck your proof so this is very much something you will do towards the end ideally when the code is frozen or almost Frozen um so again like if you're asking a an audit firm to audit your code you should ideally freeze it before and that will like whenever you freeze it you can start doing this or slightly before question so pretty much when I have the client that really likes to change the assumptions of the whole projects basically then uh I should I guess I should write those invariants but recheck them every time the changes happens yes yeah and I mean that can be a statement of work hey we did all these things and then oh we just wanted to add a new functionality and like okay I'm going to recheck these things that's going to take me four days and like but you already checked I'm like well you changed the code it's like that's sort of the negotiation with um with the client and it also kind of emphasizes that you do need to freeze your code as much as possible like so again if you if you doc if you document your proofs really well and they don't refactor everything and change the entire design then change like looking over the proof should be pretty straightforward if you're used to it you can kind of work from the diff uh just oh they made this code diff and you can make sure that all these changes would still respect the invariant um just look at all those locations and make sure that the invariance is respected do you have the microphone thanks y'all yeah I just wanted to add that maybe the thing he's talking about with frame conditions helps with that because you write down you know what storage slot seats functions modifying tell your client like hey you make the modification write down the updated storage slots and then that minimizes how many functions you have to recheck your invariant for because if they didn't change which storage slots it was asking you don't have to recheck it yeah I mean there's there's a feedback loop here as well right I mean if you if you write down your framing conditions put them in the function and then you can make sure that the client knows to respect them or like you know up again update their framing conditions and so one beautiful thing about this way of working that we found is a lot of our clients get trained to do this more and more themselves they start producing better code it's more readable it's uh it's not always less complex but like the important things are more co-located and so on so uh I would say if you personally if clients keep changing the code like make sure that they understand that there's a cost to that uh if they still want to do it of course they can do it um but also help them to train them to be better at when they do that they also make sure that the proofs that you produced or that they produce that they have are also kept up to date right um I like that it's a co-location sort of like imagine like if you I don't know if anyone writes Java or C or JavaScript imagine if you use one of the basic data structures like hash tables or something and you manually had to manage the number of items you might have to manage all the internal variables this is sort of the kind of encapsulation uh I know people don't always love using libraries for different reasons uh you know gas off my shades and so on but try to make sure that you're uh your your code behaves more like it like you know the all the things that are relevant to this little data structure updated in the same place how do you recommend testing uh basic blocks if they're like within a function like unit testing them like for invariance if you wanted a certain variance for Facebook I mean it's just the same thing right like in like if you let's say that this was a really complex function and there's a bunch of code here and a bunch of code here uh with and there's a bunch of different paths through this function right I would name this basic block whatever basic block these contain I would name that something and then instead of checking every function instead of going over over every function improving this I would just prove it over the basic block like here so I know I can assume aspie as we go into this look when we are here assume the invariant holds after the basic block which I know will be executed together I can show that it holds and then for every basic block you just go well in this basic block it's not modified so if hold before then it holds after this the basic blocks appear if it gets modified before if it's it doesn't get modified so it still holds right so it's sort of like you instead of showing that the invariance hold over each function you do it over the basic block and you give them a name or something and if for some reason this was down here one of the updates were down here then that's a good reason to move it up so that they're in the same place because that will make you reason it's a lot harder to reason about it if they're in the different basic blocks because then you have to think about everything that happens between there but if you co-locate them then it's a lot easier okay I do want to you you need I mean technically you could say like you needed to hold from if it holds in the beginning of the transaction holds at the end of the transaction but I mean maybe they invite sorry maybe the environment breaks uh between two blocks but your environment holds for the whole function yeah how do you recommend dealing with that it's just much Harrier proof to make like it's just like if you really need to do like consider if you really need to do that if you really need to do it that way then you do need to treat the entire thing as one block and reason about all the possible paths between uh I'm a little short on time uh if I want to get through this so we do have a minute 10 minutes of questions at the end right uh so if there's something that just one quick question if you have like a that you generate and you increase one by one um this ID will eventually overflow and you can you cannot prove that it will never overflow but it will require millions of transactions so in practice the you you should not you you can prove it but it will be never reachable uh so what is what is your view on this you state your assumptions you make the assumption that there will never be two to the power 256 uh transactions on the ethereum blockchain and you move on with your day that's it all right it's like the the counter in open sampling contracts can be unchecked on its increment because it will never update it will never overflow if you know what I'm talking about if you don't then doesn't matter um so I I just need to move on uh so if it's if you're having a lot of trouble look at the environment that's giving you trouble pick one function uh look at all the relevant variables and try to group them uh you may have to create a few different paths uh use helper functions like you know this one's really good the they had the burn shares and issue shares I think that might have been in our recommendations like well these things will have to be updated together let's make sure they're updated in a single place uh where all the relevant things to burning shares happen together right don't do it all in you know all over the code if you can avoid it um remember this is what you need to show the invariant holds at construction time and it's not initialization and if the invariant holds at the beginning of a basic block it holds at the end of the basic block prove that for all the blocks then the variant holds anyone who's likes discrete math this is an induction proof um we're security Auditors we have slightly different priorities sometimes from developers so like we kind of security is the most important thing simplicity is the second most important thing it can depend but like the thing is simplicity so tied into security that we really care about Simplicity and we'd rather have you skip a neat bit of functionality if it just makes things too complex and then you know save that for version two or something or an extension and optimizations are the least important thing I know that doesn't resonate with everyone but uh if these things are so much more important to you than uh keeping things simple and having make it being easy to reason about security what you can do again it's just it's a lot of work but then again uh you should probably spend you know 10 times more time on securing your smart contract code than you spend on writing it uh so it might be worth it you can start with simple functions and prove that they're sort of like the de-optimization thing start for something simple prove that it's correct then start doing incremental optimizations and prove at every step that your proof still holds right and you end up with slightly more complex proof but you'll end up with a proof nonetheless saying that your invariant still holds over you're more optimized um optimize code um do you want to talk about invariances test targets uh we like to use Foundry uh uh you can take your invariance and just create a bunch of tests to just test those as properties like you uh you take the variant we had here and you because there you go uh and you run a test uh that just does a bunch of different operations and it interacts with your protocol in a bunch of different ways and at the end it checks your property that's pretty straightforward a really cool thing you can do is if you could instrument your testing to just you know at the end of every test you're running check your invariant like make sure your advantages always holds everywhere uh it can be hairier there's things I'm going to show you one trick to do it it's not it's not the most elegant way but it's the most simplest that will get you going quickly here's a dead simple idea if we take the contract we just had uh and we just wrap it so we take all the functions that affect user accounts so we make sure we keep track of all the users we have so we can do the sum overall to balance this thing uh and then we just whenever there's an interaction we make sure we add that user to the set then we do the regular update and then at the end of every function we check our invariance um and we do this for all the Contra or all the relevant functions in the contract and checking the invariance is just checking well you know the ones we have this one's called A2 uh so checking A2 is just doing this thing we're summing over all the balances and then we make sure that matches the total shares so now you're checking your invariant at the like in each and every uh interaction you're doing with your contract uh again I mean I'm sure a bunch of You Are cool hackers and you could do this with uh if you get the name of the Foundry op code but you know you can update the the evm code of the contract in place to do this in a cooler way and in a more robust way but this will get you going pretty quickly um so yeah the basically your job is to update ghost variables the variables that you have in storage you can always check your ghost variables you need to keep track up with a wrapper this might also convince you that some of your ghost variables should be actual variables maybe it's maybe it makes sense to keep track of a set of all your users in your code I don't know um it's a trade-off you have to make uh and finally I just want to mention you can also use this for monitoring I think someone mentioned it um there's two approaches to monitoring um roughly one of them is just doing it on chain like make sure check your if you find some important variants that you can check on chain you can put them in requires in a search clause and then if something if for some reason at the end of a transaction they are violated you bail you stop the protocol um that's good because you can halt the contract before bad things happen you can't no one's going to be able to mess with your uh toll shares and like steal a bunch of yield that way uh it is pretty scary though because it can can cause liveness bugs you don't want your contract to end up in a state where it can never proceed and now all the funds are stuck uh so you know talk to your auditor it's like talking to your doctor like you know we're we're here have them on speed dial ask like I'm not sure about this but I have this little thing in my code and like they might say that's fine or they might say come right in drop everything you're doing and let's talk about this uh and you know obviously gas costs you have to put the gas cost on all the users or you can do off-shade monitoring a poor man's monitor uh we'll get to that but uh you can you know deploy it later even if you already have a protocol up and running you can still deploy um some off-chain monitoring uh he can't cause liveness bugs obviously uh what do you do if you detect a failure maybe it's all regulates you're very got violated someone stole all your money um and it may not prevent tax that you know happen in a single block so when uses flashbots it violates some invariants and now you know the damage is already done before your Sentinels can come in and halt your protocol a performance monitor is actually just using your Foundry fussing test and running them constantly against on-chain state and you know pinging a Dev if for some reason they get violated um after that well well first I should mention what can you do next well you can keep planning invariants you can add more uh document them share them with your Auditors share them with your um with your users you probably have a bunch of white hat users hopefully that can if you make bold statements they will take that as a challenge to go and try to find violations of them um and the good thing is you can kind of keep doing this long after deployment finding uh finding good invariance making that we will improve your documentation uh and they will improve your monitoring so you know security doesn't end when you deploy uh another thing I want to mention is we like symbolic execution with like formal verification uh so we're working pretty hard on making sure that if you write your invariance in Foundry and you fuss over them you can try as many million inputs as you want uh we also have a tool that will let you run it symbolically so try it on all inputs uh there's a bunch of trade-offs you should do fussing first because it's fast uh you can write your test using solidity same thing because you know we used to found your chest anyway um you're limited to what you can express in solidity whereas with our KVM Foundry implementation you can kind of use all of matching logic uh not all a matching line but a lot of matching logic it's a nice logic uh fasting is extremely fast this symbolic execution is pretty slow it's getting faster my CTO is looking at me I might call it this orange but it's turning more and more yellow doesn't require any human intervention um this often requires human intervention because a symbolic execution or engine or approver might not be able to complete it might not be able to say yes I proved it or no I found a counter example it might say ah C3 can't handle this query so you're going to have to help me out here and that can require some expert human intervention symbolic inputs are 100 and 100 input coverage you're testing every possible value uh so if you prove your invariance with uh KVM and Foundry then you've they're proven uh this was contentions yesterday the idea of false poses and false negatives I think it's unfair to say that you have false negatives with fussing because well it's not like Foundry comes or Echidna comes and says like oh actually we didn't find anything so therefore it's safe but the problem is sometimes that's what developers or users think so uh that's why you can think of that as a false positive you can't really have uh or a false negative you can't really have a false negative or false positive with symbolic execution either we prove that this doesn't hold or we prove that it holds either your invariance correct or it's not or you get stuck and you need a human and then you need to do some things that are easy to try hard to master easy to try means that you can get in on our Alpha release and do it hard to master means you might have to call us and we'll help you and we're happy to help you along um here's what can look like you know Forge test will run the standard 256 tests for you you can make turn this up to as many million as you want uh with the KVM Foundry uh this is a example from rolls talk yesterday uh KVM was able to prove that a specific invariant just held that was written initially as a Foundry test again go and look at his video if you want to check that out uh I would be remiss if I didn't mention that we are starting a research branch and runtime verification so if anyone's research minded or just curious please go to research.runtime verification.com we have a bunch of research challenges there if any one of them look interesting just reach out to us we'll see how we can help you along or if we're happy to hear your ideas on any of the research challenges I think that's what I got we do have 10 minutes for questions I was promised so I've seen a few hands again if someone wants to like try this right now like pull up some of your code try to find some few a few invariants I'll just do a little train out of here and we'll find a table somewhere and sit down and work for as long as we have to uh if you go home and you do this later write me at Twitter or at runtime verification.com you can always reach out to us at Discord we're happy to help uh this is past talk the video should come soon so check that out as well it's important to what what you'll be doing because eventually your environment will contain a division and then all bets are off and you need to know what you're doing cool um yeah yeah so the idea that you can do pen and paper proofs as a really you know robust method is new to me I guess my question is it might be a bit vague but like how do you think of the risk of let's say I take that seriously and I write my proof I convince my team member how do you think about the risk that we've still missed something is it common in your experience if like a client takes it seriously that they they kind of mess that process up um the good thing is that if they do then I mean will if if you write in Marines and like hey we have a proof we will also check the proof like I mean we're part of the audit yeah we're the ACM Journal you're submitting to or like you know we'll make sure that you're reasoning is out uh because like oh this is a good invariant we trust you guys but let's double check right um ask for pen and paper versus so this is still formal verification someone says like someone said like oh it's not formal verification because it's a pen and paper now it is formal verification it's not mechanized for my verification he wouldn't take a math paper and say oh it's not a formal proof because it's in English like it's still formal proof it's about how you reason and how good you are at formal reasoning um it's about how many nines you need right I mean it's a Swiss Cheese model um you can't you may not ever catch everything that you want to catch the world is chaotic but if you start with your pen and paper proofs that will get you a very long way and in the end like a few of these things might be like like the environment I showed you I wouldn't even necessarily want to mechanize that because like ah there's more interesting things to mechanize but here's the pen and paper proof that's fairly convincing and we'll make a little note somewhere that if anything happens that updates any of these variables we need to double check it right it's sort of like a an index for you to work with um Whoever has the mic just go okay so um obviously like part of the limitations of of defining invariance would be like if it if it's a house and the invariant there's no Thief can go through the front door or come out if he somehow got in but let's say that's the invariant right so obviously the limitation would be that um you know we sort of like didn't define that oh there's also a window you know or are there you know there were roof tiles or there was something to that effect um now obviously you didn't make the statement that that it's like an absolute thing but how do we work towards like um that kind of like uh comprehensive or exhaustive type of um invariant definition well I so I mean to to work with your analogy what you do is something like instead of saying the thief can't go through the front door it's like what do you care about the thief can't get in the house and then you have to say what are all the ways to get in there like you know is there a whole like what can happen is there a hole in the walls and where is there a window can you get in from the roof uh it's sort of the same thing here it's like one thing we do a lot is like a really good to start an audit with is where are all the places where any token transfers happen those are a great place to work backwards from because you know and then there's always inline assembly but let's let's forget that for now um but just look at all the places where tokens or ether change his hands and then look then you can start looking like well if we cover all the paths that can reach those locations and those are all safe then we're safe and then you know of course like you know what what if the token can do weird things if it like in block users or something something you need to keep in mind but um yeah that that's sort of the approach right like find like well take the floor of the house as the thing that this thief can never reach and then like exhaustively enumerate all the ways someone can reach the floor of your house I guess yeah yeah exactly so I mean like a lot of these things like well you know the dev the devs can upgrade the contract and take all your money like that's that's an assumption sorry like but borrowing that we're doing reasoning who asked Mike I have Mike um so in the example you showed where you talked about basic blocks my reaction was like and and reasoning about invariance before and after they're not as it's written they're not necessarily accessible to us to to like it's not maybe we instrument it but yeah I can't really get in there easily with the tools I have in my hand I by hand like Forge and say okay this is an invariant that holds over this if statement or like the Block in there um so so I'm curious like you know how if there is a way I'm missing and then this this also maybe part two is like does verifiable code look different than uh like readable code and testable code because if I'm to I imagine pulling this out into a lot of helper functions that's not my preference in this case so I'd like to hear your thoughts on that um well so first of all I mean like The Foundry comes with some limitations that you don't have like you know and I'm very very very mature language like Java there's all kinds of Reflections and like python like there's just nothing you can't do whereas you know you this function is internal so we can't can't do a really unit test with Foundry um so which is also a good reason to do this kind of reasoning because like instead of having to go through all your code uh with a tool you can just go and say like well I know solidity well enough to say that well the only way this storage lot can be modified is either in inline assembly or somewhere where this is exactly named in this way uh in this specific contract I don't think anyone's made a solidity no there's no yeah there's no other way to round it right now so um so I mean that that's why this reasoning is pretty good like you can actually especially right now with the state of solidity you can track tackle these things on pen and paper quite easily that you can't really do with Foundry um ask for the readable or I'd say that I say they all come together pretty well uh in the sense that you don't have to have small helper functions all over but like like I I again the data structure example right like if you think of your Java hash map as a single entity make sure that like it might be a good idea to have like you know the updates or deletions from from that just be co-located and might as well probably be a function right uh so and it's not about going crazy I wouldn't say like break these out too in in a helper function like we have Burns and we have the issues like that's fine it's only two places um verifiable code and testable well testable cold especially now if you're using Foundry uh testable code kind of requires you to put everything public which you know there's a bunch of costs that you might not want to pay um but verifiable code I'd say now it just really relies on this that you have all the relevant changes to things that have a clear relationship are co-located uh whether that's in functions or anywhere else and you know right right a bunch of inline comments that say like you know how your respect in this environment and so on uh I'd say that the the enemy of this is maintainable code that's why it's like the good thing here is like well things we don't maintain that much code here like we deployed and then it's deployed um so you don't have to worry that much about like well what if we change the code and then we forget to update the code comments because like we're kind of relying on the idea that things get Frozen here that's one reason that formal methods doesn't haven't really had a breakthrough in you know web 2 or standard back-end development because like well everything has to be maintainable if you keep if you have to redo your proofs all the time then you know it might not be worth it so the fact the code is Frozen is actually pretty important here set answer it okay I actually have a follow-on question to that uh right here in the back hi yeah um you you said that you should be doing these proofs only during the uh or when the code is frozen because you can you don't have to be redoing your changes over and over right which is right like you don't have to be doing this work but it's you have something to mechanize the invariant checking you can do it you know not only with changes but you can also get valuable feedback during the development cycle right so and that has other benefits too that you sort of alluded to in your symbolic execution is that you don't have to rely on the fact that you have to manually look at all the places where uh storage is updated you don't have to worry about the fact that you made a delegate call into a library and oops actually that Library had an inline assembly blocked as a secretly uh changing that all gets sort of uh handled for you automatically during mechanized uh proving so um I I just I I guess I quibble with what you've said there that you should only be doing your invariant proofs you should probably be doing it much more frequently yeah I mean I'm I'm more talking from experience like it's it's like I would say like start writing in variants like as soon as you hit your docs like you know you're doing your design start writing invariants keep them up to date in the code realistically that doesn't happen as much as I'd like if you want to be a unicorn and do that I love you but like I know most people here won't do it um that that's sort of what I was I was getting at and especially like yeah if you do with your instrumented tests then you know go right ahead it's almost like from experience sometimes the signs change enough during the process that maybe teams don't want to invest all that time in because these instrumental tests can take a while to do as well if you want to have some examples go to that alchemics uh V2 Foundry repo it's called that because we're working on uh setting up Foundry tests sort of like this but like even more powerful and extensive uh so you can see some of the work that goes into doing like full Foundry uh checking of a bunch of different invariants but the all the variants came from an audit where we found them and uh wrote like formal English proofs of them Lucas over there actually did than that so it's uh yes this paper and a bunch of other things in our Publications are actually really good resources if you just want more examples of this uh this entire section where we just go over like 10 different invariants and give four fairly formal proofs or hand waves uh about why each of them holds so it's a great place to go and see more examples uh there's also links if you go again to the beginning in the the lecture notes or slightly more extensive there should be links in there uh yeah a kind of a follow-up on that it strikes me that some of this could be related to behavior driven development uh I don't know if I haven't really seen this in the solidity web 3 world but you know think of like a tdd loop but then zoom out so instead of writing a failing unit test red green refactor Loop you're doing a red green refactor loop at like uh app or protocol functionality level so instead of like the standard arrange act assert way that we might set up a unit test in Behavior driven development they call it given when then so given some background when some action gets taken then I expect these assertions at the end and I think it could fit well with like threat modeling like actors assets actions I was just curious if you've seen that because when we're doing bdd and I'm trying it out on a slitty project you got to keep those green and so I wonder if there's a way to kind of Drive some of your development within variants that you use in the bdd world you use cucumber which is like um runnable English language so I I thought that might be a pattern I didn't know if you've seen that no I haven't but I want to talk to you that's right that sounds great I want to check that out cool hello I just wanted to make one clarification that the inductive proof at the function level is what you need to perform to get the invariant to hold but the basic block level is easier that's why it's presented as an alternative so we can show it at the basic block level then it holds at the function level not necessarily the other way around so if you can't show it at the basic block level try it at the function level still might hold so does it does it work with Viper they gave him I guess it's language agnostic I think so KVM doesn't actually work over Viper uh so the thing is like well the thing we're developed now works over Foundry and Foundry works over solidity uh but I mean there's nothing stopping you from setting up your own little pipeline where you build your contracts in Viper test them in solidity with Foundry or just you know hack on Foundry to make it include a Viper compiler and then do the same things because you know it it's all evm at the bottom anyway so uh yeah I'm sure I'm sure someone's going to hack together a Viper extension of Foundry eventually just curious if you had any examples of mechanized invariant tests that you like to look to or that I could look over just I still haven't wrapped my mental like my head around the mental framework for parsing out like what invariance should look like uh yeah maybe like a mix of English uh like pen and paper invariance and code might be might be helpful yeah I'd say check out the the alchemics paper for a good like run through of um so there's a section at the beginning that lists some variants in the section at the end that proves the invariance uh and in between are just all like the you know um findings reports um with mechanized proofs I don't we I mean we have a bunch of like tested come talk to us it depends on like your background and where you want to start we have just a bunch of different resources depending on what you're interested in your starting level just to make make or die multi-collateral dye proofs if you want like well here's a full uh formal treatment which have some English language stuff but it's also like you know fully formally uh specified at the function level all of it and that's all verified um that's a good example but you know hang around we'll we'll clear out oh yeah yeah anyone in a oh uh anyone in a runtime verification t-shirt is there an old Workshop after this Okay Okay cool so yeah we can't hang around here no okay fair enough okay thanks everyone [Applause] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign foreign [Music] [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] foreign [Music] foreign [Music] [Music] [Music] thank you [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] foreign [Music] foreign [Music] remind me [Music] I need for you [Music] [Music] thank you [Music] [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] foreign [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] thank you [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] thank you [Music] foreign [Music] thank you foreign [Music] [Music] thank you [Music] [Music] thank you [Music] [Music] foreign [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] thank you [Music] [Music] foreign [Music] [Music] [Music] [Music] foreign foreign [Music] foreign [Music] thank you foreign [Music] foreign [Music] [Music] foreign [Music] [Music] foreign foreign [Music] hahaha [Music] all right [Music] thank you [Music] [Music] foreign [Music] [Music] foreign [Music] foreign [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] foreign foreign foreign [Music] [Music] foreign foreign thank you foreign [Music] [Music] thank you [Music] foreign foreign foreign [Music] foreign foreign [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] thank you [Music] [Music] [Music] no no right good afternoon everyone let's get started so this is a workshop will be talking about using agent-based models for analyzing D5 protocol and the examples will be we'll be using is through the Vega Market simulator we do a quick introduction and then I'm going to jump to a slide which will show you where to go on GitHub so that you can hack along I really assuming it's a workshop right so I'm expecting everyone to have a computer in front of them and start hacking but if not then hey you know you can just stay along for the chit chat so my name is David I've been with Vega for the last four years I mainly look after the kind of Financial Risk and economic design game theory analysis and together with me is Tom who's coming from traditional Finance he's a Quant with Vega help working on the working on the research team and one of the speakers Mark isn't isn't here but he's done a lot of the a lot of the RL stuff so he's the main brain behind that so I'm going to jump to I think here so yeah we'll go back to introducing what Vega is in a minute but given I don't know how fast the Wi-Fi is going to be in here um just running through a few first step setup steps that we can get going with while we're presenting uh for anyone who hasn't noticed there is Wi-Fi specifically for the workshops uh called Devcon workshop and the password is was it built build it 22. so give that a go if the Wi-Fi is being slow so this uh repo at the top here Vega Market Sim should be open if you go over there clone that that's your your first step you're also going to need go uh 19 I think it's necessary python ideally 310 39 might work and poetry just because it's probably the better uh package manager probably there's a requirements.txt if you just need that as well we can go through actually setting it up in a bit uh then if you want to be able to view our sort of front-end console you'll also need some some UI framework yarn and NVM for node management and if you want to try some RL at the end then Pi torch is a good starting point to download so broadly if everyone can make a note of that URL before we switch back and then we will start on actually presenting everyone good cool we'll have an actual break for setting everything up in a bit but yeah so we're back to the introduction but it's it's sort of a workshop and if you need help the person who isn't speaking can actually come and help you with your you know whatever it is you're trying to do within this framework and if you're not having luck then we can see if one of us will have better luck and there are not so many of us and we've got I think two hours so we've got plenty of time to actually get everyone going and hacking so in terms of what we'll cover we'll quickly introduce Vega protocol then I will try to make sense for agent-based simulations in in the context of analyzing D5 protocols and then you know we will introduce what you already started setting up which is the Vega markets in which is relying on something called vegan all chain will um we'll explain what that is and then once we have that we will sort of explain how to use the market same how it's set up you know what what environment is there uh what agents are there and what you can do and at the end we're gonna show you how you can you know train reinforcement learning agents on top of this and why you might possibly want to do that so that's that's the plan so we started what is Vega protocol so Vega protocol is a layer one blockchain for derivatives trading it's uh set up from the ground up for trading margin products and the price Discovery is either through limit order books or through auctions uh where do the auctions come in typically when you're setting up a new market you don't know what the price is so initially there it's running in an auction the auction determines what the opening price should be and then if everything goes well it's it's running as a limit order book if there are big price moves according to the risk model it might switch to a protective auction to make sure that the big price move is really you know what's happening economically it's not someone with a fat finger you know for getting a zero on an order and or adding a zero on an order and causing causing Mayhem uh anyone can create a market what it means is you submit a market proposal to the blockchain and then it goes through the governance and it's and it's voted on so that's what's meant by permissionless here and what kind of markets at the moment it's it's a supports cash settled futures there is roadmap for supporting any kind of derivative through a derivative payoff language which which will be probably basm based but that's that's just on the roadmap for now it's it's cash settled Futures and so basically if you can find an oracle for the market then you can then you can propose a market and it will run um it's got a bespoke liquidity provision mechanism because it's it's not based on now ever so popular constant product markets but it's based on a limit order book so you have to do something slightly different to bond liquidity to element order book so it does that and at the moment the the assets that have value that you would use a settlement asset on Vega they're bridged from ethereum though in the future there will be other Bridges but uh ethereum bridge is there you can on Vega before proposing a market if you wanted to settle in some other asset that's not there yet you can propose the asset the asset load and be bridged from ethereum so you can imagine that there will be usdc tether ethereum whatever people want to is that if you're designing something like a trading platform some of the goals that you might have in the design really sort of run at Cross purposes between a general purpose blockchain and uh you know what do you what you would ideally like for a trading platform so the things that I picked out are you know a general purpose blockchain you you need something like a gas mechanism for people to pay for the cost that whatever transaction the chain is processing for them you know the cost has to be covered by the gas and if you're trading this is really you know really sub-optimal in in the sense that there are transactions that you want to include and you don't want to penalize them by charging for them you know if someone wants to post a limit order that's good they're providing liquidity you really don't want to discourage them if someone cancels an order that's good they're providing price information you probably don't want to discourage that either so you know that's in products they're effectively promises right if someone doesn't look like they're going to keep their promise you want to close them out immediately ideally you don't want it farmed out to some Bots that are running somewhere because then you're opening yourself up to Mev and on a whole whole host of other problems so you can have Atomic closeouts again for margin you want to do potentially quiet Maps heavy risk of computations and you don't want to be paying for gas for those on a general purpose blockchain you can try to do Fair ordering or as Fair as your definition of fairness allows Fair ordering of orders and you know you you have one specific application in mind so you can optimize for latency for instance rather than optimizing for you know data throughput so you're not fighting at Cross purposes with other applications that would be running on top of a general purpose blockchain which would have other design goals in mind and one one thing that I didn't put on the slide but that's also a very good reason is that sharding is actually much easier in the context of trading because something happening on this market and something happening on that market can be completely separate apart from Talking together through a treasury chart so you have a very simple use case in the sense of what needs to know about what you can design charting relatively easily okay so that was that was Vega Now sort of more General case for doing just trying to get rid of the mouse more General case for doing agent-based simulations in in the context of D5 so you know we've all seen various D5 protocols and uh we've seen you know when things go well it's great and then when things don't go well it's called a hack or an exploit but quite often it's not an exploit of a code bug though that can happen it's it's simply an exploit of of the mechanism design you know you you go you want to design a protocol you start you you think what incentives should I create so that I've got the desired behaviors and you do it in isolation you really try to think it through right you you take the smartest people you can find there are you know dozens hundreds of incredibly smart people in defy they do their best they do what makes sense they think it through as much as they can but uh it's difficult it's really really difficult to think through all the consequences especially if you have one incentive mechanism here another here design may be in isolation and now they're interacting right yeah oh then there is a name of Claus's fairness pre-protocol for transaction ordering he can tell you all about that he's there the the you can just go and show him no yeah yeah so you you put two incentives mechanisms together if they were designed in isolation it's it's not you know completely clear that the combined effect is actually what you desired and then of course D5 is all about composability they love that but once you introduce composability you're introducing another level disproof stuff you set up a hypothesis which is testable you will never prove that it's true but you can set it up so that you run the experiments that should disprove it if you tried your best and you've not disproved it then you'll then you let the hypothesis stand till they'll proven otherwise and if you're wondering what this is you've probably most of you have probably seen Game of Life it's it's the idea that you know you you can take a bunch of very very simple rules and they can lead to very very complex behavior and sort of agent-based models are one thing that will allow you to analyze this complex Behavior so yeah uh definition of what an agent-based model is from from Wikipedia and everyone's favorite agent and quite often you want a lot of Agents or a lot of similar agents so uh agent Smith is good I've used this I've used this picture actually twice I I was when you talk about civil attacks I like to talk I like to use that picture but here it's not about civil attacks here they're good agents who are stressing your protocol so in terms of you know what type of Agents you would find in agent-based modeling there are the the simplest ones are what I call zero intelligence which is a bit insulting but uh what it what it means is that they're not learning and they're not optimizing you just say this is the state of the world and if this is the state then they're gonna do this and if the state is something different they're going to do that so you know they're agents that have hard-coded actions and that's what they do they're the simplest to set up they're the simplest to understand and of course if you hard-coded optimal actions then they're perfectly good if you don't then they're only as useful as the actions that you've that you've hard coded and so the next level you you can think okay you know each agent I'm not going to hard code actions a priori but I'm gonna tell the agent exactly what the environment what the rules of the environment that they're in are exactly what the rewards are for interacting with this environment according to the rules and I'm going to optimize in other words I'm going to solve for the optimal actions and that's something that comes under you know the name either mark of decision processes if you're doing discrete time steps or control theory stochastic control theory it's it's a reasonably well established field and you know there are a bunch of algorithms I could spend hours talking about algorithms that they have for solving problems there is there are a few problems that you can actually solve by hand one of the most popular is the linear quadratic regulator which you know um together with the Kalman filter was one of the great successes of of signs of the 60s you know Blended on the moon and all that so you know good stuff and then sort of the the fancy new stuff is is the reinforcement learning where you actually don't have to tell the agents what their environment is they just repeatedly interact with it observe the outcomes of their actions observe the rewards and update their behaviors so these are these are the type of Agents you might want to run you know on top of your environment to see what is happening and of course what is what is appropriate and what you need will very much depend on what you're trying to simulate what you're trying to test but basically this is your zoo and then the typical setup for for these things sort of you you understand you you have the agent agent takes action it changes the environment in the sense that it moves it from the current state to the next state so sort of new state comes out a reward comes out and the agent takes in the reward and the state and again chooses the next action and and you repeat and of course you can have you know these setups that you repeat sort of Forever Until Infinity maybe with some discounting or maybe you assume that there is some steady state or there will be a terminal time when the Game Stops or whatever problem finishes then you evaluate how everything then whether it will end well or badly and then one thing I wanted to point out here is because it will be relevant if you're looking at any of the code that we're providing is that the agent as it learning it's sort of it's in a state it takes an action collects the reward sees the new state and decides on the new action and if you record this that that's sort of all the data that you need to train the agent sort of offline separate from the environment if you collect these sarsa sequences then you can train the agent separate from your from your environment okay so that's that's not so important now it will be more useful information later right and I think I'll hand over to Tom now who will evoke you through the you know the Vega Market Sim it's a workshop so if you have questions I think the gentleman there already said yeah you're setting a perfect example keep asking questions oh do we need a microphone thank you hello hello um do state space approaches have any role to play in parameter optimization like a control control theory based approach for optimizing a Vector yeah so so you would set up you know your environment which in you know in in the case which we will show would be you know the whole Market how the trades happen how the orders are matched and then you run that whole thing through the simulation see what happens and then you want my want to do the optimization on top of that right but that's a agent-based approach right there's you could you could use a uh like a analytical solution so that's let's call it an agent-based approach a numerical approach but a control theory approach yes if you could if you could if you have an environment which is sort of sufficiently simple that you can really write down you know all the state transition equations then you can go and solve it through you know either pen and paper if you're supremely lucky or from through something like I mean you can policy iteration value iteration something like Matlab right like well that's actually numerical but you could use um software obviously to yes yeah and there is software out there yeah and does this work for creating bots trading Bots yeah I mean like the whole framework you have here yeah so we're I mean Tom will talk through that so so I'll jump a bit but basically you know the environment on its own if it's just the market you know it's an empty Market it hasn't even gone out of the opening auction if no one proposes anything so so you automatically need bots so we will talk a bit about the Bots that are provided as part of the environment and of course you can write your own Bots uh that can do you know well whatever they want to do we've got uh we've got some basic Market making Bots we've got some basic you know price taking Bots we've got some basic um momentum Traders but Tom will talk more about that so I'll hand over to him otherwise the result was also everything important how to figure out this reward basic reinforcement learning yeah that is a difficult I mean in reinforcement learning this is typically very difficult because when we're talking about is effectively an environment which gives you no rewards for any of the actions you're taking and that's sort of an infinite reward for finding the bug yeah and how this is declare it no I I don't think you will find bugs the agent might be might be happy to hear that uh yeah just a quick question so in this in this type of systems do you take the code from what you are testing for instance for the Vega protocol I just quickly check that it's it's all go code right okay so do you take this code and run it inside your simulation or do you create a model of that okay and do you think that that's that's scalable if you want to if you want to simulate thousands of millions of Agents because perhaps you need you need that or do you think it it should be more in some cases you need a model of what you are actually testing so so we're running the whole Vega stack again Tom will show that but you're absolutely right and in some situations especially if you want to do reinforcement learning having a simplified model on which you can train before you actually go into the full stack which will be inevitably slower than you would like because things are never as fast as you want would be useful but we don't have that at the moment we're learning on the whole thing that's why it's important that we we use an algorithm which collects the sarsa sequences and so then I can learn offline but we don't have model there are reinforcement learning techniques which sort of build up model from observations and you can do a lot of clever stuff but but I'm far from being an expert on that okay thank you so so one thing that I didn't say is one reason why D5 is so good for agent-based modeling is you know you can try and people have been talking about agent-based modeling in the in the real economy and economists would love to do that but they don't have the environment on which to execute it and in D5 we do have that because things are typically open source you know I can go and take the smart contract and run things through the smart contract I don't have to create the environment I just say okay I care about how this smart contract interacts with this one I take whatever ganache hard head I put it there I set it up as my environment and I pump thousands and thousands of simulations through that I can't do it in the real economy but here we can so it's awesome okay more questions that trades or kind of what are the reward metrics because I'm assuming they're not like bugs but more if I find my kind of outcomes so so for us it's a very problem problem specific so for example if we want to test you know what some of the network parameters should be we set up an environment and and then we look at things like you know if if I've got a rationally behaving Market maker and the parameter is X what is their return on Capital and I'm thinking well you know maybe this is letting them earn too much money it doesn't make sense but in terms of the reinforcement learning guys you you would typically look at Financial rewards and then yeah you can either run it thinking of it you know maybe you're thinking they're trading Perpetual so it's just forever or you're thinking that they're trading a settlement market and so the reward comes at settlement but it's it's very much something that you have to design for the specific purpose that you have in mind this is sort of more the toolbox and I'm gonna you know wrap up the questions hand over to Tom and then you can ask afterwards because I have a field that with the questions we're sort of jumping ahead a bit so I I want to hand over thank you okay so yeah just discussing the market simulator will get to doing so ourselves in a minute but first I think it's useful to go through and yeah to cover again slightly more technically some of the some of the questions how we are how we run these simulations um and how how we get interesting results out so the vegan market simulator broadly the way that um Vega itself is set up we run with a tenement consensus layer for those who don't know tenement is it's a cosmos based consensus the problem with that is that it's generally tied to our block time which is about a second so if you run the whole thing you can watch the market going second by second and you can interact with it but you can't run as the question in the back said thousands of scenarios run it through a year do all these things so what we do we strip that out we run what we call a null chain entirely on on one PC and this just broadly accepts any transactions it's sent it will it still checks they're valid it still runs through the whole Vega core logic but um just adds into a block allows you to control time forwarding so you can it'll just sit and do nothing until you tell it to run forwards or fill up a block and so you can inspect at any point in time for however long you want what's going on then on top of this once we've got that running we have in Python uh an API layer which lets you express your trading actions your agents behaviors in much more Market Primitives without having to worry about the fact that you're running on a blockchain occasionally it still Creeps in because that's the way the world but you can broadly talk about an agent trading on a market without having to worry about what Block it's in or whether it's been confirmed and this kind of thing once we've got that we then build out our scenarios and our tests so I'll cover possibly next slide exactly what a scenario is but we can with a range of composable Agents composable setups build out scenarios to investigate and test either certain parameters test that the market doesn't explode test this the core itself doesn't explode or if you just wanted to build an agent you can try and have a realistic market and throw yours in there how this all works is your python layer manages we've got two different kinds of interfaces at the moment a Vega service null which spins up this as I mentioned a service entirely on your machine or what we've recently created which is Vega service network and that allows you to connect to a running external network and run the same agents that you've just been running locally but on the real Network that's going on so that can be useful in some cases too it allows us for example on our test net we can run agents and simulations that other real people can interact with and see how that's working um we'll demo all that in a bit um so yeah back to setting things up and viewing I'll go through the viewing in a second but yeah yeah I was gonna gonna break here anyway so yeah so um we're back here I don't know how many people have managed to get to the end of this but I think we'll probably take a sort of 10 minute break to catch up anyone who has them we can wander around and see whether everyone will manage and then 10 15 minutes we can come back and continue with doing something more interesting with it if you think you've got it set up try and run these uh scopes at the bottom we can also tell you something more interesting to run if if you're stuck um I think I had a question yes so I can then more uh in a more real way basically test my uh my ideas it's actually it's something we're pretty much currently working on is being able to better snapshot an existing running chain and be able to totally restore from that where there is there's the capability currently to you can run your simulation and save that and rerun the same thing so you can have a an example that you run and then run your things after we don't currently have a way to pull from an existing Network okay thank you very much that people should be using in their protocol and I tend to tell them that they can more easily solve for tokenomics problems by including a market mechanism to optimize and let you know the market do those kinds of things like example uniswap V3 solves the hard problem of how to set the curve by allowing concentrated liquidity so my question is do you guys have an intuition for which kind of simulation like which kind of systems require a simulation and which kind don't oh good question I I guess I'd go back to as David was saying earlier it depends on how well you can if you can solve it mathematically that's probably always going to be optimal but when it reaches a certain point of complexity um yeah I don't know how you would do it without either an agent-based simulation or stochastic modeling all that kind of thing is there an upper limit to the kind of complexity that you can model in this because I'd imagine like in this example of using a market mechanism that adds a lot of additional complexity is that like would that be an issue in the Vega simulation in terms of complexity of the simulation yeah I mean it multiplies the number of agents in the in the system uh by like orders of magnitude if you have to use a market to um Source lots more participants ladies I guess is there is there an upper limit to the kind of complex system that the Vega Market simulation can handle uh well practically I guess there is enough limit we are the the system itself we're hoping will be able to scale to many thousands of people so that should also scale to to the number of Agents so I guess it's it's a a goal of both the Vega protocol itself and the market Sim thankfully have similar things because ultimately what we want to do is build a realistic market so if you can build as long as we can run a realistic Market on Vega protocol itself we should be able to do it in a simulation cool thank you guys sort of going back to the going back to the points that we were making I absolutely agree that if you uh if you're designing tokenomics or protocol novel then either you can prove that it works or you can use this agent-based simulation to sort of not prove that it works but show that it doesn't and go back to the drawing board yeah so in terms of training though there are two questions I I can have the environment sort of I can have some agents that are matter you know the agents take their actions quickly and get on with it but of course the moment you have more than one optimizing and learning agent then it's the whole you know Game Theory and and you know that they're probably and and then it's also very difficult to set up or very difficult you have to think carefully about how you set it up you know because is the is your is Agent a also trying to learn the optimal response of Agent B so that it can anticipate Etc and and then you know they can end up chasing themselves in circles and all sorts of weird and wonderful things can happen you know it's uh game game theory and NRL comes in and uh it's it's very problem specific but you can you can end up with situations that they don't learn where you can end up in situations then they take a lot longer to learn because there is more than one learning can I have a show of hands of the people who are actually trying to set it up on their computer okay okay okay so so we're we're sort of now is the time to take the break and we're going to have a have a look around who is completely stuck where should we where should we go first okay okay foreign and the other one is especially it's just foreign foreign American thank you oh yeah actually so much foreign is something like that's what it is foreign one time thank you is [Music] foreign [Music] [Music] is [Music] [Music] [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] as it is [Music] okay hello yes it's good Okay so I think a few people have it running at least uh we're gonna I'm gonna crack on and then we'll have another break in a minute for doing the next bit so we can keep going around for anyone who's who's stuck on this bit but I want to give more interesting things to do on top of that so a quick side once once the the null chain is up and running uh the micro SIM is up and running you see anyone who got it working would have seen something like on the right here uh which it is it's a printed output log of some stuff that's going on inside markets him exposes various apis for this but often you don't want to just have to manually call python apis for every single thing that you might want to experience so we've got a couple of useful portals portals on your data you can if you've set up the UI components as well change a flag this run with console equals true in generally wherever you happen to be running your Vega uh null chain that will bring up in a web browser the nice console that you see at the front there that is the same console that people use on Vega protocol itself so that has theoretically pretty much everything you need you can even trade manually through that as well if you want you can log in as your agents that you've set up uh we'll probably demo it a bit in a in a bit you also can is actually always launched if you take the logs there will be this graphql port and if you go there and you know graphql you can query the entire system with a fairly hopefully clear graphql queries there's on um what is it docs.vega.xyz there's a link in a bit the entire sort of structure of your graphql queries you want as well so for anyone who has good at running for more interesting scenario that's something you can try out running I'll leave it up um actually let me skip to the next thing this is what I'm going to talk through with this app so anyone can type it up so the components that Vega itself runs on a on a validated node that we're also going to be running locally that the Nile service spins up there are a few different ones we've got Vega which is the core process that's the um go blockchain client that does all of your transaction processing and outputs your States that is obviously it's a point in time proceeding thing so we also want the data node which is listens to external events output by the note core node itself and saves those into a postgres database and allows you to query all of that historic data and that's generally what you'll be using when you're querying any data from Vega additionally there's a couple of extra things there's a console as I mentioned previously that isn't necessary but it's very useful front-end there's also the Vega wallet the wallet is basically science transactions and ensures that any sort of custom signing we have some proof of work to stop spam attacks and stuff and that handles all that it's optional here because for the null chain what we actually do is Skip all of our validation so that it will blindly accept if you send a transaction and say it's from whoever it believes it's from whoever so you don't necessarily need that what it will spin up is if you spin up a console the two interact and a lot together so we use a full wallet for that so once we've got our our Market Sim set up how do we actually run our scenarios there set up as ideally Plug and Play components the overall thing we set up is we call a scenario that consists of an environment which is your background environment and your Vega setup so that will include things like how many steps you want to run your simulation for uh how your vager is set up and sort of what kind of logging you want that kind of background detail we then plug in the various agents some of whom will be setting prices they could be acting randomly and each of them will have something they do you'll see when you build one yourself in a bit something to do with startup often they'll force it themselves some tokens that kind of thing and then they've just got a function and each step we call that function and it does whatever it wants to do it pulls in data from the market it trades they do whatever so sorry environment you'll see that when we go in a minute to the agents themselves so yeah what's an agent it's it's fairly simple ultimately it's an initialized step where they generally force it sometimes they will um do things so we'll have an agent that sets up all the assets because you start with a blank blockchain you don't have any assets any markets that kind of thing so there's you may see if you look through a market manager who does all this setup for you then they'll have a function that's called every scenario step however many steps you do generally will sort of randomly shuffle them so that you're not always getting the first agent called First in any step and then a finalized method that most mostly you can ignore but uh often you'll want one to sort of settle the market and things so that's how you you want to set up your agent there's one more thing I mentioned earlier that sometimes the blockchain does have to bleed back in you'll see scattered throughout occasionally you'll wait for total catch-up function basically what this ensures is that you're getting a good view of the market currently you haven't um thrown way too many uh transactions at it everything's in sync that kind of thing so it just ensures that your more real world modeling rather than trying to ensure that you can get everything in one nanosecond through so um I'm gonna now talk through building one of these agents a really simple one it's just gonna do a bit of training I guess and then we'll break again and hopefully you can put together your own a bit I try and find where you're the exam is Okay so for anyone who has it set up we've got this run simple agent in focusing reinforcement run symbol agent pop it up on the screen after this to pass to these files and then in agents we have our simple agent so what run simple agent does is it sets up a scenario um I can discuss the actual arguments with people but which we call curve Market maker and that a h jump into working basically that contains an agent who ensures that there's a nice shape of the market and a few who just sort of randomly buy and sell so they're very dumb theoretically you should be able to agent which is what hopefully we're going to build that runs this simple agent that we've got together here so what I've put together is a few nice template functions that is without having to worry too much about any of this works you should be able to cut and paste these into our step function which is down here we've got the simple agent and you can see it's got the structure as described earlier we've got our initialize where it's finding the market finding the asset and minting itself an asset and then say submit a market order no check her positions foreign it is currently always going to buy so 50 50 chance of making money diverse very small foreign services the doctor foreign hey guys one thing if you're if you're fighting python there is a Docker container in the repo that you can use instead we use the docker for our CI pipeline so it should be good if you prefer docker that's all some Traders success foreign foreign foreign foreign foreign is already is is thank you something Okay so uh they're down to the relay just the hardcore Workshop participants you know you you're the ones who prevailed with us despite Python and its foibles and and the slow internet so I'm going to crack on if you're if you're coding keep coding uh you know uh if you have questions there will be time to ask questions and what we went to what we want to get to now is just to show you a little bit more of you know what the agents that that you have there you know the market maker Etc that you're interacting with little bit the ideas that they're based on and then move on to the reinforcement learning part so you know as part of the environment as Tom was saying if you just set it up there is nothing it's it's the empty Vega blockchain a civil as it would be when it launches live you know no assets no markets everything has to be created through governance and you know once the asset is created once the market is voted through which you know the python sort of expedites for you you will still have just an empty market right no liquidity on it nothing no activity so effectively the code provides various versions of of market makers that are based on some stochastic control problems that are pre-solved coded up and basically running and then some sort of hacks where you know the optimal solution of the stochastic control problem is used as a heuristic and then you put something on top of that and you know there are you can you can have a liquidity Trader you can have liquidity takers it just means they Place random Market buy and sell orders you can have informed Traders what does it mean well you just tell them what the price will be at the next step right you know maybe they they have inside information or whatever and um there are the momentum Traders through a library so you you can uh you can trade on on all the patterns that these chartist people have you know there are these vomiting camels and I don't know what else you know you you can code up agents that trade on that and so in you know when we go back to the type of Agents you know recently this will be something that gets uh kind of framed the conversation uh if by any chance you're triggered by any of the conversation that we're having today I do have an ally here that is trained in helping you so if you want to have a conversation lower if you want to raise your hand uh Louis is available to you for resource um if you want to use her feel free to give her a talk um so after these definitions we'll go ahead and talk about why dni is important in web 3 and then we'll go on to a couple of different activities okay so uh for definitions the first definition that we want to kind of think about is what is called privilege and privilege is understanding like a difference within power and understanding that there are some there's some ways where you naturally have power or privilege in a situation where another group will be will not have power and usually the group that has the power is the privileged group and the power of the group that does not have the power is called the oppressed group these forces and powers can be racially divided it can be General gender divided uh here at devcom the privilege groups are can you think of a privileged group to hear at dead con white man that might work okay what else would be a privileged group here at Devcon CIS guys okay VCS okay rich people okay what else would be a privilege good passports that would be one what else would be a privilege how about speaking English first language is a privilege right so you have all of this uh how about uh physical abilities going up and down the stairs like there are a lot of different ways if you're someone who might be like neuro atypical this is a very over stimulating place you might have privilege on that aspect so there's a lot of aspects of privileges are in play all the time around us um and so that's something that we might just want to be aware of is where your privilege is coming through after privilege we have bias does anyone know what bias is biases are like the way that are kind of almost unconscious privileges kind of show up per se so one of the things that I would definitely encourage you to do is there is a Harvard implicit bias test and like one of the ways it shows up within our workplace is like holidays right so everyone knows we get Christmas and New Year's off which is great but it's also religious bias because it's not just Christians that still have celebrations throughout the year um so you can take the Harvard implicit bias test to just kind of know where your biases are showing up and it's important to know where your biases show up so that when you create policies or procedures you're just aware of where your biases are it you try to like not if you're aware of your biases you're trying to not intentionally do harm and like being aware of your biases are those steps does anyone know where biases show up within the workplaces it shows up a lot but one of the biases that shows up a lot within web 2 and web3 is a college degrees or a undergrad background so that kind of also will have biases as well that's a bias for sure anyone else okay so when we talk about biases and privileges we start to realize that there is that definition between the power struggles that happen and that if you want to try to leverage and make it like level for everybody then you need to have an ally and an ally is someone who recognizes like hey there is a power indifference and I'm going to fight or I I want for that power to be removed so that you have a just ruled just as much as I do so that is what's called an ally and sometimes you'll hear like if you're around me I'll say like oh I need an ally which means like I need someone who's not like me who has that power to use their power in a way that benefits the situation and leverages the Injustice of power that I would have or the other person who without power has But A Step Beyond allies is actually called accomplice and that's what I would really want you all to be an accomplice is someone who like says yes you do have a power indifference and I'm going to level it and use all my power to level it as much as but I'm going to be in the trenches with you as we move this forward and so there's one aspect where you're recognizing like oh there is a power indifference and it's not really fair and I hope that works out for you and then there's a difference with hey there is a power indifference that's not really fair I'm going to do everything I can to justify that power indifference and that's where I hope we all become in this space so why is it important to in web3 these are like generally like over-the-top issues that we kind of think about one of the things is like 30 racially diverse teams perform 35 better than non-racially diverse teams so if you want to like easily have a better performing team have diversity on your team that's like one of the easiest way to do it again teens were women and men earn equally will actually have 40 41 higher revenue generated for the organization so if your org wants to easily have make more money have equally diverse teams from a gender perspective and you have a don't have a gender pay Gap would be another way to do it but the key reasons that these are important to web3 are the actual like ethos of web3 so when you think of like decentralization you think of identity you think of plurality although the time you talk about this from a technical perspective but this is also like a human perspective so when you think of decentralization like we always talk about notes having all these nodes decentralized but if we're starting to create like systems and procedures you really want to have decentralization of thought as well and so sometimes when we start to like think of decentralization of thought or how are people recentralized we kind of centralize as well here in your mind I want you to think of the like an event right and you're going to take five people to that event your your best five people right close your eyes think about it who are the five people you're going to take mentally think about them what are their ages where do they live where do they go to school what gender are they are you yourself centralizing around any one of those or do you have a diverse group around you making that decision so as you make a decision are you decentralizing itself and making a decision that has a voice of a lot of people are you making an assumption for people that are centralized along one of those verticals decentralization helps you have a lot of people thinking about the best way to attack a problem and the best way to move forward so the more that we can say like is this decentralized as far as we're making like people processes or is this decentralized from a web 3 perspective you also want different types of people building different types of things from different types of perspectives and that helps be a stronger Network you know um that to me also reminds me of plurality where we say like hey it's not trying to have one team make it it's like if it's we all get stronger when everyone gets stronger and that ethos applies towards uh different types of peoples as well so when you start to understand different web 3 ethos you can apply them to technology you can apply them to software but you can also apply them to people's and people's needs so even if it's difficult for you to understand like you know I won't I don't understand you know an Asian male's perspective but I can fight for them because I believe in plurality that might be a way to like fight for the end Underdog per se so we think about this I also think about this as being extremely important from an identity perspective in web 3 because in what three a lot of us are known through like our ens domains or like our lunch problem called domains or whatever you're using and our nfts so you could be interacting with a person's image in an ether name and not really know the person behind it per se and so you kind of just have to be realizing that that person might be going through a lot of different things but you don't even know what that person is going through so the more that you can Advocate holistically across the board for all different types of people the better it can be and when you start to like minimalize groups or think like oh there's not someone with an um an LGBT background within our group that so we don't have to worry about it that's might not may or may not be true because you don't know someone Beyond again a an NS nft in a domain so the more that we can create better policies for everyone the better off it can be or at least be accomplices to people the better off we will be Okay cool so here's the meat and potatoes of it we're going to talk about how can you be a hero and for me a hero is anybody who can like also be an accomplice um I thought I would be like really cute so you can get like a little superhero costume and then I forgot this was around Halloween and we were all sold out so we're gonna just be our own Heroes and that will be fine today okay so there's this concept of holding space and a holding space can be having a meaning group to hold space uh it can be holding an opportunity for certain groups to learn together holding space can be uh changing the panels on the boards or holding space on a board or a panel for someone that has is coming from that um oppressed group and holding space for them but it can also be opportunities like to hold space for a cohort to learn a technology it can be being intentional about like your public facing things having specific cohorts for learning so instead of having everybody thinking that everybody like enters the room the same way having specific targeted spaces for marginalized communities to learn that technology so if you're going to I'm going to use cheap fight because Chief ice here and let's say um you wanted to like have a workshop that was open to like building on lens protocol it would be just specifically for the chief Eye Community learn and realizing that that Community learns in a different way than you know the general population would be learning and creating a safe space for them so holding safe space is extremely important when you're dealing with marginalized groups because um it recognizes that just by stepping in the room there are power dynamics that are out in play all right environmental safety this one is a huge one this week for me uh here so one of the things that we have talked about in the past is like the importance of having a code of conduct and having procedures that actually follow those code of conducts the reason why code of conducts are important is because as people again we have biases and the code of conduct is supposed to be the you know the guidance and policies and procedures that are put in place to mitigate those biases or to be in place um regardless of the biases so it's the steps that we take in order for things to happen those steps mean nothing if we don't take them so having the code of conduct or seeing that there's a Code of Conduct is helpful but you need to also be enforcing code of conducts too being aware of microtrans microaggressions does anyone know what a microaggression is would it be helpful for me to explain it yes hello you want to explain it yeah Mike or go ahead like someone might at work compliment me that happens to women a lot even though it's like nice that's what people always think of you because you seem nice yeah okay cool yes yeah can you give me an example of what you would think foreign something that is good for them but you are not doing enough anyway yeah yeah so I think so I can only speak yes I think like so I can think of some of the microaggressions that I get and I think for someone for me I get like you speak so well which like seems like a compliment but really when you flip it around it's actually a microaggression because there's an assumption that I wouldn't speak well you know that there's a certain group of people that shouldn't speak well or that vernacular of being well spoken only resolves it or that even being well spoken is like says something about someone we're being not being well spoken doesn't and it's not really that same so just being aware of the different power dynamics is really helpful there but yeah there's a lot of different microaggressions the main thing that if I could like give your take away from environmental safety is when something is unsafe for someone a you believe them that it's unsafe and B you speak up especially if you're in the group that has the most power speaking up is the most important thing that you can do at that moment so okay so another step for being a hero is to remove uh reflect and retain and these are like removing unnecessarily uh biased language from job descriptions it helps this is a big thing in web 2 remote 3. um we moved based biased requirements for jobs such as grade level uh backgrounds um different types of location preferences can also be like that or any type of vague requirements so one of the ways that that had came up before was like we used to have a hiring bar for engineers and be like oh this person types slow and so they shouldn't get be onboarded but then we had someone else that typed slow and was onboarded so we were like well what is type slow like what what does that mean and how why does it even matter when you're trying to interview for engineering and so you have to be very defined with what are your actual requirements for the roles so this is a do you see anything here that would be considered uh exclusive or maybe a necessary Bay Area and I'll say background again this is for like a software engineering rule but does anyone want to share what they see would be an unnecessary barrier I'm sorry what degree degree in those backgrounds okay quite projected so they can choose whatever all right exactly anything else all right yeah uh yep let's see if there's anything else there I also think like building the right tools for the system I'm like well what's the right tools that seems very subjective as well okay so this is a little bit uh more of an inclusive statement they're trying to be a little bit more uh inclusive is there any type of inclusive statement there that stands out to you yep well I can compare to the other one uh if this is a job requirement section the header was what excites US versus you have it's more direct it's more clear awesome anyone else all right things like your qualities not your qualifications and like even though the last one like those qualifications are probably trying to just be a signal of these same quality oh you've worked on lots of interesting projects and whatnot well not everybody has that equipment like they could still arrive to the experience yeah hold on yeah okay random range of people for people to apply whereas the other one life was more specific in ways that might be discouraging and just maybe encourage exclusivity both of those examples even if I wasn't fit or either of them brand like attribution of like leaving positively like the lines of this brand versus the other one I would leave with a better I was wondering for future Council nice all right there was a mention about requirements and the list of requirements and I just wanted to like highlight one thing when it comes to requirements and how it's perceived by different types of gender specifically here when it comes to men men will see the list of requirements and meet 30 of them and apply for the job and women will see the list of requirements and apply for the job after they've met 70 of the requirements so there is a section of like self-weeding out that's happening when it comes to requirements if you're just listing requirements and not being inclusive right from the get-go so if you're thinking about like why don't we have more women like in our org you might want to start by looking at like how are you listing what what you want um to come into the org itself I feel like this is probably my favorite job posting because there's always those times when we've seen like companies that we're like yes I want to work there I could bring this we could do this but it doesn't fit into what they have listed into the into a job requirement and this is kind of like an Open Door of like well you tell us what you can bring to the table what you see missing in our org and how you are a good fit and I think that that happens to be a lot of a thing that will open up some doors okay now we get to reflect and reflect sometimes comes in um reporting it can come in roles it can become responsibilities and transparency so this actually was a web three statement that came out and it was like super applauded which is cool and it's like Yay the building more uh inclusive Financial systems and they're happy to report that there's 50 more or 50 50 parity at the location but I just didn't want I didn't know if any of y'all saw any problems with this foreign yes yeah easy yeah anyone else thank you I was like there's no Legend there's no like yeah uh yeah that was really all of it and I honestly I'm like um I don't think anyone's doing great so I'm like really not keen to give anyone a pat on the back but I really don't like people giving themselves a pad in the back so I think the the sense is like we can always go better um also by saying like yeah we're at 50 50 parody with women to men it really doesn't show like racial breakdown within the women so there still could be a lot of power dynamics are at play there too um so I had a lot of issues with this one specifically but I had done reporting back when I was at Square back in the day and so I'll share a little bit of our pitfalls that we had too uh I'm not a huge fan of reporting oddly enough because I feel like it makes people it reduces people back down to numbers and it doesn't really give us a whole uh perspective of the health of the organization itself um it also was really difficult when we followed the actual like guide on how to report your numbers it didn't deal with any type of inner intersectionality so if you were dealing with like racial reporting like you had to choose if you're a mixed person you had to choose one side like you had to choose one side of your identity and I just it wasn't very truly reflective um it's not super inclusive and it puts a lot of focus on like um diversity but it doesn't put a lot of focus on belonging or any type of things of that nature too and it only focuses on numbers and matrixes which is like the worst thing that you can do this it's not really reflective so other than that we tried to do like dni okrs or priorities and try to look at that from a holistic level of how can we kind of embrace it from a an okr level and what are going to be our priorities for that year and if you can do it that way you can keep the focus on removing barriers and that is like what you're tied to okay oddly enough I think this is the most important piece of Dee and I we always talk about recruitment recruitment recruitment but a lot of discussions never talked about why certain groups are leaving and that is usually the bigger question so yes you can attract as many different types of people to your org but if they're leaving right away or not having a great time I think it's more important for you to figure out why that is and what it might be like a toxic place to work or a place where you could make it people more comfortable so in the web three space I think like we do a great um we do a job of attracting people to there are orgs that do a great job of attracting people too but it's on to us to also figure out how we retain them and Empower them in the space to do the work that they want to do uh so the attention can be uh double checking salary levels it can be a transparency with salary compensation it can be looking at different policies and seeing if their policies actually uh Empower different Community groups if you have maternity leave and don't opportunity leave that could be a problem it can just look at looking at a lot of the uh policies you have in place if you have questions about policy actually low is really good she was on our people team at get clean and she was really good at trying to kind of go through a phone fine-tooth comb with our policies and seeing if it's as inclusive as it could be okay so now that we got through the r and heroes we're going to go with oh and thinking o is sinking outside of the box uh a lot of times within web3 or within web 2 even we talk about like oh there's no x y and z type of people in the org it's because we can't find them and then you're only looking within your own network and you're not going outside of the box uh go outside the box think of new Solutions ask different types of people recruit from non-traditional places non-traditional schools whatever it was not working for you before was not obviously working so try something new it's always fine find the people where they are there's lots of orgs that have you know women Engineers women in crypto women in stem black and stem black and crypto like through all these different orgs out there that are different groups marginalized or are empowered in and you can go engage with those groups fund those groups and work with those groups in order to not only again attract but also see like how can we retain the ones that we have here engaging with Partnerships there would be regularly great I know mag is in the room and I know that there are other people in the room that are also Leaders with a different dni groups so hearing their perspectives and engaging in them in a way that's not like how can we just Source Talent but also how can we like how can we get the knowledge that you have and and shared with us but also how can we fund the mission that you're doing is also extremely important so uh I will give you an opportunity to put your money where your mouth is and that is and get coins dni rounds this is a very easy way for you to fund different groups that are in this dni space within web three there's two ways you can do it one is to encourage them to apply to be a grantee in this space and then the other way is to fund them this if you don't realize that a lot of the people who do the work this in this space especially that are doing dni work the money for the work that they do comes out of their own pocketbooks and it is not it's like another layer of Oppression to tell the group that is being oppressed to fix their own problems with themselves rather than having the people who have the power fund the groups that are oppressed you know so if we can start to fund those groups it's going to be much more impactful in the space and funding in a way that's like not conditional so like not in the way that like I have a hundred thousand dollars I want you to go to the school and get all the women that are in that school bus saying hey what do you need and how can I write the check to best amplify your work that's the more important thing you have to believe that the people who are doing the work know the work that they need to do and the most biggest barrier that they have to that is really just the financial barrier that's been placed and usually not on them if you're asking a group of like male VCS and having them like wanting to fund women's work and then I have to explain to you why it's important for women to be doing this stuff and you're like I don't get it it's probably not me explaining it to you you might just not get it from your perspective so it's much more important to say hey what can I do to invest in y'all to do the work and then appreciate it ah other things you need to do uh if you're in a place where you can hire a dni team or a role do that you probably need it now and don't really even know it but they have a champion team have a person dealing with it um right now with as much money that we're falling around doing you know Swag and everything else you could probably like fund one person on your team to actually take this on and Empower them to make the changes that they need to make okay so I will give you an opportunity these are the ones that I know that you can actually find with but I also know it is not an inclusive list so if you know one that I should know you can do one of two things you can a tweet at me and say hey Gloria you should know this group and then I will continue to build up the list another thing is when we start to break out into teams I would love a team that would just take on the challenge of saying hey let's create a doc that has as many of these dni and web3 lists that we can and then we'll just share the doc after the session and that will be one of the takeaways from the session too um so yeah whatever ones that you know like please feel free to amplify them you can amplify themselves so you can do it that way too the s in arrows and the heroes is for shout out it's and it's for support the other way that you can shout out and actually kind of transits this whole power Dynamic is also to amplify someone who is not like you who does your work doing the work that they that use you because a lot of times the people who are are in the oppressed group their work does not go noticed so whatever you can do to amplify the work of the oppressed group is absolutely amazing too so if there are like people who are let's say uh working in layer ones let's just say no hold on people who work yeah let's just say the layer ones and there are like great women in layer ones that we should be following that have actual technical skills or that people should know about it let's just create a list of the 50 women working on layer ones that you should know about there's no reason we can't get all their Twitter names and send that out by the end of the conference today too like there's women doing work that should be Amplified but their voices aren't heard or they're drowned out because they're not in the the powered group so that's one of the other teams if you want to work on that and the second one I let you break up we can do that too all right so usually I say do the work do the work is the most important thing in this time do the work for these oppressed groups and not expect a pressed group to do the work for you and so during the remaining time that we have in this Workshop I'm going to give you the opportunity to do the work the do the work is going to come in multiple different ways if you want to do the work soloely you can take the privilege test the privilege test is a buzzfeed test on privilege it kind of is great to see like where you have privilege the different types of privileges things of that nature um then there's the Harvard implicit bias test you can do that work as well uh then the other thing that you can do is to double check your code of conduct at your work and see if there's actual procedures that are in place in order to move forward um you can look at your diverse roles and mods and see if there is diversity in your mods and your stewards in your board and recommend someone and the other one you can do is donate to a grant round we talked about Twitter amplification but the biggest thing that I would ask today like if I could have NS work on anything is there has been an issue for a group that's been oppressed and feeling very unsafe here at Devcon and I would really like a group of us to think of a way that we can keep people safe here for the remaining of the two days and what that would look like so if you want to try to think out ways that we can keep people safe for the remaining of the time at Devcon while we're here there's will be a group that will go ahead and brainstorm that um I don't mind if it's like hacker style or unconference style where we either have to like get a list or have a board or have some type of way to like report when people feel unsafe and have an actual follow-through but if that's something you want to tackle we can tackle that so um other than that too if you all think of anything else that you want to tackle that's fine uh unconference style means that there's white boards and there's pens and there's Post-its notes and if you want to like create a list of the 50 black people and web3 that you should follow you can do that if you want to do any type of things um if you have an idea I'm more than happy to hand over the mic you can pitch your idea and people can start working together on that Colton yeah you want to go ahead and stand up and Pitch it and it's been really fun to sort of ReDiscover this lens but I'm still wondering how to approach this type of conversation well um all right you want to move the let's move yourself to a table and then people can come to you anybody else want to pitch an idea of dni thing that they want to work on here okay codes and contacts and procedures in Dallas you want to take that table right there all right everyone else have an idea they want to explore because I'll throw some out all right all right let's say if you want to take the privilege test I'm going to put it back in the back corner right there I'll tell you how to get onto that site if you want to explore safety at Defcon I'm going to keep lowie here and you can hang out with Louie I trust you to explore that that would be good um if you would like to make a list uh or Twitter list of people we should follow of different types of dni background let's try do you mind being Latin m in the back all right let's see can we get a black at one that will give us a blackout list cash you want to take that one all right cool cash will keep that there uh women do you want to do a women list Maggie can I keep you in charge of the women to follow the list awesome neurodivergent or LGBT do we want any of those lists can we anybody want to do an organizational list okay organizational list awesome okay cool uh I will let you all spread to wherever you want to spread I'll give you this moment and then we'll get started on on any of the lists that you want to go thank you [Music] [Music] thank you [Music] [Music] foreign okay thank you foreign thank you [Music] [Music] [Music] foreign [Music] [Music] [Applause] [Applause] [Music] [Applause] [Applause] foreign [Applause] [Music] [Applause] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] thank you [Music] [Music] [Music] foreign foreign foreign [Music] foreign foreign foreign foreign foreign [Music] foreign [Music] [Music] [Music] foreign foreign [Music] [Music] [Music] just a FYI so we have this the next Workshop starts in 10 minutes but if you want to carry on the conversation or keep going uh feel free to use that time up till then she won't start till then but as for me I am definitely uh all done and I would love for you to keep working if you want to share what you're working with me I will send it out or if you have anything tangible I'll make sure to share it with everybody too awesome cool awesome well you're free to stay and keep working for the next nine minutes foreign [Music] [Music] [Music] [Music] [Music] [Music] that's great [Music] foreign [Music] thank you anything put foreign foreign [Music] [Music] [Music] foreign foreign foreign learn myself yeah Society yeah okay cool um and so who here came here came to learn about or talk about neutrality Okay so a little bit of a change in the program and um but it's actually not so much of a change in a lot of ways I think public infrastructure is the first non-financial residence hello okay so in many ways I think non-financial use cases the first non-financial use case for blockchains is actually public infrastructure so and it's it's important that we think about in this use case what neutrality means and what decentralization means so the the program has changed a little bit and we're going to talk about that uh get us started clicker is not super working but um okay so as Puja was saying uh we're here to talk about digital infrastructure and um what does that mean not only uh in the blockchain space there are all kinds of digital infrastructure but of course ethereum is often envisioned as a potential digital public infrastructure that can be used ubiquitously around the world so the idea is to do some collective deliberation together on what does that mean and what are some of the requirements for protocols in standards that are serving this function so um the agenda for today is we're going to kick start this with two short talks first uh Puja is going to talk about decentralization and then Glenn is going to talk about different um approaches to neutrality and what are some of the conflicts between them and after that if the slides work we're going to use a tool called police to do a deliberation together and these two I'll explain this to you in a moment but it's a tool that uses Advanced statistics and machine learning to gained some nuanced insights in a digital conversation and so we'll take these insights then we'll have an in-person discussion since that's the benefit of being here at Devcon and we'll come back to police we'll do one one more iteration reflecting some of the learnings and then we'll look at the results um together so in essence this is going to be a an exercise in deliberation about digital infrastructure so hand it over to Puja to get us started okay great um I like to walk around when I talk so as I said I want to talk about first decentralization and that's working okay great and uh and Glenn will follow up with a prompt on neutrality so um because not everybody has read uh the paper I want to kind of give first principles of how I think about decentralized decentralization and really the question is how do we build bottom-up decentralized networks and there are all kinds of like networks right we have energy infrastructure we have physical networks we have Internet infrastructure internet Network starlink we also have blockchains we have social media these are all Networks and the question is oops uh how do we get bottom-up coordination of individuals who are part of communities to compose into larger pluralistic networks of coordination that can solve problems at different social scales that is how I have conceptualized the question of decentralization doing this in a decentralized way how does this work so what do we before give like a kind of first articulation of the principle let's just pump our intuitions and think about what do we not mean by decentralization so you know an autocrat controlling energy infrastructure not decentralization a benevolent entrepreneur controlling internet infrastructure not great either uh you know a group of sort of mining pools that control a lot of mining power hash power or stake not great for decentralization and you know corporate monopolies not great for decentralization and of course there's political centralization as well and you know there's tyranny of the majority which we're all familiar with in the Civil Rights Movement there's tyranny of political Elite and technocratic Elite and there's also a tyranny of a cultural Elite that can enforce their norms and language Norms on people who don't necessarily um you know agree but I think decentralization is a much more subtle question because we also have very very uh tacit and subtle what I call accidental over coordination because of correlated interests and we see this in particular and very acutely and Glenn was the first one who brought this to my attention in his book radical markets in traditional financial markets and so in traditional markets a lot of people you know if you're a retail investor you give your money to an asset manager like BlackRock and Fidelity and what that asset manager will do will buy steaks across rivals in a particular industry so say steaks across like every Airline right but in doing that they have an incentive to vote as a shareholder to pressure CEOs to take anti-competitive practices lower prices excuse me raise prices lower salaries not invest in r d not invest in Innovation and this is like not really great for markets and if you have a bunch of groups like Fidelity BlackRock you know State Street Vanguard all doing this um it ends up being a kind of oops uniform anti-competitive pressure on the entire Market on the entire industry um and you what you get is the appearance of competition across Rivals and appearance of competition across asset managers but really what you get is a behavior monopolist so using this to pump our intuitions one of the principles we articulated in the dsoc paper was this principle of consensus across difference and the idea of consensus across difference is that you rather get consensus between differently Affiliated people or just very different people to surface consensus and that would be a better signal of a plural shared good across broader groups than say consensus amongst a narrow group of individuals who might be sort of intentionally including or accidentally over coordinating in the way the the BlackRock and Fidelity example Illustrated is there any questions about this principle go ahead consensus between whom yeah you don't have to agree but if you get agreement across yeah the idea is that agreement across very different people is more likely to Signal something that's good for you know broader groups than rather consensus amongst people who are very similar right which might be more sorry so okay I will I will move on we can we can leave with them but you can't just make one comments I actually think you're highlighting a good thing which is that the point of pluralism is simultaneously identifying areas of cooperation across difference and identifying the areas of difference so like you can't have one without the other in in the dance of decentralization and pluralism and we're going to talk about that like we're going to highlight that in the exercise we're going to do later so I think both are like really important yeah I'll say this like a lot of a lot of discussion and um a lot of memes in crypto are about coordination cooperation but they don't really address the question of conflict right and so consensus across difference is a principle that highlights and services like our differences Ripa finds those consensus amongst the most diversely affiliated um so how did we as a first approximation Express this principle in the paper well we first introduced this primitive called Soul bound tokens or non-transferable nfts to represent memberships to social groups or represent affiliations and then as a second step we propose this mechanism of using quadratic voting or funding how many people have heard of quadratic voting and funding just raise your hand okay so you're familiar right and the nice thing about this mechanism is it um you know reflects a magnitude not just direction of individual preferences encounters some tyranny of the majority but as sort of the BlackRock example highlights you know where individuals or social beings we're in groups were sometimes intentionally including sometimes were accidentally over coordinating and you need to Discount the influence of correlated social groups or in the kind of spirit of quadratic funding and voting take a square root over the social group and this gives us a kind of digressive proportionality which we want because otherwise coordinated groups tend to drown out uh you know less coordinated groups in voice so to kind of summarize to get us our bottom-up coordination the mechanism we proposed is well first of all seeing individuals as nested in their communities and communities being constituted of their individuals and capturing the intensity of individual preferences with quadratic funding and voting but also discounting correlations and say over coordination accident and or intentional uh with social correlation discounts and with this mechanism what we're hoping to do and this is again just a first approximation is to get this kind of nice intersecting partially nested structure of ever-going network cooperation extending across you know digital and physical infrastructure and importantly a a a paradigm where power is not discrete it's not binary it's not rigid but rather continuous partial and uh recomposing and fluid so this is a broad and very broad strokes and explanation of you know the conception of decentralization that we've ushered for it I'm going to hand it over to Glenn now and he's going to talk about reconciling this with neutrality and start pumping our intuitions there and asking us important questions so uh Puja did a beautiful job but went quite quickly over this notion of digressive proportionality and I want to sort of ease into it by just um like pressuring some things that sound natural but are all contradictory with each other so they sort of create a paradox that forces us to think a step later is there a slide for this Pooja on the neutrality stuff or yeah yeah Okay so what is neutrality so like here's a bunch of different Notions of neutrality which like lots of people and maybe the same people in many different contexts all go rah-rah for but like actually can't be consistent with each other it's like one notion of neutrality is like every country should be treated the same but but then you're like well what about some countries are much bigger than others and maybe some countries are much richer than others and oh well um I don't know okay and then like resources should be treated the same like packets of information or units of compute or units of stake should all be treated symmetrically but wait like some people have a lot more of that than other people and is that fair and like maybe it's concentrated in certain countries and maybe those countries are all really coordinated maybe that's not good and then the US and China will just dominate everyone and hmm and then like another version is individuals so like proof of personhood people are like really into like you know every person should have the same rights and you know it's really unfair the Electoral College gives more like voice to certain people and and whatever but then you're like oh but like you know what if that just leads like the majority of white people to totally screw over black people in the U.S or like you know uh Hindus and um you know Muslims in India and and like well we also care about resources as well and we care about what countries people so anyways the point is that there's a bunch of different Notions of neutrality that we invoke in different contexts often very similar contexts and that are like pretty directly in conflict with each other um and I think there's like a really profound idea that starts to point the way to like how we might try to reconcile these that comes from this statistician named Lionel Penrose so what what Lionel Penrose said is that um if you have coordinated correlated things and then a bunch of uncoordinated things the coordinated things get heard much more than proportional to like how loud they speak or How much votes they have or whatever um and and that comes from a very basic statistical principle which is if they you have uncorrelated things they tend to cancel each other out and so like their aggregate size only grows as the square root of the number of uncorrelated things whereas a single correlated thing that scales up grows linearly in its strength and um that might sound like a little bit abstract statistics but like it's something that literally you can just recognize from dinner conversation so like if you go to a crowded restaurant um there will be all sorts of people talking right and like the total volume of all the people talking will be like massively louder than the person you're trying to listen to next to you and yet somehow you can still hear that person because they're just slightly louder than any of the individual other voices and your brain like the whole mechanism of noise is to like take things that are uncoordinated and a little bit softer and cancel them out and like have that one coordinated thing that's slightly louder stick out right and um so Penrose originally applied this uh as a way to think about how votes should be given to countries or you know provinces within a federal union based on the population of the sub unit so he said no it shouldn't be neutral across people because those people are coordinated with each other by their joint membership of the country or the subunit and no it shouldn't be neutral across the units because units have different numbers of people in them instead the right principle is digressive proportionality which is that the allocation should be based on the square root of the number of people within the country um yeah is this like punishing fascism because more people are working together the more they get penalized kind of yeah that sounds great yeah uh it's kind of like that so so the the point is that um so so he just and in fact this principle was adopted so the nice treaty the the Polish delegation of the European Union uh proposed that they should literally use the square root but people thought that was weird or whatever and so it turns out that they put in a system where like if you look at the correlation between the square root and the number of like votes allocated it's like a 99 correlation to that rule but it doesn't literally use that rule because people thought that was too nerdy but anyway basically that's the principle that's been used by the European Union um and the the thing is like quadratic voting is just another application of that same principle it's an application that principle acknowledging that one site of correlation and coordination is individuals and an individual with a bunch of stake or a bunch of voice credits or a bunch of whatever whatever it is that they use to express stronger intensity is like a site of that sort of coordination and you want to down weight that in this square root way because coordination can occur within that individual but coordination can also occur within groups and and really what I want to suggest is that all the correlation discount stuff that Pooch is going at is just like a more General application of that principle it's like looking for all the different sites of social coordination whether they be within groups or individuals based on stake or people or whatever and trying to down weight that coordination so that we ensure that voices are heard in a more fair way um anyway that's that's the basic frame that I want to give and then there's a lot to talk about because we don't know how to do that yet that's these are all just illustrations of possible things in that direction and we're groping our way towards figuring it all out yes and um as we continue groping our way forward uh we'll have a deliberation together here about um about what he means and how should we be thinking about digital infrastructure so um we're going to do that using a tool called polis which is a plural social technology so I'll just take a moment to explain what we mean by that so social Technologies are voting public goods funding identity money these are all tools that we use to relate to each other and coordinate in society and what we're doing at radical exchange is we're trying to bring about a new paradigm for technology that has a philosophy underlying it and that philosophy is the philosophy of plurality so I want a go too much into it but when we're instantiating pluralistic social philosophy in technology there are two things that we want to be looking for one is we want technologies that help recognize and sort of provide better resolution into the different social Dimensions that exist within a community and then we want uh Technologies to also Foster cooperation across social difference and sometimes that means fostering or Illuminating the points of common ground and sometimes that means Illuminating the points of Divergence so that they can be worked out um so police is a very simple tool but before I give this explanation I know that our Wi-Fi is not so great so I'll skip ahead and ask you to point your phones to this QR code so that in a few minutes from now you will have it on your phone and then I'll come back and explain it in Portuguese does everyone have it okay so um okay so what is polis now come back here 22. okay well uh Workshop Wi-Fi password Workshop build thanks Sherry um okay so no need to go into it right now uh come back here now I'll just tell you a little bit about this too and then we'll start exploring it together so the first thing is that it starts with an open question and then the participants can write statements in response to it and each statement will generate a card like this and the other participants are going to be able to agree disagree or pass each of the comments and then what police does is that it takes all of that data and then it clusters all of the participants into different opinion bubbles so according to the opinion bubbles are defined according to how similarly these people voted so you can see what are the different social dimensions and dimensions of opinions uh within a group and then uh the last thing that it does is that it brings to the surface what are the points of common ground that these groups that have diverging views share so one example of how this has been used in the past is in Taiwan this is used in Taiwan at the national level and they use it a few years ago to try to understand how to regulate ride sharing companies so in Brazil where I'm from this was a super polarized debate and I'm sharing many other places and there it was as well and there was a strong Pro Uber Camp strong anti-over camp and then what police did there but its surface was just good common sense so the things that came up were that taxi cab should no longer be orange everyone agreed to that before they had to be orange in Taiwan um that this was an opportunity to review a passenger safety regulations in questions of liability insurance so just good common sense that usually in the technologies that we use we don't have that we have the exact opposite we have the polarizing statements are the ones that come to the surface and we we are stuck in our ability to to come together and debate uh productively as a society so this this is uh an example of a plural of social technology and we're going to experiment with it together right now um and this is our question how should we think about neutrality in digital infrastructure so the first thing that we'll do is we'll take five minutes um to evaluate some of the comments that are already there so you can go to the link and then I'll be back with you in a moment this is the Wi-Fi is working yeah so the Devcon Workshop network is apparently really good much better at least good as an exaggeration but like okay good is an exaggeration but let's be patient we'll need a little bit of patience foreign [Music] who needs more time can you raise your hands okay let's give it a couple more minutes all right um so we'll now move to the next step which is um sorry for the next five minutes we'll add new statements so here's what makes a good statement for this exercise the first thing is that it needs to be a standalone idea because if you have two ideas in one statement then the other participants won't be able to evaluate them they might agree with one and disagree with others so complicated so one idea per statement these need to be short statements up to 140 characters clear on size and hopefully raising New Perspectives so let's take another five to to add statements in response to to our question foreign foreign foreign who needs more time to add their statements can you raise your hands no so we're pretty done so now just uh let's evaluate each other's statements so um let's take five to seven to seven minutes to do that foreign foreign foreign we have time and we can add more time so if you need to think about it take your time is anyone done by any chance can you raise your hands no okay two more minutes and then and then we'll continue yes yeah I think I think it's uh we're a super large large group yeah but this will generate really good data so let's uh okay uh but what yeah let's give it two more minutes and then and then we'll look into the the report life I went down I think the problem is everyone signed in so it was better when I was the one signing in oops I've never seen this but look look at how much more time do you think it's in common I'm doing more stuff yeah okay so now um let's look at our report and then police generates a lot of data um collapsed in two groups wow okay so we had five groups and then he collapsed into two groups super interesting um and so police generates a lot of data um and we won't be able to have a super sort of in-depth analysis but we'll present the structure of the report and see what are some of the high level insights that police provided to us so uh to the folks back there uh El supportive technical hola link perfect refresh aren't I controlling it right now no you're not controlling it you're you're the same so it's it's okay so so let's first look at uh some some of the obvious things so we had yeah so let's let's first look into this structure and uh and then we'll get to to some of the insights later so the first thing that it does is um here's some data 118 people voted um and out of that group 109 uh were clustered into different opinion bubbles we had 3 800 votes evaluations of statements 78 statements uh 38 votes per person so you got to a little less than half of the statements uh but there's probably many redundant statements so it shouldn't be so bad um and then if you can put it so here uh police is putting each state each state each of these dots corresponds to a statement and it's putting all of the statements on a spectrum from consensus statements to divisive statements and as you can see we have a lot more consensus than the than divisiveness so it's just one thing that is interesting to notice is how social media distorts that picture for us it makes us believe that we have a lot more divisions but really we have a lot more consensus so uh okay let's see what's the most divisive statement uh neutrality means treating every country the same even if one country is richer than the other in an otroponomous um means treating every unique person the same um neutrality means treating every blockchain and protocol the same in enabling interoperability between them so these are getting to sort of similar things and as you can see what police is doing now we have three groups very dynamically changing so group a has 44 people Group B has 26 people and Group C has 39 people and on group a which has 44 65 percent of of the members of group a agreed with it why whereas everyone on Group B disagreed with it and the majority the large majority of people in group C disagrees with it so here it's it's an example of like surfacing what are the areas of divisiveness and the importance of sort of Illuminating uh what are the points of conflict because this gives a clear opportunity to have a more informed conversation about this specific topic why is it that the folks on group a think that and why is it that the folks on Group B and C disagree so uh let's see what what we agree about neutrality is context dependent and these questions um lack enough context to be useful okay all right thank you um neutrality is different from fairness um what else we're groping towards something be patient with us um we're trying Okay so unumas um [Music] and neutrality is not about removing biases it's about embracing them all um so we can see hmm yeah people didn't answer but out of those who answered um about 40 of of people in general it's supposed to be clear when you have a very large number of people you should you should take up almost all the space because the whole point is that you get a random selection of things and it tries to pick up the underlying statistical correlations rather than like literally having everyone go through every statement that's the whole point of the could everyone hear that okay um so now uh this was just to give a few like a taste of like what what are some what were some of the divisive in in the and consensual uh agreements but uh we'll look into them and sort of analyze it more afterwards but now let's look into what are some of the opinion bubbles mass mass foreign yes which one on the top the one that was in the consensus so if if it was everything in red it means that everyone in that opinion group disagreed with that statement um so let's see how many clusters we have now uh okay so we have three clusters let's look at um what the the folks are now let's work back to two okay and you know this is a demonstration of course um you know this tool has been used over days so you can sort of work through the data much better um and usually very very clear patterns emerge but um um let's you know where we'll we'll do some we'll try to take some high level insights I have a pretty clear rotation of the two groups yeah okay so you wanna you wanna let's go okay so one really important thing to understand is I think paulus is amazing it's super cool it's a huge impact in the world it's also like absolute first like think of it as the like Bitcoin of like this kind of percentage this is not at all optimized there's like anyone who's a smart technologist in the room is going to think of like seven things that could be improved features not all of which would work out but like it's just it's a it's like the most basic proof of concept of this type of idea so yeah um Okay so on group a we have 59 participants um let's see uh what do they agree about so about half of them think that neutrality means treating every unique person the same whereas on Group B oh no sorry I read it wrong 85 percent of people on group a thinks that neutrality means treating every unique person the same whereas um 76 of people in group b disagree with that so that that already sort of characterizes uh these different groups but maybe if we look into it more we can start to understand why uh let's see so neutrality means treating all transactions the same sort of similar principles neutrality means treating every country the same um neutrality means that the rules are set to not privilege any specific participant there's more shared agreement on that but those three first statements already sort of indicate um this division between groups A and B they're um it's very binary in the end yeah so the why don't we go through it and I'll give an interpretation so let's go down to Group B now to look into that so Group B has 50 participants and Group B seems um interesting so groupie is largely clustered around these agreements so the the Reds and it's the disagreements of the to the three statements or statements in similar Spirits so neutrality means trading transactions the same as long as they can afford gas that was not in in the other one above and the majority of people in group b disagree with that um and let's look at the first two neutrality in certain cases can be evaluated at a group level and not at an individual level um 94 percent of group of people in group b agrees with that um and they disagree that it means neutrality means treating every unique person the same so you can see a pattern there and then different forms of neutrality make sense in different contexts for example some should distinguish humans and Bots others uh should not I guess was the last word that is missing um 85 percent of people in groupia group agrees with that so now uh majority majority um so here actually majority is not a good word because uh what this is showing is the plural majority so what are the statements that groups A and B despite their divergences where is it that they can find common ground so um neutrality means that uh means the rules are set to not privilege any specific participant 81 overall agrees with that 93 on group a 69 on Group B all human beings are rational uh everyone agreed that this was a bit of a weird statement personal Liberty should be protected above corporate good um everyone agrees different forms of neutrality make sense in different contexts for example some should distinguish humans and Bots some should others not should not fascism is needed to achieve neutrality um yeah lots of disagreements there and neutrality is different from fairness that's an important point so this is what's interesting about this is that despite the divergences these are the areas of Common Ground out of which you can start a conversation so um I'll hand it over to Glenn to share a few thoughts on on the analysis uh she was thinking about it here and then also if anyone has any any comments uh we'll hand it back to you [Music] singer grasses okay um so this group has statements like neutrality and they agree with well the other group disagrees with statements like neutrality means treating every person the same neutrality means treating every transaction the same neutrality means treating everyone in the same country the same uh sorry treating every country the same Etc and so what I would describe as [Music] this group has is sort of like the uh maybe feel good group or something like that it's like there's many different forms of neutrality which I was trying to argue were in tension with each other and this group seems to be composed of people who kind of like all of them you know they're like I don't want them to be in tension with each other or they all sound good to me or something like that like that that's sort of the the the the vibe I get from group a um Group B on the other hand uh perfecto um this one really likes statements like neutrality in certain cases can't be evaluated a group can be evaluated grouping level and not individual level or um different forms of neutrality make sense of different context doesn't like neutrality is you know treating all the gas the same you know he's treating all the people the same so the way I would characterize this is group a is like I like it all and Group B is like it's really complicated you know what I mean um and so the the main divide seems to be like group a is kind of embracing the contradictions and Group B is like trying to say in the face of these contradictions we've got to do a lot of really complicated thinking and I probably can't in a tweet length thing even express what I think the next steps of that are so um does anyone here feels like they identify with group a and want to wants to share uh elaborate a bit on their views and share with the rest of the group or group b any volunteers okay so are you on group a or group b you think I'm on the group D and uh I like I saw it like from a perspective from like a tolerance and I I think like now group a like the neutrality yes was like close or embraced as a tolerance by the group a that's that's how I feel it like we tolerate everything and try to neutralize thanks uh yeah uh Daryl Malone uh I think I would have been in group a I guess um and I think I would say that the the complexity of neutrality kind of comes out if you look at it as a very specific thing that applies to those that are maintaining the function of a system and not necessarily looking at the decisions of a system um and I think that kind of for me makes makes it a lot simpler hi guys my name is I think I associate myself with Group B more because in a complex system it's really difficult to evaluate neutrality when when some agents on people provide more value than others hey I'm Phil so I agree with Glenn's notion about the many different uh conflicting neutralities and I think that makes any decision taken on the basis of neutrality kind of reductionist so I kind of vibe with the like it's complicated uh you know description I think that's kind of accurate hey this is Hassam one thing that I'm interested to understand is like how would we solve that like when like each all countries would be treated the same aren't we better off splitting United States to 50 country and and so on you know like it's like how would we solve such kind of attack which is like your you will coordinate again in a different way so you will take advantage with B yeah obviously okay oh hi um I'm saffron I um I probably was in group b definitely um and I think maybe this means that we can't say that um a system a system as a whole is or is in neutral but that we can evaluate some degree of neutrality along a particular axis um and kind of look at it in a very multi-dimensional way foreign I was in group a and uh the way I what I thought about the groupings was kind of um it aligned with of italics paper about uh vitac vetoocracy and bulldozer political access and I feel like group a is like the vitoocracy and Group B is maybe more the the bulldozer political axis for those who haven't read uh can you just elaborate a little bit on and that like from what I remember it was the vetoocracy was more like if there's a lot of people um who are equally weighted they'll be able to keep back kind of a tyranny of bulldozers but bulldozers are needed in order to get a lot of stuff done so you kind of need both both groups to balance the system what I remember all right one more does anyone feel like they have something actually I'm in group b uh two thoughts is that um one is probably some other people or they mentioned that um it it's a social difference there's many that I mentioned you can now achieve neutrality on Old Dimensions at the same time so it's a constraint neutrality maybe in one or two uh access or Dimension that's achievable and also that to to achieve the neutrality in require a value judgment right um in what what make it neutral uh is just treat them all the same or sometimes maybe require treating differently in order to be neutral and that require vital judgment that also very difficult that's why I'm in the group b okay question yes what would be your what would be your take on only Group B commenting like um yeah I think it's an interesting question I wonder maybe if someone from group a um would like to elaborate a little bit more on their views um and share with the rest of the group um well okay here so you know your group a if you when you look at the statements from group a that people all agreed on if you all if you agreed on both of those statements and you're basically grouped person oh does it okay yeah um yeah for me I was in group a and I just found myself um maybe a little bit naively having a bias towards just wanting to agree with all the statements I mean I kind of saw some of the tension between the statements but I also um just like there's a lot of different interpretations of what neutrality is and kind of just found myself agreeing with all of them I'm I'm trying to wrap my hair around the terms equity and equality and I'm would like to know from your perspective uh if those uh if any of those is actually a neutral one in any of these senses just one thing one thing to say about Equity inequality I'm not sure but I think that people are referring to a particular meme that defines those in a particular way uh not necessarily to like some abstract diversion of it um do you know the meme that I'm talking about yeah probably that uh there's like a fence and then you have like people with different heights and is that the meme that you're talking about can you elaborate on that one so like for example let's say uh let's go to the statement that says how many people have seen that Meme raise your hand okay most people have seen that Meme so I won't like explain what it what it shows but I just think that's literally do whatever you want but when we say neutrality means treating every unique person the same are we taking into consideration that or not and what uh and what are the things that we should be taking into consideration when we say treating the same Let's uh continue developing this conversation the idea for now the next step oh sorry us one final statement drinking a little bit of a have a little bit of a difficulty wrapping my head around the term neutrality because like uh you mentioned uh neutrality only exists in different contexts and when we're trying to build systems that are supposed to be neutral then that means that there is a certain bias to gain positive impact to get negative impact or whatever and then when we're not building these systems by ourselves we're building them together and how can we make sure that we have as less bias as we can or we don't corrupt that bias when we're building the system it's a great question folks um the idea for now uh I want to stick to our agenda so that we can make the best use of our time together they're different out this was a prompt um and hopefully an exercise that shows some of the different views and I have to say I'm I'm a bit impressed because usually um it felt very binary you know the the results here um what it's not three groups it's now three groups okay we want to refresh it so we take a look at what group C is about quickly um what is Group C about so a is the same as before basically but I'm trying to understand what group being groups here are now okay uh we'll come back with a few more comments but the idea for now is just for you at your tables for us to take 10 minutes to discuss this and then as you you can share your visions and uh some of some of the questions that this this conversation on police brought up to mind uh to you and then what we'll do is we'll take uh we'll do another iteration on police it becomes a lot more interesting when we iterate on it because we can see both sides we can think about it um in a more informed way and then the idea is to try to understand where the bridges what are the areas of Common Ground what are some of some of the statements new statements that can be added that can help bridge these groups so let's just take 10 minutes to discuss at our tables um what is it how is it that we should be thinking about neutrality and your impressions about the exercise so far let's see it see here and this is C so this is the one where C diverges for men not the way or division should be it's not just being a artists this is the complex group so C is the previous okay we have one quick Insight on the third group that I'll share very quickly I'll share it later it's okay continue the conversation foreign foreign foreign foreign uh relationship s okay um why don't we imagine understands the machines foreign [Music] foreign okay um gracias okay so folks come back here with me who's hearing me clap one time who's with me clap twice um okay sorry one second um so what I'd like to do right now is to have some of you so we we ask you to share uh what was your reason for being group a or group b but is there anyone here who has very strong views on what neutrality is and wants to convey that to the rest of the group hi guys so our talk was primarily focused on debating neutrality within democracy uh he's from Colombia I'm from Mexico he's from the US Canada and where we all talked about was that it's really complicated to have to wait each vote the same when some of that democracy is corrupted from the from the campaign uh from the campaign start for example in Mexico right now we have uh I'm low as a president and he's building a lot of infrastructure projects don't make sense and see more than 60 of the population agree with him but it's really difficult for people who well it's every it's really difficult for the right incentives to guide the correct policies because when somebody can quickly say okay I'm gonna give you this short-term reward for your vote well that's difficult so what we were basically talking about was neutrality in different contexts basically makes it yeah it's it's very difficult to have a neutrality when the people acting on it have different incentives yeah okay sure so I'm from Colombia and here in Colombia a big social problematic is buying votes so people although we debated about how it ended up affecting the policies and the actual morality of it at the end of the day it's not the right incentive it's an incentive external to the to the one that should be which is the actual policies and beliefs of the governor so weighing those people who are kind of neutral and don't know who to vote for or don't are not really interested in voting for and you offer them an incentive uh economic incentive then it becomes like their vote is not for the people it's for them and their vote is not actually for what you're voting for which is the governor but for the whatever money they gave you so should that vote be taken into account because according to a neutral perspective it should but I at least doubted you thanks um so I think at our table we all agreed that it's not an easy thing to Define especially coming from like foreign languages we had like a an English as a second language was like we had a hard time even like reading those statements and comprehending them and processing but one thing that we all agreed that naturality is a pretty much a the status of Here and Now uh even with like what you just said about political vote like here and now you're natural but maybe within like a few weeks you have an opinion and you will be agreeing or disagreeing so it's almost like a you cannot keep the state forever it's just a Here and Now how you feel and it's yes exactly so we kind of had the same feelings about like this exercise and like how we think about it and it changes for sure it's not something we can have forever super interesting sort of speaking to the needs for sort of continuous adaptation adaptability um okay so now I'm curious if uh was was there any of you who were either on group a or group b and after this conversation sort of gained a new understanding of the other group's perspective that you didn't have before um and maybe change your mind a little bit or just had a bit more Nuance in your views and would like to share that with the rest of the group yeah it that really stood out to me I'm Alex by the way um that as I was sort of watching these questions and how people were describing neutrality and siding with it I feel like neutrality for one uh took a lens where neutrality was very close to goodness like as if some people were already feeling like neutrality was good and that's how they were voting and another perspective which started clearly like forming for me as we were doing this was that some people at least to how I see it now seem to take neutrality as a rule we apply regardless of context which if you're going to strictly logically Define things like I think that makes a lot of sense um but yeah not everybody's going to view it that way and then if you get into complexity and not context dependent then you get a very clear split so it's really interesting to see multiple shifts in what I understood to be neutrality happen as we were going through how other people observed it uh yeah so kind of referring to what I was saying before I mean like one observation like hearing here and like here discussion on the table was that very often like we want to tolerate someone else's opinion we want to be like good in a society but uh I mean me being part of the group b yes kind of like you know opposing to say that okay we can't neutralize things we can't tolerate everything yes like bad things should be called out right like neutralizing the value meaning like no getting rid of our civilization kind of the thing right so yes it's complex but you know um the the problem is that uh like at some uh extremias like neutral thing can be in my opinion right if we like really no like take the value out of it right um yeah but I think like that's the problem so anyone else has some uh bridging reflections okay things I'm Leonardo and I was thinking about because we are all talking about neutrality like just neutrality but the question it says about digital neutrality right so I was thinking about if it is um like maybe a difference or something very specific to digital because thinking about digital it so that digital it may be refers to in general to Binary data info right and it is built like that mainly for communicating so maybe if we talk about digital neutrality we are talking about communication across networks so from that point I see that maybe it's not like that complex the the term of neutrality because if you talk about communicating overnight course it could be like any peer has the same chance to communicate with other people right so at that point I think that I was the group a because I didn't see like a bigger complex problem but something in a specific context then if we talk about neutrality as general have everything neutrality I think that we get to that point where it can be many different things and have many different ways to express neutrality right yeah and to emphasize that our question is directed towards digital neutrality so that's um digital public infrastructure neutrality in digital infrastructure um does anyone has any other uh sort of insights or bridging comments that they want to share okay um I thought that was a very insightful exercise and I think I was more associating myself with the group a at the start and then they were discussing and I was hearing other people giving feedback and I think I mean as just a human being it's very hard to make binary choices like uh just 100 years 100 no and um for me it was like I would agree with the like most of the maybe uh questions that the group a was agreeing but unless there's some exceptional circumstances kind of the situation so for me it was um I was more um you know it was closer to me to vote on a group because uh like maybe 80 percent I would agree that as a basic rule and basic understanding of neutrality but then also leaving a room for you know I don't know exception in special cases rather than just saying completely now and disagreeing so yeah this is actually a wonderful point because we'll we'll iterate on the platform one more one more time after all of these discussions and in this iteration this is the opportunity for you to add that extra Nuance that you felt was missing in the former statement so neutrality is so you can you can add that nuance and that complexity uh in this in this second iteration this is a little bit of a troll point but it did change my views so someone said the word neutralize earlier and I made the connection between neutrality and neutralization like wouldn't the most neutral thing in the world just be if none of us really existed that would be super Fair it'd be super conformant with all of group A's statements vacuously satisfy any definition of Neutrality um so just putting that out there as an idea okay so what he said I just thought of something like when we talk about digital neutrality right it obviously becomes a lot easier to enforce because you could like create things at protocol levels which humans cannot change obviously that is not we don't exist but we lock out a lot of choices that you could otherwise have in that and then in a sense you are like a lot of like freedom of choice is gone and thereby it's a lot more neutral which is not like very far from what he said as you pointed out I was a little bit dismissive of group a and identified with Group B but just to like I thought that your comment was very insightful which is um I think that many of people in group a seem to have thought of each statement as having much more implied context then like I was thinking like they were they might have been stated in a universal way but a lot of people thought well of course they must be talking about context Acts or context why and so I'm in agreement with the statement because I see that implied context but if we draw that out maybe there wouldn't be as much disagreement between the two groups because Group B was really thinking of them as very broad statements and group a was thinking of them as specific to the context where that principle is appropriate so now in the spirit of adaptability I want us to I I'm sorry I can take more uh inputs because I want us to take the time to do one more round uh let's let's see how this how these Notions um evolve by going back to the platform and adding bridging statements uh statements that have richer contacts and that add the exceptions to the rule and that you feel um can sort of um reflect anything that you might have learned about someone else's point of view uh today or anything else that you might that you might want to add you know uh it's not a tyranny but uh I think one of the particularly interesting things is to try to add that additional context in once and um and try to bridge what are some of those different views now that you've been more exposed to to them so let's take five minutes for that foreign foreign information two more minutes thank you thank you so if you're done adding new statements you can start evaluating them and we're going to take some good uh seven minutes so we try to get through as many as we can I I'm sure there's a lot of redundancy there but I want to make sure we make a good use of this opportunity to see how is it that we have evolved as a group in the past hour and a half my responses from the first part are going to still be influenced my grouping for this part yeah I feel like I've changed but it's okay yeah but hopefully the new statements will capture that okay I don't know thank you for me yeah find even more interesting so now neutrality Means A system that does its best to not privilege any person and this means it has to evolve into dynamic it's for me is like very clearly what I expressed like you see there's a logical word on that no I can't answer it anymore because I have both perspectives I actually disagree with that it was like one of the only people yeah so I mean but like would you still listen like um so like would you guys look at that as Pro personal Liberty or anti-corporate group even the fact that it was public good it would I would imagine more people would be like okay what was the questions which one was the question number 44 in the previous one is personal Liberty should be favored over corporate good a republican like if the same number of Republic code I would imagine the vote would look quite different so when you guys look at something like that are you guys thinking okay this is more proportional Liberty or anti purpose statement of anti-corporate how just how you guys interpret data yeah yeah I think the the yeah the liberty interest is like if you versus Corporate good versus public it is kind of like a differently tailored I think a different kind of slightly different concept okay and we should ask both questions yeah yeah but but um I I'm gonna I guess what I'm saying is I think people it's not what I think Liberty is but I think people interpret that probably different if it were free yes which is why the question but right now just this statement when you guys decide to sort of look at it I didn't I didn't push the statement out somebody I don't know the interesting thing about this company you could yeah let's continue evaluating folks let's try to get through sorry let's try to get through hello let's try to get through this statement so that we can um really completed this exercise to the best of our ability police is used over days sometimes weeks so we're trying to do a compressed exercise here and just to have it as a demonstration and also because we think this is an important question so we'll just take a little bit of patience to patients to go through the statements distance it is it is it's just a small computer no they're together there are a lot of features that all this does not have very useful but it's actually it's a great thing and it's very limited at the same time you know let's look at the Opium groups to see well and make sure to refresh your uh police page so that you get the new questions the new sorry the new statements foreign questions I think it is more schedules okay um let's come back to to the report and see how things have evolved so you know this is interesting I've I've done this uh Workshop I've used it this too a number of times and I have to say that this was definitely the most binary conversation the most binary group that I've ever worked with and have sort of seen represented in in this tool which to me what that says is that this ecosystem needs a lot more of these kinds of tools and sort of conversations because it feels like yeah it's just very binary but we've evolved we have a solid third group right now uh so I think group a um remains with similar views groupy sort of skeptical and saying it's complex it's complicated but not really articulating uh what what that complex vision is and then kudos to group C who is starting starting to create some of these articulations so let's look into Group C together this was really interesting so Group C is saying neutrality must be put in a context otherwise it doesn't make sense neutrality is not an optimal solution for the evolution of the human race incentives are inherently non-neutral um and they super disagree with treating every country the same every every unique person the same so they're saying you know you need contacts you need to take into account different incentives and um you need new I think that what's I won't put my interpretation of the comment about ending the human race is that sort of affirming that uh that you want plurality right you you want to have diversity you don't want to um collapse so is there any conception of neutrality that can also make room for uh pluralism um remains to be seen but I think that this statement is expressed that this is a desirable uh thing um so yeah this let me do one more refresh here to see if anything different came on Group B the guy that said we must all perish touch neutrality made a good point um and let's look at the Spectrum here so a lot more concentration here on consensus [Music] um neutrality while important is not the only goal neutrality is layered some layers of the system should should strive to be neutral and some layers can be biased we should continue to actually should continue this exercise on a bar with drinks um okay so let's good let's see um what is it that all three groups can agree neutrality means the rules are set to not privilege any specific participants neutrality is different from fairness um individuals should have autonomy over what products and services they use and neutrality while important is not the only goal of a society and needs to be balanced with other priorities [Music] um and then what are some of the things that it's interesting because there's almost usually in the um plural majority section there's more agreements and disagreements this is pretty half and half there's a lot of areas of common ground of disagreements neutrality is fascist neutrality means indifference not caring a lot of people disagree with that super interesting the group is never right against the individual um so um as I mentioned you know this this is super rich and there you know it merits doing a proper analysis that we can do uh right here but hopefully this was an interesting exercise neutrality is a huge value uh in this ecosystem and it's one that has very very serious and important implications so um I'm curious to hear any thoughts Reflections comments on this exercise or anything that you might have learned and um and we'll be posting uh more uh sort of thoughtful report of how this went uh online so you can look for it on the radical exchange Twitter or you can come up uh to the table and just send me just give me your email and uh yeah hopefully this was this was a good exercise I'll take a few comments and then we'll wrap up cool on the exercise I wanted to know if um in the second round did we vote again on the same statements or the votes we already had uh issued of the statements on the first round stayed the same because like from a deliberative uh Democratic perspective it would be interesting to vote again on those issues like after debating yeah so this is open source software so it needs a lot it needs a lot of work um but no the the votes remain the same the votes remain the same so I thought that was a an interesting experiment I guess one question is um I think this group is like all coming here with good faith and good intentions um and one thing I noticed is like as people answered questions even if I wasn't answering a question the groups could like pretty quickly kind of shift and also my position in the groups kind of could quickly shift so are you thinking about this in the context of like people who might want to like intentionally create those shifts or like kind of a more adversarial mindset and how would you mitigate that I guess now yesterday we were giving this Workshop to a group of organizations that are working on uh citizen participation in the Southern Southern Hemisphere and they were like my God this is like such a good tool for political manipulation and you can use it for good or bad I mean it can go in any direction but um part of the thinking behind uh trying to advance a paradigm with more pluralistic social technologies that if we if we can um provide more resolution into the different social Dimensions that exist within a community then that's that's the only thing that will unlock good governance and our ability to find to cooperate across diversity so uh you know it comes it's a double-edged uh sword I'm not sure if that answered you one other thing I'd say Phil is that we just have like no analysis whatever that's a really interesting challenge you're like what like and what are the other people I don't even know I have no idea like it's really interesting questions so just share my perspective on the highlighted statement I thought this the other priorities are more like today versus the future like if you ask me should the world today be neutral yes of course there should be fairness had the world be neutral from day one of existence would be reach here I don't know so I mean I don't have an answer obviously but like I thought that's what like that statement is all about like today's neutrality versus neutrality as a tool to forward the human race some comments on on the exercise itself are I think that the exercise heavily depends on the quality of the questions and probably we need to have some approach to exclude some some of these questions when we see some white areas there and probably those those questions were not very you know so people didn't want to answer this question probably we should exclude them or probably we should have another options on the on the poll so where be people on voting so they can kind of exclude or report against this question thanks um we radical exchange we do develop a few Technologies but this is not developed by us is by the amazing Folks at the computational Democracy project um and it's an open source software you can make a full request or give them some support and share your feedback uh but yeah as Glenn was saying this is a very very primitive tool but it is better than most of the things that we're using in trying to you know identify social groups and and uh illuminate areas of common ground and disagreement um and it's it's something to it's remarkable how how primitive it is and and the fact that it's still one of the best tools that we have so we need to continue developing this can I jump in yeah yeah so going back to the earlier part of the I I find it interesting because I tried to Prime the discussion with like a conception of decentralization um and uh so we could actually use some of those if somebody want if you know if anyone here is a hacktivist who wants to improve polis we could actually import some of those Concepts there like for example having non-transferable nfts to represent your groups and allowing quadratic voting and then we could have a much richer perspective of clustering there um but the set the second observation I wanted to make like Glenn you gave your perspective on the clustering but I actually I think the difference between group a and Group B was like a was sort of more biased towards thinking about neutrality um in the in the sort of voice Camp of Voice versus exit and thinking about equality and Notions of fairness and being like yeah yeah of course like individuals nation states right and then I think Group B was maybe more focused on like neutrality as an exit I should be able to be able to send my information packet wherever I want to or like you know transactions independent of gas or with the exception of gas sorry with gas is the only limitation so I thought that was that's kind of I think there there's some broad Strokes that can be made there on like Voice versus exit and how that how where where you kind of are on that might inform your view of neutrality uh yeah I just wanted to talk about like you know um using some learnings from I mean this Workshop into the Dao like the autolink specifically right so like very often in doubt that you know the questions we ask in the Dao may be not the right it's not not very often the right one like for example yesterday we had a workshop with um with maker on like how to optimize the governance process and like you know there was some drama related to uh yeah basically some voting and currently in Cosmos we have um like this huge proposal for atom 2.0 and uh yes like uh very often we cannot like you know get an agreement because the scope of of a decision is cute right so like applying these tools for the house to make more I mean to break them down and more make more specific uh decisions yes I guess that would really help in uh wanting to contribute to police and I know that there was one um integration with web3 wallets um that was made last year but we ended up not using it but I'm happy to connect you with the folks who worked on it and as Glenn was saying I mean if this was if you could quadratically vote on the statements uh this would be incredible if you could also connect it with spts that are being used today for example for um at the governed platform that creates expertise for Dow contributions and then you have internal clusters you have external clusters you know there's there are many ways in which this can develop I'll go to some of the other folks okay what do you mean of quadratic voting for like yes no question I mean it's to discipline I mean throw but you know I don't really know want to have like more be able to express the intensity of how how much you agree or disagree but it can have a quadratic system with it you can have psych credit credits that um that you can spend um if you have a set budget to spend don't you have to see everything at the same time to figure out how to allocate your budget um we we have a software for quadratic voting that we developed at radical Exchange in the way that this happens is that you usually go through it through the different proposals a couple times and you sort of distribute it once and then you sort of continue readjusting it a few times which means that you probably need some way of curating a smaller number of statements yeah our sort of way to hack around this is that in many workshops that we do a radical exchange we first do a police conversation then we do we curate a ballot and then we put it in the quadratic voting platform and then we do a vote so we do this deliberation then there's also a delegation step so you have some credits then you delegate them around then you then we do a police deliberation and then a quadratic vote in the end and it works pretty well like in groups that are actually like trying to um work around a solution um we've seen groups that have sort of been having a very hard time in advancing on a particular issue for months and then they did a workshop in one and a half hours using these three tools and they sort of unlocked a few things so it's a pretty good idea but it would be better to have them more integrated did you guys also think there were some like broad stock differences in one group thinking about the idea of neutrality versus one group thinking how would neutrality be applied in the real or the digital world foreign folks we have five more seconds in this Workshop so I just want to thank everyone and I also want to say we have amazing infinite diversity in Infinite combination stickers here so you can come grab them and and if you'd like to to get the report of this exercise we'll post it on the radical exchange Twitter but um I can send it to your email as well just come over and send me and give me your email address and thank you so much see me children [Music] [Music] 
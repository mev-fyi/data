foreign [Music] like what happened before as this one is basically just like a continuing session to what happened in Osaka where we thought that we will almost die after typhoon um so basically that was like proof of work to prove of stakes or like transition session uh where we hosted like some Community sessions as well uh alongside the Eid one in each One X to E2 and these two sessions um it was kind of successful in a huge room where vitalik went on like a huge session and brought like so many research posts of like that inspired the discussions that happen uh during the session um and then um just to give you a quick overview of the um the roadmap of what we've been discussing uh like just a few points uh mainly we've been discussing the IP 1559 the fee Market change for ethereum uh which was a very hot discussion and also the prak Pao which we agreed uh uh that sort of conspiracy driven AIP and we should not keep much of a like we should not like pay much of attention to that as that's very conspiracy agreement um then we also started discussing about State rent um as we realized that many people are using blockchain as a storage um so we were discussing that there should be uh rent free that there should be some rent fee for the providers it also kick off the ideas for stateless Clan with Alex and Piper I'm not sure if they are there but um they started um pretty much discussing how we make ethereum stateless and then they follow up the session in Paris after ECC in 2020 which was the covet session as well and then we were discussing Also regarding uh like how ethereum can like um how like hearts um like The Shard design basically uh and then the ACM transaction history archive which is basically about how we can keep the full state of all transactions and like archive notes and all that um so um you guys may be wondering why everybody is sitting down even I'm like sitting down because I don't want to be like too much like oh I'm like important and you guys are not uh but basically three magician sessions are always like everybody's sort of like on the same um same like line or something that like there is no such thing as like oh these are the cardiffs or like oh these are the speakers and they're important like no like everybody is equal and everybody is um as important as whether you're a speaker or you are sitting in the audience uh and I highly encourage you to join us anytime in this like how Circle um so if you have like something to say to this session or like to the topic that is being discussed feel free to anytime uh switch like anybody just like take their seat and be like hey like I want to like say something to this uh and even grab a mic um and I also encourage you to take some notes or some like ideas that you have we also have a marker would just like thank you so much who's gonna take a note from this session and then also I forgot your name uh but uh there is a guy who is going to take a note in Spanish so we are going to have a translated notes uh from this session as well uh and make sure to publish them on ethereum magician's Farm um and then I just figured out that this would be a cool quote um to my kick up this session to like make ethereum more Diversified um as I feel like we need more clients um to be run in the ethereum ecosystem and we should not be um just focusing ourselves or on the main two clients and by the way the QR code weird until let the QR code be there and that's where you can find the slides and in the slides there are many links that what I've been just mentioning during my introduction speech and that's pretty much it from my side I'm just going to try to encourage you all to week up uh and like don't be scared even the mic it doesn't bite you and it's just like our friend and um if you will try to if you want to like speak up about something uh we want you to like make sure that um everybody will hear you basically and that's pretty much it um I'm excited for this I'm just giving the words to Tim and let's kick off sweet um yeah thanks a lot for the intro um yeah so I guess on the point of people asking questions and contributing I do not have near three hours of like contents here right like so like you know I have a couple questions to kick things off but like this is very much on you if uh you will have stuff you want to discuss this is the place for it um or we'll be out of here in 50 minutes um but I guess yeah there's like three things on the slides I think uh or needs to discuss with the people here um first is just like how the merge went it was a pretty big piece of work um not only technically but just like making it happen from like a human perspective we have all these teams working together so um yeah I'm personally curious to hear just from the different client teams and folks involved like how that whole process went is there things we can do better for like the next one um or things we did well that we didn't expect to do so well um after that like we keep talking about like The Surge Verge Purge Splurge all that stuff um I think I just want to make sure we have space you know to hear from different kind teams about like how they see priorities there what they think is important where things are generally at and then answer all the questions from you guys because I think it's uh easy to like look at the four acronyms or like meme names and then when you get it to the details there's like many more open questions so hopefully we could get into some of those um and then yeah we'll try and keep time at the end um or actually we will keep coming no matter what at the end um to just discuss like specific eip's like there's a bunch of VIP Champions shanghai's planning's been a bit different because we we canceled the calls after it emerges to give people a break uh so everyone has like eaps that they want to put in um not other places to discuss them right now so we'll use this as a sort of pressure valve for some of those discussions um yeah but again yeah please ask questions throughout um otherwise this is going to be over pretty quick um but yeah to kick it off um I I just was curious to hear from like different folks on kite teams like their perspective I'm like not like technically how the merge went like I think we've covered that a lot already but just how they felt during the process and like you know now that it's over and and we have a bit more distance like looking back how do you feel it went and other things that could have been better oh yeah I made the mistake of sitting beside Tim um uh it was stressful it was really really stressful and really drawn out for a long time and I think as quarters we've all felt that real pressure um so that's that's kind of the personal view of it I don't know how you change that I'm not sure we should because we should have been under pressure to ship and we were um but you know I guess I'd say never be in doubt that core devs feel the pressure to ship um we really do uh yeah I think there were a lot of really good things we did the testing that we we managed to do was phenomenal um and it was a kind of another couple of steps up on anything we've done before for hard forks and that kind of coordination and and work that went into that was absolutely fantastic um starting with the client teams testing their releases but then the EF support was spinning up the shadow test Nets were a brilliant idea um and uh Mario and and other people contributing to the um test Suites uh And Hive tests and that kind of thing really really valuable I don't think we started those Hive tests in particular early enough um and I think that probably is a knock-on effect and we didn't necessarily include the execution clients early enough uh which might have been because they were busy with you know 1559 or something giant um so I'm not sure what the timelines there exactly were but it it felt like consensus side almost felt confident and ready and execution was kind of like oh yeah emerge the merge is the next thing we've got time now we can look and it wasn't wasn't a surprise to them don't don't get me wrong but I think that was a big deal that that would have helped to bring that forward and then have more time on things like being able to pay real attention to the hive test we were struggling as client developers to keep up with the sport and the last minute things we knew about and dealing with these Hive test reports that are in a format that particularly for the cancer consensus side we weren't particularly familiar with thank you made a mistake of sitting too close to age um yeah I I agree it was really stressful very very stressful four years um I think a large part of it was figuring out how to deal with that and how to keep performing and keep delivering good code uh not sure what to do about that um perhaps having gone through it once then these group of clients will be better at doing it again um I think it was interesting to see how they were kind of um like a few little efforts or a few people that kind of poked up and really pushed things along um I think Parry was really helpful um uh I think uh Marius also managed to create a lot of momentum so I think there's a lot to be said about um yeah just I think the right person at the right time relieving the right pressure point so I don't know what we can do to to make that happen more in the future but those yeah those individuals should be enabled when they want to when they want to do something um I think it went really well um I have been quite disappointed with Mev since um since it's launched I know there's been with some of the implementations there there's been some bugs that we that with like Json encoding that really really shouldn't have hit us on mainnet um I think it's probably because Mev um like we all kind of realize that that's a thing is happening quite close to the merge didn't quite get enough time to run with it didn't get enough time for it to be integrated into our setups um I think there's also some catching up that those teams need to do in terms of um announcements and cons so if they have failures um with their software they need to announce it they need to tell people instantly that there is a problem and it's being looked into not sit on it for some time and then and then and then publish it do I was really happy to actually we we almost launched in October so just the next year um so but then I came back to the like after I said that I was like yeah maybe maybe it was not really the common agreement the common sense and I came back today to the Netherlands team asking everyone hey do you think I can do that for October like you think it's possible at least do I have to go and just like tell everyone hey I was wrong and they said no we think it's possible so I thought okay yeah and well there was there was a lot of work but at the same time I remember thinking on the same day I think it was good to say it because suddenly all the infrastructure teams started calling everyone and saying hey like we're launching in October we are totally unprepared we have to start preparing and it was needed like because we needed node operators to start looking at this we needed a community to say okay there's some date for the first time uh so I miss it by a lot but and then in Emporia yes I was still still very confident because I I've seen the things progressing I've seen the the Ryan is hitting very fast but it was like all those small things that take so much much time really in the testing and the proper testing and the confidence and I think when I was a bit pessimistic was around April this year when I when we were thinking about Mev boost and how ready a movie boost is and how much everybody was prepared for Mev burst and it was more stressed at the time about will we have a movie burst on time or will we have to launch without any Rebus because at the time we were thinking of June or May as a launch date for a movie a for for the merge so everything came together around September I definitely didn't want people to does it say to use this difficulty bomb thing as a as something that would drive the dates uh talking to developers to our team I feel like there's really no more motivation you can get or no more pushing or or shouting or asking that you could get for delivery on time so there's absolutely no sense to introduce any other stressor so so the difficulty bombing moved slightly uh I hoped it won't move the merge date and we didn't so actually the merge it wasn't moved and nobody was talking about the block times but we would talk about the block times if it didn't happens nice um yeah we're focus on another side of the room we are like one of the minor clients uh bezel team and um one thing I would have done differently was um preparing for people choosing client diversity uh getting ready for them didn't realize I guess I think it was around like two three weeks before the merge timeline we saw a huge amount of people thanks to a lot of solo stickers coming through Discord asking tons of questions and I think the maintainers were super busy with uh you know trying to get the final release out uh didn't get to really respond to a lot of them so I think that's something that if we had to go through the merge not really um but if we had to go through it again that we would do that differently to be ready for Community Support how do we get this uh new users coming through this ecosystem like how can we support that better um and but honestly it's definitely a hard challenge because as maintainers like you're really deep in the weeds of like really trying to get the code out on top of that trying to support tons of users coming through is uh it's it's really challenging but thanks to a lot of the contributors who also chimed in and asked answering a lot of other people's questions on how to set up their validators and all that um so yeah it's definitely a community effort it's not just the maintainers all core devs so thank you for those uh solo stickers coming in and asking questions and really improving the client diversity and also other contributors supporting each other so yeah thank you for that um I guess one less common is please don't threat threaten us minority clients by saying oh we're gonna go together I think that's like a step in your like heart and twisting it so yeah thank you hello okay so I wanna double down on Paul so I'm from prison and um so from my team's perspective merge has always just been consensus execution and engine API and boom done right and then like I guess like just a month before the merch we learned okay there's this Mev stuff we have to work out now and then there's this Mev booths and there's this relayer this Builder so we just keep adding more and more actors to the picture and then even a few weeks before the merge right there there was this tornado or cash they say all fetch stuff and then flashbots would only relayer so our team had this big internal discussion it's okay should we drop the support right now like like what should we do if flashbart was the only relayer and they are sensory transaction right even though and maybe boost is a neutral piece of software above flash about is the only relayer then as a client team we are indirectly supporting censorship and of course I'm not happy with that this this is now why we're here for right so I think like we've learned a lot I learned a lot it's just like if today relays are producing 50 of the blocks on the main net are they considered as layer one right and I'm I'm I'm really happy to see this more and more like relayers flash balls they're joining the Oracle Depot they're starting to participate more on just layer one roadmap like architecture and stuff like that so I do think like we do have to work with them and they have to work with us together to basically push the space forward okay yeah good points by um by Terrence I think it's worth saying as well that I think even though we did have some problems with Mev and I was pretty harsh on them before I think we did come out of it um in a better spot than we were before uh there's no like Mev guests now um and Flash Sports we're really happy to to relinquish that that control which was really cool um an mbb boost um is something that can be implemented by other people um and even as it stands it works with other relays um so I think we really opened up the world to Mev and although we didn't solve it and we're still not in a great spot I think we ended up in a better spot um and I think flashbots have done some good stuff um towards that as well yeah the circuit breaker's good as well yeah so now there's um the consensus clients can detect when the chain is unhealthy and then just disable Mev um so that's something that we couldn't really do before in Mev Geth um with the like Mev boot flash plus could have implemented it but um you know it's a lot of work for them um so yeah now there's a lot more control from the consensus clients at least um into what's going on with Mev and I think that's that's a really good place to be in do they still run nav Geth if you did the theory layers I don't know actually it's a good question I kind of um wasn't thinking about that but yeah because I think like you know for the most part most people who are running validators they're just getting blocks from the either the Builder the relay somebody has to run something that looks like Geth that's taking the Searcher bundles together and putting them into a block format yeah I guess what's up if that that's still the case it's not it's not ideal but I guess what's better now is that every one of those gets produced is now verified by um not that thing before it's published on the network right yeah and I guess like from my perspective the the whole situation with Mev was very interesting because Mev has been around for several years now and you know we've kind of seen through the defy Summer and the nft summer these crazy numbers about how much Mev there is in blocks and you know for my perspective was I was thinking you know there's so much money in this industry like the solutions are just going to appear and they're going to be really robust and they're going to work and then you know it turns out that it's six seven months before we were really projecting for the merch to happen we're starting to realize that the solutions that we as core developers feel need to exist weren't in the place that we felt that they needed to be and so we started trying to like help help accelerate um that path and the way that it turned out I think like it's better than it could have been I would have been very curious to see like what in you know institutions would have created their own Mev boost had this like open source public thing not existed because I think that there is enough money in this industry that some of these big stickers would have realized you know there's no way for us to extract the movie anymore let's create some centralized endpoint for people to send bundles to and we'll just extract it for our customers and you know Screw all the rest of the stakers they can figure out their own ways so it's not where we want it to be today we want to improve boost and make it better and we eventually want to move to PBS where it's part of the protocol uh and so we're just working towards that but and I think like also you know with respect to thinking that the Mev industry was going to build all this stuff the core development Community is also like a very anti-finalization of a lot of things and so to a degree it felt like we didn't want to think about it it felt wrong for us to think about Mev in a lot of cases and it was only later on where we realized how much interplay there was between censorship and Mev and the ability to produce blocks and it started to just unfold very naturally over the last six to eight months and I think like looking back if we would have understood those things two years ago we probably would have thought a lot harder about how to think about this with respect to the merge and maybe how to integrate some of this stuff a little bit more natively uh into clients yeah and I guess um yes talking about like the design of the whole thing I'm curious to hear like Proto Macau you both spend a bunch of time like early on with like the engine API and and specking out of that but um yeah Miguel do you want to just like walk us through like how do we come up with the merge like how do we how do we get here yeah hey ah okay so sorry like for me the merge started two and a half years ago like roughly at this moment in time and uh yeah by that time it was like an idea of the two-way Bridge of bringing the um Casper F of G as a frame analysis Gadget from the beacon chain to the um the proof work chain um that was the Australian point and there was an idea of like actually um uh transition in the proof of work chain eventually to the one of the shards that was not yet designed by that time and uh yeah it was like a long journey I can't recall everything that has happened uh like during this more than two years period of time but one thing that I would just like to mention here like my key takeaway one of the key takeaways from the working on the merge project is that retrospectively um what what I can um yeah recall like the first collaboration with other some somebody else working on the same space was uh collaborating with Guillaume guillaum prototype did basically the first execution layer client was not called that by that time but anyway it like made me much easier to like prototype the whole thing like the consensus interact with the execution layer it was not done by engine API by that time but anyway it was like yeah the old idea of like putting it in a chart and make it work somehow so we did this prototype then yeah after some progress on the merge specs and the ideas then protopied with like rheanism project so just you know forced us to make the first version of engine API for the do you remember all this enormous amount of hours you've spent the managing this project and driving it through it's like I mean I can talk about that I would want to First reiterate over the first moment in time most that we developed the merge I think it was um before coffee before the whole pandemic I think in like SBC there were still discussions about ewasum but then less than a month later in Paris during Evon X discussions afterwards eosm or like the ID of execution starts was basically over and don't forget and these discussions between you and Guillaume Danny me others Brandon also started where hey maybe we can prototype the Catalyst thing with the evm applied to techu and uh yeah like that's kind of cool but I took that's two thousand twenty it took a year more than a year till we got to to rayonism so it's a huge leap already where things happened and then in realism where in this awkward spots where alter was still not shipped and London was still not chapped and we were just like moment in time where there's this stack development where you have to convince people that they need to dedicate resources on something that's not the main hard work to make some kind of progress definitely like there there were moments in time where I was slightly like yeah out of my humor because of the the way the the these calls would go like for a month we were thinking of it like a hackathon where okay we just do the Prototype with more than one client and Martin often it's just meant that some clients would not go and join these cars to even just get a glimpse of what we were trying to do after alter and after London and I think like this disco-free process for future Forks we can improve where that's the time and if we had more people think about the merge we could have realized that hey we need to make these communication Channels with things like flashbots and MFE verages very soon all the rest it's very late then you've got the new situations yeah and by the way and maybe people are going to join us for the last session so we can discuss more that later because Alex he just text me that he's coming for the last session unfortunately he did not make it here can I continue on that yeah it's just a few few sentences left from my end okay so after any this is the first time we had like engaged more client developers and client development teams into that we had to written to write us back of the engine API like to make this you know some kind of standardized or whatever it was even before Emperor it was like uh like more than one year ago like yeah yeah April and May what do you mean one yeah it was great so then Emperor then uh yeah all this of chain events uh off chains sorry of sites of of offline events it's a really huge um facility of the progress and all the um developers in one place talking to each other in person I think it's really helps to collaborate on the things even after the event and when we were like on the internet um back to work yeah and as has been mentioned tests and efforts client developers gave a lot of feedback and all this stuff I was just and the key takeaway uh for from from what has been said um yeah the right people at the right moment in time make the things happen so retrospectively this is what has happened with the merge um and I think that uh this may only happen uh this kind of like thing right people at the right moment in time appear like in a healthy Community which we have currently the healthy community of researchers and developers and uh yeah and this like uh prove the merge is like as for me is proof of like these um that the this community of research and developers that we have in ethereum ecosystem can like capable of delivering like huge big sophisticated projects and like the merge is like the first one right so next is uh dank charging and other things uh local trees so it's not that I'm not that scared about it after we deliver the merge with this huge success so thank you very much everyone who made it I guess on the note of the community it's been like 35 minutes that's just us talking um Team don't want to give a lot star um to like tell us more but after that start asking questions so we can like open this up hey thank you sorry for being late as we are most of the time uh we're we are the fifth the fifth uh consensus client so yeah we we actually produced our first block on mainnet in November of last year but it was actually fun to basically Sprint up to uh to with everyone else and basically caught up um so that sort of retrospective was uh was amazing to see the kind of feat that we can get there and of course with the help of all the other client teams um as well we were able to pull through so basically goes to show that what we're capable of when we all work together especially when we're all focused on that one thing and it was to achieve a successful merge so um it was really great to for all you guys to help us basically pull us up to where you guys are um I guess one of the hardest things that we had to deal with with being a more later client uh to be ready for mainnet is really just the fact that client stickiness is really really huge issue and we definitely noticed it as we're going towards merch people tended to not necessarily want to experiment with a new client going up to something as critical as the merge so we found that to be quite difficult even though we you know tried our best to sort of make it easier for people you know like one of the best examples would have been our lodestar quick scripts that we use which is basically like a one-line command for people to start up load star with any of the El clients um but you know didn't see as much traction with as we'd like to but um now that we're pretty much caught up going into withdrawals Shanghai dangsharding hoping to see much more adoption with that and um yeah we definitely can't do it without the help of all of our Collective Minds together so really our retrospective is um if you are an up-and-coming client um we're all here to help you nice yeah so we we've just shared kind of mostly core devs and researchers you know our retrospectors on the merge so my question to everyone out in the community is what's it been like like what's your retrospective on how the merge has gone how's it been as a validator how's it been as a dab developer and those kinds of things someone's got to start just give someone a mic yeah [Music] hi I'm not there it was crazy because in Mexico I'm trying to teach people what this video needs to make in while people like you are building are creating I need scar record all the terminology is very hard to understand and that they don't teach people what you are doing and guys like me that are nerds ready and all the stuff it's very hard to to keep a good Channel so I think it's day to day it's improving life for example when I start to make the threats about all quartets in Spanish Skylar came to me and said a guy a nice what you are what you are doing they and team Baker start to to share my post so thank you to everyone for all this I don't know I feel like very nervous because I think that I am with a very very smart guys people and it's like crazy but that day that night where I was with the East Latin Community speaking about the marriage what he's going to do everybody was very very hyped then we saw the panda and was okay it's done let's go to sleep so great job guys great job and I think thank you to everyone who's doing those translations and helping with that education we can't keep up with all of it and it is a community effort it's it's really brilliant uh this might be like a random question but can we have more documentation resources for future core developers um because I've looked around and it's very hard to find and I myself would like to volunteer to take that task and would love to create a documentation of tutorials and road maps because I really want to work on that but it's very hard to find like a clear path to become a core developer okay this is a great time to give a shout out because Mario just came and he is actually one of the people who leads the fellowship program for cardiffs um like um thank you um have you heard about a protocol Fellowship uh it's exactly answer to your question oh you were I'm sorry about that but you can still participate so this is the thing so like um so uh if you didn't protocol Fellowship is a kind of an internship program where um uh anybody can come and work start working on a project and in a way that we it provides um certain mentorship from many of folks who are sitting here and other core devs and there are also resources so if uh with the uh the whole uh later Fellowship is coordinated via repository on GitHub where there is also suggested reading uh there are a few things they put together but I agree it's not easy that's it's a high wall that you have to go through but so we are I believe that this might make it easier so there is uh there is a lot of things to dive into and uh the the reading in the repo can help you to look into what what uh makes you uh what you're interested in and then uh you can just start contributing because so the the calls and everything in the even if you were accepted it's still open you can join uh if you are not accepted you just don't get a stipend uh but you can still come and and if you work on a project and over a few weeks we see that you have valuable out output uh we can still uh give you this type and as well uh but it's fully a permissionless you can come to the calls propose idea that you want there there are calls where you can propose idea in an issue similar to ACD uh that I would like to discuss this and uh we'll invite some of the mentors to help you with that give you some guidance so yeah hopefully it can help and if not that well and uh we have like one of our projects is also card development as well where we we are very happy to guide you over as well um yeah we are always hiring new interns so I don't know yeah so this is like sort of like should be your base layer for where to find more cardiffs related or like how to be according um although that was kind of controversial where um I think lane or I mean yeah I mean it was like oh he's a cardos can I be a quarterback um yeah who else ever be a hackathon for this sort of thing uh maybe like a three-day thing event where people can work on funny stuff we should do that because Kristoff wanted to do one in like never mind hackathon uh but it was like it was supposed to be internal but I'm very happy to take this over and um do sort of like a chord of uh hackathon and I mean Mario should definitely collaborate on that Thomas is okay with that because he's like my boss right now because I'm leading the internship program so just quickly I was going to say um it's a lot of the open source repos also have tickets that are marked good to start development on so that's another Avenue it does get taken up by contributors and we review and give feedback and help and so there are a few averages but it is a big it's a learning curve um so we were working this weekend on the eth Bogota on some hypothesis regarding the new proof of approval stake system and one question we written couldn't get answered was now with the new approval stake system is how the Box the blocks get built is it still purely an economical incentive as where they choose the highest fees for the or the highest prices to include in the blocks or are there other incentives include included as there's an increased risk of slashing so they the blog building doesn't really lead to the slash increase slash increases are only related to the double signing like signing two different blocks or attaching to two different blocks of proposing to conflicting blocks or attesting to conflicting blocks so they yeah it's it should be economical incentive it should be a line incentive something that is very natural so the blood Builder is looking for the payout and collects the transactions that are paying the most uh plus there might be any not clearly economical not Financial but still quantifiable benefits right so Thomas is right about slashing there are inactivity penalties which are often confused with slashings which you can incur if you miss your proposal and for example if that latency is very high because they're using an external block Builder surface um so that's one incentive for people to use lower latency Services it should just be your or not but I do think that's part of the whole MEP discussion and how we make homesteakers as competitive with regular stakers when it comes to publishing blocks so that they get adjusted timely and they're not missed and larger blocks obviously and they they are they cost more expensive they cost more time to propagate so that might play a role thank you I just wanted this I was just going to circle back very quickly to the question about how to be a core developer and I wanted to say that there's I think there's two things to consider the first is just follow all core devs the best of your ability I think orienting oneself around like what's actually happening in the protocol starts to make it a lot clearer like where are places that you can contribute to so doing that and then I haven't talked to a core developer in a long time who doesn't have a long laundry list of things that they would love to happen that they just simply don't have enough hours in the day to do so maybe once you're feeling more oriented with the direction of the protocol to try and just reach out to a core developer and say hey you know this is my skill set this is where I'm coming from you know do you have a project in mind that I might be able to help with and I think like once you start doing a little bit of that and showing that there's like you're creating value then core teams love hiring people so this is uh this is what I would recommend all the tiny note on that about like following your devs um as the guy who runs it the first like six months or so it was my job to attend all core devs I just like didn't understand anything that was happening and like it was literally like too intimidated to like speak up so like if that's your feeling um that's normal and if you're smarter than me it'll probably not last six months but like it there's a lot of just like implied context that I don't know it's really hard and I felt really good about myself when Danny Ryan told me the same thing when he started I think before he started the EF he would attend the Casper CBC calls and he would just share links in the zoom chat he was telling me like you know when somebody was like oh like this paper came out he would just like Google it to be the first guy to share the link in Zoom chat so like yeah the calls are like hard to it's not like a good way to dive into it I haven't found somebody um so if you're like if it feels weird for a while uh that's that's kind of normal um I have I when people ask me any questions I always throw in these at random ideas I think this is a good idea just be extremely obsessed with like eat Research Forum and to a point where that you read The Forum one two three times and then take notes to like like basically where the notes that you can understand then you can transfer notes into blog posts and then you can share the blog post to people and then but but when you're able to do that you you like you can actually be fairly you can't actually be very knowledgeable at that topic already which yeah and then other things like just just podcasts in general like just like pay attention to like quartet podcast and then take notes on that and then also share your notes because people will actually appreciate that because not because not a lot of people have come to watch like YouTube videos and listen to podcasts and stuff people will prefer to read notes and just make sure to share everything on Twitter that's where that's where the hype is and that's like how you can get involved and go to events and just like speak up or even take notes and then like even DM to people that's like how you can basically get started also great way how to get even closer to the people in the ethereum it's just volunteer on a conference that's basically how many people in the ecosystem including me started and I feel like that's the way how you can get even closer and whether that's like volunteering on the conference itself or you can just even volunteer on a calls and you can like find like a client calls and then just like hey like I want to take a note or like this is my skill set and like this is how I want to help you or like I found a Bunty uh like I found a bug in your code or something or just like get involved with the GitHub repos yeah I'd 100 agree hi I'm Christine um I'm a researcher at Galaxy but on the topic of Youth core Dev calls I too definitely did not understand anything for like the first couple years of my time covering these calls but it takes a while um I think one thing that I thought was really interesting about covering the merge and being on these like watching through live stream over the years that it took to kind of like get the merge going is how over time like the process for figuring out what goes into the merge and who gets to build clients for the merge increasingly become like a smaller and smaller and smaller team um so like in the beginning there was like probably there was like there's this article on coindesk talking about like how there's like eight or nine different client teams like trying to build for the merge but a lot of them dropped off once like I think there was a point in which like the the repo for how ethereum's consensus was going to happen got like to totally overturned and that made a lot of playing teams mad and so then it like shranked down to four and I think the closer like the client teams got to to the merge it was very it was very clear that like there there wasn't like really much more discussion to be had from like just anybody so like when the Discord channel was like privatized like basically like no one talked because we really have to focus on the merge right now and when they started to become like differences of like client teams Readiness for the merge so like some Clan teams were more ready than others had more features ready than others I think they're the differences between like preparation and resources for each client teams got a lot clearer like the closer it came to the merge um so I think like moving forward and looking ahead to some of the other bigger upgrades um I guess like I wanted to know your guys's thoughts on how to like on basically what the new process is going to be for eips and stuff because like for the eth core Dev calls for the last couple months it's been clear that it's just the merge but now like there's going to be so much to discuss so much about ethereum's roadmap um so I thought that it was like really like part of the the whole topic around like ossification like the more decentralized this process is the harder it is to make changes um but clearly there's like some amount of centralization that's needed and that we've already seen to make the merge possible and so now there's Shanghai coming up so like will it still be like consensus layer execution layer like calls or how are we thinking about governance I guess moving forward to to to start to like um yeah pull off some of the other big big road map items wow there's a lot to unpack in there um I think High short really short answer is like slowly iterating from what we have like I think just like the merge itself was kind of a feat of governance to some extent to get like mine kind teams to work together um and agree on like uh like agreeing on the big stuff was easy for the merch I think everybody wanted to do it um like all the tiny things I don't know I have latest valid hash like burnt into my head from typing in the El Cortez agenda um like it's just like this thousand tiny things where it's like the coordinations was really hard um I think the other thing is like and and we're about to get into seconds it's like balancing like large protocol changes so something like the merge something like sharding something like stateless with like smaller things that like bring it out of value as well I I think this is where most of the tension probably arises like different prioritizations there I think so I'm curious to hear from Dan crowd then crowd you have like some like more radical views about the process than me so yeah and you haven't spoken so far so I think it's a good it's a good cue for you um I mean that's a big jump but yeah um um I mean my view on all core devs I mean like I mean uh I think the big thing that I I feel is missing and that I want to see is um representation of like ethereum's users and the whole Community rather than it mostly being focused around one side of the of the um of ethereum which is the development um and I think that's uh that's a big thing and we would see very interesting and different proposals if we had more voices like that on the call also the app process is being like it's being improved over time and right now what like not like we but the ipip group is working on and uh alongside with uh ethereum cat holders uh it's pretty much that they are going to like sort of fork or like separate the core eyepiece from the other year season like are different aips and then eventually yeah but like I remember like we've been talking with like team and some other even like Hudson I think you were there in the group where we wanted to separate e uh erc's from the eaps um oh Jesus I mean also happen we we did not use the stage because we went to like be everybody on the same [Laughter] okay thank you um so pretty much we wanted to separate erc's from uh eaps but then it ended up what ended up happening is that we ended up sort of separating core IPS from the rest of the eaps that's exactly right and um there's been there's been years and years of debate over whether to separate eips from erc's and a lot of it the biggest problem I'm finding looking back is that there wasn't a steward to be an ERC editor I mean there are also EIP editors already but there are like two or three people at this point and Micah doesn't want to do erc's anymore like he's been open about that I mean yeah there was like many people that wanted to sort of do it I was even like one of the people that wanted to like do it myself on behalf of magicians but then like it kind of fizzled yeah there was there was like miscommunication there was like a lot of different problems but either way I'm glad that it's getting separated now that's gonna make things less confusing when people talk about eips and especially is POS uh because back in like I think we had this discussion and uh like with Mario's right at the Amsterdam where we started talking about how the EI process will gonna look like and that was like April this year um and only basically pretty much got as answer was that it will be consensus driven so not not AIP process as we are used to right now which is by the way described in the IAP one which you guys can find on uh eip.etherium.org um yeah can I say one more quick thing on the eip's I I guess it's like worth separating like the tools from the process like sure you know like we can split out the RCs and I'm very bullish on my executable specs for for the Executioner like there's a bunch of like mechanical changes we can do to the process and I think they'll be better but that's different from like how do we actually come to consensus on the thing like whether it's an EIP or the yellow paper like a consensus spec PR um you know that's like a marginal difference I think that so one thing I actually really don't like about Cortez is that it's calls um like my like and the reason for that is like um calls are hard because for they optimize for a bunch of weird things so like the optimize for people who are awake at the time who are like uh good English speakers who like are very like eloquent and like can like think on their feet and and like respond live during the call um I think this and also they're like not very scalable we can't have like 90 people on a call um and so like to your point about like having more more of like the community involved it's like that's something where like moving the calls are good because they give like a forcing function and like some rhythms like I wouldn't take them away completely but moving to be like more async is something I've like I try to think a lot about and you know so for Shanghai we have like this uh tag on on these magicians and like you know anyone can tag their eat there Klein devs can review it like I can't force Klein devs to like look at your VIP if they don't want to like you know no one can do that but it's like at least there's a list and they can scroll through it and like if it sounds good to them it might be like more accessible and maybe you wrote it you know at 9am Vietnam time rather than like 4 a.m during yakodev awkward devs so yeah I think more async is like one actual tick like thing we can do to make the process more open um yeah into it you don't have to like okay okay what what's the next topic Serge Verge Verge all the big stuff so so so so now that we've talked about how we are going to uh to come to consensus on these new upgrades and new things we could maybe talk about the new upgrades and new things what's your favorite new upgrade it's enough segue for you yeah sure hilarious what's your favorite new upgrade um um that that's that's pretty nice I'm okay maybe okay a better question on like the new upgrades um I guess I'm curious like Yeah from from client team's perspective like how much have you been thinking about new upgrades because like everyone on Twitter obviously talks about 4844 a bunch of people not in fine teams have been contributing a couple incline teams have as well but like you know mostly like we shipped the merge a month ago um you know like it's not a lot of time um so yeah how are y'all thinking about like what's next or are you trying to not think about it as much as possible and you know decompress with emerge yeah so I I kind of think our main responsibility is our users right now and uh so uh we have a bunch of upgrades coming up that oh yeah okay hi um uh we have a we have a so forget at least from my perspective forget it's the most important thing is the current Network and it's not the it's not the future and it's not uh this it wasn't the merge and um we want to make sure that the current network runs and the current network doesn't go down and it's secure and it's usable and it's uh decentralized and you can run your own node um so uh we have a bunch of uh other things coming up to improve uh things about around the database in gath the the state the way we store the state and um so yeah I'm really excited about those and because we've been focusing kind of focusing on those we haven't focused too much on the upcoming eaps um okay okay like in general the team uh I I personally also like I I started implementing 4844 in Lighthouse wrong client uh but uh it was it was a learning experience and I I also worked a bit on the Casey Jesus ceremony because that was just interesting to me um we I think get this in a fortunate position that we have a lot of outside contributions uh so people actually if they if they propose an EIP they usually implement it in Geth and so when when like the time rolls around and we have to uh uh have the implementations for the eaps we have something to build on and um we're in a very good position there compared to other client teams and so we can kind of focus a bit more on testing making sure that the spec is correct all of these things I I think I drifted very far from the question yeah cool um how we feel about upgrades um I think we're generally Keen I think uh definitely Keen for withdrawals which uh Mark is working on um I I kind of feel like the merge is not really finished until we have them in we kind of have a bit of an outstanding promise that we're yet to fulfill to the stakers um so definitely Keen to get that one in um without even saying like you know what do you want to do after the merge because it's not really after the merge for me until we've done that um yeah so Keen to work on that Keen to get that in soon definitely Keen to get 4844 and I think that looks really cool um personally not super Keen to rush it I think it'd be nice to have a bit of time like Maris was saying to kind of watch the network um breathe um yeah so definitely Keen for upgrades sorry yeah yeah that's right um yeah we we have um like Sean's been working on it um Maris has been working on it for Lighthouse um yeah you're gonna put in your time sheet man um yeah so we're keen I'll uh pass it to the techu yeah I think I really support Paul's point on the the next thing we do is withdrawals like it's got to be done I I don't think it's reasonable to put in bigger things that are then going to delay getting withdrawals out we made a promise we shirked on the promise a bit and you were all very forgiving because we got the merge sooner and now we're going to deliver the promise we've got to come through on that um but I think the thing that really comes after the merge is the use of support for the merge and the optimization and the cleanup and the learning now that we're actually seeing it in the real world for real there's a whole heap of stuff that we can now go oh we should make this better and it's not going to be protocol upgrades it's just client Improvement and so on so that's going to take a good chunk of time but I think we can um start looking at a bunch of other things as well and so I think 4844 is probably getting the The Lion's Share of attention of the next big thing after withdrawals yeah I think that withdrawals are absolutely must and absolutely the most important thing to deliver at the same time 4844 sounds so interesting that it starts distill the Thunder and and I think this may be even it's it's a bit dangerous we should very brave man sitting between photos yeah exactly uh so so yeah that's that's why it's so interesting because there's people are so convincing in delivering those Visions uh yeah I think that's uh coming back to her Netherlands team thinks about the next delivery I almost would like to to activate Daniel here to tell about his like plan of of delivering them so I think it's uh in our case very similar what I just heard from other teams so you right now I would like to relax a little bit and focus on improving our client yeah so the marriage was extremely stressful to be honest for the whole team and now people want to do things that you know you know let's say slower a slower Pace yeah and additionally we would like to clean up a little bit Yeah because there was no time um I know I don't know if you are aware but like never mind a few months ago it was completely different uh Team it was undersized very small at some point there was only one guy Marek working on the merge which was crazy and you know I was really sorry when I joined and I you know uh met my recognized okay we have to do something with that and yeah now it's we are in a completely different State uh we can you know improve our client a lot we have a lot of things that actually we are excited about and they are not enough I would say one-to-one related to to Shanghai these are the things like human yeah like database Improvement our sync Improvement you know our robustness of the clients these are the things that maybe are not so excited exciting for the community but they're exciting for us and that's we are mostly are talking about right now and there are also things like you know documentation uh Community Support user support these are things that didn't work well in the past and I think in general it should be improved not only in nethermine but in the whole Community yeah so this is what actually excites us right now and in terms of particular eips we already started you know investigations but you know taking it slowly you know have fun with it like four eight four four is you know there is one guy working from our team that's I see that he's really excited about it that's cool there is we already started with travels we have some kind of draft implementation and we know that maybe it's gonna change but yeah why not to start playing with it so yeah in general yeah we are in much better State than we used to be and yeah this is what we are doing right now so uh yeah I can give you uh an additional perspective from Minority client like lodestar we're pretty much in the same boat I guess with like nethermind where before like at a point where we haven't even hired the people that you guys have at this point so in terms of time we really haven't had as much time to really think too too far ahead we're getting most of the stuff from you know you guys in in the community and such but uh technical debt is definitely a huge thing for us as well we have a lot of documentation we need to update stuff like this which um you know it would be nice to have a Sprint that's just you know for technical debt and and and getting our client up uh to to par in that sense um but that's you know we're really excited of course to implement all the upcoming stuff um in the roadmap um like this was great for me because I haven't even specked up 48 44 as much as I should yet so that's you know where we're at basically so on the Nimbus side there is a delicate balance between implementing a new thing that are still moving targets and doing things that are expecting from client teams like testing and trying not to introduce regressions uh like we had a lot of um Point release in the past three weeks before the match and that took like all of our Focus but we do like um implementing new things as well for example we took the lead with load star on the light client thing so this is something that we will continue but we didn't start at all on anything related to the search The Verge The Purge endless Branch well we did try to look into kcg commitment but they changed a lot in the past two years so everything has to be thrown out and recorded um I I also think it's fine for uh these smaller clients to not be on the like brink of research um because the especially with these uh with these upgrades like like 4844 right now the spec will change uh a lot and uh it I think it just doesn't make sense for for smaller client teams um that have that need to focus on like getting their client up to speed um to also uh think about the research and and the iteration on the spec so I think that's something that we did with uh with the merge pretty pretty well is there was like the bigger client teams uh gas Lighthouse prism um uh never mind be so iterating on the iterating on the spec and the the other client's um kind of uh like like like following a bit and um I think that's a good way for the teams that have more funding more people um to take some of the load away from the other teams and also that's also what we're trying with uh with uh testing uh and and the ethereum foundation testing team uh where we're currently looking for new people so if you're interested in testing uh come talk to me or Mario Vega um yes so we we want to completely revamp the way we do state tests um to make it really really easy for for people to to implement State tests and uh to take some load of of the the client teams I just wanted to share from a small client perspective so for Basu honestly past month has been as equally hectic as preparing for the merge um with a bunch of major fixes for bug fixes so honestly we haven't even thought of a future eips honestly I think we even haven't gotten a chance to rest and a lot of the maintainers couldn't make it because they're still working really hard working on the fixes some even donated some of their opportunity leave to work on the fixes um so quite quite intense but I think afterwards we'll um hopefully get some time to rest and get all the maintainers together talk through what's going to be the future um you know works that we want to work on what really resonated me personally with the earlier Talks by iOS the subtraction part so I'm hoping that as maintainers we got to see which part of our code base could we actually subtract I think we're still talking about about what eips are we going to add and add and add to our code base but I think there's going to be some like future like you know Tech not future like Tech debt from the past to clear out to modularize um the the product itself and so looking into a lot of um I would say client Improvement is currently where I see maintainers are talking a lot about but yeah definitely would um would have to come talk about eips yeah um so I'm prism and I think withdrawals is important but it's also on the easier side and on the eip44 we have been lucky and optimism and then coinbase have been contributing to our code base so thank you for that but I do want to throw like a curveball I think like censorship resistance is equally as important as 444 and withdraw I just look at Mev watch info at 47 of the blogs are on the offback compliance right now so 47 of the Bloods or main net or have some sort of censorship resistance yielded to it right so I do think like there's something like before full PBS there's definitely something that we can do to make it better we do have some hybrid PBS we can do we can leverage the Builder API we can iterate very fast we can have some map boosts CR this type of thing and we thought this latest research post does point us to some nice Direction and point out B also has a nice research post as well so I'm very excited for that and I definitely definitely want to prioritize right now uh I'm very sympathetic to teams who talk about wanting time to uh to work on their client and handle their Technical backload and I thought that 4844 and withdrawals was a really good example of they both kind of individually look like okay we've got kind of an idea of how these two things are going to work but and then putting them in the same Fork actually does increase complexity uh for you know minor technical reasons I I guess you know we're talking about uh switching the forking based on a block number two based on timestamp and you know the the more uh places that you have to change in the code base uh the the more work that's going to be right so 4844 introduces a new transaction type which means you know more places that this forking based on timestamp has to has to happen for example so just an interesting place of seeing why you might get pushback on hey let's only do one major thing in this next you know Fork instead of two and and leave room for maintenance so so just as an example for this I actually implemented the forking based on timestamps for Shanghai which was like uh a 20 line change and I looked into uh doing the same thing for uh sorry for for withdrawals not for Shanghai um and I looked into doing the same thing for four eight four four and it would be like 70 different files that I would need to touch just for changing the uh changing the way we we verify the signatures and the sign up so um it's individually it's it's okay but together it creates uh even more complexity I feel like we've heard a lot of clients say that they feel that they could spend some time cleaning things up in their code base improving in you know improving things in their code base I'm just curious to hear from Tim and from other clients like how should we think about this in respect to the roadmap and all the things we want to do because it seems like we're consistently saying we need to ship withdrawals yesterday we need to ship four eight four four three months ago vertical trees all these things and it's not clear to me how to do that and balance and you know maintaining clients for the long term so well while we say that we want to slow down at the same time I'm thinking that nevermind is ready to to think like a big client like the one that is that is leading the effort on the exploration so so by the fact that we have the large team uh we can both keep cleaning the technical lab but also participate in the research and prototyping uh so so we've we've seen we've heard that from Mikhail talking about has been guys still there no no okay um so so he was thinking how much it was helpful to have the Prototype from Guillaume right and and how much Maurice's experimentations were pushing things forward um so we have those excited people like Alexa you know and that in mind and they they want to explore they want to experiment and this should help everyone to to push things forward and and these deliveries are critical and they're still time critical I'll be doing that in parallel even if the field will be we change this style uh that's that we do that a bit more mature way I think that maturity will come also from the learning from the merge and from the team being larger so I think on average the teams grew about like two to three times in the last two years on many of the clients teams which means that we should be able to ship faster than in the past and when we look at the last two years comparing to the 2018-19 uh we've seen that we've seen that pace and there is much more experience with the teams people delivered so much during the merch and they they are interested in now delivering the things that they wanted to work on the side and many of those things that they wanted to work on the side are the EIP is already are the items that are interesting like 4844 right so this will happen I think this will happen but it's also another factor that we need to consider yeah but like changing let's say 10 lines of code or 17 files two years ago was completely different than changing the same amount of files right now the code base is much bigger the complexity is much uh bigger and you know sometimes you know Small Change requires you know days or maybe weeks of you know research yeah and testing and testing especially testing here it's something that we need to improve and so yeah the teams grow grew but at the same time it takes much I think it's going to take much much time to deliver similar change as the ones in the past um if I can add something else and on clients the right now testing is not much like the experienced with testing is not much better than the experience introducing an EIP I think we need a a better platform to discuss like the bottlenecks of ethereum to understand it like the complexity of syncing of disk IO and so on and tools like Hive they are just a stagnant sometimes as the clients themselves when it comes to making changes or improvements um maybe we're talking about awkward off changes maybe you should have like a regular breakout for testing maybe we should have more of this platform to discuss how we get out of this this stacked up into a place where we can be excited about new eips so so one thing about Hive is that it's currently maintained by the guest team and we're slowly transitioning this over to the testing team so Mario wrote a lot of Hive tests for the merch basically all of the hive tabs tests for the merge and so as I said we're trying to increase uh we're trying to ramp up the size of the testing team within the ECM foundation and that should take some local hey I'd like that if your information is helping but I don't think the right solution is to limit it to one team no I agree so I think as like an open call to anybody if you are a testing team and like you want to work on this stuff ping Danny Ryan and he will answer you any hour or day any minute of any hour of every day about improved testing capacity and I think like I agree it's like a huge ball deck to be fair I feel like the merge we did like an amazing job there like relative to what it was before like when we shipped 1559 I was like not 100 confident I was like and then when the merge went live uh you know like I was expecting some operator to mess it up but not like the network to break like it felt like the testing was like super robust um and and and the challenge the challenge I think with shipping I'll live like this complicated stuff is often not like not just that it's hard but it's like it changes the shape of the network like it's easy to add the new OP code right and write test for it like we have framework for that and now we have and and like if you want to do something like blobs um we don't have like blob testing right and so we're gonna need to build all that um and then then we'll have it and it'll be easier to like you know grow the size of blobs or something but then when we're gonna we want to do I don't know like daily availability sampling we need like you need like always to build the new testing stuff um and it's kind of hard because like you can't build it in advance because you need you need to test something um so there's this weird like chicken and egg but do you think like like we were having the same conversation in 2018 in Osaka and like our capacity was like 25 probably of this so it's like I feel we've we have gotten better I don't know that it's ever going to feel better doing the work which is maybe my thing just like we just do more or better at it but it still feels like we're kind of pushing ourselves because like it's just hard stuff and you need to build it um and yeah like I mean you know the touch on 444 obviously client teams kind of tired you know want to take a break want to focus on withdrawals but like having optimism had step up having coin Rays step up like we wouldn't even be talking about 444 if this hadn't happened and I'm not convinced that like four years ago it would have been possible for like there were no L2 teams but like you know for like the Plasma Team to like ship something like that so yeah I think we're making progress I don't know that's ever going to feel better is by rough feeling so I drained from taking I just moved from over there um so the context um so I think the other Factor that's slightly interesting is there's this real cycle to Doing Hard Forks in that client teams in particular get swamped it's not really early on the research team probably gets one first then the client teams get swamped and then our work is done and we're kind of waiting on coordination and there's this lull and that lull is where we get all of our client optimizations and all the other stuff kind of done um and uh yeah so that's real opportunity and and a lot of the community coordination happens there there's there's a lot of time it takes to go from the code is ready and done to the code is tested in every possible situation and we've automated all of that in terms of the cross-client stuff and and the the level of detail we want for ethereum and then the code is actually ready from the community's perspective and all the tools of updated and so on and all of those kind of happen to happen in sequence so as long as we don't shoot for a massive hard Fork we can get a you know a little hump of we can get you know say withdrawals done because they're relatively simple pick up a lull and then be ready to to pick up something big again um so it's not a case of stop the world it's just managing those cycles and probably the other factor is that teams go through that kind of cycle as well that you'll have a great team and you're going well and then someone will get a better job offer somewhere and you're kind of suddenly you've got fewer people on your team and you're rebuilding with some new people again and yeah all the client teams are nodding we've all done it it happens on every team from time to time it just depends where you are in that cycle as to how freaking out you are about the next hard book as well I don't know um I was expecting to come and try and like make a pitch for why it's crazy to do more than just withdrawals is a big thing in in the first half Fork after the merge but actually I've not had a single core Dev advocate for that so far so oh but maybe Danka oh no I moved within arm reach of the office that's the question anyway um but I did I did want to ask two um points about withdrawals um like mostly to consensus clients um so the first point is um a few people have said things like oh it's a relatively small change and so my I wanted to just check like is it so um uh so one of the other sessions recently one of the points that was made uh was that um you know at the at the time that the um withdrawals become enabled also um withdraw key rotation becomes available so there's going to be an enormous queue of people wanting to do key rotation there's gonna be massive Mev from those validators who are trying to exit before um they get hacked because their key's been compromised over the last two years all kinds of other sort of maybe things you haven't about very much so do those worry people at all or not at all um and the second point I wanted to raise about withdrawals was around whether uh it kind of links the text out point that two people have mentioned is uh is there is there a kind of significant um quantity of tech get around the deposit process so so as as withdrawals The Proposal exists is to create a new operation for withdrawals it's not a transaction it's a completely separate type of thing um it seems quite natural you might want to just have a corresponding deposit operation clean up the deposit contract deal with the issues like kind of you know double counting issue it's all this kind of stuff that would make the protocol more understandable for future Generations is anyone interested in that or is that for later I heard some good arguments about cleaning up the deposit contracts to keep the supply in the balances actually matching all the expectations rather than looking up or like burning the the deposits and then minting through withdrawals so that's fair I do think deposits are user initiated and withdrawals are system initiated so they're fundamentally different but yes there's a lot of tech debt there and yes we will fix it in a hard Fork at some point um just to simplify like it's it's ridiculous the beacon chain is still voting on what it sees as the Ethan head after the merge and it's 8 000 blocks behind but hey it works right and we didn't have to touch it and that was good but we will have to fix that I'm curious to hear from the 4844 Maxis the thing about fart for four is is it's this complement to proof of stake in the whole dream of Serenity so we're very motivated to Shepherds at the same time I think there are goal posts and like the communication about the state of ethereum are not that clear and so I'd like a better platform for testing I'd like testing to be less stagnant I'd like to contribute to testing and often I see that some of the test tooling are locked into either a research team or the guest team of hives and if we open these things more like up and we communicate it and that's caused about these things if we I think we can make a lot more of these quick programs towards the states we're very happy to to work on Forex refer other complex upgrades um yeah I want to share my perspective on as well I think like we have heard a lot about tech debt this is which is like Fair these the the devs here like they have the best overview of that and that is like uh a very important point of course um but I think we also have a different kind of debt which is like right now we cannot serve the vast majority of people who might want to use ethereum so like I think like it illustrates my point from earlier that um we are having these discussions among core deaths and they are good and they're important but somehow uh they can't be the only input into the decision making um so I don't want to Clearly say like I can't say like we have to do 4844 as part of Shanghai uh but personally I would love to see it and I think there are very good reasons to try to do it and um and I think like only looking at the tech depth and saying like we can't do it because of this and we need to do everything in sequence um is is not enough in my opinion in arguing against it like it's um it's uh we we have to like at some point also start seeing the other side like okay so what what is the consequence of not doing it like my fear like of course like if we have say Shanghai for we managed to do it in February and then we can do like uh for it for free for a few months later okay like everyone's happy with that but like what happens if actually Shanghai does not happen in February it happens in June it happens in September or something when 4844 slips into 2024 I think I mean I would be fairly unhappy with that so like we should consider these scenarios and we should also think about what it means to ethereum yes it's like it's a bear market now so maybe we don't have these high fees as pressure pressing an issue anymore but I think they are still actually a pressing issue because right now maybe like we don't feel the pain as much because our the things that we have been doing are fine but still a lot of applications are not being built because the fees are too high and because they can't like the experimentation can't happen because I can't like do some fun stuff if things costs one dollar per transaction which I could do if it's one cent per transaction so I think like we should like be more willing to like think about this part as well and I would love to like understand how we can also like get that in that thinking into our governance Pro process as well so uh currently we're releasing artworks uh basically when it's ready so the more things we put inside uh the longer it takes to be ready because of uh testing for example so if we actually do withdrawals uh which are supposedly simple for uh the talk from yesterday uh was less reassuring regarding that um we can yeah maybe in February we can have withdrawals and then uh for 804 uh for the next one but if we put both together uh maybe it will be only in June um so there is a balance there so I guess one question there is like do you think it's impossible to have a yeah one fork in February and then another one like literally three or four months later in London okay well that's uh I mean one I mean this is like a discussion but just like one other thing I wanted to add just like to what Dan grad said is like thinking about it from the perspective of tech debt of layer 2 protocols and of Roll-Ups right like the yeah one of the kind of philosophical goals of 4844 I think was to kind of be a like the changed the change to end all changes sort of for uh specifically for warrior twos in the sense that 4844 introduces stuff like the point evaluation breaking pile and the concept of blobs and if that allows way or two is to kind of set their code once and they can literally write their code and launch it and then you know no matter how much we screw around with the yeah sharding design later as long as we kind of screw around within certain parameters Roll-Ups will be able to kind of you know breathe easy and know that you know they don't have to make like that kind of re-architect thing again right so I think there's uh you know there's also a value in trying to like get that phase done earlier because you know the earlier they yeah they can do those uh those kinds of changes that you know the more they can get to the phase where like you know they can start clearing instead of they have to know that like they have to clear eventually let's just it's so worth talking to layer two teams about that too I mean I'm sure they'll have their own perspectives so I guess we various kind of consensus that we want for 844 and withdrawals within the next nine months is let's say so the question becomes both together or uh withdrawal first and then fight over and so planning team I I will say one of the added challenges that the specs for 4844 and capella are not unified so like he's working on 4844 I'm working on capella and that's gonna be a hell of a pull request to try to merge these things and test them so they're kind of already written like they're separate just sure so one thing I would add with regard to hard Forks one versus two is that you generally with the hard Forks implementing something takes usually less time than rolling it out so uh implementing both withdrawals and 4844 in the same artwork definitely makes it longer but I think overall it would still be shorter than doing two hard works because you have a um yeah sorry so so essentially I think rolling out the hard work always takes two to three months of just while every client is yeah I'm not done yet let's test it tests are not done yet okay let's do a hard work this that's not hard Fork that's that that that's not so we kind of I don't necessarily want to say we suck at rolling out things but we don't really push very hard so if we want to roll out two hard Forks then you have this boilerplate time that will eat up both up from both of them so that's the extra I I just want to chime in on dunkrat's point from the coinbase perspective that's what I represent and I know that we're still here kind of building trust you know convincing it like I get it I get it like it's the first time you've had me in this room um but you know we've been we've been working with Proto for the last five months on eip4844 implementing an imprisonment spec uh prism in Geth and I think to doncrat's point the difference between like each one of next year and 2024 for a business like coinbase is massive and I think the way that shows up is we have products that we've built on chain smart contracts that we want to be launching like literally we want to be launching in Q4 in q1 of next year and we can't right now and that is because at the scale that we're operating at where we're talking about bringing millions or tens of millions customers into those contracts in our wallet products fully non-custodially it's just too too expensive most of our customers who are not in the US can't pay for it and we as a business especially in the bear Market can't subsidize the cost for them and so what that means is that in the context of these conversations the people who may be don't understand the technology benefits of decentralization or security they then go and say hey there's all these other evm chains they have sub one cent fees can we just deploy this thing on that like would that be a faster can get can that get this thing shipped in q1 and it's up to the people like me maybe or others the company who who understand the whole process and why we're doing Roll-Ups and why this is such an important investment from a decentralization security perspective say no like we need to wait we need to wait for this to have the right solution and so I think waiting until the beginning of next year you know first half of next year I feel like that's like a thing we can hold we can make it happen waiting until 2024 is really hard that's going to be a real challenge for us and so I think I think from from where I sit um our feeling is like let's make the list of all of the things that all of the people in this room feel like we need in order to feel comfortable and if that's better monitoring of the network so we can understand bandwidth if that's better testing so we can feel more confident in the change that we're making uh whatever it is like give us the list give optimism the list and we're ready to throw resources at this and support this and I know that again we have a lot of trust to build that will come through in its work a year from now I hope that there's a lot more trust here but I do want a voice like that's the impact for for a business like us and we're ready to come to the table with you all and work together to figure out how do we make it so the end result is tens of millions or hundreds of millions of more users are using ethereum by the middle of the end of next year so excuse me [Applause] I I have I have two rebuttals to uh to to putting uh for it for four in into Shanghai um one of them is uh I don't I don't I don't see any Roll-Ups that are trustless right now uh most of them don't implement the the fraud proofs uh they're putting the data on chain but the data is not really used for anything so uh like you cannot use it to to prove that the that the that the Roll Up is wrong and so if we Implement Bank sharding we basically say to the community use these Roll-Ups but the Roll-Ups are not secure um I think that's kind of a it's a minor problem it's it's uh the other thing the bigger problem I I see is that from yesterday's conversation just doesn't seem ready yet so withdrawals the way I see it are basically done they're like they are implemented in some of the clients already um the specs seems to be pretty stable and with Deng sharding we recently had a new fee Market change that I don't know how much thought has has been put into it from from my point of view it it like the the fee Market change at some some 1559 like uh thing and from my point of view it looks like we have a hammer the 1559 hammer and now every everything looks like a nail and um so I think there has to be more oh oh yeah yeah so sorry sorry yeah okay you know we want to do this like this change was like in the pipeline for like months I think it wasn't like something we suddenly came up with this was clear we wanted to do this and we do have the change in when they didn't get in prison in a live devnet okay yeah yeah so but those are the things that those those are things that are uh that we're not not quite clear to me and um so from my point of view we could ship with uh withdrawals easily January uh especially if we if we uh like kick out some of them yes now yeah okay it's probably a bigger change for the for the consensus layer I think for the execution layer it's it's pretty uh pretty much done and um okay okay okay maybe I'm I'm totally wrong here um but I I agree with the argument that so even if we were to ship uh withdrawals in January um I think we could own the ship uh tank sharding um September of of 2023 if we were to do both we can probably ship it somewhere in the middle and so actually would if I if I really have if I really think about it it would probably cut to two months uh to to both of it even even though I don't like it and even though I don't like to admit it um but I think it might be the right thing to do you have is probably that it is a bit more risky to do both at the same time and I think like most people would probably agree with that like that making a bigger change definitely adds to the risk of the hard Fork itself um and I think we also should have an honest conversation on in which cases we are willing to accept those risks because what we're doing is just so important that maybe like some risks have to be accepted as part of doing it yeah Paul from techu Team just on that I mean there's a couple of aspects maybe we need to get better at doing hard forks and releasing them honestly it's a long time between code completion and getting to getting to that gate that may be a thing we need to address but the other side of it Playing devil's advocate I understand that 4844 might be important and if it's relatively well defined there's nothing physically stopping us from doing that first and just delivering 4844 and not delivering withdrawals I mean it's a it is it is an actual option that we have no I'm playing Devil's Advocate sure Paul is not representing the views of the teku team this is no but it's a fair comment this is purely my view but in reality if two is too hard and we want to deliver this early in a timely manner to not stuff over businesses that is an option that we do have yeah we should absolutely focus on doing the most important thing first always um I think the point that's come up a couple of times is you know when we ship withdrawals and it's actually when we finish code completion because running through test Nets doesn't take quarter of time we put out a release it should be pretty quick and easy there is coordination cost and it consumes all core devs for a while so you've got to know what's coming next if you're going to paralyze it but it's code completion that's the big thing I'll give it to them uh in between I just pop in um so in my opinion withdrawals are kind of specked out so it I mean there are variations but it's simple it's really really simple whereas with the 4844 that will most definitely take a lot more time to spec out and it has a lot more potential problems with denial of service and everything it affects Network so withdrawals that's just a tiny consensus change you know tweak a bit the data structures and done with uh with 4844 that has a much deeper implication so I think it it will require a lot more work and in my opinion it would be much simpler to say that okay for withdrawals are definitely going in and maybe give a cut off that if we for some reason 4844 gets complicated and we cannot finish it by month X then just say okay we're rolling with the withdrawals first and then whatever whatever the other is ready so quick question from me because I heard the term a few times like about code completion and then rolling the the change and that we are very slow in the second part but you know I I joined right yeah I'm I'm a new guy but what I observed with the merge we we shift shift in middle of September but what I observed flag from my the definition I know the code was not completed in August and some teams were like pushing the changes at the very end and for me like when you say that code is completed you know you you've been testing you start testing and you don't introduce new changes yeah so the code is stable so it looked a bit different from my perspective yeah I agree the merge was not a case where we were called complete three months before um so yeah but but we have done that before right like and and you know again I think burden London was like a good example as soon as we were kind of code complete on burden we started working on London before like it shipped and part of the reason for that three-month delay is not like for the client teams it's for like everyone running your node like folks like coinbase because usually like people like and not the coinbase here like people just don't care about the hard Forks until they're like announced on a blog post on blog.etherium.org um and then they're like holy and then they like message me and they're like oh my God we need to like upgrade all our infrastructure and you know and especially so if like it's a complicated hard Fork if it's just like introducing a new OP code um they need to upgrade their notes and still sometimes you know they're like oh we need like two months to do that or something so it's it's worth noting like we can set our schedules somewhat independently of like the release schedule um but that doesn't necessarily mean you want to like do cold complete and ship two weeks later because there's still value in giving people time to upgrade and I I would also argue the merge was like cutting it close and um I think you know the merger's like a big change the environment bits the like proof of statements so I think there was a bunch of variables in that one um but if you do historically we've been like kind of slow but I think that's that's like healthy for people like peop people who like are not core developers should not have to look at this stuff every day to know like is there a hard fork in 10 days right uh diano basal maintainer um one of the ideas that you you sent me once uh Tim that might help because I'm hearing a lot of just talk about um lots of bandwidth Lots needed in in the layer one um what if we prototype some of our ideas relating to things like evm and transaction formats on a layer two and that way the libraries and the tooling could adopt to that on the layer 2 stuff and then all the downstream stuff is ready and then layer one can implement it when they have the bandwidth um and not having to rush in and get those in so you can get cool things like BLS transaction formats sooner rather than in 2024 or 2025. I really do like the idea at the same time via Slayer 2 optimism especially we're trying not to stray away from layer 1 where we create conflicts in development we are literally just trying to if we could we would run GAF without modifications we don't want to be different and often I just like client teams they're one developers to be more receptive towards changes but also testing and like creating confidence in these changes as there to authorize you get this conflict of interest where okay you want to make the change to be special on new and exciting and cheap but you you're not shipping the ethereum dream yes like and especially data availability like foreign we can't even ship it on Layer Two every like we created layer three situation with a much much smaller validator sound when we go through that big list of uh proposed EIP stuff that's coming up in the next thing like half of them are just evm stuff and that stuff is easy to push through but then you get into the situation like we had with subroutines where it was implemented it was ready and then the week before the first test net all of a sudden it gets ripped out I mean I I like the idea but your voice in the exact concern how do we get the commitment that if it's done it will ship on layer one without substantial change because then if you have these changes on Layer Two and they change substantially then it's a burden on the layer 2 Chain if they put it on on one of their Premier chains rather than on testnet so one thing to answer here is that I think it's very from the outside it it's a bit strange because it kind of looks like there is commitment to go with an EIP and in reality what at least what I've experienced is that most layer one most execution clients won't even touch any IP until somebody else actually implements it and verifies that it's correct so usually you have the EIP authors which kind of has to beg one of the clients to please implement it and and everybody is just waiting for that client to implement and find all the corner cases and when when the code apps say that okay we are releasing this EIP in three months and everybody goes into this holy mode and okay let's quickly implement it and then we kind of like pursue this dream of Roll-Ups I was like like comparative execution layers on top of a secure data layer that's minimal and like widely decentralized but right now just we don't have a layer 2 evm standards but I mean what if you wind up in a situation like coven where you had a part of the chain that ran with wasm and then all of a sudden wasm's gone then all of a sudden one client they can run Watson's gone and you can't run the chain from zero is that a bad thing is it an okay thing I would say it's pretty pretty bad so it's it's basically just shoving teched up to layer twos and then the cost is incurred by users being confused by their smart contract works on 110 not the other 10. right oh just yeah we can wrap up here we're like yeah yeah we can I mean if there's final comments we can do that then maybe we should take a short break but just want to make sure we wanted to keep the last hour to discuss actual eips um because we we don't usually have like forums to do that with all the client teams so um if people want to have less comments or take a short break you can do that but let's take a break for like five minutes and then let's have the Shanghai AAP outers lineup or switch the spots with the yeah thank you okay go to the bathroom [Applause] 
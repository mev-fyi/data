foreign [Music] [Music] [Music] [Music] [Music] thank you [Music] foreign [Music] [Music] foreign [Music] [Music] good morning [Music] okay okay thanks Puja um welcome everyone to awkwardev149 hopefully YouTube is working um if not this is being recorded and um I can I can upload it after but um yeah a lot on the agenda today um I think high level trying to figure out what Shanghai looks like is probably the main thing um and there's been some a bunch of work on the eof side on the 4844 side uh so you can share some updates on that and then there were a lot of other VIPs that wanted to be considered for Shanghai um so I told all those people to show up today um so there's four main ones um Micah you also had this agenda item about just talking about the fact that uh running a node is getting uh more resource heavy and and um that we should address that uh so we we can talk about that as well before um the the Shanghai inclusion conversation so that you know we have that context assuming we get through all of this in less than 90 minutes um Miguel had a quick engine API uh proposal that he wanted to discuss um and I think one thing that would be valuable is then talking about how we approach devnets for Shanghai um if we have a good feeling for for what's likely going into the fork um and then there are a few other topics so uh mostly just uh how we think about sunset in robsten and potentially test Nets more generally um and some updates on execution specs and the tests uh generated for the execution layer um I guess to get started uh last Friday there was an eof call um does anyone who was there want to give a quick update on um sort of what was discussed and where things are at uh with eof right now Tim you broke up a little bit there I don't know if that was just sorry yeah I was saying um there's anyone who is anyone here who was on the eof call uh last Friday and want to give a quick update on where things are at with that hey was I the only one there that son is called I was there no um so a lot of it so circled around the debate of big eof versus little eof one of the big takeaways is we're going to Target the ethereum JS test Nets Shandong and we're going to try and Target big eof is our first and preferred approach to ship eof um Shandong um is a test net uh Tim wrote up the document showing that it's kind of on a parallel track it depends on everything in Shanghai may or may not includes deposits or not for the test net but in essence Shanghai is is the most important what's driving the release which is deposits and the other features which would be um 4844 which is parallel to the eof big eof changes um depend on Shanghai and the premise being if we can get things proved and shown working on shangdong and tested and all the clients implementing it then we could move it into Shanghai if it's certainly not and if it's not early enough it moves out to Cancun so that way we've decoupled development and validation of shipping it from whether it's part of Shanghai so the discussion about deposits could be on a separate track um all we included in big Shanghai was just relative jumps and function sanctions we did not include um the uh stack verification because that's still kind of in beta so those are the only two big things we added into eof but those do change the nature of what the eof container looks like and because there was a desire to only do one major change in the next X number of years um we want everything that's an eof big from everyone on the call speaking for the people on the call so let's just do it in EOS big and ship it as soon as if possible I don't know if I missed this part but I thought stack validation was part of Elf big like it's listed on the Epsilon eof list so on the call I think they said it was just not quite ready for implementation um and the thing about stack validation is if we do everything else you can still write code that validates the stacky they can still look at the benefits of linear compilation with a subset of stuff the validation API would just reject stuff that didn't match that so um that can be added later and the real issue is it's not particularly specified in the specification way it only has a reference implementation so I think that's what's holding that one back I don't know I mean what do you mean it's not specified there's the EIP I've mostly implemented the EIP at this point the specification specification says is you know check the stack height in each instruction for something that's uh deterministic and repeatable there would need to be an algorithm to find that this is what you do and the algorithm that is in the reference implementation is actually not linear it's like order N squared or something and so there's better stuff so it's not quite ready to ship would be the conclusion okay uh yeah I I don't know what the like timeline of making a relationship it felt like to me that this is something that we can like resolve relatively easily like all the other eof eaps have like some small changes that need to be made just now that we're under this Assumption of bigger eof and those are things that are straightforward whereas you know if we don't ship the stock validation we do have to increment another EF version since it would be possible to deploy contract code that stack overflows um whenever you do a call up uh can I just make a question here um to dump it down a bit uh so whether or not stuck can overflow or not I'm thinking from like pure evm perspective that's that's a pretty uh negligible check is it important from like other uh other points of views such as uh you know verifiability and Analysis so if Done Right stacked validation can allow for as per Greg Colvin um linear compilation time to transpile it to something like machine code um so if you have if you can prove that and that also provides a subset that then if you have stack validation tools like solidity and Yule can only create um EOS and can only create evm code that can be linearly done and it gets rid of a lot of compiler bomb attacks where people are going to try and get it um it's you know Java's perfected some of this and brought it into their compiled process and they've got the same rules on their jvm it's really there's like a whole section on their spec about that and that's I think I'm gonna go ahead now for any for any compiler they can always validate respect right so and that's enforcing stack validation on contract deployment which only makes a difference on runtime or well if you analyze Live code on the blockchain right if you reject yeah if you're going to be rejecting um yeah stuff that doesn't validate we say are we going to reject stuff that doesn't validate or we're not going to validate um yeah my perspective as like having you know building the evm uh I think the performance gain of knowing that this stack cannot be overflown is negligible so therefore I'm wondering is there some other aspect to this problem where where this actually makes a difference I I kind of can occur why I don't think it has to be in um the Epsilon folks who are writing it I think that was Powell um he kind of agreed that it wasn't quite done yet as far as the EIP yeah there's a skeleton specification out there there is reference implementation but it's you know he seemed to feel agree that it wasn't done done and was happy with it slipping out okay that's fair I think that it's just like you know one additional thing that a small amount of work could make it so that it's ready and we could avoid having you know this immediate thing that we might want to make a version change to in the future right the train door is not closed on big eof but that's not what we're focused on right now but if a finalized algorithm comes in that is linear and specified you know that's that's what is needed to move it forward and I think that's what he's working on right like it's it's possible to add this to eof devnets basically if it gets ready um before before Shanghai right yeah or whenever ships right yeah um Andrew you've had your hand up quite a while um yeah we briefly touched it um on Friday but I would like to highlight that one important uh task for the big eof is support and solidity so that would both verify that um that the eof makes sense and we can compile solidity contracts into it and also ensure that there will be some real contracts in production because like I would like to avoid having it on as a theoretical uh thing that nobody uses and yeah uh to my mind that's another thing like not not only implemented in all the L clients but have it like full good good production level implementation and solidity yep I I concur it does have small eof support which is relatively simple so the big eofs putting into functions is not a a small compiler change if so I mean if we're gonna hold eof to the standard I think we should think about holding other eips to the standard and I don't think that historically we have required a production Level facility implementation for things and I generally I generally feel that uh a commitment from the solidity team that this is a good thing that they plan to implement it is usually usually suffices uh the problem with that is that what a kind of um reiterating matters is concern is that if we have some like the if we accept you or if that will be in the standard forever and then solidity commits to to supporting them theoretically then uh it turns out that because of some Clerk of the uif as is they cannot fully support it and blah blah blah so we'll have to have a new version of your app but the the intermediate version uh stays there forever so that that's to my mind that's a very important change to the evm so we need to have sanity checks on it one of the Senate teachers so I I see solidity support not as something not not as an extra but as a sanity and an essential sanity check can I just um so I mean Alex Brooks isn't he both very involved in the Eos and very involved in solidity yes and I think I don't know if he or Chris one of them is is like the head of disability that I think maybe wrong here um which to my mind kind of speaks that the other solidity team are probably very well uh you know first aware in this proposal yeah and the I believe Daniel is yeah I would say that just awareness well at least that that's my position that awareness is not good enough uh like a a working compile compiler uh into eof without Dynamic jumps is like to my mind at least it's like a requirement before releasing it on to the mainnet foreign testing anyway so I would also really like to see and I think yeah so I posted this in the chat but generally I think the perspective was there like uh they support it like the the the first few eofvips didn't affect that much uh the second ones obviously required more work but they seem generally um yeah supportive although it's not clear like it's easy for them to support it so um we can definitely talk with them about it more and and um yeah I don't know that any one of them is on the call right now respond to the comment my client made a bit ago that we don't uh hold other evm changes I think the difference here is that those other VM changes are usually really small and everybody is quite confident that solidity will have no problem running them whereas this change is quite substantial and there is non-trivial risk that celebrity will not be capable of including this reasonably um and so getting slow to get in play this one first gives us that confidence that oh no there's no there's no hidden gotchas or unknown unknowns anymore like it can and has been implemented solidity there's there's mitigates all that risk honestly I was referring to 1153 whenever I mentioned this oh which one's 1153 this is transient storage how does this kill 1153 I'm missing that well if we're going to require solidity to have the implementation done in a production manner there's no implementation and of 1153 and solidity it doesn't seem like there's intention of making an implementation in the near future cool they've got it I mean I don't want to speak for them but they did say that if it's approved and goes in they will implement it um right but now we're saying that we're not going to approve things until it's implemented so there's a level of complexity that there's concern about on this other one um if there's a similar level of complexity concern on 1153 then I would also maybe block on it but I don't know if that's uh the perception here Chris right listener did Express uh concerns about the complexity on level 53. unfortunately I mean they're it's also implemented in Viper um already so it's a bit strange which one is index on 1153 is already in Viper key story it's much simpler than the container and getting rid of dynamic jumps I mean to be clear I I don't uh feel a need to has to be solidity but I do kind of agree that we should see some compiler implement it successfully what and so 1153 is in funded by Viper for me personally that kind of meets the bar of this has been proven that there's not a bunch of unknown unknowns that we need to worry about anymore right so I think and you know we we don't have to make a final call about eof or 1153 right now I mostly just want to make sure everyone sort of knows where things are at um it probably makes sense to move on given uh how much time we've spent all this already but at a high level client teams are working on implementations for uh these four eips uh that we listed earlier so uh the two original ones uh 35 40 3670 and then the addition of 4200 47.50 uh the other one for stack validation um we have some implementations but it still needs some work and then solidity support is obviously an open question anything else anyone wanted to share on eof okay um I guess the next one I'd like to get a quick update on uh is just 4844 so I know there was a call uh this week for that as well so um yeah does anyone here who was on the call want to share a quick uh update on on where things are at I can give a short update and others concerning if I miss anything so on Tuesday we had a 44 implementer score I believe the definite version 3 is on Turk and we are targeting end of November so after Thanksgiving I believe the last crypto apis have been merged but then there's some open discussion on whether or not to uh share the pre-compiled implementation as a whole as a shared Library to not have to do the decoding of the points on the client side or like in the evm implementation rather than in the crypto Library and then I believe Terence is tracking the open B2B changes on the consensus layer there are some optimizations that we can make during specifically the branching parts of the forecast 3 where we can have many different Beacon blocks we have something called beacon block by roots to fetch blocks on the existing Beacon chain and we may want an equivalent of that to fetch blobs and then there is some discussion or whether or not to couple the beacon block and blob fetching with this by rules method and I believe those are all the the big updates also the EIP was updated with some parameter changes which are still in this question and then going into the test Nets and with the further testing of mainnet's performance of core data and so on I think we get the data to decide on the parameters for 4844 and specifically I think the blobs by root is a blocker and the rebase on capella is a blocker blobs by root I think generally has consensus and I expect to be merged soon although there might be a finer Point around how deep you serve those requests and then the capella updates that are blocking the rebase being finished we're going to wrap up today thanks and I think also like on the last call when we discussed this uh we mentioned trying to like uh iron out the final sort of design uh PRS in the EIP I believe these have all been merged so like the the free market changes have all been merged um and there's was a PR also to change the output of the pre-compile I'm not sure if it's been merged or not but that might be the only outstanding PR on the El side um that affects the actual spec um I don't know it's Ms car here um I'm here yeah dude did you just want to get a quick update on just the PRC EIP itself uh sure so at least uh last evening I haven't had it on what not possible twice it is the pre-compile upper change was not yet much but it's it's it's ready to match um right now um because of a small issue with the AP repository every um PR to the EIP not only needs um author approval but also manyip Editor to estimated and so it's a little bit slower but it's basically there are three piers at least that I was involved with one is just a small uh change to it so that the the pre-compile um the point evaluation pre-compile is used to only take it basically return uh like just basically it just used to revert um if it was invalid or not reverted but it's valid and but not return any values and now it was it's supposed to return the um degree of the um of the polynomial and also the modulus um of the field um so let's change one that's that's ready and just needs to be moved um then there's a second change just to um decrease the um throughput of 444 um I think basically everyone agreed that if we at least as long as we're still optimistically targeting um Shanghai for 4844 we would want uh to start with the lower throughputs just so we don't have to to worry about um node load and network load um so that's still pending and then there's a third one which is um basically um a bit more open for discussion on whether or not we would want to introduce a minimum price for blobs um lower than the higher than the theoretical minimum of basically one one way per podcast um that one's unclear whether or not people that end up wanting to even do that but that will also just be one constant change an AP so that's that's the three spec PS that basically I I have a view on thanks um any other questions comments on 4844 okay I think yeah so the next thing I think it probably makes sense to to cover is uh Micah you had a comment in the agenda addressing sort of the increasing operational costs of running the node um do you want to take a few minutes and maybe walk through what you see as the issue and um yeah sure uh so the depress I'll give a short little Spiel to set the stage my My Hope here is that we can walk out of this with um a more consistent Vision on kind of what we're what we're trying to build I feel like it's kind of uh fracturing a little bit and so uh I don't I do have a personal opinion on what I want but I would rather see us be consistent on what we all want rather than any particular stance so I think right now if we round to the nearest integer about zero percent of users run their own node and when I say users hear any people who are using ethereum to do something that might be buy and selling nfts or creating tokens or whatever um this means that about 100 of users are using centralized services like inferior and Alchemy what not the many of those those centralized services are actively censoring right now like today um they censor people from a number of countries that really could use cryptocurrency and they also censor a number of tools that are really good for privacy and stuff like that and so we have a this kind of censorship problem and it's been slowly growing over time and uh during that time I just kind of slowly kind of built up we've been focusing a lot of our effort on scaling and at the moment there's lots of lots of blockchains out there that focus on scaling bsv swanna you know they focus on scaling and they prioritize that over censorship resistance meaning people being able to actually run a node and so I feel like 4844 is is kind of another step in that direction that we've been on where we're prioritizing scaling at the cost of censorship resistance in the case of 4844 this comes in the form of 444 is is going to increase the storage cost requirement so running a node and the network cost requirements are in them if this EAP to change it 5863 or sorry it says PR to change the throughput and that helps a little bit but it is still strictly an increase so 4844 is going to decrease the number of people who are capable of running their own ethereum node from zero percent to a smaller zero percent um we do have some stuff stuff on the back Runner that's been working on very slowly which is vertical tree statelessness history expiry State expiry um these things have been worked on for quite a while um but we keep prioritizing other things over them unfortunately and so they're taking a very long time to actually come to fruition and make it onto ethereum and during that time you know the the size of the state continues to grow the throughput continues to grow gas prices or gas block gas limits have been increased a couple of times I think over the past few years right um and we just keep you know keep picking this cam down the road and I think that at some point we need to stop and ask ourselves do we want a high scalability blockchain or do we want a censorship-resistant blockchain that people can actually run themselves and if we choose that we want the censorship resistance blockchain people can run then I think we need to take steps to say you know anything that makes that situation worse we should wait on until we have solved the problem of making some people can actually run their own nodes whether that's like clients or Piper's portal Network or state expert or history X3 or statelessness or vertical trees or whatever that looks like there's lots of options here but I think that if we continue to not make the choice to prioritize those things we're going to continue to make the choice to prioritize scalability and that scalability comes at a cost and we're paying the cost every time we do it and it's a little bit at a time each time right so a little this 4844 is going to decrease or increase operational cost a little bit it's going to decrease the number of people who can run their own node a little bit and it's the same as almost everything before you know increasing the block gas limit it increases at operational cost a little bit and these little bits just add up over time so what I'd like to see us decide is you know do we want to kind of make the assertion that yes we understand that we're sacrificing censorship resistance for scalability and that's an intentional choice we're making and we do plan on fixing it but not today or is if we want to focus on Central persistence today and sacrifice scalability and make that trade um so yeah like I said I I have a personal preference I'm for sure everybody here knows what that is which is like your priority primarily about censorship resistance but I'd at least like to see us kind of agree that we care more about scalability today than we do about that a little bit of extra sensorability that comes with 4844 and similar things so that's my Spiel um I'd love to spend some time talking about it but I know we've got limited time so I'll let Tim take it from here thanks yeah no I think that was uh yeah I appreciate all the other Concepts all the context there um yeah let's just use the hands to go through the comments on this um so Andrew your first um yeah uh from my perspective we can do both uh we we can try to um like to my mind's scalability is important and uh we can reach um better Network participation with uh light clients version two or three what not uh but I would like to to to comment that uh to my mind we can achieve both if we concentrate on uh fundamental like fundamental improvements uh so I would uh for instance uh in in Aragon we are still working on Snapshot think sync and then it will allow us to support things like uh historics by or like to be precise more precise hip four fours uh but uh and from from but our capacity is limited so I would rather avoid uh tweaking gas shadow or trying to optimize guest schedule things like 1153 which which things that don't contribute either to scalability or censorship resistance because they they bog us down and we are not able to concentrate on making fundamental engineering improvements thanks uh ends go yeah I just wanted to say that um I generally appreciate kind of Micah's sentiment um I I think in our general course makes sense kind of being pragmatic and compromising I think we have a good long-term um roadmap where at the end state will be one where it will be very cheap and easy to run your own local nodes and that is absolutely important like I would 100 agree on that like in the long run the concentration would not be acceptable um but I do think that it is sensible to to be willing to compromise to some extent uh in in the short run for practice problematic reasons and I think we decent at this I think for example with the current gas limit there's a lot of Headroom that we could have right now of increasing this and we are not I think and that's the right choice um and then also with something like .44 it is explicitly designed to have constant cost for not operator so there's no growth which is the main problem with all the other um a load um so I think I think that makes a lot of sense I would agree that say for Force um a lot of people want this to be dependent on a fully decentralized uh history provider system being live and before we would move forward with this I think this is a big mistake I think we could we can literally like once it's implemented and I mean as we just heard of course clients would need some time but but I think once it's implemented I think we should just move forward with it um because it would be the biggest gain for for node operators but again basically my point is I think ethereum's course of being a bit dramatic in the short run but having a very strong vision for the for the long run and make sense uh thanks enzgar thank God yeah so my first comment is like um I wonder in some ways if this is the right Forum to discuss this because this seems about like the Strategic direction of ethereum so I feel like um the right place to take this is the community and not a call of like the engineers um but um but since we have brought it up I do want to comment on it and I think like my first most important communist I think like um the current um the the resource consumption is not currently the main reason why people don't run ethereum notes it's ux of all kinds um it is of course the state um itself that you have to download that but which is your ux problem but like this I think 4844 is so marginal in terms of like no for for our for node operation at the moment I mean it will be very different when when we once we have full statelessness that I just don't see it as relevant I don't I don't think it changes much for people who run notes and most people don't run nodes because it's so much more convenient to use one of the centralized services um and not because they can't run uh run a Raspberry Pi and the like the other argument here is like so what does decentralization right there's both like running a node yes but there's also using ethereum and right now like the cost of using ethereum is typically much much higher than the cost of running a note um and that executes much more users than the cost of running a node which mainly is the ux problem as I mentioned so like I find I find it weird and I think like Mika is like in a very like I mean I think already it's a community if you see it on a global scale is um is on quite uh um a strong position towards decentralization like very very few other changes if you look at them are like here as strongly about decentralization as we do which I do care like I mean I'm working on many projects to make this better um but but the arguments like that Mika just brought are like in the absolute extreme Direction even within that community and so like I feel like like we have to be a bit more pragmatic pragmatic here and prioritize people actually being able to use ethereum thanks and um yeah Martin was saying in the chat basically the same thing with regard to the uxp in the blocker rather than necessarily Hardware requirements um yeah you have to jump so I just wanted to share that um Lucas uh I have a question because my knowledge level 2 is limited but would 4844 actually increase censorship resistance because not you don't you not only would have to censor like native ethereum transactions but also those blobs which we might be kind of hard to censor because they they are they don't have like uh fixed structure that's the question I don't know the answer foreign I think it just it moves the opportunity for censorship to the L2 itself so if an F L2 is strongly anti-censorship enter anti-censorship and they Implement whatever is necessary to make that actually happen um then I I suspect that the blobs like you say kind of makes it opaque instead of transparent and so when someone you know adds just an L to its blob to the chain it's much harder to notice that L2 is maybe doing something that is sanctioned or working with someone from a country that's not allowed to use ethereum or whatever yeah exactly and now when we're having multiple o2s we increase the censorship resistant because you would have to sense around all of them right etc etc to be actually sensoring yes and um this is I would say that as I'll leave my comments till the end so if anyone else wants to say something then credit is your hand still up from the previous Center oh no sorry okay anyone else have any thoughts they want to share on this before Micah closes closest things okay uh Micah please as there's a couple of responses to a couple of those the comments that were made there um so engineering is a finite resource while we can theoretically work on multiple things in parallel and we do engineering resources that are put to other stuff is engineering sources that aren't being put towards censorship resistance stuff and that includes things like UI ux like someone someone could be building another mind actually is to be fair at working on their packager thing that packages uh Beacon and execution layered together but you know for every engineer they have implementing 4844 that's an engineer that's not doing something like that whatever that that's other thing is and so I I think that we need to consider that this isn't just like 44 specifically this is anything that is not addressing the problem is taking away those resources that could be addressing the problem um the other thing that I wanted to comment on was that I'm not this is minor I'm not super convinced that the cost approvative I think for certain use cases like if you're living in a third world country you're probably not going to use ethereum to buy your coffee but maybe you could with the payment Channel but you might be okay to receive your salary every every two weeks um via the crypto via theorem and the fees are not so high that I think that's prohibitive especially if it's just east um and then the last thing for the L2 situation I generally agree that 4844 um has potential to kind of you know help else who's long and NFL twos are censorship resistant that helps then become persistence the problem is is we currently have no l2s if you define l2s as something that actually gets a security from ethereum and is not censorable currently every single L2 that is live except for one which has zero users is centralized in some way like it's got admin keys or backdoors or whatever and so I'm hesitant to lean on the oh we make l2s better and then all of a sudden our problems go away because currently no one is built actually building or has no one has actually built and launched I should say and actually censorship resistant to L2 and you know it's this has been like this for what a year or two now and they keep saying they're going to and no one does and so it's concerning to me to rely on that as a solution to this problem foreign I think you know one thing that's like probably quite doable is you know the everything that was mentioned around like the ux of running the node um like sure it does also require Engineers to build this stuff but it feels like it's probably more parallelizable because we don't necessarily need core kind devs to do this type of work um so that's you know probably something that's like worth exploring more like are there different Dev teams or contributors that can help with this specific problem that are sort of adjacent to client teams and and not basically you know we're not as resource constrained uh constraint on them um anything else on this topic okay um next kind of big thing is uh there were a couple more eips that people wanted to discuss with regards to Shanghai um there's four that kind of got uh mentioned um so high level we had the self-destruct one 1150 53 the trends in storage the BLS pre-compile and then um uh eip2294 I'm sorry I don't have the the title off the top of my head um we can just go through them quickly in in order um so is uh is Jared here I know Jared was looking into the self-destruct VIP um I don't think he's on the call does anyone have an update on the self-destruct EIP I'd like to make a suggestion about the self-destructure EIP maybe we can list it as CFI for Shanghai because we are considering it and uh to my mind a good thing would be to have a blog post on uh on ethereum about that about self-destruct that we are seriously considering it and if any and that that developers who rely on this functionality should uh should screw basically start screaming and uh uh highlighting their use cases and then then we can think about mitigations because if if that there was one one Pine contract but if if that that one is dead if nobody screams then maybe it's not a big deal if maybe we might disable certain contracts but if they are dead anyway then why not so so there currently is one at least one person who is screaming like they're doing exactly what you want we we announced that we want to do this and they are screaming and saying this is going to break my thing oh okay can you is there a blog post or something uh yeah I can actually check what the details of the smart contract and uh if they're a potential mitigator okay I see the link okay okay one option is if this is the only person that screams and this is and we do some research we find this the only one I mean there is the option of just an irregular State change to fix that one as a potential workaround and I think I think we asked them and they said they would be fine with that um I might be mixing up my earpiece though I'm I'm not fine with having an irregular State change no but if I understand correctly that person is also uh I don't think we need a state change for this he just uh like he's creating uh contracts and then self-destructing them in the same transaction we don't need to actually change the state that's uh we just need to make sure that when self-destruct is being called during the during the contract creation then um it still works as it used to basically so there are there are paths around doing something as radical as a state change are you sure this is the guy that's or the person who I thought their their self-destruct was in a different transaction from the create yeah I didn't check I know I know of a guy is called Rob M he's working for some I forgot the name of the thing uh yeah I'm on mobile right now so I can't check the the links you sent and this person's name is is Rob something else so it feels likely it's the same one we're talking about uh maybe I'm just making what this contract's doing well if that's not the same person then we have two people screaming but um yeah okay uh thanks for pointing that out so does any I guess does anyone disagree with the idea of like announcing to the community that this is something we're considering and having some sort of like Outreach you know both telling them to like post on each magicians but then also you know maybe having some calls or whatever where we can discuss this and like understand what what breaks and whatnot um does anyone think like we should not do that um if not um so I endsgar had some comments in the chat about like moving this to CFI is probably premature um and we we might want to like wait until we have a final spec to do that um so I think you know what I would probably recommend is um yeah called being louder um I I I don't know if like an EF blog post is the right way um I but definitely like at the very least we can reach out to like a bunch of projects uh Matt says he was looking at the list of uh all the contracts that sort of could be affected by this um we can then reach out you know to those contract creators if if we can find them um so I think it is you know it is possible to do more on the Outreach side than we've done um yeah oh sorry yeah Jared said that but yeah I I guess yeah is there some objection to just doing that and uh then potentially updating the EIP with you know with with changes um and I don't know if this means we can do it for Shanghai or not but at the very least we can signal that we are going to be deprecating self-destruct um and try to accommodate um yeah accommodate this many of the like edge cases as we can okay uh no objection so I I'll take some time to to look into that and like uh yeah follow up I'll find with Jared as well to to try and reach out to all of the the contracts that are uh that are affected um okay next up is 1153 um so we have uh I believe a couple of the people who've been championing on Champion it on the call um Moody uh or Sarah do either of you want to give a quick update about where things are at with 1153 and and um yeah we can go from there I think our time away from optimism is gonna lead here cool so um real quick what is 11 what is EIP 1153 it adds two new OP codes in this concept of transient storage so there's t-store and T load and basically what transient storage is is it's very similar to storage but it is in memory um the two op codes work exactly the same way as s store and S load um except they they write into this transient storage in memory and this um the storage only lasts for the duration of a transaction you know it persists between call frames which is different than regular memory and it's namespaced by accounts just like storage and both of these op codes cost for 100 gas so let's talk about the benefits that it provides so um one common use case would be using it for re-entrancy locks and let's look at like the data for unisot v2 if you you need to do is using transient storage for its re-entricity lock so today on mainnet between one to two percent of all the gas used is the unusual V2 router and this uh the the re-entrancy lock has been triggered 26.7 million times in the last year with um you know 2100 gas per s load and we assume that there's an eth price of 1100 and and a gas price of 50 Quay that would uh you know switching to transient storage in instead of using regular storage would save users three million um USD per 3 million dollars per year and Not only would it save users money but it would also just save you know disk lookups like the hardware itself um we can also think about you know if we designed some sort of Dex aggregator or amm from scratch that uses transient storage um a lot of the accounting itself can be moved internally instead of having to do the accounting externally in contracts updating their storage so for example we can look at um in unisoft V3 trades that are um that contain more than one swap so they're kind of like multi-hop uh tokens grades um in the last year there's been 2.1 million transactions um with an average of 2.26 swaps per transactions or per transaction so what this basically means is um we can remove calls and S Stores um from these intermediate um you know tokens and we can do all that accounting kind of like internally and if we kind of naively look at Unison V3 using kind of this sort of style we could have saved users like um you know 1.15 million dollars in the last year and that's just looking at Unison B3 like if you kind of really think um from first principles and design a DEX aggregator or an amm using this style um you know we think that we can make it extremely cheap to kind of do like these multi-hop uh token trades thank you another thing is that the storage refund accounting is pretty complex and requires developers to do weird hacks in kind of setting values to from um being set to Onset and it kind of is this like leaky abstraction so we think that um you know if we can convince people to start using transient storage instead we can start cleaning up the tech debt and moving away from the kind of these like hacks that developers have to do to save gas and another interesting benefit is and there wasn't consensus on this in Bogota but I do believe that if self-destruct is banned then when trying to paralyze execution um you only need to rely on the storage slots being touched so if people start moving to a world where they use more transient storage instead of storage especially for re-entrancy locks then I do believe that we will be able to paralyze more execution foreign that adding additional features to the evm will result in like all of the ecosystem needing to upgrade their tooling um for example like there's like a lot of formal verification stuff out there that will need to be upgraded and kind of take this new feature into account but it's like not that different from Storage so um it shouldn't be like it shouldn't break all the existing Tooling in like a really crazy way [Music] um and just note that eof will also require the tooling to be upgraded and kind of as a final note 1153 has already been implemented in Basu nevermind geff and ethereum JS and there's a comprehensive integration test Suite in the ethereum test repo and all of them pass it thanks Mark Mark sorry um okay Andrew you've had your hand up for a while um yeah I think in general it's a good Eep but uh I see it as an example of uh of uh get gas at your tweaking so which might be okay but we need to weigh costs versus benefits if it's something trivial like warm coin based sure that's a no-brainer it's a couple of lines of code this and it's easy but here we have to prioritize it against fundamental improvements uh like Eep 4 force or four eight four fours and um uh because uh fundamentally if we manage to decrease gas costs significantly like I don't know by 50 to two times or whatnot that's a much bigger win than optimizing it by two percent my two cents and also it will say like if we spend time on on things uh 11 like like 11 53 uh then the more time we spend on things like that the last time we we spent on refactoring our like cleaning up refactoring out code base making performance optimizations and so on foreign yeah I mean like I don't know much about this particular EIP but like the argument of like oh it makes re-entrancy blocks easier just makes me wonder is there a point that you get 80 of the value using something much simpler like simply one flag you can set for the on a contract that's transient like do you actually need to build a full-scale storage system or is this complete Overkill foreign logs are just an easy example um and uh if you if you look at like uniswap uh protocol design you can do a lot of things to like say token transfers if you take advantage of transient storage for example when you do a multi-hop flop uh that means like swapping across multiple pairs um you're not actually changing the overall token balance of the intermediate tokens in the unit swap so you can completely get rid of those those S stores and those calls to that to those intermediate tokens um if you take advantage of this transient storage which is really just transient balance changes so so I think there's a lot of like uh like real protocol Innovation that can come from this which will just open up a lot more blog space on L1 and I don't think it's just like a you know uh like a I don't see it's just a two percent increase in the in the blood gas limit it's that that also like scales to l2s um LTS benefit from that additional blog space so it's anything that helps L1 uh just is multiplied by average o2s can can scale out one thanks uh Daniel yeah I just wanted to add something from from beso side so 1153 is one of the very very few erps that has been implemented by external Developers for us and this is really something that that does not happen a lot and I would like the the other clients maybe also to to to reconsider that they really did the hard work and not only just implemented the prototype for Gaff but also this is for minority clients and I would like to use 1153 like as a role model to say to people look if you want your Erp included soon maybe do the same maybe go to the minority clients as well implement the Prototype yourself and like this maybe we really in the mid and long term we really could gain because we get more external with developers and like this we could really also get in more features per hard Fork simply by by having more developer power on it thanks yeah I guess moody or Mark do you want to maybe just take a minute to talk about like yeah all the implementations you briefly mentioned it at the start but like what's the state of the implementation across the different clients um and Sarah just shared also the the pr to ethereum tests yeah totally so I believe that um Geth has an open PR right now um between Basu and nethermind I believe one of them is merged and one of them is still open um the ethereum jspr has been merged for a while now um I do think one thing that we could do to kind of um show that all the implementations are correct on top of having them pass the integration tests which they already passed integration tests is is running basically like a multi-client test net um that's something that we haven't done but that is what seems like the next logical step to do in kind of proving out that this works we're also working on a fun little CTF that uses transient storage in a really interesting way that we plan on launching very soon on a test net um just to kind of get something out there and show like what's possible with using these new OP codes and we're hoping that you know the community can have some fun you know playing around with this and you know solving this like on-chain puzzle thanks um thank God again I'm not sure if your hand was still uh from last time uh if so then Lucas yeah just a quick here on the um my point of view from this PR so I will uh I managed we we managed the PR but before that I I managed to have a very detailed um review and actually there was some back and forth to to to like improve uh some some things based on I think performance and our general I'm not sure if there was like any because it was some time ago if there was any like issues with it or just like maybe just some smaller improvements would have to check and I was also suggesting implementing um some tests at some point uh which were done but I haven't validated them so I would say the main effort here would be validating if the if this test should of course apart from each each client validating their own implementation validating that this test suit is um good in terms of its coverage that it covers average case and yeah running through proving this with a test that would also be helpful like with external test Nets that would be another thing that would ease the burden and so the question is more in rather than like the throughput capacity problem of Engineers is more if we generally want that to be included in VM and potentially how well tested it is rather than which in my opinion is a good candidate for like uh some future Improvement that instead of like uh if you if you really want something included and there is a consensus that we want to include this at some point uh instead of like pushing everything on on the core devs if you can like um actually provide value here by doing part of the work yourself and only leaving the validation to the cardiffs that might be something good and something that actually helps the community right and yeah that's that's it for me thanks uh and Marius you had a different opinion about uh this in the chat so please no actually um I have a kind of the same opinion um what I just really want to make sure is that no one uh actually believes that like only because someone showed up and did the work that this change is going to go in I think it's very important to validate every change on on whether this is actually a good change uh not whether it is ready um I think this change is actually a good change um I am not sure if it will increase testing and it will make if we want to schedule it in Shanghai it we'll make Shanghai uh even harder to test especially because we have like a lot of other evm changes uh right now considered for inclusion and um all of these evm changes kind of interact with each other and so we need to we need to test uh the the interaction we need to test that everything is working um just from the feeling I have is I would say this is it's not important not as important as other changes and it's uh not worth the increased testing effort and maybe the delay of of Shanghai for um but I'm still on the fence so I can also be convinced otherwise I guess yeah I you know I'd be curious to hear just from client teams like it seems like the rough feeling is you know people think this is generally useful it's unclear you know yeah the relative benefit of this versus something else um but yeah this I guess does anyone feel like we should basically give this precedence over something like eof um which is probably the other big change that for the evm that's been considered for Shanghai um because I can I can imagine you know if we didn't do eof in Shanghai we could probably do this and vice versa um so I don't know yeah I'm curious to hear from client themes if that's the right way to think about it and if there's like a strong preference either way I don't have a preference or anything but this is uh this is a lot smaller than eof as a as a whole of VIPs this is uh right yeah yeah yeah yeah so yes I agree with that and I guess yeah do you think so say we did have eof in is your view to like we probably don't have space for something like this is that correct so I don't know what the from never mind perspective implementation is finished so in terms of space for that there's no problem uh in terms of testing I haven't validated the test cases so if someone from uh car development would do that that would give us more visibility how much uh more is needed there's definitely a value in running a test net with it so but yeah that's my opinion so it's hard to say how much effort that would be from the testing point right because if the test case are already robust then there's little work any other team have a opinion on this uh yeah Daniel yeah I think from from pesticide is also mainly to the testing effort that we will need to put up as I said there is already a PR I think we need to do some some small changes to it but more or less is ready but it would mainly from our side be that the traditional testing effort nothing more I just yeah never mind I'm sorry not never mind Aragon uh Andrew I know you were saying like this is probably less of a priority and I I don't know if there is an implementation in Aragon already so is this something where like you it would slow or gone down significantly or can you take also from get what's been implemented there I I think we can benefit from gifts implementation because our evm implementation is still quite uh similar uh yeah I mean if I kind of also on the fence uh I would rather not do it but if the majority wants to do it then we will of course we will implement it as well let's say I would rather not do it in Shanghai right and I guess yeah maybe this is uh like I don't know it's hard to pre-commit the stuff in the next Fort because the things change a lot but like is this something that we should basically try and get alongside the deafness we're building for Shanghai and see if we're happy with the testing and all of that or you know should we this should we basically soft agree to do it in the next Fork assuming we we can we can test it and and you know the implementations are there um yeah I mean so to this is Matt from basically to Echo what Daniel's saying I mean as far as the minority clients are concerned it's straightforward um I would love to see it included in the test networks or at least in some specific multi-client tests like we're standing up for withdrawals uh so if the tests yeah if there's agreement that the tests are robust enough that were just shared I don't see an issue with at least attempting right if it does add complexity in in light of some of the other changes to the evm or unforeseen things uh with these kind of test Nets uh it could be useful to push but again it just depends okay and so I guess um you know Sarah Moody and Mark you've been like doing a lot of work on this in the past few months obviously um if we were to say like you know let's try and add this to shangdong uh and you know see how multi-client test Nets work and and you know if we need to increase testing coverage is that work that you can sort of own such that it's not like the core client teams who have to do the bulk of it yeah definitely yeah yeah I know so I guess I don't know based on this my feeling would be like we should probably make it CFI add it to shangdong and like see how the testing goes and assuming it's a minimal effort on the part of client teams and we're happy with testing we we included as part of Shanghai um if for whatever reason you know we find the testing is too complicated or that when you know interacting with eof or whatever there's some weird issue and we'd rather do eof um we can always like remove it but it seems like if I don't know if if like the unit Swap and optimism teams are willing to help and like champion this it's not really a ton of additional work for for client teams and um yeah it doesn't it seems like everyone sort of wants this is just a question of do we have the resources to do it so does anyone disagree with that so making it CFI trying to get it in shangdong and um sort of reconsidering based on how how well that goes um I have like a small issue with this uh because I I will not be like from evm1 I will not be able to have combined tests uh having this because that's the way where the transit storage is placed is like kind of outside of the AVM API I have so I wouldn't be able to participate in like testing that has more features enabled so this would be just for evm1 yes um I don't have a good feeling actually can I ask is that like uh an implementation thing we can help with I don't think so because like it's like when the client side that so I kind of need to redesign the API that's that kind of plugins in the app and but it's like minor issue in the sense yes like everyone doesn't like participate in the test Nets but if you like yeah it would be really annoying for me if the status kind of have all the features suddenly enabled I don't know how to like figure out like the current testing with this but so trying to figure out later I just I guess yeah and I I don't know it feels like we've never really blocked something on that and also just yeah it like especially because the commitment is just to move this to the test Nets and I don't I I would probably still lean towards doing it unless someone else had like a strong objection to that okay so yeah I say yeah let's let's move 1153 to CFI uh try it on the test net with the help from the unit Swap and optimism folks um and and you know try and improve the test coverage as well uh yes CFI uh and um yeah we and then yeah we can see in the next couple weeks how the devnets go and and you know if there's any issues that come up from there um and I think it's it's sort of again re-emphasizing like ideally this should take kind of minimal bandwidth from client themes and and um if this is like a way we can get external contributors to bring your whole change in um that's that's a really valuable thing so we should um yeah should try and get that done foreign but yeah thanks for you know making space for us of course yeah um and I I I assume you're all in uh the r d Discord but we can use the interop channel there to chat about this stuff and and the devnets um sweet next one on the list was uh we've talked about this many times in the past uh BLS pre-compile uh 2537 um there's like many different people championing this um maybe Alex I see um yeah you're on the call do you want to give a quick update of where things are at me Alex yeah boxes um yeah everyone so yeah I think many of you have seen this EIP in the past essentially it's adding BLS arithmetic to the evm uh there's like many many many reasons we'd want to do this um you know we could have like more secure snarks we could start verifying any messages from the consensus layer which unlocks a ton of use cases around staking pools um lots of good stuff like this so yeah I think historically there were some concerns around implementations but I think those have pretty much all been resolved like if there's any like concerns around stability of the underlying code you know the stuff has been used on the existence layer for many you know quite a while now um so yeah so I think uh the question now is just like do we want to push for this in Shanghai I think an important um so change that use BLS we could have like clients support in mainnet I think in a very important second order effect is that evm change would likely adopt these changes and thus the beacon chain could then be like client Sid in there it's kind of a weird reason to do it because it's you know the fact that it's on mainnet would then make it on other evm chains which makes mainnet interfacing with other European chains potentially safer um is the argument but there's a lot of other essential use cases and reasons here um other than the fact that you know at this point this is just a native ethereum crypto curve that we can't natively use inside the ebm yeah I guess yeah I'm curious from client themes does anyone feel like this is something we should be prioritizing in Shanghai um like obviously there's value here we've been talking about it since the Berlin hard Fork um yeah does anyone think this is one you should be prioritizing given I guess the other things in Shanghai that we could be doing Ameris so I actually think this is um more important than some of the other things in Shanghai um I would like um I think this is it enables a a good amount of new use cases and I would say it's more important than things like eof or 1153 um but that's just my personal opinion I'm uh from the kind of the testing perspective this is way harder to test than uh some of the other changes because it involves the I think eight or nine pre-compiled um and we have seen in the past issues with cryptographic libraries we've seen in the past the US issues um so all of these analysis the US analysis uh like very old at this point so we need to rerun them and um yeah so I'm I kind of think it's it's very uh it's good um but I think it will like if we do this then we will definitely delay Shanghai um yeah yeah okay that's my general feeling uh Jared hey um hi uh I just wanted to chime in uh and say that I had drafted an EIP um 58.43 for uh expanded modular arithmetic in the evm and it's not really a competitor or um to the to 2537 but um just uh chiming into uh maybe ask for uh to to just say that maybe we should consider something like this to um potentially Implement some of the cheaper operations that would be covered in 2537 um just as a food for thought and this is this EIP is something I've been working on for quite a bit and has uh been around the idea has been around um it was previously uh called evm 384 about two years ago um so yeah just um saying I've been working on that on and off and um just uh add that in there to ask people to consider that that as a um route to maybe also get some of this functionality in the chain with little added overhead versus some of the precon balls uh Marius is your hand up for another question yeah yeah a quick question um which of the operations could be solved with so right now like this this the the BLS EAP has as I said like nine uh uh different um pre-compiles and if we could get that down to maybe only the pairing pre-compiled and solve everything else with the the the more mod stuff um I'd be really happy yeah um so yeah so I um I was actually looking at uh I think my own uh 5843 to answer the question um from Alex in the chat uh it's a draft it's a a draft of an EIP and I'll I can link uh more resources about it but um I guess in short my understanding is that um uh the elliptic curve so uh Skiller uh multiplication and addition so G1 add G2 add G and the G1 G2 mole um would be fairly competitive and I started to put together doc about that that I have not finished yet but um uh I can uh I can try and release that fairly soon um I know so there was an implementation of the pairing um back in when with the evm 3d4 spec um but my understanding is that it's like significantly like on the order of three to four times slower than blast but I don't have a I don't have a uh a pairing implementation in the current spec um well I can yeah I can um I can uh put out some more information about this pretty soon so um I feel yeah we yeah we have a similar conversation when we were doing Berlin and then BLS ended up not making it in because of potentially doing 384. um is that I'm curious to hear from crime teams like the people think that's still worth sort of waiting for or or at least you know and we can we can discuss this again in the next two weeks we don't need to make a decision now um but yeah I'm curious how strongly can things feel about either way of um of of BLS uh yeah uh yeah uh I would say we're uh I mean the guest team uh I think I speak for the guest team when I say we're not a big fan of adding more pre-compiles uh simply because curse change and if you have nine pre-compiles that you have to keep maintaining forever that might be a bit of a I mean it's not great so I think it's worth at least digging uh you know into events really before and see if we can uh if we can make it work in a reasonable time frame um I understand BLS is here to stay but you never know like uh you know the research keeps happening you get more newer ideas better ideas um I think I think taking two two extra weeks to consider it would not be wasted time okay uh Antonio yeah just quickly the same my opinion about what uh guillerm said I agree that the groups change depends like we're using this exact same curve in the contents layer so it's kind of if it changes we have a I mean if if something in research happens that make BLS 123 at one obsolete with a problem in any case right so um so for the moment we don't know we think BLS 12381 is the state of art group but so was BN in the past and things changed pretty quickly but again keep in mind that this screw is used in the consensus layer by all the clients at the moment right so I guess yeah just we're running against time I think given that it probably makes sense so yeah spent just two weeks looking at the potential evm-384 up code also um you know uh progressing on on all of the other Shanghai stuff and then um yeah we can redist this I think on the next call does that make sense any final comments on BLS okay uh last EIP uh that someone uh wanted to bring on was eip2294 um and uh Zing bellev is your handle uh hopefully I pronounced that right um yeah you want to take a yeah hey team uh thanks everyone uh so uh can you hear me by the way uh yes yeah so just want to quickly the light this is uh eip2294 uh proposes um abound on the um Chan ID I discovered this is because I was trying to implement something and realize that Chen ID was not very uh specifically uh formalized in five one five five and when I dig into the history there's a bunch of it and one this seems to be a proposal for for years I like to know the context why it was not prioritized and it seems a simple implementation but can have a lot of benefit now uh what adds to the urgency is that if we are envisioned a shouting multi uh like China World Chennai ID will explode and I wouldn't be surprised if people started to do things like cash something with chain ID so adding a bounding uh as currently proposed by the previous EIP author uh was using what's bounding it under 200 uh under 64 bits so you can imagine if some people start doing kakash is definitely going to break it uh so I want to ask people's thoughts about whether we should prioritize this or uh I personally feel strongly about that we need to prioritize making at least a decision um and then whether it is 264 bits or 254 bits is up to debate yeah things I'm done speaking foreign need to prioritize it it's not a breaking consensus change um we can have a soft fork for it and [Music] from my point of view like I don't see anyone being against this if there's anyone against it then they should speak up but otherwise we can just say let's let's do it what do you mean by let's do it let's implement it in the clients and just ship it whenever like this okay for consensus yes okay so okay so then given we're going to be implementing a lot of stuff that needs consensus in the next few months um my suggestion would be we just talk about this in like three to six months when the Shanghai work is pretty much done does this actually need to be talked about uh other than just like just people saying yes like this is very similar I believe to the non-seling where currently this is effectively already in place we just need to make it official I just need everybody to say yes I agree and then we're done I think yeah exactly that's what I wanted to say yeah no one disagreeing then I I see people asking why it is 256 bits is because the word but also the bound of 64 is that if it might not break the consensus layer but it can break the application layer quite a lot because of how uh the nines and and the signatures were calculated and yeah just like in case people did agree with our deeply thinking about it I personally want to activate it but I hope that is a stronger as consensus of yes I I would include it into uh Shanghai though it's not uh necessarily A protocol breaking change just to track all the changes so we can kind of lose the couple of uh it with a Shanghai for trackability but I guess the question is should we do this now is it true if it's trivial to do then maybe but in the chat we're sort of discussing the fact that there's way too many things considered for Shanghai now so is is like putting that additional load on teams to do it yeah yeah to do it that's that's there's no additional load on teams like no one else has to do anything for Shanghai we just say that officially this is the rule as of Shanghai but I mean it's effectively been the rule for all the time like is it we could we could assert today that this was the case since the beginning of ethereum um it's very similar to the nonce issue we literally just need people to agree that yes this is this is the thing uh no work needs to be done no code needs to be written there are some probably some places we could improve some code but that's just Tech that the clients can pay down whatever they want okay does anyone disagree with that okay so just because no one's used uh Channel D over 64 bits we can't use it ever again I mean I I see no value in limiting this and I see don't see how it impacts mainnet okay then okay given that we're at time I think if there's like any amount of contention we should just talk about it offline and try to like we can even make a decision offline once we're all on the same page but yeah we're already sort of that time um and I'm guessing the only decision we need to make is a 256 or 64. yeah yeah and once we've made that then we can um yeah we we can just kind of signal it but yeah let's not have this conversation here um yeah and that's obviously if you want to follow up with Dano Maris and Nika that's uh probably the way to go um okay I think yeah so we're not gonna have time to cover everything in the agenda I think one thing that's probably worth covering um is we we discussed eof and 444 early in the call before the like CFI conversations um and and like client was saying well given you know what we're doing with uh the eof eips we should probably make them CFI uh 4200 and 47.50 um does any I guess does anyone disagree with and I I actually before that the other part of the conversation from the chat is that it's probably unrealistic that we can do eof 1153 BLS 4844 and withdrawals on an um on on on in one fork um so we probably need to like prioritize for a subset of that that we can spend most of the next call so discussing that um but yeah generally do people want to move either of these two eof Eeps um or 4844 the CFI um the people strongly disagree with any of that and if we can't get quick agreement we can discuss this on on the next call I'm not sure 4844 is in a place to be CFI yet okay if okay if if anything is like a bit contentious we should yeah let's not make let's not move at the CFI today then um but I think we should move the eof once to CFI yeah yeah I agree I think because we all the consensus is that uh for in favor of the big uif so they should either all be in CFI or none of them should be in CFI okay does anyone so and and to be clear though there's the two I think we should move to CFI are 4200 4750 uh does anyone disagree with that I disagree I see arguments that to take all the erps and enforce the decision where we only do one or two of them but I also see arguments that okay these are ready for CFI so so and so on and as a result I think the other erps do not get sufficient discussion and might never reach CFI just because of these first decisions that we rush anyone have another stronger opinion on this I think it's been clear for a long time that the stack validations essential so if we're not clear on that I think we need to take it up at the next eof breakout um yeah okay so I think yeah I think I would rather have this discussion next time with like more time on the call um I think it's you know we are working on 4200 and 47.50 so I don't think them being CFI today changes how much like progress is going to happen in the next two weeks on them um and and yeah I I guess like just for client teams and other folks to think about in the next two weeks I think probably the main thing we should try and figure out in the other call is like given the testing and implements that implementation statuses of um all the things we discussed today you know what is the subset that we think is highest priority to to consider for Shanghai um yeah and we can sort of spend more time discussing sort of these these five or so things that we uh we touched on today um and yeah and then there were a bunch of links so um so apologies we didn't get to them but Miguel had an engine API uh spec Improvement proposal so if people can review that also before the next call that would be great um I think for devnets we don't really need to change anything in the next two weeks um and one thing also that's probably worth it for client teams to look at is the new test framework that Mario put together so this is linked in the agenda um and finally on the other call uh we should discuss uh a Sunset date for robston so it's already been deprecated but uh yeah when we want to actually shut it down that can wait two weeks um thanks everyone and see you all in two weeks thank you thank you thank you bye thanks boy thanks bye everyone recording stopped [Music] 
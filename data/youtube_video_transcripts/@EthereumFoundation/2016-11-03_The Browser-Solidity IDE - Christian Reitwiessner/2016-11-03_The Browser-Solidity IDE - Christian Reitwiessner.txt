this is yeah I think we call browser solidity it's a fully functional IDE which does not require you to install anything it just runs directly from the browser it is even able to run an offline context so it does not have to yeah load stuff from the internet and the you can find it at the following URL okay that's actually not the URL that's the offline version I saved okay and yes so it's it's divided into two parts on the left side you see the the editor with multiple tabs and on the right side you see automatically generate information about the contract you're currently writing let's start with a simple contract that's just a contract which has a variable and a function and you can use the function set the variable here on the right side you see the currently loaded compiler which is suited up for for using this drop-down you can change it to an older compiler version this goes back yeah yes so for 0 1 1 we don't even have a date it's a bit confusing because that is not the active version if you want to see the current version you have to look here and if auto compile is is ticked here then it automatically compiles with every keister basically if you disable that then you can click the button to compile and the compilation result here is an entry for each contract you get information about the off the byte code you can copy that the that's the the JSON API interface that you have to you can use that if you want to interface with your contract using about three GS and then here's this JavaScript snippet you can use you can paste into the go with um console to deploy the contract and that's another snippet that is useful in other contexts you can even get a lot more details by clicking this button here it gives you a list of functions and their signatures or their their their identifiers the hashes of the signatures what is very important is you also get guest estimations here so creation costs fifty-seven gasps plus thirty thousand two thousand six hundred one of them is the gas required to run the constructor function and the other one is the gas required to deploy the code yes and then gas estimates for all the functions these are upper bounds which means that they are not always accurate and especially if you put a loop inside a function or something which is a bit more complex then you will get infinity as an upper bound another thing I have to say here is that these gas estimates do not reflect the recent heart forecast changes so we still have to update those yeah then random byte code is the byte code that will be deployed in the blockchain then the same the full code is a list of up codes and the full code as assembly which is sometimes also quite useful especially because you have the so on the right hand side so on the left hand side there always the the the instructions and on the right-hand side you see the part of the source this instruction was generated from okay that's I'm totally details yeah and then also very important below the compilation results you have a list of errors and warnings if I put garbage inside here then I will get a compiler wrong and we should actually respect that warning it says we do not specify the version of the compiler required let's add that here yeah now it's so there's no warning you should always try to create source code without warning because most of the warning so we we try to be really we try to generate as few warnings as possible and if there's a warning then it's usually quite severe and any warning that is generated by the compiler can be silenced by some way so as an example if you use the send function okay that's a stupid example but it just sends one way to the address zero and there will be a warning that that we ignore the return value of this function and if you if you really know yes I really want to ignore the return value then you could use something like like this and then the warning silence okay that was the compiler part of the IDE but that's only one tiny aspect of it and much more interesting is the kind of the the blockchain simulator that is part of the IDE and you can click this red create button to create the contract which does not work now let's see ok let's try an older compiler ok as I said yeah that looks better ok and so this this creates the contract at this address in memory which means it's just a simulated blockchain and you have buttons for all the functions in in the contract functions that are constant which means that there that do not have side-effects are evaluated immediately and you get the the result here so that's the value of the of the X variable you get statistics about the actual transaction cost of this specific invocation and not the the upper bound and a decode the result and then you can yeah invoke functions that make changes to the state ok so I called F with 34 the result is the empty string which is fine because it doesn't return anything and yeah we have the gas costs here again and now we can click the X button again to check the updated value and it correctly results in 34 ok one thing to consider or to yeah remember is that the the input boxes here always require proper JSON which means if you have a large number here then this won't work but what you can do is you can put them you can basically hex and code them for example and then it will work and you have to put put quotes around it so this is basically the stuff you enter here is directly forwarded into the web for ejs encoder okay what else do we have there are some tabs here which I want to explain quickly here it can change the transaction origin if you want to test the contract that has to be invoked from different addresses then you you get five preset addresses here you can modify the gas limit and you can send ether together with a function call so if you set it here then it will be valid until you change it again and you can also use browser solidity to interface with other block chains then we simulated and that's done using the third tab here if you load browser solidity from within mist for example then you can click on injected web 3 and you get the web 3 j/s that is available inside mist so you directly interface with the attached node or you can use yeah web 3 provider which means that it tries to connect to to this address using JSON RPC and it doesn't work because I don't have a node running here oh yeah one one one important thing here if you load the website from HTTP HTTP over SSL from github then this doesn't work because for others to not allow non encrypted requests from encrypted websites so you have to load it from from not necessary github ok then on this tab you can publish your the source code you have here as yeah github or you can copy it over to another instance of the IDE and on this tab you get an interface to the debugger which Jung we'll talk about later and we have another tab which allows formal verification of contracts yuuichi will give a talk about form of verification but it will be about byte code level formal verification whereas this module here is used for source code level verification and then the question mark here takes you to the solidity documentation okay that's all I wanted to talk about the IDE if there are any short questions so I can take them otherwise just I think one last week or two weeks ago we added actual browser unit testing purple requests which will result in this website breaking much so it's quite complicated to do browser testing because it has to load the compiler which is an 80 megabytes file and usual so the these hosted services for testing can't really cope with that so yeah okay 
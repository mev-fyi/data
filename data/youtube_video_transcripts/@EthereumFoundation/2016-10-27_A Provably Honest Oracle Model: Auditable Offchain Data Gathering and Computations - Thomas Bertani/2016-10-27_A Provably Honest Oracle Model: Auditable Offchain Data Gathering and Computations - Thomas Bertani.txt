so during this presentation I'll speak about the Acolytes Oracle solution and some of the things that we have in the workings so given the circumstances there are many smart contracts that need to get external data think about web api's or from any data source still decentralized networks like aetherium i've and the inherent limitation in not being able to reach out the internet so the smart contrasts live like in a walled garden and they cannot simply open a socket and fetch external data so this is why there are many different solutions called as Oracle's to pull or push data external data to the blockchain so we'll focus during this presentation on the first approach listed in there in this slide so this is the one used by Oracle eyes and as we speak this is the most widely used on the public blockchain so one of the pros of this approach is that it's fully transparent in the sense that both the query and the results are permanently stored on blockchain another advantage is that we can use any data source available on the Internet so any Web API potentially since there is no need for them to adapt to the blockchain they have no knowledge of the blocking and it doesn't have to and another advantage is that there is no trust line open with the Oracle so the Oracle cannot simply tamper with the data as with attestation we can move the trust away from the Oracle to Atta status we seen a bit who this artist it was our so this is the logic flow what you have is a smart counter sitting on a theorem that can reach out the Internet via Oracle eyes the way they do so is simply by using the Oracle AERS query function so this function essentially is an event so our of train engine can listen to this events and fulfill the request so essentially we are the one opening the connection with the remote web service we get a result along with what we call authenticity proof and we send both of them back to the contract so this is a synchronous and there are different approaches actually to implement these authenticity proofs so these authenticity proofs are cryptographic signatures that can enable the smart contracts and any external auditor to verify that the data being provided by the Oracle has not been tampered with and that the result that the smart contract is receiving is really the one sent by the external data source so the first one is based on an external project called TLS notary this is the only one available today on the ATM maenette since September last year and the way it works just briefly is that when the client the client being authorized initiate a TLS session with a web service the client secret is split in alpha so that Oracle is just just as alpha feet and the other valve the other half is secured by a piece of code whose correct execution is ensured via the Amazon Web service sandbox concept so the way it works is that we get a cryptographic proof out which doesn't prove that the data has not been tampered it just proves that there was some kind of cooperation between the notary server running on Amazon Web service and Oracle eyes so this means that if you do trust Amazon being honest then Oracle eyes is being honest as well so there is a trust in Amazon with Amazon being an artist either another approach that we are presenting today you can check out the paper that we are releasing this afternoon it's based on a different approach so the first one the TLS not one is essentially a software attestation this one is an app door best one we call it Android proof and essentially it does leverage through techniques technologies the first one is Q SE e which is the Qualcomm te e trusted execution and viral and solution and Android safety-net so by using both of them we can basically verify that there is an open source piece of code fetching the data from the web service which is running in a secured Hardware bad Android based device the third one that we are presenting is slightly different because it doesn't prove that it has not been tampered with when fetching data from an external data source but it's based on Intel SGX so we have already seen it with a clipless with a clipless presentation Intel SGX again is capable of verifying that a given piece of code a subset of C essentially is running in a secure Intel CPU backed sandbox and there is the inter signature on the correct execution of the code so this process is essentially closed called enclaved remote attestation and works via the Intel attestation service and we use this to solve one of the very issue that we have seen in the last few days in many talks which is the difficulty of getting reliable on chain random data random numbers right so with random data source that you can use via replies what you get out is a random number which is generated by a low-level Intel SGX backed instruction and you can verify the correct execution meaning that the random data was really random if you do trust the Intel solution so again here we are we have just seen two different data Staters so Google or Qualcomm if you want and Intel so what we are seeing so far with all these three different authenticity proofs is at the station as a service essentially so different kind of software and adver attestation that we can use to move the trust away from the untrusted a small start-up Oracle to a trusted entity which is a much bigger company of course you don't want to trust a single corporation but the assumption that we are making here is that if you few trusted companies or Atta status in this case are less likely to mmm act all aspect actors compared to a network of untrusted anonymous players so viralize you can specify the proof that you want to get out so the kind of authenticity proof that you want the Oracle eyes infrastructure to generate to fetch this kind of data and of course you can specify more than one proof so you can get the Android proof DTLS not reproof etc on the same request meaning that if all the proofs are valid and the result is the estill been tampered with it will mean that at the same time at the same exact time android Qualcomm Amazon and Google were all providing the same wrong data which is pretty unlikely so the last thing that we are presenting today and that it's available in our documentation is the option computation so this is yet another solution to the limitation the constraints of the VM meaning that if you want to execute any piece of code if you want to reuse any library external library or if you have concerns related to the gas limit in some cases you might want to delegate to an option context the execution of this code and the approach that we follow here is again the one based on at least a torso at the station and what we do essentially is extending the base Amazon Web service sandbox concept introduced by today's notary and with this extended concept you can execute in a safe Amazon Web service best lockdown instance any piece of code and you can get out an authenticity proof so this authenticity proof can be verified by anybody and the the way it works is that you define our zip so this is there is an example here using for example the Python numpy library and we can get a result out we distribute it over IP FS and in india oracle ice query we specify as datasource computation metadata source and as query we specify the ipfs mutation so what happens is that oracle eyes that does initiate the secure instance generate the honesty proofs and the verification steps are essentially based on an extended verification of the authenticity proof that i've ever just explained before so what you get out is the proof that the result is really coming from a correct execution in an efficient context of a single instance of this piece of code so there is not anymore this child this challenge game but it's more like audit or based approach so thank you for the attention and i will be around so come find me if you have any question we are looking for feedbacks and we are releasing as I said the Android paper later today so please give us some feedbacks and thank you for that again thank you very much time 
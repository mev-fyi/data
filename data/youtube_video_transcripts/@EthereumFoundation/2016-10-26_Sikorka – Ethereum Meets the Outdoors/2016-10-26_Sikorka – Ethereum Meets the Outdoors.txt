lefteris carpets us he'll be speaking on sick worka as cerium meets the outdoors hello yeah waiting for this nice great so my name is Daenerys Cara Pettis I will be talking to you about a pet project of mine called siekerka or a helium meets the outdoors first I think if you thinks about me I have been a theorem core developer since 2014 I've mostly worked in the C++ score and the solidity compiler more recently I have contributed a lot to the Dow and the aftermath in the cleanup after the hot my general interest is in compiler design AI smart contracts and general tinkering with software so what is siekerka in the Polish language it is this particular bird I think in English it's called the blue teeth bird and that's what the name comes from for atheneum siekerka is a system that facilitates deploying smart contracts in real world locations essentially it allows people to interact with contracts in physical locations and it does so by providing something I call the proof of presence you know like we really like proofs in blockchain so that the user can prove indeed that he is present in a physical location potential applications of such a system are many for example loyalty programs that would provide a discount to users that visit specific locations for coffees of a supermarket or something else to prove your attendance in in a specific location for administrative purposes such as an example would be if you have to visit your local unemployment office once per month to get your unemployment benefit or something that I really like mented reality games in a film like that would be really awesome right something like Pokemon go but in a theorem smart contract so what is proof of presence we can prove that a user is indeed in in a location using various methods some of them actually almost all of them can be spoofed so maybe combination of them should be used the most usual one would be to use the mobile geolocation data so the latitude and the longitude coordinates at Sun n square in an answer so that if a user is present in a location only he can answer this challenge question a bit more advanced would be to analyze the data of the video at deployment and compare with the image feed at user interaction for a bit more security we can go to specialized hardware so we could have a QR code sticking with a QR code on top of it that would be on location and then the user would have to scan or also same thing with an RFID tag and an RFID reader or going even further specialized zip for example that would be on location and would allow people to interact with the zip via Bluetooth or something like that so the Colca was very very simply contacts have to follow a specific interface and the application or the system allows the user to search for contacts that follow this interface and around them when a user deploys a contract a contract he also has to provide the ABI so the system knows what kind of methods the contract provides in order for the user to interact with it and also he has to provide proof of presence as I explained before so the contract interface looks something like this at the moment I have to mention this is all a very early prototype since I was really busy with the Dow aftermath so right now this is this is really new so a user has to provide a name for the contract a latitude and longitude coordinates which are in an integer approximation since solidity does not allowed floats yet the question so the challenge question for the group of presents and the house of the answer since we really don't want to give a plain answer in in plain text in a theorem transaction we have a modifier like like this so that people can essentially use this modifier in the sequel pack contacts to allow the user to prove that he is in the location so all it does is check the sub 3 of the answer if it matches the house and calculates the distance if it's within a specific parameter then it allows the user to interact with the contract the owners of the contracts should change their silent answer in question question and answer quite often because the situation on the ground is volatile so something could change and they should update it so that users can still interact with with a contract so to see an example contract of which we will see a demo video afterwards this is a discount talking for a loyalty program let's say of a coffee shop where you have the user siekerka interface plus a number of tokens to reward to its user and the duration of the loyalty program in UNIX timestamp so this is the this is a simple interaction function where the user just claims the tokens using the proof of present modifier and as soon as his presence is indeed verified that he is in that location then he gets his tokens so now here is demo video so this is in Berlin this is a very touristic location is the Brandenburg Gate it's a very nice place to put an advertisement contract let's say so you as the the owner of them of the of the coffee so would open the application and try to deploy a new contract then you would set around the location and try to find the place to put the etherium hexagon where you would like to place your contract so the Brandenburg Gate is a nice nice location you have to give a name to identify the contract with since we have a coffee shop and this is a coffee discount token let us call it coffee discount I'm sorry I misspelled coffee I can't remake the video there is an exhibition right after next to it and it has the poster of someone called Kessler this is the the name of the artist of exhibition and so if you are there you would have seen it so we are asking in the question that what's the last name of the exhibition's artist yes so the answer would be Kessler so now the user can just choose his source code I have a template here and then we are deploying the contract waiting for it to get mind that's a bit fast forwarded because it takes a bit for the contractors to be verified invades our address then we can start searching for contracts around us and after the Google Maps API load we can see the theorem check second why that so that there is a contour deployed at this particular location we can see that this is the coffee discount but we deployed and we can interact with it using the API sorry we we get the proof of presence question we saw that the name of the artist is Kessler so that's the correct answer yay we get the ABI of the contract we can actually claim a token now and we send the transaction so the transaction is successful now we can go back and use a different method and we can check the the balances for example of the contract and we can see that we actually do have a hundred discount tokens now so this is the process of gene continue you can go somewhere else right this building which is very close to the Brandenburg Gate and deploy yet another contract we can just call it the Bundestag contract because it's right next to the Bundestag building in in Berlin and if you go to set for more controls around you can still see once the contract with Google is established that you have both contracts there and you can check their names there is yeah so these discs all processes can continue so this is still another location in in Berlin this is Alexander Platz you can just put more contrast here with with different parameters different questions and the whole point of this is that it would be nice if in every city we started seeing maps like like this that essentially are full of theorem hexagons or pyramids however you want to call it and where people can have fun and interact with theorem smart contracts all around them so that's the video so for thank you thank you so for this this is the leg a very very early prototype for it to be really really a workable application we have to indicate with the light client and from what we saw today that's very close and I'm very very excited do publish the mobile app in the Android store improve the proof of presence algorithm with the methods that I explained I'm probably integrate with an existing wallet for account management since this is not something that I would like to do myself and also integrate with an existing identity system so yeah that's my ten minute talk if you want more updates you can follow me on Twitter or github and the website for siekerka is coming soon I just didn't have the time to make it so yeah that's that's all thank you thank you lefteris thank you very much 
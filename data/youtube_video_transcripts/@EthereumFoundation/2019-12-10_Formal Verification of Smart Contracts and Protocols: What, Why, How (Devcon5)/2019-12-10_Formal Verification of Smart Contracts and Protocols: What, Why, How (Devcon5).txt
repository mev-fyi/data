[Applause] is that the famous quote by a famous person that we say the program taking into used to show the presence of part but never to show that after that you telling God he said well isn't it very useful we cannot rely entirely just in T is what really wants program correctness we need former methods which are mathematically grounding techniques to model any reason about what about the system and before we thank you point for our methods I liked it to us which another code by other company work both Holland and I stop but the tree the word and he says that the chaco Foreman metallicity me assumptions upon which for what I can depend I say somebody to this here somebody verified what I formally mother my system what did he mean what it should mean is that they clarify police function after which the property they in important but is it overview presentation today we are going to give an overview of formal verification and then then we'll show you some examples how we form of a pie and we use three different approaches that so what is formal verification very findable can be seen taking human a program or a system or a protocol something that computes something less evolved from one to another and that something is called a program team and the property or some property agents which are properties of these program beef and as for the s and what you'd like to know is awkward in whether the program be in the satisfies the specification is meaning said no matter how the program is executed whatever you whatever it environments another whatever non-determinism that you might have in that program the program will satisfy s momentum one or if you cannot prove that they collect them so-called comfort example we'd like to have some around where you put some environment in which P violates s and then when you just put four then you can use that computer program or the specification the typical advantages that we as a community know that fermentation health are the following so detective obviously what you need one will perform with two people in clinical program is correct but it depends on local many Parker what properties what you mean by correctness and in general what Kamini can claim is that good program doesn't have our ability old appointment and those vulnerabilities are whatever is specified then the forum we still have this problem and in the extreme case you can prove that your program verify the education through education and get some fun yet but it doesn't be much so follow me it helps you find very subtle bugs but if you haven't thought about program initially because one of the fishermen enforce only and I'm up front that is going to be very rough approximation of reality I mean you might die but I think it even idea that you can go as deep as you want but keep in mind no matter how many tests you are still not going to get any any assurance correctness him correct but know if it is for a TV but that's why it is the minimum why don't you take lots of tests then you can move further and I quote you runtime monitoring those of different names so one in three D or they mean when a computer is what is life is that you can run the program but now observe each execution don't just about motivations you pass the test or not look at the sequence or the behavior of the program and you can monitor elections the program is it runs and if you see any populations then then you can report errors an example would be division by zero so zero is fine but you may not grant me then you can monitor pollution by zero what other properties would be that you want to revert before the end of a function if you ever over in the faction step indicate Monaco there and I'm putting it right after it's a pretty easy to achieve once once we have our immune system of course you're pleased with your program some observe what's going on but that's much lighter the other methods later however further you can do static analysis static analysis there is a large variety of panic analysis techniques from dinner and I strongly encourage you to use any satellite your hands on because they give you immediate feedback so I took another analyzers typically these can your code in the loop for known Packers and code politician for their coding practices politicians not right and advantage of authorities are typically very fast immediate feedback they show you where they gather your code you exactly where problems by being your code the problem with that analysis could be the thing is certain error that there are not documents or they may give you false alarms because they have to make trade-offs you'll never prove a program for a static a complete automatic feature to make some take out one of the things of the karate schools or may code scan the road but is only deepen the semantics of the carbon in which people experimented you to walk before supporting execution and what continually is we still running the program but you're not the program with inputs which are not knowing if the function is clean was a and B you're under program which equals a and B without knowing exactly what humans are 21 is a and B and if you execute the program you keep track of all the logical constraints and what's going on and the best judge symbolic execution is it to copper larger state space or space of behavior second program essentially ensuring all possible behaviors there now start being that it doesn't scale very slow compromise so if you want to make it automatic then you have to again send some trade-offs and one of the trade-offs of initial support vindication means or bonding water checking where you explore all the program behaviors up to a certain point let's say up to two iterations of each group one up to two recursive calls for each of and once you put such an image then you can explore explicitly state space but the problem is that you important and quite a smaller state space which means that you make you make those errors if you want to be utterly sure that you don't lose any behavior didn't have to go into any form of education and here I mean morning it's state of the art with a conviction because this is what most of the people who do formal verification understand by verification and which is the fact that we have a programming language in the programming language provides some specification language another language to specify properties of interest and then your tools your form of Education to analyze is all the channels of the program again those properties and which some help eventually you may be able to prove maybe some additional kinks additional damage you may be able to prove the properties correct so this is the compression program verification and I think conventional because what are going to see next beyond that so the limitation actually you know for the traditional verification of curvature of programs is that you tend to be stuck with one particular language or version of your programming language and one and more importantly one particular person of the specification in that you think that something which was not very important thank you for your participation like always eventually important sorry enemy clear language for properties but electron if you need something else down to block mm this one going to go to further motoring and validation is your model meaning that to take your program and you know model it in some other system environment when you can now reason completely mathematical amount of programs forgetting any programming language you don't care about the programming language anymore I define the tradition system in your department and then you can reason about detail improve photo properties there without taking into consideration and that's really useful because it helps you find high level errors potentially you are ready in your code that may have been hidden in the actual code so for example you can see design issues so many many many customers work with we take them through the various steps and someone to get to this point of the signature we really want it so once you understand the value of modeling then you really like to go to object path but now you have a gap between that model and the actual code that needs to be filled and this is what takes us to the final stage which is the education improving your portfolio using frameworks in a programming language of programs new programming language now have a formal mathematical model what you meant implement Unicode and I have to prove that these two are that the program you need and so what we intend to do today is to show you how we approach is from and our giri's a framework is great what you can expressiveness so we put in the right hands you can do most everything you want to get but on the other hand many people find you so our challenge here is that we have done before we dive into our approach I would like to tell you with that reason a suite of students with a high GPA automation for some our analysis of smart contrast and you should definitely look at my channel developed by us and many of them have thoughts actually is therefore like meat eggs and meat you know I think they are Caesar bitrates of me identifying verax by changing to you what is our amazing let me try to use them especially when and I'm going to go deeper into the flower approach based on the game framework so why do we like the framework is mainly because it it supports all the images we designed to work with all programming images any particular can use all versions of language takes a really old version of the same the same way you don't have to touch anything you can keep framework which be from one version to another or from one of these and this is the final field or the vision underlying the framework then you should you find the programming language once and for all they were formally definition that you touch the mouth is everything and everything else all the tools that we need for that language should be derived automatically or semi automatically from that one definition for language that include not only parcels and interpreters but also supporting education is moderate a productive program very well and everything and all of these group of our separate tools but they are all completely language but we differently when implemented school for an asset or analysis prefer a language typically to say pick the language with the tool in the system which is hardwired now to that preferences so you have languages and then you have tools and many people speak one language and one Java that's all what a frame of Republic is actually to not do that with report is to encapsulate all the tools and make an or parameter in a programming language the programming language then can be formalized and passed it in English some other anymore more than 20 years ago and years ago blockchain and plug and play book change then everything else exactly and for you okay we immediately looked at you know virtual machine we didn't want to verify program to the storyteller well the beginning we wanted to start like with a bicone eliminating potential the fibers from the from the trash bins and and we had people actually have it and others television that's what your children's thinking and that past project and research project and then from actual products now there's a complete formal semantics of DVM and and it is complete in the sense that you can run any you can program with it is like a pack of client an extra we generate from the semantics number one of the blue boxes of interpreter we technically we generate an actual plan you can find and it is pretty efficient but if you should be not in particular it is it is only a few times lower than the hospital cavitational you know but that really makes it usable as an implementation but everybody just my partner mother exact same attraction was introduced for verification without any gap between tradition and the vegetation also several people in the community using this idiom contain iam semantics s as Olivia and we have sent jello paper Toto where which website was completely automata generation from TVM sejuani's and we generated reality is that modify the semantics and let you marry the book for again the Firefly truth that devil it will talk about is and as I mentioned it tries to automate what we ready to in K but in a way that other people networks so it is an instance of the keyframe on with DVM semantics and with loss of motivation in videos boxes and all under the hood so deaths so firefight attempts to automate whatever is there in the keyframe already well the formation very so that the invention here is to repeal upon the legacy of successful to receive over max of research and many of you may have or receipt or not for all these amazing they were designed and incorporated in Venice on the problem is that there is a gap between what very soul does on Isis and authority level and what we do with km which is sort of by code level semantics so what I do to protect and to regard faithful as the user friendly like page something that that generates all the vegetation artifacts that you need down there and to reconstruct a food fight forever and this way to achieve lz1 to achieve information that is more cosplay formal semantics of BPM and at the same time and with that I'm going to start with shouldn't do if I do [Music] [Music] [Music] [Music] so thanks for coming so thank you for inviting me as part of the session maps so I don't claim any of them but I've given the engine room while these technologies like HP hooking around can you give me a happy develop something fortunate enough to be part of some of these technologies or develop service so that both was so we had a team in Microsoft oh I forgot chip and they started taking dependence of smart contracts so it was actually quite interesting to us to speak about them so that's how the journey got started and we'll be talking with a bit worried about how to combine these two techniques and what's the landscape of tools and so on so what is very so so the way I think of it is a specification and the cockpit the lots of collaborators from Microsoft from Austin and the point set of collaborators so what was the motivation for that it is also to me with that we need to empower the developers or writing spark on cars for a living because there are as before sensor itself it's a very crucial important application that you build with lots of security phones and you try to reason about them not just provide it but also why you come here and this initially started with the focus of natural Martines smart contracts that they were building for the infrastructure and all the samples so we have some tell us the starting point and also as everybody said one of the goal is to expose a lot of research that are sort of mature in the research community bring it up to developers with fairly well defined expectations so not all of them are the most automated tools in the market but they have exactly so so these many of them many of the tools are used each movie is a state-of-the-art intermediate verification language it's our ancestor okay so the difference flavor like it's a very professional language that you can map and Quran is a first part in interprocedural checker so it's optimized people so I will go ahead and give a few examples as I go along with bugs and examples so we'll start with the dow example is most famous and notorious so [Music] so this is the notorious our example and we all know about for the intrinsic value but let's say you were just trying to be right in the tower example I knew nothing about reality so what is it that you looking for let's sing a language might have enough difference what is it that you should be thinking about so here's one example well responsible then the sender should not become more than they have to find that's it that works perfectly it should be equal again but absolutely examples where it actually can equal equality is too strong because an attacker can actually would donate something anybody should not get more money than their watch so you write the specification so it uses some contrast library so who's this most effective source of new things in there and so I have two bucket there 37 [Music] and then you withdraw on the withdraw method and that assertion that we wrote down things and for unfortunately for Windows at this point we have a viewer that can help you debug to the tape place another short but you can actually step to the face and see values so you can see badges so that still experience and so go ahead and in the text which is you update so basically many people motivationally update the credit of the sender before we before we do so in this case it actually found the proof meaning that this town would able to satisfy the property as well done and the interesting thing is the detail is how do you model that bursary compact where the person you can call with any of your options so with that with that model we have so this is sort of the experience so I'll show you this message so this is I guess that equality of the RC 20 tokens amplified and the thing that we're trying to listen about here and so the thing it will show is up here so this is the method and the visual it does it because it relies on the underflow semantics because it has magic so how do you find that without knowing the terms of so the DVD that I wrote out if you change the statement for regular subtraction then so then it refuses the final proof calls you it shows the counter example we're trying to drain and amount one from someone who did not have any any any person and and this is interesting because it requires you to reason about underlying semantics so they're just flows basically various levels of abstraction you can reason the kind of categories you can get so if I can use it for the answer box of PVA is not scary so you have to choose but you set up an expectation of where you want to invest okay I just want to show one more example which is an example - you can for the workflow policy money they realize very smart contracts they can be very very popular in in interpersonal so they provided a nice at least on bass lightnings perfectly clear semantics what a worker looks like and then the question is does the solidity program implement the rotor you make it for screen so that you can see yes thank you right so here's think of the specification language with a bunch of state machines and actions and some access control facility smart contract and the question is whether smart contract defines the state machine so in this case it turns out there was a discrepancy in terms of the specification but nevertheless there was something that was different in the two two versions and so this requires some steps to remove the state right so execution will not so this is not for this example but in this case it did not find the Pope but he takes a little while to actually find the contrary sample but still it's reasonable it's a few seconds but it just so little complexity off the search space so as an assignment it's a little better but of course it happened to us you can see apparition 1 2 3 4 5 6 7 transactions to business so people are testing my professors okay so so getting back some subject so it shows the flavor of verification so for this one for example if you just want to go for higher education you have access to this far out if you want to prove you can write ingredients and interact with the tool but the nice thing we have observed is that doing a spark on practice advice if that open environment on a query makes it easier for the verification because in many cases that is actually [Music] which i think is good for business projects that we see in enterprises which are being extended by community as you can trace all in the very dear something like well have not been able to verify fully or find a face but I have this guarantee that any transaction of depth kale any set of transactions if you issue opportunity transactions and I'm gonna give you substance so this gives you a reasonable guarantee we stop testing and food and water okay so the way it works is it takes a contract with single-disc on contract the constructor a bunch of arguments and then VSS writer of the hardest time sort of any of in an arbitrary argument so you can imagine if you verify something on this program you're verified it for long executions so the capabilities at this point is a full-contact library and we're conscious please take into this decision to start your own language so developers can hire understands them without missing a whole bunch of sophisticated semantics applying it is an initial customer of the folks in talking to our developers and so we have the scalable party validation violations by the automated to Susan cookie and Ayurveda are gonna be completely automated you can need might have to support some extra fat set aside so that's what the research problem is how do you and so we did this on the study on how each at work through policies for example that I've shown and also check some critical infrastructure that they're using smart contracts farts their service official and this is so the governor's proposal under like it's like city manager or other object service so basically they have implemented some of the governance as far contractor solidity and so it's very crucial because any cuts there might just compromise they're tired people started and so you can I get into deadlock and can I remove the lock administrators issued and easily the work happened us when it comes of K you concerned with them designer specification the bunker checking and then ultimate abeyance and repeat them while the code is to be developed so we were very fortunate that we could actually do this while the program was being developed and tested with parts of us so that was a very nice experience and I think that's a would be nice to scale out such matters so that's sort of the pool of the very sort to this will take it from research prototype where we have customers can come people trying to get a sense of the technology and any of the community either directly on by folks at army and so I mostly process over the specification that we've been adding to a hundred languages devolve into a box but essentially that sort of well-known one known fact that you necessarily we are insufficient for people with people's conditions contract injuries between greetings many contract containers can be especially as people see Africa in the spectrum important and so it's stops for example very sort of contract agreement requires insurers convenient dependent and I don't finish the work in the so dirty compiler of supporting some of these so waiting and watching to see once they come up we can serve whoever is some of that and so it's not tied to the standard just a way to expose facilities to diverse select my support in PRC practice I want to say that total choice total supplies in food because it cannot be passed equation because mappings don't allow [Music] [Music] socials very difference of difference all the way down to so with that [Music] [Music] [Music] to work comes from home interpretation of something footage of what sounds a song rivers penguin yes well I'm going to talk a bit about that in the air all right so I'm an installation are going to talk about their equipment by put with more focus on the case study of each tuple of the past contrary to recent event part the tire is but I'm not about detected in too much because already we talk about education I mean talk about more about the bicycle so those of you don't know about bytecode will learn something about it but bytecode by this much so let me give a quick overview of our bytecode is a tool so we have the idiom bytecode prediction tool that built on top the Cape Raven and KTM that we describe and this tool has two inputs program bytecode and the specification any checks that the program says parts it or not this is very similar the very saw in the holo-book a main difference is that it works as a level widened math was bad for the level better I will talk about it later God let me give you a quick example how it works so this is the program versus program that similar like yes eat we need transport types of program and we have receiver addresses from Central Park sorry from n to n value in our page balances to be safe bet so it if any wonderful eliciting for every country so given this program you first compiled down into B by comp you put in the bathroom it all to and then that's that you have to write down a specification which which specify what the behavior that is programmed so here we are described here is the behavior of a program in the success case which means that if the balance is enough I mean centers nervous enough and if not what happens then the balances will be operating as proper way I'm not going to to details about how this specification details are but the thing is if you write down the specification that does fight the level in this way and twenty percent that works especially is lower than program so yeah and this is why what will be mentioned employers for network write down the specification and also working this future goal is to let you just write down the specifically as a notation language like insurers and employers work began post condition saying that okay this transfer function if in two three condition satisfied like general system enough and novel flow happens then the most condition means that whenever is transferred returns me through whatever were not devote imbalances should become it with as expected so if you write down the specification at the high level the source code level our quarries or medical generate this case I mean back to the level specification so you don't need work on this level but that's the future not that but we're hoping that providing this feature so video is to be verified some high profile smart contract so very recently verified e 2.0 the part contract that I guess you will learn more about this in the later is in 2.0 talk anything is that this culture is very important contract when you want to be a validator of 2.0 because the one needs to imagine you're some intern with an intern sending a because it is on track but if one for X and then this contract is one a function so you can depart some people candidate which cannot be true but the department ever made here will be claimed in the internal network so it's very important first make sure that you cannot be true the second whatever you find here the available network there's really important contract that needs to be correct so we verify this and this is not Israel I will show you what we found provided from is contract and we have other country like most is safe what is edge wallet and we also I mean the vehicle of course very part is not okay but not by us by temple God so we are very happy that our tool is used by another to credit by the other system so we are hoping to more people using our data failure to verify their system and then that's why you're working really hard push ourselves too much much more easier to use our tool and that's the more less invite light of need the final table and then there's another a bunch of the spark contract and now I'm going to explain why we are really obsessed in this particular verification the first reason is bicycle is what you need bonds on the blockchain not the source code and then compilers believe or not and box I've not talked about this term if compiler just I mean any compiler even the C compiler like GCC or as I am which is very mature and develop long your time as box new box reported down today and some box actually eaten in for 20 years simply some guys are lucky to hit trigger the bulbs even the 20 years and in importance so a periscope actually more than you expected so the thing is even if you verify your source code is correct if comparison has a problems then push it very so using their software finding it just assume that comparison correct it's not the case when your reputation is does not actually guarantee what you so this is really good that that's why we are actually working at the particle level and indeed we've found some issues in it to the Past contract what we verified by global bets so before explaining what box we found let me give a very quick background how to read the Bible and erase so okay suppose you have a byte arrays how death represent you and beat them local a single bite it's not a single box it represent as two words essentially 605 is essentially each value by the line the very first 32 bodies denotes what the size of this byte which is 1 0 0 0 1 and then here were actual bytes theta1 bytes and then followed by 0 bytes so 3104 a batch of two then gain size to there and then two bytes here and then zero bias and so on as of course if you might know but in online so you don't have any 0 by step that's how batteries are represented in the a medium level and here what to port of byte arrays like arguments or it will be done something then they store as a tuple occupies and in Haven example to to probe to byte array then simply put this these guys and then you put on top of this table set the table set of points where the each element stopped so since the offset is simply fixed so if you want to find some horizontal menu exact next element you find that you go to the ocean find out what will start and you read the size and then read from here to the size as how you decode or in code is by trip this you all need to know to understand out of the box ok so first what we found the ballast contract so this is the one of the function we pass function called get important count function which simply in the futon this is a diaper diaper is deep ball simply Python each syntax so you can digest me so in betar these it was called a storage value but in the little endian poems or simply us reverse the virus so okay let's assume that this community answer incorrect then those of you think that I mean any problem with this simple utilizable how could it be the bomb right I mean assuming that this is correct right assume it is to live in yes correct can you think about something's wrong with this this very good yes but that somehow headed by any word is to leave engine yeah but yeah yeah I'm sorry actually I'm fortunately because I you cannot get this because by the company so value when you call this function if this contract compared by fiber version 1.0 method 11 which is the latest for the time we start expecting to see any problem with this if you follow me the previous reason is Irving right or 0-4 here see something is not there there what happened why is that they first went down offset this is correct and right down the sides and then they copied is the particle come and then needs to be cut all the 0 like this is 8/5 so 24 bytes of 0 there but somehow components Bob they only put the 0 only eight points then the Waterford is 16 bytes there and the problem is this 16 bytes of the local derby garbage came from this function Sandy Feb so there is just garbage there which is nonzero so this is the temporal be compatible and then you cannot find this unless you won't be apart below and then I mean either about a third foundation Python this code there's good job and no problem body just employed this without interpretation right and then you have this non incorrect 0 bytes and they're somehow another contract it'll soon they expected over 0 may be exploited by some others this is really thin that's why we drink a bit the back to live education is important which is more interesting but I know living very good so this is a main function tea party as you see the departure function takes now any arguments or the back sorry [Music] now this is the tuple of three elements offsets this whole data input is not an example like by mistake or maliciously example life there is no actual bias only this sixth Ward so this is the red one twelve words what if you provided in the six port you might think that oh there's no bodies but also data that's in zero so called our evidence check so we may give up right right but what it happen is this is computable simply six points offset 96 128 160 and the three sides like 48:32 dancing in size and know what this is all and then even this the device constant simply walking doesn't it works for what first they try to beat pop cubes and forth on the first go to the Box in because these started to be the size all sizes side is 48 so you be 48 bucks thank you they seem pretty cool consider these values as a hockey move on next because this is even more now sorry third one it won't start option what's this we decide which is 96 and try to be beyond the court date up this nine six and what will happen is the yellow paper punch machine said that if you want to be something beyond or they love you read that a see if it's little organism or zero this is what happen even this in the cordera the decoding processing will be three arguments for the garbage its coach of the Cygnus is or 0 you cannot claim later change whenever you are deposited so you make enemies dead or some offenses future somehow sleep the beat in your core data but this shouldn't happen but previously and part of this wrong information and then you simply lobster so again the story is it is very important to work at the bottom level you want to your insurance of your smart touch control and then so far we are using our table with fire son export and then some so far actually large more sum up over this network can use up like that but we are really hoping that even small startup can use our guarantee of their small contract that's why we're working on this next of the pipeline in any questions like if it applies concerning the first issue yep so the the non-tariff is that they affect the brightness of that that call specifically because it sounds like the effectiveness of that cause yeah first of all there's not a bi standart  baby ascend are specific says that if you have a child non-aligned time barely need to ever 4:05 Israel and then that India easily like protocol right say whoever who gorgeous that contract would assume that there is a there gonna be a zero bytes if somehow they fluid that back like that just just happy goes into another locker memory assuming that or zero may have different behavior but this is a promise right I mean you need to become something in to follow some rules so yeah they're gonna add some more interesting slides after that become even get to but we should ask them about it afterwards on some internet stuff okay okay so I'm here to talk about fireflies and this is our attempt to take a DM which is kind of hard to use and wrap it up into an easy to use tool that just works in the background does everything automated fashion as opposed to now where you basically need to use the kiss big hit for all so this is an overview of my talk person is going to talk about the motivation of why you'd want something like this I'll show you our road map it's stretched out over about two years and then I talk about individual tools that are on our roadmap which we have prototypes for all these tools such as last one but roadmap this will spread out over some time so you can do testing internal stuff like that as a motivation we have tools like bear assault that are easy to use they're high-level or a facility source code level and developers can just basically use them out of the box but the problem is this digit wented out you don't get the guarantees that you would want that they can be my foot level but then we have KPM which is a low level invite code verification tool which really takes an expert to use and somehow there's not somebody bridging the gap between these two sub s will respond to trying to do at the time so idea the ideal scenario of the Firefly is that it's going to drop in testing client replacement for whatever as your testing framework right now we're kind of targeting trouble so basically disk replacement nosh with Firefly and then you're off the races just a couple more bullet points but you know one goal no user intervention required it should be that you just run the tool instead of your normal testing tool and it does the extra analysis or reports results back to you another goal easy for us to roll out more futures reporting over time and then another goal is easy to dispatch large jobs in parallel to the server somewhere so these are credits of long term goal of the project not specifically tied to any of the actual tools we're developing but well well develop the tools with this in mind here's the long term roadmap you can see it goes out to December 2020 I'll talk about these ones which are part of a firefly suite a little bit more but then there on the right-hand side of be on fire flyer where we get back into where you need a whole methods expert present again and we argued some kind of prototyping of these hold up here so specification generation instead of having to write down a specification and verify your contact people generated for you and three five new generation is basically the highest level of assurance that you can get with with anything formal methods usually usually not done accepted like the most safety critical sorts of systems but work you know we're toying with the idea of moving in that direction this is our more specific Firefly roadmap we have Kanis setups that becoming a front end which basically takes the Kay specification and translates it into multiple backends that lob up backends are fast interpreters whenever we talk about the performance of K compared to other things we're talking about the LLVM generated interpreter or the for the K specification and then whenever we talk about symbolic execution improvement we're talking about the Haskell backhand which actually does approve steps needed to do some Molokai execute I'm going to talk about each of these tools in a little more detail but we're starting off with just a test runner and just basically replace you know if during J SPM with kam and then everything looks the same as horrible from the perspective of running the test test case coverage reporting is next that's what we're working on right now is kind of integrating that coverage report data back be of trouble runtime monitoring which is like bounded model checking v1 and then assertion violation checker which is where we're going to actually integrate with the Marisol tool to get kind of assist from them bounded model checker v2 which is we're going to do it symbolically and exhaustively and as opposed to here which is going to be concrete and olney on the test cases that your your actual test exercise and then finally at the end is test case generation that's the ones well we don't have a prototype or yet but we will get there explain why that's important or why it's a nice and it's not important it's probably important is okay so the test runner basically what we're doing is we're taking ktml are making into a full client of the whole client functionalities that you can just use it anywhere where you would use a whole client for testing so we're just going to support the web 3 json-rpc and we already have it to where you can basically just run trouble test but where you're running the KVM server in the background instead of running or the fireplace server in the background instead of running an option it just works then into the values you get kind of more confidence and the test results ascidians kind of regarded as economic aspect of the EVM that's one of the Canonical's episode I mean something like that you can take it or leave it and then performance is comparable if you're in jazz but we actually have several performance enhancements coming out but are going to make us across from them today uh you know and then we have just kind of special purpose Firefly under guard web 3d JSON RPC commands pretends back reporting data from data about you know coverage or analysis like the runtime monitoring and stuff like that so yeah so then so this is this is just like the bare functionality you need this exists right now but the but then everything is going to build on the fact that ok now this is just a drop-in replacement you can switch over to using it not really notice any change and then we start rolling out features so the first feature we roll out is just a test coverage we're specifically to measure octo coverage so here's an example report that the prototype spit out and you can see there's kind of this place after this jump by that's not tested but if everything else is tested by 73 different tests but these are tests with zero tests that's a hole in the coverage data and so as a developer here's these report what you want to do is you want to say ok where is this code coming promise use a source map back for solidity and write a test in there whatever testing part is to use an isolated best serve or fire I'm not heartless linking on trouble tests I swear in the or trouble yeah so we're going to write a test that targets these lines and then you would add that to your test set and then they're covered about Korean singers every every popco to these discardable which like you know there's a lot of literature about whether you know aqua coverage or branch coverage or path coverage or something is the correct thing to do but at least this is something right by the way there are tools that will do covers already so if you look at brownie that's a it's an interesting tool level so a common pitfalls in tests are you might not test something like the default or fallback function or you might only write test for the positive cases of your contract where things are going smoothly so you don't wait test for the reverb cases you might not great tests that actually exercise the underflow overflow and then you might not even test the API to Cody because at the solidity level that you get encoding is not apparent or obvious at all because the compiler takes care of that for you but as desu and point it out if you assume that the compiler is doing it correctly you could you know there was all the each one funds when you're trying to deliver you to ok so then the next tool on the roadmap is a runtime monitor so basically what the runtime monitor is as we instrument the semantics with specific events which basically can fire on any particular data from any particular point of execution during during running the events that I have here is examine overflow introverts in this example so overflow we just detect you know are weaving in addition and over close are we doing a subtraction and this affects other flows and revert is just that the river pop code fires and then maybe like a little state machine just think here saying you know for dating execution and neither of these events are firing we're just in this normal mode of execution ends we go to this code violation found mode but if an overflow event fires then we know that we have to revert and if we end without burning and it's violation but if we end with revert right here then there's no violation because the overflow was followed by a reversion so these properties are temporal in nature so it's not enough to just say there are no overflows because it's pretty common that you will have an overflow during execution that you have to instead say temporarily every overflow is eventually followed by revert before the end of the contract so we're just going to build these events directly into the semantics and uses to supply more if you like but then the semantics has to be recompiled but the properties themselves to check like this formula right here can be specified on the command line at runtime so we'll provide a preset bag of properties users control properties and then basically we're just going to run the user's normal test that's you still just run trouble test but it runs it with this instrument both where it will check you know where these properties file on these test runs and then if it finds a violation of one of these properties on this test run the user can inspect that violation and write in actual trouble tests that would have caught that violation anyway us that you don't have to rerun this tool to get the same guarantee so you can kind of add tests that target these properties to your own test so that's found a model checking b1 assertion violation checker from our roadmap is the is where we would get into looking at the pre post conditions that vision was talk to you about or that Barisal will look at and so varis all checks this property is salinity level but it has lots of tool to do this right just like the salinity SMT checker there's bare acts that have like the complete list somewhere there's lots of tools that will do this but we're going to do it at the whiteboard level instead of salinity level for the higher energies and get their economic and basically because of the way he M is starter way this one you can post um all we have to ask is is it possible to ever reach the invalid code because the assertions post conditions and handler functions are translated to the invalid and if you don't find it that it's possible and likely the users stated pretty post conditions old if you do then we could provide a counter example and once again that counter example to target variable trouble test so that it's quicker to catch next time without having to run this before so then we are planning on getting an assist from Barriss also very solo first checkup episode of any level and it's much quicker to run Marisol saluted total Terry's level of declines a violation then you can just work with that directly Darris all gives you the green checkmark then you run KTM double check it at the right foot level and that will guard against bugs in Tyler and and bugs in the result so that's kind of the plan for this assertion violation okay fine next is the bounded model checker which is basically the symbolic version of this runtime monitor so there's one time monitor only exercises the texture violations in the runs of your tests which are run on specific concrete inputs but you might want to know is it possible there's violations in any runs of the program and so to do that we basically will just run the same test but now on symbolic inputs instead and then run the bounded model checker out to some specific gap and see if we can find a violation there so it could be this example I have here is you know it could be that the test only exercises cases where X is less than 3 in which case you go directly from this exact states that no violation stick is no overflow or happens but when X is greater than the people of 3 you get this overflow and then you get this end without a revert which is a violation of this property and so this wouldn't be caught by the runtime monitor because it only exercises the cases that are in your test set but then we here we would catch it for by the counter example saying oh right X is 7 or something like that and then you'd add that back to the test set and you wouldn't have to rerun this cool to find that violation the next time you would just be part of your test set now ok sorry doing so faster this finally the last tool that we're thinking of this is for each of these I said you know so once you find the violation and have a test effect your test set but I would catch it without having to rerun the tool and that's to kind of speed up your later development process and to guard against other issues but the very last poll were planning on but in Firefly it is where we'll just generate that test for you so in the case of here you know we'll add for October 14 and 15 producing analysis and find the test that will actually exercise that particular and those particular off coats basically or here you know in the case where X greater than equal to three we can ask the Microsoft tools they give us an example of an X is greater than or equal three I know that's really easy to do like seven or something sometimes it's harder you know and so then and then the assignment variables that won't exercise that particular that's the overall for the Firefly at the moment I've put up this road map again you can see it kind of extends out of ways we are in this space right now like I said we have prototypes of all the tools going on eager not the test based information but we've given ourselves some time to really make sure that the everything's ironed out and works well we just want it to be basically drop it you want you that's one of the goals is users don't have to know that they're that they're using each other until the tells them hey here's a problem okay burgers gonna wrap up any questions one minute anyway and then you could go back the general is missing coverage you can go backwards it's all sniffing yeah it may not be possible and like that you might have to actually grab some specific transaction or call data that I suppose they don't like incorrect 89 podiums yeah I know but most of things like so how are you excuse me this like kind of generated yeah so the source time P would be more just to assist developer it wouldn't be used probably have automated customers there we do just generate exactly the call data we need to feed in to exercise that case for that already or well so that's why you would you need the temporal property which says like overflows are okay as long as they're followed by a revert in some case obviously that's like a little too broad scope of a property late I mean because like sometimes the subtraction is what can i think you so those already exist acts such as part of the kids for right now I was just showing that's how the tool is made right now which so I wouldn't ask you about the tool against after December 2020 what will you use the LLVM back and Brandon the other one because of the speed oh yeah it's early the LVM backend is basically you take the semantics and generate all the unpick code that directly implement interpreter for that language but it can't do any symbolic execution but there's a lot of overhead in doing so execution that closed it down too much for actually making or something like that I was just going to say I think it's important to note that the technology is networks we use it internally it's simply actually not diagnosed and Thank You snow you know this is not thankful whereby anybody generally wanted to use the game framework for all these different volumes of these metals form of Education formalizes janitor tools requires expert require us or others in their expertise for whatever what they want to do literally spoon leverage the capabilities of the tool through automation and make them available to everybody and an automation comes from poverty to empower our bodies and I like that one a nice people don't we know that certainty in the automating whether you do that and network partner together and others thought for the entire community and especially from amazing very cool so he and I also wanted to add we are looking for you know people who are interested in conversing with us to be kind of help users and like a closed out of us sort of thing so all right so again I want to remind you that the key framework is language para metaphor in which our trusty but one of the tools in the game framework here about programming language you plug and play and opportunity to the same with many other languages already finding semantics for several and other languages which will both take event the power to propose you want to formalize and analyze the protocols yes this is not repent each of the key framework because it you will care whether whatever you Maggie is a programming language to another and what you formula is that and that can be multiple a protocol or token specification what you do that then you can use and wear it equally professionally we have for tonight actually I know I working with and if you really like the bass the fermentation but you must want to be yourself for my verifier contracts for PO box brothers and have a few minutes for questions one minute left now we're one minute yes first class is a Grammy language for mathematics there are two formal semantics defined by other groups not by us and we don't know how one of them for sure define but we are working on their face and was encouraged generated [Music] so that white firefighter we are through then that becomes too good all the automation but anyone is to Foreman is faced by the property we need to learn or that obliteration part the part of our bodies more than half the time you know that we spend in the customer understanding dedication the property has been formalized education properties yeah I wanna wanna select Oh well now this is another program especially can we do some of the tools apologies but I mean we don't need to spend too much time to get a chance exactly if I wanted a fight exactly as if it does because you say that testing can be attractive as an investor we don't really need to write national distillation right testicle execution races require body but the point is that now you can get more out of writing your tests I mean there's some work that's unavoidable you need to somehow tell it this is what I want my contract to do either in the form of tests or in the follow of all specification which is more exhausted I put attempted to Mississippi hi hazel yeah yeah [Applause] you 
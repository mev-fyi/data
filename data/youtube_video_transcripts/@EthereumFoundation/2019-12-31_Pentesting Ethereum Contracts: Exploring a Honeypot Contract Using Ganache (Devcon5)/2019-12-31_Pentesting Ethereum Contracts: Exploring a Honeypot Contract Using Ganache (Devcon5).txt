[Applause] all right I am the rook I am the lead on ganache that trouble and this here is a paternal long chain engine or engineer finished it in this light so it's shortened and we're going to get in trouble teams yeah so if you have can ask questions we are the people that travel to ask so you all probably know who truffle is known residents do to anyone but if you don't so truffle is a company whose goal is to build tools to get developers from idea to death as comfortably as possible so I think sums up our our goal pretty well so we have three or four but three main open-source tools someone is truffle which is a dev environment testing chamber in acid pipe pipe line for blockchains drizzle is a front-end library for gaps and then of course ganache which is your one click blockchain so what is ganache so ganache actually comes in three variants and most people think of compassion as the UI you guys think like who's hear it not who is aware of UI and CLI and core so who hasn't heard of one of those things wait which one core okay anyone else okay sir core core is the part of Hamas that does all the heavy lifting and so ganache core is a separate NPM projects that CLI actually just wraps around so if you do like require ganache pork and your project then you will get the provider and a server that seal I give you anything access to the programmatic axis rather than on the ceiling so this is what I cannot see why looks like this is the main account screen that starts up you get 10 accounts by default you have a mnemonic don't put that on that please assume so this is trouble contract integration so if you have a trouble project you can add that to your Nashua and you can actually see all of their deployed to your local cosmetic gosh contracts there how many transactions there are tariff every useful and new as of yesterday ganache for King does anyone know what ganache for King is nobody alright that's fine ganache see alive and fork modes anyone seen that you okay you all right you come up and eat good so ganache poor thing is a really hidden feature cannot it sounds now on you I and the alpha version you guys can download a living over great smile I literally posted yesterday so might not might not be too stable but ganache working lets you I was really easily easy main that testing without the cost so what that means is inside of ganache UI you can now select main net like from Keira as provider or you put your own provider in and it's a ganache will then fork at a specific block number that you specify or latest and so when you start up ganache you will actually get instantly well a couple seconds these are these are mini Matlock members right here and the dates that they remind and I got used to them and all of the transactions are here without sinking and additionally when you now run your contracts against your local ganache it actually emulates being on beignet that coverage is a sound good so so risk free no cost so you can deploy your contracts to ring that using other contracts that are employed on maintenance oh sorry to ganache you I like it was on maintenance so it's like fully emulating men yet maintenance so it's like you fork right at this block number here the four o'clock and all the data that is on magnetic now available to your contracts under what she paid a feature any new transactions will end go on the fork so you're sort of risk free access and if you had sort of to access say some seat or data that was previously on the chain was just professed it from your provider questions yeah so we actually just so the council you saw up slides back show you actually the way that works is we just lied to the state and we just say each of these has 108th that's us is the default so we do the same thing they're holding as soon as before the very next block number is an empty block that basically just changes the state we just kind of forced it to happen in addition on that note actually we also allow you to sort of pretend to be any account that you want so if you want to be issued sends actions on behalf of account that you have accounts here oh yeah you're are you doing up the price so you can emulate that so you can unlock those accounts if you want to instance so you can pretend to be the down Packer and have to doubt so the theory of development is kind of high-risk actually earlier today we burn some ether trying to deploy and no we shouldn't have to but we did and other issues or your bytecode is public so you can't hide your source code so you know you shouldn't use obscurity vibes security by obscurity but in a way we all kind of do in normal development but theory is a little different all your contracts are public so anyone can run your software in it I think you all know this but meanwhile the hackers are private and anonymous and there's no recourse for if your contract constraint you don't know who that is and there's no jurisdiction jurisdiction that can come after those people so if you mess up your users lose big is here every course so some key concepts are gonna go over this real quick gasps fallback functions and re-entrant see sorry can actually see that it's like to transact on theory you must pay a fee this fees paid deaths gas is painful and ethan operations on areum likes or the cheating data transferring funds math operations looping collect requires some amount deaths generally transaction attempts to use more gas than it is giveth the transaction fails and the state changes are persisted so now for walk functions these are functions that can execute operations as long as there were enough gas for t2 it a fallback function must be external and it is the unnamed function in their contract it is called learning the contracts address descent ether or a non-existent contract function is called who hasn't heard of public functions I almost won't go through this skip of that and re-enter to see boner goalie does anyone know what that is already so this is be fun so I don't know we spent like an hour trying to come up with this line you try to get it down to 1/4 inch but it's the most basic way I can define Regency vulnerabilities for smart contracts is it's when a contract permits unintended free and rotation of any of its methods after pulling an external contract during a single transaction it was pretty tense so I'll say where the contract permits unintended Rhian vocation of any of its methods and external contractor in a single transaction so another way of saying a smart contract your agency allows for multiple locations and other concepts and methods during the same transaction usually caused by forming exes gets to be malicious to contracts while that fund them without properly agency protection so that's that's there's a lot to take in there and we're gonna get into much more of this so a reentrant vulnerability example is anyone does anyone know actually where the vulnerability is and this code [Music] the battery life every second this was another Christmas in the camera contract that's it right here yeah so this line right here is a reaction similar village and the reason for that is sender duck call of values will pass all of these remaining gas that's left for this transaction into the sender and sort of send there is a contract and with a fall that function that is payable then the center will be able to execute additional transactions after the fall Peck function is called and so one of those transactions may be to recall withdrawal and I'm problem with that is that this line will execute think I have all this other stuff here wait what I'm getting ahead of myself we'll get there [Music] so before we get started I teach you guys how to do this this remember can other thing you should the intent of this workshop is to teach you how to protect your contracts is not to teach you how to exploit others contracts so don't steal all the illegal unites people this is for protesting your own contracts and in a real world scenario yeah so don't say it shuffle talking how to steal okay so I was getting my help myself there I really wanted to stir the mess so this would be an example of a an attackers contract that they offload in order to be bad so and this here is the fallback function and so we saw that and I contract earlier that it was could be read in Turkey and so I'll show you how that works here so what happens is initially at one of the cases in a contract is to see that with some amount of value and so whether it's through Mears its depositing let's say one meter into the victim was a big contractor saw just couple slides ago into that contract so they now home that anchor as a barrel imbalance in my contract so the attacker then it would call the be bad which were being called withdrawal and now this would all work wonderfully so this withdrawal would then just with it all this one has enough value but because of this hacker being a little bit cleverer they implemented this whole that function and what this function is going to do is after the original contract gets this amount from them from the caller from this concept here it'll get their balance and it will report that and then send that amount back to the contract and at which point the contract will then be able to go into this file that comes in and call withdraw again and so what this then does is re-enters and checks the balance but we haven't zeroed out the balance yet and the original contracts so this balance is still the full one ether and so this is the second time we've been here and so the next line is going to be to call that fall that function again and so we're back into the bad guys contract and what are they going to do they're going to withdrawal again and they can do that as long as they have enough yeah so that's what this little check here is it just checks jobs to make sure that the transaction won't fail so pretty crazy happens in the real world so this is an example of how you would have executed this sort of attack using truffle to run your test so the attacker would deploy their contract to Maina and execute the attack units per contract all you need to do is run truffle test code books this and so this is this time with deploy I said we receding into the wand ether here pointing up there and executing the attack that's it that's all it would take okay so what we've covered so far truffle ganache - working gas follow that functions re-entrance see the exploit and a little bit about truffle test I need questions apart someone else no all right we've all heard of the dow hack and the Dow hack was a hack that was based on Regency it was a Regency bull vulnerability in this function right here so they are in this function here in are sending all of the remaining gas to the recipient and that enabled the recipient to call back into this function it was actually much more complicated than this there's several methods that they had to go through and kind of kind of figure in order to get this payout to be called again but this is how they did it I think questions on that I'll leave it up all right well questions anyone having good let's skip a slide so there's a bunch of ways to do reentrant seek protection and your contracts and methods so one is this thing called check effects interaction pattern and so we're first you do a check so you see that their balance is greater than zero for instance and then you perform the effect that an interaction will happen so this is you zero out the balance before you send it which is what you were saying earlier and then once you do the effect that you finally from the interaction another way is using loft interview text or open Zeppelin's like Regency guard and this basically is you have a boolean value you can call a blocker or if you want which would be true false and so when you come in together the first time this requires them in the past and then you would immediately lock it so now if anything happens when you do the things this condition will fail because lock is now true and then when you're done just make sure that you unlock your contract if you don't if there's an error and this lock doesn't unlock then you can effectively lock your contract forgetting you okay that myself and this is really important who has heard of Edison and had just transferred and why those were out or one of the reasons why sitting right now so these were added because of the answers that call sending all of the remaining guests by default and so that was seen as a homeowner ability and that it wasn't clear that that would enable Regency and so what they did as they come up with other Sendai just transfer which will automatically limit the amount of gas that's passed to 2300 ish it's complicated but what that did was effectively make it so that it was too expensive to do anything in a fallback function that could possibly result in reaction see and so now if you use a descender as that transfer and to send that ether the fallback function will be stuck there wouldn't be able to get back out and into your your contract any which sounds great it sounds like that would fix everything and it did but problem was I just went to slides again constantinople everyone everyone knows about constantinople I'm guessing it's it's great so Constantinople had an EIP that actually lowered the minimum gas cost for storage from five thousand to two hundred Ghats in certain situations great ish it's not good so when that would happen if all that functions could now fall back in and perform reentrant see because it really caught this a couple days before alliances crazy so luckily in the con it it was removed and never made it to Maine that also issue because it actually is active on the net was just okay and then there's Istanbul so sampled increased gas costs actually kind of do the opposite as Constantinople's decreases we're doing and that there are now functions on live contracts that can not that will no longer work so this is actually common faces from contract that would be States before incident Istanbul for a lot but these three parts are its position in the total I would actually do like to X loads or 1 X load and because of increased cost and s loads and a couple of other optos this one L fail every single time there's no way for this to pass up in Istanbul so the point being that you cannot rely on gas costs as we protect gives Regency so just remember that that's the only thing just always be aware that so the honeypot I'm hot is fun and then one heard of a honeypot and like InfoSec yeah so honey pots an emphasis like are actually a little bit different than what we call honey pots on curiam but we're gonna we're gonna keep calling a honeypot because that's just so a honeypot is a way to trick the bad guy into becoming addicted and I so there are some types of hypotheses you you can go yeah there are three different sort of general types actually they're really well laid out at this link but in general is sort of taxonomy of hot coffee pots or their humane classes that class of honeypot said interact with their machine some that happened during pollution and some that are actually just due to misleading or missing information lock Explorer so again for an example like EMS that's a well-defined set of rules and everyone should be sort of or has access to those rules however given the implementation of some contracts they could look sort of non-intuitive and therefore would be able to trick you some some bugs actually exist in the solidity of pilot they're actually usually very well documented but there can be some that have have not been discovered yet our sorcerer basil and then for example some things in watching explorers for gently there was a time where meteors can only showed you 80 characters wide if you were to upload a contract that had something outside of that you wouldn't be able to see say that there was a sentence or a transversal that's the general gist and we'll go into some so this next slide is fun whenever you look here it so just love the slides up Oh some people came in so make sure you go to these slides at SS that come back so this next one it's like I'm going to skip over but it's fun and I spent too much time on it just check it out just tell me if you liked it we'll go ahead the trace Buster Buster anyway the so far is covered truffle ganache gosh poor King callback functions or instance II exploit testing Dow Constantinople in sustainable Regency protection and honey pops questions about any of that yes do you member the the difference is something about if the way it fails right if if I recall correctly is its what what is passed along as your message sender and like sort of like a context those calling or yeah I think it is just the way that it fails there's actually really excellent answer for you on Stack Overflow I just can't remember which one does what any other questions [Music] okay so Sam rule returnable and yes it works or not good and then transfer well it's like we work right yeah so any kind of like an idea so it's like you can have like lots of different types of honey pots so in infoset it would be probably a mousetrap so like a honey pot in there's a second it is just like a deterrent like or our way to learn about your attacker so you set up a network that looks open and see what the attacker does that's right that we can learn from that so an InfoSec mousetrap is a way of trying to convince the attacker to come in and see your network and give something up somehow and that way you can catch them and win that way so we're actually so in the theory of everything cause a honeypot or a box so a honeypot is the contract that fools somebody an attacker into giving something out usually that's going to be the trick transfer throws and Senators box better all right so work self time we're going to take all of that and we're going to exploit or attempt to exploit ain't no honeypot on the net and so as an overview what we'll be doing is taking the code that was young ether scans so that this this person that of one of this contract in this one they uploaded their contract code to ether skin except it wasn't their contract code so even though ethers can't verify that's right by code there's some tricks in there that make it actually behave differently than what you see in the code and so we're going to see how if you just wanted to exploit this because you're a bad guy and you wanted to steal the ether stored in that contract it would fail and so we're gonna do that we're gonna we're gonna run this and we're gonna run out locally and ganache and we're gonna see that it fails and then we're gonna run it locally in ganache with forking enabled off of beta and the conference Wi-Fi is a little rough but we're gonna try anyway and yeah it'll be fun so everyone needs to go to workshop will cheat you to this slide figure on download no js' I suppose and then it should work on a that will likely work on 12 I found a lot of great toy doesn't work wrong eat well if you want to use you is because you're more comfortable you are then you're down try to download our alpha I can also try to set up I have all the version for Mac Windows Linux on my laptop and so I can give you links to try the downloads right from my laptop network if we have to or install ganache toi and achieve the global black here if anyone needs help with note or MPN no and then you will want to clone this plane so that's where I'm going to this website will help for easily so clone this if you need help with that let us know and we run npm install in here at hand workshop so ask your neighbor ask us and we'll help you Clark [Applause] 
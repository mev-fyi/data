foreign [Music] I see these layer tools not just as a scalability solution but rather a way to extend what ethereum can be could be or it perhaps should be so I'm very delighted that I have with me these three amazing people who are running like what in my bias opinion is perhaps the most unique and coolest layer tools in the space so I would love for three of you to just introduce yourselves talk about what you're building very briefly before we get into like the cool things of your systems yeah hi everyone uh my name is Joe I'm one of the co-founders of Aztec and I I your product um Aztecs privacy life for ethereum um and we currently have Aztec connect live which is a VPN for all of D5 and we're working on a fully private VM which has private smart contracts hi my name is Louis I'm ecosystemia stockware um we have to talk with over three years and a half so star queer is building Security Solutions using xero knowledge proof more specifically Starks um our first product you may have used is called star X it is the one powering sore immutable dydx diversifying plenty of others and in the last year and a half almost now we starting to work on uh Stark net which is a general purpose layer 2 on top of ethereum enabling scaling using uh during complete language called Cairo uh look so my name is Nick I'm the CEO of fuel Labs um and you know to describe fuel in a simple way um you can think of it like a layer two we launched the first optimistic role to ethereum uh that was a fully trustless um you know optimistic roll up no multi-sig anything um and to describe uh what we do we have a new kind of transaction processing system and this can take the form of something like of Lydia it could take the form of something like a layer two um we use egxos for this we use a different Paradigm from you know typical ethereum systems we have our own language called sway which is used to Target this system we have our own tooling We have basically a revised version of everything ethereum offers um and uh yeah you know we're here to help ethereum scale and basically incorporate all of the lessons that we've learned from you know production ethereum over the years provide ethereum a new a different kind of Pathway to scale that isn't the evm you know tool chains and evm processing systems very cool all right so we have like we have a good mix of people here we have like two companies building zero knowledge we have two companies using utxos but if all of you have like such unique branding and products so like let's let's go for a very first principle approach before I ask why you chose non-edm can I ask why not why should blockchains just not use normal VMS like I know x86 or Ram why is it so necessary to build something new I think I'll I'll take a stab at that one so um x86 and these other instruction sets are really designed for uh different Computing architectures so you know when you're designing x86 you're designing arm you're designing them to Target a hardware system and so that's going to come with its own criteria and its own restrictions and physics whereas with a blockchain virtual machine you're you're designing for a different kind of physics so you're pricing every operation you're designing for adversarial scenarios and because of this you end up having odd design constraints that really put you in a corner and you have to really understand those physics to design a good virtual machine that will both be you know great for processing but also be great for security so it really is kind of an art designing some of these systems and we've learned a lot since the you know kind of inception of Bitcoin in 2008 all the way through to to now and you know basically uh those those instruction sets are for different purposes whereas um you know virtual machines for blockchains are categorically a different thing now you can do it but you do lose some of the nice things whereas if you had designed it from scratch you you basically can kind of design a better world so yeah uh I was just going to add I think like compatibility is one of the main kind of reasons why we have to limit the feature set on uh blockchain uh kind of VMS like you have multiple clients trying to all get to the same uh kind of state update and that doesn't exist in the world of kind of like Intel um chips so it's just yeah it's a much harder problem and that usually means we get a limited feature set like we have in the evm no I don't really have much to say I mean the technical aspect was very defined yeah blockchain VMS is an art is really a good way to put it so what are your expectations from a blockchain evm then from a blockchain VM like what are the things we've learned from the evm what are the things that you wanted couldn't get built your own things uh I think just a starting point is probably like the more complex the VM is I think the harder it is to scale um we're seeing this with kind of people trying to prove computational evm and you need like giant data centers to actually construct that proof so a simple kind of maybe tailored feature set of the VM it's probably going to result in more scalability this may be the first point what are your expectations from a blockchain VM and this goes to like things you can get the media yeah so so um the thing is that what we were expecting from a VM the blockchain VM uh before now changed it changed significantly between the origin of Bitcoin and ethereum and what we know now and I guess one of the main difference is that um we now realize more than ever that we need scalability and we now discover that we either are Tech that gives that's going to be T1 preserving the core principle of blockchains and the core principle of blockchain is you know trustlessness and verifiability and before and I'm going to toot my own war and obviously in and talk about DK here before the the arrival of ZK as a practical technique to bring very fast verification we just went to to the source to the simplest which was the vvm um and now that we we are looking at those new tech and this new knowledge that we're learning you know what Fury is doing or what surana is doing and what others chain are doing um we are bringing the new you know more top-notch computer science to it and and which are providing more feature set that we are looking forward to to develop good product good tabs on top of crypto blockchains it's quite a lot yeah I would say so coming from sort of like 2015 2016 blockchain to now um you know like I've been using ethereum almost since it started so for me it's been like you know a long road um and I would say that the expectations have completely changed I think but just as well we didn't the community didn't fully understand all the design constraints when they were putting it together and there was decisions made over time particularly with the kinds of architectures that ethereum chose that ended up being really costly for just compute and and for all the different kinds of design potential that you want um and as well backwards compatibility was something that you know it was was not really kind of in part of the picture and I think it's ended up locking us into a design that wasn't really educated on what could potentially happen if we had this design and so we're just sort of stuck with it so um you know I think the expectations are that you know again you design a safe VM you design a virtual machine that can provide all the behaviors we like for ethereum but as well open up a lot of new kinds of designs that we currently don't see that we'd like to see and then on top of that um you know just designing for um you know a lot of different uh scenarios where if you could have done it a different way you would have factored in all the research that we have you can basically you can create a new reality for blockchain that I think is much stronger than what we have now so yep uh yeah I was going to say I mean like one example is probably like the curve that we all sign over so we've all got a seed phrase um and it's kind of hasn't really changed in a while people have tried doing smart contract wallets but if you control the VM uh everyone in the room's got an iPhone or an Android that's got a TPM in it and you can actually build that into the VM and help get adoption so yeah recreating all of the the evm I think would be a mistake and just trying to kind of focus on adoption in the feature set would be a good thing and and um um you know specifically about the the change that we are expecting now from the VM there are a couple examples which are just so significant so clear that the the target gold Target moved uh Aragon when they launched they were like you know these massive Os or for Dao with like very well filled out the point that it was way too expensive I mean back then no one cared you know when they started you know using your whole block for yourself was like who cares no one's here and now you know uh you try to optimize the way of all those people on Twitter doing those gas golfing to a point which is just ridiculous right and and so um one thing that I'm we're observing specifically in the context of starknet and the new language that we have is that when you provide new like feature set and new capacity to the chain you get like a combination of creativity that you like new things that you don't exist before and so um Joe here was talking about uh the curve we're using or the fact that we have EOS he always was a mistake in retrospect and the problem that EOS is that they put us in a local uh equilibrium there is no way smart contract wallet will pick up on ethereum today because it's always cheaper to use EOS it's very cheaper to my priorities and so there is no incentive for the dabs to actually build their application to be very well compatible with redconnect or just you know to work well with smart contract wallet and some even some just reband them because they're smart contract and so um in the connect stock Network we because we don't have EOS we don't use a Smart contract and therefore only smart contract wallet we have people using the native curve of the network or the start curve and now we are also people trying to build using the trusting Enclave of your iPhone So within the same wallet you can actually use your iPhone you can uh you you can use any care that you want you can use your brothers that have also a curve in it and so we we once you unlock the limitation that we know you start having new things that get created basically right away yeah I agree with you I think asking Engineers to gas golf instead of thinking about Innovative things to do is a big waste of time and probably prevents a lot of innovation that could have happened in the space by far yeah just just to speak to that too so like I've done my share of gas golfing like I just I want to say I'm like you can check my GitHub like it's it's sort of like an art for me but it was more of a therapeutic thing to gas golf than it was like a this is a good use of my time mind you that was before I worked with fuel so you know started fuel so essentially yeah um the thing is is you can gask off all you want but it's not enough and it's never enough because when enough people use the system it just gets congested and then you're you're back to where you started and you keep asking the same questions like well how could we do this how could openc run in this way you know and then the thing is is you lock yourself in so much to just trying to support this thing which by the way I mean there's some controversy around it but the evm was sort of designed a little quickly and was put together a little fast and at Defcon won there was some conversations about that particular thing if you want some spice but anyway the the the reality is is you know I've been sitting here looking at this machine for years like years and years and years and it's held a lot of different kinds of designs back because it can't move forward like it really is very very difficult to move forward so um you know the fact that these teams are sort of bold enough to still be part of ethereum but try to do it differently just for the sake of like getting to Global adoption and getting somewhere else I think is a is a you know it's a sign of how good the ethereum community is because you know we're not afraid to challenge what people have made a culture of the system and I think that that's a it's a very beautiful thing you know so but yeah it's not all just vitalik and Gavin's design that gets to run the show you know I mean we can try to do other things and with layer twos we can now so it's great yeah exactly like layer tools should be seen as a way to extend everything that we can't do in ethereum not just a cheap transaction and something no yeah yeah about the you know everyone come to say about uh yeah it's always about cheap no it's not about cheap really not about cheap I can give you a few examples of things that are being built that you just like dream of anywhere else in ethereum and so for instance um Sparkle chocolate is most specifically like an important one because smoking the wallet is not working crypto crypto if will not get Global adoption if we have to keep a key and if the EOS mechanism like a new private key remains basically we're gonna go back to the financial system where we have five Global custodial and and that's not what we want and so on the smart contract part um we are now things are getting unlocked for instance uh urgent around here actually or it's working on extensively on Stark net and they're working on the plugin system meaning you can actually install an app in your wallet meaning that for instance every time you spend 10 goes to saving or every time you you want to play a game you actually don't have to sign your transaction you can open a decision key that's going to last six hours and that is only authorized to do a set of operation and so really the cheap transaction is like an afterthought it's just a requirement and honestly to be honest I don't think it's going to last long like l2s himself will not be cheap I have a theory which is you can't have a cheap successful economical layer because there is no reason in the universe what that my ticketing app that is trading or where I can change my my Nifty of my ticket being packed it by the fact that the big price of Eve dropped by 20 and all of a sudden my app doesn't work anymore and so that just doesn't happen that's yours just won't work maybe maybe and like what enables all of your architectures to actually be able to do these things I'd love to I think everyone here would love to know more about these architectural decisions they've made that enable these new paradigms here okay so if we're so we all get what you're saying is we can all shell a little bit just like a little bit for each project okay all right okay I'm gonna try to keep my Shilling in a kind of a dome so some some highlights but okay so first of all the fuel VM is highly inspired by the ebm so all the lessons that we've learned with the evm over the years it tries to incorporate it doesn't leave that behind it doesn't try to say we're arrogant enough to rebuild everything so that's the first thing we've basically taken all the great eips all the great research that the ethereum community has done and other blockchain communities have done and put it into a virtual machine now we've made some very interesting decisions um and they all impact the kinds of things you can build the the kinds of experiences you can create and as well the scale that you can achieve with this particular system so some highlights are it's utxo based so that's the first thing secondly you get smart contracts just like ethereum there's no loss in any kind of behavior from a developer secondly Scripps is another one so in ethereum you have to go through a smart contract to make multiple calls it's ridiculous it never should have been that way um so we have scripts and then we as well we have account abstraction via what we call predicates and so this allows you to send to the hash of a script and essentially if the script returns true then you can spend the output and this gives you all kinds of things you can do for example we can support signing with a Solana key over a utxo that is usdc from ethereum you like that's pretty nuts you know and that can happen at it's cool and then that can happen in like an output you can also do things like um you know basic well some some other cool stuff um is we've redesigned all the processing within the virtual machine as well such that when you make a smart contract call with fuel instead of having to serialize and the engineers will know this I'm sorry if you're not an engineer so it's just bear with me but when you make a call you don't need to re-serialize the data between smart contracts it's all in one chunk of memory but the memory is segmented per call frame and what that does is it allows you to go I'll write 5000 things to memory here I'll call this contract over here and that other contract can just reference any one of those items so you can imagine trading engines things like this would love that because you can write so much to memory you can really abuse memory and you can abuse compute which we have a lot more of and not storage so we give you far more options to use that are not storage oriented so these are all part of the processing model but so you know lastly for the last bit of shill this also because it's a utxo model you get all the nice things of ethereum but you get full complete parallel processing so you can you know basically have all the benefits of some of these newer ecosystems that are parallel processing but because the fuel VM is designed to be arbitrated it can also be a roll up or layer 2 on ethereum directly and on top of that it has trust minimized light clients so you're not leaving behind the nice security properties what we have with ethereum so that's my shill on the VM yep you go okay as is also utxo model I'm a big fan of utxos they're very difficult but they do enable kind of uh some important features which the account model lacks and in our case that's privacy so it's very hard to do privacy in account based model because every time you update an account you leak which account you're updating um so an utxo model we can create and Destroy utxos and they all look random so it's one of the key kind of design choices we had to make to get privacy and then kind of more into the VM we also have account abstraction built into Aztecs so we have this concept of a viewing key and a spending key when things are encrypted there's a different set of people who may need to see the data to those who can spend it so I think yeah being able to control that has been a super beneficial for our architecture um today the VM only supports um kind of circuits or programs that we've written but we're expanding it with a concept called Aztec 3 which uh Mike from Aztec is actually talking about tomorrow on one of the other stages and the main kind of uh improvements there are that every program is actually a client-side generated CK snark so we've built a language called Noir which enables developers to write these programs and then users will actually instead of sending this to be executed uh on kind of a node they'll actually compute the snark in the browser in Noir prove the correct running of the program and then send that kind of packaged up kernel circuit to a rollout provider and that means you actually get really cool features like code privacy confidentiality and anonymity so we're excited about that um so in the context of Stark net and starkware um we also in creating our own VM um but and focusing only on on scaling uh you can similarly to fuel and I just want to sort of make a differentiation in terms of scaling between the field approach to um which is basically polarization enabling the execution layer to do more and the ZK approach which is basically requiring less from the verifier and those are orthogonal completely orthogonal so you can get both potentially but the reason why I'm making that that um that the differentiation is because uh the in some way the way darknet scale is by saying you know what validators can have stronger machines than the rest of the world today when you look at ethereum or any blockchain like Bitcoin the the your your limit scaling is limited by the weakest machine in the network and so when we compare the TPS or whatever I mean the not the throughput of Bitcoin versus ethereum versus the fruit of Solana we are comparing Apple oranges and Ferrari uh uh and the reason is very simple Bitcoin Target a Raspberry Pi which is roughly the cheapest computer you can find um ethereum says okay you we are targeting this is a bit too constrained for the real replication maybe we can have like a 2500 machine so for instance I think Eve completely on my laptop my 2021 M1 upper my book uh like a month ago two months ago and um and Solana is like you know what two thousand dollar machine is very constrained because companies they pay that for like a flight for their employees to to Bogota uh and so maybe we can have a 2005 reservation per month that's a practical uh cost for servers for an entity for copyright and so we are really not comparing the same thing and so when you're looking at the the limitation of scaling for all those blockchain is the weakest Point what is the minimum machine the network needs to have and so when you use a regular traditional um execution layer uh without using crypto cryptography to scale it you basically um don't really change this symmetry you the guy who makes money is still requiring the same machine that the the guy would verify it in his in his garage and regardless of the fact that these miners this validator can spend millions of dollars at stake or million dollars in machine it will roughly run on the same laptop that you had at home and so ZK breaks that breaks that's uh that uh parallel all of a sudden it it doesn't matter what kind of machine the validators have I can verify it on my phone in a millisecond and so they can have a data center for like here I can still verify it on my phone so the the start were created its own VM called Cairo because the pro that we have with existing VM is that they are optimizing for a different programming paradigms that um zkps so the best way to explain it is that you talked before about x86 so you're really good you know regular VM is optimizing for basically your CPUs and your transistors and transistors you know one thing very well which is Boolean logic and beats and bytes the thing is what you're underneath the KP environment you are working in the arithmetic environment where the base element you're working with is what we call a film a field element which is basically a big uint and the cheap operation that you get is multiplication addition division subtraction and Boolean logic is expensive so you you move the model on his head and there is other differentiation that I can expand on um like non-determinism or something like this but roughly speaking to make a change that is verifiable cryptographically verifiable and using ckps variety proof I know what to call it you want to have Optimum you prefer to have a VM that is optimized for the computing paradigms and so um these specific dimensionality as I said these orthogonal to the execution layer and so start net right now is basically roughly taking the same structure execution model then uh than if ethereum uh with a few distinction like we try to do optimistic polarization we try to do we are looking into different data structure while remaining using the remaining of the Constructor of Eve also expanding and what's the new state of the art is coming like a thing like three uttos we are looking into what they're doing because it's cool it's useful and so um what matters is that you that is a separation so start that is focusing on the the separation between the validators and the rest of the world and then afterwards we are looking into optimizing the execution layer to provide the num the the the the brought the transistorical that's even expect let's just say one last word because node requirements came up so I'll just I'll just make one comment which is um you know we're in Latin America and this is a new place for ethereum to be uh I think you know having been through a bunch of them it was a bunch in Europe Etc I think with fuel and the way that we interpret node requirements we want people here not like you know in Switzerland like people here to be able to afford to run a node in This Global peer-to-peer network not only for their own research for building for interoperating with the network but we want them to be able to afford it just for the Global Security of the the system itself and so I think with fuel we've been designing the best system we can possibly think of but we're also making sure that when we talk about node requirements which ends up being really important because it really dictates how much throughput how much processing you can put through the system um you know I think this is like a very key factor so so for us we would like someone in Colombia to be able to actually verify this and not have to pay an enormous sum like someone's whole Year's wage or whatever it might be to be able to just run a node you know exactly yeah I mean to that point The Genius of having rollups like the ones you all three are building is not everyone has to run their own node so that really adds up yeah I think it gets worse for privacy because there's like a censorship component so um if you kind of restrict like your kind of nodes to AWS Google cloud and Microsoft um quite quickly you don't have a decentralized privacy Network you have Fang um so yeah our node requirements we we do the same as fuel and we have to kind of think about how do we get it working on a laptop how do we get like Roll-Ups actually being built uh in a peer-to-peer Network um and actually some of the l1s are doing a really good job here like Mina's got a model which is kind of like a Federated uh approver so I think there's a lot to learn from some of the other chains as well and by the way you said that uh not everyone has to run nodes I 100 disagree with that we should be able to run node on your phone you should you should be yeah and and that's that's the target that's what we should achieve so so um maybe it's not practical and the fact that it's not practical is irrelevant the fact that it's a Gore is what matters that's what's drivers that's what brings us towards one point and so um that I I really don't I really want you know ideally in the future inferior would be make redundant to some extent of course not but to some extent of this on your on your phone or you should be able to run the network locally that makes sense so we spoke about all of the utxos and stuff and I know you mentioned about how it fuels parallelization and the stuff you're doing with verifications orthogonal we all over here obviously are cardano Maxis and we all obviously were quite sad when cardano couldn't work out with utxos um how are you guys doing it possible what cardano couldn't and I guess for stockware for Louis when utxos yeah I can go first I mean I think it's it's the elephant in the room um so currently an Aztec client has to sync every single utxo test it see if it's your utxo try and decrypt it and like clearly that doesn't scale so um at the moment we kind of use brute force and we have some like very Advanced multi-threaded wasm so like pushing the browser right to the edge of what it can do um and that gets us kind of the current throughputs that we can kind of think about today to get to kind of I guess World Adoption um we actually have to look at kind of the network layer of privacy um so we're moving to looking uh using something like Nim um so you can actually request utxos from a kind of more centralized data store without revealing uh who you are and if the utxo is completely random uh when you request that through like a network layer privacy layer you get the same anonymity as kind of a full sync so there's ways to do it but it requires kind of the whole privacy stack in our case and some pretty Advanced web browser computations so I'll address that one pretty simply so basically this is one of many things Charles has done to damage the reputation of something completely innocuous to this particular thing so uh so basically just for some spice for the panel yeah yeah just a little little spice so the main thing is cardano's model at least from the way we can interpret it and this is sort of how we think about it too is it was implying a certain kind of determinism across the system that was basically blocking or bottlenecking how they were using the utxos for example if you build something like uni swap what would happen is is and again this is just my read so you know let's fight on Twitter about it or something but basically you have something uni swap well you can't really have it because with their model you had to sort of sign off on the change state but what if you don't know the change state so what if there's a bunch of people in front of you and behind you in the mempool who are actually manipulating the state of this one thing then when you produce the result of the utxo well you don't know what it is so in their model they couldn't do that so so it caused this issue where like you would use uni Swap and there'd be like one transaction per block for that one app because you you didn't know what the state was so you had to just use it one after the other obviously this is horrible like you know Imagine One TX or whatever for per block per unit swap on ethereum like we wouldn't probably wouldn't even be doing Devcon or something like that you know so basically um you know the reality is is that that was more of a design decision on the whole system and it doesn't actually relate necessarily to utxos per se utxos are just a way to notate and Define the transaction model which is something that you can do in various ways so with fuel if you have a smart contract as an input you can have like say a uni swap like system that's one input when the state is manipulated we basically have an output so it is noted that it changes the state but like ethereum there is this uh kind of reasonable malleability of what could happen under the constraints of the system such that you know this output basically is uh you know it's notating there's a change but it's under certain constraints in certain conditions similar to what we expect with ethereum and uni swap when you use uni swap you don't always know what the state's going to be or what it's going to change to but in ethereum we're willing to accept that reality under certain constraints so I use the word determinism here maybe the academics don't like that particularly but it is sort of how I would interpret the situation but with fuel we don't have any of those problems at all you can build a uni swab leg system or whatever you can use the transaction utxo model we get all the parallelism benefits there's no downsides to that and it's not an issue it's really just it was publicized as an issue and utxos were related but in our case we have different designs that don't feature this issue at all yeah in the context of fuel either any problem any problem compatibility or is because of scripts like how do you manage the coding beautiful state at the same time yeah so so basically fuel has just normal smart contracts so you can have a smart contract that calls many smart contracts if it does then you're notating those various other smart contracts as ugxos as well their inputs to the system you're outputting potential changes so it's very simple in its design we've inherited a lot of the work that was done in research for State access lists for ethereum so really this is just a reinterpretation of that research but it's in a cleaned up model which is in a utxo setting so we again get all these nice benefits from utxos but we don't lose the user experience or behavioral elements of what we get with ethereum so it's a really nice model in that sense and then scripts just scripts just allow you to make a transaction you could say call multiple contracts so for Trans you know proven transfer from you have to make two transactions in ethereum from the origin sender which is ridiculous why are we doing that that makes no sense at all and it should never have happened and the main thing the main reason why is because of just the design of ethereum itself is funneling everything through single accounts and that restricts you so you know with again a utxo model and with scripts you can just have a script that calls you know approve and then transfer from in the same transaction and that's it and you don't need to deal with that anymore so it's really not crazy it's really actually pretty simple and again just you can read all of our work and our research on this so it's all public and available um you can try the test net in our test net we do that already so it's yeah anyway um so the question was um how does darkwear look at this question of State Management and basically the question we're asking is here is can how do you paranize how do Paradise stuff roughly speaking um so the start Stark net at the moment do not do polarization as of now um because we were focusing on making the whole thing work right we had a new VM a new language uh we focused on make things work and so we took we went for the simplest model which was the one that was used in uh and uh you know Bulletproof by ethereum um and now that we have like all the features that we are focusing on actual execution scaling so I just want to say I want to separate um verification scaling from the from execution scaling and so um one other thing we are going to have relatively soon which would dramatically improve our the throughput of the system is optimistic execution so it's not it's not an intimate solution it's uh it's as some downtime it has uh theoretical negative um um like um let's say that um adversary adversial reaction that could be uh impactful of the network um we are planning to solve it um one after the other it's not right now we're focusing on you know bringing scale uh another thing that we're looking into which is um within the line of this systemistic polarization that otxo enables we are looking at various that time structure like the model that exists in the space we look at Solana we look at Aptos we look at sui we looked at all the sort of like chain that are actively um building vaporization and look at how they did it um we still wanted the account model because a lot simpler and we already have enough mind change with like the new language so we focused on you know bringing keep it simple in that sense and but we are looking as I said into the new ways whether or they are doing and take the best idea that exists there so we should actually you should expect more on that front in the coming month but there is nothing to announce because it's Syrian research race at the moment Alpha drop no but stockware does have parallelization but at the verification level through cost of proofs right so so but that's not okay so it's actually it's so we already focusing on the on the on the scaling of the execution and TVM itself the the the parallelization the recursion enables you to do partition of the verification but you have to know today on Stark net verification is not an issue whatsoever yeah like the verification proving is not the issue right now our problem is the sequencer our problem is that our execution level layer is pretty bad at the moment and we're working very actively to improve it by 100x roughly in the company in the coming month and so uh recursive proof does enable you to like scale like the the proving it also enables you to um scale the the execution by basically going into fractal scaling um which is basically the ability for instance to have a stark Network Stark net and so what before I was talking about the ticketing solution that we don't have to shouldn't leave on the same environment then uh uni swap then using an L3 you can have this ticketing with the same requirement the same trustlessness than you would expect on on the regulator too but in an environment where the fees are more stable because there is no sort of like strong economical incentive to build like decks and so on um so um to answer your question um over those polarization topic is very high up into our roadmap um they're still into research and we should expect to have things coming to production in the coming month but have nothing show today that makes sense So speaking from developer who is trying to use one of your systems throughout the panel all of you have dropped some really really interesting paradigms let's talk a bit more like I know if you all spoke about uh having these scripts and stockwest broke about having no EOS whatsoever and direct like contract wallet and you use the term programmable privacy I'd love for like everyone to like think about what these new features are but thinking about it from a developer or adapt developer perspective yeah I mean from a developer perspective um you know it at fuel we look at it mainly from a few different points of vision my own which again is reflective of many many years of trying to build apps on ethereum and struggling with a lot of key things in the system that make both the developer experience horrible but secondly the end result being a sort of odd disjointed experience between the wallet what the wallet can do and then what the application can do and then as well the kinds of applications you can design so with fuel we open up a lot of the compute so you have far more available to you you have far more memory to use you're far more um just just general compute to build anything you you want you have more options for uh user experience uh with things like account abstraction and with uh kind of other apps aspects like native meta transactions so in fuel you can have a party that just builds a piece of a transaction then you can have another party that just tags on the fee on the other and just send it and that's it and you don't need to have this situation where it's like you have to wire through five contracts to have some form of account abstraction so I think from a developer perspective of looking at the space um the thing is there is always going to be hurdles with a new execution environment with a new development environment with something that's bridging liquidity so you're bringing your usdc and everything from ethereum into fuel um but the result is is that once you're there and once you're actually using it once you're actually seeing what's possible uh I think developers can open their minds a little bit to where ethereum should go in and and where it will be soon you know once we go to mainnet yeah native Native meta transaction is pretty cool I know quite a few companies would like kill for something like that but also I assume when you said memory you didn't mean like how in solidity we had like string memory ABC even more like Ram or something yeah I mean literal Ram yeah so just having a lot more access to RAM and memory and being able to do a lot more with it and across many other contracts so just having that kind of access is enormous it's huge it gives you so much more flexibility because with the evm instead paradigms you're so constrained by so many factors the kinds of designs you can do are extremely limited so from my personal perspective I've walked around Devcon a lot I've heard a lot of new designs for a lot of new defy and to be honest it's still okay but it's not what is possible like there is so much more and it's it's good but there's a there's a long way to go um yeah yeah I think it's like maybe healthy to kind of also tell developers that not every kind of VM is going to be suitable for them so we focus on privacy and you work for Reddit and Reddit has a a point system that's public so like that's not really a good fit like but like a high throughput VM that kind of focuses on public data maybe a better fit so some of um I think our competitors in the zika evm space kind of pitch everything as possible all the time and I think that wastes a lot of Dev time because you have to kind of go through the test net try and build something and you realize kind of a while later that it's not possible um so for Aztec what we really care about is applications that have private state that could be things like CK games um Consumer Finance which is just doesn't exist on on D5 today we have over clatterized lending you can't really have Consumer Finance unless you're willing to have a public passport salary um address on chain uh so I think privacy is kind of um what we care about you're not going to build an ammo on Aztec because by definition it's it's the ratio of two public pools so being really transparent about what you can and can't do I think is is something we all need to do um to help attract the right developers so like instead of storing variables in the contract itself you'd store it in your regress kind of thing yeah so each each user basically controls their utxos which are encrypted and you can feed those into an Aztec transaction and prove something about it and then kind of in an Aztec program if you if you prove that your salary is above X you may be entitled to a loan or not entitled to a loan so having that data being able to be fed in as an encrypted input to a program is really powerful in our case you mentioned how some zero knowledge VMS are now realizing some of the things they ran into can you expand a bit more just for all of us I just mean like I think uh you need to kind of let me think a second go ahead go ahead go ahead um it's hard to do privacy in some applications is all I'm going to say and then I'll see what Louis has to say about that I mean 100 and so Stark net is not beautiful privacy whatsoever but that's not nature uh what's what's true with that you can build privacy protocol on top of it and so I was literally saying in a random idea yesterday to uh to Joe here why not uh I mean Aztec and Noir you know I mean there is no reason they're not you could have you know the scale of composibility just not the same purpose um so you ask what kind of like things you can like you know things you can build so the main thing that you can build on Stark net I always give like a three to it as a Dev the only thing you care about three things which are you get cheap computation cheap core data and I can obstruction and you get like a three and a half which is a long-term vision of scaling which means that even if you're priced out of this layer itself you can go a layer up which would be cheaper so what you get when you get those three things you start adding new project so I just I named before the ability to like an abstraction gives you the ability to sign with your phone without having private key per se it's your your phone detergent um so now when you come you combine uh for instance chip computation uh you're starting to have people making uh physic engine on on the blockchain so I had we have someone like a company called topology on stock net that is building um a physic engine so you can prove Collision you can prove like you know games that's existing in the 80s or 90s uh worms like you know you can make that happen directly on chain um you can Implement things like um infinite risk you know like uh an infinite map using um apparently noise or Advanced algorithm the generic Maps um and we have those people making it today on on the ecosystem so when you get cheap core data and cheap computation uh you get things like that when not possible in ethereum before like practical storage proof so if you're not familiar with storage proof storage proof enables you to prove the state of if in the past to if in the present so why is that useful so it's useful for instance for voting so you know when you vote you basically vote using the token balance that you had at that proposal variation and so this company called rototus is building this and they already have a snapshot trying to create everyone voting through L2 using their Tech um in the now the amount of um so what else I think very exciting I feel uh we have a lot of Unchained gaming because unchain gaming was completely moved out priced out of ethereum and the proof is uh the only existing on chain game today on if it's basically on Windows chain is called a dark for us so we have seen like a massive boom of projects that were priced out that couldn't build on if building on us things and you know even like Flagship like loot literally building their own Universe on on Stockton right now thank you so much yeah I know we're running out of time all I'll say is all the dab developers I think because we work in crypto we kind of owe ourselves to Destin broad I say that as a meme but what I really mean is I think we are here to experiment and try these new languages like Sway and Cairo and Neuer and stuff so I hope you all like actually go out and at least read up on what these cool things are doing I know if you have time but I'm happy we are happy to take one or two questions if anyone has hello a very interesting very interesting very interesting talk I have a question why create why each one create their own different language instead of using something more standardized like circum or even not I don't know C plus plus oh I'll just say if for our case um none of the languages other than circum are built for kind of private State um and we found that um circum was too low level um and we're trying to Target kind of web 2 developers or solidity developers and they shouldn't have to kind of know how to be a cryptographer so our language abstracts the cryptography part and so you can just write an application and nothing was out the box um so is it working circum is not sure incomplete as simple as that and so uh if you want to do an if statement which you kind of need for so stock net is on OS the real name of starting is a protein system right it's like in other words and so everything every Cisco in stock net is written in Cairo so if you don't have a system if statement your program is going to be quite big um and um so another thing that uh circum doesn't allow you to do is being able to prove multiple program within the same proof which is something that carries through sharp enables you to do and so we needed to create our own language for that purposes and finally um circum is I mean I guess is that's actually material Targets in stock but that's not yeah remove that that's a good point but yes doctor incomplete not being able to prove multiple program is insane proof yeah and in in our case um you know we really really really didn't want to create a new language we looked at a lot of options um the main reasons are the some of the existing programming languages like C or Russ for example they're really not designed to Target a blockchain and there's a lot of different ramifications around targeting A blockchain system that you want to catch in different stages of of the compiler so that was one strong motivation for us to have our own language secondly the compiler and the tooling have to work really hand in hand so in a blockchain environment you want the developer to have extreme control over every aspect of the system so they can really simulate everything so the developer experience was another and lastly we wanted to create a rustish like language that really targets blockchains not just the fuel VM so the way that our compiler is designed is such that you know and this is unlike others in the space it's designed to be very modular so if we want to Target a back end you know like uh like you know Cairo or wanted to Target the mine VM or we wanted to Target a different language the language ecosystem will be set up to Target many different kinds of blockchains including the evm so one we're working on right now is targeting Yule and that's with Foundry so you'll be able to use sway and maximize its value and its design without having to want to rebuild languages again now mind you I think some of the ZK teams have different criteria different stages of the compiler that they really have to factor into their design so like you know we can't speak for all ZK VMS or anything but it's a good harness of a blockchain language that's rustish that people will like yeah thank you uh any other questions I'm not sure how relevant the question is to your uh environments because I haven't looked too deep into it but if you build something like uh an only swap on it which like excludes Aztec already would math be a problem on those networks as well because the indexes could uh sort uh transactions differently or is the summer solvable we have right now it's darknet I think top of Mind five different units of V2 so the answer is no it's not a problem and uh no that was a joke but uh no it's not the start Nets use currently uses exact same data structure model than uh so it doesn't really exclude Aztec like we have swaps from Aztec connect to UNI Swap and uh probably the most liquid uni swap uh because it's on mainnet so liquidity doesn't get fragmented uh we just have to kind of acknowledge that uni swaps are public uh application so we can't make it private but we can make the users private so users come to Aztec and in this case they bridge out to L1 in a batch to get scaling and privacy um so yeah it's possible but it just requires a different kind of Paradigm um to normal scaling yeah and then for us um you know we don't make any claims about Med uh so you could probably extract it um if you know in a decentralized sequence um you know setting but uh I will say that we actually take a slightly different approach in the sense that we actually want to give the node as many abilities as possible to extract as much Mev as possible or provide teams that either try to fight Mev or actually try to Advantage it um the best tools that they can have because we don't really we don't have a solution for it but we know those incredible teams either advantaging it or trying to reduce it or solve it so um but either way doing Mev facility and fuel should be very interesting yeah for internal Aztec transactions they're kind of if they're fully private you can't see what's happening so our approach is usually to try and push it to L1 and then you can use something like flashbots to kind of solve it in the way we currently know how but uh yeah if there was kind of public components to an Aztec L2 application um then there would be Mev um on the network but yeah I think trying to push it down one is a good strategy well thank you so much everyone 
okay sounds good um great uh well uh yeah uh uh yeah thank you so much for uh uh uh for the invitation for uh for this event uh my name is I uh I'm a PhD student at Berkeley and uh today I'm going to be talking about some uh some work on uh understanding uh the incentives of users and Mev Searchers uh in these decentralized exchanges known as constant function market makers and uh this is uh work with Theo diamandis uh from MIT and tarun gauntlet uh so I was told that this should be sort of an interactive session uh so I think I prepared about maybe like 30 or so minutes of slides and then we can sort of talk about uh uh uh you know we we we we we can discuss more sort of interactively so uh the sort of the basic idea I'm going to be trying to convey uh in this talk is that uh users that interact with decentralized exchanges uh often face some kind of a routing problem when they're when they want to Route their trade across sort of a network of decentralized exchanges uh so there's many many blockchains there's many many dexes that trade pairs across these uh chains and uh you know users want to figure out what sort of optimal paths on on these decentralized changes look like and so I'm going to be trying to sort of draw out this analogy between uh these exchanges and uh sort of the literature on congestion games uh which also seeks to sort of model these routing problems so um what I'll do first is I'll just do a very brief and quick introduction to uh uh content function market makers I suspect a lot of people in the audience uh already served uh know this but just to put everyone on the same page uh then I'll talk about you know this kind of Med uh known as sandwich attacks and then I'll introduce this model of uh of what we're calling routing Med which introduces this uh sort of congestion game-like structure uh to analyze you know user Behavior thank you cool so uh yeah why why do we have sort of automated market makers or uh decentralized exchanges um the basic reason is because it's hard to find prices uh for assets for pairs of assets so normally in uh you know you know traditional Financial world uh the way that you find prices for assets is by asking two people how much are you know how much is one willing to uh to buy how much is one one willing to sell at and this leads to your sort of usual notion of an order book um but the problem with this is that first of all there needs to be some sort of trusted third party that keeps a list of who's willing to buy and who's willing to sell and then of course the price is determined when uh uh when uh when the bits cross into the asks uh but this the presence of this trusted third party is something you know something that we don't like uh and so people introduce sort of this idea which is let's just use a simple formula to determine uh asset prices and the way this you know formula is going to work or the way this contract is going to work is it's going to pool two kinds of assets say A and B or like apples and oranges or like Bitcoin and ethereum into Reserves and the price is then going to be determined by the relative scarcity of the two Assets in this contract so if a has fewer reserves than b then make a more expensive relative to B According to some formula and uh so there's a generalization of this idea uh to uh something called the constant function Market maker which sort of formalizes this notion of how expensive uh an asset a is relative to B uh using this function called a trading function or an invariant so what this function does it takes in the current assets uh the the reserves of the current assets and evaluates a function of those two assets and then a trade that comes into this exchange or this contract is going to be considered sort of valid if it respects this invariance condition right if it respects the condition that the value of this function at the reserves before the trade should equal the value of the reserves uh the value of the function at the reserves after the trade so if I remove however much I'm paying out from the contractor however much the user is providing to the contract uh the function should be equal foreign course the the output value in this case is like implicitly Detroit is implicitly determined by this uh by this formula uh and one of the most popular exchanges uh is uniswap and one of uh you know it has a very simple formula which is just to take the product of the reserves and sets it equal to a constant uh and you can you know compute all sorts of things that you want about this you compute the marginal price of a trade you can compute the output of a trade uh for uh you know for any given you know input size um and so this is sort of a canonical example of what one of these exchanges look like and of course I don't need to convince anyone here that people are using these markets a lot uh so this is actually data from last year but uh you know trillions of dollars of value have to sort of traded through these uh uh these exchanges okay so now let's sort of try to set up sort of what the game is here or what the game theory here kind of looks like which is um uh we're gonna start with a constant function Market maker with some initial Reserves uh and the idea is that a user so if you look at it from the user's perspective the user that's submitting a trade into this uh into this uh uh contract doesn't really know what price they're going to get because of uncertainty in the transaction ordering that they're facing as a user right so a user is like I'm going to submit my transaction uh of course this contract is publicly quoting a price at any given time so you can see what the price is but the user actually doesn't know what price they're going to get because uh they don't know which order they're going to be in the block so there's they face this uncertainty to get around this uncertainty so what we're going to do is sorry before that let me just talk a little bit about what what what the user sort of flow looks like here anyway uh and so yeah so the users are going to submit uh transactions these transactions are going to land up in a mempool um and you know in sort of a a world where there was sort of uh no malicious you know agents out into the world uh these transactions would just then be sent to the validator and they would just be processed in some order and uh you know they'd be added to the block but uh but that's not the world we live in so in the world we live in there is a this transaction mempool gives the ability for Searchers to actually compute adversarial trades that they can put in uh along with the transactions in the mempool and send them to the validator uh and ask the validator to include these other additional transactions into the blog and these these additional transactions are known as sandwich attacks uh and they're sort of uh an example of this kind of extractable uh value in uh in these systems so formally like what's going to happen is the the Searcher is going to see the state of the mempool he's going to compute some trade Delta s he's going to compute some bids and he's going to pay the validator a bit and he's going to say hey include my transaction so the focus of this talk is going to be on this quantity Delta s and like how can we compute this quantity how can we bound this quantity and what are the implications of this quantity uh for specifically for routing problems uh in these in these exchanges yeah so coming back to this transaction uncertain this ordering uncertainty that the user faces it's the way that sort of these exchanges get around this is they say hey the user should not only submit a transaction but you should also submit a what's called a slippage limit and the purpose of the slippage limit is to if the thumb in some sense give the user the ability to bound how much price impact they're willing to take from the other transactions in the block so that it's giving the user the ability to express kind of a preference that says I'm willing to accept no worse than this you know than this amount of uh uh you know this amount of price impact and by Price impact we mean one could literally mean in terms of price so there's this price function which if you give me a contract function B I could compute the marginal price of Any Given trade uh by looking at the partial derivatives of this function you know kind of taking their ratio or I can have slippage limits that are directly specified in the output amount that I get from the contract uh which is I think how uniswap actually implements their slippage of it so the slippage limit just says I'm willing to accept no less than uh one minus Ada times the nominal output that I see from the network right so I see I see some initial price so if there was no price impact I would see I'll be seeing some price and some implied output I'm willing to accept no less than no less than uh one minus uh eight out of that okay so now we have sort of this uh uh the setting in which the user has specified a minimum amount that they're willing to take and the job of the sandwich attacker or this researcher who's going to look at all these trades is to is to basically Force this price impact to be kind of tight right so or to force this bound to be connected so the Searcher is going to basically notice that there are some trades in the in that that have been submitted into the Bev tool that have the property that I can basically put a trade behind behind that uh behind that users trade called DOTA San uh and then I can uh Force you know the price impact to be exactly tight that is the residual amount that the user gets after uh Delta send is exactly equal to 1 minus ETA times G of Delta so I basically compute I can compute such a Delta uh a Delta sand that forces this to be in which case you're basically giving the user the worst case price impact if they're willing to take or or the worst case output the launch except and now so what is the sandwich attack sandwich attack is like a triple in which the first leg of the sandwich attack I kind of explained how the sandwicher calculates it uh which is via this sort of equation that sets the amount the user receives after the sandwiches trade equal to the minimum amount they're willing to receive from the contract uh and then the user trade happens and then the sandwicher is going to sell back uh what you know the risk that they they that they that they took uh and uh the idea is that this should result in a profit so uh basically he's going to his profit is going to be however much uh he sold back minus however much you know uh uh he uh he provided oh uh and uh so once again I don't need to convince anyone that sandwich attacks are a problem uh so here is a uh uh sort of a data set of Sandwich attacks over the last 30 days on ethereum I think something like nine million dollars have been extracted from users uh most of the sandwiches tend to be within like less than ten dollars but there's a lot of them uh you know so there's a very high frequency and maybe low impact kind of uh extractable value but yeah so this this is this has been happening on the on ethereum for a while um before I go into the sort of uh the the model of how users are going to Route uh I'll just say that uh these functions these output functions uh these price functions uh are usually pretty nice in the sense that we we usually have some kind of bound on uh the uh you know the maximum and minimum output uh for a given you know uh for a given trade and we also usually have balance for uh the price impact of a trade so that's given here by these constants uh Kappa Mu Alpha and beta and the point is that we're going to be able to basically bound the sandwich impact the the price impact of this average attack uh uh as a function of these constants uh and and the kind of interesting thing I'll note here is that the sandwich the profitability of a sandwich attack is sort of going to depend on more than just sort of the pure price impact there's going to be sort of a liquidity term that comes up uh as well so it's gonna be sort of a function of all of these constants and yeah we could make this formal the idea is that you you basically get what you'd expect which is that the size of the sandwich attack uh is something that is like a constant that depends on the user's you know slippage limit uh times the the trade size so that roughly makes sense if the users you know specifying sort of a really bad slippage limit then you should be able to establish them more uh and you also can get sort of bounds on uh uh the profit from from the sandwich attack as a function of all of these so constants okay so now let's talk about this routing problem right so so we've introduced sandwich attacks is that sure why they're a problem uh and so users in these these in these decentralized exchanges they often want to route as I said they often want to Route their trades through uh sort of a network of constant marketers that is uh every uh cfmm is going to trade some asset pair uh and then you're sort of going to uh uh want to route your trade through a bunch of different asset pairs to get some you know to get some destination sort of asset that you want and and sort of routing setting there's like a uh way to compare what I'm going to be calling selfish routing of these trades uh with uh something that was defined sort of a year or two ago which is optimal routing under the presence of Sandwich attacks on this network and so we're going to rely on Game Theory models that are very similar to sort of congestion games you know the congestion games literature and yeah so what do I mean by cell passion what do I mean by Optimal uh so let's let's just take a very very simple example off this like two asset to exchange kind of network and this is uh you know this is a stylized example from like uh uh you know from Purdue's Network and congestion news so what does that work so this network is you have two assets A and B and you have two exchanges the first Exchange is nothing other than uniswap right so this is just I'm trading on uniswap on this first exchange the second exchange is just going to be a constant price market makers they're just going to quote a constant price all the time so it's going to be linear output and now uh what I want to do is I want to sort of say okay what if a central planner like someone's like a coordinator was able to Route trades across this network right coordinator is able to look at the trade that comes in to this network and say Hey I want to optimally Route this trade uh across the network uh and what do I mean by optimally optimally to maximize the net output from the uh from uh from the network okay so uh and you can think of this trade just like trade Delta that I'm talking about as some like aggregate of a bunch of users trade right so it's like a bunch of like individuals have submitted trades into this network uh and now they want to sort of maximize the total output the central point I want to maximize the total output that they get um and so you can write down uh sort of an optimization problem that that does this so you're just all I'm doing is I'm maximizing the output from the first uh first cfmdi the second CFM subject to some feasibility constraints that just say the flow on the or the trades on the two edges have to be equal to the trades like the trade that came in and it was shown by uh Anders at all in 2022 that this problem and this like entire class of problems uh of optimal routing on uh this cup on on this class of constant function market makers uh is a convex problem uh and in fact admits sort of a a solution in which the optimal route is the one that equalizes the marginal prices across the path so the optimal the way to optimally Route is to say is to set the price on uh Edge one equal to the price on H2 uh at the optimal trade uh and this is very this is sort of a very general thing that holds for all stroke or basically all kinds of uh networks and uh all kinds of uh trading functions okay so this is what the central planner would want now let's think about like what does the user want the individual user that has submitted a trade into this network and what that user kind of wants us to maximize sort of her share of the output from the web or in some sense like her Pro rata share like the amount that she is being paid out from her share of of the trade that went into the antenna and this kind of leads to a natural like notion of an equilibrium or a selfish kind of equilibrium on the straight on on this network which is that the average price across these paths should be equal and so what is so what do we mean by average price I would say I look at the total output that I uh received from the path and I normalize it by the input that I would say this is some sense this is like the pro rata amount that the user is receiving out of like every infinitesimal user is receiving out of the network for her share of the of the trade thank you and so yeah so this is a notion of equilibrium um and so let's see what this implies in this in this very simple Network foreign so before I show some sort of simulations and plots one thing one additional thing I want to say is when there is a sandwich attacker on say one of this network on one of these edges say say on you to swap we can actually modify the output that the user is going to get to account for the loss due to the sandwich attacker and here is just an explicit example for what that looks like for uniswap or uniswap uh you can explicitly compute The Savage attack and you can write down what the modified output function G1 send is as a function of the sandwich so whenever there's a sandwich attacker we'll be sort of modifying we'll be sort of using this modified version of the of the uh on the output function a note that this is actually a function of ADA right this is a function of the user's slippage parameter so in some sense the slippage parameters acting as like the strategy of the user the strategy is like I Supply a slippage limit the sandwich attacker gives me an optimal sandwich in response to this and now I'm going to like reason through uh my equilibrium notion as a function of my slippage okay so here's so so here's you know what these functions kind of look like so uh on the red line is simply the uh uh the linear sort of output function and then uh this is unit swap so this is unisoft this bold line is unsolved with like no sandwiches this is what you know there's this isn't nominal unit Swap and as you can see as you expect as you start increasing the slippage limit sort of this curve is going to start shifting down uh and uh it's going to get worse and worse uh for that path but now let's try to see what like our equilibrium notion is saying so I remember our equilibrium said uh the user is going to maximize her Pro Auto share of the output from the network which means equalizing the average prices across the path uh and as you can see the place where this actually happens under no sandwiching so if you see when there's no sandwiching a place where this actually happens is when all of the flow is basically kind of being routed on uh on the top path so basically everyone's going to take everyone's going to take you to stop right so that's yeah and you know this equilibrium sort of Shifting as you as you change uh the slippage limit because the user's sort of responding to how much they're probably going to get set sandwiched on uh uh on G1 one thing I will note is this ability to reason through uh the output function is like a very strong assumption we're saying that the user is actually able to reason about how much they are getting optimally sandwiched in a particular value of slippage and is actually a very strong sort of you know cognitive assumption to place on user one can imagine sort of relaxing this kind of thing to hey the users actually got some uh data that they're like learning from in an online sort of fashion and they're going to sort of do this estimation procedure to figure out how much they should put on a given path um and that is like I think uh some interesting future Direction okay I know so let's just see what the how the equilibrium and the optimum looks so the optimum so the first thing I'll notice the the optimal routing problem says you shouldn't actually place all of your flow on the first etch right so you should actually split your flow somehow roughly 50 50. uh uh and initially initially these two are like very far apart so initially the optimal routing problem like when there's no sandwich or there's no slippage the user is just not specifying any slippage uh these are like very very far apart and then they sort of you know the the equilibrium sort of starts shifting right equilibrium starts shifting down as you uh as you modify the slippage limit so let's now like generalize this idea slightly to like the next most interesting Network in uh in like congestion games which is like which is this brace Network um and the point of uh the point that I'm going to try to convey here is actually scarf counter-intuitively that the presence of this sandwicher sandwich attacker on this network say on this middle link between C and D can actually improve sort of uh the price of Anarchy of this of this network which is like a weird kind of thing to think about which is like deep and what I mean by price of Anarchy here is the uh output under the equilibrium this like selfish notion of equilibrium and the output under uh uh the optimal routing and the reason I think this might make sense for those who uh have the syrup done congestion game stuff is the sandwich attackers effectively acting as a tax right he's acting of the positions he's taxing this Edge he's increasing the price or the cost for for the user Sunset and we know from congestion games that taxes can actually help uh uh uh reduce the price of Anarchy it's not it's not exactly the optimal tax in in this case because uh uh you know like it's not like a marginal cost tax or anything like that but it is it is a tax on on on on on this network what we're going to show is uh that this can actually help like this this can help in the in the measure like in the price of Anarchy measure so you can like reduce the tendency of users to do selfish things okay so once again we can write down the optimal routing problem uh in in this case it's more involved because now we have to account for like these flow like conservation constraints but along the along the paths but once again it is convex you can solve this to optimality um and uh uh and yeah and the selfish equilibrium here the sort of the Southwest routing equilibrium uh is again a little bit more involved but it's basically the same idea now instead of looking over these edges I'm going to look over paths because I remember I said the average price across the parts has to be equal uh because that's the Parada share that the user is receiving uh and so you can write down you know the equilibrium condition these lambdas are nothing other than the outputs that you're receiving from the intermediate nodes from the intermediate cfms and Alpha One Alpha to Alpha three are the fractions of the trade that are routed on path one two and three foreign and so now let's look at what happens so initially initially uh the equilibrium output which is all the way down here uh in red is like very far removed from the optimal output and then uh what's going to happen is as the slippage sort of grows up goes up remember again the user is like reasoning through the output function uh the slippage is going to sort of Force the users to trade more and more uh sort of on uh on all three parts and uh and the equilibrium is going to sort of move towards optimality and we can visualize this again in price of Anarchy uh terms which is again the ratio of the output under equilibrium to the output under or rather the output under optimality to the output under equilibrium uh and yeah so we get this like basically reduction of price of Anarchy as slippage tolerance goes up and eventually they just converge okay so I'm this is sort of my last slide but uh one thing I'll say is like you can generalize this like kind of idea to sort of arbitrary networks of cfmms uh by using sort of those bounds that I showed on the price impact functions and the output functions to come up with these like price of Anarchy bounds uh globally for for uh for sort of this entire class of of uh cfmms and then uh the idea is that these sandwich attackers can actually like act as coordinating agents to tax users away from selfish equilibria um I mean kind of a question I have is like where else does like what other places uh because this this is a very like uh the analogy to like congestion games and routing problems is like very clear here like where else does this kind of have this feature that a sort of an extractable kind of value is acting in some sense I mean you might not be happy with how they're doing the taxation coordinating you might not be happy with where the taxes are going but locally they're sort of doing this coordination and of course like there's this question of how do you actually look how do you actually learn these parameters as a user if you're like in this network and uh you know you're participating over time uh which is again uh interesting future Direction uh but I think that's my last slide and I'll stop there and if we have any no I think it'd be nice to sort of have some Interactive parts hello thank you hi uh very nice talk uh actually I have a somewhat of a technical question uh so yeah you you produce this uh reduction to congestion games uh what is what is the resulting like cost function along those edges so is it like you know some sort of like uh polynomial cost function or any other any other property that you know you talked a bit about I think some solar eclipse is constants but uh I was just curious if it belongs in some other pre-studied class uh you hear me okay yeah um yeah so these uh so yeah the price functions for the uh these constant function market makers and also the output functions typically have these like at least like local sort of linear bounds uh they're typically the the output functions are like concave functions but I think in congestion games like usually we have uh you know like we're usually dealing with functions that have like particular kinds of growth rates and stuff like that like uh you know like or like in usual congestion if we have these like functions that are like one plus like x to the four or something like this uh we don't have that kind of like specific you know we don't have it pinned down that specifically um and I think and the results that you the way that you get the price of Anarchy balanced uh are actually like using this sort of General technology of these lab like lambdw smoothness uh so yeah so the I guess the only real assumptions you can you have about this uh these functions is yeah that they're uh the this capital G functions are like concave functions they have like local uh linear bounds you can assume they have sometimes they have like uh sort of uh like one-sided sort of sharper quadratic bounds as well but yeah it's not I don't think it's like uh as uh like pinned down as uh in conjunction games where like typically like dealing like one form of a hump like a function like one plus x to the fourth or one plus x to the alpha or something like this thank you hi I also have a question um yeah nice talk in regards to the raised Paradox results um am I thinking about it right that you kind of needed to be for distinct assets that are in the trading pool for those vertices to make sense and that you also need um a Trader to be willing to trade from you know a to c and then from C to D um and then I'm also right the sandwiches cannot help or repair trading call yeah I think that's right I think you know because that's just a weird setting okay awesome uh yeah so yeah I think that yeah so uh yes so there are four distinct assets here a b c and d where the input asset and the output asset are A and B respectively and then each of these are like uh yeah so these are the available paths to the user basically so and yes and I think it's correct that uh if you just have a sandwich attacker on a single on a single edge and you're only allowed to trade between like that edge uh then there's like no hope right because there's like basically like there that sandwich attackers strictly I mean the equilibrium and the optimum there is just a trade on that edge and the sandwich attacker is going to like strictly degrade both of them at the same time thank you hi thanks um so I have two small questions the first one is a bit more practical but have you um thought about including more like practical things like fees um into your model and how will that affect the routine because um if you have to yeah I mean you use multiple routes then uh You're Gonna Play Movies and that's going to probably impact it and then the second one was a bit more General but um I was curious if you thought about way other ways to text users and redistribute these taxes and um yeah but yeah uh perfect so uh yes I think regarding the fees question uh I believe so I think this I maybe I'm maybe I'm wrong but uh I think this paper uh by Angelus at all actually considers the routing problem the optimal routing problem with Beats uh I think I think so maybe I'm missing missing it but yeah I think uh I think like the optimal routing problem with these shouldn't like not be uh too much harder because like you sort of just get the presence of these like factors that are hitting the you know the trade like inside the trade like G1 up like some gamma times that kind of stuff uh as as far as how it affects uh uh how is it how it affects this like equilibrium notion I I'm not sure and I think that's a that is that is actually I think a pretty interesting uh Direction it's like it I mean effectively it's going to act kind of like a tax again right like it's going to act like a uh another additional cost that the user has to pay on particular edges and if the if the fees are different across different paths then the user might like prefer One path to the other just because of the difference in the keys so it might actually meaning fully shift the equilibrium um and oh sorry I just uh forgot your second question would you would you mind repeating it thanks um no the second question was about um different ways of taxing users and redistributing this this taxes right right yeah so yeah different ways of taxing yeah so I think uh like these fees are like in some sense like a like a explicitly specified tax and like the sandwich attackers kind of like a uh implicitly or like you just know that these agents are out into the out in the world and they're going they might tax you at any given time so I think those are like the two kinds of taxes in my head and I think redistribution is a very interesting question because yeah right like if if it so happens that like all of this so all of this excess value that's captured in this example like uh all of the success value that's captured by the sandwich attacker simply goes to to the Searcher that probably is not like a good way of redistributing it I mean it might be better if it went to you know uh either I mean there's arguments people have made arguments like oh you should go to the validators of the network or like it should go back to the users or it should uh it should like sit in some like uh uh you know sit in some box that's like untouched and then at the end of day we should just like burn all of them or something like that uh so yeah I don't have any like concrete things to say about that but I do think it's it probably makes sense to either redistribute it back to like the network or the users and some in some meaningful way thank you okay yeah yeah I think that should be all of the questions but additionally I'll also want to hear you about uh um you know kind of uh leading how long is the next thing oh yeah okay yeah um can I I want to hear you a bit about how does this um you know uh example of constant function maker um contrasting games related to the broader you know blushing as a commitment device study what are some some of the ways that you have seen of the past studies how how can we use our studies or Community devices to help mitigate such problems such as I mean such as like congestion games yeah so uh yeah so like the kind of the example of here kind of shows that uh uh again this is a very stylized example and it's just like the first pass in this but it kind of shows that the presence of these like what we think of as like adversarial agents right like agents that are purely like profit extractors or something like this uh is in fact helping to coordinate users like away from these like salkish equilibria and the the degree to my to which you might want that you know I guess we can debate but uh I think I think something that's like quite interesting is and I mean again people in like congestion games land I've tried thinking about this as well which is how can you kind of get like like decentralized kind of control of of systems like this uh without having to explicitly specify the uh you know like what actions you're going to take to deconflict these these users uh in in the system like can you can you set up incentives for these Searchers that sort of allow them to locally resolve these these uh you know these sort of bad equilibria that users end up in and I think that's a very interesting thing but again that's a very that's kind of vague in my addictive moment like it's not clear how you would set up like what kinds of incentives you'd set up for them or like but it's it does seem like these these agents are like kind of a resource that can be used to do certain kinds of uh uh you know like this kind of like decongestion deconfliction kind of thing uh but yeah I'd have to think think more about about that but yeah that as a first pass it does seem like they there's there's there's something that can be done to uh you know uh again like do like decentralized control of the system okay thanks um I think that should wrap up this session thank thank you and uh yeah we should do a round of applause I don't know if we can cool thank you okay and the next session is going to be a panel with uh Georgios and being sent um George is still on there I'm here yeah yeah it's gonna be a bit hard because Mike said 
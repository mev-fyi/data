[Music] uh yeah thanks for coming guys i know this is a last presentation you know what they say save saves the best for last this is my talk don't reinvent the gaff wheel i i know it was very technical techno speech before me so this will be the complete opposite it's very untechnical so i hope you guys enjoy it so uh yes i am a library dot ethereum virtual machine i'm a couple things i'm a mempoo inspector i'm a sandwich connoisseur and i'm kind of here mainly because i kind of wanted a free ticket to mev day which is why i'm gonna talk i'm on stage right now so i don't really claim to know everything uh i i know some of the giants i'm standing on the shoulders of the giants like the gef creators are here i know the forge creators are here i use those tools i'm a humble searcher i don't claim to know anything so if you see anything wrong you can you can honk at me if you want or if you guys are in amsterdam these days you do like the bicycles i got ranked by a lot of the bicycles you can also do that if you guys are up for that but yeah i guess uh before we start i would like to talk about something pretty serious we let's let's talk some numbers here like like i guess uh how many euros worth of mev has been extracted does anyone have an idea like since since the inception of flashbots does anyone have any idea 800 million euros yeah uh anyone else no okay well it's a little bit off it's actually 550 million euros total extracted mbv and you can get that from explore.flashbots.net and i know there's a couple of americans out there that might look like a funny symbol the euro symbol so i'll kind of convert it to empirical units for you which is roughly about point six of an andre well uh that's a current mark uh current today's exchange rate might differ i'm also very confident that approximately 100 of the mev extracted are being extracted by people who are not in this room right now i mean why else would you why why else would you guys listen to my talk if you guys could extract it right i think uh that's because uh this is like the average perception this is the perception of the average mev searcher i know this is like a huge brain dump so i'm going to let you guys read that for a couple seconds while i take a sip of water and unironically it kind of kind of fits into the previous slides the previous presentation which was incredible by the way which is i did not understand any of the greek symbols can everyone read the text on it are we good okay just making sure but uh so that was the the previous slide basically gave you a glimpse into the the what people think is the average mmv searcher but this is in reality um a lot of mv searches like to make things that just works enough and this is my favorite example it's a it's a it's a manual calculator it checks like it checks your checks both of your numbers and checks the operator and it prints it pre-computes the result and it prints it for you i would also like to highlight the number of lines there's 20 000 lines right there for a calculator like a very simple calculator this is actually not really far from reality is my favorite uh twitter friend here togart pvp actually has uh his first mev bot which is about actually originally about 16k lines was printing money uh yeah in one file i might add so this is actually like there's a very stark contrast between reality and perception i just want to just want to point it out there so a lot of you might be asking why are you here today or why are you showing me all these slides well i've been getting a lot of dms on on the bluebird app asking me to to share my mev knowledge um and if i share it correctly if i share it and they're able to profit they'll share half the profits to me which is incredibly generous so today i'm going to teach everyone how to get a real job which is uh doing mev yeah so yeah if you can't describe your jobs in three words i'm sorry i say but you have a job my friend i do mev that's a that's the correct and real job yes in the words of gavin wood give me gaff or give me death uh gef is the uh the standard choice for uh mev extraction um loves mev even the official flashbots klein mev gef is fought from the goal ethereum and if you look at the uh goet uh the med jeff klein you would see that i made a pr i've pushed the request so i'm actually a contributor to mev gaff in fact i even wanted to be the community manager for flashports but i got rejected so if anyone out there is hiring for community managers i'm just saying i'm on the market uh so yeah these are the three features from gef that i've found really helpful state overrides tracer and graphql and we'll kind of go through them bit by bit they've helped me tremendously in my journey of me searching from went from zero to hero uh managed to uh managed to land a couple from zero bundles so a couple bundles um yeah it's very very useful and we'll get to it so state overrides what is it why do i care why does it matter in fact or something something really interesting was i was i was a i met a guest developer the other day who wrote i think he wrote the state override features and he was shocked to hear that i was actually using it because he said nobody uses that why do you use that so here i'm just letting it get captive cena i think his name was cena i have a slide just on state overrides just for you so i guess the common uh the most common problem that occurs uh for searches is like how do you test your new contracts uh when um in production uh because i think it's a lot easier on l2s because uh you don't need to factor in gas deployment costs uh so if you've made your smart contract and your bot logic how do you test your new smart contract because it's really hard to replicate the uh the production environment uh like like when an op opportunity comes like how do you actually test it how do you actually like do the whole integration test between your bot logic the smart contract and the bund and and and the uh the transaction the mempool like how do you combine those and how do you test that in real time that's actually uh really hot and we're all really familiar with vitalik's law which is the closer you are to deploying a contract the higher the gas fees shoot up so state overrides help you avoid that so an if call which is a rpc method in geth it allows you to execute a new message it's basically used as a view only method but in some situations like the univ3 quota you can kind of you can it's like a little hack where you can call mutable functions uh but you call it a view only method to kind of extract out a value so that's essentially eve call it does a call a view only call but you can do it on mutable functions it's just that it's not recommended so for example if i did a if call to this transfer function which returns success i can kind of simulate it and simulate that on mainnet to see if it will return a successful transaction a transfer that's assuming that you're following the erc20 standard because if you're usdt you don't really return anything so this wouldn't work if you're trying to simulate it for usdt so this is how you would sort of use it uh use the rpc function you do an if call you supply like some kind of contract payload some kind of data that you encode it api encoded data from two you know the usual but what people don't realize is that with eve call you can actually add that there is actually a couple of you can actually add a third object the second object is is a block number which is by default latest but on the third parameter you can have this object called known as a state override set where you can override certain features in a certain certain state of you can overwrite some state so for example you can overwrite the balance of a of a contract or an account you can overwrite the nuance of an account you can overwrite the code of an account you can overwrite the state when as i state i mean like the the storage values like the key mapping the raw storage values like when you read from i think it's levels db or something when you read from levels of db like what's the raw value in there and you can or you can specify a state difference which uh me it's like a it's a it's a very subtle difference it's basically to overwrite the individual slots where the state would overwrite all slots so just keep that in mind so this would be an example in how we would use it we supply the original payload and then we give the the latest block and we add in our state override method right here and if you can see here it's uh on what we're specifying here is essentially on the address 42 we would like to deploy a new contract by code deployed by code that we would like the code to be that and we would like the state difference at slot 0 to be our eve account address and the reason why we do that is because maybe your contract has some kind of ownership checking which on a lot of contracts would be the owner object would be on slot 0. so here we're saying that on address 42 we have a new new contract which could be the contract you're testing or the contract you haven't deployed and for the state differences we would like these state differences to be applied so you can overwrite the state as you do eth call and this is incredibly useful because when you're testing your contracts as or your new contracts alongside with your bot logic or your new bot logic with your contracts you're doing this in a very mutable manner and you can kind of see what values return i'm assuming i'm assuming your functions return values by the way uh if it doesn't return values and it doesn't revert it might be slightly different but in this case it does um um yeah so you can you can basically i would say hot deploy it um for every every every call you make so it's a lot uh it's a lot cheaper to kind of test new contracts the second thing i would like to talk about is the javascript tracer which is uh which i found really handy very very handy especially when we're dealing with poisonous tokens uh does anyone here remember salmonella yes yes yes okay great well uh i didn't get wrecked but a lot of other people got wrecked so how salmonella worked in a nutshell is that they tried to change the production environment so the uh they would like they'd like to create override the transfer function so that it would slightly differ in the production environment in the test environment and so one way you could do that is by checking the the mine of the block so for example if the mine of the block was hot hats uh testnet coinbase or mainnet coinbase account then you would transfer it so in the search simulation it would be successful and it would fire off the bundle but if it were to be mined on the main net this this slight uh this slight uh logic statement wouldn't wouldn't be valid and so the transfer function would actually not be executed so that's a kind of poisonous token in a nutshell where they tried and they try and kind of create this delta between between a production environment and your testing and right so try and find little nuances today so test and prod guys test and prod so i hope this isn't too small but what you can do is you can actually use it a rpc method called also known as debug trace call and apply a custom javascript tracer as you can see here i'm basically checking the op codes of each uh uh each of the op codes and i'm basically seeing hey if the op code is coinbase difficulty number of origin and it looks a bit suspicious because why does an erc20 transfer function need to read from block coinbase uh from the coinbase why does it need to use the coinbase op code why does it need the difficulty code why does it need the block number of code does it need a tx origin of code it's just a little bit suspicious and so we can kind of return we can we can kind of do it really quick trace over and then kind of pop it out and tell us hey these are the suspicious up codes and from that we can kind of infer that this could be a poisonous token or it could not be a poisonous token but yeah it's a you do debug trace call the parameters are all the same you from to some kind of encoded function data which is usually your uh custom arbitrage function and yeah you just apply this javascript tracer i would love to show you guys a lot more uh a deeper dive into the tracer but unfortunately the the documentation is is huge there's and it's it's very confusing and i've been trying to put less code on the slides but unfortunately unfortunately i didn't really i didn't really think too much in advance so the third section i would like to talk about is graphql i'm not sure if anybody in here knows that gef actually has an inbuilt graph ql does anybody know about that yes a couple people that's great um yeah since eip1767 which has been out i think since 2020 gaff has actually graphql built in you guys can check it out right there um and to actually you actually have to uh run gaff with a custom with a few additional parameters http and dash craft ql to make sure the graphql library actually runs yeah but using graphql is actually really simple you just this is entirely in javascript i apologize by the way i know a lot of rus fans out here but it is what it is and so you can kind of specify for example uh in this in this request i'm actually trying to get out the reserve values from sushi or some univ two pairs from sushi wef and uni weft so i'm trying to get extract out the results reserve values from from the latest block it might not seem like much but using this method you can actually extract out a lot of the reserves in one call which is very handy um very handy especially if you're calculating arbitrage opportunities or background running opportunities uh between like 50k pairs or something as they previously mentioned you want to be able to continuously update that um there's actually a lot more uh you could there's a lot the graphql interface is actually a lot more powerful than this one but i find myself coming back to extracting out the storage slots using this method um so yeah there is an inbuilt graphql uh graphql interface for you guys to play around with a little bit of parting advice if i have um is that you know programming socks plus 10 intelligence to anyone you know who uses them it's very comfortable speaking from experience it's a it's very unrated but you want to bring that to light you even can buy the c programming book together uh yeah that's it that's my slides it's all the five minute mark i think i rushed to it a little bit any questions [Applause] no okay quick [Applause] [Music] you 
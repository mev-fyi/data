I'm James and uh I wouldn't really call myself a researcher so I'm not sure why I'm here I'm I'm an engineer and because I'm an engineer I set up a tiny URL because I know amount of you can see the screen uh because I'm thinking about the world around me like an engineered us so you can all get the slides and tinyurl.com prestwich Mev so if you want to follow along on a place you can see it go for it uh so I'm going to talk about Med wallet which is one of my side projects right now uh Med wallet is not really a order flow option or a research concept it's deployed on mainnet because I like deploying things to maintenance uh so you can go out and interact with this today uh it's been there since like mid-January um so what is med wallet Med wallet is a way to get your transactions to hit the mempool and pay lesson fees and get better execution uh and faster execution so a typical transaction goes from the user to the mempool to the chain and from the chain to the contracts that you're trying to interact with so the actual like thing that happens though is a typical transaction on its way to uniswap takes a little detour through the Searchers and then through the sandwich and then to the eoa and then to uniform and so you end up giving away a lot of your money to Searchers uh Med wallet is an attempt to just shortcut this whole process if we're giving away money to Searchers in order to get on chain let's just give away money to Searchers and get on a chain uh so we shortcut around the mempool we go directly to the Searchers they're responsible for bundling it and we put some new stuff in the wallet contracts uh to help with this so why Med wallet why do we want to do this uh block construction is a market but it's actually two markets before flashbots it was a single Market where the higher tips were at the top of the block and the lower tips were at the bottom of the block now the high Med is at the top of the block Below on these in the middle the high tips are in the middle and the low tips are at the bottom so when you're adding Mev to a transaction on purpose or accidentally you're participating in a secondary block space Market you're paying your Mev in order to be at the top of the block and it's accomplished via this roundabout method of going to a Searcher and the Searcher paying a bundle and a bundle going into the block right at the top and the more Meb you had the earlier in the block your transaction is because the Searcher ensures that that is the case so where does your unit swap transaction go it goes right at the top of the block because the Searcher is taking everything from you and you're paying the minor chip in a different event so you're way overpaying for your transaction you don't need to be right at the top of the block you want to be somewhere in the middle you don't need to be paying a tip if you're also paying Mev because the Searcher pays the tip for you so Mev wallet helps you adjust where in the book your transaction calls and how much you pay for it and it does this by preventing you from paying any tip at all and you just say muv instead so how does it do this a standard transaction is like two data value tips an Mev transaction is two data value explicit Med uh we call it explicit Mev because I'm just creating a bunch of Mev for no reason because I want to because I want to do it in my transactions I want to be somewhere in the top of the block I don't want to be in the bottom of the block so explicit Meb is a way to opt in to the Better Block space Market to go on the more predictable and gets you a better execution like better point in the block so We compare like this pit that's made to the proposer is part of the C to the explicit Mev so we also every transaction has some amount of zero or more implicit when I interact with uniswap if I'm paying very high you know if I'm doing a large trade with high slippage there's a ton of Mev generated so if I'm doing 100 each on a bad trade in unit slots I might be generating 5DS of Mev just implicit in the trade that I want to do and that's my right as a user I can burn my money to the ground if I want to uh so what does Mev wallet add to this well you might pay a you know like 0.1 or 0.01 priority feed for this transaction if you're in the normal block space Market you're still going to get Searcher you're still going to get sandwiched you're going to end up in the Mev box space mark it instead accidentally and you're going to end up overpaying so if we're generating five beats of Meb and we're paying a 0.1 each tip to the block producer uh that's a really shitty execution price what Mev wallet lets you do is specify that you're going to pay a negative 4.5 each tip to the searcher you're going to force them to provide you four and a half feet before they get access to your Meb from your unit block trade uh so they have to preemptively rebate the enemy that you are giving them and this lets you manually adjust where in the block your transaction is going to fall by adjusting how much Med you're creating so the total block inclusion on this bad unit swap is like 5.18 if you're using the Legacy tip system and half an e if you're using nav to do the Tipping and you're going to get again a better spot in the Block in a better execution price because you're not using the EIP 1559 tipping Market uh so Mev TX processing is a smart contract wallet so uh it's actually very straightforward you go through the Searcher funding which is you know they have to preemptively rebate you your med so they have to put it up front which they can do with Flashman thing it's really easy uh then we go into TX validation so we want to check that the user signed this TX that kind of stuff TX execution dispatch the trade uniswap get the result and then we do the fee settlement that's where the Searcher finally gets access to the value that you promise to pay them via the Mev and via the explicit mmv so search your funding we actually let the Searcher provide the each value for your each transaction so when I say I want to make a transaction with 5B I don't need to have e in order to do that I can force the Searcher to provide it for me seamlessly and then I can do whatever I want with it as long as by the end of the transaction I can pay back that search so I can do my own Atomic arbs this way using the Searchers flash minted money okay so in TX validation we did a couple extra things that you can't do with normal transactions Meb transactions can be locked to specific time ranges so not before or not after uh Mev transactions uh will always pay you know like a normal transaction a maximum base speed but they will always pay exactly that base fee they will never pay more than that basically and that base fee isn't paid to the block producer it's paid to the Searcher who pays the block producer on your behalf and then TX execution is as normal for a contract wallet except then this sounds weird until you get it in a normal contract wallet you would not revert if your internal call reverted because that would prevent payment logic from executing and would prevent the relayer from getting paid for forwarding your transaction it's a way that users control relayers in a standard Trend smart contract wallet in Mev wallet Searchers already don't include reverting transactions so we just make it revert and any reverting transaction won't go on chain because no search will include it so uh yeah you get to for free remove a Dos Vector from Smart contract wallets and again pay a better execution price get higher in the block get you know better overall JX execution and then fee settlement occurs after the execution uh this just tallies up what was the actual gas use what's the base fee and what's the additional tip if the you know some of that is positive it goes to the search trivia if some of that's negative it goes to the user via Network you can actually end up paying a negative TX fee if you generate enough implicit Mev to complete the offset execution so you can get paid to transact as long as you're you know hemorrhaging Med value somewhere yes suppose uh you're generating like 10 000 uscc of Mev you can implicitly Swap all of that for ease because you will end up in a situation where the net e movement after the transaction is from the Searcher to the user so it's an implicit trade with the Searcher of their Eve for my 10 000 usdc uh in Med because that's because of time it doesn't make sense Museum well if uh [Music] um I will add enough negative Mev that the sum of the Imp the explicit Meb and the gas statement and the chip is negative so I will reclaim eth for the usdc Mev that I created uh so mem wallet is built on medwest which is a West 10th Fork that aids in allocating Mev and block production so Mev with allows you to explicitly add men to a block you know you just there's a variable called Med and it goes up uh so during the prep phase the Searcher can Flash mint Mev with they can supply that to the med wallet do the whole execution of the user uh what the user wanted which will produce explicit Med in Medway they can then use that to replay the flash loan that they just took and they can close out by taking their earnings less less The Flash loan less their payment to the building so every uh Searcher action has this open step any number of bundles and then a closed step uh um uh no no this is um the Searcher is taking user transactions building the bundles and then the Searcher opens and closes by you know interacting with Midwest so that's where their earnings from each bundle accumulate and that's where they take their earnings at the end of a set of bundles so it looks kind of like this is the Searcher is going to do their prep they're going to execute any number of bundles and the Mev is going to rise progressively until they close out uh so because all Mev accumulates in the same slot in state it's very gas and storage efficient uh and because each searcher's process is exactly the same we can abstract this to build them so a builder will take a set of bundles from a Searcher that includes the Searchers open and close and it'll Sawtooth the Meb up over the course of the block until the Builder closes out at the end of the block by claiming all unclaimed WV it seems like it makes me export uh it would be a great use case for transient storage uh however uh so it lets the why is this better like it lets the user Searcher Builder proposer whoever use a common communication list uh coordination channel for Mev payments if they're all using the same state slots to communicate this Mev they don't need to communicate with each other via RPC or whatever they just need to pass the photos around and simulate the bundle to see what the net change in free Med in the system is so these are all happening in one transaction it could happen in one transaction but it doesn't have to have any long transaction like the storage space because exactly well the storage savings is because I'm not transacting with 37 different Searcher addresses over the course of you know like 37 transactions because as it is like each Searcher does independent payments all over the place in order to net out and pay the Builder and whatever are there savings from because there's multiple transactions anyway where do savings come from uh the savings come from uh touching fewer State slots yeah but it's in a new transaction does that matter uh it doesn't have to be in a new transaction right so it's in the same transaction then it's and the other answer is that you can shortcut it in your building and searching process you can shortcut it in rest and shave uh you know latency off of your simulation process do you have any tooling for helping users select the appropriate amount of negative explicit uh I am building a real-time bidding uh RPC uh which I should have a prototype out of this week so the idea is are you users submitted to several searches uh receives that bids the difficulty here is that it did explodes on a specific bundle change it's like when the circuit changes their local state the bit explodes uh or you know we're gonna touch it some say that the current vacuum also cut is in its local you know pack built bundle uh so in order to do this you have to do it like a real-time bidding system you have to do it within like you know seconds or fractions of seconds because otherwise the bid will no longer be good because the searcher's local state will have changed I guess you could just start really negative and have very short experimentals and so yeah so you've seen Dutch document using the time block mechanism uh by pre-signing a bunch of stuff but users hate pre-signing multiple transactions uh you could also implement the Dutch option and like a delegate all library that the you know wallet delegates to for validation um but I haven't done those things yet we do have a pre-signing that option already in the rest of it but they just build a Dutch action yeah yeah well that's what I said let's build a delegate call Dutch option for validation uh because of the sports delegate call you can do any article sharing logic you want uh just like not to say for example uh so that's the that's the whole thing um you can go to blunt instruments on GitHub uh you can hit me up on Twitter uh I am building this real-time auction thing it should be fine we'll have to prototypes out soon getting people to run it is a different different question yeah why are my transactions creating all those enemies collection might just do not be able to transaction like that uh I mean maybe you should just not interact within this law or maybe you should just not recognize that nft or whatever but it sounds like a baby a lot that I apologize potentially yeah but I mean it's my god-given right to burn my money any other questions this is really clear One Direction like this is everything about your transactions um I think that aggregating a bunch of transactions together is best done by Searchers and Builders who are economically specialized in that uh yeah it's so very sensitive to local state when you're getting an Med quote the Mev exists only in a specific state of the EDM so every time the Searchers EDM State changes it means their bids may change as well and so there's a very short time for the Searcher to use their back and forth process to occur because any other user's transaction May invalidate every other user's fate uh so the maximum possible amount of time a bit is good for is one slot and the minimum possible amount of time is as fast as the Searcher is adding other terms that consider abundant this is why you have to do a real-time option there cannot be a commit reveal strategy here you can't go to a chain multiple times uh it sounds kind of like you know like add options to make things like page load ad options so which are pretty well understood this term will tell you yeah it's more like the same responses yeah in the centers it's not clear when people have time you know real-time bidding for adoptions is not a central limit order book it's actually getting real-time bids from the advertisers symptoms um so uh if you're a Searcher running like a quoting service like this and accepting user things you need to get your latency to users like as fast as possible uh and again bids explode every time you know so you might end up going back and forth with several bids with the same user within a single block production yeah cool the only bit you give is like a numerical value thing you're not saying specifically how do I achieved data the same right yeah this is the tip which I will append this to my bundle 
hi everyone good afternoon my name is janik i'm from shutter network and what we usually do or what our main mission is basically is is mev minimization so we want to reduce the mev available but we do acknowledge that this is limited we can't minimize to zero there will always be some left and we need to make sure that the um the remaining mev will be extracted efficiently and without many big externalities and therefore we've been looking into these techniques like pbs and in particular mev boost more recently and yeah just to check how they work and we realized that a technique we use for minimization namely threshold encryption can work very well to to improve these proposals and make them more secure and less trusted yeah and this is what i'm going to talk about basically and it's general about pbs but uh now in particular mev boost because this is kind of the most concrete proposal but we hope that it will also inform like future pbs proposals as well but yeah for the talk i will focus on me boost so to review the problem we already heard about it today a couple of times we want to separate builders and proposers and mvv boost now adds an entity called the relay to reduce trust assumptions between them because without them one naive way to separate the two would simply be to let the builder produce a block and send it to the to the proposal and the proposal would then sign it but then the proposer could do a so-called mev stealing attack they could just look in the block and see what mev was extracted and redirect the rewards to themselves this means this would only work if proposers are trusted but unfortunately there's lots of proposals unfortunately there are lots of proposals so there's um yeah this is just no way this will work this would work maybe a smarter way to do it would be for the builder to not send the full block to the proposer but only send the header then let the proposer pick a header sign it and once the builder sees the signature only then the body will be revealed then movie stealing wouldn't work anymore because um well the proposer doesn't see the um the content of the block before they already committed to one but unfortunately there's another attack possible here called block withholding the the builder can simply not release the body of the block meaning the slot will say empty and the proposal will lose money and they will not earn anything during that slot so this does does only work if builders are trusted there's less builders than and there's probably going to be only very few builders but still we don't want to trust builders because we want to have it it should be very simple very easy to become a build and if if you need trust then this will be much more difficult so therefore mvv boost adds this relay in the middle kind of as an isolator for trust with the relay the process looks like this the builder basically combines the two approaches the builder sends the full block to the relay and the relay does this header signature body game with a proposal this is nice now because builders and proposers don't have to trust each other directly but they do have to trust the relay name because now the relay can basically do these these kinds of attacks but um yes so this kind of fixes the immediate problem but it also has some side effects and it's namely that and it's not very very beautiful in a way so we would like to solve these problems basically we don't want to allow the relayer to perform these kinds of attacks mvv stealing and block withholding we also don't want to allow them to sensor like in this setting you can see the realists right in the middle they can sensor blocks from the build and not [Music] relay them to the proposer depending on for example which transactions are in there it's also probably a very heavily centralized position the relay in principle again it's an open system anyone can become a relay but they need to convince both builders and proposers to trust them so this will be very hard for new relays to do if there's already competing ones and also it requires proposers to pick a relay to trust which is not a very easy decision so at least it's much more difficult than just starting a shell script which which is running operating in norton right now the question is can we do better and i think we can by adding another kind of an abstract machine for now we will fill this in this later but for now let's think of a decryption machine and this what this decryption machine does it provides it's very simple it provides encryption keys and decryption keys on request and then we can build a protocol that looks like this in the beginning the decryption key releases that decryption machine releases encryption keys the builder takes one and whenever they build a block they encrypt the body of the block using that key they then send the header and the encrypted body to the proposal now the and then the proposer picks one block signs it sends the signature to the decryption machine and once the dictionary machine saw this signature they will give or return the decryption key for that particular block and now this fixes mvv stealing because the proposer doesn't see the content of the block they only see an encrypted blob and it also fixes block withholding because the builder already in the first step basically basically gave the whole block to the proposer so they can't withhold anything there's kind of a variant that's possible though of block withholding namely the builder could uh encrypt a invalid block which would have basically the same side effect same effect as withholding the whole block namely that the block would be rejected by the network and the slot would stay empty fortunately that's provable or we will we know um this we can cryptographically prove that this happened and we can counter that using either a zk solution or an optimistic solution um very similar to how zika rollups or optimistic routes work so in a zk solution the builder would simply attach as your knowledge proof that the block is valid and the proposal would of course only accept blocks with these zero knowledge proofs unfortunately for now this is impractical these proofs don't exist yet or at least very difficult to generate so not an option for now but fortunately we can rely on optimistic solution basically how optimistic roles work we can slash builders after the fact when we by providing a fall proof kind of an interactive fall-proof game and this is already a practical solution as demonstrated by all these live very beautiful roll-up limitations out there so now we have to fill in this this whole of the decryption machine how does it work in practice this is where the threshold committee comes in it's basically a committee of nodes that perform that performs this job of generating encryption decryption keys and it's um fault tolerant only um some of those nodes namely the threshold needs to be honest and online for the protocol to be secure that's why it's called a threshold only the threshold number of nodes need to be honest and this makes it more secure because even if there's some red nodes in here who would try to cheat and the system still works well unfortunately if you do it naively this would be very inefficient because they would have to generate a new decryption key an encryption key for every block that the builder wants to and that a builder wants to propose and this could even be a ddos vector or denial of service attack vector basically you can spin up a million builders and they would then spam the special encryption committee uh give me keys and this would basically yeah they couldn't do that because it's too much work so we need another ingredient namely identity-based encryption and identity-based encryption is a very interesting mechanism it allows encrypting a message not for a public key or for key but for an identity which can be an arbitrary string and then afterwards uh the decryption key corresponding to that encryption key to that encrypted message will be generated by a committee like this like like a threshold committee um [Music] and yeah the way it works like this like assuming alice wants to send a message to bob uh the process would like would be that the committee generates first kind of a master encryption key and distributed to everyone and now alice would encrypt the message to bob using the master key but also the identity of bob for example it's his email address boba ethereum.org and bob would receive this message they couldn't decrypt it immediately because they don't have a decryption key they they don't have anything basically and they would ask the this committee or the threshold committee to provide them the key so bob would say i am bob i i own bob at ethereum.org please give me the key and they would then send the key in the form of keyshares to bob and then bob could decrypt this message using that key how do we apply it in our protocol we use the block hash that so to recall the builder wants to send a block to the proposal and the builder will now encrypt the block using the block hash as an identity this means that all the blocks can be decrypted independently from each other so only one block will always be decrypted it's also very efficient because you only need to run this dkg phase once so only one key has to be generated ever basically and for decryption key it's also very efficient it's it's basically just a linear message over it basically only threshold nodes only t nodes of this committee have to send a message for the decryption okay so putting it all together now these different techniques starting with the committee the threshold committee they will in the beginning generate a key broadcast it to everyone bob will receive the key they will not bob the builder and the builder will all builders will build blocks encrypt the blocks using this encryption key using the hash of the block as identity send the header and the encrypted body to the proposal the proposal will pick one based on who pays the match who pays the most who whose bid is the highest they will then sign it and send the signature to the to this committee the special committee the committee will respond with the decryption shares and now the proposer can decrypt the block and send it to the network and everyone is happy and on the side we have this builder slashing contract that will hopefully never be used so we need to look into this is the protocol how it works but we should look into things how they could go wrong basically misbehavior by the committee and again they can do these two types of attacks uh block withholding enemies mev stealing block withholding would in this system look basically like refusing to decrypt the or to refusing to release the decryption key but now this cannot be done by a single entity like the relay it can only be done by a certain fraction of the whole committee and you need in like concretely you need n minus t notes could be for example depending on how t is chosen uh one third of the nodes there's little incentive to do so unfortunately and it's potentially uh mitigatable by the builder so the builder could if that would were to happen the builder could simply send the plain text body to the proposer assuming of course the committee doesn't collude with the builder so this attack we're not so scared about of course the more dangerous one is mev stealing this would look like basically that the committee now decrypts a block they're not supposed to and before they uh they're supposed to do that um and that's very scary but fortunately this is very difficult because they do rise more than the threshold of nodes to to attack more than two-thirds of all nodes for example there's high incentive for it because they now can make money out of that by of course stealing the mav and it's potentially we were very happy when we found this out potentially we can slash for this kind of attack but as we will see later there's also a counter magazine mechanism so um it's not all all perfect so how would the slashing work the basically the the idea is basically that an honest committee member will only release a decryption key share when they see the signature for for a block header which means we can slash them whenever basically by providing a decryption share and when they cannot respond with the corresponding block header we slash them so this works but it requires an informant among the attackers so basically if the committee of attackers would collude perfectly and not leak any information outside then this would never be detectable even but if there's even one node who gets access to these shares and releases them to the slashing contract or to the public then this slashing mechanism might work and i think that's a very um not a very strong assumption because if the committee is large imagine there's like 200 notes in that committee making sure that there's not even one good guy among the attackers is very difficult but unfortunately there's a as i said a counter strategy the committee could select a coordinator and now they would only send the decryption gishes to this coordinator and now of course now this coordinator could slash everyone but they can um opt into another slashing contract they could say i get slash whenever any of the keepers or any of the committee members get slashed and now this is now a situation of basically mutually assured destruction uh both the the attackers can slash the coordinator and the coordinator can slash the attackers but no one would benefit they would all basically punish themselves so this might be a mechanism to keep themselves honest and which basically means that this slashing mechanism might not work as uh as well as we had hoped but fortunately it's still a very difficult attack to to pull off because you need so many uh collusion in this so big collusion in the in the committee so big question now is of course who's in the committee the process how such a committee would be formed would basically be permissionless like similar to to the situation in plain mev boost anyone can can launch a relay now anyone could propose a committee the only challenge would be of course to convince builders and proposers to accept this this committee i think in practice a good solution would be to start with with trusted community members or organizations similar to these organization organizations that would run relays today for example flashbots box route maybe the theorem foundation they could form a committee that would in the beginning be very small and but it could grow over time to make it more secure and at some point we could switch to from basically from hard-coding the members to a open process so and then the proposers and builders would only have to trust the process and not the individual members yeah but it's a bit of an open question how this would work but i think it's easy to figure out over time one important thing to look at is latency so the reason is that we would ideally blocks leave the builder as late as possible because it means that the builder has more time to to collect transactions and more time to optimize the order of those transactions and eventually as a result extract more mev so for both for builders and proposals it's beneficial if this process of between the builder sending the block and the proposal signing it and sending it to the network as short as possible to give people a lot more time before and another reason why low latency is nice is because it lowers the confirmation time for users so how does latency look in both mev boost and in this adjusted mvv boost proposal so at the top here is plain med boost we can just simply count the number of interactions first the builder sends the block to the relay one then header to the proposer to signature to the relay 3 and body to the proposer 4 so it's 4 messages basically and if we compare this to uh to this new proposal uh we will only have three interactions basically header and bot and encrypted blocked to the proposal signatures to the committee and key shares from the committee to the proposal just free so it looks like it might even be lower but unfortunately they're not very comparable because in if we don't have the re the relay is also like a network relates it's a centralized entity that can open direct connections to all the participant in the net participants in the network whereas in our case we need basically peer-to-peer gossip broadcasts which might be lower might be much slower so that's another kind of open question we have how slow are these broadcasts in practice and how does it compare to to to plain mv boost with direct connections how would we implement it um we already implemented the threshold encryption committee for our other product projects for mev minimization so that part would already be done what would be missing would basically be integration into builders and proposals and the slashing contracts if we would implement it we would we could probably reuse the existing apis that have been already find defined for the relays in mvv boost so we wouldn't would probably not need any protocol changes but we would have to implement these kind of proxy contracts that look like a relay to build and propose but perform all these networking and yeah and slashing steps yeah so in summary uh what we've proposed here is a adding a thresher encryption mechanism to get rid of relays and to remove trust in them and all in all increased security of the protocol at the cost of latency probably it's implement implementable today for mev boost um and hopefully but hopefully also informative for future proof of pbs proposals you can read more on it on on etheresearch we've got a proposal there in text form and also check out our other projects if you're interested in mav minimization thanks [Applause] hey there sorry if i missed this but um how do the uh in the decryption um machinery how do the uh committee members agree or come to consensus on the encryption key um together such that you don't have like a nefarious user who basically just front runs the other ones and says this is the encryption key and this the decryption key um such that if that person is also running a uh is the proposer right they could um effectively know immediately if they're able to basically if they are this front runner they give the encryption key that they um already have the decryption key for they give that to the builder and then when the builder sends over the encrypted block data they are able to decrypt it as the proposer does that make sense yes so i think if i understand correctly so basically this committee generates a key as as a whole and they can just sign it basically they can sign the the key and then of course proposers and builders first have to select a committee so they can then check authenticate basically the key against them to make sure that it was created by by them and as i said this only has to be done once so it's not a process that has to be repeated very often and then the decryption key can of course be validated against the encryption key so that's then not a problem anymore so basically signatures cool if there's no other questions thanks 
all right I'm new to flashbots as past few weeks uh no past couple of months but in the past few weeks I've been um meeting a lot of my computer security and distributed systems colleagues and explaining why the hell I'm you know working on flashbots for my sabbatical project and so um I put a bunch of slide decks together to you know explain this kind of quickly to some particular friends who have high context with me um on technical stuff so you know easy conversations with them but who either are unfamiliar with flashbots or have pre-existing strong negative interpretations of flashbots and so on these are fairly opinionated slides I made you know kind of quickly but Tina others like the presentation so encourage me this way um the caveats I would give to them as well um are that I'm just going kind of quick on like what I've observed or think about flashbots so I got to read like all the old notion drafts and just simple size you know stuff from everyone so some bits are like way oversimplified some are deliberately oversimplified but um I basically have a very simple Stig model that's like everything's just uniswap V2 transactions and that's the only thing that really exists apparently the data team says that's not entirely far off but um I I leave out in my mental model things like centralized exchange prices so you know those won't show up um and then this is very much like a vision of slav that I think is an interpretation of like um what's existed before but you know maybe it shapes something a little bit but um so take it as like a personal Vision maybe it'll come true um the first thing especially aimed at researchers who have a pre-existing negative opinion of what flashbots does it normally um is really like strange the first like uh like CMU thing that I went to after um joining flashbots and encountering all of these people and they would say like in like hush tones like how are we going to stop flashbots well I've heard flashbots is using tees to extract even more media than they did before and so after studying by itself I've come into the interpretation that's neither what flashbot seems to do or what it does I'm telling you I think I'm preaching to a choir here so no one thinks this but yeah you'll hear it from my way so um I don't even think the extracting any deframing is all that accurate so to me what flashbots is already doing and continues to do is two things preventing front running and um making back running better again in the only world of unit slot V2 transactions those are really only the two things you can do um I come from the world of um you know computer security research and like um I've done snarks in NPC crypto things but in the last year I've been obsessed with hardware-based smart contracts like secret Network um I don't have in this thing on things on like disclosures and like security bugs and secret never but that's been like the long story of my research groups like last year of stuff so I can mention those like on questions but um uh say forgetting that the basic thing of secret network is that it's only got one mempool and it is a private mempool because all of the transactions in secret Network are encrypted this is like what the encrypted ciphertext looks like and the only way that secret never transactions get into a block is by tendermen validators you know putting them in order but you can't do anything with the cipher text until the block is already finalized and then you only get to execute them in the next below that actually wasn't always the case but that is the case now after like our most recent security vulnerability disclosures to them um but the upshot of that is that secret network is already a little bit like suave in that um they have a uniswap V2 clone every blockchain does um their unit swap V2 clone automatically has front running resistance because of that built-in blind ordering applied to every transaction that's sent through secret networks so Sienna swap is there uniswap and it eliminates the nearest possibility of front running out of every play prevention that's sort of accurate um but to me what's taken a long time to adapt to um is to realize that that alone doesn't kind of solve the whole problem you want to solve because if you just have the fair ordering then um you have like really messy Arbitrage that comes later this is um a new illustration that I've done to convey what this looks like so uh messy Arbitrage opportunities are the result of shitty user trades a shitty user trade is one where you only trade on one pool but most of the liquidity is fragmented on other pools so the user gets a terrible price I've skipped to the secret Network version where this is like a private trade so the you know you don't see it um you only see it after the block is finalized and you get to see what the result of the trade was in time for the beginning of the process of the next block um what happens then a priority gas auction War breaks out because whoever can get the transaction at the top of block gets to take all the Arbitrage opportunity restoring the balance of the pools but they get to pocket that Arbitrage difference and so not getting to Suave like how this could be done you know more trust minimize just what Mev share at flashbots does today is it's like the same thing as in secret Network in that your transaction is you know private until it gets on you know settled but with Med share back Runners get to bid on getting to put the transaction immediately after yours even in the same block but when bidding they have to share the larger percentage of the Arbitrage that they take back with the original user so the result is that it's like you're um I mean at a technical level it is implemented as extract and then redistribute I prefer to think of it as um you are getting a competitive auction to arbitragers for a commission for them to do the back running for you automatically upgrading your shitty user transaction into a more sophisticated Arbitrage free transaction that results um I think that's pretty realistic I mean that's okay with just the unit swap things like Central exchanges are a little bit different but um yeah so let's swap compared to flashbots as it exists today it's three things roughly in sequence so um just like TV smart contracts it's replacing trust in the operator flashbots to be you know keep the Privacy with trusted Hardware so that they can't peek at it even if they wanted to um this could also be combined or replaced with cryptography or threshold kind of things but for now I'll just say it's going to be the te version um if you can replace the trust in the operator with Tes then that opens up the ability to make the execution decentralized you can have lots of different nodes not even all controlled by flashbots some could be lower interest environments um and then the third thing is maybe the New Perspective I think it was already implicit and stuff Shin had written talking about Builder gas long ago but uh you know that you know extracted it as such this way but um this these Market mechanisms will now be user programmable because they are written as smart contracts so if you don't like the way medshare distributes the rules you can just Fork the med share smart contract and replace with a different rule no one can stop you from uploading a different smart contract to solve and if you can convince users to send their transactions to that one instead no one can stop them from picking your contract if they want so that's what it means to be contestable um this also makes it an Open Marketplace because flashbots doesn't have to just come up with the perfect option structure you know a smart contract designers can do so um a starting point of what this would look like is as a starting point just replicate everything that's in the you know ecosystem today um you know make Med share auction a med share Med share Matchmaker I guess a background smart contract make the flashbots Builder a block building contract and so on um this notion of an Open Marketplace we've found this paper that's really surprising from literally 20 years ago but it sounds like a modern description of suave um it it didn't first see smart contracts exactly but it all in it and it isn't aimed at the um the like uh preventing private negotiation aspect is just concerned about efficiency of market mechanisms but it basically says um you know all the impossibility results of like perfect auctions there is not going to be a perfect mechanism so the best this Advocates to aim for is like the right level of lightweight components it basically says you should have an open system where anyone can propose Innovative New Market design components that are compositional and can interact with each other and in that way market designers can innovate on parts of this and you can have an ecosystem of a gradually improving Market mechanisms um of course smart contracts is like the only tool for open composition and Innovation we've ever seen so that's kind of a natural fit and again they only focus on performance so like efficiency of the market they didn't go into the um the flashbots Doomer thesis but that's kind of like the natural follow-on if um if you don't have this Open contestable Marketplace where the market designs are public smart contracts you can look at analyze and Fork if you want to then the alternative is that the market Dominator may be on entrenched to private negotiated bulb deals at which point it's impossible to dislodge them because you can't they did their negotiations and so on on the bit of this that's now specifically aimed at like cryptography researchers and my friend group um this is try to pitch them that this is like an open research project so in cryptography we use ideal functionalities to make a specification so it's like a hypothetical trusted third-party of course today we have a actual trusted third party so it's not far off but um this persists as like an idealized version so if you skip the t's and the decentralization and actually just did a trusted smart contract system with a central third party it would look exactly like this but for cryptographers this is understood as a security definition it just describes the interface anyway the interface is that there's a service that has smart contracts on it and private data storage on it just like secret Network um and you know the different kinds of interfaces are Market design innovators can make new contracts and push them onto the chain um users can interact with the smart contracts and there's still room for Searchers arbitragers who get explicit hints like the neb share hints or or anything that they can infer from side channels that are captured in the specification and you know they can invoke their own smart contract transactions and you know input Arbitrage inputs and so on and of course the important thing is that this outputs an L1 block up to ethereum and then this is like the very high level architecture view but now this is what it you know swabs should look like there's smart contracts on Suave there is a Suave chain there's a mempool of pending Suave bids as well as the bids that are finalized being in a chain being committed in swap chain doesn't mean that it is satisfied yet it just means that like is sequenced and has data availability and you can't ignore it on the Suave chain um and not all of the execution happens on Suave chain that kind of suggests like very linear maybe bottleneck and latency uh bottlenecking so really the point is that we will have off Suave chain execution so roll up of a roll-up or something um or side chain on the side chain anyway the execution is um off chain of suave chain and but still carried out in fusible Hardware execution enclaves um by executors we call T kettles and so they can have access through their kettles to the confidential data but only according to the rules of the smart contracts as defined so each ontrap defines the program rules for interacting with that contract's private data um this is like uh I don't know stale now but this is my little mental model of what an ecosystem of separate Market components looks like as contracts I don't think this adds much new but just imagine like there's no share it's like a component that is kind of close to user bids and towards the right hand side you have like larger block bundles and near blocks and finally a PBS you know export comes out the right hand side just a little image on I think this slide doesn't add too much more other than maybe okay we imagine there is some mempool of pending Suave bids and um this goes in a little bit into some of the detail not super clear from this description but you know the Whiteboard can be for that about what off chain execution means so Suave blocks probably come much faster than L1 blocks but not infinitely fast so the thing that'll make this you know realistically performant is being able to do concurrent execution of useful stuff by lots of different uh separate Enclave nodes multiple cores on me John clay and that sort of thing each one may be doing some simulation whether you can do simulation or not is kind of up to the contract rules to Define like I said in secret Network it used to be that they allowed open simulations you can simulate transactions even before they're finalized going to block so you can simulate a front run and the victim in a background to see and then if it succeeded increase the front run and try again and then in that way you just do the Mev on Seeker Network so after our security disclosures they've patched that so now you can only execute them like I said at the beginning after the block is finalized but it would be useful a smart contract authors could like approve some functions to be done with local simulation it just gives more flexibility to the Suave app designers um to address the natural concerns about tees or some like concept of it on the Martin Bailey military concept it's also an argumentation concept the military part is like you want to have your people working in the fields where it's sunny and you have all of your crops but you're spread out and as like if you're under attack then everyone Retreats into the Fortified thing but then it's like dank and musty and you can't work in the field so you want to be in the Bailey wherever possible and Retreat to the mod when you have to so there's on a sequence or you know a spectrum of ways of deploying tees um the most aggressive operating point is what secret network does where anyone at all with a te can join it can be person in a cloud it could be a person at home it could be in a side channels lab but you have no control over who's running them and they have physical access so it's like the worst case scenario any breach here means that you know people with physical access could exploit even um uh and there's lots of breaks on sgx over time some of them can be exploited with just software um those are the worst cases others can be exploited but require some level of um you know physical access to be able to do so so in this case any kind of breach would be you know problematic for your system something in between is maybe only approved Cloud vendors are eligible to the T kettles running so anyone could have the account it could be in any you know country that has one of these clouds how the data center there but um you're relying on the cloud having their own security guards fortified Data Center and like bigger fish to fry like even if it's lucrative they're not going to risk embarrassing themselves in front of their juicy Cloud Enterprise customers just to you know extract ethereum blocks it's like an additional kind of justification for security and on the Very extreme end um which all else equal you would like to be if performance could get there so maybe in the future you do some multi-party computation threshold stuff where you'll of multiple nodes doing each interaction if you break any one node you don't get anything you have to like not only break sgx and have physical access but you know get more than one of the nodes or your plurality and then to be able to you know do anything about it so um you know maybe all of these are feasible maybe something in the middle is kind of conservative it depends on how far you want to push it and maybe even these could be dynamically like when a reach notice occurs maybe you shut off access to um you know physical access kind of nodes and run on like reputable Cloud only at least for a little while until patches are way done over so it's a little bit fuzzy I'm not like a complete answer to I don't expect this to completely flip someone from hits the te model to being totally okay with it but um it's it's you're not only talking about the you know worst case scenario operating point is all um so I tease that the new thing is thinking about Suave as explicitly smart contracts and explicitly on what we're calling Builder solidity which is you will actually be writing all of these in specifically solidity it's solidity with some additional pre-compiles and your evm with some pre-compiles Nevin with some pre-compiles that are useful for building blocks and simulating EDM transactions so you have like a keyword to refer to the ethereum L1 this is running like on Suave chain um but you can simulate an evm transaction passed as data but that's a pre-compile so it's not like I'm saying write the evm in solidity that would be gassy this is like a pre-compile that just makes that you know efficient um and then so this is like pseudo code for what the flashbots Builder might look like it's the two passes right like simulate all the bundles it has as though we're the only bundle in the block and then sort them based on that estimate and then do a confirmation path simulating them in order this time and if in order they you know fail or they yeah like they fail or they don't the estimate turns out to be way off then just discard that bundle this is just pseudo code replicating with the flashbots buildables now but now it's in pseudocode so you could imagine forking it and changing the rule if you wanted and convince users to send transactions bundles there instead and like exporting block to the L1 through PBS could be a you know a op code as well um there's a new um proposal for a Suave app from one of the newest flashbots researchers Sergio which is walrus Suave so this is saying if you have a batch of uniswap transactions um if you just processed each of the unit swap transactions each one pays a fee to the liquidity providers right but if you have a batch you should first see if you can make as many of them as they can settle amongst themselves not having to pay the liquidity providers for it and you can just do a solution to find the strike price for that and then what's left of residual demand would get forwarded in a batch to um you know uniswap other pools so that could be modeled in this pseudo code as two entry points one is to submit a bid to this contract that just adds it to some storage this is implicitly all private by the way right so you submit your bid to Suave these are encrypted only processed by Hardware Enclave so it keeps your quantity and reserve price hidden and then the second entry point is to process bids which does that settling and then forwards this bundle onto that Builder contract um Dev share you could also model as a contract with like three entry points one to submit a bundle and specify what hints you want to reveal like the token pair you're trading on but nothing else um as a blind arbitrager you can see one of those bundles based on its hints um this should be bundle ID the point is like if you have the hint as the name of a bumble then you can bid on putting your transaction in background position right after that bundle um and all that does is it doesn't even simulate it here it just packages up that bundle and again forwards that on to on the nest used sorter estimator Builder contract um or yeah okay so the only thing that's left was done I didn't say how this does the the kickback or the you know giving the user back the Arbitrage from Mev share that seems like it has to be implemented by modifying that Builder contract maybe there's a more modular way to do it with like a callback function but um yeah this is sort of still pseudo code but maybe you get the idea um uh one of the questions that in my sphere I get a lot is like where does the fair ordering come into this or like is fair ordering is it or is it not a subset of Swag or like the opposite of suave and so this is to say yes it's compatible it's clearly a special case of suave you can write a fair ordering Prof style um a builder contract basically Prof says what if you have a fair ordering service that makes a bundle but you want that bundle to bypass any sort of simulation and you don't want to go to go to a builder that simulates it um I mean it does it doesn't simulate it for ordering it can simulate it to produce the header it kind of has to to get the like post date execution route um but so this would basically be a builder rule that can take profit blocks but Prof blocks would only be forwarded to this if it followed this rule which is that it won't actually simulate the graph blocks to estimate them at all so it can insert them at the end of a block but it can't like determine what the mean price it is so it just has to you know take it or leave it no ability to simulate how much Mev that Prof block generates um that's mostly it there's kind of a technical thing that's a little bit new I said that like we want this off chain execution um this concept of um Roll-Ups is something that I've been looking at recently for our proposal the secret Network so one of the secret Network disclosures is about access pattern leakage breaking their sender receiver privacy they really need to use oblivious Ram um but they they don't have a good way of adding oblivious round because that's expensive um to do it on chain so we came up with a proposal to do off-chain oblivious RAM and what's interesting is that doesn't require like a new system or like a new roll-up to secret network is actually just something you can do with existing secret Network smart contracts it's a little bit Technical and subtle but basically yeah I mean maybe you get the idea that you can do some kind of you know computation on things off chain but you would have to like put the result back on chain like a roll-up normally you would need a snark proof or an optimistic frog proof but in the te world you sort of have replacement for snarks because the Tes can have uh you know secret signing key um so you can take a signature from the tee smart contract as like in lieu of a snark right as long as you trust the te model then only that Tan t running that smart Run Track can produce a signature under that public key associated with a smart contract so in their existing programming model of te based smart contracts you already have cheap Rolos and so maybe this doesn't illustrate the whole thing but basically if you wanted to do a linear scan and you wanted to do it concurrently it's not linear like sequentially but just linear like you touch everything regardless of exiting you're actually accessing you can do this in read-only views and each view can output an encrypted and signed updated State like that's expensive compute wise but you're not paying gas for it and then only like the outputs of the thing that you want to query have to go back on chain where they can be checked kind of easily um this is off of swab this is just saying this is this like Roll-Ups for free programming model that works for secret network but it's the same concept for swallow this is like uh kind of the same programming model would be how you could do you know off-chain distributed block building that way um yeah maybe I might leave it here um this is kind of aimed at posing open questions for like the computer security researchers um you know I pitch that there's like an ideal functionality kind of thing so there's like actual formal modeling and like protocol design for this sort of thing to do um how to do the programming model is I think like fairly open I think that on if you get down the path of saying like what have we just use solidity for this it's cool because the idea should be if you're already familiar with solidity as much of your programming model expectations should also carry over to making Suave apps I mean you have to be thinking about okay you're in this privacy setting um like what you can do with signatures and stuff is a little bit maybe unfamiliar unless you've just been in Oasis and secret Network for a while but um that at least gives you a design intuition like principle of least surprise if you have no other strong prevailing reason then as platform designers we should make it as much like familiar evm as possible um and then that's also like the invitation to um you folks I guess if um that like inspires you like what kind of um uh you know swab apps you might make and how you might think of making them now is still time to like collect input on what free compiles might make sense or programming patterns might emerge we've basically been jamming on pseudo code of different variations of these you know things we can imagine but um there's just like so many different designs you can start by replicating existing designs tweaking them a little bit come up with something kind of wild how to integrate like the cryptography with the Tes is definitely open I think nevshare is like a pure mechanism design open challenge like I don't think no share I think medshare is a novel mechanism that doesn't really exist anywhere else I'm not like thoroughly knowledgeable about all mechanism design stuff so maybe that doesn't bear out but that's like uh you know conjecture law so that's like a nice thing to you know analyze um yeah that's it uh people have like this elephant so I will show it there's lots of aspects of suave people even if flashbots see it all different ways so this is in part an effort at trying to like unify some of the different threads that have been sitting together um yeah stop there 
all right so um I'm going to talk about a couple of like use cases that are what kind of motivated me to think that using sgx and other te is is kind of worth all the uh downsides and extra work you have to do around them um the kind of basic path of all of my research if you followed some bits of it like various honey badgers work has been like moving all the way up the stack of like complexity starting with just consensus and plain text then smart contract programming is really like the main thing that I care about it's so cool people learn about commit and reveal smart contracts like in the like first smart contracts tutorial like ethereum name system everyone clearly is interested in zero knowledge proofs that's like the number one word of the Year even in ethereum which is kind of came as a surprise but to me at least like two years past due so that's great um but what I've been interested in now for a while is all of the things that you can't do as their own knowledge proofs like yes the zero knowledge proofs don't solve every application there's plenty of applications that you need one of the more powerful tools to solve there's only two tools that can be used to solve the app applications where zero knowledge proofs kind of hit the wall and there are multi-party computation and trusted Hardware enclaves and if you ask about like fully homomorphic encryption that either means threshold fully homomorphic encryption which is a kind of MPC or it means fully homomorphic encryption where the decryption key is inside a trusted Hardware Enclave either so there's really no avoiding one of those two and um I've been kind of duking it out with a secure MPC for a while and I'm kind of more excited about MTS now so um the you know one nutshell reason of like how you can tell if your application doesn't work with ZK proof since you can't prove what you don't know like there has to be a prover making the proofs you can only make a proof about data that you have unless you're using one of these other tools so for anything like an auction where you don't reveal is that going to be my next slide no not yet even like an option where you don't reveal everything after the fact you can't do that with your knowledge proofs you have to like give all the bids to someone to make the zero knowledge proofs about it's really no way around it except to use one of those too um but for the sake of this like uh intro talk I want to describe the um first interaction that kind of led me down this path and um this uh started from a conversation that I had with Ari talking about um uh you know where to go next after the town crier projects if you know the town crier project this was where we said well there's oracles but they can't do everything and they're not very private so if you had oracles into a trusted Hardware Enclave then you can get some privacy guarantee for oracles that's great that's the town crier project and um I'm not interested in just having like one application of them what I really want is to see like the you know full power of privacy rules at the complete disposal at the hands of smart contract developers so they can come up with you know whatever they want to be able to be you know completely unconstrained so um the the conversation that I want to talk about is is what led to the delegate papers is I think one of the Lesser well-known um uh papers that I've worked on um we had this conversation in 2019 in uh Bennett Croatia at the real world crypto Summit uh real world crypto summer school this was like right uh before the zcash conference in the same place and so I was having this conversation Phil can probably relate to this but a lot of my best conversations are like trying to troll Ari with like a weird idea just to see how he reacts to it and so I said um you know what else would we use sgx for and I'd say well I am so bored by now by the idea that you just take here's a application and now here's the off the same application on sgx that's like so boring and it usually just takes the fun out of it because it's now you know kind of too simple and um so I try to say is there something that you could do if you have this really powerful tool let's not just do it by taking existing things and just making them on sgx like if this is a really powerful tool we should be able to do some things that no one's ever seen before really thought of doing and um the idea that we came up with is um to what if you could um store your passwords to Services inside of an sgx and the idea would be that you would be able to um get like more functionality for your existing uh like ordinary web 2 account Based Services than you currently have um the example that we had is like Netflix sharing so like normally when you want to share your Netflix you share it by sharing the password right that's kind of like all or nothing you either have the password or you don't uh there's a thing called delegation which is something that like um you know oauth open supports like you can give read-only access to your you know Twitter feed but not the ability to write to like on an application by an application basis that's because Twitter has a delegation mechanism and you know we'll we'll carry that out and have like a separate token for just read-only access versus not um but what if you wanted to give like a more fine-grained control over that like say I will give an app the option to post like one tweet per day but not more than that or they can post a tweet but it has to begin with hello I'm a bot and then they can only program you know what comes after that if Twitter wanted to provide that obviously they'd be able to but you know what if you wanted to do that in Twitter that wasn't one of the options that Twitter had they said well if you just put your password in the te and let the te do the logging in for you you can then sell access to the tee that is going to log into your account and you could write the programs for the fine-grained delegation that you want in the te and so it'll be like a little like intermediary holding your password for you but providing this like extra kind of programmable control on top of that ability and so um uh I think Ari called surgeon Shopkin from eth over and kind of uh talked about this idea we kind of went through it and um when we said something like off the wall like um likey and I just burst until after that and um conversation kind of ended I went away and then like the next uh I didn't hear anything about it until like two months later I kind of dropped the idea and went to somewhere else but then um surgeon and his student Shanisha just like emailed us and we're like oh yeah over the last two months we've like built that whole thing and already written it down and what they came up with was a whole implementation in sgx of a thing where that you can um uh you have like your Netflix as the service there you are the owner of an account you go escrow your account by sending it to the delegate service or if it can be peer-to-peer you send it to a delegate node and the idea is that this now stores all of your credentials to be able to log into whichever service they made a demo of um I don't think they got it to work on Netflix but there was a demo of it working on email when working on PayPal there's lots of variations of this um in the case of mail it's like maybe you want to give like kind of you know partial right access to a secretary to like you can respond to invites and you can read any message that comes in if it has the filter you know hackathon event but you don't have to read all the email and you don't get to send arbitrary messages you only get to reply you know based on this pattern so the owner sends the program that they want to have be in control of their password they send the password to the you know delegate unit and then the you know executable rules basically have like a Marketplace kind of rule so this is like um to have a thing there the idea is that you can build like a secondary market for partial sharing on top of any service whether they intend to support it or not even if they don't want to support it then you know you can do this to you know block them from being able to stop you so again with the Netflix example you can give your Netflix password but it's All or Nothing what if you wanted to like be your own Blockbuster and rent out your Netflix to watch like one movie for a night and like sell that on eBay for some money I'd be like like a secondary market for the use of your account right you can do this by the magic is that you put your password in the te and just trust that it's secure there all right but what it lets you do is this functionality that's like super subversive because it's like building an extra Market in a place that didn't already have it against the entire wishes of even the service you know that uh uh doesn't want you to be able to you know be able to resell a portion of your account um that's the gist of it I can go on to like some other applications but if you seem like my penaltalk or something they're not like um you know more than that let me pause there and see if there's any questions actually this is the only fun new slide that you all might not have seen yeah I'll give you the short version and I think Kevin's going to give more of like a you know an actual description of kind of like remote attestation things so maybe we'll come back to you know the more details of it there um this kind of interface probably could work with AMD Sev the main thing with AMD SUV is that it is meant for use in clouds so there's a notion of the host that's like the cloud there's also the guest owner that's like the person whose accountant is that's creating it and the attestation is between that guest owner and the cloud um but it's only meaningful to the guest owner and in fact it's based on a diffie-hellman key exchange so you end up with a shared key that The Enclave also has and so you know that if you get a message from that shared key it didn't come from you it had to come from the only other person that has it which is the enclave and you know that's good but if you want to now share this to your users to prove that oh I'm not looking at your secret data well I could spoof the same thing that the you know server told me so like that's great in an Enterprise setting where there's a trusted company and they don't want to trust the cloud but you're just a company uh that's not what we want which is the ability to have like you know blockchains where you're just saying I'm the app developer and I'm In Cahoots with the cloud and neither of us can peek at your data so I mean that's the fundamental difference between what sgx lets you do uh and what AMD lets you do this version actually probably is okay because you could do this within the SUV the guest owner would be the owner of the credential and then you could do that on the cloud and that might be okay any other reactions to this like application is it surprising or like uh search for him I was like is this supposed to go back and give me a screenshot something like and then the surfboard the answer to all on Instagram so so that showed up I think about it so I sent it to the password and immediately that's not a good vacation somebody is trying to reset your account I'm saying oh my God I was thinking like whether it could be like every time the passwords got sent is sent to a totally different okay it's so much easier to send into your account into the afternoon saying you might not even want to keep your passwords on your own device like not only might you want to share it with another thing maybe you would want to like put it there off phone anyway and then only like yeah that's kind of a good idea like normally your device has your password in it you might want to have like read-only access to your email account just on your own device yeah so even besides being other people this kind of same story about having fine-grained delegation like oh I'll have a read-only device a limited device um this whole thing is saying if you have the power of Tes you can build that even if you post the service provider didn't you know think of providing that um so it's good for backward compatibility with Legacy services that aren't doing like up-to-date oauth 2 kind of Delegation um it's maybe not as subversive as saying oh you can do this even if they really don't want you to be able to do that so that was the um the idea of like building a secondary Market on top of services that don't want you to have a market is to me like just a really exciting thing and there's not any other way of doing this so um you know I find that the like inspirational kind of quality of trying to do programming with teas and and so my hope out of like advocating for private smart contracts is that smart contract developers get used to kind of a more powerful way of thinking that includes um you know secret information and fine grain control um what else do I have to talk about um I'll skip talking about um oh what do I want to do you can either hear like four minutes about a zero knowledge credit graph application I can give a tutorial of um you know the high level view of how to eBay smart contracts work that's applicable to like Ace Oasis and secret Network as well as obscuro and Fala which I think are less uh you know well known waiting for like feedback all right so the basic idea of smart contracts is that the smart contracts are going to be private because the smart contracts are going to run inside The Enclave that's really all there is to it at the first high level like you had smart contracts now you have Smart contracts running inside The Enclave so now they're secure and private um so to get to the details you have to go a little bit further um so the first kind of key idea is that the enclaves have a secret key that never leaves The Enclave it's generated within the enclave and never leaves it but there's a public key associated with that and that's public it's you know associated with the blockchain and so if you want to send a transaction that only The Enclave can compute on to send a message to a private smart contract you just encrypt your message payload to the public key associated with The Enclave um so that's already kind of a you know the basics of the idea there uh there's a really critical thing which is a replay prevention which is a really well established thing in like um kind of Enterprise uses of um you know sgx but um you know not as uh clearly talked about it on blockchain applications of it but The Enclave should only be processing the transactions in the order that they actually appear on chain and so roughly the way that you need to do that is whatever your consensus mechanism is that defines your blockchain you know committing transactions in order that's what blockchains do you want your enclave to be like a light client that can tell here's a block with an ordered a set of transactions and it'll go execute that set of transactions in that order and it's really important to only execute them in the order that they appear as otherwise by replaying the same transaction kind of under different contexts you'd be able to like leak more information out of the transaction that way um there's a really critical issue which is about or a really challenging thing which is how to do software upgrades right software upgrades is tough in every blockchain it doesn't get any easier when you have the TS and you know private state where there just becomes much much harder um there's a couple of ways of doing upgrades the first one and kind of the most important one is the idea of doing an interactive exchange between the Enclave running the old software and the new enclaves running the new software so you know this Enclave is the old software it has the master secret key within it um here's the Enclave running the new software what it does is it generates a new private key and secret key just for this key exchange um sends the do you have any animation here no I don't it sends the public key to the old Enclave along with uh you know attestation certificate saying okay I'm running the new software and here's like my I don't know proof that the validators approved it and the developers approved it whatever the rule is and if that passes then it encrypts the master secret to the public key of the new Enclave now the new Enclave also has the secret key under the new rules and it can keep running like that um there's another way of doing Secret of doing uh software upgrades which is the way that secret does it right now but hopefully that's another way that they do it in the future which is that you have a sealed file a sealed file is sgx technology for the same CPU that wrote the file can read the file but no other CPUs can can do that there's two options though there's Mr Enclave which says only the same CPU and the exact same program that wrote the file can read the file there's Mr signer which says that only the same CPU in any program signed by the core developers can read the file so this version is really bad because it means the developers signing key is also a master decryption key it can decrypt all the transactions just by code signing a program that outputs the master secret and running that on their own node so you should only ever use Mr Enclave but if you only ever use Mr Enclave then to upgrade to a new piece of software you need to do this interactive you know key exchange process the other detail worth zooming in on is the idea of storage and this is kind of fun to talk about in the context of what Suave does also because it like loads the whole state into memory all at once and that's why the current version of suave has the like four and a half hour startup time but anyway the general way that these work is that there's um this is true of secret Network and Oasis equally is that um you know every like smart contract system you've got your like evm and you've got your key value storage in the back end every time you have um will this be an animation yeah this will be an animation um so you're going to access the you know current balance to see if it's enough The Enclave says out to the untrusted operating system access this piece of storage and it encrypts the key that you're asking for all right so if it's the balance at this address it encrypts that address and asks for it the balance is stored in this untrusted database also in an encrypted format so it sends back the encrypted value but The Enclave can decrypt it and now it sees the plain text value and now you'll like subtract the value and then write it back so you will send set again you'll send set with also the encrypted key and the new encrypted balance and it writes it back so that's how you have the secure Enclave in an untrusted storage and it's encrypted now the problem is that the get and the set are using the same encrypted key so every time you do this you're using the same key so the access pattern which you can just add printfs to like the untrusted storage you could print out the access trace of which records the smart contract is accessing if you just do this in secret which is what snip 20 tokens do or in Oasis which is what the erc20 demo in Oasis does but you know it's not recommended that you do it that way but it's just what the you know example code does it leaks the sender the sender is already leaked for like paying gas but it leaks the receiver as well which isn't great and it's like not what it's supposed to do right Monero and Z cash are designed so that you don't reveal who's receiving the tokens all right but if you just do the like direct thing um with secret and Oasis without doing something extra like the Oram that we'll be talking about later that leaks the receiver so that's the big issue with that in general oblivious Ram is needed because your enclave is just a processor has like a little bit of memory on I mean they've got pretty big caches like I think you have like many megabytes of data of memory on you know the Intel chip but it's not like you know your gigabytes of RAM so the interaction between the CPU which is the enclave and your RAM which is part of the untrusted world goes over um the memory bus and the untrusted operating system is actually in control of the page table so there's a tool called sgx Step which is not a bug in sgx it's not an attack on sgx but it is a library that all the attacks on sgx make use of and what sgx step lets you do is set the interrupt to like infinitely small jump into The Enclave to let it run for a bit we're going to get a more cast iron things you can't use them with ceramics there you go that was a hacker right there all right where are we that's jacked up so that's jackstep set the timer to you know interrupt zero Step Into The Enclave The Enclave runs one instruction that gets interrupted now control goes back to the untrusted operating system the other thing sgx step does is it kills all the page tables so all of the memory is unpinned so now the operating it ran one instruction and now the operating system gets a page fault so without modifying The Enclave you just have to modify your kernel module you can output which page of memory is being accessed by each instruction run by The Enclave so that's it's not leaking the exact you know record in memory like the to the byte but it is leaking you know which is being accessed to the 4096-bit page so um uh like Suave right now is loading um I think that's the right name for it I don't know Geth Builder sgx whatever it um you know loads the whole state into like virtual memory and then like runs transactions on it instead of going to disk for the storage it is going to memory um but that's going to leave an access pattern at least if you try to do like the interrupt thing and try to read the you know page faults there it's going to be leaking to the access pattern that you can print which part of memory is being accessed whether that's enough to do Mev or not not a Suave I don't really know but that's just the thing you should be aware of so I mean my message for now is that you know there's a need for oblivious Ram oblivious Ram is like hand in hand with design of sgx this is true only like old research papers on stuff to do with sgx they just go hand in hand um but apparently like people haven't heard so much about o-ram yet so that's kind of one of the goals to correct things by um this all right no I've definitely used up all the time so I'll probably stop there 
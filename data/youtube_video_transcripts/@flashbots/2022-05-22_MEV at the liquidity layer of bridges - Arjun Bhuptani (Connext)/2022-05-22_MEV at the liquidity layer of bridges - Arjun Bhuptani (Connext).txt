[Music] um hi everyone my name is arjun i'm one of the founders of connext this talk is about chain maybe at the liquidity layer um what it's really about is uh how to or how not to build a cross chain deck so unfortunately i got front ran by james on that one and maved again before i start this talk um i think the the reasonable disclaimer here is that it's super early this is actually probably the first time in any formal setting that people have talked about for crosstown muv um we have all individually talked about it separately and and thought about it in our rooms by ourselves and and it's very unclear at this stage what that collection of thoughts will lead to so rather than try to impose some sort of taxonomy um i decided with this talk to have much more of a thought experiment approach which is i'm going to try to take this theoretical problem of how do you build a cross-chain dex um and uh and uh and just try to examine what it looks like to attack the system from an mev perspective based on the type of construction that you have so first question how do you build a cross-chain amm or cross-chain decks um uh i think the first thing about this is that the the notion of a cross-chain decks or cross-chain amm means different things to different people because there's actually several different ways to build this um and so instead of doing that i'm going to change that question from uh into how do you go from x asset on one chain to y asset on another chain it's just a much easier problem to think about effectively and ideally without ridiculous changes in pricing um now when most people think about this the first thing that they think of is you know just an existing amm construction where you have one pool of each asset and then you just have instead of having all of that happen on a single chain you have one pool of each asset on each chain um of course this makes sense right because you're like i don't want to want to minimize capital usage i want to make sure that i don't end up with duplicate assets on every single chain that i have to now deal with but this also has some problems because you're making some very important assumptions about about distributed systems and about cross-chain communication here which as we'll see are kind of bad so the big assumption here is that with amm pricing you are taking the price or the state of a pool on one chain or i guess if considering that this is on a single chain the state of a pool in one asset at a certain time and then the state of a pool of another asset at the same time and you're using those two things together to determine your price um so in the cross chain case you're taking your x pool state s0 at the initial time you're pushing it across chains and then by the time it gets across chains you now have the state of pool s0 xs0 at time t1 which means it has taken some time for this message to go across chains of course because blockchains are quantized it will take at least one block um and as we know now you have the wrong state on the receiving chain and of course that data is garbage um or in this case a very small poop i couldn't figure out how to resize this um uh why is that a problem uh everybody has seen this graph and uh and at this point it's been beaten to death but this is the great great like the best kind of like straw man example that we can come up with um in an x y equals k a m curve your assumption uh of course is that k mathematically is a constant this assumption is kind of violated in this case because you have the state of your your initial liquidity pool at a certain time and the state of your second liquidity pool on the receiving chain at a different time and you're mashing these two things together and and now it's no longer clear whether your k is actually a constant um and this is actually compounded by ya boy mev bandit who may try to manipulate the prices of these or manipulate the sizes of these different pools to create something that looks like this this is obviously garbage uh you don't want this to happen to your mm curve because more confusion along pricing means more opportunities to extract value so what can you do about this well a lot of a lot of chains a lot of different kinds of cross chain bridge approaches try to take the approach of having an oracle off chain so now you have instead of trying to synchronize all of the state of these two pools on a single chain uh you try to synchronize them off chain um now in this case what you're basically doing is having this oracle entirely storing the data for all of the pools at all of the times and then pushing in the pricing into uh into your liquidity poor into the the receiving chain contract um how you do this is slightly different in some cases uh oh i have two of these slides all right in some cases uh this could be a more kind of decentralized network but in the simplest possible case it's coinbase um i think the problem with this approach of course is that you are introducing a massive amount of trust uh you are basically saying that everything associated with the system now exists off-chain decentralizing things off-chain is a giant pain and it's it's ideal to avoid it if you can and so generally we consider this to not be a great approach of course there's some exceptions people are doing some interesting things with decentralized order books but i'm going to leave it at that because i only have a certain amount of time um can you actually sync the state of these things against each other with on-chain pricing like you kind of want to with dexes today um unfortunately turns out you can't because this is a two-party distributed system and anybody who is in distributed systems knows uh two-party distributed systems are awful and they don't actually have a solution there's no way to synchronize state between two parties in a distributed system and this is called the two generals problem um it's it's you can formally prove that this is not possible so what about the other approach that james suggested what happens when you have a bridge to sorry bridge to decks or decks to bridge or a bridge to dex to bridge approach i've chosen to only show the bridge to dexter bridge approach here because it's the most kind of complex one but of course much of this applies to the approaches other approaches as well now in this case it's kind of nice because you don't have state synchrony across chains you have uh individual pairs of amms with their own individual on-chain pricing on each separate chain and what you're pushing around is the asset itself instead um hop does this we kind of do this and there's a bunch of other like projects that kind of are starting to think about this um now of course as james mentioned this 5x is your potential mev attack scenario so let's just ignore that for now and we'll get to that at the end um uh the cool thing about this and i i think this is me just being liking dynamic equilibria systems is that you have this this kind of system where um the thing that keeps pricing in check across chains is not some mechanism some on-chain mechanism where you're where you're guaranteeing that the pricing has to be the same but just now market effects you're just assuming that people will arbitrage the system any sort of opportunity that exists between these two assets can be arbitraged away to the point where these prices actually make sense against one another now of course this is not always the case um and this is where things get kind of complicated what happens if it costs either a lot of time or a lot of money to to arbitrage these two systems well now the variance between the two systems um i couldn't figure out a better way to represent this than to just put little dollar signs everywhere but um the variance between these two systems changes very dramatically um this happens in prod and it actually happened last year with with the matic token uh because the polygon bridge ex so matic's token was the only token on polygon bridge that actually requires the full like seven day exit window and uh and so there was a period of time last year where like the difference in price between matic on polygon and then on ethereum was like over 10 to 20 percent it was kind of wild and no one was actually able to arbitrage this thing because there was just no capacity to bring that liquidity over fast enough so eventually it got armed away but that was only because a bunch of exchanges added support for matic really quickly to try to like close the loop on this um complex not what you want this actually gets even more complex when you think about uh again ya boy and this is where we get into the 5x mev case where of course you have the mev associated with doing this swap on each chain individually because each of these things are their own individual amms but now you also have to think about what happens when uh someone sees the initial transaction and then sees that you're making a bridge transaction to your receiving chain uh and now on the receiving chain you're planning to do another mm swap well uh the the whoever is trying to front run this attack now has however long it takes for the message to go across the bridge and then of course also however long it takes for you to do the secondary transaction on the receiving chain um which is also kind of um now there are ways to deal with this uh james touched on this this is something that we've explored as well which is uh you hide the transaction information so you can you can basically do the the amm swap on the sending chain uh and then have call data uh that is like encrypted and hashed uh and you you emit the encrypted data in an event and then you require that whoever's kind of completing the transaction on the receiving chain decrypts the data prior to submitting it it's really complicated as well but there are ways to potentially shield the data that is going over the bridge and that limits the the the risk to just two places where you can brief front run uh and of course that means you're only only being front rand in the ways that you are already being front ran hooray um uh mev and cross chain stuff is really terrible um it's a much darker much more foresty forest uh and that's why i i said that this super still super early uh you if you guys are interested in this topic definitely come talk to me but you know i think in general there's a huge space to make a mark on research in this right now because nobody really understands it so um what can we derive from this set of ideas that we went through in this talk um not any sort of formal structure whatsoever but we can see that some types of construction constructions for cross chain applications yield worse types of mev state synchronization is bad you should really never try to do that it's fundamentally not actually possible and so if you try to do that you end up in kind of weird situations which i'm pretty sure there are a couple of production amms out there that are doing this i'm pretty sure synapse is doing this um and if they're not doing that then they're doing completely off-chain pricing which is super custodial but if they're doing this on chain i'm reasonably sure that's why they have extremely high slippage um don't do this uh conclusion number two um this core model we've been talking about it was was around x's but you can actually send this to any sort of application where you're thinking about liquidity across different systems because the the pricing of that liquidity still matters so you know you have uh even if you're not dealing with the dex and you're dealing with like cross chain ave if you if you create situations where you're borrowing on one chain and lending on another and i don't just mean that from a user experience perspective but i mean that from an actual contract's liquidity pool perspective synchronizing the state of your pools across chains now introduces variance in the size of those pools which means now your protocol is sometimes potentially operating as a credit protocol which is bad so now you have to actually increase the amount of gap between the amount like the borrowable funds and the amount of liquidity in your system because you have to account for this um and you have to think about the possible like you have to set limits on the max amount that can be borrowed on a certain chain because you have to hedge against this risk could this mean uh we end up in a world where rather than having fragmented liquidity pools across chains which by which i mean you have one pool on each chain you end up in a lower capital efficiency scenario where you actually have replicated instances of d5 protocols and then just synchronize via arbitrage between them probably um at this time the only other approach that we've been able to think of is like having uh semaphores in your liquidity pools which is really not what you want to do um basically that means you have locks on your liquidity pool so you end up fragmenting your inside of your liquidity pool you fragment subsections of it this is how uh stargate works for instance um which is incredibly complicated and that complexity leads to more edge cases and potentially more mvp um and then of course last conclusion it's still early squared uh again if you have any ideas about this or even an interest in this help us help this community try to understand it better it's so so so early and it's a big open problem and there are tons and tons of people will fund your research cool that's my talk thanks everyone um do i have time for curate okay questions wow that must have been a good time okay hi hi um it's not super related i guess but uh the previous guy talked about atomic swaps and how they're not feasible because or he didn't like them because this denial of money attacks and stuff like that do you have anything to say on atomic swaps um yeah so um uh for for context james and i work really closely together um k'nex actually builds on top of nomad so we're sort of like a liquidity layer that sits on top of them and then we also allow for a lot of like uh we mitigate some of the trade-offs of nomad and nomad mitigates some of the tradeoffs of our current stuff the way that our current stuff works is using atomic swaps um there i mean i don't think like okay the way that we approach it is that we decided not to deal with pricing at all in our atomic swaps and they're always one-to-one assets um and so you're not really doing like a cross-chain decks in any way but we're basically doing one-to-one assets across chains and then swap on an amm um and and that does seem to constrain a lot of the like risk quite a bit um at the same time the user experience is  like that's a big part of the reason why we're doing a network upgrade to like use nomad instead of using our current system because um even in the best possible case we've we've really like gone out of our way to optimize the  out of this it's like even in the best possible case you are still assuming that the user is able to one be live to like sign a message or produce some sort of proof on the receiving chain to like unlock their funds um and in some cases with some chains that transaction can take like ages because just got stuck somewhere um and two you're also assuming that the person who is executing basically like facilitating the swap uh who is the liquidity provider of that swap will stay live between the time at which uh the user decided to work with them and they did the transaction on chain now initially we were like okay that's not that bad like we can it's like in the optimistic case it's like two minutes um two minutes of a liveness condition not not too bad right when we were we were thinking maybe we can do slashing conditions to to penalize routers that go live or our our connects routers being our nodes that go that go offline between the time at which they committed to making a transaction and then doing the on-chain transaction as it turns out even two minutes of liveness is really really bad like as you as you get to larger and larger numbers of transactions that edge case that was like 0.0001 percent starts happening like once or twice a day and it's a horrible user experience each time so um i think i think that's the that's the general reason that people have moved away from like pure atomic swap models is that like you just end up in these kinds of like sticky situations around the liquidity lockups and signatures and on-chin off-chain dependencies that people just want to avoid hello hi uh so my name is so i'm gonna see if i try uh if i understand this correctly so um connects uses routers that exist on different chains right providing liquidity um so my my question is is it possible for these routers that exist on different chains to be their own mev actors whenever they see this uh bridging happening um yes uh i think any any anybody in the system could be an meb actor i think routers um so with the way that our old system works it is possible for routers to to get some amount of market information prior to the rest of like basically information asymmetry um which is bad because that's that's how you create like a select group of actors that is really benefiting from this um in the new system that no longer exists now everyone has information symmetry about how easy it is to front run so it's slightly better but of course it's still map vulnerable again no solutions here only problems i think i have time for one word one more question cool awesome um thanks everyone if you have any other questions or think of anything come find me i'll be i'll be around thanks [Music] 
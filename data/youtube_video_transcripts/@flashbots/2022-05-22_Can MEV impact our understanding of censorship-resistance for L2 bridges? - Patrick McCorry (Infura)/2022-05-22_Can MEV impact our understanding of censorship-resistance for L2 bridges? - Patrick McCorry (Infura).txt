[Music] and today i'm going to talk about more of a fun topic you know can we use mv mev strategies the impact our understanding and what it means that for censorship resistance and since this is a cross-domain you know section i'm going to apply this to layer two protocols and it's more of a fun topic and an outstanding research question so there's no guaranteed answer here when i have lots of disclaimers throughout this talk so there's three sections to the talk one i'm going to briefly introduce the idea of mev although i'm sure most people here are already aware of what it means two i'm going to talk about layer two bridges and how they work and then eventually i'm going to you know ask the question or is there a risk of censorship so mav strategies now let's just say alice signs a transaction so you'll broadcast it to the network and she wants to make some money from this transaction as most people here are probably aware when you send it to the peer-to-peer network there is this dark forest these searchers these mev people who just want to steal all of your money so they'll take this transaction they'll inspect it and they'll work out if they can you know apply some some strategy to steal all of your money or all of your profit and there's three ways to do this and also i stole this infographic from gnosis see if they've got a great picture and i've just chopped it up for my own use so the first approach is front running and the basic idea there is that i see your transaction i can copy i can paste it i can broadcast it myself and if i get my transaction executed before yours then i can steal all of your profit and typically this would mean the user's transaction will feel and you know the mev searcher stole all of your money or all of your profits sorry not your money the second approach is back running so let's just say you're a wheel you want to buy a lambo you need to trade your ether into some usdc and you i don't know you treat it like a million dollars and then you move the exchange rate someone could send it send a transaction get an arbitrage moment and obviously profit from your transaction that way as well and the third approach is this sandwich attack so let's just say you're going to perform a trade you set five percent slippage so either you get a dollar or you get a dollar and five cents if the mev searcher's good enough they can get their transaction in before you and after you and extract out your slippage and effectively steal that five cents from your transaction so you always get the minimum price now that's like the basic idea behind some of these strategies and why does this work it works because when alice signs her transaction see signs of thinking it will do a but by the time it gets executed it ends up doing b because the action really depends on the state of the smart contract at the time of execution and of course who controls that well the blog producers do they get to decide the order of transactions and of course who gets executed before who now most people when you think of muv you think of people in their bedrooms you know readying these bots trying to make lots of money and sending it off to the block producers using flashbots today i want to i mean i guess every talk also has this map to model which is why i want to talk about you know censorship resistance can we leverage mev for something else and this is really good i was watching this last night actually this podcast on uncommon course it was perfect timing for me and charlie has this wonderful phrase in it but the basic idea is the following what some searchers do if they see a trade hitting uni swap and let's say it has one percent slippage and it will cost a few dollars to move the price and fail their transaction some searchers will do that they'll make the user's transaction feel because it only causes a few dollars with the hope they'll reissue the transaction with more slippage then they can just extract more value from that transaction and that's interesting you know by failing the user's transaction you nudge them to go do something else where you can make more money and in a way that's a form of censorship because you forced someone's transaction to fail and they were unable to transact another great example and i don't know if anyone remembers this raise your hand if you remember vitalik dumping the sheba tokens look at that yeah it was really exciting to watch i was watching this at ether scott and tell my girlfriend about it she thought it was nuts but um what was interesting though was that as he's dumping these tokens some of his transactions started to feel and you can see there's four field transactions here now i've always believed i mean i i guess other maybe there's better data for this but my understanding was that mavbots noticed vitalik was dumping these tokens and they just you know applied their vmev strategies and they forced his transactions to feel because his transactions failed he couldn't dump his tokens and he was effectively censored by the dark forest now i believe and we can ask him he was around in this room not in this room at this venue i think he used cow swap to get around the dark forest or flashbacks and so when we think of ethereum the way we get censorship resistance is two following no two assumptions one there's one honest block producer out there who will take your transaction and put it in a block and that block producer is basically guaranteeing your transaction will be executed as intended the second assumption is that there's an honest majority that the other block producers will not fork away that block you know the offending block that includes your transaction but for the most part we just need the one honest party to include your transaction and guarantee his execution so that's how he got around the dark forest and so can mev be used for censorship well it looks like it can but then if you're a researcher because this is what i haven't done yet you know the following questions are you know what category of transactions can be any viewable you know which ones can be censored a simple payment probably not a trade yes withdrawing your liquidity yes the other question is what capital do you need to perform the censorship you know if i need to move the price of if the uni or if the dollar do i need a million dollars to effectively move the price or just a few dollars like in the sheba example and how much will it cost the attacker to keep repeating this attack you know if you have to keep help paying the uni swap lps then maybe it becomes too expensive over time i don't have the data but that's really easy to quantify for anyone who's interested and also what's the risk the to the attacker if i you know i fail someone's transaction and i move the price what if someone else in the dark forest is back runs me and then arbor charges me and steals my money as well you know really it's risk-free if you can try to sandwich the attacker but what's the guarantee of some which attack works so disclaimer you know this may not actually be a problem whatsoever it may turn out to be a dud or a dead end but i think it's an interesting observation that's worth investigating okay so what's mav strategies and the idea that there could be censorship what about the l2 bridges so uh you know raise your hand guys if you've ever transacted on a roll up oh look at this i hope you've got the little monkey nft for arbor trim that's a really great avatar pfp a pefp but under the hood for all these roll ups what we've really been doing is just bridge engineering we've just been building a bridge and conceptually there's this off-chain database that has the account balances and the program state and you can consider this the liabilities of the system it describes all the balances that people are owed and then you have the bridge contract on ethereum that holds all of the assets you know so some of the bridges today hope billions of dollars and really the bridge contract needs to be convinced that this database is alive or well intact and it's always making progress and that's sort of the trust assumption you know what roll-ups you're trying to solve but the question is although i guess i'm really need as a question can we transact on an off-chain system without actually trusting anyone to protect the database and that's what these validating bridges are building the rule ups you know the orbit trims loop rings ek singh starkware it's all about removing the trust of the operators and we only have to trust the bridge of our funds and the guarantee the integrity of that database okay so why is this important so let's deep dive first and have an understanding of how these validating bridges work under the hood so we're going to cover the agents and overview of the validating bridge and finally the security properties which will be important for of course mev so the agents are the following we have the honest user alice alice likes moon cats you know she has a moon cat on the roll up and she wants a transact we have the sequencer who will take or he'll take you transactions from the user and order the transactions for execution and then we have the executor who will take the order transactions and then execute them and convince the bridge that this is indeed a valid update to the database so at a high level we have alice and alice wants a transact on the system she will deposit funds into this bridge contract and then bob comes along you know hi bob and alice wants to send one coin the bob on the layer two system so she'll send a transaction she will give it the bob or sorry so give it to the sequencer and then the sequencer can notify bob to say bob you're going to receive one coin but it's not yet confirmed it's not yet final the sequencer just holds a copy of it then over time we wait until there's more transactions and eventually the sequencer will to kick the list of transactions that are pending order them and send it to the bridge contract and the bridge contract is responsible for finalizing the order of execution for these transactions then over time we you know they're pending their order but they're not yet confirmed or final and then the executor comes along he'll take the ordered list of transactions execute them with my wonderful 1990 animation and then he'll post a little checkpoint to the bridge with some indisputable evidence that this is an act no this is the new state of the database is a valid update according to those transactions and this just happens continuously the bridge will order transactions and then of course it will then you know receive the checkpoint and confirm its execution so what are the security properties that we care about then for these bridges well the ultimate goal is that we want to protect the safety and the liveness for the off-chain database and there's three goals we care about there one is data availability you know the bridge contract needs to be convinced that all the data is publicly available for anyone the access the second property is state transition integrity you know the optimistic versus the zk rule ups the bridge needs to be convinced that all updates to the database are valid now the one we care about is censorship resistance allah the bridge needs to be confirmed and it needs to be the bridge needs to be convinced that alex can always transact on the system even if all the operators are malicious so all we care about for this is censorship resistance okay now how would you get censored on a rule up you know it's fairly straightforward alice will give the transaction to the sequencer the sequencer will say no sorry alice you're not allowed to transact you're stuck forever hahaha so what's important here you know what is the rule of the sequencer and the executor for censorship resistance the sequencer has absolutely nothing to do with censorship resistance whatsoever the sequencer's only job is to offer the fast path to execution you know this optimistic confirmation it's really the executor and we have to assume there's one honest executor which could be anyone here on the bridge contract the bridge contract can accept transactions from the user and order them for execution and then they'll eventually get executed now this is where we start getting to the interest in part i know that was a lot of background information so let's consider how censorship resistance is implemented so in the bridge you know there's two transactions that have been confirmed and finalized transaction one on transaction two alice sends the transaction to the sequencer she gets ignored she can then send it to the bridge contract and the bridge contract will order this for execution then eventually an executor can pick it up and then you know finalize his execution we call this the slow path you know the slow path to get your transaction confirmed and processed so how is censorship resistance implemented here it's different to ethereum or at least to how we solved it before all the bridge contract guarantees is that a transaction will eventually be ordered for execution it only guarantees ordering so now we understand mev and we understand the bridge contracts so is there a risk of censorship resistance or censorship risk so i still see an ad committed out there actually so two body missed this because this is his code this is the arbitrary bridge contract um i mean i mean i i don't pick i have a disclaimer here i'm not picking on arbitrary but they're one of the only projects he actually implements something that is censorship resistant so that's my only example out there um anyway so in their contract in their bridge the sequencer has priority the sequencers transactions will always can always be ordered before the users and they have like a 10 minute window or such they get the sequencers transactions in okay so let's have a visual example of this so what would happen oh awesome so what would happen is that the user will submit transaction three and then some time afterwards you know the sequencer can look at that evaluate it and then they can submit transaction five and four and inside the bridge it will execute the sequential transaction first before the user's transactions okay now why is this important why do we care about this the sequencer is guaranteed that they can always front run every user transaction and also back run every user transaction put another way they are guaranteed to perform sandwich attacks if any user goes via the slow path of course when you go into the detail maybe there's like a list of user pending transactions and it's a bit tricky but for now we keep it simple and say they can get this guaranteed so if vitaly was doing this in orbit trim and he started using the slow path because the sequencer centered in there's no cow swap that conceive you now because you're posted to the slow path and then you know anyone could give the sequencer the the transactions to then fill your transactions because they'll always be executed first before anything in the bridge so what can we do about that you know can we fix this for layer two so the sequencer or anyone using the sequencer can abuse any transactions that are submitted by the the user so one way to think about it is that you could when the user submits their transaction maybe the bridge is forced to make sure this transaction will always pass you know it can never be a field transaction but that's not really possible you know can you think of any problems of that if the user submitted a transaction and it always had to pass now the issue there is really you know the bridge only receives the transaction data it doesn't evaluate the transaction so it can't actually guarantee this will be a successful transaction and you could end up halting the entire system if it does feel but you can't allow it to fail so the only real way to solve it for my understanding is you would submit the transaction on a proof that psn the previous checkpoint this is indeed a successful transaction so maybe it's only relevant for the zk rule ups but generally i don't have a better solution to it that's basically the end of the talk you know my future work would be you know based on these observations i would try to work out how effective is it you know is it possible to center transactions in a way that's financially effective or maybe is it done and it's a dead end i don't know but maybe a phd student would want to take it up and evaluate it a little bit further so that's basically it and i have a little bit time for questions from the looks of it so awesome gg you guys gm [Applause] hi hey patty uh thank you for the presentation uh just a question or maybe clarification on this final point you gave i think it's less about guaranteeing that the transaction will result in like correct execution but mostly about avoiding l2 reorgs and the sequencer being able to give fast confirmations because whichever state you're confirming through the forced inclusion path it needs to always be re-arc resistant for the one side so that you know you're acting on the correct tip of the chain and also so that the sequencer doesn't like know what to build upon right so i guess in pos you can maybe do different things but i think it's less so about ensuring that the result of execution will be correct and that the transactions for example well-formed yeah so maybe the summarizer is saying it's if they get a guarantee here you should try to guarantee the sequencer can't really interfere with it maybe it gets ordered then it's ordered but the trade-off is that you will lose the fast finality off-chain because maybe someone front runs a transaction they just give to the sequencer and messes everyone else yeah so i would challenge someone outside and there does seem to be this trade-off between offering a really good user experience and trying to minimize mev so you know i probably stick with the instant phenology right now you know it's probably a better trade-off any other questions i think there's time for one more that i put a timer on uh cool so i think we're safu then so uh gm everyone i hope you enjoyed this and i think james whiz is up next but i can't say oh there you go there's just golden hair so come on up [Applause] [Music] you 
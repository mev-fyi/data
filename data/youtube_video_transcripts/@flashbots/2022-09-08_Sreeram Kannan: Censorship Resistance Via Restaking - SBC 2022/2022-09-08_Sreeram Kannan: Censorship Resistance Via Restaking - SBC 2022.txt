uh i'm sriram uh from eigen layer today i'm going to talk about censorship resistance and decentralized relay by our restaking okay let me get started um what we're going to propose today is a mechanism to do mev management using eigen layer i'll explain what eigen layer is as we go on this talk is joint work with shavik dave and gautam anand who are both at the eigen layer project the rest of the eigen layer team is also uh shown here and special thanks to donker artface and alex obadiah for feedback that improved the talk all right let's start with what is mev boost and why we want to improve it so the core aspect of mav boost is to ensure that proposers stay decentralized core aspect of meeb boost is to ensure that proposes stay decentralized while being able to extract muv at the best possible market rate and how it accomplishes it is by having three different players block block builders who collect transactions and create new permutations of these transactions in which they can potentially extract mue there is another entity called the relay which takes transactions from builders and helps them send it to the block proposes block proposals are what we would normally call validators in the protocol so in the ethereum protocol there is a bunch of nodes who have staked and they are able to propose blocks that's a block proposer so the three entities are block builders who are creating the blocks relay who's helping connect the block builders with the proposers and the block proposers the relay itself is a doubly trusted entity the relay is trusted by the block builders and the relay is also trusted by the block proposers okay i'll explain how mev boost works now okay block builders take transactions from either public mempools or private order flow that they may have and create blocks they send such blocks here called execution payloads to the relay the relay collects these blocks they check whether the bid of how much mev the builder is willing to propose to the proposer is it computed correctly is the block valid and check after checking these two conditions the relay stores the block okay till now the block builder has not revealed the block to the block proposer why we haven't done this is if the block builder reveals the block to the block proposer the proposer may engage in mev stealing you can they look at the block and say hey here is a nice mav opportunity let me catch the mev instead of giving it to the block builder you don't want such behavior in the market so you don't directly expose the block from the builder to the proposal so the relay is acting as an escrow it's acting as an escrow the block comes to the relay and the relay only sends the header to the blog proposer the blog proposer blindly just looking at the header and the bid selects the most valuable bid why is the block proposer able to do this it trusts the relay the block proposal trusts the delay so the block proposer says okay if the relay says this has 28 mev which is being paid to me that's pretty good so i'm gonna take it the blog proposal signs the header and returns it back to the relay the relay says okay now the block proposer has committed to signing on this block because it is signed on the header i'm going to send the block to the block proposer proposer says okay now i got the block i can send it to the network so all of this activity is happening off protocol right it is not happening inside the ethereum protocol it is happening off protocol as far as the protocol is concerned somehow the block proposal proposed the block that's all the protocol knows okay and that's the core architecture of mev boost it is added on to the core path of how blocks are being made it is optional block proposers can choose to exercise this market may not even accept the highest bid may only choose to accept bid from certain builders who operate in certain ways all of these are parts of the degrees of freedom for what the block proposal does okay so before we go there let's first see what is the benefit of this system the benefit of the system is any block proposer can participate in this market and therefore get access to the best possible mav opportunities since all proposers have access to roughly the same mev opportunities they are all making money at the same rate this keeps block proposers decentralized because you don't have to collude you don't have to go and be in cahoots with the block builders in order to actually make money you have a fair transparent open market on which you can actually do this transaction this is very important because one of the core value propositions of ethereum is decentralization and what does decentralization useful for censorship resistance because if you do not have a decentralized committee you cannot be sure if you do not have a decentralized network you cannot be sure that transactions are all getting included as as they came in so however there is a problem mav boost ensures that block proposers can remain decentralized but mav boost does not ensure that the decentralized proposers can exercise any agency so suppose i'm a block proposer and i get a bid from the relay the block proposer cannot exercise an agency to add on few transactions or do anything else after it has signed off on the header the blog proposer continues to have agency to not participate in the market they can say no i don't want to do mev boost i'm just going to simply propose transactions that came in the public mempool they can do it but what they will be giving up is the economic incentives and the economic opportunities available in the mav market they have to choose between the economic opportunity and maybe their ideological position so what this does is it makes it possible even though the proposers remain highly decentralized due to the fair and open market in which they can participate in the mav opportunities block builders and relays are fewer far fewer in number and may be located in jurisdictions which are extremely technologically advanced so it is possible for the few block builders and the relays or even just all the block builders or all the relays to fundamentally engage in censorship whether such censorship occurs for extortion for regulatory reasons or otherwise there is a possibility that such censorship can occur so why did this limitation arise in the first place why didn't we design mev boost to make sure that transactions can be added even after you receive a bid maybe you receive most of the block from the block builder and you can still add a few transactions at the end why wasn't this possible it's not it's it's not that this was not possible because you know the team didn't think carefully through this it was not possible because mev boost was piggybacking on a core feature of ethereum slashing what is slashing so if you have a given slot there is a block proposer for each slot if a given block proposer engages in signing two headers for the same slot such a block proposer can be slashed this is a core protocol feature of ethereum so equivocation which is just the fact that you're signing two different things at the same block number is considered penalizable in ethereum so the whole mav boost architecture had to work very hard to shoehorn itself into the one slashing condition available if you double sign a header you will be slashed that's the root of trust that mev boost is piggy backing off off that's why the block the relay release the block after getting assigned from the header because if after that if after that like for example here if you get a block block header from the winning builder and you go ahead and propose a completely different block header you will get slashed so this is the core trust that mev boost was able to extract and since this trust is not programmable since this trust is non-programmable you just have the one slashing condition of ethereum if you double sign a block header you will get slashed so that is why mev boost which needed to piggyback on the slashing condition could not make it more flexible to actually perform block building okay so can we somehow modify this architecture to add content to the block to enable the proposer to add content to the block without requiring a governance upgrade on ethereum of course if ethereum upgrades the protocol then clearly it can incorporate any feature that we're talking about into the protocol pbs proposal builder separation is a proposed path for integration of some of these mev boost ideas and powerful censorship resistance into ethereum what we're going to talk about is can we do something in the meanwhile protocol upgrades take time they have to be carefully varied to do this i'm going to introduce a concept that we've been working on also the name of our project eigen layer eigen layer is the ethereum restaking collective what does it mean you have block proposers are staking normally in ethereum they take their money thirty to eat and put it into the ethereum's taking smart contracts when they stake their money in the ethereum's taking contracts you can specify who is allowed to withdraw this money and this is called a withdrawal credential and you can set the withdrawal credentials to the eigen layer smart contracts which are eigen layer has a series of smart contracts on ethereum you can go and set your stake to be withdrawable by the eigen layers smart contracts what you're doing is you are fundamentally transferring some power instead of you controlling the power to withdraw whenever you want now eigen layer smart contracts have the power to withdraw and what you can do inside the eigen layer smart contracts is specify which other services that you're opting in to provide eigen layer is a mechanism by which you can reuse your stake which are staked in ethereum to do other things to provide validation for other kinds of services and when you opt in you can specify which other sets of services which subset of services that you want to actually provide service for okay that's the context why is this relevant to what i was talking about eigen layer can be thought of as a meta slashing protocol or a programmable slashing protocol it lets block proposers stakers validators take an opportunity to opt into new services and potentially get slashed in other ways if they violate their commitments slashing is a mechanism by which we can get credible commitments you say something and you don't hold to it you will get slashed okay so what is the core idea that we're trying to do essentially it's very simple we want to make a block where there is a portion of the block which is sent by the builder there is another portion of the block which the proposal creates so you get some bid you accept the builder part you sign off a special message saying if i violate including this as the prefix as the first portion of my block then please slash me on eigen layer that's what you can opt into and what that means is you now have freedom to include whatever other transactions you want in the rest of the block so let's just go over the flow again block builders come up with a block they send the builder part to the relay the relay basically some kind of a commitment of this builder part it stores the transactions and sends the merkle root of this builder part to the block proposer block proposer sends selects the highest valuable bid here we have another feature on eigen layer is mev boost plus which is that this block proposer can also commit to what we call as a backup block in case some assumptions are not met the block proposer is saying if i don't propose what i was supposed to propose here is an alternative that i've pre-committed to and i'll propose this pre-committed alternative so it has a backup block in case some of the process fails and it signs the merkle root of the [Music] builder and the commitment to the alternative block it sends this to the relay it says okay now i have some assurance that the blog proposal is going to behave how does it know that how does it have the assurance because it has this signed message from the blog proposer committing that they will include this builder portion so now they send the builder portion out the blog proposal takes it and says okay i got the builder part now i can create the rest of the block and send it out so fundamentally back to the two-part architecture there is a builder part and a proposal part and essentially you are committing as a block proposer that you're going to include the builder part and you can add on whatever things you want at after the builder part you can ask the question now how much should be the builder part and how much should be the proposal part should it be 50 50 it should be 80 20. there is a very nice answer to this which we got from tonkrag who noticed that we do not have to commit to a prefixed ratio you say let the builder build whatever size they want let the builder build whatever size of the block that they want the proposer can add on an arbitrary if there is any space in the block the proposal can add a add-on to the rest of the builder part you may wonder why would the builder not fill the block all the time because it may be profitable for the builder to do it but the reason they will not be able to fill the block all the time is how the gas fee structure works in ethereum due to 15 59 the fee keeps escalating every time the block is full so if every block was full the price would go to infinity so blocks will not be full they will be equilibrating around half the block size half the block maximum block size so there is always extra space at least on an average there is extra space in the block and proposers can exercise the freedom to sneak in new transactions into the block okay so that is mev boost plus and what we get from this is censorship resistance fundamentally what we're getting is block proposers can exercise their agency to include whatever transactions that they want in addition to the transactions that the builders and relays are giving that all right now we we saw this but there are also other things i'm going to skip past it but the main thing that we do not have is we're still trusting the relay relay is still a central point while the relay is not a point of failure for censorship resistance the relic is still trusted for some of the other things for example the relay is trusted for data availability can we somehow get rid of this can we decentralize the relay instead of having a single relay can we have a decentralized escrow the relay was performing two important functions it was certifying to the builder that they are private their block remains private till the proposer has signed off on it it was also certifying to the block proposer that the block remains available can we somehow do this and then decentralized escrow so what the block builder does is it takes its block creates some kind of like a secret shared version of this block splits it up into many chunks and encodes it in such a way that no one chunk exposes information about this block and sends it to a decentralized escrow there are many nodes it sends one chunk to each of these nodes so the each of these nodes then sends back a signature saying that they have received a share corresponding to this commitment that goes back to the block builder who then signs off on that commitment saying that hey i have a certificate from the data availability quorum that i have dispersed my data to this quorum you take an aggregate signature and send it to the block proposer block proposer then says okay i'll choose the highest possible bid i can get which also has a certificate from the da layer and i'm going to send it send a signed message back to the dealer once the da layer sees the data availability layer sees the signed message for a specific header they then release that particular block they release the chunks of that particular block its secret shard which means everybody holds some portions of the block but together once you get all the different chunks you can reconstruct the entire block and then the block proposer goes ahead and proposes it okay so essentially what we did is we took this one entry called one entity called the relay and fragmented it into many entities who have to work together in order to break these guarantees so this is we call this mev boost plus plus which basically has two features it brings censorship resistance back to proposes it allow proposes to add content to the block but it also makes sure that you do not have to trust a single entity a relay to actually perform this task but we do need a new entity called a data availability layer where is such a data availability layer we have built one called eigen d a eigen d a is an ethereum restacked data availability layer built on donk sharding downshotting is the data availability mechanism proposed for upgrade into ethereum what features this data availability quorum has it is fundamentally a built on eigen layer so it is ethereum stakers who are actually running this data availability service it is a hyper scale data availability layer you can write data at a date rate of 15 megabytes per second which is much higher than any existing service as well as proposed upgrades in ethereum it has very low node requirements even though the the system achieves 15 megabytes per second each node only needs to touch and download 0.3 megabytes per second so this is how we this is because remember in the previous picture each node is not downloading the entire data it is only downloading a secret chat chunk because each node is only downloading a small chunk you can actually do not need each node to download everything this dda layer is also native network latency because you are fundamentally relying on you have to send the chunks to them and you get the signature back from the network you are not this data availability quorum does not perform any consensus ordering or other extraneous things it only does data availability guarantees and it has very low cost basis the total amount of cost incurred in storing a given data in eigenva is just two times a single node downloading the data it's just two times a single node downloading the data extremely low cost basis even though it's a decentralized system we have very low cost basis and finally we need to support xiaomi secret sharing which people do okay so just going back to this picture i just want to say why you need some of these features because every block builder is getting signatures from the quorum you need this data availability layer to be working at high performance every block builder is committing data into the data availability quorum so this needs to be done at low cost otherwise you will be paying a huge amount of cost because you're storing a lot of builders data which never ever gets used so i can da is a perfect mechanism for doing this integrating it with mev boost okay so that concludes the talk you can use eigen layer to build programmable slashing mechanics on a variety of different systems this is just a starting point and an initial proposal a lot of people have very interesting ideas today morning vitalik mentioned how you can use eigen layer to actually do distributed block building you can have many builders build different portions of the block and integrate them on eigen layer so there are a variety of new ideas that we can all explore together as a community i invite you all to participate in this collective thank you any questions in the couple of minutes i have left thank you very much for the talk i wonder how your data availability layer guarantees availability if you assume a majority or honest and the data is dispersed in such a way that even if half the nodes go down the remaining half of the nodes have enough information in the erasure code it's a mixture of aeration code and polynomial commitments and what if they are not sending the data even though they have the data you are relying on a majority honest assumption if a majority of the nodes are honest they will send the data you can relax this assumption from a majority being honest to only 10 percent being honest by adjusting their ratio code rate which we allow in our layer if you assume a 10 of the quorum is honest you will have the data available but you do need that assumption without that assumption you do not get any guarantees okay so they can be bribed and not shared yes it is that's why it needs to be a decentralized quorum yes okay thanks thank you hello hello how's it going hi logan hello um what's the plan to uh ultimately scale past 15 megabytes per second oh our system basically gets n over two times the per node bandwidth we have 100 nodes 100 by 2 is 50 50 times 0.3 megabytes per second is 15 megabytes per second so that's how we get 15 megabytes per second as we scale this to more and more nodes you will get more and more scale there are some limitations because we have to write these signatures on ethereum we use bls aggregate signatures and some more upgraded methods but there is a limit on how much signature aggregation we can do so these are extraneous to the core data availability layer these are ethereum gas constraints that we have to deal with that makes sense thank you thank you hi um can you talk about the extra returns from staking on eigen layer and like where they come from is it just from the extra transactions that you can include is that the main source each of these new features that people build have some utility like for example the mev boost the builders may pay a small fee for every time they get a commitment so that's the fee that goes to these the uh e3 stakers who are working on eigen layer to provide data availability for example each new service that is built on top of eigen layer can have its own economic model you may pay in a different token it's a free market so stakers can opt in to different risk reward portfolios thus expressing their heterogeneity cool thank you thank you any other questions okay if not uh i'll conclude just by saying one more thing we had a design also for how to incorporate something like a shutter network protocol for including threshold encrypted transactions in addition so maybe i'll just show one picture just this picture is enough you can have a block which has three different portions one portion which comes from free market builder another portion which is a sandwich protected portion from a threshold encrypted quorum like the one shutter network is building and a proposer freedom portion where proposer can propose arbitrary transactions so there is a variety of designs we can build on top of this core ideas looking forward to see how we can work together thank you [Applause] 
great hi and welcome everyone to the bedco sponsor workshop joining us today is thomas who is going to take us through uh his session and with that i will hand it over to him to introduce himself and kick it off thanks emily uh yeah my name is thomas taylor i'm the engineering manager here with the east v5 we call the rapt assets capability but you probably know what is the rapid bitcoin capability um yeah i'll start about uh you know what is bitgo and then we'll give you that here um just very quickly for those that uh don't know and i'm just gonna go to the website here real quick um our marketing site i should say um it goes an institutional uh digital asset facility trading finance we encompass a lot of uh things in in the sort of blockchain hemisphere we don't just support ethereum but we support uh i think it's uh now up to 20 uh blockchains 400 tokens um you know we look to be a multi-asset sort of uh full suite for for our customers who are typically uh you know um they could be like mom and pop shops institutional investors uh hedge funds um something like things those sort of things um the thing i'm going to talk about today is sort of our uh wallet sdk and then how to interact with that you know what the stuff we built on top of it to talk about that very quickly yeah here's some um you know sort of marketing detail uh you know power 20 of all launching bitcoin transactions 40 billion dollars in assets under 25 billion transactions a month sort of gross you know across all coins it's not just carrying everything um and uh you know some of the other things i mentioned tokens and trust trucker we have insurance now bonds as well so if there's an incident um in a couple of cases so um okay so let's get into the technology behind it um you know basically um the way to start thinking about bitco is probably our bacco api we have a uh platform that basically is a central entry point into all our services um and um in terms of a tech stack this is just a uh uh an app on the internet for those that i'm interested in i'll be updating this in a second i'm just gonna drop the sdk is primarily we'll talk about today the sdk is an interaction tool it's actually just sort of a blanket term um we have many uh software development kits for for interacting with their api um and i'll talk about them shortly as well um so if you could think about it this way that that the ui sdk sort of sit on top of a platform api um so when you're interacting with bitcoin your ui and sdk level you're really just sort of surfacing those calls to the platform api um i won't go too much in a wrapped bitcoin today although that's probably what we're most known for you know ecosystem um for those that don't know um wrapped bitcoin is you know i'll just show real quick um right here um just a real real quick slide of this uh you know the website um this is our uh one of our products here uh rep bitcoin is basically it's a one-to-one pad your c20 template um so you know for instance uh we have uh approximately 9.7 billion dollars in bitcoin under custis bitcoin help bitco and then what we do is we issue your c-20 token to our merchant partners right so you know generally there's a layer of distraction between us and the direct holders of the university and uh you know this product's been around since uh they got really big pretty good e5 so it's uh it's gonna be really large so okay and then uh yeah in addition these are things that like you know if it goes down how do i get my funds out my wallet or two or three multisync provider fundamentally enforce that okay so so let's talk about our platform a little bit i'm not going to get too deep into this because this rabbit hole could uh could go very vague but um the basically to think about is you know um you know if you're a customer because or uh if you're just a user here um you would come here you would acquire an enterprise and then you would use that to transact with whatever you're trying to do ethereum sends data calls there's some 20 transfers you know anything on chain um for our system um we use a uh two of three uh walt signing so uh what happens is um you when you create a wallet as an enterprise user um you are issued basically three keys you give us two keys which is the user and the backup key these are the pubs to these things um the backup key is intended to be a cold storage key so you really do not touch it on a daily basis um the user key is meant to be sort of a hotkey and that you use it to transaction from a daily basis the big go key is is our third key um that's what we use to counter sign transactions here um what this does it allows you to basically because it's a two of three signing uh threshold uh you can you can take the user and the backup key and you have full cost through your funds right um we also include like fully cold wallets here in custodial i won't really talk about these things because uh you know this is this is sort of a water sweep if you're interested because um so over this bitco key as well you know we implement these things called enterprise policies um again i'm not going to get to that but basically this is a this is a set of things that allow you to um say you know uh on our platform hey do not sign things about this value hey do not allow this person to sign hey do not allow this amount of value to go out in this amount of time there's a whole set of these things i could give a 30-minute talk on that i'm not going to so i'm just going to keep it over here um and in general i'm going to talk about sort of our api it's a wrestling api and then uh the ui will not really talk about our show real quick okay so yeah again api documentation we found at api.com um you know this is our our suite of docs um if you have any questions i would go to these first um generally they're they're sort of um you know uh purpose built to to to allow uh to answer all that to the general questions um this is not really a very deep step i just kicked out to uh say the ethereum section here um and i don't want anything on ethereum okay okay yeah so this will cut right to ethereum examples how to interact wallet construction generating some addresses which we'll talk about in a second and uh and balances and so forth here's 20 tokens okay okay um yeah i'm talking about the sdk as a sort of general blanket um this is our sdk repo uh you can go to this repo you'll find it's modular um there's about eight modules in it um some are relevant to our talks today but the things i would like to highlight with the core of the statics libraries here um again uh core is our main interaction tool for um running um these things so um you know we use the sdk primarily or i should say our clients in the sdk to interact with pico primarily uh ui customers also use this by proxy but really at the end of the day or most your entry into the ecosystem studio sdk you also statics which we'll talk about today i'll get into that it's a configuration from what you're doing here okay um i think i've talked about our 203 wallet uh i'm going to talk about sort of you know two three one is distraction here for all walls but more specifically the ethereum wallet um is a on-chain contract um ethereum does not have native monkeys uh any type yet um and so you know if we just talk about that for a second um we have features like uh safe mode and sequencing for transaction user protection um i will not go through that stuff in this this demo but uh the idea here is to keep your uh the protector against replay attacks right and then we also allow this abstraction where we like uh if you have a a core wallet and say you want to surface sub wallets you're going out some wallets um and bitcoin and this must be driving along a path but um um in ethereum land uh you kinda have to point out the contracts that's what you have here we have the ability to deploy contracts that are basically sub wallets that will only send to the main wallet here um um and again this is our central point for handling ethereum20 transactions okay um i won't talk about statics too much um i'm just because i do want to get into the demos here a little bit but just understand that is the configuration area for all of us so if you're looking for any information about what we do and do not support in terms of uh contracts for saying uc 20 tokens or say networks that we support both currently um this is the information this is the source of truth here um this changes a lot so you know generally we are we are trying to add the most current features the most current contracts and all that test net networks as well so um and this is sort of the point of this presentation this all leads up to we created this smart contracts library um report the id here's we're trying to extract sort of um general um calls here so say if i want to call compound um fairly regularly and i wanna die right um unless you know the compound sort of abis um you're pretty certain of you know where that lives maybe it's been upgraded since then maybe you know maybe it's maybe it's got a contract under the hood it's approximate gradable or uses crate 2 or something right um we want to be able to surface an abstraction to our users okay well i don't really care about any of this stuff how do i get these things you know um and so you know we can do that via this library make sure that i'm going to show you today and similarly you know when you want to take a a transaction payload where you know the destination you know txjw you really don't know anything else about it um and then sort of decode it that's kind of what we're looking for here as well this is a very very generic example but the idea here is to like what if i want to make work my way backwards from that guy i could do something like this okay and uh wt i won't really talk about too much again and yeah bitcoin bitcoin service more contracts okay so i will get into a quick demo real quick here uh and then uh just trying to sort of figure out here um um we're going to run through three demos here um so basically one is sending each from our platform the other will be sending an erc20 token what is look like the ui and api level and then using uh smart contracts to mint um die that same actually i was talking about so just see i'm just gonna create a new file and um right here so we'll call this demo on that ps4 and then um i've already done the work of installing your sdk here otherwise this would be probably five minutes longer um so you know uh you will have to set up a local repository and you know i'll be working with yours it's not a ui thing it's more than interesting so we start by putting our header in here this is our require statement here um and then you know whenever we start uh bitco um interacting we have to declare this sdk and then point to an environment right here um and then so i'm going to explain the main function here make it a symphony just to set this up a little bit here um and then the idea here is to actually my platform i have my wall id um let's maybe go check out um wallet real quick in our ui here this will be probably your first point of interaction with your system and you know if i go here i have uh you know the cast environment and this this is this is the live test environment this is wired up to go through them in here um okay so so if i go to my uh girly wallets here um i've got two wallets here sort of front loaded with uh some money here and and this is the your standard sort of look for for for an enterprise the center part this is thomas tesla um if i step on the wall here just real real quick um we can sort of see um a listing transactions here as well as those policy things i was talking about earlier and uh you know users settings etc so okay so now we've got our wallet we want to programmatically send crypto uh i should say to somebody else let's uh let's try to do that so i'm just gonna set so some of these things you know we're going to have to specify coin first specify early real quick so girl is going to detect my platform i'm going to add this what we want to do is we want to target that coin returning stp levels we're using that to bring it in and then uh at this point you know i want to run some sort of authentication right so you know given um um you know this this object here um there's there's a couple ways of authenticating bitco i could put in my credentials here would be kind of a foreign access tokens um so an access token and i'm not sure about exposing this because disappear after the session the idea here is to um to uh to have a central it's like a oauth 2 access type for those that are familiar again this is um i also need to pull in that wallet id i was talking about earlier so you know we've got the tatter if you go up here to this this the the second part of this very long screen um we're going to talk about we want to talk about this this world this first thing is the enterprise actually we'll talk about that right now um and then um so let's just set that okay um so we've got a wall id we've authenticated what else do we do now okay well let's extend our let's go grab our value all right we want to grab our wallet and i will use again this base coins sort of getter earlier okay so how let's go see this sort of connection um so if i just do ls here i'm in my directory okay now we didn't log anything uh so you know it's gonna do this log here retrieve okay great so we got some stuff here i'm again this is just raw features in this wallet adversaries uh small balance type stuff so okay um so now we actually want to go send this early right so again the point is we want to send let's go into another wallet instance here so let me take this uh we're gonna we're gonna do what's called a transaction here and you know we're going to have to use that wall instance again to do this like send menu and this is a weightable uh functions we can have only one recipient in each um so you know uh we want to send something out uh we'll describe its amount of way so we'll say you know 120 000 ranges and then we're supposed to find address here um um i you know come back um in addition we need some sort of wall passphrase uh to approve sort of run this time now um the wall password is what it does is it decrypts your user key right so you know again this big digest uh what it does is it pulls down we don't like actually when you're using you're giving us a pub at best maybe you gave us the encrypted print um when you encrypted that print you encrypt it with a small password so you have to decrypt it locally um to do it i've i've communicated my password i'm probably terribly named to say you found linkedin so let's see if this works this should we should admit some sort of output here so let's just say put this to the console okay great looks like we have a lot tx in the network we can go pick up tx id here and we'll just go to the girlies ether scan just a second okay so yeah while this is running uh let's just talk about the erc20 side of it real quick um so okay there we go so we've got this mine and if we go back to our ui now we'll see it's in a sign state it's going to refresh okay and then yeah uh so typically we'll we'll index behind train heads to allow for um you know things like uh forks to to to not not cause too big an issue so uh yeah so it looks like this is still a sign we can see it is confirmed okay just underneath that so now you know one of the things you want to do let's switch over to cobin real quick uh let's talk about sort of coping ethereum um say i want to send some we call it testy or c token from here um so i want to send this here some 20 token um let's retool our demo here to allow for that okay go back to our editor here so right now we're gonna have to change our coin here so we can change this to tap access typing still remains the same the wallet id will change because remember again that comes out of our ui thing so we'll copy and paste this here the second thing and actually you know we set this teeth earlier but that's actually uh wrong so we actually need to send this to the token that's being sent um the way that we abstract this is we say you know not what train are you talking about what what kind of asset are you talking about right in our system so in our case we do want to send one term so we're going to accept that there we're going to send absolutely one curve so basically now there so again we'll change your coin and now we're going to bump that transaction on the network um out another transaction okay great so so this just uh you know gave us another transaction with the tx txid we should be able to go over to our ui so we sit sign there we'll go to the coven explorer here and just real quick okay i'm not gonna wait for this thing to to conclude almost the time here so i'm gonna make sure that all this has been understood and then just very very quickly you know if you want to talk about sort of our our um actual smart contracts library which is sort of the whole purpose of this thing um you know again we can drag in uh that library here so you can do like a constant factory smart contracts here and then what we would do is we pull in that factory um so i'm just going to put it in the code here but but the reality is this would probably be better constructed so you know again we're pulling out an example like i said earlier we go target address so it understands what it's sending to this would be live and then again yeah we want to start an action in the middle so we say okay this amount of uh die and then we have to change our our constructor a little bit here um because this is a little bit different transaction i'm going to cut and paste this just for everybody but uh you know again we want to we're not going to do what's called a send many something what's called suddenly transactions a little bit different um i think we cut and paste in here um maybe this goes for a little password and then so what we should do is this generally says okay i'm going to send an ether now or in this case zero to this address with this data payload the data payload being constructed from this contracts factory triggers and surety that's what we're trying to perform here so let's see if this works okay great okay so this is a problem um positive yes one okay this this looks good so so basically this comes back as a half signed transaction with the signature um you know we'll go we'll go look at this transaction again uh we should cover the transaction confirming now okay so uh what we should see here is what's called a pending approval because we don't allow for uh data contract transactions in the ecosystem unless another user tacitly gives an approval um as you'll see here you'll see the ui the data payload we're trying to send to this address so okay great so let me just talk real real quick about sort of our uh prizes and in sort of what we're trying to enjoy here um you know the first second and third prize to be awarded to to any participant that's missing this sort of thing in our rubric here um so the first prize is two thousand dollars the second prize is fifteen hundred if they're across the thousand and then there'll be a pool prize where we'll take our eligible contestants and divvy up that um i talked about smart contracts earlier um i i talked about them see i talked about the sdk and i talked about statics but just some of some some very basic ideas you know if these one these are just touch points on ideas so some of these things can be like extending base contracts of other ecosystems to interact with sdk um changing the smart contract with modern tools like car hat you know to like when you want to test it instead of train um sdk features i didn't talk about this earlier but like too much but like accelerations are these things in ethereum where if you want to take a transaction and bump the fee on it you can do that if you rebuild it with the same nonce um that is something that we do not have a clear extraction for in the sdk and you know i would invite people to submit you know their most off the wall thing for how how to how to interact with that we have that in the api docs um happening pretty clearly um and then you know i won't talk about these other ideas but yeah again um you know we really love this community and uh really trying to support it just thanks everybody for your time thanks so much thomas um you managed to squeeze quite a lot into 20 minutes and that was a great session um there are two questions in the chat but i'm going to transfer this over to discord where thomas can answer them there perfect thank you so much for your time and thanks everyone for joining and we'll see you later yes 
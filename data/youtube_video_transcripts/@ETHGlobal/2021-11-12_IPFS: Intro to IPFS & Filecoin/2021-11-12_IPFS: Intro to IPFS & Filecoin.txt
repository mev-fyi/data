let's go all right hello everyone and thanks for joining us on this lovely friday um or saturday depending on where you are um this is the intro to ipfs and filocoin workshop hosted by discordian from um ipfs and followpoint followcoin so let's get on with it then and here's discordian hosting the workshop and discarding i'll pass the mic over to you awesome uh yeah hello everyone uh thanks anna i'm discordian a community engineer from protocol labs and i'm here today to give you an introduction to ipfs and filecoin all right so what are we going to be doing today uh today we're going to learn the core concepts of ipfs and filecoin and why they're important uh talk about what tools exist today to help you get started building um we'll talk about some possibilities uh throw some ideas that might be fun to build with the tech near the end i will tell you some resources you can explore into to learn more about ipfs and filecoin uh as well as where you can go to find our communities and connect with fellow ipfs and filecoin enthusiasts and finally if there are any unanswered questions at the end i'll try to have some time left for you to ask them and i'll do my best to answer them however if you think of a question while i'm presenting please don't hesitate to ask a key part of ipfs and filecoin is that they're distributed currently the web 2.0 model is centralization one single point can fail and entire services can go down as you get further and further distributed your services resilience increases as the users themselves are what are powering the service we believe that data and knowledge are a couple of the most important assets in this connected era being critical to human development they must be safeguarded open and in the hands of the people ipfs is not the answer to all the problems but it is the answer to some and overall represents a strong building block in the web 3 generation particularly when it comes to removing borders and silos for data so what exactly is ipfs well ipfs is the interplanetary file system what is a file system files and folders any file with any content why interplanetary because it was conceived as a way to upgrade the web in a way that would work or still work when the network reaches uh across planets the idea being that if you are sitting in mars it may take one hour for requests to go and come back from earth but if that content was already fetched by someone else in mars then it should not travel all the way back to earth for that and that feature should be provided transparently by the network protocol rather than by something on top as we will see ipfs is distributed by design no central authoritative servers are storing content and no central server needs to be contacted in order to obtain the content i'm going to explain the key technologies making this possible in order to do this let's think the process we follow when we put our data online as we said a file system has files and folders and the web is no different when we open a website we are just opening some files with the difference that they need to be downloaded from a remote location and that we do that using a browser which will print pretty things on our screen with ipfs we are also obtaining files from a remote location but the key difference is that we don't need to know the location of the content but what we call the content identifier the content is still at one or several locations but as we will see it does not matter anymore where it is we switch from a location based identifier to content addressing by using a cid in order to be able to have content addressing we need to obtain content identifiers for each piece of information that we want to put on the network and this is a cryptographic fingerprint of that piece of content every piece of content produces a different fingerprint all the fingerprints are of the same size regardless of the amount of content this fingerprint which we named cid can be reproduced anytime from the original content this means that if we obtained a piece of content after requesting a cid we can verify that we were given exactly what we asked for so when it comes to files the idea of how we content address them is clear but what about folders well folders are just special types of files which have a list of files in that folder as content that list provides the names of those files and in the case of ipfs they're cids since a folder is a type of file a cid can be contained in exactly the same way as for any other type of file this means that we can represent a folder or even a full file system using content address structure like this sorry uh this meaning over here on the right side as you see here our top level folder has a root cid it has two entries corresponding to two folders and those folders have other entries corresponding to files each entry has a different fingerprint see the colors as each fingerprint refers to different content this content address type of graph is what we call merkle dags the merkle dags used by ipfs allow us to move from location-based addressing to content addressing in a single step by just replacing locations with the root cid of their content the sub paths stay the same one characteristic of content addressing that i mentioned is that the fingerprints are unique for any type of content what that would uh sorry what what would that mean if we wanted to copy file.txt to the folder of the second user it means two things uh oh sorry i should mention that i have user1 and user2 here that's what i'm referring to so it means two things first we did not really have to copy the file we just had to modify the folder to reference the content two copies of the same content have the same identifier so to ipfs they are the same thing there is no notion that the same content can be duplicated in different folders in ipfs because it is actually the same thing with the same cid we call this property deduplication secondly since we changed a folder the fingerprint of that folder changed so we had to update the upper folder too to reference the new fingerprint this means that the fingerprint from that folder changed resulting in a new root cid the moment something changes you get a completely different cid your previous cid still references your previous version of the content which has not been changed the fact that a cid will always represent exactly the same piece of information unlike a location unlocks the capacity of doing verification on any piece of data and makes ipfs a very good framework for append only storages like blockchains or data archives as you can see content addressing is a nice drop in replacement to location addressing as we keep having folders and paths in a very similar way as we had them on regular web addresses uh okay so lucas has a question uh what about different cids for the same content using different cid methods like for example d1 v2 and etc so right now uh we have a concept um with cids where uh we have v0 and v1 cids i believe right now if you stored something in a way and produced a v0 cid and then you tried to reference it using a v1 cid that would work however if you encoded the data um which i don't that's more of an ipld thing i don't think i have anything in this talk really about it but um the way that the blocks are actually encoded will produce a different cid as well and the data will not be found so you want to try to make sure that if you're looking for content especially if you're working across different apps that you've made uh that you are actually storing the content the same way producing roughly the same cid uh and i guess uh just as a quick practical difference between v0 and v1 cids cids tell you more information about like how the data was encoded um stuff like that so it actually does produce variable length cids where v0cids begin with a capital q lowercase m and they don't contain that information it's all implied uh hopefully that helps answer your question uh okay so peers peers in a peer-to-peer and peer-to-peer systems are nodes that are connected to other peers to form a network or swarm forget for a moment about ipfs peers and think peers in general there are certain features that a peer in this network must have first it needs to have a name so that other peers can identify it in practice each peer has a unique identifier this identifier is linked to a cryptographic identity which allows each peer to communicate securely through an encrypted channel secondly it needs to share at least some functionality with other peers if a peer needs to interact with other peers they will need to support the same services for example the peers in the ipfs network are peers which support a set of services or protocols one of them serves to request certain content by its cid from a different peer and download it but in order to get there it means that peers need to be able to discover each other the network transports they support tcp bluetooth and the services they can understand this step is called content and pure routing and it is achievable using something called a distributed hash table or the dhd so the dht or the distributed hash table is a critical service that each peer rents dhts are the equivalent of a large database that works by storing only a small number of rows in each pier in order to get the value associated to a key a peer will need to find some other peer that is storing it the process consists of asking other peers in the network who has this row but not in a random fashion remember that not every peer is connected to every other peer instead peers with certain names or peer ids are more likely to store certain rows thus a peer knows which one of the peers it is connected to is most likely to have the value for the key that it was looking for what if it doesn't have it then it will request information about peers known by the other peer which are more likely to happen so now that we have a database shared by all the peers in the system how does ipfs use it simple when the content is added to ipfs a peer will insert one row in the dht mapping the content ids that we generated to its peer id declaring itself a provider for that content publishing this row involves finding a peer similar enough to the content id to store the row in any case the content id is however a very small piece of information and the actual content stays in the original peer peers also insert routing records in the database these map their peer ids to locations where they can be reached and the method effectively to their ip address support any peer that wants to download some content will then have to do two things first query the dht to find out which peer id is providing to that content second query the dht to find information on how to contact that peer id at the end of the dht queries a peer knows who has the content it wants and where to get it ipfs is really useful to anyone who wants to serve or retrieve content on the web which is almost everyone as certain pieces of content get more popular the data becomes more readily available and resilient to loss you can also run your own nodes on classic infrastructures like bps's or pay pending services to hold onto your data ensuring availability but what about alternatives that are both decentralized and reliable this is where filecoin steps in filecoin is storage designed for web3 from the ground up it is compare are compatible with ipfs and other existing web3 technologies such as uh near eth many others it's cryptographically verifiable so you can store cids on any blockchain really and reliably retrieve the same data every time provided you have a storage deal made over filecoin at over eight exabytes filecoin is an absolutely massive network without any central authority uh it should have the capacity to handle any use case you can imagine can i pfs host services like react app so strictly file storage um if you wanted to host a static website over ipfs that would be very simple to do um tools like fleeq are actually designed to make that very easy if you wanted interactive applications there is a layer to ipfs called a pub sub or publish subscribe and that will allow your peers to communicate with each other in a decentralized way you can simply subscribe to a topic um like my app and then like have any other peer uh also subscribe to that topic and then anything published over it you can see like who published over it yeah yeah exactly thank you so let's take a moment to talk about verifiable storage on filecoin you or your app make a deal with a provider to store your data filecoin preps your data by transforming it into a directed acrylic graph the dag it uses the same process as ipfs so the resulting cids are compatible next providers generate an initial proof of replication that's part of the storage deal that they publish to the follow coin blockchain over time providers have to keep proving that they still have subsets of your data creating proofs of space time they are paid incrementally for keeping up the storage deal finally you can get your data by making retrieval deals with providers you can also check the chain for proof that it's being stored and stored correctly at any time um sorry emil i i don't quite understand the question filecoin does not have a link for data cid um yeah uh content is addressed slightly differently over filecoin um and then services like web3.storage or nft.storage kind of abstract that away free uh for you um but i haven't had enough experience like actually building things with direct access to lotus uh to be able to comment on exactly what those differences are is there anyone to host data that has access control or encrypted content well as ipfs um and filecoin you can just uh store kind of whatever data you want um binary data or otherwise uh you can encrypt it beforehand um in terms of access control there's nothing yet um you could you could build your own layers on top of that like using uh things like like pub sub for example which i mentioned earlier um but the easiest way right now would be to just really i guess build in encryption um on your end yeah yeah okay i'm glad that makes sense all right so ipfs and filecoin are perfect complements for each other as we've gone over ipfs is great for fast flexible retrieval over the ipfs network and can even be accessed through http gateways for users not yet equipped with ipfs though ipfs needs somewhere to persist the data filecoin answers this problem by offering excellent persistence and verifiability through distributed storage deals which any storage provider can accept there are several layers to any application and web3 offers no exception you have storage helpers such as web through dot storage and a feed out storage fleek estuary infrared ceramic and more there are so many tools out there for storage providing that finding the perfect fit for your project should almost certainly be possible we have the logic layer as well through smart contracts that can point to cids served over ipfs stored via filecoin a pinning service or maybe even persisted through sheer popularity the logic layer offers endless possibilities with so many technologies including ethereum near and many many more finally we have the front end this is what you see and can include typical web 2 methods like throwing your page on a web server or having some server side code do some work but also web3 where the website is served over the distributed web often with integrations like crypto wallets and nfts serving static websites over ipfs is quite easy so i hope to see more and more web3 type frontends as we move forward into the future now you might be wondering what can i build with ipfs and filecoin well we've been brainstorming some ideas to help you get started we have quite a few so i'm just gonna briefly go over some as fast as i can so here are 11 ideas of varying vagueness difficulty and complexity so you could create a social media website where data is shared directly peer-to-peer timelines decided organically by the data you literally receive in a stream filtered by the client perhaps you'd like to start at a lower level though and design distributed social media standards the very primitives other networks could build upon a distributed video streaming service could be nice users could monetize their videos through a token maybe requiring some form of payment for certain content or extras you could help cache the planet and help store popular javascript libraries over the distributed universe an rss emulator could be fun users could subscribe to a pub sub topic which is a published subscribe system you can use through your ipfs note peers could subscribe to a topic they're interested in and other and yeah other peers could publish oh yeah another period could publish updates to it decentralized achievements can be fun create a system where web3 games can easily integrate achievements into their games adding a whole new layer of fun to your new web3 games you could make an app to simply snapshot a website and provide the immutable cid representing that website build a decentralized metaverse where any user can host their own planet allowing users to colonize entirely new worlds in an inexpensive and distributed way you could build a decentralized service that assists you in purchasing the correct temperature of coffee a distributed kit platform could be really cool bonus points you can integrate an issue tracker for it too a wrapper for youtube to help cache videos into the decentralized web could be absolutely invaluable in preserving certain types of content which are completely lost of time i hope at least one of these ideas help spark your imagination um i oh yeah i want to echo what uh jaropo or hugo said uh and thank you very much for answering that um he said it's rare to see people developing on filecoin directly because it's uh required to run it's heavy to run um so most people end up using things like uh like i've mentioned earlier like web3.storage um which will abstract a lot of that layer away for you uh jordan i will try to answer your question at the end unless somebody else can um okay so all right i promised i would tell you about some tools to help you build your app so i will go over a few of those now let's take a second to talk about storing and retrieving data we highly recommend choosing a storage helper they simplify deals and workflows making it fast and easy to build they simplify deal making in general finding providers negotiating prices waiting for confirmation verifying storage storage helpers handle all that for you you can sort of both ipfs and filecoin with a single call ipfs for fast flexible retrieval and filecoin for persistence and verifiability a storage provider with file coin integration will ensure that you never need to think about these things so what's out there first up is fleek's ipfs hosting it's designed for fast modern censorship-proof websites and web apps on the open web and works with uh most modern frameworks it works by connecting to your github repository and you add build settings from there you can deploy your website to ipfs which is backed up to filecoin uh you can find more about these the services fleek offers over at fleek.com web3.storage is a powerful solution for hosting your data for free backed up over filecoin and available over ipfs seamlessly data is immediately uploaded to a hosted estuary node and automatically stored with six providers around the world it can be used in a variety of ways including the http api and web interface nft.storage is a powerful solution for hosting your nfts for free backup over filecoin and available over ipfs seamlessly nft.storage is designed for nft developers who want free decentralized storage you can simply upload your data and get back an ipfs cid that can be used in on-chain nft data as a pointer to your content storage and retrieval is free you get properly formatted metadata back immediately after uploading you can fetch it back via ipfs and it's backed up to filecoin via free storage deals nft.storage is easily used via its javascript client library their http api or can even be used as a remote pinning service last but not least there's powergate it's designed for developers who want powerful ways to connect and extend lib p2p ipfs and filecoin powergate bridges to near and soon eat polygon and others it works as a docker container wrapped around an ipfs node and a file coin node it can stage store and retrieve data as well as provide default configurations for minor selection you can find lots more information about powergate including usage via textile's website listed on this slide i've also or sorry i've listed only four storage providers here but from ceramic to estuary there are many others to discover so come learn and build we have an awesome community comprised of builders who help us foster a positive and productive environment i highly encourage you to check out a resource we've compiled of several tutorials currently available at tinyurl.com learn dash ipfs-filecoin as well i hope to see you around and i'll be available for the duration of the hackathon so please ping me or send me a dm i'm discordian on related discord servers and the follow coin slack uh so i'll leave the slide up and answer any questions you may have now so ask away don't be shy so first i'm gonna go to jordan's question which is how can i test my code for example i have an in-browser ipfs node but how can i call some kind of mock-up or temporary storage that pretends to be filecoin storage um so i guess to answer your question uh as uh hugo said earlier most people don't use filecoin directly so i don't i don't know if we have like a whole lot of tooling available for that but considering um web3.storage and nft.storage are completely free i highly encourage you to just sign up uh get an api key and then just test out like using their nodes um yeah so where do i save credentials for accessing helper apps and you're deployed in production okay yeah yeah uh so this question actually comes up quite a bit and i wish i had a straightforward example i could point you to to be honest um in terms of the hackathon um it's totally fine if you end up having to leave like an access key in a public facing side uh while it's judged and stuff definitely won't hold that against anybody um but the way i would personally do it is i would put the api key on a node that you run on something like a vps and then have uh like requests for stuff like storing the data uh which would be the only thing i can think of that you'd need the api key for uh have those sent over pub sub and then that way your node can uh receive those requests uh store it and then advertise the uh cid back that it got i know i realized the squirting is just what i'm writing oh yep could we have a quick overview of how pub sub works uh yeah i wish i had uh slides handy um so uh do you have any specific questions um otherwise like i can just babble about it a little bit um so in simple terms the way i see it so if you have node a and node b node a can subscribe to topic a node b also subscribes to topic a if node a says some like broadcast a message um and this can be text binary data whatever you want node b will receive it because they're subscribed to topic a they will actually also be able to verify that it definitely came from node a because all messages are signed can pub sub do sockets work for us well pub sub yeah more or less um so there is a hole punching nat hole punching that comes along with ipfs uh so that would usually be through honestly all kinds of things uh pub sub is multicasted messages yes yes uh yeah so pub sub would be i guess a layer above sockets so yeah uh i think uh sorry i don't know how to say your name uh moradiff um is correct uh in that sense because um you can just use pub sub instead of sockets true all right i'm really happy to see all this engagement in the chat does anyone have any other questions well uh it looks like we're pretty much just right at time so uh thanks for coming everyone i really appreciate it all right thank you so much to scoring for the great presentation and thank you so much to the rest of you for joining us today um the stream of this workshop can be found on the youth global youtube channel if you want to refer to it in the future and discordion can be available on discord in the sponsor ipfs file coin discord channel and i hope everyone has a great rest of your day and thank you all once again bye 
all right also proud member of the build guild uh so joining here with me is the boss himself austin griffith creator of scaffolding and uh it's great to have the man the mythology here himself so without further ado it's yours what's up shannon thanks a lot man yeah bill gill good chill we'll get we'll get to the build guild here in a little bit uh yeah if it's cool with everybody i'm just gonna dive in and and get going the goal today is just to put together a kind of speed run through scaffolding and it's it's really a an ethereum speed run but uh i'm i'm kind of focusing on scaffolding to show you builders out there just kind of like how to get started how to get going and then just like once you once you know solidity it's it's a whole tour of duty to learn all the other different intricacies and and gotchas about the uh about ethereum and and building on top of it so uh i'm watching the chat here oh it's probably uh a youtube chat isn't it i should probably let me let me see if i can pull that up and mute it just so i can keep an eye on the chat there actually griffith we've muted the youtube channel okay so there is no chat if you want to chat if you want to talk to me reach out to austin griffith i'm austin griffith on all all the socials uh i look like a little uh here let's just let me just start screen sharing we'll get we'll get right into it here we go middle roll middle roll that one's for shout on i think we i think we invented that on the the nft show off with shawn on that's right that's right it's a good one it's a good one it's funny like i i'll be like i'll like see developers out and they'll do like yo gauze and grip with middle roll so we we definitely mean that into existence on that uh speed run okay so here we go uh this is scaffold eat and to zoom right in it starts off where you get your smart contract uh over here and you have the front end over here and as we make a change to our smart contract and we yarn deploy that's going to go to our local network and then those artifacts are going to get injected into our front end and our front end should reload over here and give us that new value with some exclamation points so that's that's this is this is kind of like the the starting point for scaffolding this is this is your license to learn and and you can get in here and you can start adding things and start tinkering with solidity and just get get a feel for how solidity works and then and then go from there so the the thing i like to show to everyone is the ethereum dev speed run if you know a web 2 developer or you're a web 2 developer just getting into ethereum or you're a web 3 developer even trying to you know find your blind spots and go through the tour of duty check out uh i'm just going to eat dev speed run just just tell your developer friends to go speed run ethereum right and and that speed run is important because it's not just about learning the syntax it's about learning you know all the all the interesting gotchas and and what what ethereum is good at and what ethereum is not good at and and so it it really starts with just tinkering with salinity you you get this uh this scaffolding setup going and the the curriculum starts with just like go to solidity by example you're you're you're a smart person you understand how to code stuff or you you can write a for loop you you know how to do this just get in here to solidity by example look look at you know the first hello world get in here and start looking at primitives and data types right and what i mean by just copy and pasting in is you can really just grab something from over here and you can paste it in to scaffold eth and you can yarn deploy whoops i don't think i hit save here we go and then you should be able to see that new so we created an address address over here on ooh weird the hot reload is not working over here there we go and then our address shows up over here right and if let's copy this dude's address and paste it in here and hit save and let's go ahead and deploy that you're seeing this dev loop that i'm doing here where i'm making small changes over here and we're seeing in the front end that they reload over there okay so we can kind of tinker and we can we can test our assumptions and we can try things out but we can learn the language and we can learn the syntax and if you learned if you've learned a programming language before this is gonna be super simple to pick up solidity solidity is actually a pretty simple language i mean you know you're not diving into uh assembly and everything it can get very very complicated but picking it up and getting the basics should be pretty quick so uh you've got integers and uh unsigned integers and this address that we we just posted in you've got booleans right you can imagine let's see let's put in a boolean just to see how it works and save and deploy so now we should should have an address and we should have boo equal true and let's see there we go there's boo equal true okay so i'm just kind of tinkering with the syntax and getting a feel for it and learning how this works and that's the the start of the speed run now you'll go through a handful of different topics you'll you'll learn about mapping structs modifiers events inheritance payable functions the fallback function we can kind of cover some of these as we go here but i i take the time sit down take a couple hours and really work through this stuff on your own using this setup this scaffolding setup so so just to back up just a little bit to get scaffold eat you can just type in let's see i'm sure you can just google it and probably the first thing yeah the first thing is this scaffold eth github repo there we go and so there's scaffold eath to get it started you'll you'll clone down scaffold eat let me see if i can make this a little bigger you'll clone down scaffold eath with a get clone you'll yarn install and you'll yarn chain and be careful with yarn some people end up using the yarn from like linux like there's like a linux command called yarn be careful with that yarn make sure you like npm install dash g yarn and get it from npm but it's just an npm drop-in replacement uh we use it because we have workspaces we have a couple different that we have hard hat react this kind of brings in a full stack so we need like the front end and the back end so so we're using yarn for that then yarn chain brings up your local block chain you'll have a local block chain running thanks to hard hat and then yarn start will fire up your front end that's what that's what renders this here so just follow that repo and and you can kind of get in and there's there's documentation there's the same kind of learn solidity that i have here in the speed run so it should be pretty straightforward and pretty easy to jump into okay so let's let's just go learn let's see what's next let's let's let's do the let's do the set purpose first right let's clean this out the contract you start with what was that comment up there oh it was an event okay the the contract you start out with looks just like this we have this string that we're calling purpose so you've got some storage in your smart contract and then you have a function to update that storage location so then uh let's see let's go ahead and do something like this let's get it deployed and get this whole app back to the starting point and we can get in and start learning uh the first topic there we go okay so scaffold eth level one here we go let's try out ooh accounts we're going to need to learn accounts so you'll notice that when you land on scaffolding let me open up an incognito window and let's look at what loads up here see how i have a different address 65a2 let me close that and do that again and bring up another local host okay there we go we got a new address there right so and i can just click this and it's just going to give me funds from this uh this instance of hard hat that i have running there see it gave me some buttons you can also copy your address and paste it into this faucet or you can go as far as to pull up this wallet icon down here paste in your address and send yourself like a bunch of money oh i didn't didn't even have enough okay let's try that again with a couple less zeros there we go whoa cool awesome okay so we have lots of money there and you've got wallets for each user so if i go over to this guy and copy his address and i go over to the wallet and paste it in see how you've got the nice blocky preview scaffold eat comes with a ton of components and hooks that are really handy and help you build then let's go ahead and send that to ten thousand dollars notice that these burner wallets aren't prompting us like metamask does these burner wallets that are generated for you on page load uh are really great for testing i can say hello world here and i can hit send and there's no no annoying pop-ups there's no checks for chain ids and nonces and all that stuff it's handled behind the scenes for you so while you're building no need to go through that meta mask stuff until you're getting to the point where you're deploying to a test net and then you'll want to start logging in with with scaffolding or with meta mask and actually signing those transactions and feeling that ux okay so uh we've got our accounts figured out accounts are basically generated for you on page load when you land you've got a burner account a lot of apps carve that out before they go to production but it's super easy uh for for testing and figuring out so uh then then we've got uh basically this form and i should say able yeah i say hello world here let's make sure we can do that there too awesome okay so let's just write a a little bit of solidity just to get kind of a feel for how this could work a lot of people will do something like they'll set up an ownership pattern they'll do something like string public owner and they'll set it equal to their front end address and let's just go ahead and deploy that and make sure it goes what did i do oh it's not a string public owner it's an address public owner come on come on griffith all right there we go there we go there we go and then over here we should have this new owner that matches this okay now the probably one of the first most powerful things you'll learn about solidity is the require statement require is not like installing or bringing in an import like you might remember from node but it's uh like an assert we're testing a condition we're going to require that the message sender equals equals the owner and if not we'll say not the owner and the message.sender is basically whoever is calling this function what this what this line does is say hey you have to be this address you basically have to control a private key that goes along with this public address to be able to get in here and do this if you if you sign a transaction it's not from that specific person then you won't be able to get in here and let's go test that out so let's go ahead and yarn deploy that and let's go over here and test both the happy path and the sad path make sure that only the owner can set the purpose so the new purpose is fire fire fire fire right and send all right totally works great then let's bring that incognito window up and come up with our this is our bad guy here we don't want our bad guy to be able to set the purpose in our contract so they grab some funds from the faucet and they i don't even know uh juggler send doesn't work not the owner see we get that nice message in the front end letting us know that this address is not the owner's address so that just shows off how that require statement works it helps you to to set some rules so you know who can get in here and who can who can update uh the purpose or do whatever you put into this uh this function okay so uh and to zoom in onto that a little bit uh i think we've so that's that's teaching let's see let's go to our speed run and let's go up here primitives and data types that's sort of but this is i want to talk about inheritance for a second what you'll do as you start building these apps is you'll find that there's this ownership pattern and what you could do is actually bring in ownable right ownable just like that so now all of a sudden this is the same where now only the owner can get in but instead of me writing the code myself i'm going to inherit it from open zeppelin i'm not even sure this will compile because i think we have some versions differences yeah exactly so i would need to put this back to six seven that's it's definitely a uh what is it 0.6.7 that's definitely a bug we need to fix in scaffolding i need to put that in my notes okay cool so uh let's let's go back to the working contract with out the ownable that's inheritance the you'll find that you have a ton of different things that you can inherit from open zeppelin if you just go check out the open zeppelin contracts there they are uh and if we go to contracts there's tons of stuff you can get into specifically like the tokens are really valuable you see a lot of people using the tokens but i was also using what access and then ownable there's that ownable uh if you want to have an owner of your contract awesome okay so kind of jumping around but inheritance kind of that that explains how that works uh and then let's see the best way to really show off uh a smart contract this this is kind of centralized what we have here is we have a rule that says only this one owner can get in here and use this function it'd be better and and it's best to think of ethereum like this the greatest massive multiplayer created right like you you basically are building these vending machines in the sky and anyone can go talk to these vending machines all they have to have is a little bit of eath and and these vending machines are like censorship resistant even if people didn't want you to get to them you could still get to them and these things are unstoppable even the person who deploys the vending machine if they do it correctly can never stop it so once we deploy a smart contract even we can't stop it if we do it correctly and that's kind of the power here so this is this is actually pretty centralized this is kind of like a little attestation smart contract where only the owner can get in here and uh set this purpose what would be cooler is if we made it more like a vending machine so i'm going to add payable here and what we'll say is instead of checking the message sender we're going to check the message value so we're going to make sure that the person sends in some money but we're going to let anybody get in here so anybody can get in here as long as they pay 0.001 ether and we'll say not enough enough i'm just going to leave it like that i like it happy accidents all right here we go here we go now we're going to compile and deploy that and our front end should reload and now we'll notice that this this front end has auto adapted your your front end will auto adapt with all your changes in the smart contract now there's a new transaction value here so if i say hello world what i have to do here is i have to pay 0.001 ether and i have to hit this little 10 to the 18 and this is here for the developer uh when you build your app and scaffold eth you obviously won't make people multiply it by 10 to the 18 to take it from way to eat or from eat to way but it's here for developers to learn and and be clear that that's what they're doing when they're when they're interacting with this contract and we can zoom in on that just real quick basically that that 0.001 ether is the exact same thing as saying that so i can say either one of these but for humans we want to read it as a decimal it's easier for us to see right but the machines the evm is a simple machine it doesn't want to f around floating point math so you have all whole numbers and we have this trick where we divide or multiply by 10 to the 18 so we kind of mimic having decimals so we've got .001 ether over there we've got this here are we ready to pay let's see what happens i'm going to send this transaction and sure enough i was able to update the purpose and pay a little bit of money right let's go let's go be that attacker again and let's have that same experience we'll grab some money from the faucet we'll say hey hey hey and we'll send in zero point i'm gonna send in a little bit less just to prove that this doesn't work this should yell at us and say not enough and then we add one more zero and we send it again and it works hey hey so so we were able to kind of test that line make sure it works something really interesting has happened here with our smart contract though it has received value it now has value in it it itself is a player in this massive multiplayer game your vending machine is starting to accrue money but oh no we didn't put in a withdrawal statement right so if we get in here and maybe make some kind of function we're going to grab that require statement we'll we'll have a withdrawal function that uh will require that the message sender again is equal to the owner back back to the the first require statement that we had and then we'll do something like uh oh we need to do a call okay so here here's a little gotcha with another gotcha with ethereum i'm gonna go to solidity by example there is a call and a transfer function you can do a dot call or a dot transfer on on any address so like this owner here i have this address it actually needs to be payable but you can say address dot send and you can send money to it or address dot transfer and transfer money but that's not the best way to do it the best way to do it is actually this this kind of janky this janky way uh because uh of how gas limits are handled what you want to do is actually do this right here okay that right there it's uh okay and we bring this in and we don't need that and we want to send okay so how much do we want to send gas i'm not going to worry about and this whole thing can go away and it can just be boop boop okay what a what an ugly line but we also want to then require success and we'll say something like failed okay so here we go uh what i need to do is value though how much value do i want to send what i want to send is is going to be address dot balance what a weird line but basically it takes this the smart contract uh turns it into an address and then gets the balance from it so hopefully if i wrote this right i'm not sure i did this should actually this withdraw saying let's see let's go let's go try to compile it see what the problems are and go from there oh oh yeah oh yeah dot addr is not the way i want to go we want to go message.sender we're going to send it back to the the message.sender so this is this would be the to address actually this could be the owner too right either either one owner.call it's clear when we say owner because then it's we make sure the owner is the sender and then we send to the owner let's try again let's try again here we go [Music] all right there we go it looks like it did and let's double check it right let's reload this thing let's let's set a let's set the purpose with this guy hey hey hey can i hit send did it go that was kind of weird how i did that uh let's let's try again hey transaction value 0.001 boom boom there we go we paid in notice we have this new withdraw thing there we go so the contract has .001 in it and if this guy tries to withdraw it says not the owner so he's able to send in but he's not able to withdraw right and we should see that that contract is getting value over here and the purpose is set but now we should be able to withdraw we're only gonna get a little bit was it three two one if we withdraw then we have three two three there we go so we got we had to pay some gas for that but basically we we were able to build a little vending machine put some rules in it that say we're going to track some purpose we're going to have a function that lets someone update that purpose and then we were able to build a withdrawal function that says if if the owner gets in here and wants to withdraw they can pull those funds out so that is that is a very quick speed run through just like getting started with scaffolding and now i'd like to do kind of more of a just kind of a talk through of like where to go from here okay so so once you get to this point this this really is like your license to learn you're you're able to go to uh solidity by example right let's let's pull that up and you're able to let's see the next thing on the list is mappings right on the list of the speed run so we did primitives and data types here's mapping you're able to go here you're able to copy and paste this you're able to bring it into here hit save and deploy and then your map shows up over in your front end and and you're able to do that over and over again and just kind of iterate on on learning the language there we go also i need to put that on my list not hot reloading okay cool and you know if we have a mapping what basically what a mapping does is it says some primitive data type is mapped to another primitive data type right so what we have or something else it could be a mapping to a mapping to a struct or something like that what we have here is an address mapped to a uint which the best way to say that is this is this is a balance isn't it yeah oh okay okay we got a balance and then like what could we do we could maybe set up a constructor where the balance let's bring the owner up here wait i didn't it didn't need to be moved around just makes more sense but uh if i say the owner we're going to set the balance of the owner to 100. okay let's go ahead and yarn deploy that so we're going to keep track of this balance mapping where any address has some number associated with it and then for the owner we're going to set their balance to 100 and so when we reload this and we go ask it what is the balance of this dude it's 100 cool cool right it's like okay well maybe we should create like a i don't know like a function trans a function called transfer that has an address 2 and a unit 256 amount and you'll notice this u end and the unit 256 so those are the same thing this can be a u n 8 and that's using 8 bits but a unit 256 is the same thing as you and it's just cooler to have the 256 there because it's clear what's going on okay and then the amount and then we'll make it public and what happens what happens when someone tries to transfer well what we do is we say uh well the balance of the from address would be like message.sender right that's the one calling in is going to minus equal the amount and the balance of the to is going to plus equal the amount right we're learning mappings okay but we need one rule here what's the rule the rule would be well the balance needs to be greater than or equal to the amount or we're gonna get some kind of underflow right it would it would go negative but technically it'd roll all the way around uh luckily like this solidity eight actually uh blocks for that so we could probably get away with it but i feel like we want to be explicit and require that the balance of the message.sender has to be greater than or equal to the amount or we say something like not enough okay enough all right here we go here we go here we go here we go save deploy that oh what did i do save i think i just like deleted it with a keystroke save that let's see if it compiles it might nope it did not oh no oh no oh no my machine is empty let's see if i can oh man see if i can like empty some trash live a little live on the that's a that's a rough one to run into okay let's try it again come on a little bit of space left a little bit of space left here we go there's not even enough space to write the artifacts all right it did it deployed now let's go test out if this works we've got our owner and our owner has some kind of balance of a hundred right so then we open up some other person over here we're gonna run out of space it's gonna happen we're gonna run out of space somewhere along here make sure this this uh orange orange dude has some so then let's use the transfer function so our owner has a hundred but they want to transfer notice that nice blocky preview you want to transfer uh maybe 50 over to this guy and remember we're transferring at this point we're transferring uh whey not eath right if if this was 50 and we took it times 10 that would be 50 east i'm actually just doing 50 way right now and let's go ahead and transfer it okay it worked so now if i go test this dude's balances these balance is 50. what about this dude over here it's 52. it worked we were able to send 50 from one side to the other and this is this is basically how a token works right you keep you keep some mapping for balances and then you have a transfer function that lets you move those balances from account to account and all of a sudden you've built a digital currency with without all the trouble of setting up that giant decentralized network and that's kind of the superpower of ethereum is the network is taken care of for you your job is to build the rules that that little vending machine will operate on and anyone can get to it anyone can pay a little eath to interact with it so so we've learned we've kind of tinkered with a mapping and if we go back to this then you'll get into uh where's that where's that speed run right here structs so when you get into structs you'll create a struct uh there's three different ways here to push that struct into an array but having a struct and having an array of structs learn through that modifiers make it a little easier to uh have instead of having this require every time where where you you have this require statement at the top of every function you can just create a modifier like only named only owner and then your functions can just have like a only owner attached to it and then it goes up here and it runs this first and then it runs your function uh events events are like a cheap way to do stuff in some googling events uh storage right so so storing something on chain is super expensive because what happens is when you store that thing it needs to be accessible by all the other smart contracts and it needs to be stored on behalf of that smart contract when i store it it goes out to all the nodes on the network and they have to store it on here so this is my this is my eth2 node right here right and whenever you store something in a contract once we get to the merge and everything that will have to be stored right here on my machine so that value not doesn't have to get stored on one machine it has to get stored on all the machines so it's pretty expensive to do storage so there's this other way of doing kind of like on-chain storage where your contract can emit an event and that event can be read from the chain and could be used in your in your front end so it's it's a way for front ends or anyone to read from the smart contract uh some value that's stored but the gotcha there is other smart contracts can't read other smart contracts events so if you have one smart contract that needs to say has this thing happened over here you need to write that into that that other smart contract so smart con smart contract to smart contract interaction has to happen uh not using events basically but events are a cheap way to store things and send things okay here we go continuing on uh inheritance payable functions fallbacks you will learn those as you get started through this so this is the the basically the first step the first 30 minutes of this is just like learning the language and what you're doing is you're getting up the down and krug right it's probably over here it's probably the up the dunning krueger and then you're gonna have to go down and go through uh a tour of duty you have to learn about ethereum and all the gotchas and all the things beyond just learning the language kind of what the ecosystem looks like what it needs what's good what's not good and that's what this is for this will take you through there's there's tons and tons and tons of example branches in scaffold eath if you if you just go to the scaffold e3 bow you go to branches and then you sort by active you're going to find so many here challenges commit reveals bonding curves nft examples vrf i mean like it goes on forever forever so really what you probably want to do that's a good way to look at the active stuff but if you're looking to do something specific you can kind of pull up a branch and just type in kind of what you're looking for right so instead of master let's say i'm looking to do something nft based holy moly look at all these nfts are you looking for a signature nft auction are you looking for an 1155 are you looking for a simple svg nft are you looking for a vrf in ft all of these are here and and they'll get you dangerously close to the nft you're thinking about building and hopefully you can kind of just extend it a little bit and have a prototype to get it in the hands of your users all right so let's see uh let's see the first example the first thing you should go through in the speed run once you've kind of tinkered with solidity and you're pretty good at it the first example is this simple nft example so simple nft examples built with scaffold eath your smart contracts will all be in the same place it'll feel like scaffolding it'll be all the same same commands i think i have it up over here yeah so here's the simple nft example and i've yarn installed it already but let me do a yarn start and that'll take a little bit to come up and let me stop this one okay we'll leave this chain running it's basically the same same chain everywhere and we'll bring this up and that's going to take a little bit so what are we doing with this simple nft example well it has us clone it down uh it has this yarn install yarn start bring up the chain which we're just going to keep using this chain here i'll bring it with me though just so it's there we've got our yarn chain uh and then it's gonna have us do a yarn deploy i think we can actually do that while we wait for the front end to come up let's see if this works and what we're deploying ah let's get into that let's get into the code what we're deploying is this smart contract nope it's definitely not that smart contract oh wait wait wait wait git checkout simple nxt example oh no there we go there we go we probably need a yarn install now okay now we should have done save there we go new contract okay so now the contract is a little different we did some inheritance here we brought in that ownable like we talked about but we also brought in some counters and erc 721 from open zeppelin and there's even a nice little link here that takes you to open zeppelin and kind of explains how to build your own uh 721 and they kind of talk through that but it's all built here for you beyond start okay so we're gonna start it we've got our chain there let's try another yarn deploy i'm gonna close that one because i'll use it over here localhost 3000 there we go we're deploying okay so we just deployed uh our nft contract locally so same thing as the the your contract at first this is the your collectible so it's it's it's all very similar once you know scaffolding you're going to be able to quickly know where to go in all of these branches and understand how to dive in but you're collectible okay we're ready now i think it's working so let's follow that let's see if this comes up there we go awesome looks like scaffold eath right but guess what it's a simple nft example okay and we did a yarn chain and that brought that up we did a yarn deploy and we've deployed our contract tells us to go to the front end all right next thing is it tells us to edit this mint script okay cool so this minting script needs some address you'll notice in the simple nft example you don't have to write like any code this is just getting you context and getting you started so i'm going to copy our front-end address i'm going to paste it in here and i'm going to do a yarn deploy and now if i go over and debug these contracts we're looking for the owner the owner was that dude oh this isn't going to this is this isn't going to change the owner oops i went too far down a little tangent there okay we've deployed the contract we're not the owner the key thing is we put our address in the to address so so the other dude's still the owner the contract is deployed we're not worried about that what i'm doing here is there's a mint script and it's going to mint to whoever i put in here so i'm going to have it mint them to this front end address you probably want to connect your meta mask and mintum to then as if you're doing it on a test net or something like that here we're just local so i'm just going to have whatever burner wallet i have and let's see i am going to try to mint these to that address let's see what happens okay so it looks like it takes yep there we go there come here come the nft so it takes this this little buffalo painting of mine it uploads it to ipfs you end up having to make a manifest for your uh nfts so so an nft is basically just a token uri and an owner it just says this address owns this nft and so what we do here is we have this manifest so basically what you own is this manifest and then there's an image that links to either another image and something else in ipfs or something on some web server somewhere but that's that's basically the ownership you're owning this and it's going to ipfs and you can read from there and learn learn learn more about ipfs this this will this will talk through it too but uh this example is just meant to show you here's what an nft contract looks like here's a minting script that sets you up to mint a bunch of nfts and then once you have that you basically have an nft front end that let's see let's do that thing where we brought up the second account right and let's grab that second account's address and let's send that second account this cool bison there we go now they have it right let's send them another one send them another one or or maybe we want to send it to like vitalik.e right it'll do ens resolution it'll look out vitalik's address and it'll let me send this fish to vitalik on my local test net for some reason i don't know that's what that's what i do though okay cool so that's the simple nft example that shows you how like all of these branches of scaffold eath are very similar in terms of the the setup the location of things you you've got your hard hat folder your react app folder and then some subgraph stuff and so your front end is just react app app.jsx and your end is just hard hat and then your contracts are right there right then there's some scripts like deploy and mint uh etc okay so next we are going to move on to the next branch and that's the next challenge so if we go to let's see here ethereum dev speed run and we go to challenge one is the staking challenge okay so here we go the staking challenge will take you through and and this is the point where we don't have you you're gonna have to write the code yourself right at this point we don't have like the the contract is ready for you but it's empty and you're gonna have to have some knowledge so this is when it's gonna start testing you at this point so you'll you'll wanna have a pretty good amount of solidity learned and you'll wanna get in and have uh you know the the context for things you'll want to go through the simple nft example you may even want to extend the simple nft example to a buyer mints but then you're ready to go we've got challenge one so challenge one is to build a staking contract it really is like kind of what ethereum is for i mean it's for a lot of things and we can come at it from a lot of different angles but if we we think about a decentralized staking app what we want to do is figure out how to get a bunch of jerks to be able to coordinate with each other right this is this is we're scaling up coordination so with this with this smart contract what you need to do is you need to build a contract in which a bunch of jerks can stake in and they don't have to trust each other all they have to trust is the code and the smart contract and knowing the network is going to only do what that code says so what we'll do is we'll set up a a smart contract and we'll say only well there's a lot of extra writing here so someone got in here and did some some changing around what we'll do is we'll create a smart contract and we'll set it up so everybody can stake in and the way it'll work is it'll kind of be like a state machine you'll have the state machine will be in staking mode and will allow anyone to stake in and then we'll get to some time timestamps so you'll learn block.timestamp you'll learn uh man i'm like thrown off by all this writing it's like way too verbose i don't know i i don't even know who wrote this okay anyways that is uh another note i will make and i'll get to that later okay so you've got your staking app it's like a state machine you have a mode where you're in staking mode and someone can get in here and stake into their contract uh you then get to a block.timestamp and you write a rule in your smart contract that says if we're at some block.timestamp then we move that state machine into either deposit mode or continue on so you'll learn payable functions you'll learn how to stake into an app you'll learn how blocked up timestamp works you'll make sure all the jerks either get together and coordinate and you move on to the next level or it flips to withdraw mode and if you weren't able to get enough staked then uh they can withdraw from it yeah unlock mechanism man there's about 80 more words than there needs to be here this is this has been rewritten by someone okay next challenge two okay challenge two once you learn how decentralized staking works what you'll do is you'll build that smart contract a front end will show up for it and you'll uh you'll post it you'll actually deploy an app and you'll you'll deploy a smart contract and you'll deploy an app and you'll post that into a telegram up to other people that are building on scaffold eath and they'll stake into your contract challenge two it's time to move on to the next challenge what you'll do here is you're going to oh man so much text wow okay see what you'll do here is you will build a token vendor so you're going to deploy an erc20 token and once you deploy that erc20 token you're going to deploy a second contract that is a vendor and those tokens will get locked up in the vendor so you'll need to learn contract to contract so in this one we'll learn how an erc20 works how to go how to make contract to contract interactions and then at the end down here 40 pages longer you'll find that you what you need is you'll have an approved pattern somewhere you'll have an approved pattern where the vendor needs to buy the tokens back once once those tokens are locked up and you sell those tokens and someone else owns the tokens you'll need to be able to sell the tokens back to the vendor and so this is a really strange pattern in ethereum and it's a real gotcha it's something to be learned so what you have to do is you have to go to the token contract you have to approve the vendor contract then you have to go to the vendor contract with a second transaction and make your i would like to sell these tokens and the tokens are then taken from out of they're taken from you so one the vendor contract goes to the token contract and asks it for your tokens you get your token your tokens go to the vendor and then the vendor does something with them the you'll you'll see you'll get into this like oh man this is weird but it takes two transactions to make that happen and it's it's good for you as a builder to understand that approved pattern and understand how that ux is not the best and and you'll experience it if you're ever on uniswap if you swap eth to a token it's one transaction but if you swap that token back to ease you have to hit approve you have to wait for the transaction to finish then you have to hit send and it's a two transaction clunky thing but that's that's how erc20s work and that's uh something something to be learned for sure okay now moving on okay after you've got those first two challenges you're you're really kind of about to hit the ground running you've kind of got a lot of things if you're stuck on something this is this is when you can reach out to me about like okay what what is next austin what should i be working on and i'm probably gonna say you should go build a dex and and it sounds complicated but it's actually not that bad uh this article that i have in the speed run takes you through what it what it takes to build a dex oh no okay so let's get down to really it comes down to to make a decentralized exchange you you have reserves of both tokens and and anyone can come in and kind of swap between those reserves and whoever provides those reserves has this lp token that represents their reserves and as you swap a small fee is left behind and then when i withdraw my reserves i get that fee on top of things so the the real key is that price function let's see if we can run it down let's just do us yeah there we go the the price function here is there it is this this bad boy right there so you take that and you paste it into your your scalability and you've got a price function and then if someone wants to go from one to the other they'll use that price function to swap and if you if you zoom in there it's basically the it's looking at what the the output reserves over the input reserves minus how uh plus what you want it figures out the ratio of what you're putting in and taking out versus the reserves that you have and it gives you if i put one of these in how many do i get out of the other token so i'll probably have you go build that if you finish both the challenges and you you're like hey austin let's let's get on for a mentorship says hey austin i want to go you know work for another company can you connect to me i'm going to say did you do those first two challenges i'll probably say did you build a dex go build a decks it's going to take you an hour or two with scaffold eat you'll have a front end you'll be able to swap tokens to eat within that decks uh uh then at that point you really like i let's let's get on a zoom call and let's talk through kind of your blind spots and let's figure out what's next but what i can tell you is you'll probably want to make some kind of randomness game some kind of little dice roll game or something right don't deploy that to mainnet you'll get me in trouble don't do that but you'll want to put set up a dice game something to learn about randomness right okay maybe not a dice game how about a uh nft with a random trait or something like that that's much better but randomness is really hard on a deterministic public blockchain because all those nodes have to come to the same conclusion every time so you can't just have like one node giving you a random number right so what do you do do you go off chain and get a random number from an oracle do you get a random number using commit reveal what the heck is commit reveal you'll learn here go check out this uh this branch and then for for that vrf go check out this branch and then what you'll find is the the oracle problem is another really interesting thing to dive into dive into oracle's dive into why oracles are complicated why can't why can't we just have an api over here that's serving up the temperature in in fort collins and then i can pay out crops if that temperature gets too cold or something like that right it's a really complicated problem dive in and learn why uh then uh you'll you'll have a lot of like defy things right there's a bonding curve so if you want to learn how a bonding curve works uh there's swaps right that's that's the kind of what we did with that dex but then you can do it you can basically you probably don't want to write your own swap you probably want to use unit swap and there's tons of other composable components within the space so you can use you can just drop a swap component in from scaffold eat and it will back to uh uniswap and then there's the lending component right defy and lending lending was huge for d5 once once you can lend a token then you can do all sorts of really crazy things like shorting tokens and leveraging up and all stuff that like like everything beyond that is like over my head but tons of really neat e5 stuff and it kind of starts with lending and we have a whole kind of uh article and episode on how to build ave into your scaffold eath and it basically kind of like builds in the ave interface and interaction but but it's in your own scaffold ether app and then we build uh kind of an eight into learning branch where we show you how to deploy a contract that leverages up by borrowing and swapping and borrowing and swapping a token okay next next gotcha in in the world of ethereum or next interesting thing to discover is signed messages now if you've if you've ever seen me tinker around with e field uh i use each build all the time to explain to people how uh all the fundamentals work if you have someone that's new to getting into ethereum that isn't a web 2 developer send them to eth build and they can look through things and kind of learn here from the videos they're a web 2 developer just tell them to speed run ethereum of course uh but let's get in here and build some what i want to do is just build a quick little example of how signed messages work so you have a key pair right and that's a private key and an address and you have some kind of uh let's see a way to generate that so this as long as this is sufficiently random then this address is not going to be used by anybody else right if i picked all zeroes here someone already has that one right but if it's sufficiently random there's enough of these that you can try and try and try until the heat death of the universe and not find a collision right and so what are these key pairs really really useful for well they're really really good for signing and recovering right and what i mean by that is i'm going to take this private key i'm going to put a message in here like hello world and i'm going to sign that message here's the message and here's the signature so this message along with this signature can go across any kind of insecure network right and if it gets tampered with it's not going to recover it's not going to work so the only way this is going to end up working is if this is exactly this message and this exactly this signature it's going to recover to the same address so what that means is i can sign something over on this side and i can send it through all sorts of whatever and if it gets uh you know tampered with or messed with it won't work on the other side but if everything comes together someone can use maths to recover that sure enough that dude did sign this message and that's cool for this but what if this is more like an object right where it's uh more like you know alice uh or like a two alice from bob you know amount 100 right all of a sudden now bob has signed this message going to alice and everyone on the network can see that it is valid that's the trick is is we can have now these transactions that are getting signed so that's that's signed messages and being able to sign and recover is kind of a superpower here of their ec dsa signatures so what you'll do though in this sign and recover is you'll learn about that and you'll learn that you can you can sign messages and you can send them to someone else and they can recover and that can be all off chain and this is this is called a state challenge you can create a state channel that sort of mostly works off chain except for there's a smart contract and it all of that stuff goes to the smart contract one time to kind of settle up the state channel or something like that so you can do a lot of really cool stuff with with off chain signatures and just to just to dance on that a second if we go to scaffold e and we looked at sign in with web three there's this really cool branch of scaffold eth called sign in with web3 where uh it sets you up with an app where someone connects their wallet and then they sign a message right and that goes to a back-end server and verifies that that message was correct and and posted up here so you can sign and recover messages uh uh using this this server and you can verify them with the server so you can do this kind of sign in with ethereum and by the way if you go to like austin griffith.tv there's like a live example of this where if you sign a message and prove that you have ethereum there's like a video where i chug a beer at the end or something like that so so these these message signatures are are really powerful and you'll learn that in the speed run and uh what you'll do what's really cool is then these sign messages can also be recovered from within the smart contract and by the way that's what happens in that last signature of that state channel too and what happens is not just signing and recovering off chain but i can sign a message and send it to a smart contract and the smart contract can recover the send the person who sent it which which allows all sorts of things like i i hint at meta transactions here but basically like i sign some kind of call day i sign some kind of message and i give it to alice and alice pays the gas and puts it up puts it on chain and then the smart contract takes that transaction from alice and looks in there and gets the meta transaction out and checks to see who signed that and sure enough it was me and and so the smart contract can say i don't care who submits it but whoever signed this meta transaction i'm gonna do something on their behalf or it absolutely has to be austin or this couldn't work or something like that so that's signed messages you'll you'll go through that as part of the speed run uh and then once you have the the sign messages you'll want to do just real quick you'll want to look at these uh the applications here so many could good applications and also hacks like learn how all the hacks just dig through these just it'll give you such a better perspective of how ethereum works by learning how all those hacks work but build a multi-sig wallet build a smart contract that will track transaction data and then have people vote on it and if if three out of the four peop signers on this multisig say yes then you can execute that transaction and it'll be the smart contract executing it right so it's like we have this smart contract and we all vote to buy an nft and if three out of four of us vote yes then the smart contract goes and buys that nft and now the smart contract owns it right we would have to set up a new transaction to go like send that that that uh thing from within the nft out of the multisig or something like that kind of hinting at a dow right most dows all only need a multi-sig but but eventually you get more uh complex stuff uh so right in here we've got this multi-sig wallet and once you've learned that you're ready for like the final project of the multi-sig and that is to build a signature based multi-sig if you can build a signature based multi-sig there's a couple tricks and some gotchas it's not that complicated but once you can do that like i i can take your your challenges that you've built on scaffolding and that and i can i can level you up to a handful of places in the ecosystem there's there's every everybody is looking for web3 developers but it's so hard to figure out who's actually a web 3 developer because once you get up and dumped up that dunning krueger and you learn the language and someone says can you build a great smart contract you're like heck yes i can because you you think you know everything but you have to go through this whole speed run you have to go through all these gotchas but once you have all of that this is going to be really easy to get hired in this space it's going to be really easy to upgrade to like now i want to start learning auditing or higher level stuff or i want to just build my own product and this will get you dangerously close to doing that i want to look at maybe like one or two more really interesting examples uh speaking of that multisig i think the gnosis safe starter kit is one of them oops this is the open zeppelin one let's that's hypnosis safe starter kit so what we're seeing is as i talk to a lot of dows they don't need a really expensive uh a really in-depth smart contract for some of the things they need what they really need is to be able to prototype quickly they need to be able to still be sufficiently decentralized but prototype and build something cool so this gnosis safe starter kit is kind of this this really handy thing for this basically it's it's a nose is safe it's kind of like a smart contract wallet multisig right it's a it's a really complicated multi-sig that does a lot of other cool things but it's basically a multi-sig where you have multiple signers you have some threshold of signers that you need to be able to send something and and that is pretty decentralized right if i have 15 signers on that and i have to get eight of them or 12 of them together to be able to make a transaction work then basically like we're voting each time right so the scaffolding or the gnosis safe starter kit is saying hey build your decentralized experience build your dow build your results oracle build build your your decentralized app kind of in the front end and with each action that's really important make it be a vote within your multi-sig so it's just assigned uh you're just signing the message to go to the multi-sig to to let's you let's just say using the results oracle uh let's just say we're retroactively public goods funding uh some project and we say did this project get finished and we put uh you know me and owaki and vitalik on a multi-sig and we put a hundred million dollars in there you know i just gotta lay it around i just chuck it in no big d and then right there the front end is like not this like complicated multi-sig or anything like that it's just a website that says you know did this thing get completed and if you're one of us signers you land on the page and you just have a yes button and a no button right you hit the no button and all it does is sign the transaction that says let's return the money you hit the yes button then it signs a transaction to send the money to to whoever it goes to so it's just a nice way to make a quicker uh experience that settles to a gnosis safe without actually having to write a complicated smart contract so that's one of many many many uh different branches and and once you're doing well and you're contributing a bunch to these branches check out the build guild and the build guild is basically we're we're a public good we're a bunch of builders and we're building generic components using scaffold eath and then i'm funding i'm streaming eth using another smart contract we built to all these builders so each one of these builders can get in and they can withdraw from their stream whenever they turn into work let's just go look at this dude's recent work we can see that oh cool he has built some stuff what is this a conditionally minted nft right so so this dude was like i'm gonna build a conditional mint nft where i think it's like if you own one other nf if you want a specific other nft then you can mint a new nft right handy little uh prototype handy little thing to show off and and he got paid from the build guild to do that and then it you can even move on to like moonshot collective.space and we're doing something similar we're building generic components but it's more for the dow space we're building coordination tools uh we just launched like tip.party which is another tool we built we have a funding tool for coordinating where similar to coordinate we're able to on at project milestones kind of get everyone together and vote and and pay out depending on how how well that project went uh lots lots of good stuff check out scaffolding check out the speed run what i'll finish with i'm probably like way over time but no one's kicking me off so i'm going to keep talking for a second i'll finish with if you're a web 2 developer and you're thinking like wow i can't quite get my head around certain things there's just a lot of gotchas with ethereum and you kind of have to go through the speed run to really learn like what they are one one good example of that is if you're a web 2 developer and you need say some compounding interest to happen you know what once a day i need this this script to run and you're like well i'm i'm a programmer i'll make a cron job right well you can't really do cron jobs in in smart contracts it doesn't really work like that but you're like well wait a minute i can just build a script on my server and have it check in and make a transaction every night to my smart contract but then like one day like the power goes out or someone attacks or you forget to upgrade it and then all of a sudden the compounding interest doesn't happen and your whole d5 protocol falls apart right you can't have some centralized server just making that request right so the trick is you you need to set it up so somehow you incentivize folks to do that right so you go into your smart contract and you set your smart contract up so it says once only once at midnight anyone's allowed to check in right it's a vending machine anyone's allowed to get in here and poke this contract and i'll pay them 10 bucks to do it and that's the trick like i'll pay for your gas and an extra 100 bucks on the top of it if you get in here and compound the entrance each night for me and if you correctly incentivize the network someone is going to check in and if you correctly set the rules so only that only one person per per week can do that then you'll you'll have you'll have correctly built a cron job but on ethereum so i think that's it that's that was that's just a good example of just like thinking in terms of ethereum thinking how to build a decentralized app uh hit me up so i'm oh i was going to share austin griffith a long time ago but let me do it again i am austin griffith on twitter this dude right here this dude right here i'm a i'm a loogie right now i'm at austin griffith reach out to me on twitter uh really what i'm gonna say is have you done the speedrun yet so what you should really do is try to get as far as you can through the speed run and then uh reach out to me on twitter or telegram and i'm happy to help we'll get you in get you building something uh get you kind of just learning how it works and uh hopefully if you're providing value and building cool things we can stream some heath to you or get you somewhere where someone can support you or get your product launched right get your product or prototype out there into the wild and into the hands of builders users awesome happy monday seanan andrew do i need to do anything else how we doing on time are we good to go does anyone have any closing questions we are good we're good we're good awesome thank you guys thank you very much thank you oh i see someone say would it would it make sense to migrate existing projects there's a really cool way to do that since the since scaffolding kind of has this smart contract editor a great way to find out if you want to go to scaffolding is to just take your smart contract and paste it into scaffoldings and and it'll take a little bit probably to get the version numbers and everything right but then you yarn deploy and as soon as you do that once you'll have like this whole front end that's already like ready to go that like knows everything about your smart contract and you can tinker with it so it's like once you get that point that far usually you're like oh wait this is this is actually really easy to migrate so i would say definitely if you want to find out if you want to migrate to scaffolding to just try pasting in that smart contract and go from there uh let's see realistic time span you you could complete the the the i mean like if you really did it quickly i could i could probably complete the speed run in like a couple hours but really it would it should take you a couple weeks if you're learning it slow i mean maybe a week but then but then like you'll you'll do a week of the speed run and then you'll do a week of maybe like building your own projects or or extending a few different things and so like within a couple of weeks i think you can really get up to speed with a lot of things in ethereum but there's always like blind spots and things like flash bots and mev and and there's always a deeper rabbit hole to go down to but just like you can scratch the surface of ethereum in a couple weeks going through all of these different topics awesome hopefully there will be a recording of this let's see there will be a recording post awesome global youtube in a little bit dope awesome all right thank you guys middleborough hey everyone thank you austin that was awesome signing out everyone see austin in the on the internets see you guys 
where the metadata is changing due to a contract interaction on the nft contract itself but if your nft contract is pointing to another contract that renders your metadata events on that contract will not tell openc to change to update their cash and so 4906 is useful if all of your metadata is being rendered inside of your contract and if it only changes when someone executes a transaction in this case that's not how it works because the time is always ticking down in the uh in the time left in the current cycle for example so to solve this I wrote a in typescript I wrote a process that runs in a pm2 on a VPS that goes and fetches all the token IDs what is the number of IDs in the nft contract and tells uh openc to update each one one after another ideally this is made obsolete in the future by openc uh supporting an API endpoint where you can have you know just tell them one time update the whole collection so far that's not the case so if you have this problem you can also go and steal this repo uh and and maybe it'll be useful for you uh once the metadata rendering was complete for the Juicebox protocol I decided it would be fun as a stretch goal to make these things collectible because as I mentioned these nfts for the Juicebox nfts represent ownership of a juice box and so not everyone can have them and you can't sell them because that nft is the ownership of the project and so you probably want that in a in a multi-sig or in an on-chain governance contract so how are people actually going to see this metadata that you've spent so much time creating my solution was to create something called Juicebox stock cards this is an 1155 open Edition contract with a very low mint price when someone mints one of these cards they receive an 1155 in their wallet the proceeds go to the project in question and uh the metadata for this 1155 open Edition is simply a reference to the juice box Project's own metadata so as a consequence essentially these open editions are like little Billboards that can be in your followers wallets in their rainbow wallet they can check the status of the project by having an open Edition that has the exact same metadata as the project itself foreign so you can make your own metadata too and I thought it would be nice if I uh provided something to get you started uh so you don't just have my project as an example uh here are a few links uh the first one I think is the most interesting one it allows you it's essentially a forge solidity repo where if you download it install the dependencies by calling Forge install and yarn install uh the instructions are going to read me and then hit uh Forge test dash dash ffi you'll immediately have an SVG rendered from solidity in your browser so I think we have a few minutes so maybe I can actually demonstrate that actually before I do I'll just explain the other links uh so the first one is this SVG demo repo that I'll show you the second one is a boilerplate if you wanted to write your own metadata contract that's compatible with the Juicebox contracts that I wrote you can Fork this project it has all the Imports already in there it's going to work right out the gate so it's a sort of a little bit of stuff on top of that SVG rendering boilerplate in the first link and the third link is to the docs for everything that I've talked about today uh actually here I'll quit out of this for a second so this is that repo I mentioned in the first link um oh you can't see that can you uh there we go so uh this is that repo uh uh oh no sorry this is the wrong one oh I see I have to look on this screen okay um so this uh you can see here we have these are the properties that will be like the uh properties of the nft not visual properties but uh properties that you can sort by in openc for example and here we're generating the actual SVG so if you download this and you simply install the dependencies and there's instructions for that in the readme and then you call Forge test ffi it's going to open it on my screen so I gotta move this over so this is rendered from uh solidity so if we go here it's a little difficult for me to see but if we change this to I don't know blue obviously better to use actual hex colors uh oh sorry it's on my screen there we go so you can start playing with an SVG like right away it's very very fast and I encourage you to do that so one of the next steps so in this project what I've shown you is some tips and some lessons learned from uh creating an on-chain SPG rendering contract that just visualizes what's happening on chain in a dynamic image the next step is to create an nft that is interactive and to do that you would need to bundle in something like ethers or web3js into the nft potentially drawing it from an unchain Source or potentially grabbing it from a regular HTTP route like uh you know from a CDN Etc so the promise of this is that we can have nfts that not only visualize what's happening on chain but allow you to write to the chain also by constructing a transaction request that metamask or whatever wallet you're using can understand and then propagate it to an RPC the problem here with a missing piece is that as we mentioned earlier openc sandboxes and caches nfts and so you can't have interactive you can only have limited interaction inside of the openc frame and so the second piece that I think is interesting that people might want to work on is an nft app browser that is to say a website most likely that allows you to browse nfts and interact with them to do things like construct transactions that you can propagate on chain so that's my talk thank you very much for attending and if anybody has any questions I'd be happy to answer thank you any questions yep oh good question um I'm not super deep on what all the prizes are that are available I don't know if there's anything where this will be particularly beneficial but one that comes to mind is I know 6551 the token bound like nft owned wallets could be interesting to have those wallets rendering something on chain representing what's inside of them with no off-chain dependencies so for instance uh yeah you could have an nft where you send it an asset and then it shows it and it's not relying on ipfs or http um I think also some of this on chain stuff could be very interesting on noses chain or polygon or other l2s or side chains where gaspies are lower you could do even more aggressive things not just with the rendering but with having more interactivity uh to to write to them to change what's being shown any other questions yeah okay if you're uh yeah there's a you most likely have to sign a transaction if you're logging into an app that wants you to verify that you own a certain wallet or if you want to send a transaction so those are cases when foreign yeah it's uh it is the question is if you're making a game do you have to pop up a transaction request every time you want to do some in-game interaction and if the game State needs to be modified on chain and you need you want to restrict actions to the owner of a certain wallet then yes you probably do one alternative is to write your own app let's say a mobile app where you keep the keys and it's more of a custodial system so instead of asking the user for permission to their key you make every button just work and you don't ask them for permission to sign with their private key you just do it on their behalf that's that's a way around that yep yeah you could I would suggest you probably want to make your own wallet built into your game yep any other questions okay thank you very much [Applause] whoa one two three yeah sounds like it works you can see it there perfect so I assume I can start it's already the time um welcome everyone my name is Nick and today we will be the like mastering our development skills around building dubs specifically on the xcc network um so I have been working in as a software engineer for the last 14 years approximately and my first kind of interaction with a blockchain space overall was in around 2011-12 through one of my mentors the only season dress and today I am the CEO of analysis we're a research and software development firm based all over the world pretty much um today's presentation will cover those for pretty much aspects so give a brief introduction to xdc um I will share with you my observations and then we will all together start building a quick web application for that you will need your laptop node.js installed and quite some patience so quickly about xcc the XC network was founded and established in 2017. um by a group of individuals which believed strongly in the blockchain technology it's a proof of stake Network um it is quite fast pretty robust and very cheap and there is a amazing foundation and Community behind the network who are making sure that all the developers and community members are very happy within the environment so and now I will share with you some of my observations based on the companies established our companies established the last three years so we have seen quite some dabs on xdc network on flyer Network where we are also building and so on and seemingly there have been quite some problems with those dabs um most of the times we have noticed that because everybody I believe in this room will agree that the onboarding of a user and the user experience in the web free is not the most like easily understandable thing if I showed a flow to my mom she'll probably freak out and not speak to me for a couple of days so the one thing that I have personally noticed especially in like comparison to more traditional markets is that there is no user flow we do not structure as developers our thoughts we usually go all in and we're like oh this product should have those 100 features all together at the same time and I should just throw them on the interface the user will figure it out because he's smart and that's usually not the way to go because the quite opposite happens the user doesn't know where to click doesn't know what to do she's not even sure what this thing is doing and then he leaves So based on that we're often giving either too much information or too little information um most probably my mom as I mentioned an example previously doesn't know what is a throughput doesn't care what it is doesn't know what's the gas costs doesn't care what is gray all those little things should not even be of her concern um and usually there are stones of dead ends in user experiences around a web free what does that mean you do one thing the information never refers uh you now do not understand what you're supposed to do was the interaction you initially did ever completed what did exactly happen and for all those reasons users just leave your platform and most probably never come back so a very very important tool is the user Journey it's very important to understand our users and that is probably something that we need to do better um one of the greatest tools of web3 is that we have a direct point of communication to our community and for the developers of the previous let's say decade that would be just a tool like a golden I don't know um shovel or something because you can do a b testing without doing any assumptions anymore you have a direct feedback of the user to tell you exactly how they felt and what is this about to them so you know Bruce Lee famously said be like water right which means like listen to people in this case and be ready to make the change not to be opinionated you might be totally wrong about what you're assuming and for that reason it's very very important to create your flow so in today's Workshop we will be building a very simple dap which is gonna allow you wrap and unwrap a native currency a native currency is the main currency of the blockchain for example on ethereum is The Ether or if token as most might know and you can use deposit of withdrawal functions so some functions on the blockchain which allow you to create or take back your ethereum with this rap native assets or in short not so um today we'll see that the user enters a web page and in this case I will in short show you how you can have your application interact with multiple networks instead of just one and then the user needs to select a network on which they are connected to or they want to use the application select a function which they want to perform in this app so they need to choose will they wrap or unwrap and then they can see the balance that they have available to perform that action and they can add an amount that they want to interact with and submit the transaction that action would let them into two possible scenarios the transaction failed or the transaction was successful if the transaction failed we need to show the user an error message and in that case taking them back to the step where they add an amount and submittance to the transaction and if the transaction was successful we need to show now to the user the updated balance and to end the flow pretty much to tell them hey your transaction was successful good job you have nothing more to do um yeah there's many steps in this flow as you will see from the code um I hope we will be able to finalize that in the next 20 minutes fully if we will not be I will be right outside the code will be public on GitHub feel free to ask me any questions and to go through that right there um yep so that was our user Journey it is very important when you're building something now that you're in this hackathon to sit down and go through the exact Journey you want to deliver at the end of the hackathon because many times that's how teams kind of fail to focus and lose the deadline and never deliver something actually functionable the template that I show is a default template by a tool called figma you can find it online and you can use a figma the figma tool for free as an individual for the next steps you will need as I said node.js any source code editor we do not discriminate the choice of that a browser and a lot of patience because that's pretty much the main thing that you need to have as a web free developer so be prepared um and now let's go to the fun part all right so I will show you some codes but first of all I will ask you some questions so how many of you have actually built a front end uh decentralized application before so two three four not bad awesome and how many of you have interacted with one at least one before this date okay approximately the same amount of people um so awesome today we will use Technologies uh as nag.js uh Tailwind CSS um wag me which is a helper for web free related actions and rainbow kits which allows you to utilize the wallet connect so let me open my editor at this point of time I will simply assume that you have your node.js set up and that you have your vs code open I will actually give you a couple of minutes to achieve that now as I said I will make sure that I will put all this content online so don't worry if you missed something and go on in on your own pace so make sure that you are not trying to run after me and one very important aspect Feel Free at any point of time to interrupt me and ask a question that's very important for everybody to know that we're all following and it's like there is no reason to be shy we all did something for the first time and that's how we all learned so to start with we will create a new Next app the command to do that is npx create next app at latest and I will name this application is global hackathon and now it will ask me several questions would I like to use typescript with this project I definitely would es lint yes definitely Talon CSS now this is something that I personally usually choose no to I personally write most of my CSS myself but you know that's something that is up to you would you like this project to use SRC directory yes now for the upper router because there is more documentation online on this solution I will choose no right now so anybody who is watching online or yourselves would be able to find more material online and would you like to customize the default Elias for the Imports no and this will now given that we're connected to the internet and yes we are install all the needed um tools and dependencies for our application to be able to run okay and that was indeed successful and now I can run my application by running npm Rand Dev oh that is not true I'm sorry I will need to open actually so right now I am in my computers Repository and now I will need to open the project that I created wherever I created it uh should be yes right here so I'll open this folder with the vs code yes I trust the authors and now I can run npm run Dev right by running this I can check in my browser that I can see the screen right here so our next JS application has been successfully installed and now we need to install all the other tools that we potentially will need to interact with web free right so the tools that we will need as we said previously are rainbow kids wag me and one thing that we will barely use but it is needed under the hood is VM so those modules help again from the developers to interact much easier with with the blockchain most of times the biggest problem that both myself and most people that I worked with uh had is the ability to refresh pretty much the data without initiating extra functions in our code so this is something that wagme solves great time and wallet connect is or rainbow kit in this case is something that allows us to let the user connect with any wallet they have they might have a ledger they might have a metamask they might have a rainbow wallet so they wouldn't need to care about the exacts of which wallets they need to use so now that we have everything installed you will be able to see all the code base here and our main folder that we will care about is the SRC folder most of our changes will be done here and to start with I will open the app underscore app.tsx file which is the main file where everything starts so everything that I have on my application um it is going through this file in order to be rendered I will add import pretty much the styles from rainbowkids so it's at rainbow kit me slash rainbow kit slash styles.css and then what I need to do is I need to set up the wagmi configurations I need to set up the rainbow kit provider and I need to make sure that I will say tell my app which are the networks that I wanted to be connected to so let's start one by one so first of all we need to get the rainbow kids to import the rainbow kit into the application so that is done by import rainbow kit provider um so they get default wallets is not really necessary here and then we will also need config chains and wagmin config chains functionalities added here so you can see that I imported those three functions here if you are wondering where did I found those I found those by Googling rainbow kits and on the website of rainbow kit there is a view instruction website if you want to use your copy paste those additions it's it's the easiest way so now I have most of the needed functionalities are modules imported now as I said I will need to import the network which we will be connecting to and a provider a provider is almost like an API Handler I would say which is allowing us to connect to the blockchain as an API so there are several types of providers in this case I will show you the public provider functionality but there is also the Alchemy provider if you're connecting to the ethereum network you most probably want to use the Alchemy provider because it's much much more reliable so I have imported all the functionalities that I need at this moment and now I'll start writing my components so now we know that the application the only thing that it does it's returning any component that is passed to it through its pages and in this case I want to configure my chains so the way to do that is the function from wagmin configure chains and that returns to us an object with the an object of array of the chains and the public client now from there on we will need to create the connectors which is something that the wallet connect uses in order to understand which provider and which chains we're connected to and for this one you would need to find an application ID a project ID to be more fair the project ID can be found on the wallet connect Cloud website where you need to create an account with an email and a passport you do not need to connect any wallet and so on and last but not least we need to create the wagmy config in this case to auto connect to use the connectors from the above and to use the public clients as the client for the the blockchain so now all of our setup is done we can see that there is no errors right now as the lender worked and once I will add here the two last uh bits which is the wallet Wagner config and to the Wagner config Boop that's on config equals wag me config from writable and this closing statement right here is wrong so this is perfect and now I need to add the rainbow kit provider to to our application and I can do that by adding this function and this needs to know now uh which chains we're using and you can identify that by the variable which we defined here named chains now this looks very straightforward and this is what you would go to a point if you would have followed the Rainbow Kids configuration setup now there is a tiny problem here that if you will actually run this code it will not work and I can actually show that to you although there are no errors whatsoever on the code base if I will try to run this this is what I will get which is not what the Rainbow Kids websites is telling me unfortunately sorry rainbow kit no offense but what I'm trying to say is that this is happening all the time in the blockchain space and you need to be ready for that that's why the patients um in our case I have found this morning what was wrong and what happens pretty much is that next.js is running it's a server size rendering that type of um framework what it does it's rendering what it has to pretty much create the UI by itself in the on the server and then it only is serving what it rendered already to the user at the time that it's rendering it doesn't has have the fs module which is the file system module for JavaScript and that is why this thing breaks so now I need to give to the config some kind of fallback for what is happening if the file system is not available at the time that I was actually loading my code and now that I added that fallback you will be able to see that once I refresh this page it will work right um now that is a job for all of us to do uh in the space when we find an issue like that most times we need to open the GitHub issue we need to talk to a bunch of developers until like several weeks later we will be able to solve our problem so now that we have the wallet connect application setup because I have quite a small amount of time I will rest this quite a bit so right now what I need to do is I need to add a button which will allow me to connect my wallet and then I need to create a form which will wrap and unwrap my native currency so I have pasted from the repository which is live this piece of code which is Tiny really it is changing the title on the top left and on the top right it is adding a button which says connect wallet right and now if we'll go to this website we'll see that how easy it was to connect to other connect wallets um button if I click the button it allows me to choose from a selection of wallets very simple for any user it even tells the user how to get a wallet if they don't have one and then since I do not have installed on this particular window of my browser metamask I can choose wallet connect and I can scan this QR code and I can connect with my phone for example and use it through there but for now um I will actually open it on a wallet which I have in my my task which is the wallet right here and as you can see I'm already connected but I'm not connected to the ethereum network so I can disconnect and I can connect it again once I connect again it will automatically prompt me to switch to the ethereum network and once I'm on the ethereum network I have my UI updated with all the information needed now that is pretty cool and I am also able to show the chain status so if the user switches to the wrong Network they can see exactly that they're on the wrong Network which is pretty cool but now let's actually dive deeper into some actual functions so in this case I will create a new folder which will be called components in order to have our code base a bit cleaner and I will create a new component which is called form into this folder this component oops this component will be a quite complex components in this case and it will do quite some things so starting from the from the top we're importing quite some functions from wagme an ABI you States some functions from VM some Spinners and notifications pretty much Library so what do we do one thing that we do is we're asking for the developer to provide the type of transaction will be will it be a wrap or an unwrap transaction into props and then the user can set the action also from outside of this components now I will really quick install the remaining um to uh dependencies and I will show you exactly how it looks oops or I will not really depends so I installed react Spinners which will allow us to identify our loading States and I am also installing this little notifications Library so the idea is simple that when a user clicks the button there is a spinner coming up if the transaction is successful the user should see a notification coming uh to his screen right some very very simple things use contract to prepare right very important function this helps you to prepare the transaction before the user clicks any button and that will allow you to make sure that there is no issues with either some mods that you're doing on the front end or some other kind of you know malicious behavior that your user can do you can disable it to him by saying when is this function enabled or not and you can also um provides a um watch so there is a watch function which you can set as true um which I will set in a second what does it do it allows the user to see in real time what is exactly happening with his balances and anything around his screen so I will add the form component here and as you can understand here it will tell me to import it and I will also add the state which is the action awesome and now there is something missing here which is the ABI so the ABI is something very very important and it's something that you and your fellow back-end developers or smart contract developers however you would like to call them um are very you will have to find the common language on this one the ABI is almost something like a API document if you wish the ABI tells exactly to the programmer which functions are available for him to access through the blockchain and it's definitely not a DOT ABI file it's a Json file um and now that I have added that here you can see dot dot slash constant slash Abi awesome um and now we have this piece of code which in our case should work but it doesn't let's see what's going on around here and if somebody needs to ah yeah I'm I know what's happening here so the application tells us that it doesn't know what exactly is the use notification why is this happening is because we added a module which we haven't defined in the specifications of the application once I do add this property right here which is the notifications provider it will allow me to render my application and now I can see this exact UI right um it is a pretty simple UI shows me the balance that I have on it and I can wrap or unwrap based on what I want to do but obviously those functions are right now based on my code pretty hard coded so the next step of what I need to do is to add the chain on which actually those functions are available and this is something very very important as not quite documented I would say so you can add custom definitions of custom chains in this case I have added several Networks and you can see that I have to provide quite some information what does this mean is that if wag me or wallet connect or anybody is not providing me that specific Network or it's providing me that specific network but RPC the RPC sucks and I want to use our own internal RPC I can go ahead and override every single definition that there is for even for ethereum right and I can use my custom definitions with my custom Networks to do that I need to create this little object here and then obviously to export it from this file and now in place of mainnet right here I can go and I can see xdc minute right and it will bring it from the file that I just created and now you can see that I'm connected to the wrong Network although it is bringing me the data from that network if I would go and switch from here you can see that I just connected to the xdc network I can wrap one xdc you can see here the white dot spinning which is our spinner if I reject it it goes back to the default state I can confirm it you can see that the wheel is spinning before because the transaction has not been confirmed to the blockchain has not gone to the blockchain now that it's it went there [Music] um our balances should update and our input went blank I have been informed that we are out of time so this is the last thing that I'm gonna unfortunately show you uh and that is the fact that as you can see this my balances were not updated and that is something extremely important for our users so in wagme which this is by the way for the website for wag me one of the one of the functions that I used is use contract freeze what use contract reads or use contract free does it allows the user to read a specific point in in a smart contract this allows you to listen to updates on every single block so what you should really do is to either use listener or use the watch function which allows you to literally watch for any changes on the blockchain that way you you don't need to refetch and you do not need to pretty much do anything from there on um I am very sorry that I wasn't able to show you uh everything that I wanted again I will be right outside we can go through in-depth specific functionalities and functions would be very happy to help you during the hackathon and good luck everyone for whatever you want to build sorry stay here just yeah you stay here okay which is good yes hello I think it's pretty good hello do you hear me okay okay yeah just sitting here hello I'm Leo I'm the CTO of sismo and today we are going to do a workshop and it's I think a pretty exciting one because we are going to cut lifecode and deploy a civil resistant airdrop um from privately aggregated data and so this might seems to be easy but in fact it's not that easy because we are going to use sorry we are going to use uh to give on this error some amount of token that depends on the data you are able to share and this data can be on different accounts and using zero knowledge proof we are able to only disclose the data we want without revealing the accounts so in its core it will have CB resistance privacy preserving that aggregation so aggregation from data from your very private toilet your public DNS from github.com Twitter account and stuff like that without linking these accounts and at the end you will have a double spending protection also to avoid to be able to mean this token a lot of different time so I propose to enter directly in the demo so you understand what happens uh directly and so let's go so all of this has he's called his robe all his open source you have a case today with it which is very detailed so you can later I will send the QR code and the link at the end of the workshop but you can dig into it and more understand the concept but so we will see different uh important one so when we launch the app we see that we have a claim token page this claim token depends on action you made for instance here inside the system community so um to have your token you need at least to be part of the sismo Community member group I will explain you what our groups later you need also to have the Bitcoin passport holder with more than 15 for civil resistance and then you have also optionals data you can share that will increase your amount of token for instance you can show that your early committee members on sismo that you used a factory which is a product of sismo I will show you later uh as a New progester Dress where you want to receive this uh this together and you are going to prove that you have this different data using sign in with sismo and sismo connect that again I will explain you later how it works so yeah just here we need the Wi-Fi okay so here I arrive on my system and I'm redirected it's like a password manager where where I have all my accounts that I imported once when I created my system data board I can import other icons whenever I want like your password manager and then here sismo connects show me that safe drop wants me to share some information and this is this different data different information will be taken from what we call data gems these data gems are just data you are going to share and with anonymization around the owner of this data typically here this data I have it from one account but the other one the factory users is from another icons and by sharing all of that I won't make any link during using zero knowledge proof so I can aggregate data from my very private wallets and some other from public audits so I do generate ZK proof so here it's belong because it download all the groups of data of all the holders of the different data gem in the browser and what happened here is that you find we we find the you you generate the ZK profile you prove who you are inside this group without revealing this account so if the Wi-Fi is a bit slow it takes a long time to download all the groups basically and these groups are Michael tree I will explain you later but this how the zero and Edge proof Falls okay so here I share all the information so we see that we have a so I'm connecting my token sorry I need to change my Network but here we see that I'm available for 400 L token I will redo the flow and hide some information and you will see that it decreases for instance here I won't show that I am a system early user and that I am a factory users and I can do again the ZK proof hope it will be faster this time so now I have a less token to claim let's claim it the construct was deployed on polygon and so what we are going to do during the workshop is to cut this the system community group and the coin passport groups and live deploy these contracts and test it at the end okay foreign so just a bit of theory to explain what happened so in sismo you have these six more data volts where you can import all your icons here we can see that I I import in my unit 21 dot is address where I have my ens my click on passport because my gigant passport all the different um very public account I have my Twitter my GitHub I have also proof of humanity which is inside so it's already all of that are already docked but on my on sismo I'm doing stuff with my very private wallet so I don't want anyone to to know it when I import this uh what we call data sources into the system data world I can then share this granular piece of data so this is called the data gen the data gen is just a granular surround data here it will be okay on the git coin passports groups of all the holders of a glycoin passport I have 42 as a score inside it and my Leo 21. is and using sismo connect which we call a crypto native SSO it's like a communication protocol between my very personal data and application I am able to granularly reveal this data so here we see against the flow I sign in with this move from an app I'm redirecting to my system data world I agree to share different data and then I'm redirected to the applications that can vary so what I can I can do exactly uh from this system data works it's uh having a request of an authentication for instance here I can prove that I own the leo21.is address but I can prove also that I own a guitar background a Twitter account and something else that is called a vault volt ID I will explain you later how it works and you can share some data gems so just disclose that I am part of the git coin passport groups with a score that is more than 15 but the application won't know that I have 42 in fact and that I am also the small community members but the application won't know from which accounts I am a seismo Community member and finally I have the message signature which is at the end and it serves to unband embed user intents for instance you can say for example for for voting you could say I agree or I disagree so it's really to embed user sentence here I will put my leo21.is address because I'm claiming my token on this address and it's used for avoiding phone training of my proof because otherwise my proof could be different by other address and claim for myself the token okay so um in in seismo connects what you are doing is just selectively describe some data it works using zero and range proof so you have approval in the system data world and the application as the verifier and verifies this proof so here if I take back my data gem I show you later so sorry made a gym I assure you before I had the gitcoin passport on my new 21 with a value of 42. using xeron rage proof I can granularly selectively disclose that I have a score that is more than 15 and it's on and on we don't know which account um basically out of this works using SnapChat groups so in sismo you need to generate the groups the system data groups with all the order of Bitcoin passports and with a different value that it has the different score that it has in the same way in the system contributor you have a different level to have different amount of token in the in the in the safe results I showed you before and you can disclose which value you have all these groups as a group ID I will show you later when we will code how to retrieve a group ID and how to create these groups using our Factory or directly using our repository which is an open source Repository so finally this system connect the flow I already show you it's very simple you have a button in your front end you do a system connect request where you request the data you want the user generated in his sismo data world to generate DC proof this response which is in fact the GK proof is sent back to the application that can verify it it works on chain we are deployed on 11 chains so main Network Etc and it also works of change so you have a typescript package that you can install into your application to verify is even less proof so this is more connect response so now we are going to uh to do this to do this live and uh we are for to to start this project We are following a tutorial that we have made which is on our documentation I'm going to show you so in build with sismo connect here we have all our tutorial the Unchained one which is build resistant airdrop from privately aggregated data is basically what we are going to do so I already set up I already set up some the repositories so we don't have to do it with the time we have so when you launch it you are redirected to this page it's the main page so it's a bit different from this one yeah the channel different it's a bit different from the same result it's a very easy template to start with you have only the system connect button inside it which is here and we are going to create this request that allows us to have the data we want for the safety drop so here we first wants to generate this type of request so we want to have the proof of a volt ID I will explain you later what is it share data to our system Community member and that you have a gigant passport more than 15. so let's come back to our Repository so when we do claim with sismo so here I've just launched it I'm redirected to this page so I can see that I have only connect to Safe top so it's not the good application I need to create an application using the factory we are going to do it just right now and here I only sharing the user ID but we are going to add also so the the different proofs that you want to send back so here let's go to start by giving the right application so for that we need to go to the Factory The Factory is a UI tool for developers to use sismo and to have access to different uh tools so the first one is to connect to create the system connect apps or to to retrieve your existing one and then we have the system data groups I'll show you before and we are going to dig more into this after so let's start from the application here you can see I've already created it so I have an application ID I will be able to embed into my projects you can update it's very easy to do you just have to enter the name description a logo and you create it it's it's done right away so here I'm taking the app ID I'm going so in the system connect on chain tutorial I'm going to the main page here so inside it you have uh this data is this a directory structure it's basically a react app an xgs react app with Foundry so here you have CRC adopt the contract I will show you later and here you have the front end with the main page so at the beginning so all of this is explained in the tutorial if you want to do it after you will have all the steps that is very detailed um to begin with we need to so let's try to find the system connect button which is here and we have the config to Define we start by defining the app ID so this app ID here is the one with for the tutorial we are going to replace it with our new app ID okay let's come back again to our reposit to our page doing claim with sismo and now we see that we have connect to saved up is global so let's go back here for what we want so we want to prove ownership of a vault ID show data from dismo community and Gigan passport more than 15. so what is exactly this voltage so this fault ID so I have defined it here basically inside your system data works you all have a World secrets that was generated when you created your system data world then we just show you that you have an app ID for each app that consume that do a system connect Exchange when you do this and you request a vote we are hashing in zero knowledge proof inside the proof The Vault secrets and this app ID and also their their relation key is not very important for here it's zero by default but by hashing of all secrets and this app ID I will have a unique volt ID that is a bit like a user ID that is available for the application and that you can use as a user so it's really like like a unique number deterministic unique number that I generated using my sismo data world so in the case of the saved up we are going to use this word ID as a newly fire for the uh eldrop what this means is that thanks to this you will be able each time you do the system connect flow you will have always the same volt ID so by Saving this port ID we know that you are already claiming your head up and we are even going to so instead of creating a mapping for that we are even going to use it as the token ID inside the erc20 adult token so my token ID will be another sorry as it will be just newly filed in a mapping we will show you we will get it later so here that means we already have the beginning that means we already have the our volt ID now we need to add to other claims so let's add our claims and our claims are group membership so here what it means is that I need to find my groups for that I'm going to the factory and going here you have the system data groups inside uh inside this move so you can look here so here are all the groups that was created and we can search for uh the sismo community and we find it here so we have the group ID here this this so these groups you can take a look at what is inside so inside you have all the data gems of all the users of the small community that did some some things I will show you later what is it and the value you can you can see when it was generated when will be the next generation and how it has been generated so for this you you can click on the data group generator it's a bit like a an infra as a service where you can just cut the way you are going to generate these groups and that will run at a specific frequency for instance here this good generator will run at a daily frequency and execute this code and send Back Zoo groups all of this is open source you can you can take a look at all the groups so some groups has been generated using the factory others has been directly coded and did a pull request into the system hub so I will show you how you can create a new data group so to create a new data group you need to to edit name for instance here I can save a Leo friends and you can add how you are going to create to to have these group members so you can add eligible icons it can be very easy like putting your lists of the different icons these groups can be also hybrid so for instance I could put my GitHub account I could put some Twitter account and you have also a telegram account you can also add a value a level for each account super instance I will say one for this this one uh three for this one Etc so this is a way to add data so this is here it's just static data so it can be well interesting but you have data providers inside these data groups that will help you to to fetch data from the outside world so here you have a full list of data providers for instance we can say okay we are going to use a GitHub data provider to get all the contributors of a repository so for instance we can take this more help it will find 66 eligible accounts and put them inside the group and here you have some descriptions a bit like metadata around the groups and then you can just deploy it when you do this it will automatically generate a pull request on this repository which is open source and uh this pull request contain all the system that I would and how the data are generated so let me show you here we can see that this group was generated with the factory it takes uh is used in all groups and uh some of this as a as a data so you can dive into all of this after so okay let's now good to add our socismo community members and Bitcoin holders so we take the group ID here we'll be put it just here and now we want our Bitcoin passport holders let's search for click on passport orders here we can show how it is generated the same so we can we see that we are acquiring a GitHub and passport API to generate the group and we put it here okay let's go again now we are pretty happy because we have so our voltage user ID our system community and the gig Compass Port here we are only sharing that we have more than one so we want to request only more than 15 for CPU resistance so we can just in our request add claim type okay so GitHub copilot do it for me it's it's nice greater than or equal 15. okay I get back do it again and now we are good uh if you are not inside the groups and you want to test and develop the full flow we have a feature in the configuration that allow you to impersonate some accounts um so I will show you here you can put the list of addresses you want to impersonate and the assist model will contain all of these accounts so let's do it again and I do claim with this MO I am now in an impersonation mode so it's a very specific mode and in my system of data world I I see all these accounts so if you want to I don't know the for instance now announce they are older as information we want to share you can you can go to the group search for a user inside that is eligible and in personalize this account you could functions take this one and impersonate it so I will remove this and and okay so now that we have done our request let's go here we want to verify inside our contract this request and to give the mint so we go to our Adobe contract and what we need to do is to to have exactly the same request that is to the contract so why that if someone give you a proof this is proof in itself doesn't mean anything this proof means something in the regard of a request so uh inside the the seismo connect library to implement for the contract we will verify that this system connect proof is valid verifying the ZK proof but also that it's uh that it's zero noise that was made for these groups so here I need to take the same app ID that I put in the front end so this is very important otherwise it won't works because it won't correspond both front and backend as a contract need to be equal um here you see our adverb that is the erc20 and you implement the seismo connect Library here and by implementing the smoke and connect Library you have also the Constructor where you use the iPad so this is how the app ID is uh passed to the library okay so now we need to do the request so the same thing that we have done but here so we are going to add the claim requests okay so we have claims zero that is a group ID or we will put our group ID here so we have probably constants oh okay he's doing for me nice group so we know that I did it a lot of time let's let's verify it's exactly the same so seismo community members groups here uh it's okay and the Bitcoin passports here is a good one so I'm pretty happy I will change like that and okay so here I will put directly the seismo community members and for the claims one okay nice so we have the group ID Bitcoin passport holders value 15 and greater than or equal here we will verify the response to the Smoke connect response with which is passed here as an argument to be sure that it's valid so we need to add also the claims which we have just declined before and so if the result is valid we continue here we extract The Vault ID we nullify the volt ID has already claimed so it's made here and we've verified that the voltage was not used before and we mint to the center the amount here we can see also the signature which contain inside my my address and it's used to avoid the fountain I told you about so here I'm just I just need also so as I have multiple claims I also need to to put an array here so the Earth requests but okay okay so now we are pretty good for the contracts I'm just checking that this is good so we have the app ID and we have the same odd and claim so I think we are pretty good okay now let's deploy so in the tutorial we have all the steps for you to deploy I have so same I have already set up a mnemonic here to gain some time we are using Foundry so you we just have to do a full script deploy ad Hub we have our RPC already set up we are going to send it and to verify it so let's go once uh during the time it's deploying I will change here the address so here I'm you we were using a Mumbai fork in local so I will put the ID of the chain so this is a wag me configuration you you may already know and I need to change to use polygon so all of this is explained in the tutorial so it seems to have been deployed and now it's verifying the contract so let's go checking so 18 seconds ago it's here okay now it's deployed and we can see that we have our app ID community group ID and we have all our code so let's go back now to um our front end switch to polygon and claim with sismo so here we are not in impersonation mode so you can see here my my accounts generate DK proof and claim the adopt so it's working let's send this going again to the transactions and we can see it here okay so it just can polygons can yeah claim we see small and we see our uh I think I need to go here for now but yeah we can see that we have a we had our adopt token of 100 here so the full case study is available here as I show you at the beginning you can deep dive more on when we add a different level when we add different groups ID and how we compute the final element of token here it was only 100. uh and uh yeah thank you for your time uh enjoy your hack and maybe we have any questions available or I don't know if we have the time no we don't have the time okay yeah we have the time focusing though uh no no okay there if you have any questions thank you okay one second here interesting 30 minutes so I'll second with you yeah okay is that that's not one second uh okay hello my name's Matt Hamilton I'm a developer Advocate with protocol Labs working on filecoin and specifically the filecoin virtual machine Fem so what I'm going to talk about today is storage and retrieval using fem and a little bit about filecoin set the scene for people that maybe you're not quite aware about filecoin and about ipfs for example and the differences between them so let's just talk a little bit about what filecoin's Grand Vision is the Falcon master plan so Step One is build the world's largest decentralized storage Network well we've done that and we're continuing to build the current storage network is about 14 exabytes of data so that's 14 million terabytes of data so it's about one percent of the total data center storage capacity worldwide at the moment and continuing to grow step two onboard and Safeguard Humanities data so we're taking data on uh currently from a number of different uh data sources so things like scientific data and anything from scientific data to nfts everything in between that people want to store on a decentralized storage Network to keep long term and then step three is bringing compute to the data and enable web scale apps and that's where really it gets interesting uh places like eth Global and talking about fem the filecoin virtual machine because fem is the element that allows you to do programmable storage on filecoin so you can kind of think about it as various sort of layers so right at the very bottom we have uh a peer-to-peer network based on lib P2P which is also another technology from filecoin and you've got things like ipfs ipfs is another decentralized Network by protocol Labs you might be familiar with it especially if you've done anything recently with nfts it's used very much a lot for that but ipfs is kind of a non-blockchain solution it's just a decentralized storage network but it doesn't have the crypto economic model that filecoin has so with ipfs when you store data um well I'll go into this in a little bit more about the kind of the approaches you have with regards to storing data and and why we now have things like filecoin but you can think of layer zero filecoin as being the storage layer you think of layer one as being fem the compute over state that we we now have that fem enables and then Layer Two will be things like what hopefully people within this room and here at this event might be building on top of filecoin so decentralized applications and solutions built on top of this you might notice a little Corgi there um called biscuit biscuit is filecoins mascot and you'll see a little bit more about biscuit as we go along in this talk so this is kind of the evolution of storage kind of starting from things like ipfs which was now I think about eight nine years old now um through up filecoin is now about three years old the fem was launched earlier this year in March and so these are kind of like the evolution of decentralized storage so I talked about the different uh kind of approaches and if we look at for example ipfs so ipfs gives you various ways in which you can store your data so the first one is that the client can have their own node or nodes they can run their own nodes and store their own data so you can spin up your own ipfs node and run it locally on your your laptop or whatever and pin data to that and it can be then replicated on the network the problem being is that if you turn your laptop off or whatever then that data is no longer available another approach is you can run nodes with a community so you can get a whole bunch of people within your community that are all running nodes as well so collectively between you you are storing that data and there's no one single point of failure but again this relies upon your community uh to all be storing that data and then another one is just the client storing it on their own in which they use a something like a pinning service so that's to prevent the situation like I said where you turn your laptop off whatever and suddenly your data is now inaccessible so services like infuro pinata you might have heard of are offer ipfs pinning services so you pay them a fee and they will pin your data on the network pinning is the process by which a node says I want to keep this data on the network it might be stored on multiple other nodes effectively cached but pinning is is keeping it live on the on that node so it won't ever expire from that node now one of the issues with this being is that if you're using something like one of these centralized services like pinata and suddenly your credit card expires or they go offline or whatever it might be then suddenly there's nobody pinning your data potentially in your data May cease to exist filecoin is an attempt to solve that problem so farcoin is actually a separate Network to ipfs it uses a lot of the same technology as ipfs so you might have seen with ipfs what are called content IDs content identifiers if you see an ipfs address it normally starts ipfs colon slash and then a long string of what might seem like random letters uh in in that address now that address is actually a Content identifier it is a hash of the data that you are storing and actually my colleague dawn has a really good analogy for this now imagine you are going the difference between content addressing and location addressing with location addressing which is what HTTP uses would be the equivalent of saying to somebody look I need you to go and get some my favorite cereal from the grocery store they say okay well well what is it you say well it's on the third shelf on the left uh second up and uh it's the the fourth box along you go along to the supermarket and maybe that box has moved they've done a restock or they've moved stuff around or you know some kid has been messing around with stuff then suddenly it's it's not in the right place and you don't necessarily get back what you expected whereas with content addressing you're actually describing the content itself so you might say okay my favorite cereal has got a picture of a a Red Bowl on the front of it it's UPC number is this it's 750 grams um and uh you know you could describe the contents of it and it doesn't matter where it is somebody can find it within the shop right they can go in there and find the the boxes cereal that matches that description and the great thing is it might not be in just one place they might have say a special offer on or a sale or something and it might be up near the cash register as you walk in and you don't have to necessarily Traverse the whole shop looking for it it might be right there in front of you they might have it in multiple locations and a Content identifier is a bit like that a Content identifier is a hash of the data it describes the data itself not where it is but what it is and one of the advantages with that is when you get that data down you can check the address against the content you have received so you can be sure without needing to trust any other service that the data you have been served is the data that you were expecting that's used on ipfs it's also used on filecoin as well for storing data on filecoin they both use these content identifiers cids so with filecoin the data is stored off chain you negotiate a storage deal with what's called a storage provider to store some data for a certain amount of time at a certain rate right so I want to store four gigabytes of data for two years and I'm willing to pay this amount for it now that data is transferred effectively well it can be transferred off it's transferred off chain uh through various mechanisms it can be downloaded by HTTP could be using one of the ipfs um protocols like bit swap the ipfs uses it could literally be a station wagon full of hard drives turning up with with the data on remember the the data Network Falcon is designed to store you know petabyte ranges of data so it's very flexible in how you actually get that data to a storage provider once the storage provider has that data they then seal the data which is a process cryptographic process in which the data is transformed into a into a form in which they can run proof of space-time validations over that data so what happens is the blockchain every 24 hours uh queries the or sends a challenge to the storage provider to say have you still got the data right and it uses a there's two um uh proofs proof of replication and proof of space-time that are used by the client to prove or buy the storage providers to prove that they still have the client's data and they haven't lost it now the storage provider and the client both put up some funds for this storage so the storage provider has to put up some collateral and the storage client puts up their fee so if you're to store the data for say two years then the fear which you put up gets put in a escaro and then paid out to the storage provider over the space of that two years again the storage provider also puts up some collateral and if for whatever reason they lose the data then that collateral is slashed so there's a financial incentive for the storage provider to keep the data online this is the bit that gives you the decentralized uh equivalent of pinning on ipfs right so the final coin blockchain contains a whole series of proofs that the data is stored and information about the storage deals which storage providers are storing the data and for for how long now based on top of that we now have the filecoin virtual machine so the farpoint virtual machine is a polyglot virtual machine it uses webassembly it has a webassembly runtime in which you can build additional runtimes on top so the first runtime we built which is why we are here is the Falcon ethereum runtime the evm the F evm allows you to run ethereum bytecode directly on the filecoin layer 1 Network so anything that you write in solidity that you can file down and run on ethereum or polygon or whatever you can run on filecoin as well that allows you to then build on top of that decentralized apps daps data dowels tooling like Bridges all that kind of stuff because you're using the same technology that is being used on other evm blockchains so it makes that a lot easier and that enables things like decentralized compute as well so either compute over the state that we have on the filecoin network or off-chain compute over the data itself so filecoin the fem doesn't allow you to run to access the actual data and if you think about the reason why is if you're storing gigabytes of data you don't want to be trying to load gigabytes of data into a smart contract especially not when you've got you know a blockchain that's ticking along 30 seconds per block by the time you've loaded all that data in you'll be out of execution time so any heavy lifting and compute you would do off-chain you could then record the results on chain for example through something like an oracle you can also build some interesting defy use cases so I mentioned before about how the storage provider has to put up some collateral and the storage and the client puts up a fee that is paid out over time so you could build things like loans that are collateralized on that future Revenue that the storage provider will be receiving so this is equivalent of invoice factoring in the in the traditional business world right a storage provider can prove on the blockchain that they have this future Revenue due to them from the storage deals that they have and they could potentially lend or borrow against that Revenue so you get some very interesting D5 use cases in which you actually have you know bare metal ultimately at the bottom of this um you know defy system and you actually have storage providers collateral there so I mentioned the fevm is fully evm compatible and so it's built like I said as a um a a polyglock kind of wasm runtime that you can create additional run times on top of so the one that we're interested in is the one in the the top right here uh the evm runtime that we have right so that allows you to use hard hat remix metamask all the tools that you'd usually use for ethereum development you can just put in the filecoin RPC endpoint and deploy and execute directly against a filecoin in the same way that it would do something like ethereum so in terms of runtime we're also working on a thing called interplanetary consensus IPC so this is the next layer of scalability for filecoin you can think of as like a layer two execution layer for filecoin but also gives subnets so it's like sharding the network into horizontal scalability with subnets that you can use as well we're also working on allowing um what we call native user-defined wasm actors so in the falcoin world uh we we refer to Smart contracts as actors within the within the network and soon you'll be able to actually compile directly down to wasm and run wasm actors so you might be able to write your smart contracts for example in rust or tiny go or assembly script and compile down to wasm rather than in solidity and things like new foreign blockchain runtime so we can run additional runtimes on top um so you know we might have say a Solana runtime for example uh on top of there for example so what can the fem solve um here's an example of things like data dowels so this is a effectively a two layer it's meant to look like a cake there but on the bottom layer we've got some Primitives that fem enables things like repair workers so I mentioned about how a storage provider has to prove that they have the data still you can have a smart contract that actually checks that and if one of the storage providers is not able to uh provide your data that the smart contracts could negotiate a new storage deal to replace that failed one from a known good one and uh automatically effectively heal the data you could have renew workers so you could have Perpetual storage when the data comes to the end of its storage deal or when the storage deal comes comes to an end rather that a smart contract could renew that storage deal and continue on further you can create new storage deals as well so you could have something like a data down so building on the next layer now this Green Layer on top you have things like governance tokenomics things like endowment management so you could create things like data dowels in which you have a decentralized autonomous organization in which the participants are voting on The the funding of storage imagine something like Commons good data for example uh somebody had the example of a film festival in which a film festival the participants within the film festival could effectively vote on the films that showed in the film festival but also on the effectively what we've become the long-term storage of that data as well do things like endowment management so a smart contract can actually actively invest uh funds that it has been supplied with and used those funds in something like one of like a D5 lending pool and use the interest earned from that to fund the long-term storage of the data so you can have some Perpetual storage in that way so I mentioned biscuit a little Corgi mascot from falcon so I'm going to hit give you an example of a data down called the biscuit data dial this is an example dated out we've come up with mainly my colleague Sarah who has a very active imagination and loves corgis and so we're going with this the Corgi biscuit biscuit data down so biscuit data now is a community of Corgi dog owners that want to better understand their corgis so as an example you might have a bunch of Corgi owners that submit data to a data down about their dogs it might be behavioral data might be video data um I don't know Biometrics of corgis maybe Corgi fitbits um that's not a crazy idea as it sounds actually worked for a startup that was going to Pivot into uh dog uh dog uh Fitbit type tracking um it was a crazy idea but anyway the idea being is that you could take this data from these individual um uh participants of this Dow store the data within the Dow and then the smart contract could do things like wait until the data reaches a certain level maybe they have to upload data in some periodic time fashion like maybe they have to upload the data every Monday to Friday and get like a streak for example they maybe have to get a five-day streak and if they do that then they get some kind of reward so the smart contract could mint some sort of token it might be something like an nft it might be a fungible token that could be used to reward the Corgi owner for supplying their data to the network right and what could be used what could that data be used for that data might be used for things like training AI right so imagine you've got all this Corgi data now you could actually use that to train an AI model maybe that AI model is used to create almost like a robovet for example that allows you to ask questions about your corgis Behavior maybe this AI could then refer to that data and the training of that data is paid for by the Dow and the Corgi owners maybe they get a governance token they can vote on the actions that happen whether that's some training data that happens they might get some rewards that could be used for services within the Dow so again things like veterinary services for example um you could you know you could get some discount or reward for supplying the data that could then be used against you know real world Services as well so the Dow treasury um once once the Dow takes These funds in the Dow treasury could then potentially actively invest those funds through things like liquidity pools dexes um uh you know lending lending pools for example that then support the Dow going onwards so it could be effectively self-sustaining by generating Revenue that way that then funds the purpose the persistent storage of that data the renew the repair the replicate that I mentioned before to keep this data active and the end result healthier happier corgis achieved right so that's an example might seem a bit of a trivial example but it hopefully gives a bit of a flavor of the kind of thing that you could build up using fem using filecoin using things like data dowels on top of the network and you can access things like off-chain compute so protocol Labs have a project called bakayal that is a decentralized compute platform and there's a bridge called lily pad that allows you to from a smart contract pass a for example like a prompt to stable diffusion running off chain that could then generate an image that could then be stored in ipfs that could then be returned back to Fem to Mint an nft the points that image that was generated and that is stored on ipfs so you can kind of Go full circle there between on-chain and off chain with data there's a bunch more FM compatible tools so there's things like there's a a file coin local net Docker image you can run you can spin up on your laptop by a local effectively filecoin Network and run locally you can then play both sides of the equation by being a storage provider yourself right so you can actually not only create storage deals but accept those storage deals reject them uh whatever um there's cross chain Bridges sealer and axler for example both on the token side and on the general message passing side uh oracles things like teller Access Control lit um Lighthouse which is a storage aggregator a number of like D5 protocols as well that are being created so there's a project called glyph that's that top icon there you might not be familiar with in the top right glyph has created a big lending pool that allows you to do staking of filecoin token and that can be lent out to storage providers number of network analytics apis so zondax have a network Explorer called Barracks that allows you to interrogate the network uh there's one by protocol Labs called starboard as well decentralized compute back El I've mentioned that allows you to run decentralized compute jobs so there's a whole bunch of stuff within within fem and more stuff kind of coming as we go along and if you want to find out more there's a QR code there if you want to scan that QR code or go to that link tree address at the bottom there that will take you to a list of resources including if you're doing a hackathon you'll see a link there to the hackathon what we call a hackathon cheat sheet that is a document we have on GitHub that gives you a sort of full list of various different resources around fem as well so there we go I think uh I think that's the end uh yeah so thanks very much here's a bunch of the fem team there's actually a lot more than that this is actually a bit of an old photo now um but uh yeah you know it's a big project it's been built by filecoin over a number of years now but finally live and allows you to run smart contracts directly on the PowerPoint Network so thanks very much if anyone has any questions or if you want to grab us actually probably even easier there's uh we're just in the booth just literally on the left as you go out the door if you want to come and have a chat to us at the uh the filecoin booth uh we can chat there thanks am I right all right everyone thanks for your patience here my name is Junior journesto and I'm gonna tell you about unlock protocol um unlock is a is a project that has been built about four and a half years ago already we were here at the last East uh Waterloo which was in November 2019. what is unlock unlock is a protocol from memberships uh we'll talk about this uh for about half hour through which we'll go first through a bit of theory and then we'll move to a more practical life coding example so first start with a quick overview of unlock the protocol then overview of the ecosystem the tools including subgraphs and existing integration then we'll go into live coding example as I said to see how you can add unlock to your front-end applications then we'll give a little bit of an intro about how you can also integrate this into smart contracts via the use of hooks and finally we'll have a bunch of pointers to docs guides Repros and tutorials that we have and that you're more than welcome to use as a basis for your own work first quick note about myself so my name is unionistu I'm the CEO and founder at unlock uh before that I was actually a Founder at a company called superfeeter which was sold to medium and we're building RSS feed API apis I'm a big big fan of the open web uh the idea that this kind of gigantic brain of ours shouldn't be controlled by anyone and that we should all be able to play uh in the way we want I work with the WPC worldwide Web Consortium for a little bit and I'm also a big open source Advocate and I'm currently on the graph Council the graph is also a sponsor here you should definitely check them out you can find me online at julian51 everywhere or on my own blog at uverable which literally means open box in English and I invite you to check it out what is unlock protocol unlock protocol is a protocol for memberships one of my core beliefs is that the web should have a primitive for memberships because we have memberships everywhere where you think about your Netflix account it is a membership sub stack subscriptions membership but also you know the fact that you follow someone on Twitter even though it might be free it's a membership you're a member of that very exclusive Club of people that follow that person again memberships are everywhere they're also everywhere in the physical world your gym membership is obviously a membership your driver license if you're in the US and I think it's the same in Canada expires it's kind of a membership to the local DMV you're a member of the people that can drive on the road um so unlock as a protocol to do all kinds of membership um subscription the one that are recurring ticketing so if you go to a conference the ticket to the conference is a membership for that specific conference you can do stuff like token geeting and that's actually what we're going to Showcase you can also do certifications certifications is also a membership you're a certified driver as I just said or you know when you get a diploma from a school you're also a member of the class of Euro 2021 or something like this as I said from the founded about five years ago and we have a team of people that have worked at Google Facebook good Eddie and multiple other names and companies that you think talk about memberships uh if you've been around for the last two years you've seen all of these nfts emerge and so well you can say well would any membership any nft could be a membership uh the answer is no and the reason for this is like must nfts are Collectibles they are not supposed to represent the fact that you're a member of a group and one of the key missing attributes is the idea that they're Perpetual once you have a board ape you have bought it forever unless you sell it and that is not a good membership model for the people that are selling these apps to you because they need to provide you Services imagine that you bought your gym membership by paying once and then you should be able to go your whole life the gym will probably close and go out of business same for Netflix so really you need to think of memberships as kind of nfts that would have some kind of expiration mechanism obviously the fact that they have an expression means that they can be renewed and you can move from something that is one time to something that is recurring something that happens every month every week every year depending on what is the base duration here it goes from the idea that communities and creators will make money through royalties which is kind of a very strange model to something that is continuous Netflix makes money continuously as people keep paying for the service because they keep streaming a good shows hopefully um and unlock we also build the protocol around the membership that's assuming that not all membership will be paid and not all memberships will be paid with crypto so we have natively in the smart contract support from mechanism that would allow to pay with credit cards or for example erc20s as well like must nfts are priced in the base currency of the chain so eth if it's on mainnet or you know medic if it's on polygon we assume that many membership will be priced in stable coins like usdc or guy etc etc you can also easily verify off chain the validity of a membership maybe even verifiability in the form of a QR code and we'll come back to this in a couple minutes but you can also do on-chain Access Control by verifying from other smart contracts that a given membership is is still vetted obviously if you thought about nfts you probably think transferable not all nfts should be transferable there's a concept of sold bound tokens with unlocked you can definitely create a contract for which the nfts are transferable non-transferable or anything in between you can say they're only transferable if short-term requirements are met and also we move away from the idea that nft should be immutable to something that is more practical which is nft should be able to evolve based on the membership based on what kind of services are being offered so the smart contract that you deploy when you deploy your membership through unlock are upgradable by you obviously we cannot upgrade them but you can decide to upgrade and add more features as time goes and change how they behave unlike protocol is oh sure connect this one more time I'll cut this oh do you want me to start back um like I'll just kind of this part right I'm here so it's fine but um I'll just get the slides from you and quick one after okay cool that would change your resolution yeah I don't know same thing yeah oh we were just on this um do you have an HDMI direct here I don't have any issue I don't know myself oh but like in the upwork yes that's better good perfect and then I would need to do this again perfect all right sorry for the interruption here um so unlocked protocol is made a right contract that are updatable you can change the terms of membership you can change the price change the supply change the duration of each membership you can change cancellation term transferability all of that as I said they're also upgradable not by us obviously but by you you can choose to change once the protocol support new features you can choose to opt-in for these new features and that's perfectly up to you and and fine but they're also programmable and will very quickly allude to this and you're more than welcome to store buy our booth to get more details on this the smart contract has a lot of hooks built in so mechanism to alter how it behaves based on your own logic here which I think is pretty interesting and you can build things like discount codes or you know airdrops when people buy memberships uh change how something works on the smart contract change the price on every single purchase etc etc so key use cases we grouped here eight we'll go through three that are the most common ones but you're more than welcome to do uh anything that involves the other one and if you find more use cases we're happy to hear about them first one I talked about it earlier it's event ticketing if you have a ticket to a conference to a concert you're a member of that conference of that concert for the duration of the conference or the concert second one a recurring subscription I mentioned your Netflix account uh if you have a sub stack account that is also kind of a recurring subscription you pay every month every week depending on what the duration is to keep accessing the content that is obviously possible to imagine a world in which you have a video streaming platform you can create you know a social network where people pay to access more content on a recurring basis podcasts we probably hold this into a podcast that I have uh you know time components and premium feeds in there so you should definitely check that out the next one is the idea of time-based memberships so think seasonal or maybe Community dollars and things like this so you can think of you know a dough that has every year a new class and you need to pay to be part of that class or that group and that's a good example of this it doesn't have to be automatically recurring we also talk about certification gaming obviously is a big one that you can play with as well you know if you play a game maybe the fact that you I mean first the subscription would be a thing in the game but maybe you're going to earn items that are going to expire after some time and so these items could should be nfts you're a member of the people that have the sword of some kind etc etc another use case that we're hearing a lot of in the crypto space right now is your finger on loyalty so you think you're a brand you might want to you know create perks for your most loyal customers unlock is a great contract to actually do this attendance nfts you probably have all heard of poapps at this point that's another way of building these kind of things and then obviously digital Collectibles they're still possible to do and what's interesting about the time component here is that you can have have digital Collectibles that are Dynamic that evolve over time so imagine a board day that actually gets old that would be funny uh as you know as you as you keep keep it in your wallet um getting more a bit more into detail so even ticketing uh what's interesting here is like as an organizer you get all of the proceeds of the ticket that you've sold it's for the end-to-end control by the organizer of the conference across multiple uh you know mechanisms you can enable secondary markets or not if you want to by making the nfts tickets non-transferable you can what's interesting that you can create introoperable experiences that apply to both the offline the in-person events but also online so imagine a scenario where only attendees of a conference can join a Discord or a telegram server before or maybe have discounts at local hotels and restaurants because they can prove that they have a ticket rather than say hey I'm at the conference XYZ can you give me a discount well here you can actually prove it because you can prove that you have the nft which are pretty cool uh although you see actually example of this adapcon you probably know of this conference it's one that happens in Germany every year uh the user unlock every year at this point uh and we're pretty happy to have them in here uh subscription so token enabled access to experience services and and and and and features um it creates it's really important and critical a sustainable revenue for the business so rather than have you know the crypto space we love like numbers go high well here you don't actually have to bet on numbers going high you can just sell your service to the people that are excited about using it and we'll pay for this we all have I mean I'm sure we'll have cell phones and we pay for some apps in here because they provide good Services well you can build the crypto version of this obviously we support as I said crypto and query card on-ramps we also support Apple pay Google pay and a bunch of other uh similar system what's interesting here is like the relationship between the app creator and the consumer the app user is direct there is no apple approval in the middle in the middle you if you follow a little bit you know that uni swap for example got uh took the month for Apple to approve this well if you have a membership system that is between you and your customers you can just offer that you don't have to wait somebody else's approval that works for Content you know blogs and stuff software features inside of application music video podcast everything you can think of here an example of this one of our most popular users these days and you probably don't see it here but it's because they charge about 300 bucks per membership is something called Alpha Bots D5 robot they provide defy insights and they have a monthly subscription that people pay for they're at this point generated about 150 000 a year in revenue from from that little little app in Bots that they have on telegram so it's actually a pretty cool use case here membership I'm sorry time based membership I told you all a little bit earlier um no necessarily need to go much further in here but a cool example of this is something called cabin you probably know of of them it's a it's a it's an offline group of people that are building cabins or purchasing cabins all around the world and using them as code Living Spaces and they use unlock for their yearly membership a really cool product project if you want to check it out at cabin.city all right summarizing again the use cases events even ticketing recurring subscription time-based membership certification DMB like things gaming loyalty attendance nfts and digital collectibles let's move into tooling so unlock set a smart contract that's the core there's a ton of tools that are built on top of it that are completely optional that you can use start with a user scaffolding and then remove uh once you're done with this first we have a dashboard which is really the way for creators to deploy the contract without actually initially having to do that with code no code tool connect your wallet set a bunch of terms deploy the contract and you can manage the contract as well change the terms change the visual aspect of the nfts airdrop nfts to people that might you might want to have an nft in their wallet we also have a similar flow which we call the checkout which is a way for people to buy these nfts so as I said the nfts can be fairly or it's very Dynamic so there's a ton of stuff that you can do for example charge as I said with erc20s while rather than actually implements the approval mechanism all of that you can use our checkout UI to easily do that and support you know your users without having to necessarily build all of the system where they would be able to check out you can also do build that yourself but again use the tool that we provide as scaffolding more tools sub graphs I mentioned earlier so aggregating a ton of data listing members very useful here uh we have a JavaScript library called unlock.js that supports deploying the contract updating them listing uh things purchasing that's actually the library that we use in our own dashboard we have the paywall and we'll go through that in a couple seconds which is this checkout UI that can be embedded on any website and we have hooks hooks at the Smart contract level so you can change the behavior of the contract so for example if you say every time one of the membership is sold we we double the price for the next one that is something that can be easily done with these hooks existing integration so unlock contracts are ERC 721 I should clarify this there are 721 plus we add a ton of feature on the base one so any existing integration that works with 721 will work there so if you use ethers JS well you know that should work we're actually in the third web directory so you can use that as well web3.js wag me the example that I'm going to show the demo action I'm going to use wag me here or any other kind of wallet that works with VLC 721 that works custom Integrations are available in some application we have for example a WordPress plugin that's actually pretty cool we have intuition with magic so you know the wallet provider here with striped for the credit card with super fluid with uni Swap and a bunch of other things I will go through there and we're if you build something cool let us know we'd love to feature this integration on our end pretty large I mean the typical ecosystem play uh you might have seen a lot of these names already there is ways to work with unlock in all of these uh projects and etc etc maybe the interesting part about the networks we're actually on nine different chains you can only see eight here uh the ninth one is called Palm it's not a very popular one but we have a customer that wants to use this so we are on mainnet polygon optimism arbitrum cello binance kenosis and I'm sure I forgot one but you get the logos here um cool let's jump into a quick front-end live coding demo uh hopefully the demogods are with me today um I'm going to just start by showing you what I built um which is the the starting point for this um this exercise I built kind of a very dummy blog using actually the uh the one the next features on their site as a template so it's a Blog in which I write a bunch of stories and my goal here is to toxicate some of these stories so here it's not token getting obviously you can see all of the content and we're going to go through the steps that are required to tokengate the content on that block so can you build your own decentralized sub stack if you want the first step that we're going to have to do is obviously authenticate the user we need to know who the user is so for this we're going to add a mechanism for users to connect their wallet and you can use any of the existing tools in the ecosystem somebody talked about connect kit earlier rain book it actually supervised this we have a version of this we're going to just use that but again you can use the one that you want um for this let me switch to my code editor here and get started with that coding session I also have very handy readme here and this code is like oh um this code is live on uh on GitHub so I'm going to first maybe share that link with you guys so if you want to look at this common Wi-Fi work please it's going to be helpful yes cool and I'm pulling it because in the readme I have the step by step and I'm definitely going to use this here so the first step is to introduce to install a couple dependencies which I should be able to do yes cool first step is to install a couple dependencies I'm using yarn in that project you can obviously use any of the tools of your choice here and I'm installing four or five different notes the first one is unlock protocol contracts that's the ABI the description of the uh the contracts here second one is the paywall that's the little embed UI that we'll add for people to purchase we have a networks package that has all of the configuration for unlocking the networks all of these packages are completely optional I'm using them here for convenience you're more than more than welcome to rebuild whatever they provide ethers a JavaScript framework that allows you to interact with smart contract wag me kind of a front-end tooling for react with hooks and VM which is a similar um to work me I suspect the Wi-Fi is not going to allow me to run all these it shouldn't take that much time so maybe I'll I'll let's give it another second or two otherwise I'll go through the I've got a recording of that demo but I'd rather try to show it the live um let's actually go and copy that into the next step so you'll see that inside of the app.tsx file right now it's the default version uh you offer me of this if you've used next in the past I'm just going to add the basic configuration for wagme which is basically including a client this is nothing about unlock right this is not specific to unlock adding wag me here where this is specific to unlock instituting a paywall object that is an iframe to be clear that will allow you to easily connect the user's wallet as in a connect kit and rainbowkey do but also provide the the checkout UI that will come into and then I'm just wrapping my component um inside the wagmeconfig so that's available inside of the rest of the app at this point I haven't done much coding the next step is to add a connect button and I'll just again copy that and we'll describe what that is precisely but if I go to my components I'm just going to create a new file called connect.tsx and then I'll paste this this connect component is fairly basic it is using uh oh the paywall object and looks like it's not included here so I'm just going to include it here um to create a provider which is the object that is being used by webme to connect to the wallet here so we're also using the use connect from wagme to again link the provider to the application and then we have a pretty basic logic like if the user is connected uh sorry if the user is not connected we show a connect button that will call that connect function and the user is connected we will show the the address of the user let's uh see if my dependencies have been sold yes they have cool okay so I'm going to just restart the app for the sake of making sure that everything is up to date and now if I go to the blog we'll see that I have not added the button yet so nothing has changed but I'm going to add the button obviously to my UI I'm probably going to add that into say the intro let's do that here so we have this blog and I'm just going to add the connect component here and just save and at that point you'll see the little connect button appears here if I click on that one and again the Wi-Fi is going to kill me here but we're going to load an iPhone oh it's not too bad we'll say hey I actually previously connected so it shows this message that I'm already connected but I'm just going to sign in with ethereum the typical uh um authentication method here click sign in and at that point we see welcome back this is my address here um and now I'm authenticated inside of the app that is kind of the first step if I click through to see a post it's still not to convenient we haven't done this but at least the app knows who I am the code size yes all right I will increase the code size a bit hope better cool awesome so that's we've user is connected now next step let's make sure that we can uh and I think it's next step it's kind of also the the actually no we have a one quick step to do we're going to deploy a membership contract now I'm going to go ahead and say okay this is how much I want to charge for accessing the content on my blog I created a another account for this demo on on here so I'm just going to go to the unlock dashboard again a tool that you can use to deploy your contract and manage them I would definitely recommend that you do So eventually if you want to you know create this your own experience for this you should go ahead cool looting oh all right I'm going to go ahead and click on create lock I'm going to deploy it on Gertie and so I'm going to do my blog membership let's make it you know last one day I'm gonna sell an unlimited amount of these membership so it's not like substack where I'm gonna charge every month I'm going to charge per day uh but I'm going to make it really cheap um actually maybe something like that and it's still maybe expensive for one day but uh click on looks good and hopefully yep metamask is going to pop up and I'm going to just from here deploy the contract as you can see the function here made a mess is a decent job at translating it but it's create upgradable lock ad version we're deploying a membership contract here on the goody Network in you can confirm here and now we're going to wait for girly to mine this hopefully it won't take too much time I did one earlier today it was like 30 seconds fingers crossed once this is done this is my contract it's been deployed from a factory unlock I mean me as unlock would have zero control over this Chris has unlocked with zero control over this it's my contracted exactly as if I went to open the plane compile it and push it myself except that it's deployed from a template so I actually didn't have to do this template is audited verified by multiple firms so I actually don't have to do any uh complicated things it has been mined but it looks like we're taking a couple more seconds to refresh yeah done and I can start managing it obviously there's not much to do right now because it's kind of you know empty but the one thing that I will be doing is copy its address into my app we show a default image for the membership it's obviously changeable and here once this is loaded I mean it's going to be an empty list but that would be where you would see all of the members so I'm just going to take the address of the contract here uh and you know I'm going to bring it back to the code um actually I'll do that afterwards one of the next thing we're going to do and that's what we change here is change the blog posts so that when somebody you displays the blog well if they're connected we will see whether they actually have a valid membership for this I'm going to use I'm just going to copy that but I'm going to use especially this function from wegme called use contract read that allows you to query through the through rugby as my contract um and check whether something in the contract I mean check the data of the contract and so we'll just copy that into the blog post itself nope yep and I'm going to do this and so let's actually go through the code quickly that connect component oh overwrite cool um did I change this I don't think I did but let's see afterwards so I'm going to paste the address of the contract that we just deployed here as the lock address here and we'll go through that so basically the top part is and change is the default that we got from next then we're actually going to see use the user account Hook from wegme to check the user's address and check if the user is connected more importantly once the user is connected we will check using this use contract read the balance of the user so basically using the argument address we're going to check whether the user has a valid membership and since this is the uc721 we can use the function balance off that function will return zero if I don't have a membership or if that membership is expired or one or more if I have one valid or non-expired membership does that make sense yes we're passing the smart contract address we're passing the API we're passing the chain ID it's on Gertie here and we're also for simplicity's sake uh just returning a Boolean rather than the number of membership yes the user should have access or know the user shouldn't have access we'll come back to this in a second but we're adding a function here that's called on purchase that will let the user purchase a membership unless they have one and then we're just moving to the the display logic here if this is not connected we'll just show the you know you're not connected connect with the button that we created earlier if the user is connected but doesn't have access we'll just show hey you don't have access but you can purchase a membership and that's when we'll call that on purchase Method that we just discussed and if the user is connected and it has access well we'll just show the content of the body makes sense nothing too fancy here hopefully I'm just going to save that and move back to the Live code actually the post is already there it's self-updated it turns out that I'm connected we connected earlier but I don't have access so I'm just going to click on that purchase membership button at that point we load the checkout UI from unlock including the UI is fine querying the RPC endpoint shouldn't take too much time yay we're showing this option uh what's interesting here is you only see that my blog membership but I could have had like two or three different types of membership for different prices different tiers like I could have the gold plan or the silver plan here just have one we show the price we show it's unlimited we show it for one day click on next I'm already identified because I connected myself earlier um I'm going to be able to change the recipient It's actually an interesting idea where I can buy the membership either for me you see this is my address or for another wallet if I want to offer somebody a membership I can just go use that flow and then they would get the nft in their wallet and then they can come read the blog if they wanted to and click next here I'm going to choose a payment method by default obviously we show the currency that the user has enabled here so 0.01 East but we're also trying to find other option and for example we support natively the concept of Swap and purchase which is a mechanism where if I don't have enough eth but I do have usdc in one single transaction the user will be able to spend the usdc that would get swept into eth into a membership once it's taking further to load I suspect this is the slow Wi-Fi there's actually not going to be a lot of other option because that wallet that I have only have only has usdc oh sorry only as girly I'm just going to click here seeing the confirmation screen and it's loading yeah one key that's the name of the membership for me at that address is going to be 0.01 each I'm just going to okay pay with crypto metamask is going to pop up please minimask it's minimask when you click this is actually running a simulation and that's why it's taking time there's a network call involved here I'm going to spend 0.01 East plus a little bit of gas as you know con from here we now have this little waste screen and hopefully it won't take too much time but you will see that right away when that membership has been bought and the transaction has been confirmed the content underneath the screen will update so hopefully again shouldn't take too much time but I can hide this oh I use a different account I guess I didn't even connect with the Waterloo address that I had but you'll get the you'll get the confirmation anyway yay so metamaskar is that confirmed we probably use a different RPC endpoint hopefully we'll get that shortly yay return to site and uh what we should update please work me update this ah okay so we use this flag in wag me that allows you to call a watch that allows you to refresh I guess it's not refreshing here let's refresh the page just to make oh what is going on here the demo effect full force what's going on did I mess up my why is window is not defined of course window is defined all right let's actually hide this for a sec Maybe all right now I'm confused about this thing okay connect my wallet again oh my God that's when things break that's the one they use connect ah well yeah it should be fine is this the Wi-Fi yeah it was the Wi-Fi okay signing wallet all right uh going back to the blog post what is going on here I'm confused everybody made a mistake somewhere in my code here but let's refresh that page so I am not connected again I'm just going to uncomment this connect yay sign your wallet sign again I do have the membership though all right well maybe there is a little um something that is not working as I wanted to I'm just going to double check this if it's my code maybe there's something here and show the address as access false and 61 that's the address that I'm connected with though um that's maybe what I was thinking but it looks like it's the same one though if you look here at 61 and then 61 here so looks like when you quit the contract maybe I didn't write the wrong one okay let's do it again this one yeah it looks like this one didn't have one so purchase I guess I didn't buy with that one before confirm Google's been blocked normal I don't know why is go ahead mint mint mint it has minted now yay you see it now so I can close now I have access to the content don't know what happened the first time but now I have access to the content cool make sense all right uh one final step obviously I go back to dashboard you see those two I guess I bought with that other address which is you're right I think it was a different address I don't know why I did this but I have two members now on my blog they're both me you can see when they expire both of them and I can do a bunch of things so I'm not connected as the block manager anymore I switch account but if I go back to that account that I had the throttle one which is the manager for this I am a manager again and I can do things like extend refund so I was like oh this person actually didn't want one I can refund them if I wanted to extend their membership I can do a bunch of different things as well a fun thing to do is as I said instead of unlock we the transferability is really something that is programmable and we have the concept of the owner of the nft so owner off in the EOC 721 sense we also have the concept of a manager of the nft and it could be that the owner owns the manager has the transfer right so you can make it so that my hot wallet is the owner I can show around and like oh look I have this nft my the manager the person that the address that I have to transfer right is my cold wallet and this is maybe something that I store at home or some somewhere else making it a lot more secure so if my hot wallet gets compromised my NFC is not lost I can just go to my cold wallet transfer the owner from this previous hot to the new hot and keep it safe where I'm at so that's one thing that I can do obviously you can also transfer the nft as their manager here make sense so that's kind of the rough demo again sorry about the little issues um let's go back to the slideshow um so live coding we did this kind of I think it worked um it's loading YouTube here so forget about that slide we also have as I said ways to do backend and smart contract I'm not going to go into details but there's actually a video here you're more than welcome to check that out mention the hooks the hooks are ways to alter the behavior of the contract when there is a new membership being purchased I'm going to try to make speak even faster we can cancel and change the behavior on cancellation change the determination of whether a membership is valid you can say it's valid only if it's Tuesday well okay a membership is valid only if it's Tuesday you can easily do that on the smart contract a quick video that we have you're more than welcome to show up on our booth for more details resources okay quick point if you want to add any kind of monetization to your project just use unlock that's the way to do this um we have as a quitter you we have a dashboard that you can use to deploy membership sell verify tickets all of that ad credit card processing if you want to allow for people to pay in Fiat you can check these checkout URL which is similar to what we had in that model and as a developer you can integrate directly into your smart contract into your front end into your back end and all kinds of application quick inspiration unlock life here live for your live streaming you can create a hey something where I live stream and every you know from time time only the members can see the content unlock plus lens create kind of token gated posts unlock plus xntp messaging so only messaging to subscribers uh etc etc other inspiration uh you can create nft lending platforms subscription tools for people that have multiple subscription a fun thing to do is like you can have voting just for people that have a specific nft with Tally etc etc we have prices and the hackathon so please build on top of this and hopefully you'll earn some of these team members myself Julian Chris in the back uh Kelly in the back as well Michael at the booth right now and Charlie was hopefully making it from Montreal where she's based and scan these YouTube tutorials so you're more than welcome to scan that QR code you can look at my face even more if you really want to we also have docs and tutorials so again take a picture scan that as well if you want to go to our doc site where there's a bunch of obviously guides and tutorials and details about this protocol and then we have for creators kind of a lot of no code guides that let you do a bunch of things from token getting uh you know a Discord server all the way to a WordPress etc etc we're also available on Discord so if you don't find us at the booth if you're free to bring us on Discord we have team members all across the world so someone will be awake at 3am to help you if you're stuck and that's pretty much it thanks for your time I think I've stolen the time for Q a but maybe Nuno no all right sorry all right come ping me afterwards hello hello sorry no they don't so I'm gonna hand you I'll use my loud voice well for the video for the recording too okay so I'm gonna hold it okay or I'm gonna give it to you you're gonna hold it sure it doesn't go from this um um do you want to use this spot can you use that one so you're not tripping over your Wire yeah yeah if there's a I didn't see a power cord there oh okay how do we get displayed to the hooked up to display I think everyone's at dinner that's great I won't bump it yeah okay it's okay perfect can I help you um is it mirroring right now or no no okay yeah let's mirror it yeah I was gonna tell him after but we could hand him out now so yeah can you hear power plugging business right here oh I got what you're saying I thought you were saying there's another chord the last time yeah it seems to be this cable one of these can we just plug it directly on your computer yeah are we married uh we will be I just switched okay directly to your device instead it's a lot quicker I don't know if you can find that 50 seconds good to go uh you have your mic on are you guys both speaking Yeah I'm gonna hand it to him okay oh we're on okay all right so you guys yeah I love to switch because the record will only capture it has it on yeah yeah we'll coordinate okay uh yeah a treat it for him but everything can be good okay that's a good looking title page yeah yeah we'll be good okay okay so I'll just switch whoever's like by the computer okay ideally like you'll still have the audience it's not a big deal yeah okay so you just hand that around this is the last one of the day so every time and then the whole tables check one two hey guys let's get started so uh we're really excited to show you our new framework called Council it's for deploying Dows and a complete toolkit on top of that which we'll get into if you're not familiar with dials that's okay we're going to get into that a little bit but first let me just introduce who's talking to you so I'm Ryan Gorey I'm head of engineering at delve we're research and engineering company who builds D5 protocols and tools and with me I've got Danny who's our front end lead and then I've also got Geo who does Business Development and community at delve so yeah we're going to talk a little bit about what council is what we built and why it's important and then we're actually going to deploy contracts configure and run the UI and create proposals this seems like a lot to do in 30 minutes but we have tools that are going to make this really streamlined and really easy so uh we're pretty excited to show it off after that of course we've got prizes we hope that you all will build on us and we'd love to work with you all on that so to get started I'm going to hand it off to Danny and he's going to tell you a little bit about Council sweet thanks Ryan um so decentralized governance just out of curiosity how many of you have ever participated in a dow or voted on a proposal or any type thing awesome so as you know this is a this is a big topic and we don't have time to discuss everything about decentralized governance but I do want to point out sort of two ideas maybe plant two seeds in your head on white council is maybe a little bit different than what you're used to the first one is uh is that first bullet point you see see there it's the flexible definition of voting power so many of us have probably seen like a one token one vote type of model maybe if you're in a smaller group you've got you know a snapshot poll and then a multi-sig that actually executes the proposal for Council we want to build this kind of for the future so maybe one token one vote doesn't make it to you know be the actual perfect way to to to structure a dow so we want to build that into uh into our protocols so we'll see this in a minute but the the the component I want to like put into your brain right now is that voting vaults is the way we accomplish this it's a very flexible way to define voting power on your own terms that could be you know nft ownership it could be one token one vote uh if you're a fan of another Dao that does things similar to you you could even adopt their token as your voting token uh it's entirely up to you so your creativity is uh in imagination is kind of the the limit there and then the other big piece I want to just point out is the trustless execution so if you're in a small group maybe you have a snapshot poll which is like a sentiment on chain pull but then you're trusting a multi-sig like a three of five or a five of seven to actually Implement and execute that and that can be you know hard to do at scale so with Council you'll will you'll be able to vote on proposals but it's also the execution of those proposals that can happen trustlessly so anyone can be the one to actually hit the button to execute that proposal um so that's that's kind of the the two big differentiators I wanted to mention um definitely come by our booth and and nerd out with us about governance we got a lot of uh really really interesting thoughts about it so the next thing I want to just point out real quick before I hand it back to Ryan to get back into the meat of the the workshop here is we've gotten sort of two main components we've got the core voting contract and this is where your proposal is going to be created this we're going to vote and then the other piece which I just mentioned uh is going to be the voting vaults and simply put these are just smart contracts that have a single query vote power method on it and you can Define the body of that method however you want again it could be based on your balance of tokens it could be based on your nft ownership you know any any any any way you want to structure that so you would call query vote power pass it the address that you want to you know how much vote voting power does this wallet have does this contract have and you get back that number and that's that's the extent of it um Council has a bunch of other plug-and-play features that we invite you to read our docs and today we're going to go into that last one more specifically which is the Locking Vault so that kind of represents that one token one excuse me one token one vote concept so we'll get into that today and as Ryan mentioned we do kind of consider the council protocol as sort of a full stack solution for governance so that's not just the contracts but a reference UI a typescript SDK if you want to get scripty and then we have this CLI that you'll uh you'll see today where we can deploy contracts and even interact with them on the command line so um with that said I'm going to hand it back to you Ryan uh so yeah let's get into demos uh so the council kit today is just a mono repo basically and if you haven't worked in a monorepo before uh it's just a single repo that has multiple packages and apps within it uh and so you can find that on our GitHub or delftec Council kits uh and then you can Fork that like any other GitHub repo and start using any of those tools that we talked about the CLI SDK and the UI which you'll find in the app there so I've got that cloned down already and what I'm going to do is the first thing I'm going to do is deploy some contracts we need a place to deploy that so we need to spin up a local host Network so that we can just test around if you want to spin up a node we can we can do that with the CLI as well and then within a work a mono repo you're going to start with yarn workspace for every command that you're going to call so then at that point you're going to say the name of the package or app that you're going to call a script on so in this case it's going to be at Council CLI and then the CLI is meant to be um really easy to use like you don't know how you don't have to know the commands the options or anything you can stop at any point in your command and what it's going to do is fall back to this prompting interface so if I just leave it at Council which is like the entry point of the CLI we'll see that we're going to get prompted and it's going to help us walk through the rest of this CLI yeah definitely how's that good okay um awesome so now we've got our prompt UI which is going to kind of walk us through the rest of the command that we want to run so you don't again you don't have to know how to use this just call Council and then walk through multiple choice here so I'm going to go ahead and start this local server I'll accept the the default port number and there we go now we've got our node running and a bunch of accounts similar to hard hat and Anvil all these counts all of these accounts are going to be the same as the accounts that will get spit out in those networks as well so if you have these added to your account or to your wallet you can start using them right away so now that we have that running let's go ahead and start deploying so I'm going to say yarn workspace at Council CLI and I'm going to stop again at the entry command of just cancel foreign so I've got my prompt now and this time I'm going to go down to deploy so with the CLI you can deploy any of the contracts within the council protocol if you want to do like a piecemeal deployment or some kind of custom deployment but then there's also two commands in here that are kind of like template deploys so we have a default one which we won't go into today but I encourage you to go and look into that if you're interested but what we will be deploying is this simple deployment here and so this is just going to be one core voting contract that Danny mentioned earlier One locking vaults so that I can deposit tokens and get voting power and then also if I don't already have a treasury or a voting token deployed it's going to deploy those for me as well so I'm going to choose simple I'm going to pick the host the chain I want to deploy to which is localhost I'll accept the RPC URL that's the default one and that's what my server is running on and then I need a wallet key here so I'm going to grab one of the wallet keys that I had over here on these initial counts just to pay for this transaction awesome so like I said I don't have a this is a new local network there's no voting token deployed on this thing so I'm just going to go ahead and hit blank here where it's asking for my voting token address I'm going to just going to hit enter and at that point it's going to ask me for a mock voting token name so it's going to deploy something called a mock erc20 it's just an erc20 with some extra methods that you can call to set balances of certain accounts or mint and anybody can call those so it's really good for testing so I'm going to accept the default mock voting token in MBT there for the symbol and there we go now we got a mock erc20 that's been deployed and we have our address here so the next thing that's going to get deployed is our core voting contract uh and the first thing you have to decide for this is how much voting powers are going to take to meet Quorum for this core voting contract this doesn't mean so for example right here the default I've got a million it doesn't mean that there needs to be a million votes towards yes to make the proposal pass it just means it just means that there has to be a million votes towards the proposal and then if the yeses have it then the yeses win and the proposal can be executed so I'm going to leave this as a default as a million and then I need to choose how much proposal or how much voting power someone has to has have to create a proposal so this is really a mitigation for spam you don't want a bunch of people just coming in and creating proposals if they're not engaged with your Dow so setting this kind of minimum proposal power just make or voting power makes it so these people have to be kind of engaged right they have to have some some stake in the game so I'm going to accept the default there for 25 000. and there we go we've deployed our core voting contract so the next thing that we're about to deploy is our locking Vault this is the one that you put tokens in and it's going to give you voting power back and the first parameter that you're going to have to choose is a stale block lag I don't want to go too much into detail on this it's a kind of complex parameter usually you can just accept the default and the idea here is that it should expand the entire length of your proposals you don't want this to be shorter than your proposals but for local test Nets probably just do something like 100 keep it kind of low there we go so we got our locking Vault deployed and we got the address but then you also see that we deployed a locking Vault simple proxy so simple proxy if you're not familiar or proc if you're not familiar with like upgradable proxies this is a pretty typical pattern for upgradable contracts basically we can use the proxy address as kind of a fixed address and we can change out the contract behind it in this case the Locking Vault without having to change what address is approved inside of our core voting contract um so now that that's deployed the last thing I'm going to deploy here is the treasury we're probably not going to be using the treasury today but it's going to deploy it anyway just in case um okay so now I've deployed all my contracts and I'm just choosing a name for this deployment this is arbitrary it doesn't do anything to your deployment but it's a name for a file that's going to spit out with all of your information about your deployment and then also a path for where that's going to go perfect so I've deployed all my contracts I get all my addresses here and if I go inside of packages the council CLI I can see at the path that I chose here deployments I'll have a new Json that's going to be all of the addresses and information about my deployment and this is what I can use as a reference moving forward so it's going to have my address the name of the the contract that got deployed a hash and then the deployment RX awesome so now that we have this deployed how are we going to interact with it let's get the UI deployed and so we can actually look at our our deployment so I've got my reference over here on the right and over here on the left I'm going to jump over to apps and this Council UI here is the reference UI that we mentioned earlier so inside of the council UI if I go to source and config this is basically where you're going to tell your UI what address all your contracts are deployed to and then also there's some metadata that you can add in here that isn't available on chain and that'll help inform your users on their on their voting for their proposals we have all of that information in the readme you can definitely check that out I won't go into all the fields that you can fill out in there but we have references here for mainnet go early and then of course like I said it's in the readme So today we're just going to be looking at localhost so I'm going to copy some addresses over there I need my core voting address right here and then I just need my locking Vault we can ignore the time lock for now we didn't deploy one of those and for the Locking Vault again remember you want the proxy because that's the one that's going to be fixed and then one more field I do want to talk about in here is this type so this type tells the UI what to show for these vaults because you're going to have multiple volts and they're all going to have different functionality different ways of measuring voting power so you might have to have different uis for all of these vaults and so we out of the box kind of support the vaults that we've already developed so if you're interested to see what those are capital c Council config has them listed down here which vaults have pre-built uis ready to go if you add in anything else you can add an arbitrary string but it's incumbent on you to build out the UI for that Bolt it will have a fallback UI by the way it'll just show you what your voting power is but you won't be able to actually do anything with it okay so I've got my addresses in there once you've got your configs ready to go you'll come over here to council.config.ts and map those to your chain IDs today we're just going to be messing with localhost so I'm going to I've commented out mainnet and growly uh and now we're good to go so from here I'm going to do yarn workspace again and this time we're going to call something on the council UI and we're just going to say Dev to run the dev server awesome so now we have this Dev server running on Port 3000 and there we go so the UI is built to be redesigned basically for your brand it's it's not we didn't go crazy with the design we tried to keep it kind of functional and simple and the idea here is that we we used a UI Library that's very themeable we use Tailwind for anybody who's familiar with that it's it's going to be really easy for you all to Rebrand and turn into your own but we do have a landing page as kind of a placeholder if you want to build off of this and then the rest of this is going to be a full-blown governance app so you can see all of the proposals you can manage your voting power within the voting vaults so right now we just have the Locking vaults you can see a list of all of the voters that have voting power in this so you're just curious to see like how much voting power or how much someone's been delegated to maybe you're looking for someone to delegate to you can do that here and then you can also see some details about yourself in your profile which is also what you'll see if you click on one of the voters in the voters list so you can see some stats about them as well as their voting history which is kind of fun to go back and see how people have been voting so there's not a lot going on in this UI right now so we talked about doing two things we or three things we've already deployed contracts and we've got a UI running on top of it that was pretty quick uh so now let's go ahead and create a proposal if you remember to create a proposal there is a minimum voting power required so let's go get some voting power real quick and to do that we're going to have to have some of those mvt tokens those voting tokens that we deployed so getting some of that we can uh actually use the CLI to do that as well so if I say yarn workspace at Council CLI and then I'm just going to stop here at the entry command of council again awesome so you can see we have this mock token down here this is really just for testing purposes but I can say mock token and I can say set balance and then enter in my mock voting token address over here and then the account that I want to set the balance for I'm going to set it for that first initial account that got funded with my local test net just because I already have that one in my wallet so I'm going to grab it up here it's the same as the first hard hat wallet that comes out so if you already have that it's the same one so I'll put that in as the accounts and then for the balance I'm going to give myself a million because I want to be a whale and I want to be able to meet Quorum on my own one two three four five six and then I need a wallet key of course to pay for this so I'll grab one of those RPC URL and there we go if we go back to the UI we should see that we have a bunch of uh voting token balance waiting to be deposited and turned into voting power so I'm going to go ahead and approve I'll use default just to approve as much as I can for now and then now that I've approved let's go ahead and deposit that and there we go you can see my balance went down to zero but my voting power went up to a million so I'm getting one for one on my on my tokens and at this point I have enough voting power to meet the minimum voting power needed to create a proposal so we'll go back to the CLI for that I'm just running the same command again and then this time I'm going to go down to proposal so I'll hit enter there and I want to create so for the voting contract address this is the voting uh core voting contract that the proposal is going to be created inside of so I'm going to grab the address of the one I just deployed and then I need a voting Vault this is going to so when I create a proposal I also get the first vote on that proposal so this is the vaults that are going to be queried for voting power for that first vote and then it's also going to be the vaults that it checks to make sure that I have that minimum voting power required so for this I'm going to throw in my locking Vault proxy there all right and so now I need a Target address this is the contract that's going to get called if this proposal gets executed so let's pretend that our proposal we felt like 25 000 was too high of a minimum amount to create a proposal so let's say we wanted to set that to ten thousand we wanted to lower that so that was a parameter on core voting so let's go ahead and Target core voting uh and then we need some call data for this so this is encoded function and Arguments for this proposal that's going to get sent to that Target contract creating this call data can be complex sometimes but we've got your back with the CLI again here so if I go back to that entry command again we can go to encode and so inside of code I have every single contract that exists within the protocol and then inside of these I have every method so that you can encode any call data for any contract inside of the protocol so we said we were going to do something with core voting so let's go to core voting and we said we wanted to change the minimum proposal power so let's go ahead and choose that what do we want our new proposal power we said 10 000 so let's put that in to three and then decimal Precision I won't go to into detail of what this is is pretty common with all tokens they all have a decimal Precision the mock voting token has 18 so we'll accept that as a default and then we get the call data that we need so now I can copy this paste it over here as my call data for my proposal and then like I said you get the first vote so what's the initial ballot going to be I'm going to say yes this is my proposal and then to pay for this I'll choose again one of these private keys our PC URL looks good uh last call block so this is the block after which you can no longer execute this if it wasn't executed so if it reaches this block your proposal is a dubbed you got to create a new proposal so I'm just going to accept the defaults here oh no and we've got a little error let me look we are yeah yeah but I'm happy to sit with you all after too um uninitialized Okay so I believe this is a problem with the deployment uh so we might have to back up and try this again real quick I might have hit too many defaults so let's do this really quickly so I'm going to do it all real fast again I'm just going to run Council start that server okay uh so we've got four minutes I I think I think it's best probably to go into q a at instead of trying to rush through this and then not leaving any q a time I'm happy to sit with anybody who runs into this issue and and solve it with you we weren't running into it when we were doing demos so I'm sure I just did something on the Fly that I wasn't supposed to uh but that's how you're going to use the CLI to deploy these contracts to get all the information you need to configure the UI and then you saw in there in the um prompting UI or the prompting interface that you can create proposals execute proposals interact with the mock token and encode any call data that you need for these for these proposals so with that we've got some awesome prizes that Geo's about to tell you about all right let's hear about some bodies thanks Ryan that was fantastic okay so um our Freighters our first Bounty uh is going to be around creating a new volume Vault so we just deployed an entire Dao and it was based on uh the lock involved which is basically one token one vote um this first for this first price we really want to hear and to see what you think is important for a Dao what you think um the voting power in the doubt should be attributed to so the best custom Vault voting Vault um and the best Innovative way of defining voting power will get home with a three thousand dollar prize perfect thanks Ryan um for a second body we have the best UI integration you just saw the whole UI that our team worked very hard on creating um but like with alsoever there's always room for improvement and there's always new exciting things to integrate into it you could use some sort of um Universal messaging system push protocol xmtp or you could create some UI for users to be able to easily create proposals in the web UI instead of using the CLI so non-technical users have a better handle of things and for this one we also have a three thousand dollar prize and last but not least we have the best use of the SDK or CLI as you saw the CLI is very complete it's very thorough but if there's any additional functionality you would like to see on it or if there's any scripts that you could think of that would be very useful to have um to add new functionality to the whole Suite then we'd like to see those two and there's a fifteen hundred dollar price for that one and with that I'll shoot it back to Danny and Ryan if you have any questions or you can find us in our booth right outside I think it's right on the other side of the venue right so much okay so is the mic working oh yeah all right whoa hey everybody I know I'm competing with dinner right now so thank you all for being here um so I'm going to talk a little bit about Uma I know some of you have already heard the Spiel both at the booth and maybe at side parties so thanks for coming back again to hear a little bit more I'm going to talk about how Uma is a decentralized truth machine and what that means is you can bring any true fact about the world that's provable on chain and then your smart contracts can use that to either allow or disallow transactions to use the data in whatever way that you need and I'll talk about a couple of different applications as well as what you could build at the hackathon so a lot of people have a misconception about oracles people just think like oh okay data feeds or Price feeds price data how do we set up a network of nodes that can deliver the data that we need with Uma you don't need a network of nodes you just need one person that's willing to say here is a true fact about the world and also here's a bunch of money if I'm wrong take my money that's the basic flow and that means that you have a really flexible architecture so you can ask questions that are really basic data things like what's the price of Bitcoin a typical Oracle question or you could ask natural language things like who won this election or did this deposit happen on this other blockchain or what's the result of this off-chain calculation that could be super complicated this like ZK circuit that you're calculating or did this governance proposal pass which is actually a use case that we're diving into right now around Dow governance which I'll spoil right now a little bit but get into later so yeah optimistic oracles the pattern is you enforce correctness after a dispute somebody's making this assertion they're putting a bunch of money at stake everybody's watching the Oracle for assertions coming through and if nobody challenges them within the challenge window the data is safe to use everybody had this big Financial incentive you had a long enough challenge window and 99 of the time proposals are correct for that reason disputes are actually rare and when we see disputes it is usually because either the proposer did make a mistake or the disputer made a mistake or there is some dispute about the wording of a question and I can talk about some examples or you could actually go to oracle.uma.xyz right now because we have some disputes that are in Flight that voting opens up later today we do refund gas for voting so if you get some Uma tokens you know five bucks worth you can go and become an Uma voter and you can spend that gas to vote and know that you're going to get it back as long as you vote correctly and that's probably the best way to learn how we resolve these things things that are around natural language wording human readable questions so here's what goes into it uh you could have somebody that's requesting some piece of data or a smart contract that's set up in advance to expect some piece of data you have somebody could be anybody who's making a proposal and posts the bond that's required and then you could have anybody else that's a disputer posts a matching Bond if a dispute comes up you need a dispute resolution process so that's where Uma comes in you basically have this shelling point game where all the Uma stakers are committing a secret vote on chains you can't copy people's answers you're just is it still going all right let's project okay so uh secret vote on chain can't just be lazy and copy people's answers you have to actually analyze the evidence and think what is the truth here because that's most likely to be the result then everybody reveals and you have your result it's also good to have a documented methodology of Truth so if you have some complicated question like you're running this whole protocol and you have to get a whole bunch of cross-chain data and run calculations in a specific way it's really important to let people know how to run those calculations make it predictable because without that proposers aren't going to risk money on making a proposal that might actually be disputed where there is some ambiguity of what the answer will be and then you need these economic guarantees that one disputers will show up and they're incentivized to show up and two that voters will show up and they'll resolve disputes and they'll actually vote and that it would cost way too much money to try to bribe the voters than to just arrive at the right answer this is kind of the flow I think that you can probably find these slides on our website or in previous things I'll figure out how to share it but it's a pretty simple workflow so asking a question post a bond along with an answer to the question if no one disputes great you know you have your answer after the challenge window maybe that's two hours maybe that's two days it depends on your use case if somebody does dispute it goes to the voting mechanism and it's kind of a Choose Your Own Adventure thing at that point some things like polymarket which uses us for prediction markets they wait until we get a final answer from our voting system and that's what they use other things like across which uses us for cross-chain bridging they actually throw away the disputed answer because they don't want to wait until it's all resolved it opens it up to new proposals then that somebody else proposes the correct answer so that their relayers get refunded faster so these are examples of real questions real use cases I talked about poly market and prediction markets we're also really good for insurance so Sherlock and cozy both use us it's great because you can ask these natural language things where there's no clear data source of whether a smart contract was hacked or if some severe weather thing happened that you would have an insurance payout but you can ask the Oracle and we can provide that answer and some other things that are worth talking about we also have these interesting on-chain derivatives that you can do like shapeshift Dao used us for on-chain VC fundraising in a decent in a defy native way where instead of the VC is getting a discount on a token that they could then sell and make a profit even if the token price goes down what they bought was an on-chain instrument that has a boosted payout only if the token price goes up over the long term so it's kind of like an embedded call option uma's going to verify the fox token price and then based on that token price you're going to get a greater or lesser payout as the VC who bought this option so it's much more incentive aligned you're not going to have VCS dumping on you but the VCS get an increased upside if they get the good outcome that they're looking for and then something really cool if you're using Uma you can actually trigger events after you get a a result so you can say here's some question about something that's going to happen in the future and you can think about how polymarket uses this they're setting up betting markets around a basketball game or something the game hasn't happened obviously no one's going to actually trigger this with a proposal until the game is over but you can start using it to bet on it for days or weeks in advance and then once it's time somebody can come in and make a proposal and then when that happens that can flow to other contracts you can define a callback function that automatically some stuff happens after the value is settled and the function is called price settled don't get distracted by that it doesn't have to be a price it could be any kind of data so it's kind of like if this then that thing so you're waiting for some event in the future you get a proposal about that event that proposal is accepted as soon as that's settled you can just have all this other stuff that happens in this callback function that may be automatically sends some tokens to somebody or it makes some change to a Smart contract whatever your workflow is and it actually makes your smart contract interactions much more autonomous because uma's system already incentivizes people to raise disputes and to settle things when uh you know it's actually settleable and then you don't actually have to do anything you're not like oh let's go and get this price you can Define this callback function atomically with the settlement it'll trigger the Callback and do some stuff in the rest of your smart contract system so definitely use this callback methodology if you're using Uma for your hack so yeah I mean this allows the real world to actually reach out and touch your smart contracts like some hurricane hit and you need to trigger some insurance payouts that contract could automatically send the funds to the people that are owed insurance they don't have to come back later and you know because it's it's happened and it's confirmed then they can claim it it can literally just send it to it as part of a callback function it makes it much more efficient another question yeah if uh what happens I'm sorry um it is if you're securing some huge amount so the way that you would try to attack Uma uh you can't actually buy or borrow enough tokens to influence voting yourself so this is the attack Vector you would try you would deploy a smart contract that's a bribe smart contract that says hey it's securing this contract that has five billion dollars in it we're gonna go steal the five billion dollars with some faulty Oracle data it's going to send the money to the smart contract and automatically divide it up between the co-conspirators and so the way we deal with that I you know I think anything up to like 50 60 million dollars that could be stolen like it's not like economically worth it to attempt a bribe attack given uma's Economic Security if it's a couple billion dollars it's worth trying but what you can do is you can have an alternate resolution path where you're using Uma in all of its earlier game theory around proposals and disputes to make sure disputers show up but then once a dispute happens instead of waiting for the Uma vote and then using that Uma vote to move money maybe you jump to your protocols on chain governance system or some other kind of dispute resolution system or you just throw it away entirely and then all that Uma is settling is the bonds and that's extremely economically secure like you could set a 50 weft Bond and it wouldn't make any difference nobody's going to be able to set up a bribe attack for 50 what so in that case like you know either you go to some alternate governance system or you just keep letting people propose and maybe it locks things up for a little bit and depending on what your contract system is doing you might make different trade-offs and across is a good example across is securing 40 million dollars and I think that a cross actually would be happy with using Uma for final settlement like that's within the range that it's safe but a cross doesn't want to lock things up for the entire Uma voting period they want their relayers to get refunded faster they don't want to get dosed through this thing so if a dispute comes through on a cross the disputed bundle of relayer refunds is just thrown away and somebody can propose a new one immediately and that gets things done a lot faster and then over the next few days Uma is going to cycle through and you know settle bonds so it's a really good question and then yeah talk to me later about Sovereign security which is kind of that alternate path which no one's used yet but we baked it in for exactly that use case so this is how you make an assertion you can see all of the components here where you're kind of requesting data and providing data simultaneously but what's nice about this is you don't need to go find some third party to deliver your data for you you probably already know what the answer is in a lot of cases but you don't want people to have to trust you so this keeps it decentralized while also being efficient you're like I know that Oiler got hacked for instance so I can go to the insurance protocol and I say Oiler got hacked because you know I want to get paid out on my insurance but you don't have to trust me and the people that provided the insurance don't have to trust me it's up for the liveness window if I'm wrong take my money and so it still keeps it decentralized while letting you do all kinds of automated workflows that are cool uh so yeah I mean just running back all kinds of stuff um I think it's important to remember that this optimistic Oracle it's not just for delivering data because you have these callbacks you can use it to automate things that you want to have happen in response to something that happens somewhere else on chain or on a different chain or in the real world you know you're triggering Things based on almost anything as long as it's publicly verifiable and you can actually uh one interesting use case is build a collection of Undisputed facts on chain that you can use to build other things and we've had previous hackathon projects that were exploring that all this stuff this exists it's not hypothetical these are real things I'm going to focus a little bit on number three right now with optimistic governance because we're trying to solve a real problem for Dows to keep them decentralized and autonomous so they can focus on just getting organized so this is a normal Dow governance flow you have a forum discussion and then people vote on Snapshot and then it kind of stops being a Dao and a multi-sig just decides whether or not to do it and so we're trying to solve that like you just like drop off and there's you know there's good reasons to use Snapshot though there are trade-offs for on-chain voting I think the gas cost for uniswap voting which has delegated voting it's over three million dollars since they opened up governance even if you only had like and that's in the best case scenario where you do have delegated voting and you have like a large treasury that you're securing let's say that your treasury is one million dollars are you gonna spend three million dollars on gas to manage this one million dollar treasury you need to have gasless voting for the vast majority of things that human beings might want to organize around so we're trying to kill multi-cigs for Dows for the most part like multi-cigs are not the right tool for Dao vote execution your Dao is the multi-sig uh you can use our Oracle to verify basically this thing passed on Snapshot therefore I can execute it anyone can execute it and in the future we'll probably set up Bots that just automatically propose and execute just watch snapshot and it's like hey this past okay propose you know make it fully autonomous like that and the truth is economically incentivized and it's super easy to set up a huge number of these dials have this pattern where you have snapshot you have a safe with a bunch of your money in it and a multi-cig and you just don't want to use the multi-sig you can attach the Uma module which is audited by open Zeppelin and live in production with a bunch of people right now and then configure that with your snapshot space it'll take an afternoon maybe if you're doing it by yourself and taking your time with it or you could come talk to me at the booth and we'll do it in like five minutes it's really really easy and this is the flow you know so you deploy your module you're setting the parameters and then it's kind of like normal you just go through snapshot you're creating your snapshot proposal the only difference is you can attach a specific transaction bundle and you're saying execute these transactions once this is done and then if it passes you're going to see a button in snapshot so like it makes it easy for anyone to just click the button to propose on chain after the challenge window if nobody disputed it click the button again and execute it and that's open for anybody to do you don't even have to be a down member you know it's just something that has been proven now through uma's system and you can also set your challenge Windows to be pretty long we've had dials that have implemented this to set the challenge window to like five days because they're not in any rush they don't need to move quickly the way that a cross is a protocol needs to do the Dow is like hey I'm going to move five million dollars but really make sure that it's correct and they're okay with it happening days later and they have plenty of eyes on it so we're getting a lot of adoption early on in D5 which has been interesting to see I think part of that is because a bunch of these D5 protocols know us from back in the day when we were doing these more on-chain derivatives and exotic option type things so they know us and used us already see shape shift pop up again you know if they already did their VC fundraising round on chain using us it was kind of easy to sell but I think a big part of it too is D5 protocols really want to be decentralized and that's on principle you know like why did you get into this space because you want the centralization and you know that using this multi-sig is bad it's also a practical thing it feels very precarious to be a multi-sig signer especially in the United States and there's a lot of legal and Regulatory surface area there where it doesn't look good to be a multi-sig signer and even if that wasn't the case it's really inefficient and annoying and you don't feel like you're doing your job because if you want to get things done quickly people are just bugging you like hey John can you sign this transaction I'm not necessarily going to look through and analyze every transaction myself I'll be like okay yeah Hart said to sign the transaction the transaction is probably fine but that's not how it should be this way it's all being rigorously checked both through the voting process and afterwards by a lot of third-party people not just you as the signers and you don't need to chase down signers across time zones anyone can propose and execute I'm like the snapshot vote is done I've done this for Dows I'm just like hey like you know excited for them like you're able to propose this now and then I'm like but I can too and so I just go and propose then on their behalf because anyone can lossless is kind of interesting because that's a protection protocol where they had a tool where you're able to essentially reverse hacks where if you have tokens that were using earlier their special token contract it includes a freeze and transfer function and they were able to rescue a bunch of tokens that were stolen I think in the Ronin hack and they were looking to do that for things like wet where their old token model wouldn't really work and they were able to use osnap to bridge the results of their lossless token holders on whether to unfreeze or whether to transfer funds to a particular address based on some public evidence so that was kind of cool to see this integrated not just for your typical treasury management thing but for actual core protocol governance which is how they're using it for this new product they're rolling out and then plus company is neat because it's a very small Dow they don't have a lot of money and they're safe it's basically a network of creative agencies and they wanted to set up internal Dow for the 3000 something members of their agencies and they want all these people to vote but it's not about a lot of money if you were actually to do this on chain this Dow instantly becomes totally unviable like there's no point to do this you're going to spend so much on gas no one's going to vote this I think that they're using nft based voting and that's another neat thing about snapshot voting you could have voting power that's calculated all kinds of different ways you could consider three different tokens like the across Dow does they have their basic across token they also have staked across LP tokens and then they have the across success tokens and all of those things have voting power and snapshot which is easy to set up that would be a nightmare to set up on chain and if they wanted to give like nfts to their community members and add some governance rights to those how are you going to do that in a smart contract absolutely terrible and if you only have a thousand dollars worth of ACX why are you even gonna vote at all this lets your Dow be more decentralized in the sense that your voters can actually vote you don't have to delegate everything you can actually be engaged as a small token holder which people want to do so this is you know this beautiful future of dial coordination yeah uh we got like a lot of tutorials um if you go to uh uma.xyz or docs.uma.xyz you'll see some tutorials you can deploy a prediction Market or an insurance protocol or a bunch of other stuff uh within a pretty short time frame and even if you're not doing prediction markets or Insurance it'll walk you through all the steps of how Uma stuff works so your specific use case can be modified I know this was billed as a workshop but I'm mostly just like talking a lot with words but the thing about Uma is it's kind of a cheat code where you can use words to govern what happens like write out a couple of sentences here's what I want to have happen here are the rules of this smart contract and so all you need to do to modify the tutorial is just change what the words say so it's not as technical it's not a lot of smart contract work you can use the audited smart contracts as is just change your wording to your use case prizes uh so we have a really weirdly big first place of five thousand and then second place it drops down to two thousand but there's also a pool prize of three thousand that gets split between everybody that does some Uma or across stuff you can also do across stuff uh across as kind of a sister protocol that um a lot of the like Uma team members were working on initially and we split into two separate things but still kind of related so you know come talk to us about that too like cross chain bridging if any of your stuff is related to that there's a lot of cool things you can do especially around passing messages which some protocols have started to do it's a new feature added to a cross where you're not just sending tokens to some other chain you can also add a message that goes along with those tokens that could then trigger some stuff that happens on the other chain which has been under explored so far and reach out to us um you know we're always hiring we have a bunch of open positions if you don't see a position that looks right but you're really interested in this stuff please reach out we're also starting a community ambassador program too where I think we're going to start sending people to hackathons and things like this I think especially with osnap or optimistic governance thing that's much more um I don't know like it's more like a wide audience thing than the Oracle as Dev infrastructure so we want to reach out to a lot more people and we want to grow that community so come talk to us about that as well oh and our referral program is kind of interesting if you refer somebody to us you get paid with an on-chain option and our Oracle will verify how long this person stayed at the company so your option will pay out more based on how long they're staying so it's kind of similar to the success token thing you get like this boosted on-chain payout if this is a good candidate they make it to the interview stage okay boosted payouts they get hired boosted pay out six months boosted payout and I think that we actually have time for Q a or if you all are diving into your hacks I know that the hackathon has just started this is the last talk right our last Workshop today okay any uh any other questions or thoughts on this ideas yeah probably yeah I mean depends where you are I guess I mean we're not going to like tell you what your taxes are but it's like any other token thing but yeah you'll get some tokens I think it'd be like some Uma tokens at the end of the day and uh this is not tax advice but you wouldn't actually have anything until the expiry date of the options and so whatever Uma is worth at the time that you exercise it is probably the relevant thing but I'm really only familiar with the American context so it depends on where you're at um how would this audacity transform entrance uh infrastructure how I would not pay it over there so I think there's a couple of aspects to it there's um there's a lot of conflict of interest of the insurance company that sold you the insurance also deciding whether or not you collect the insurance everybody kind of understands the game is you pay the insurance company money and then they try not to pay you and they'll find any way not to pay you and this takes it out of their hands and so there's a couple of ways to think about that one is you need to make it a lot simpler it needs to be publicly verifiable it's not based on specific things it's not like oh my sync leaked or something like there's no way for our Oracle to go and verify that this was like from your sink leaking if you could have higher level stuff like oh the smart contract system was hacked that's like the active insurance thing that people use you could also do something like a custodial Risk insurance it's like I have a bunch of money in binance is binance going to lock withdrawals like I want insurance against withdrawals being frozen on binance that seems like that'd be really practical and you're not buying that insurance from binance obviously which is kind of like the way Insurance currently works like it's the person who wants to pay you the lease and it's not up to the person that deposited funds and the insurance pool either they're not voting on it this is going to a neutral third party Oracle whose whole incentive mechanism is built around finding the truth to whatever question it is and is receiving all kinds of questions uh um I mean potentially I guess like it's all happening on chain with uma's stuff so if you had some funds that are off chain you'd probably convert it to usdc or something and then uh you know there are custodians like I'm imagining this whole like Enterprise stack of like normal insurance companies they probably go to like coinbase custody or someone to like hold it for them and then like put it into the smart contract that's controlled by Uma and pay Consultants like some ludicrous amount of fees but yeah you should be able to do that like to the extent that companies can interact with the chain at all you know it's permissionless so then after you do that you could probably leave it open too for just random people to be like here's 20 more bucks for the insurance pool yeah okay yeah no that's perfect yeah I mean uh yeah let it if you check out our insurance um tutorial let me know if it like looks good yeah okay awesome cool thanks 
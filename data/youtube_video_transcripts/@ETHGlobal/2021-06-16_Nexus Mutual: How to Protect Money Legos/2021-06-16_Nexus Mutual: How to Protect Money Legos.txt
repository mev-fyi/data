we are live everyone hello everyone welcome to the nexus mutual how to protect money legos workshop i'm honored to be joined here by anatole um from nexus mutual and so i'm gonna pass off to him to kind of introduce himself and if you have any other questions uh you can kind of as the presentation goes on um please reserve them for the end there's a q a um at the end where anatole will allow you to ask your most burning questions so um feel free for that um but yeah amazon feel free to introduce yourself thank you hello everyone uh nice please please you're here uh pleased to meet you here uh my name is anatol presacaro uh and i'm a core dev at nexus mutual mutual and today i'll talk about uh how uh can you hack uh into our project and uh build something and on top of it uh to protect other defy projects so let's get this started so first of all i'll talk about the prices that we're offering uh uh during this hackathon uh first of all we have the immediate integration price that's uh two thousand dollars in uh paid in the rapid exam uh there's uh the long term alignment price uh also two 000 u.s dollars in rotten exam and the pool price of about four thousand dollars and uh besides this uh i have to um i want to point out that we have uh extra community grants that you can apply and production projects you can uh get uh sponsored uh so uh let's dive uh into this so i'll start with a few project ideas um that you can build during this hackathon first of all we have the um you could build a cover recommendation engine uh and this means that users would connect on your website with their wallet and you could automatically suggest the best cover products uh based on the assets that they hold and based on the farms that they participate and the pools that they contribute to and so on uh secondly you can you could use the a distributor contract and build integrations on top of that and if i create find creative ways to compose nexus with any other projects for example insured vaults or stuff like that um another interesting idea would be a delegate is taking uh this uh we basically have the pools taking contract and users often have trouble uh uh staking by themselves or changing products um and uh a delegated state staker would uh uh accept the uh tokens for all from little kitties and would decide what products to uh stake on and the covered the tokens uh would be another idea that you could build and it would uh basically mean that you would be able to build a natively covered token that could be used anywhere on um uh in d5 uh so let's uh talk about nexus ritual first of all uh what is nature's mutual where the section discretionary neutral based in uh in uk and we offer cover against defy risk what cover means uh it means that in case of hack a smart contract a bug an oracle attack or something like that if something happens with a protocol we are off you recover and you can uh get um basically if you're covered against a particular risk you will get your money back um if something happens it's not an insurance product because it's a discretionary mutual and also because of that we have the legal requirement uh for all the parties for all the members to pass the qac let's talk about the protocol so we have a list of protocols you know on our website and um first of all we have the rules um and uh the first role that um uh does something uh inside the nexus mutual is the risk assessor uh so basically the risk assessor decides which projects protocols are safe and uh if he thinks for example that wiring uh curve rb or vinus is a safe project he would stake an exam on those protocols uh doing so he creates capacity so a cover owner would be able to then um purchase a cover on the protocol that he desires uh he would pay the premium um to the protocol and the the risk assessor would uh the risk assessor gets 50 of the premium uh that the user paid uh going on uh if an incident would happen on the covered protocol the cover owner would submit the claim and then we would have the claim assessors that would vote on the claims and after the after the voting basic um based on the um outcome of the vote if the uh vote uh is to accept the claim the cover owner would uh receive a payout and the claim assessor would claim assessors would be rewarded uh with some an exam uh moving on uh we i should talk about product types because we have the protocols the projects that you can see uh but um there are different risks that we can cover for example um uh if we're talking about an exchange a centralized exchange that takes custody of the user's funds uh then we can we offer custody cover so a user uh would buy uh custody cover and if the withdrawals uh are halted or the funds are lost from the exchange then the uh cover owner will get reimbursed uh then we have the protocol cover uh basically if you want uh to cover a specific protocol risks against a risk that can happen in a specific protocol you would buy a cover on that protocol that would cover boxing the coverage protocol economical attacks oracle fails failures governance attacks but it's important to not know to notice that epoxy and other protocols are not covered so if example if for example you are uh using the curve uh i have a pool uh and something um happens in curve you are covered but if something something bad would happen in avi then this cover wouldn't um protect you from the failures so for this reason uh recently we uh developed the yield token cover and uh uh the yield token cover product uh uh offers you cover on a vertical instead of a horizontal uh uh direction so you would have a specific token for example y uh usdc from wired and if that's um if the token uh happens to have a d-peg and uh we would cover that uh loss up to 90 of the cover amount uh moving on um in case of the ill token cover the claim assessment is of course a bit different uh because um uh compared to the uh or um the protocol cover when the users have to create a claim and then the claim assessor have to vote in the ill token cover claim uh the advisory board uh using uses the governance to add an incident and then the car uh the cover owner would send the debug tokens and would receive immediately the payout there's no claim assessment process uh other than the ad incident everything is just automatic um okay now that you have an overview we'll dive into a bit more specif um in some more specific details uh so first of all in order to buy a cover um you need to use the quote api the code api is hosted us and you request a quote and the code api will uh uh query the unchained data for the staked amount in the post taking contract once it has that it calculates the amount the user has to pay and sends back a sign code then using this quote the cover the member can purchase a cover uh by interacting with the smart contracts uh a little bit of details about our code base so you can find our our contracts um on github at nexus mutual that's uh smart contracts uh we're using hard hat uh we're not using uh hardhead eaters but you can try to add that uh as well uh it's not a big difference in their apis anyway so you should should be just fine using this uh you can try adding uh waffle eaters it should run um it it all should run just smooth haven't tried but you could try it it should run uh all right um and just use the master branch and uh uh the basic uh the most basic way to get started would be to just fork our uh our repository and then uh just add your contracts and tests in there because the whole system has to be deployed and we have the integration tests that take care of that uh the structure of our code base is like this so basically first of all we have the contracts that in which we'll find more folders but the more important ones are the interfaces where you can find the interfaces uh that you can use in front and are in your contracts uh the modules folder actually holds all the import and the heavy stuff uh we have all the uh heavy lifting in there and uh you'll find the the capital the claims the uh quotation and covering uh information in there as well as well as the governance and staking modules uh then we have the scripts uh where you can uh use the deploy.js for a testnet deployment but we really recommend using our deployment because it's ready and uh you wouldn't waste your time uh deploying yourself and finally the test folder uh and you'll find a unit folder in it where we keep the unit tests uh that test one contract at a time using mocks the integration folder that has um a more a more advanced uh testing framework because it uses the entire system and the fork folder that we use for uh usually before deployments for for testing um in a more comprehensive way and make sure that whatever we deploy will be live safely and uh nothing will uh no goes off okay so if you pick the uh local environment uh test test net development method uh basically you'll have the uh you'll use the integration folder from the test uh you can find there the set.js that deploys the entire system uh it's called automatically you don't have to call anything uh you'll find all the um tests in all the basically you have a list of modules that we test in index.js everything is required so you can comment out anything that you are not interested uh into and uh you can just add your module that uh will be run you'll have you'll notice that um in our setup um mocha isn't running uh the test recursively so um everything that is added has to be included specifically um [Music] if you haven't added the um file uh haven't required your test it will not run so it's just like standard javascript you don't no nothing happens magically in there you'll find yourself home okay so if you go uh to the um if you pick the kavan testnet uh development method uh for example for uh testing your front end or demoing your product [Music] you will have here all the information that you need first of all the apis and addresses on coven are can be found at egypt staging that nexus mutual that ios version data um uh also the code api uh that we are running it's at uh slash v1 uh slash quote uh you will need a product list uh the coverables uh uh at the contract.json and uh for coven you will have to wait list yourself uh to pass the qic yourself and we deploy the contract that will do that for you so you don't have to don't have to contact us for white listing just use the contract and if you need uh kovan if you can just ping us on discord and we will give you some okay so let's talk about the ideas a little bit a little bit more in details uh so uh a lot of user users are confused uh as for what cover to buy uh because uh d5 is highly composable and uh a lot of projects are using other projects uh behind uh behind the curtains uh and users often don't do not know what uh projects will uh uh what what protocols do they have to get cover on to actually cover their risks for example if one uh deposits some lp tokens uh deposit some tokens on uni swap and those tokens belong to another protocol the user might need cover for unisop and for the uh set protocol but often users are confused about this and they do not know what they have to buy so you can get a list of coverables available protocols that we have from the contract that's json and um do not pay attention to the addresses themselves because they are just identifiers but you're interested in the uh protocols themselves um so what what you will do in uh um this um scenario you would have to crawl the balances of the users and categorize them on the specific protocols and uh recommend the user to buy one cover or another or a list of them and so on okay so moving on integrations with the distributor contract because um with nexus mutual you need um to pass the qic uh there are distributors that can offer cover to uh to people outside of natchez nexus mutual and technically technically lexus mutual offers the cover to the distributor contract that's a member of next of the mutual and then um the distributors passes and nft forward to the user um we have a distributor that's all uh which uh a contract which is um an example contract implementing uh erc 721 which is the nft standard and you can use as an example and either modify or build on top of it users that will use this contract will not need to pass the qic uh since the distributor is the qic entity uh you have some documentations regarding the distributor in the docs folder in the repository and we challenge you to think what new apps or products uh you can build of it uh what integrations can you come up with what interesting edge cases maybe uh or other ideas uh next on the list is the delegating staking idm uh so we have the pulse taking contract that is the current staking implementations and uh as we know the fees were skyrocketing and this wasn't an option for anyone to use it because you have to stake on multiple protocols and when you have a lot of storage rights uh this isn't really scalable and gets expensive really quick but if if people would pull together and um someone would and would delegate someone to stake on their behalf this could be much more efficient uh so a delegate is taking a project and built on top of full state uh poolstaking would be an interesting idea that we would want to see implemented moving on we have uh perhaps my uh favorite um uh idea because uh it uh allows uh it's in the spirit of uh defy legos uh so uh the cover tokens uh uh ibm uh as we have uh as i told you before we have the east open cover product uh that offer covers uh against token debug so if you have the ysdc for example uh you would buy cover token uh eel token cover and if the token uh with the depak then you can just send it back tokens to us and you would get back the die or if or whatever the underlying asset is um so the idea would be to create a token that supports this natively and you would uh have the uh cover built into it uh you wouldn't have to get the token from one um from one project and again and then get insurance from another you'd have just one stop where you can get a natively covered token and use it uh and um swap it or do whatever you want of it in the spirit of money legos okay so for this idea you would probably want to integrate with the gateway that solar distributor that's all contracts uh in gateway that's all we basically have everything that you would need uh to implement this and distributor that sold itself uses the gateway so gateway should be uh the way uh to go to integrate everything that you need for this idea don't stop when just these ideas think of something else that maybe you have another great idea that we didn't think of that always can be the case and ask questions on discord and uh let's discuss and see what other ideas you have that you can build on top of nexus so um i'll stop here for the questions and just like a small note if anyone like would like to ask questions later on discord you can always feel free to ask it as well as you see on the screen in the nexus you know sponsor channel all right okay let's see a few vinyl calls for questions and if not i guess we can um adjourn yeah you can find us always on discord i turn the notifications on so make sure make sure to ask them there and we'll see you guys build building yeah thank you so much anatole for the presentation and thanks everyone for coming have 
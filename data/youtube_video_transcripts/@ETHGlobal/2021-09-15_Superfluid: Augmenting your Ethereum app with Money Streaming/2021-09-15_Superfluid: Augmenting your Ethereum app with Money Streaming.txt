good sponsor workshop joining us today is francesco and meow from the superfluid team and with that i will hand it over to them to kick off the session and introduce themselves okay uh hi uh this is amir i'm from superfluid i'm cto of uh superfluid and uh very very happy to be here to introduce you guys about how to create super apps um hi everyone i'm francesco i'm gonna give you a brief uh introduction to uh superfluid uh i hope it's not too boring sometimes there's people who already know us so i'll try and keep it short and after that i'll give back the microphone to meow who will guide you through a bit of solidity and we can have some fun there with the new applications that we're gonna that we're gonna build all right so i'm gonna share my screen i hope you guys can see me here we go so hello everyone francesco founder of superfluid so superfluid is uh basically an application that allows us to create digitally native programmable cash flows so this is a very new thing in ethereum whereby we can create recurring payments we can create cash flows natively on chain using smart contracts so what we do at superfluid is basically streaming money so transferring money from one part from one account to another over time without the need for recurring transactions and by transferring money every second we do this without capital lockup which means that users funds aren't locked inside a contract but rather are completely fluid and can move around in a very capital efficient way and we have programmability built into our contracts and what this means is that you can basically build uh defy like applications that use streams natively and i'll show you a bit later what that means so why are we doing this so as you all know uh the internet is the information what blockchain is the value right blockchains are meant to transfer value and we've seen great things happen uh with people you know exploring the blockchain and creating things like defy and tease and all sorts of other applications but at the same time we haven't solved something very simple which is the fact that services flow in real time from the provider to the client right so when you subscribe to netflix you start enjoying it every second right you don't have a kind of chunky experience the payments are still chunky so you subscribe to netflix you watch videos all month and then you pay at the end of the month now why is there this disconnection between how services flow and how payments are done but we believe it's because we're still using antiquated rails but with blockchain we have the opportunity to rebuild those rails from scratch right and this is what we're doing with superfluid where we're building uh basically a new kind of money with a new kind of way of transferring it which is money streaming so money streaming is basically it's a frictionless connection and it's basically an open-ended one right which means when you open a stream to a counterparty you make one on-chain transaction and this transaction initiates a transfer which goes on forever or until you run out of funds so every second your account will tick down and your counterparty's account will pick up so funds are transferred effectively at every block now it's a very interesting frame from an economic point of view because you have a direct connection between value transfer and service provision if i'm working for someone and they pay me at the end of the month i will always have this risk that they don't actually pay me at the end of the month right and then in that case i've worked for a full month for free but if they're paying me every second then as soon as they stop paying me i can stop working because the value transfer and the service provision are linked directly and this is uh is great for all those services where there is risk right and obviously in global uh in a global market there are risks so um by using uh something like super fluid streams you can effectively remove delays and payments right you never get paid late because you're getting paid every second there's no risk in not getting paid because you know exactly when you stop getting paid and there are no intermediaries which means nobody can block the payment except for you and the sender and this obviously in the context of blockchains is very common but as you can imagine in traditional finance it's very common for an intermediary to freeze a payment now this can never happen uh on the blockchain so how does superfluid work well superfluid basically uses the blockchain to its full extent not only do we store data on chain but we also use uh the clock that's present in the blockchain and by unifying the clock with the data we have we can then calculate user's balances and because uh calculations are free when you query them we can have basically um balances which update in real time every block without needing to pay for gas so because of this when you make a transaction to open a stream that's the only gas you will ever pay after this money will basically transfer itself for free with no transactions needed now this might sound a bit crazy but i invite you all to go and try it and you'll see that it actually works so how superfluid works is through super tokens so super tokens are an extended version of erc20 that enables these real-time functionalities and these functionalities are organized in an agreement library the first agreement that we built is called the constant flow agreement or cfa and that's what we will be showcasing today and it's basically streaming money but we also have another functionality that allows you to send money to lots of different people which is very useful in certain circumstances you'll also see this concept of the superfluid host coming up quite often and this is basically the brain of superfluid it's one single big contract which handles all these complex interactions so programmability in superfluid is something you have to wrap your head around so it's a bit different to building a normal smart contract when you build a normal smart contract your user interacts with your application and only in those moments uh your your state changes right if nobody does anything the state doesn't change now in the case of superfluid it's different because if somebody opens a stream to your application your application's balance is ticking up every second right so you have to build your application to take into account real-time balances you have to build the application to take into account the life cycle of a stream which is started can be updated and can be terminated right but you can build very interesting things so for example you can build a super app this is how we call these contracts that react to streams that receives streams and opens streams of its own and the very interesting thing is that if you're opening and sending a stream at the same time you can do this without needing any deposits so you can potentially build an application which handles millions of dollars in volume but has zero deposits and that's something that's very unique to how superfluid is built and this is uh to give you an idea of how super fluid apps work so we have super app uh super apps which basically have these three functions which trigger themselves when a stream is open updated or terminated and then in the front end you have a very simple sdk to open streams and i invite everybody to go and try it so just go to app.superfly.finance i'll show it later as well and you can basically open streams close them update them and do all the all the things i talked about today so for this hackathon we have twelve thousand dollars in bounties um you can find more information at hack.superfluid.finance so you can see there the details of this but uh suffice to say we're very excited to see what she builds we have a price for everyone so apart from this there's also eight thousand dollars if you use die which were announced yesterday by maker now so we invite everybody to you know have a look at our bounties and come and build something really cool so thanks thanks a lot for if online to for having us and now i will um pass it to meow who will uh start teaching you a bit of how to build a super app okay thanks francesco um what i'm going to do now is to create a super app live so [Music] first we need to go to the remix.ethereum.org it's a very nice in-browser id where you can create your own contracts and deploy everything is built-in it's great so once you are there let's create a new contract let's call it uh uh simple stream swap so what i want to achieve here is to create a streaming swap system that uh exchange one token for the other in streams without yet the the liquidity provider logic for simplicity it's something for you to figure out later but we'll just demo you here how easy it is to create a programmable super app right so let's create this and uh let me copy paste the first part it's first you need to include all the super fluid related contracts so as you can see here um we are including the um i superfluid the host contract the super token interface which is an extension of erc20 and uh the way to interact with agreement the i super agreement and a bunch of definition files so it's all available through the i superfluid solidity so our ripple by the way is at superfluid finance slash protocol monorepo on github.com there you can see all our packages including the ethereum contract including the javascript sdk provider and including the subgraph mappings and schemas we we shipped so and there's a couple of other headers included then next we're going to create actual super app so let me just get the second part of it there you go so what it does is that it creates a new solidity uh contract which is going to be a super app it inherits the super app base it does a bunch of boilerplate for you so that you don't need to write a longer contract than necessary within this contract we define a something about the constant flow agreement which francesco mentioned and this is uh the id of it and we have also the store the relevant host contract where is it during the construction phase and you select also the uh super token one and support token two so the idea is that this contract will use a simple string swap demo exchange your token one for token two and vice versa right so in order to do that you have to provide uh two tokens in uh during the construction phase and uh and there's a bunch of other nitty gritty here you can check out our docs super fluid finance find out why where it's configured and in the end what you do is register the app with the configuration you selected and after that that's done then you have a super app but it's not complete yet next is to create the callbacks right so let me copy paste the callbacks so we are going to define two callbacks for this demo one is after agreement created meaning that when you send a stream to this contract it will do exchange it's defined in the underscore do exchange function i'll explain that in a bit and the counterpart of this function is called after agreement uh terminated so when you delete the stream it will then stop the exchange right so in a do exchange i'll show you what it does is that select the other token so if you send a stream in token one it will select the token 2 vice versa and once you know the token then you can we also need to know the info about the incoming stream so we need to know which user is sending it and what's the flow rate flow rate is defined as amount of amount of token per second and it is with uh 18 bits sorry 18 decimals accuracy then in the end you can create the flow so there are a little bit uh code here but in essence what it does is that it calls a host core agreement a function and it creates a flow with the output token sent to the user wins the same flow rate so let's say if i send you 10 die per month flow rate i will get i will get the 10 usdc per month if i set up the token one as die and token 2 as usdc so that's all it does um in reverse in the termination it does uh the the opposite of it which is uh similar here get the uh the other token from tokyo one two token two to token one yeah is getting the flow rate in the end then delete the flow so all in all there's a 188 lines of code let's do a live deployment all right we're going to inject the web3 uh in order to do the deployment we need to know the host contract address sorry and select the simplest stream swap deploy if you don't know the addresses we come to this uh docstar superfluid finance there's a a section called the network directory so i go to the section about gurley i select a host and then i select the fdi access so token one and now i select the fusdcx as token2 that's all i need and double check host address girly that's all i do a transact confirm [Music] all right let's wait for girlie to input it faster right let's put tiny here all right all right it's already deployed so now we have the uh address ready so i'll hand over to francesco to continue the rest of the demo meanwhile i will fund the token yes i will put this to the chat all right did you see that yeah i stopped sharing i'll find the contract in life okay okay everyone so we have uh an exchange deployed um so basically this exchange is going to swap any uh die we send to it for uh usdc that we sent for usdc that now is going to deposit events so again as now said it doesn't have any lp logic so basically if it run out some phone runs out of funds it will break right so this is not a complete contract it's not finished it's not perfect but it shows kind of how you can use this so obviously the simplest way for me to do this this is our dashboard on connected on gurley the simplest way would simply be to input the address here select die and open a string right but we're developers that that's boring right so let's do it using our sdk it's going to do exactly the same thing but we can do it through javascript so i've already created a superfluid object here so i can basically go and now use the sdk to to create the stream right so we're going to create a stream of die towards the contract and if it all works we will receive a stream of usdc so the first thing i'm going to do is create a user object so the user object is basically a way for us to interface with superfluid through a user entity right so you have a user and then your user does things so let's see my user equals sf.user address and here you specify the address which i already saved as a variable and we specify the token which we're going to put sf dot tokens dot f x okay sorry guys my user here we go okay my user equals this okay so like this i'm going to create a user object now i'm going to save the exchange in a new variable there we go and now we can basically create the stream so the way we create the stream is myuser.flow okay wait actually we want to await this because it's a promise myuser.flow and we specify the recipient which will be the exchange and the flow rate now like uh now mentioned before the flow rate is defined is basically tokens per second with 18 decimals so you have to do a bit of calculation here to figure it out so we're going to send 3 000 per month per month means we divide by 30 days 24 hours 60 minutes 60 seconds but then we multiply by 18 decimals okay so if that looks weird it is but you'll get used to it then we go to fix zero this is gonna remove any decimals that could be caused by the division and then we take it to string and this is because it's a big number now with this we are basically going to create the streamer pray it works okay it should trigger my meta mask okay confirm and let's see now if everything goes well our streams should appear here let's see the sub graph just went down just before the demo so i hope it's working now but if it's not we have someone to blame okay it worked it worked that's that's lucky okay so that worked as you can see i'm now sending right we have the minus sign so i'm sending die and i'm receiving back usdc and this uh happened through the contract that now just deployed so as you can see very simple contract you can do this too right this is very simple and i should now be basically receiving uh usdc now let's do the opposite let's go and close the stream now closing the stream is pretty much the same code except we set the flow rate to zero now by setting it to zero it's a shorthand and it will basically delete the flow so let's see if this works then we should be able to see the stream getting close and yeah that's it it was quite easy so other things you can do with the user object is uh get the details so if you get the details basically it will give you back some information about that that account right at this point in time i don't have any flows so it doesn't show anything but if you did have clothes it would show all of them here for that specific token and remember that users are token defined so if you have more than one token you have to create different user objects so yeah that was our demo uh there's a lot more you can learn if you go to our docs which are here and if you go to our hacker page so the hacker page has some great resources for you to for example see our prizes but also uh you know some past uh workshops we did some previous ideas that were built and you can also submit an idea for feedback and this gets posted directly to our discord so people can interact and find you and maybe you can create a team of them i will also be hosting a brainstorming session tomorrow during our community call so if anybody has time to join that it's a great opportunity to meet other people that are already hacking on superfluid and uh you know basically find people with good ideas to to work with now superfluid was born out of hackathon so you know it's don't think of it as kind of a side gig think of it as you know your first venture into web free so i'll just check if there are any questions in the chat i see that there are uh you can't simply stream any rc20 yes correct first you have to upgrade the token to what we call a super token which is what happens here so basically you input an amount and then you upgrade it and this basically transforms the die into a super type um let me see what else so it is the two transactions that use yes okay now has actually already answered all of these waste time how does superfluid make money is there a platform fee no everything is free so uh don't worry um there's no platform fee uh obviously there are gas fees but on matic i'm calling on xdi very cheap so you shouldn't have to worry about those and start off.eth asks us since superfluid is not changing any state i assume the stream is just the computation of a balance in time and super tokens are some what locking funds and transferring once the stream terminates yes and no so superfluid doesn't ever transfer the funds uh or they're always transferred there are different schools of thoughts here but uh for all effects the the settlement is every second so every second the funds are transferred it but it is happening without uh any gas but uh it is a computation so you're correct on how it works but uh there are there is no chance for it yet uh how does superfluid make money uh we don't make money we spend money uh we are uh very good at spending less than money so at the moment we have no business model uh but we still uh managed to survive okay does anybody else have any questions uh anything we didn't cover here in the dashboard you can see more things like for example your activities these are all the streams you opened the dashboard is a very good tool as you develop to test your app if you need to open a stream towards it uh the recipient can also close a stream uh bubble was asking um so if the recipient closes the stream actually that's a very good question our code is currently not tested for that and i know for a fact that it will break if the receiver closes the string in this case so obviously in the example we wrote right i'm sending die and i'm receiving back usdc so if i close the die stream then the contract will function properly if i close this the usdc stream then an unhandled error will break the contract so that was a very very good catch uh bubble i hope nobody would uh notice that we built the contract as a proof of concept it's not finished and uh we're looking forward to someone uh finishing that but you know this is just an example right you can build anything at the hackathon it doesn't have to be this is it possible to reverse a stream the flow can go either way based on a contract's state no you can't do this because that would basically give the counterparty a way to pull funds from what you can do is that both parties can open a stream at the same time to each other and based on which one is higher the funds will go in one direction or the other so if i'm sending meow a hundred dollars and he's sending me 50 it's as if i was sending him 50 right but if he updates his stream to send 150 then he's sending me 50 right so based on that you can kind of juggle these things i should also mention that that we have a community call on thursday and we'll have a brainstorming session about all kinds of ideas i think that's uh those questions and the ideas are perfect for the community course so please come to the whether we can do people find about community call uh so for the community call the best places to join our discord which we will link here and there is an announcement there so simon is asking the brain has an index of all contracts or something and transfers from f token map address amount to f token address amount in the brain contract no it doesn't transfer they're calculated uh that's that's why they're cheap that's why there's no gas but you don't really need to understand that to use it i can assure you it works very well the the smart contracts are uh written uh very well they're audited uh they've been battle tested over the last uh five months and uh so yada is asking if the contract is decentralized yes it's decentralized there are no blacklists anybody can use superfluid it's completely open to use we do currently ask people to submit their apps before just so that we can uh help review them and audit them and this has ensured that uh not too many funds were lost so it's it's obviously very experimental and you do have to be careful when writing smart contracts so keep that in mind all right i'm looking forward to seeing everyone in our discord and i'll leave here also the other link which is hack.superfluid.finance where you can find uh all our resources for the hackathon and looking forward to see you know you guys build on superfluid uh so far there's been some pretty cool applications being built and some very important teams in the space like maker dao and connects and delphi digital are getting paid their salaries and streams and this means if you build an application which uses streams they're going to be your first users right so you have uh you know respected members of the community that have uh their eyes set on everything built on superfluid and they're just waiting for an opportunity to uh send those streams somewhere right they're receiving their salary and the really cool thing you can do with superfluid is that as you receive funds you can also send them so as they get paid every second from their employer they're able to for example stream into your apps right so whatever you build you have a captive audience so really looking forward to see what you guys cook up during the hackathon thanks so much fan and meow that was a really great session you managed to condense a lot of information in 30 minutes and get through all of the questions that came through if you want to get in contact with the superfluour team they've dropped their personal discord in the chat and they are also in the east global youth online discord and please don't hesitate to reach out with your questions and connect with the team thanks so much fannie meow and thanks everyone for joining thank you guys see you in discord 
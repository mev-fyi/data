seeing the audience api i'm going to let them take it away thanks for neil thanks ray all right all right excited to be here everyone um so yeah i figured we figured we'd give you just a quick overview on you know what is audience and things like that for a few minutes and then just really get it into a very hands-on uh kind of overview of how to uh how to use the api and how to use um you know how to actually build something with uh with these tools so uh yeah i'm i'm ronil uh ray is is also presenting here uh this is how you can reach us afterwards uh on discord and and elsewhere if you want to um so yeah the very quick like what is audience audience is a digital streaming service that connects fans directly with artists and exclusive new music um but it does that by being fully decentralized so audience is operated by a community of node operators uh fans and artists basically that have come together and chosen to share content here operate infrastructure here or um uh or that type of a thing um you know the the very brief like why did we feel this was necessary um you know when artists and and creative uh people more generally have not um had the opportunity to own their own means of distribution or have like any input into the decisions made around how distribution works um you end up with kind of a very unequitable breakdown of um you know sort of the the revenue or earnings that that happen right this is somewhat of a predictable outcome um so by by kind of changing the incentives around uh who who gets to vote on changes and and control what happens on this thing um you know that that's really the intent behind uh uh what we're doing uh the the product's been live for about a year uh today we see over half a million users every month uh listening to music uh nearing a hundred thousand tracks uploaded um and uh uh i'll get into the architecture piece in in a minute here but um the the product has generated over 1.3 million uh on-chain transactions uh so far so that's for things like uploading content social engagement with content things things of that nature um these are some of the uh artists that use audios kind of mostly electronic music heavy right now but i i imagine some names here that that folks might know um and then yeah very quickly on on kind of the architecture of like how does a network like this work um there are kind of three important technical components here uh one is this sort of ledger of content that um exists on on a thing called poa network it's a a ethereum uh side chain that i think actually they're also in this hackathon if i recall correctly the team that made poa network also made xdi and uh uh the stake token that recently came out those types of things um but the the content piece of audience lives on uh uh poa networks so when a creator oh and then the other two pieces of kind of technical architecture here are these two classes of nodes um content nodes and and discovery nodes um that exist in the network so these are being run by uh uh kind of you know just anyone can go run one of these right like everyone from a few advisors to the team are running them to like uh if you think about like the the common validator folks on cosmos or networks like that a good number of those folks also run audio nodes so the content node in audios its role is basically to host content and keep it available on ipfs it also has some kind of content management functionality that it does on behalf of the creator and then those discovery nodes are actually indexing content that exists on this network and producing like a more consumable api uh and that is actually likely the kind of point of interfacing that i i would guess many of you all um uh kind of take advantage of in in the hackathon um but uh yeah so the way the flow kind of works here um for in a creator to upload content um they're actually uploading it to one of these content nodes that returns back like a a set of you know pinned metadata on ipfs uh those creators and publish that uh on chain in a transaction to that content ledger component um that triggers the indexing or discovery nodes to basically you know index that data into uh their own database and then that makes it available via the apis to listeners so listener searches for content against these discovery nodes when it finds a piece of content it wants to listen to and like the the listener clicks play and that client that actually streams the content from ipfs via one of these uh one of these content notes so i'm sure that was all a big huge mouthful i glossed over a lot of stuff uh we'll definitely have uh uh you know more time for for questions and chatting through things as well but in the interest of getting to the good bits of the uh of the discussion here uh all i'll hand off to ray uh who's gonna be walking you all through uh you know uh uh kind of uh or building with you a simple end-to-end example of a uh um you know a thing consuming the the audience api so uh there are sort of two two prongs here that that we'll get to chat through cool thank you for for that overview o'neill um i guess since we're like a relatively small group at least not on the live stream i'd love to know a little bit more about um our audience here if anyone wants to share like how much familiarity you have with with audios have you have you seen it have you used the product um and sort of like what is your your goal of exposure here like the way that i i had planned to to go about this was sort of work on a a front-end-facing app that consumes some of audience together uh for the remainder of the session but um i'd love to hear if anyone has any specific things that they're trying to dig into their first or their familiarity with with audience if anyone wants to chime in it's also totally cool if not we can just dive into it a real quick question uh so i flipped the api and that all looked super useful but i was wondering is there any other ways to interact with audio uh with audio's protocol to say upload a track or create an account at the moment or is that still behind closed doors so it's a great question we'll we'll get into that so so i'll leave definitely enough time to get into that in the latter half of our our session here um but uh to go on that first point let's let's spend a little bit of time talking about what we have is a public read-only api for now to sort of get folks uh off the ground sort of with with how to actually stream content and then we can we can go deeper there sounds good i was looking forward to seeing that in action too yeah all right so i'm just gonna go ahead and take over the uh the screen share right here and and i'm actually just gonna share some live code um and we can sort of talk through how to use some of these tools and and also talk through uh how uh how we can build stuff for the remainder of the hackathon so going back to romeel's deck that he was sharing can you can you guys all see my screen hopefully cool um see how we set up this uh this super small uh demo repo to get folks off the ground this really touches on a few of the different tools we have including the public read-only api and then also sort of that how you would do reads and writes uh generally your point about uploads um through what we use on our clients which is this audio slibs javascript package um there's a few different ways to slice it and we'll get into some of the details there um so to to start off um i'd like to talk a little bit about what our sort of like public http api looks like um this is linked uh in the github repo here let me drop this in the chat too just so folks i have it um and sort of talk about like why we have sort of two disparate ways of interacting with with the audience protocol as it stands um so going back to what rene was talking about with the architecture diagram we really have these two types of nodes we have discovery nodes and we have content nodes the idea of the discovery nodes is really to make querying things against the chain as fast as we possibly can to give people that sort of spotify soundcloud user experience that they expect to see sort of across music players on the web um and with that we get a lot of really nice standard rest api patterns that we we've built a a public api around which is what you will find if you look at the the docs page here um the really interesting sort of piece about about audio and how you would interact with a public read-only api is because the system is decentralized as it is we really want to encourage um applications to to discover from the network what are the services they should talk to rather than sort of being able to point at a centralized load balancer um so the first piece of this public api docs section here is all about selecting a host we have a sort of convenience endpoint which is this api dot audio dot co which is obviously a centralized location but this actually serves um a set of discovery services discovery providers that we can actually query for api content um so in this docs page we pick one on the fly which happens to be this link here i believe this node is running in mumbai actually um and if you were to sort of go along with like how how you would use this this public api is you would you would query uh against either api dot io which behind the scenes is actually just looking on chain to find registered nodes um and actually just sending queries against it which honestly look very similar to how you would expect like a soundcloud api or something like that to look like so you can query against users you can query against tracks playlists um and whatnot and sort of to to put a little bit of this into more context this this sort of demo app that we have set up here um we'll jump into the code basically what we have going on um is oh i think i am in the wrong directory one second here all right um we have a very trivial react app set up here with a couple example components one of these components here is is sort of the http api example and really all we're doing here so this in this example you can look sort of at the top section here is we're fetching the the highest trending track this week on audios so actually if you were to go to audios.com and go to our trending page um you would in fact see that this is our our number one track this week um and the way we're able to pull this this data is actually relatively simple sort of given the complexity under the hood of what is happening when folks are uploading and putting content on these content nodes and registering that content on chain and then discovery providers indexing it it sort of becomes much more of a natural sort of web web to feel almost of like how you would query for this information um so basically what's happening in this component if you're not familiar with react like you could obviously do this in plain js you could do this in a you know totally non-front-end facing out application you could make coral requests against these endpoints but for simplicity's sake basically all we're doing here is is really we're rendering out a track um with an artwork a title and a name and the way we're actually fetching that track is sort of when this component mounts where we're hitting an endpoint for trending and we're asking for uh the time range week and in order to calculate sort of what this like host value is we're actually like on on load hitting this api.audio.com and pulling in a list of available discovery providers with a very crude sample function picking one of them and actually like sending our query against that um so what happens here basically is when this when this component is is mounted and is running um it will send a single request to the trending endpoint uh populate some internal state and actually display that on screen so we have our number one trending track on on audios this week um so i want to pause really quickly there does does anyone have any questions about that hopefully you all have access to the api docs you're able to access that through the github repo there we can spend more time on this and i'd like to actually build out a little bit of streaming and i don't know if folks here have experience with like the web audio api or something like that but uh we can definitely play around with that um but i do want to pause to ask if anyone has any comments or thoughts cool let's march on ahead then unless i missed something in the chat we're good yes all good all right cool sorry there's a lot of a lot of little like zoom pop-ups all over the place um cool so the the second thing going more towards uh where your question was jeremy is like how do you interact with this as a as a creator or someone who is trying to write content to audience um and because of because of how audience is designed with this sort of like multiple pieces of a larger ecosystem of architecture that are decentralized um the way that we've found easiest to sort of coordinate that is through this this middle layer javascript package that we call audioslips which is basically a client-side package that stitches together a bunch of network requests things that manage web3 relationships things that manage talking to services things that actually manage like file upload and stuff like that um and so for the purposes of this this uh demo here up to this point we've sort of created a a very crude sign in sign out um with your audience account but i'll actually show how this this can work so i'm going to go to audios hopefully the the live demo gods are in my camp today um but i'm oh oops i turned off my video um i'm going to sign out i'm going to make a new account on audio and then i'm going to log into my new account on audio on this demo app and then i'm going to walk through sort of like how in code we are doing that and it actually is it's pretty nice like we we guarantee like sort of if you're using this audio slips package some somewhat normal behavior of how you would expect sign in and sign out um and i i don't know if folks have read sort of any of the the press we had in the early days of launching but we have our own sort of wallet management tool uh we call that hedgehog i can also uh drop a link or maybe romeo you can help me with that drop a link to that in the chat um the the reason that we sort of came up with our own wallet management approach was we really wanted users interacting with audience to to feel that this was not a a crypto project or a blockchain project but really a music project because that is sort of at the the core of what we're doing here is we want to provide a compatible experience to what folks are anticipating with like spotify and soundcloud but it happens to be run on chain and we can derive all of these benefits that romeo is mentioning um with that so um that is that is sort of all to say that we we have on audience when you create an account you're actually if you go to sign up here you're actually prompted for a email and password or username and password and that actually obfuscates the the concept of a wallet away from the user even though we actually do have that stored behind the scenes and i'll show that in this demo here so i'm going to go make an account let's call it eth online find this email plus syntax very useful i make lots of accounts on audios all the time um i'm gonna make a password here i'm going to we'll call it ethon line hopefully no one's claiming that handle and um these are these are a selection of some of the artists that uh romeo alluded to on the platform um i don't know who we should follow here we can we can pick some some random folks and our account sort of is is being created now behind the scenes there's there's a lot of stuff happening where not only are we writing to shane to actually sort of create a a wallet an account we're also writing uh metadata about our user to one of these content nodes and we're also sort of in in behind the scenes pinging the discovery service to figure out like when we're done so we should be at this point done we should have an account if i go to start listening not turn on push notifications we actually have an account and there's obviously nothing here but the the cool thing is now now that this account is created on the audio platform this little demo app that we have set up should be able to actually log in with this user um so i'm just going to reload here really quick but i am going to and behind the scenes and we'll get into this like this this web app is using just this this js audio libs package so i am going to type in the username and password that i just put in and the demo gods are on my side of the court in a second here you should be logged in and actually um even though we haven't exposed this anywhere in the music facing side of the app i have an account on chain now and this is this is the wallet associated with the account so how does this how does this all work um behind the scenes so uh we just talked about before this this http breed only example um there's also in this this public repo a libs example and i think this is a this is a great reference to get started building on top of this obviously it doesn't have to be in a client front end facing like js context like a lot of these things um still hold across the board but uh if if you are trying to build on top of it it's probably easiest to to do something that has js because right now this package is is really only exposed in jazz land um basically what's happening here is in in our component itself uh as you can see on the screen we're we're basically rendering out either a sign in form with a little button or a sign out button as well as as a an account sort of section as you can see here my username my handle and my wallet address which are all being printed out here so what happens here so when this component mounts um if you are familiar with react and hooks which is sort of the the latest and greatest uh interface api programmer tool at paradigm um i guess a lot of words could describe it but basically what's happening here is um if you're not familiar with with how how react works and how hooks work when this jsx component gets rendered um when the component mounts there there is a sort of hook into that which is this effect here um which does basically two things it does an initialization of audio libs which is this package that we mentioned it's it's imported just as any standard sort of npm package would be um with some config that i'll get into in a second and then after we have initialized our libs package we we just call getcurrentuser if there is a user we set that into a state variable which then controls actually what gets what gets rendered out to the screen um as well as sort of callbacks for our sign in and sign out and the cool thing about this is because we have this line here where as soon as the lives package gets initialized we check if there's a current user libs and it's in its own right actually sort of maintains user session um so we can actually go back and refresh this page and i will actually be logged in still um the way we're doing this is we're storing in the browser context um in local storage a a entropy key that refers to to your account that can be combined with your username and password to to effectively retrieve a to retrieve this entropy which is effectively like a a handle onto your private key so you can actually interact and issue rights on behalf of your user account um so what's happening here on this like initialization of this this list package is we have some config variables which point to um where our contracts are uh audius actually as as renewal mentioned like we were deployed on poa um as as our our data contracts are concerned data contracts being um track uploads user account creation reposts favorites stuff like that basically all like the the sort of social interaction with the audience ecosystem um and we also have uh contracts that are deployed on if mainnet which manage sort of this this service selection sort of like where are the discovery nodes where are the content nodes and stuff like that um so there's some config here both for our our poa contracts as well as our ether net contracts um the the nice thing about how we've constructed uh the audio slips package which uh i will will definitely be the first to admit is not the best documented as it stands today so like we're definitely here in discord and on zoom and whatever to answer any questions that you might run into and some of the rest of the team is on the discord channel as well um but uh basically what what this web3 config and ethweb3 config interface uh look like here is is it really is a way for uh third parties to actually inject their own web3 objects and into libs and have it uh be constructed that way so although i just went through the steps of making an account with an email and password and sort of delegated the responsibility of of managing that account though though audience never has custody over that um through through this this hedgehog product that that we've built um you can also create an account with metamask and you can also provide your own web three whether it's you know any other wallet manager you know besides metamask you can actually inject your web three into the constructor of this this audio shared libs um object and and go about managing your account that way um the the config for the uh discovery provider or discovery node and the the creator node which is also what renault mentioned is the the content node um that is also sort of configurable here um these are these are hard-coded values you can actually go to chain though and see the whole list but just for brevity uh we've done that here so this this method init really is is just constructing this this audio object which is our our shared audio libs um and it is running this initialization method on it um and then sort of going back to our component logic here we we are initializing libs setting it sort of that you know so we know that we have initialized and then and then just rendering out stuff and when we actually want to go sign in so if i'm i'm in this state where i'm i'm signed out um so if i if i reload the page you feel like obviously i will still be signed out because signing out destroys what we've stored is sort of in the the browser local storage um that references your account um if you're if you were to go here and you're to actually type in an email and a password and click sign in all we have to do is talk to this this shared loads package account and call login and that given the email and password will behind the scenes set what we need in our in our browser storage to actually represent a signed in account and it happens to return our user object here so if we were to actually log out what our user is and take a look at the console here are to log in again that account that we made oh thank you lastpass this would actually log out our full account object here so um obviously like i don't have very much content here i am following four accounts though um when if you were to like actually go to my my page that we have made and we look at followers like these are the folks that i followed on sign up as well as audios here um so uh with all of this information now that we have like a authenticated signed in account we could start to begin to do some of the things that that you mentioned jeremy which is like uploading a track and although it is not extremely extremely well documented if you were to go if you so from this this ether online demo repo go to the the link to the audio libs js package um and actually look at this api folder sort of we've we've done done a reasonable job of organizing this into various like behavioral functions within audio so if you were to look at track here um you can do reads obviously there's get tracks get trending tracks similar stuff to what we've seen but we also have upload functionality here too and this is what our client is using so if you are in audience the client and you go to upload track like behind the scenes we are we are just using this js package um one more thing i want to call out here with with this little component example that we've built is is we have another package that um has some of our our audio styling in it if you if you wanted to build something that looked and felt somewhat like audios um it's it's actively under development there are not too many components there we do have a shared component library called stems which is which is also open source if you're to go back to this etho online demo repo there's a link here which will include stuff like fonts and colors namely and also buttons and modals and some other uh some other nice components that we use internally to to make the feel of audience try to feel as modern as possible um so yeah in a nutshell that's sort of that's sort of a high level of what are our various tools we have available to our our sort of broader community as it stands there is a another package that lives on top of audioslibs that is a layer of abstraction on top of it which exposes some of our internal streaming technology we stream um all of our content with hls if you're familiar with that um there's this this uh repo called audio.js which is a wrapper around this audio loads package so it has all the functionality there but it also has some built-in audio playing capabilities and our community has actually built a discord bot off of that uh package which is which is really nice um if you were to take a look here this is actually if you if you set this bot up with your discord server like you can you can call out to it and have it feed audio back into your channel which is which is super sweet um so yeah at a high level that's sort of uh what we have available um i think we have a bit more time here so before i like jump into anything else more specific i want to pause again and ask if there any questions or thoughts or concerns or anything like that or if there's anything you want to add to romeo because i know i've just been rambling into the zoom vacuum no i think this has been great the only thing i'll call out so there was a question in the chat about um whether the discovery api is is pluggable um and just to talk about that quickly so uh yes you can the i mean all of this code is open source all of audios is open source and available like anyone is welcome to build um any extensions on top of that they could which in the discovery logix case it could be like you know if you wanted to build a cool new recommendation system for example like all of the data of who has listened to what and and uh you know all the content that exists here is is like fully openly indexable there is an interesting thing though so functionality that is added to that node software that discovery node and content node software won't be run by the broader network unless you kind of propose that change back as like a pr um and the community merges it and then uh it gets rolled out which you know takes on the order of like weeks or so um so for any hacks that are interested in like extending functionality in those areas um the recommendation there would probably be to actually like fork the you know fork the code base and and run it uh yourself for development purposes our team can help you get that up and running um and then uh uh you know once you're feeling good about the implementation and stuff you have there like it would be awesome to have those changes contributed back to uh uh to the node software itself right and and the community can provide feedback and then ultimately like merge those changes or or whatever right so yeah cool thank you for that i clearly missed pieces of the chat as i was just rambling here um is there anything else that uh folks want us to chat about uh briefly before we go into maybe how to actually stream an audio file itself from audios jeremy did that uh somewhat answer your your question or your desires there uh yes it did awesome cool um how are we doing on time i think we have like half an hour left right so we can we can really die yeah so i think we're here yeah you guys are good we can uh we can kind of uh take this any any direction that you all might you know be interested in or want to learn more about um yeah the the talking about how to stream content is probably a great place to start say i know there were some folks interested in building uh like nfte style use cases with content hosted on audios like being able to know how to you know play that back and stuff might be helpful but like feel free to drop suggestions in the chat here too or just you know unmute and uh feel free to ask anything too also if anything that i went over was was too brief or you haven't seen in the context of react all that much you want me to go through it again like i'm happy to go into more detail there but um if it's cool with everyone we could just uh kind of jam on this example here um and actually like make this track that's showing up streamable that would be kind of fun be a little fun exercise for me because i haven't done this for quite a while so uh if we pop over to our http example again for simplicity's sake i'm just going to use a generic web audio html audio element to actually like play some some audio back to us here and this probably will not work over the live stream because it's definitely not going to take my computer audio i could try to get sound flower set up here but it might be not worth doing um but you all can i can push this up as a as a branch or something you could all like fork it and play with it or whatever um so once we have our track here um we could actually do this as like a another effect which in react hooks land will will be able to trigger based on whatever we pass it in this sort of dependency array so we can actually say when the track changes do something here so if we have a track we're gonna want to go and actually given this track content um we're gonna want to query for a url that will give us a stream endpoint and so let's let's go ahead and log this out first just to see what we're working with here so here's our here's our track object and this is sort of in line with what you would see if you were to go over to our public api docs here and you were to go over to the tracks section and scroll down i think we're in trending so you have an object that looks kind of like this which has a user attached to it it has some artwork options it has mood a genre repost follows some tags etc etc and just looking here this is this is what we have so and if i expand the user object click obviously you get a lot more metadata there um so there's there's potentially some really interesting like social graph stuff that like as as a relatively small company like we haven't had all the time to explore but there's probably some really cool things we've we've noticed there's there's quite a lot of emergent behavior of like community groups on audience this this number one track uh this week actually falls under the genre mumma tone if you're familiar with that uh music sphere um but a lot of folks from the movie tongue community kind of came over to audience in the last couple weeks and it's been really exciting to see that so there's probably some very interesting social graph stuff to explore there but going back to our api docs here if you go over to tracks there's a thing on streaming tracks and if we look at what this endpoint looks like you go to slash v1 slash tracks the idea the track and stream so if we were to hop over to our example here where we have the id for the track and i were to actually reconstruct this url with it here let's just drop in this new id we actually would hopefully get get the song which obviously i can hear and focus i'll drop this in the uh i'll drop this url in the oops in the chat jeremy asks is there a drag and drop file upload component available oh there is at the moment not is open source in our audio client repo it hasn't been moved over to stems but i can drop a link to that in a second um we we do use a a third-party uh drag-and-drop called drop zone i believe um to manage some of that stuff but we have obviously like styled on top of it so yeah i'll definitely uh throw over a link in a second but let me also send this link out to this streamable track and actually what's what's interesting here is if you look at the api documentation on this this endpoint actually returns um a a redirect to the content node that is actually responsible for hosting the content the the way we have sort of set up our content nodes is there's replication amongst the network but the user has when they create an account elected uh and like a a primary node so if you were to actually hit this link you do see that it does get redirected to a to a creator node for the content you can you can stream it here and this is a sort of standard streaming mp3 endpoint where you can send http range headers to actually get you know parts of the content if you don't want to pull the whole thing in advance um yeah so let me really quickly hop over to our client answer jeremy's question here um i don't remember exactly where this thing lives there we go dropzone.js and all of our components these days one of the reasons this is not in stems yet is we do write everything in typescript these days and uh haven't had the time to move this guy over but uh absolutely feel free to fork clone copy paste whatever uh close your vote there um so yeah going back to our little example here so we have this this formed url i'll just drop this here and let's let me minimize some of these things i realize you guys probably can see the chat on my presentation screen too is this big enough hopefully this is big enough for folks to be able to see still looks good cool so we are going to construct a stream url for this track and we're going to use this same sort of syntax as we had before this is our host which is selected on the fly this is the discovery node that we're talking to um in this particular session and we're going to go to tracks um and we're going to put in the id and stream so the id here is going to be this guy which will come right off of our track and um if folks are familiar with that like the the sort of likational like audio uh interface as well as the web audio api you can do lots of fun things but a very trivial way of doing this would be to just create a new audio object and pass it in the source and then oops i typed audios instead of audio do you do that ronnie i do that all the time yes yes i do and i i believe the function here is is play um so this is just gonna potentially oh host is not defined we didn't oops save that into a state variable or anything like that so let's do that really quick and now that we have our host this should hopefully be able to use it uh yes i believe the uh the issue here is that uh chrome blocks you from from autoplaying audio um so we actually we need to add a button so let's let's go ahead and add another button here to actually play this track and doing what we did in the other example we're just gonna use the button that we have in our shared component library not getting vs code to help me out here but it should just be importing the button from obvious steps and we're going to say text as play track and our on click callback to be let's do a similar thing where we store our audio outside of our little use effect here and there's number ways you could do this you could also probably just stick the audio on your window object depending like on whether you wanted to have multiple audio things playing at the same time i don't think there's many common applications for doing that especially if you're playing full tracks but you could imagine some very interesting uh like remix uh crossfading kind of stuff on top of that if it was interesting so we'll set our audio object here and then we will create a callback for that that will respond to updates of our audio guy and then call audio dot play let's just guard this just to be safe so hopefully if this works as intended we we will get a button here that says play track and oh no we still have some bug i think a variable name up at the top may have been uh off thanks romeo that select host set host to yeah i selected i saw that earlier i didn't know thank you gonna i i figured that may or may not be a thing but i you were you i thought the tools would identify that issue better i didn't think it yeah yeah so you guys can't hear what's going on in the party in my ears right now but chrome is playing something it's very loud um but uh that's sort of like in a just like how you could hook into uh a actually like streamable interface with with the audio uh public api here um relatively low touch like obviously you could do this all over you know whatever language like you're gonna have to have a front end for this stuff like you could you could do it just like sort of our discord bot which is a node server you could have you could do this in python you could do this however however you wanted um but uh yeah it's uh relatively uh relatively easy to consume that's sort of like what our intent was with designing this to give the uh the power to a lot of developers and the apps are actually as it stands today if you were to go um into the like the ios app store or android uh play store um some of the top music apps actually are running off of the audio api and they're actually just using this public stream api as it stands so it's a it's a nice it's a nice cool thing especially about building building the type of product that we are having it be able to be integrated across the board in lots of different services is really cool yeah does anyone have any questions about that thoughts concerns desires are there any tools for things like scrubbing and uh like skipping i guess like scrubbing through a track and seeing what time you are in the track built into the audience client or is that something we do with html audio um so you you could do that with html audio so actually i believe you can you can actually just do audio dot current time i think and that's in seconds um that that would work to to scrub obviously but uh we do we have exposed um a a component in stems wherever it is here that that is our scrubber um where where are we at i don't think i have this anymore stems um if you're to go in here this is a list of the components that we have as it stands um the scrubber here uh the the index uh tsxl is the entry point you would use this similarly to other scrubbers that you would find in component libraries i believe we have some examples in here as well we might not actually have one for this however believe we we don't um if you do want to see a a live example of it though you can hop over to our client repo and you can do a search for scrubber and it should show up yeah so our our this is our mobile now playing page actually but um uh the the props that this guy takes in are sort of like a media key to uniquely identify what's playing and some props about like what has a lap collapse in the total seconds and you can get this all from directly from the the like audio object if you're if you're working in a web context um i hear i hear noises i don't know if it's discord or zoom that's talking to me i think it might be discord i i think it's discord some of these folks just messaging us about their uh hack so yeah it's fine okay all right cool um so yeah anyway like if if there aren't uh explicit examples in the stems repo that you're looking at here you can definitely find them across some of our projects also another thing i want to call out is our embed player which if you're you know a twitter twitter person and you're uh into a sort of like playing audio from places in twitter just looking at our public account here like yeah this runs off of our embed player this is our hot and new playlist that is an editorial that we we publish um but so this this uh component here this scrubber is actually the same thing that we use in our client which comes from this this shared stems repo um so yeah all this stuff is open source um i will say again that is not exceptionally well documented but like it's all there and it's all you know you can clone it you can play with it um and it's it's all the stuff that we use there's really like nothing that you know we haven't put out on the table to sort of hack on um going quickly back into what were we talking about um in the context i lost my train of thought here in the context of our our scrubber component um yeah that you would just actually i mean we can we can try to play with it here but you would be able to pass in stuff directly from the the audio api here so let's try it out and if we hop into that component again and we look at our props we'll say i'll just give it the track id here and this is sort of like a prop that's very similar to uh to like the the react key uh like why you would need keys and different react components rendered as a list is basically to sort of like isolate when it should be re-rendering um and total seconds i believe if we can just call duration you might have to do this actually through the audio context might be more than the 12 minutes we have left but uh i'll leave that up to you jeremy to have con if you want um awesome cool any other questions or or interests here about things we can talk about um here's a question from rob in the chat rob if you want to mute yourself you can go ahead and ask or neil oh nice be yourself oh go ahead sorry i was just saying i was starting to type a response i also realized i forgot to see you probably i mean it's probably a good question for you to you to answer if you want to just do it out yeah right now um oh yeah sorry rob if you want to ask i could answer yeah go for it uh yeah i just had a question about the the kind of like the the monetization parts of ods between the content owners the streamers people who play the tracks um and then separately is there a tipping api or anything like that that um allows um users to tip their favorite artists or whatever like that yeah so um the the short answer is like right now um uh you know there aren't any sort of like native reward mechanisms in uh in the protocol the way that i think the community has has wanted to take this is to effectively kind of you know what what audience does provide is a set of primitives to allow permissioning of content um and the community could tie kind of permissioning of their content to any sort of set of input they they chose that could be a payment that could be like a you know i have listened to your content more than a hundred times before so i'm one of your top fans or something like that like you have any condition uh conditional unlocking of content happen um and then the specific question is there a tipping api uh there is not yet if that is something you would be interested in building i think that could be a really cool hack um we actually do have uh you know like if you go to an audience profile or here let me maybe find an example of one that has this uh i can pull it up yeah there's like you can put a uh uh a um fill in a field on your profile for like how you would like to be tipped um like yeah in uh uh rey's case here um and ray i guess you're also a chick-fil-a fan um the the uh and and double acp donation link is is there but like as an artist or content creator you can fill in any anything you want in that sort of donation or tip uh link um yeah there's definitely room for i think something that's like more sort of web three native there uh which could be really cool great thanks absolutely it's a it's a great question i think like definitely core to how we are continuing to develop the audience and i know jeremy you have experience there and we've chatted before and you've you've done stuff in the tipping realm so like definitely excited to continue jamming on that arth um what you mentioned in the chat that you're considering a generic subscription protocol that sounds really cool too um i think that's definitely like uh uh you know this general idea of like you know sort of permissioned content tied to uh sort of you know unlock conditions i think could could apply in a lot of different um different cases this one could even just be as simple as like uh you know if you want to subscribe to a given individual on like many platforms um you know it's easy to pull whatever content uh they they may be posting here on audios and aggregate that with content elsewhere and kind of like push that as an aggregate to uh subscribers or you know there are a lot of different ways you could take that but uh that sounds really cool too any other uh thoughts of ideas of hackathon projects or anything that folks are considering maybe even people on the youtube live stream if there are any i don't i don't actually know i haven't taken a look there but uh maybe paying discord or something like that yeah i actually haven't been monitoring questions there either don't think i see anything there yeah i'm in the right channel so yeah i mean if if that's uh kind of everything we can always wrap up a few minutes early here and give folks back uh uh their time but um just know that you know we're we're here to be helpful um if uh there's any way you know i or ray or any um uh any other folks on uh the audience team here can you know answer questions or provide feedback or or anything else um you'll feel free to dm any of us if you uh uh um if you visit the uh audio sponsor channel you can go see um you know any uh you can you can see all of our users names there and and uh reach out to any of us i think we all have dms open so yeah we're excited to see what you all build we can also drop the link to this presentation which has all the other links to in the uh in the district yes do that right now awesome thank you guys so much that was a really awesome workshop presentation jam session whatever you want to call it super cool stuff yeah we had a lot of fun too well thank you so much i'm looking forward to see what um people build using audience and see you in discord sounds great cheers thanks guys too uh nice to meet and see everyone here ray's having a hard time there getting the link to be oh i'm i'm working on it it's happening all right see y'all cheers 
workshop i'm shannon i'm from youth global um and here i am joined uh by the wonderful hero from one inch um so here i'll let you take it away and uh for any questions please put them in the chat or wait until the end okay i will answer questions in the chat feel free to just start the presentation uh could you repeat oh carolyn you can begin carol when you're ready ah okay yes exactly uh so uh first of all i want to give you a quick introduction into one inch uh network this is the big ecosystem of different d5 products by initially uh the first product of one inch network was a one inch aggregation protocol it was built on ethereum new york hackathon in 2019 and this protocol incorporates pathfinder algorithm that searches deals across different markets on ethereum binance smart chain polygon network and also optimism you can find the best price this price will be better on the big amounts in terms of gas and return amount than any individual exchange and a uh and also uh we released our own limit order protocol uh that allows to place uh the order like on centralized exchange uh and you will pay nothing for this order order you just need to um enter your preferable price and sign the transaction and this transaction will send to the backend site to mesh network and then any user of one inch or any arbitrage board can use this orders um to as a taker so if i maker i can uh place the limit order sign it uh i will not send this order to the chain but i send it to the back end and then our pathfinder algorithm will uh take into account this order uh in the wall path if it's profitable for the taker and anyone can fill this order so if you are maker you will not pay the guest fees and you if you are taker then you will pay for the submitting transaction to the network so let's look at the limit order protocol this protocol i think is the best solution uh not only in terms of uh gas usage so this protocol uh charge about uh one uh 100k or maybe 150k for the order feeling and also one inch limit protocol has a free interesting feature that i haven't seen before the first one it's a conditional execution uh during the order filling process you can check is your order valid or in where invalid moreover you can set any condition that you want you can set expiration time chainings oracle price checking or maybe some white list of the takers also you can use one inch limit order protocol not only with the erc20 tokens but also with the nfts and other tokens so the conditional execution it's really a flexible feature that allows to validate some uh details on chain uh during the execution the second interesting feature its arbitrary price discovery uh you can use any formula for exchange uh you can build your own custom curve or maybe integrate some our uh dex uh formula or maybe you want to get your price from the chaining circle or any other price source uh so you can build uh any formula that you want for this limit order this formula can include some fees that you want to charge during the execution and other stuff that you can imagine so and the last interesting thing and this is the custom callback during the execution you can call any other function uh something like callback before funds will charge from your account so for example you can get the flash loan and pay to the taker of using your maker token and after that you can return this flashlight so you can add any logic maybe with the depth uh borrowing and uh collateral uh like uh cdi cusdc on compound if you can use landing protocols in this callback so you can add any functionality that you want to be executed before the adapting funds from your account and let's look uh deeper uh on how it works so the order uh has the following structure um the first uh property it's a salt this is the random generated number that protects against double spending the second two properties it's a maker asset and taker asset this is the address of the tokens that you want to receive and pay so make your asset this is your asset that you have and take your asset this is the coin that you want to to receive after the order feeding the next two properties this is the may qrs data and takers data this is the api encoded transfer from function that contains signer address amounts and also if you want to make this order private you can specify [Music] a receiver address to the makers data data and if you want to make this order public you can place on the um to the destination address the zero address so the next two properties this is the get maker amount and get taker amount those functions allows to call any function that will calculate your maker or take your amount this is the arbitrary price discovery feature and um this is also the abi encoded bytes uh that should include the swap taker amount and swap maker amount as a last argument and as a result of this function we will get in case of get maker amount the smoke maker amount and for the get taker amount swap taker amount the next property it's a predicate this is abi encoded function that should return a boolean and this is your condition or maybe a combination of different conditions like uh using uh or and and maybe not not um note and other uh built-in functions that allows that law to combine to combine different conditions so the permits this is called bait collateral bytes for uh tokens that supports permit you can uh play uh you can place the order without an approval from your site without making the transaction that will allow to spend your token uh from one inch limit order protocol and the last bytes it's the interaction uh this is also your api encoded uh callback function on your strategy contract uh if you pass more than zero bytes here then the quebec will be executed and will perform some action before the transfer from funds from your account so to fill the order you need to call a fill order function the first parameter this is the described before order uh structure the second parameter it's a signature so we are using uh sine type data version 4 signature and you should assign the order using this eip712 [Music] standard using your wallet that ha that has enough funds and approval uh to one inch limit order protocol and the second two parameters this is the making amount and taking command uh in case uh if you want to feel uh if if you know how much you want to spend on this order then you need to place taking amount and if you want to specify uh what amount you want to receive then you need to set a making amount and one of those parameters should be zero and the last parameter this is something like minimal return it's also acceptable for the function with arbitrary price discovery to protect yourself from price slippage let's look at the predicate this is the condition that will be checked on chain and you can combine any conditions that you can imagine and for example uh on the one inch user interface we use the combination of two conditions this is the non-sqls and timestamp below the first one allows to check the uh nonce of the maker address uh to be sure that the maker uh didn't cancel the order uh and the second timestamp below this is the check check of the expiration time and we can we can combine this to functions using uh and predicate so we need to uh encode those two functions and pass it to the bytes array as a data and also you need to specify targets addresses uh where uh these two functions is placed um this functions uh uh is on on our one inch limit order protocol contract and if you want to build your custom functions you can also execute it but i will say how to do that in the next slides what about arbitrary price discovery [Music] we have these two functions get maker amount and get taker amount these two functions are using basic proposal proportion and you can calculate uh maker or take care amount using this formulas and the api encoded um version of this function should be placed in the order structure so and also how we call these functions in the limit order protocol uh we are using conjunct function static call that should call inside this contract and we attach the for example taker amount uh in the end of the this call data uh to execute the real taker amount of that taker has passed and also how to use predicate and get maker amount and get taker amount with the your contract you need to encode these functions inside the arbitrary static call function because it exists on the limit order protocol contract and you need to execute all outside actions using this function this is the security something like this um yeah you can just encode your function place it to the data parameter and as a target you can specify your smart contract address and this functions will be performed on your contracts for if the maker address is the smart contract address then you don't need to sign orders using the default signature if the signature is invalid for example as a taker you can pass some random structure or maybe just random bytes to the signature field and uh if your signature will not valid then we will try to call is valid signature on on the maker address so this is this thing allows us to use smart contracts as a order maker and we need to validate them some data inside this function on your smart contract for example here we just validating the order structure and also checking the price drop for the order and if all all is all is good then we just return the selector of the is valid signature that means that your contract has validated the signature signature this is just the name of the parameter it can be order or any other data that you need to validate during the order execution so and the last thing this is the interaction as i said before if this uh property in the order structure more than zero bytes then we will call uh notify fill order function on your contract so you need to implement this function on your contract and this function accepts uh maker asset taker asset making can taker taking amount and the call bytes that you pass to the order structure [Music] uh thank you using these qr codes you can find uh limit order protocol smart contracts some javascript seals to iterate interact with the uh limit order protocol and build custom predicates and also we have documentation for those fields you can find it just visit docs dot one inch dot io limit order protocol sales and here you can find all needed information how to validate limit order how to fill it how to cancel how to build predicates and uh all other needed information thank you i am happy to answer your questions thanks for the presentation carol does anyone in the chat have uh have questions and if not everyone can feel free to drop your questions if you have them later in the uh sponsor dash one inch uh channel um there you know there's gonna be uh some folks from one inch that are going to be really happy to answer your questions and thanks everyone for coming and thanks carol for the amazing presentation thank you 
we'll be taking questions at the end of the session so feel free to post them in the chat and you'll be able to get to them in the q a uh right after the the slides are done so make sure you take this opportunity to to connect with them here but i do recommend reaching out in discord following this presentation to continue the conversation it's a great place to link up with people who are here today follow up with people from the team and learn more about the stuff that you're building on um elmer i don't want to take any more more of your time the floor is all yours i'll let you introduce yourself and kick things off great thank you so much for the introduction uh hi everybody excited to be presenting today um welcome to unit swap v3 time weighted average price oracles workshop this is an introduction uh tuna swab v3 oracles um and we'll get into it i'll start with a short introduction here so my name is omer i'm the founder and ceo at chaos labs on cast labs we're building a cloud platform that enables runtime verification for d5 protocols um working with quite a few d5 protocols these days and part of our work to enable our work is we build a lot of infrastructure for oracle's hence this workshop um we allow for agent-based simulations kind of spinning up any types of users manipulating scenarios and that's where the oracle piece comes in where you can control oracle prices and a few other cool things now at least for the architecture of this workshop first we're going to discuss what an oracle is what problem it comes to solve then we'll have a quick overview of different types of oracles and then we'll drill and deep dive into what a unit swap oracle is and what makes it special perfect so blockchains are are these basically closed systems or closed networks and besides knowing about balances from you know different accounts that exist on chain they don't have access to to data um from the real world or from the world kind of living outside of the blockchain so on a very high level this is what oracle's came to solve in the beginning a way to kind of in a decentralized manner plug in off chain data on chain now when we talk about decentralized systems um an oracle or or an application a blockchain application is only as decentralized as its weakest link so kind of the question is asked like how do we how do we bring in off chain data on chain in a way that's decentralized so having one node or one api server that we hit up is definitely not good enough because that's by definition by definition centralized so we kind of want to distribute it now ultimately in the beginning kind of there were there were some off-chain oracles which were the more popular solutions for this but over the past few years specifically in d5 and specifically with the work that unisoft was introduced we're seeing the emergence of on-chain oracles in order to kind of illustrate the problem broadly first we'll talk about off chain oracles so i think it does a good job of explaining what we're trying to solve and then we'll show the innovation introduced with on chain oracles so in order to kind of make this less abstract we'll take two use cases here we'll talk about chain link oracles and unit swap oracles now specifically in these oracles oracle is like we said it's a way to bring data from the off chain world on chain now this could be any data it could be the result of a sports game of an nba game it could be uh you know the weather uh specifically for today as we're focusing on union swap we're going to hone in on price oracles so price oracles give us the price information about a specific asset now since we have kind of several ways to kind of fetch that let's discuss what the best way to go about it is all right so we'll start with off chain oracles this is kind of the the chain-li kind of model um there are different oracles different types of solutions each one is amazing for for the use of different use cases so we won't like get into uh oracle flamewars um but here we can see the architecture for chain link so there are a bunch of these node operators which live outside of the blockchain you can just think of this as like api servers in the case of chain link there they're called node operators and what they do is they're pulling in price information now at predetermined intervals everybody's going to submit all of that price information to what is called an aggregator the aggregator depending on its internal implementation is going to run some type of average function and then it's going to take the result of that average and write it to a smart contract that lives on chain and then other contracts or other d5 applications or web 3 applications for that matter can query it and consume the price data so the kind of what's important to kind of see in this architecture is if you see here this pink outline in this pink box this is the part that lives off chain uh in this case the node operators and everything else is happening including the aggregator on chain now let's talk specifically about unit swap v3 oracles so taking a step back time weighted average price oracles or two for short which is what i'll be uh using to reference these uh were kind of introduced in previous versions of unit swap and really the problem they came to solve was you know how can we solve or understand what the price is of a specific token pair on chain without having to depend on off chain oracles feeding us data all right so first of all timely to average price oracles it's a very kind of it's a mouthful let's deep dive into what that actually means and kind of develop some intuition um so in an offchain article in that example that we were speaking about we had these servers or kind of these node operators which were getting results and let's say in an example of a price feeding them to like an aggregator that was running some type of average and then writing it on chain and providing it for different applications um in this kind of implementation or example we don't know how the servers kind of got those prices but they got them somehow and we trust that because we're depending on many many oracles in a decentralized manner ultimately it's going to work and make sense now a time weighted average price oracle what it does is it records prices that are observed over a specified kind of time period on chain and when you query uh the price at a given moment it doesn't only give you like a specific kind of what's happening at the second you can actually specify that you want the price as an average over the last n observations so instead of having one data point that returns the price now you're taking an average of n data points okay now in unit swap there's kind of a lot of kind of wiggle room to kind of configure what is n how many observations you want to make and so on and so forth so we'll dive kind of even a layer deeper and try to understand this even better all right so we said earlier that unit swap was recording kind of these observed prices so where does it store them um by the way they're going to be some links here but afterwards you you can definitely go to the unit swap b3 github repositories and everything is laid out really nicely along with the document the documentation so you can see all of this kind of live but uniswap kind of has these internal structs in their contracts that are called observations and they record previously viewed uh ticks so you can just imagine kind of to visualize it that you have this this kind of structure this array that's holding basically each slot in the array observations from different time periods now we have these structs how do we translate it into prices so kind of without doing too much of a deep dive right now about kind of what ticks are and why they're important to do to swap v3 um unit swap stores these observations also known as ticks in these trucks and when we query um when we query for a price over a given time we specify kind of you know how many uh data points we want to look at and it's going to kind of look at everything that's in that struct for the for the relevant time period sum them up which you see here with the sigma and then divide by n to get kind of the the average price stick over time breaking it down a step further this is what it looks like when you look at the map behind it now uniswap is storing in the observation something that's called ticks um ticks are something that's related to how liquidity providers kind of express where they want to provide liquidity we can leave that i guess for like the q a but ticks are not exactly prices um so there is a pretty straightforward formula that you're going to see when we look at the source code for you to swap v3 tops that basically translates a tick into a price by doing the square root of the price to the power of 2i there's some math behind it i think most of the motivation behind doing it this way and not kind of you know with notations that are more straightforward are gas optimizations and they have some kind of you know other benefits behind the scenes now luckily we looked at a lot of math we can dive a little bit deeper in the q a you don't need to know any of this in order to use or fetch prices um from unit swap time weighted average price oracle is on chain this is just kind of to develop some of the mathematical intuition all right so in practice what does it look like when we want to query a unit swap pool and get the price for our given token pair so let's look at this right here we're importing at the top some of the unit swap interfaces and this function takes in an address so this address is going to point uh to a unit swap pool okay so pool kind of where two token pairs are are being swapped and we also provide the interval so if we kind of go back remember we said that time it's time weighted so we need to also specify you know what which price we want and for what time interval so that's the second parameter here now we can take a look at the code here this the first if here is just a safeguard so that we don't have any division by zero and we're getting the time weighted average price right can't divide by zero and let's focus on this internal block right here what's important here is here we're getting the the seconds ago right this is this is kind of specifying the range of the observations that we're going to fetch uh we use unit swap interface uh to kind of you know with the address to kind of query a specific pool and then we're using the observe method which exists on the interface when we supply seconds ago this is going to return the sum of the ticks right so if we go back here we saw this this is going to give us the sigma right here um if we were looking for like a 30 second time frame that started at n that's what we're going to get here at the bottom now again we did a we did a summation on a specified time range and now we want to get the average so of course we're going to divide by the interval which we provided as an input parameter to this function so that really gives us the average and in turn the price in this case right we saw here it's the square root of 2 to the power of i leave the math aside for a second but this is what this does this is just kind of the implementation of that slide in code so this is all you need it's a few lines of code you just need to know the address of the pool that you're trying to query you specify uh the time frame that you want to take an average on and you literally just interface it by finding the average using the observe method which is provided on the interface of unit swap and do simple division and you're good to go so we hear kind of all the time or if you're kind of following dfi close you're doing any kind of dap development oracles are always in the news um and and there's you know chain link api three and also kind of unit swap and and they're different so while the first bucket of ones that i described are all off chain let's try and understand what are the use cases or the benefits of using an on-chain oracle when is it appropriate uh so security accuracy optimization for so first of all kind of a caveat is one in everything that i'm presenting right now oracles just like any other tool in software development it depends what job you're trying to accomplish right so nothing is like absolutely better than the other it's all a question or function of what we're trying to kind of do here now manipulating prices in on chain oracles especially ones with deep deep deep liquidity is very difficult let's try to develop some intuition for why it's difficult okay we can't an attacker or somebody who's kind of trying to do some type of malicious activity he can't kind of bring in a ton of liquidity for one block and then move it out the next time later to manipulate the price if we're picking a large enough time frame for the time weighted average price movement he wouldn't he or she would need to leave it there uh for quite a long time once it's in the pool other traders would come in potentially arbitrage it and this would be a very very kind of economically expensive attack uh for for the for the attacker and kind of in a lot of cases kind of you know there's more motivation to kind of kind of mess with the prices uh in these deeper liquidity pools because they kind of affect more protocols in turn so this kind of in some ways mitigates that because it makes a lot of you know previously um maybe attractive attacks a lot less attractive because of the prices attackers need to incur so that's one thing uh the other thing is when we're taking an average on um an array of prices were a lot less sensitive to you know crazy spikes or drops uh in the price so there could be you know some kind of weird trade action happening in the pool over one block that's so they're corrected by arbitragers and if we take a large enough time frame we're not susceptible to those because we're looking at the prices over time so price precision okay so this is kind of maybe um this is maybe a kind of like it depends on the use case again uh if you're looking for like the the fastest price in a second maybe you can specify like one slot maybe one tick that you want to do um but again the whole kind of idea behind you to swap time weighted average oracles is that you're looking at at a range so it's better kind of as a lagging indicator of what's happening over the time frame versus a singular data point from a very very specific point of time even though you can also kind of achieve that if you specify a time frame um on just the last observation all right uh data sources unit swap right so kind of like we said in off chain oracles you have the option or the ability to kind of bring data from many many many sources um when we're using unisoft oracle it's looking at the liquidity in a single pool um now that's not necessarily bad unisop is the leading decks on the market the liquidity is often very very very deep um and it's enough it's enough for for most cases it's you know often considered kind of a source of truth when you're looking at prices of assets on the market all right now we have a few more minutes so i'll monitor the chat and kind of leave it open for for questions cool so definitely don't don't miss your chance to ask some questions real quick while we have him um highly recommend connecting and discord afterwards i know sometimes i i remember a question right after i walk away from a conversation so there's always a chance to to continue communicating and i highly recommend doing that thank you for such an excellent presentation day uh really worked uh walked us through some really cool stuff today do you have a few more minutes um i don't know if anyone has any last questions uh i see one in the chat right now don't miss the opportunity but we can we can close a little bit if if we are wrapped yeah um so i'll take a question here on can you get change change pool price on the data you get for point base um can you can that you change the pool price based on the data you get for pointworks so someone's asking here like basically like how easy is it to manipulate um how easy is it to manipulate the the prices returned from the the time weighted average price oracles so it's not that easy because the observations that are made are kind of a result of the liquidity in the pool so for you to actually to manipulate it you will actually need to check to change the prices in the pool and the only way to effectively change them is by executing trades um so this is kind of goes into why it's expensive and maybe not attractive for a lot of attackers to try and manipulate oracle uh data i'm seeing and by the way guys i wanna i'm also reading questions here um from another monitor but feel free to also reach out on twitter or discord like was mentioned earlier if you have questions that come to mind maybe after this presentation let's take a look here i see mikhail asked a question so let's go over that can you explain about the risk of under collateralization so i think there was a specific slide here that i want to talk about a little bit more okay about the risks okay in the q a cool all right so it's not so much of a risk of under collateralization um yeah so again basically like like we said earlier when pools have very very deep liquidity it becomes very very expensive to kind of try and wage and attack and manipulate or modify kind of the oracle prices um to kind of reflect something that's not true um and in kind of lower liquidity areas kind of the deeper the liquidity the more expensive it comes to do this if it's a pool that has very low liquidity there have been some attacks in the past weeks um that we've seen um it becomes maybe financially more feasible again this kind of depends on like what other protocols or things might be kind of reading prices from there um and ultimately like if you have a loan that's using kind of an on-chain price feed as a source of truth and you're able to trick it it could kind of put you in an under-collateralized position in practice these things are very very hard to do with most of most pools where the liquidities are sufficient it becomes too expensive to kind of try and swap liquidity in and out or make trades just to move kind of prices um there have been use cases but um they're they're kind of rare i think unisoft v3 oracle has proven themselves quite resilient uh over time so can i ask a question yeah um so you're dependent on uni swap to get the price right and so on some pools like if the pair is not changed like uh not a lot of people like kinda buy and sell on on the unit swap but it's more active on a different pool on different exchange uh how how can you solve like the the price difference between uh uni swap and like other decks yeah that's that's a really good question so i think the question is is like when we're when we're fetching a price using unit swap oracles like we saw in the code we're providing an address of unisoil pool and we're treating that as a source of truth now maybe this price is different than prices on sushi or any other dex how is that settled all right so in d5 kind of one of the most important things is arbitrage right so in an efficient market that's working well you're going to have either keepers or traders who are noticing the differences in prices and who are actually executing uh trades in order to kind of profit from the spreads of the differences and what they actually do is they actually bring the prices and make them kind of uniform over time across the market um so this is like something that kind of exists in all of like finance um d5 i think a few years ago i mean even today there are still kind of instances of large arbitrage opportunities across kind of you know different exchanges um but you know with the the pickup of activity in d5 there are less and less opportunities and that's especially true um when you're looking at popular trading pairs right popular trading pairs usually the prices are kind of very very very similar across different dexes it's more more can be an issue like if they're like maybe new token pairs that are listed uh they're listed in a few places there's very little liquidity people really aren't looking at them um but even then um there's you know there's a whole kind of uh research area if i focus on this there are bots that can be listing for new token pair listings and try to kind of um kind of catch those price differences um automatically um so it's true and to summarize it's true that when you're looking at uniswap you're focused on a single data source which is what's happening in that trading pool but oftentimes it's enough if you're looking at a very esoteric kind of new or kind of unpopular trading pair then maybe it's worth considering you know where where you get the data from because you might you may or may not be more susceptible to this type of attack yeah yeah someone wrote here um what are the requirements of listing a token into uniswap um i think we'll leave that for and it's a great question uh there are no requirements it's permissionless so anybody can uh can list a new tokenpair and provide liquidity that's one of the good things about defy um how you do it we can leave that maybe it's out of scope for today um this is cool kenny writes this is cool using top and slippage info you should try and predict yeah like another really nice thing about kind of any kind of blockchain based app is that all the data lives on the blockchain um so you have access to it you can build predictive models and try to basically understand where the you know where the price is moving towards um definitely definitely true thank you for everyone coming in today it's been a pretty killer presentation uh thank you over and it's been incredible having you i know if anyone has any uh other questions following this i again reiterate uh reaching out in discord to continue that conversation or on twitter uh a great place to follow um i don't know if you have any like last closing thoughts but i think we can end the session here today um i really appreciate everybody coming out thank you for having me guys good luck hacking like over the next days and uh feel free to reach out and really recommend looking at the unit swap code because it's super clean it's all documented and you can learn a lot so have fun everybody and thanks for having me of course we'll take that into the weekend good luck everybody really looking forward to seeing what you build we're going to be ending the session here but really appreciate everybody's time and attention 
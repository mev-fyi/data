cool great we're live so we have dashboard here um with us from oasis network and you're gonna learn how to build a dac on your network today i'll let you take the stage okay um thanks anna um i mean um thank you for short introduction um today um as you see uh we will have a short it's only 30 minutes right guys um we will have 30 minutes uh intro to our network to oasis uh mostly uh evm blockchain emerald uh i will introduce some uh basics like uh our architecture uh and then we will dive a bit deeper on uh evm chain uh and the second half of this uh you know meeting we will have actually a demo uh i hope it will help you uh you know understand how easy it is to use some you know uh popular tools to deploy a smart contract to our network uh to testnet for example uh or even uh integrate uh you know a band uh uh um oracle smart contract uh to your app for example right so um let me start or just begin with our first slide which is agenda for today um again we have 30 minutes to go through our oasis network technology uh you know also architecture and all the paratimes that i will introduce um and then we will actually jump into the emerald paradigm which is our uh first evm compatible blockchain um you will see how this add benefit to oasis and then we will have two demos i hope i can complete both in this time schedule right so first i will show you how to simply deploy uh one let's say demo uh project um from truffle or with truffle tool uh and then we will have a demo how to integrate uh banned uh oracle smart contract uh with very simple tool in browser which is remix right so at the end we will have this queue and they if you have some questions of course you can type them or ask me at the end of this short meeting right uh and then we will discuss or you know answer your question uh anyway uh we are always available there on uh you know our discord uh we have emails for support and uh recently yeah we also moved from slack to discord so yeah discord is our main social uh that's a channel for developers for node operators for even for the rest of the community right so this court is the thing now now um let me begin with the um oasis 101 so the uh network technology right so what's behind so how actually oasis uh decided to design to uh you know build uh the network right so we have pretty unique um approach um and you will notice that we have so we're layer one right um and typically what is mentioning around in this uh blockchain uh you know area uh is that we are privacy first or let's say confidential uh built-in uh uh layer one uh chain right and that's true right because we have some kind of uh layer one and layer one and a half or maybe you can also um take this as a layer two if you want but essentially since since it's so um let's say connected together with consensus uh you will notice that it's kind of a layer 1 or layer 1.5 so something in between right so let me first begin that we have a consensus layer right and this consent consensus slur is clean as possible it doesn't support any you know smart contracts and stuff like that because we want to make it sure it's clean it's robust it's scalable and it's you know only performing uh his own job right so that's consensus letter right and then we have so-called paratimes right so paratimes are essentially uh let's say isolated um standalone blockchains if you want uh which are independent from each other right so we can have like evm blockchain we can have so-called cipher paradigm and we can have so-called parcel paradigm right so those are all blockchains which uh who actually share a common consensus layer right so we are actually sending a batches of confirmations right to consensusler which means that our paratimes our um you know parallel uh executions right these blockchains they don't need to have their own uh consensus layers right so it's very simplified from that perspective and we can have only one consensus layer and then we have different paratimes now each of these paradigms will have their own uh let's say properties or benefits right and these benefits could be okay so we have uh ethereum compatible blockchain which is called emerald right so you're probably familiar with evm chains uh but then we have something called parcel paradigm right parcel for example is for uh you can call it data tokenization or you can call it uh data privacy so i will introduce all things about parcel later on but essentially if you have some documents or files to be you know to stay confidential especially while sending them to computing and then sending the results out that's one of the things that you want to use or even cypher paradigm right cypher it's even more let's say robust in terms of privacy and confidentiality and we will talk and mention both right but we will focus on emerald later on now huge benefit coming to oasis is that all these uh chains or this all these spare times will be able to talk to each other right so currently they still need to go via apis through uh you know your application and so on but essentially they will have like inter uh paratime communication very soon um okay so now we know the architecture now i will jump to each of these you know pair of times and a bit more uh into the numbers right so first of all uh oasis network if we compare a bit to other networks you will notice we have pretty good uh average block time on consensus and since we have all these pair of times uh that are sharing the consensus they all have the same average block time right so it's six seconds right or you know plus minus right but six seconds it's the thing right uh we have instant finality uh which you will you know you you can compare that to other chains that you you will see and notice that uh we are almost the only one with the instant finality um and this could be easily you know um tested or you know tried uh if you're using for example our wallet browser extension and then you can move let's say rows from one address to another or maybe even between consensus a pair of time you will see how awesome and fast it works right so that's one of my favorite features actually on oasis because everything is so connected and it works together so smooth that uh that's the the biggest benefit from my perspective right because i was also using other chains before and you know uh when you get used to it some faster cheaper uh user-friendly uh chain you cannot actually go back to slow and too expensive chains don't ask me which one of this uh is that that one right so uh privacy i mentioned we have built in uh privacy in layer one so you will notice we have this confidentiality support um and maybe one good uh you know data about throughput right so we have up to one k transactions per second now keep in mind that that's per let's say per um paratime or you know one blockchain but you can have thousand blockchains i mean thousand pair times right so currently um there are three built by oasis team and you have opportunity to build your own paradigm right so that's very very convenient for developers right you can actually design your own pair of time i don't know what's your idea behind but you can have another features that are not let's say um in cipher emerald but you can add your own pair of time right that's really cool cool um maybe one more thing about smart contracts um you know there's no secret that solidity smart contracts are supported on evm blockchain on our emerald but we also support uh you know dazm web assembly if you want um this is supported on cypher and currently i will mention it's the rust language but we will come to there right now first cipher paradigm cipher pair of time as i mentioned is um you know again blockchain paradigm that actually shares consensus and it has the same right average block time so six seconds uh it provides confusion confidentiality right with private transactions in private state which is very important here right and you can imagine the technology that was uh primarily let's say on our machines uh with so we are using or uh there is an example with intel hdx enclaves the point here is that this technology t ee right uh trusted execution environment we want to make sure that whatever you sent to computing uh that this environment is secured and can be trusted right um that it's not malicious right uh even though that um you know some hacker actually get into your machine or your environment this thing cannot get uh you know malicious or hacked because it's harder right even even though uh well somebody can physically actually remove that from the harder but that's probably mission you know impossible right uh now of course scalability is there because of our unique uh architecture right uh in design and you can see that most and all actually our networks or uh blockchains are decentralized so we don't really run any our nodes they're they're these nodes are all decentralized across the world so currently we have a bit more i think than 43 operators on a cipher pair time and we're always using rows as our native token so on consensus there is rows we have rows on cipher pair time we have rows on emerald and we have rows on parcel right now if we jump to parcel that's again a pair time it's let's say layer 1.5 or you know 1.5 or even 2 if you want now the parcel if this if cipher is focused on everything privacy or everything confidential uh parcel is more um for you know data or documents uh that can be tokenized and uh private or protected right or isolated right so we have this this um protection and we have all the compliant environment that's very important for uh enterprises or even for you know um our national uh uh um you know uh the institutions and so on so we are compliant uh you can actually govern the data so you can have data managers uh who can actually decide uh you know what is allowed or not so how the data is shared right and also you can analyze the private data without revealing the raw data that's pretty crucial here right so um essentially when you have encrypted data you can send this data to our let's say black black box data can be processed computed and then what what goes out or the analytics right is done without actually revealing this encrypted data now it's very important that we also have the audit uh possibility right so we have immutable ledger for audit um which means that all transactions that will operate on on the sensitive data are also maintained right so it's possible to get all these um for if you have any uh compliance uh requests so you have audit now we will jump to the emerald uh emerald actually is uh evm compatible blockchain and we have full evm compatibility right so you can now imagine the evm web-based uh depths uh you know nowadays nfps you know metaverse it's popular with game fi uh you can imagine oracle so you can imagine you know uh um anything right the access and so on right so a lot of stuff coming and scalability again mentioned since we shared the consensus six seconds um block time uh and the the the parameter that it's very crucial from my perspective is that the fees recently were actually um set to a very very low uh amount just to prevent some attacks and so on right uh but essentially before that we had like zero fees but essentially uh to avoid all these attacks we had to um you know introduce some peace right but they're like thousand times lower than uh ethereum for comparison right um now uh emerald runs on over then uh 56 uh you know node operators already and we're using rows as a native token so um just for comparison when we launched uh you know uh emerald uh evm pair time uh you will notice that we had almost the same transactions per day when we picked right as the ethereum ethereum on the average uh you know on from january 3rd to february 3rd basically so in one month of course that's then decreased um because the hype and so on went down uh but yeah on average now we have around 2k this is probably a bit old data but it's still pretty good that consider that we're pretty new uh chain right emerald um cool so max throughput that's also a good thing to point out almost 7 million transactions per day uh we are uh you know scaling that up to 10 million in the future um transactions fees are mentioned down below and before we actually jump into the examples i actually can share um one very very unique news if you're um you know following our social channels and uh you know especially let's say twitter and other accounts you maybe catch the news that we actually launched our first confidential privacy enabled nft right so you can actually dive deeper on that but that makes huge um you know environment to build very new and unique uh depths right because now you will have uh opportunity to have private nft with some data uh that is not revealed right and then you can have some nft that it's revealed right so we are basically using uh like combination of parcel and evm blockchain so very very unique feature i don't believe that any anyone else has that so thumbs up for that now um when we go to um compatibility right um evm solidity i bet you already know that right so we have smart contracts in solidity um you will notice that we have our paratime module based on sputnik vm uh it's pure rust dvn implementation the tools that you are probably already used to it if not they're the most popular like hard hat truffle remix uh that we will have an example and recently actually if you are interested um you can join um you know i will save our community um especially in the development uh um you know um area because i will try to onboard you know developer ambassadors so we have one developer ambassador joining us who actually add support or let's say documentation for a different languages for example not only you know js and uh these tools but we have this wiper thing we have other languages uh so we can deploy smart contracts and so on in different uh ways okay so um pair time uh with truffle right um i will not be too long here so i will give you an example here but essential part on our to to deploy on our network is just how and where you configure uh your network parameters right so today we will actually see how you can configure your um config file in js with our network and deploy that on test right so we will have an example in truffle um and then hard hat same story you have like hard hat config ts file type script uh and then this is the parameter that you need to change right so you need to provide the networks and then you choose where to deploy right okay this is the example for remix we have solidity contracts we can connect multiple accounts uh then with one account or you know we deploy the smart contract to test and remain at and then we can try how this smart contract works right so we will do that with remix uh just to show you how you can get some uh prices like uh bitcoin and ethereum right uh versus usd yeah um one thing to remember if you are a developer we have pretty nice good environment to start with you can locally actually start uh you know you can download docker image from docker hub i think the recent version was updated three days ago but essentially you get single oasis validator node we have three oasis compute nodes with emerald paradigm and we have the gateway um all inside that image right so you can prepare your local environment it could be found on docker hub emerald deck right so that's awesome if you want to start quickly on your local machine right okay um if you want to get parameters you can always go to docs dot uh you know oasis dot def so essentially you have all these parameters for emerald um you know from the test net mainnet so basically web3 gateway configurations uh the rpc and so on right chain id and so on um block exports we have separate block explorer for test net and separate uh block explorer for mainnet keep that in mind because sometimes people start deploying on test testnet they are using the main attack store and then they cannot see the transactions or smart contracts right so keep that in mind this could be found on our docs as well but yeah go to the writing store so yeah now we have around uh five minutes or so uh or let's say almost seven eight um i will show you first integration with band oracle smart contracts right so this is a demo when i will show you um the remix um and how to use banned so i will just move to another so out of the slides to another tab i already prepared so if you want to get this example this is just an example smart contract that you can use to deploy on our network essentially if you will go through you will you will notice that down below where the contract uh begins uh it's called demo oracle um you will notice that our function or let's say our function get price or get multiple prices uh will actually return uh wrapped btc versus usd right or wrapped btc versus usd here and eth versus usd so essentially those are like pairs right um always up and below right so we can call them uh bass versus quote right so let me check uh so let me show you how to deploy any contract in remix first we need to choose the right compiler so we are using the solidity 0.6 11 this one um yeah we will have to compile the contracts all right now if you go to um deploy and run yeah so that that's the second tab so we compiled already now we have deployment um you have to connect one of your accounts right so what i will try to do is actually um let me switch the network so i will go to emerald testnet um i will connect cancel cancel cancel i will connect to my different where's my okay to my oasis yep and now i will go to connect my account right so [Music] let me refresh that because i want to make sure that i connect to the right address right okay let me compile again let me go to deploy uh and let me check the aha yeah of course i need to choose injected web3 right so that's why i didn't uh have an option here so that's my address now you see 19.9 that's basically rows or our test tokens um okay so what do we need is actually a contract address right a contract address can be found on our um documentation so i will just jump to here and you know keep in mind that there are two contracts one is for test net and one is for mainnet so i will use the testnet contract address for our data aggregator copy that and i will i will put that to my address reference okay and now i can press deploy poof okay i will have to of course confirm that confirm boom let me extend it a bit okay and down below you should see a transaction so i open that transaction and if i go to transaction hash i can copy my address essentially copy that and if i go to test net explorer so you see it's test net explore emerald and if i put here my address i should see you see 36 seconds ago creations of smart contract which is awesome right so there is a smart contract on the test net boom like that and if i just show you an example um how you can now get some um you know results right so there are functions uh get price for example that that was one for um for you know bitcoin versus or rap bitcoin versus usd okay let me do that and let's see what happens get price so you see now we have a call to our smart contract uh from my address and if i extend that you will notice i have uh the output um and you know it's i think it's exponent uh minus 18 so yeah uh keep in mind that the the the price would be like 39 164 uh usds right so yeah that's one cool uh feature or get multiple prices so that's all online now on our test net right and that there is a price for btc rap btcn for rep for ethereum right so that's pretty cool simple fast and this is the remix now for the um for the travel i think it will be it won't be enough time uh but essentially um if i just give you an example uh in few minutes right i will just copy my code that i prepared and just deploy that on testnet just for a demo so um let me just go to um cd ls you will notice i already have a metacoin project that's demo project from the truffle cd metacoin yes so you will notice i have contracts here i have truffle config truffle confit.js right and this is the essential file so if i say vi profile js i can see what i have inside so you notice um you know the example comes with um all the all this code already but without emerald testnet or emerald mainnet network right so uh that's what i actually already inserted and there is one um you know required uh let's say module library right to to use this hardware wallet provider to get the private keys from the environment variables so let me just um try to execute that let me go out let's go out if i say [Music] so yeah if i say truffle um test dash network network and i will deploy that on any route uh test net i think it was tested right so if i just let me try the truffle again uh v i emerald test it you see that's the network i want to deploy so that's my test net okay go out again boom okay let's do it so truffle um truffle test dash dash network emerald test that uh probably i misspelled something so truffle test network enrolled okay package pro maybe i missed um do i need to import let me let me try one more thing maybe i need to export yeah probably i have to export uh i have to export my environment variables so yeah my my uh environment variables will be two private keys for two addresses that we can transfer tokens between two addresses and i have demo account so no words let's first export let me see if now it works yeah looking better um okay compiling my contracts so keep in mind this is live so these contracts are now being compiled and deployed to testnet right so essentially what we needed here was just reconfiguring our um our truffle config.js file and executing the truffle test network and this is the destination network that you can find inside this configuration file for this example we had to export private keys uh because now we will use these private keys to test smart contracts um yeah so essentially if i just show you what's inside right meanwhile that testnet uh is deploying that and testing the smart contracts in my metacoin [Music] uh i have contracts and there is uh for example you will notice the first one is test metacoin we can do metacoin open yeah we can use textedit it doesn't matter but yeah essentially there are some parameters already written just for a demo and this is now executing uh on our testing so we will not focus on that but essentially all these smart contracts inside our metacoin uh demo example so it's just an example don't be overhyped about our new coin or something okay that's just a demo from truffle right okay cool cool cool um so yeah we're almost at the end so before we actually finish we will wait and see what will happen uh on our test net deploying our um contracts uh if you have any questions let me read them through if you have any um all right all right do we have any questions um yeah can you please share the code of the contract so yeah that's what i did but uh i'm not sure which one you want um by the way for any of these examples uh again you can find i will write i would i will type in in the chat so if you go to docs um let me just uh copy and paste uh that here so i i copy and paste it all right let me send to everyone so here you have the links to our docs with all these examples you will find the example for oracle and the smart contract there you will find the example for uh this metacon example with truffle um and there are also there are also examples for hard hat um and we will add support also for the viper and rust and so on right so be ready because we will support not only this uh let's say flow uh but yeah here we have it right we have our um our smart contract deployed on testnet we have the tests uh successfully passed on the test net so you see this test initial balance and so on we will we were sending let's say 10 000 meta cons from one account to another and so on so yeah that was actually done on the um on the desktop so let me check if we have some evidence on on our test net i will just go to my um transactions if i will be lucky lucky lucky papa who knows right probably i will not find it like that um contra call token transfer blah blah blah i believe that should be something from here but anyway so it's on the testnet right cool um [Music] do we have any other questions about the cipher paradigm it's possible to run bits that nobody else can see um i think well i think we'll probably take the questions over to discord in a moment uh okay which we have the eth global oasis sponsored discord as well as uh anyways contact you okay um i think they'll be best uh thank you very much that was very informative uh we're gonna move it over to the next talk coming soon um you can find you on the discord and if you have any questions uh you find them there yeah thank you so i know there are so many things to talk about so yeah welcome and join the discord we have many things and many developers here so come we will help and yeah i'm happy to start building with you guys great have a great day everyone yeah sure same 
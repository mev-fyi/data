[Applause] [Music] so today we're gonna explain what uma is what optimistic oracles are and for the hackers in the crowd we're gonna give some ideas for some projects you could build with optimistic oracles i think we have a pretty decent quick hack idea but also just give some examples of how uma is used in the wild today um to help you guys out no matter how far you are in the process um and i'm nick i'm an engineer and this is shawn product manager and yeah let's begin so so uh just starting with the basics basically uh uma is an optimistic oracle i think to talk about what an optimistic oracle is we need to first talk about the fundamentals what is an oracle um an oracle is a system that is built to uh trustlessly and reliably bring data on chain so it can be used within smart contracts so if you have a smart contract uh for like a derivative on the price of say gold you need to know what the dollar value of gold is and you need a way to actually get that data on chain because smart contracts have no notion of you know off chain data um so in you know d5 uh what do people think about when they think about oracles they typically think about things that we call price feudal oracles so an example of a price feed oracle would be something like chain link what are price feed oracle is good for basically price feed oracles have a trusted set of actors that push prices frequently and are good for deterministic types of data so they're used a lot in d5 for things like you know securing lending protocols and running like liquidation engines there and they're very good for you know times when you need data quickly and you care less about like flexibility of the types of data you can get access to or you care less about you care less about like a concept of recourse and you also don't need any element of human judgment so things like crypto prices are probably the best example what is an optimistic oracle so optimistic oracles are a different take on how you approach this oracle problem optimistic oracles we say enforce correctness after a dispute um so what are they good for they're good for basically bringing any type of data that is like uh generally uh verifiable on chain so you can ask a much broader set of questions of the oracle so rather than you know only being able to get things like crypto prices you can ask it like very very general questions um and we'll go into like why that is and like how the oracle actually works uh but it's good for things like you know not only can you get access to the price of eth but you can get access to uh basically the answer to any sort of like yes or no question that you can ask it so like what like who won the lakers game last night or uh like who won this political election or what happened on this other blockchain network those are all things that optimistic oracles can serve very easily this is a very complicated diagram so we'll share slides afterwards and i would recommend going through it then um but just at a very high level uh what does the data request process look like um basically with price feed oracles the way they work is that this permission set of actors will come to consensus on prices beforehand and push these prices on chain very frequently with our optimistic oracle basically somebody needs to say hey i need the this piece of data so they need to submit a request once that happens um anybody so a completely permissionless set of people or not a set but like anybody can come in and say you know you're asking for the outcome of the sports game last night or you're asking for the price of eth and i can submit a bonded proposal saying i know the answer to that question it's this that answer then sits through this liveness period or verification period where anybody else can view that and uh decide if they agree or disagree with it if everybody agrees and nobody disputes what the initial proposal is then this is accepted as truth and this is where the word optimistic comes from so it's kind of similar to like optimistic rollup fraud proofs where there's like a verification period where things are verified but so if nobody disputes it then it's accepted as truth and that's the like data point that's used if somebody disputes it then it basically gets escalated to a larger court system or dispute arbitration system again there's a lot here so i would go through the diagram but that's it at a high level and nick's going to go through a couple demos of things you can build cool um so this this next section is mostly for builders developers and i'm just gonna walk through some very simple toy examples of contracts that use the optimistic oracle i'm going to explain how they are very simple versions of real apps that are out in the wild right now using the uma optimistic oracle and then we'll walk through some of those real life applications at the end of this so the github repo the quick start repo that we just put together is live at the url there we use um typescript hard hat ether.js type chain pretty um standard stuff in the industry today but it could be i guess it's just a good place to go if you want to just get started quickly with the latest of the tools that real facility solidity developers use today so i'm going to explain a really really simple um contract first called the deposit box i'm going to extend that with what i think could be a potentially useful application in the real world but maybe not but it does actually use the optimistic price request very well and then the third i'm going to explain how you could build a prediction market very simply well actually we built it i'm just going to explain how it works um so the user story is there's a deposit box let's treat it as a black box that's why it's black um a user deposits 10 erc20s into the box and the idea is to keep it safe there safe from their own hands in case they trade it so call it let's say 30 days later the user wants to withdraw money from the deposit box to pay for cookies or coffee and the user wants to withdraw ten dollars worth of tokens now recall when the user first put in tokens they put in 10 tokens they had no idea what amount of dollars they were putting into the box so 30 days later the user wants to withdraw ten dollars worth of erc20s how does the black box know what what one dollar worth of tokens is well the deposit box can make a price request to the uma oracle this is a very contrived example because you could have asked this to a to a price feed oracle as sean explained earlier it's very for most tokens it's pretty easy to understand what one dollar worth of that tokens are but you could ask this to the uma price oracle and you'll you'll ask hey what is one dollar worth of tokens today um and the uma oracle is going to respond to it so i'll give a really quick segue on how does the oracle know how to answer the question so the actual price request that the deposit box is making to the oracle is a question what is one dollar worth of tokens today voters who are off chain actors need to look at some sort of legal contract or some sort of rules off chain or methodology to understand like how to respond to this question so a real life example that we use to secure contracts that store like the comp token comp is uh the offset uh the off-chain set of rules might be look at these three exchanges and take the median of their prices at the current time and that is the price you should return so uma oracles are secured by these off-chain contracts with rules that voters can easily follow and it's the the onus is on the writer of the contract to define these rules correctly and then voters should be completely neutral about how they respond to them so in this example case the deposit box has asked the uma oracle what is one dollar worth of tokens today the uma oracle says one token's worth five dollars so the user will receive two dollars back let's extend this that deposit box is not super useful i um you could have used a different oracle for that imagine i deposit the ten dollars into a ten teneth into a lockbox this is something i've been thinking about and actually just was talking about today with some some uh co-workers um say i wanted to say my daughter was one years old and i wanted to give her 10 eth but i didn't want her to be to be able to withdraw until she was older and and not just based on her age i didn't want her to withdraw it when she was 20. i wanted to sort of incentivize her so i i set a rule that she could withdraw the money if she graduated college um this is something that is easily verifiable by an off-chain set of rules but it's not necessarily easy to define on chain there's no sort of bot that's tracking my daughter's life and responding to this automatically so say for the next 20 years she tries every day to trick me and asks um she requests to withdraw 10 eth every single day i'm going to look at this set of contracts and i'm going to answer no if she ever wants to dispute me she can dispute me and she can raise this question to the dvm and then uma voters can can then answer this question hey um the the box might ask uma has nick's daughter graduated college yet someone might propose no she's four years old she has not graduated college yet so the example umip identifier for this might be a yes or no question has my daughter graduated college yet voters uma voters remember are incredibly neutral and they're gonna they're gonna vote according to the rule set that's described so this umip um or or this this this methodology might be vote yes if she if there's proof that her name has appeared on the graduation list for some certified college this is obviously a very hazy set of rules but it's just just a toy example here and vote no otherwise and the contract could take the result of that vote and unlock her assets is this a useful product maybe not um but i think it would one thing that actually it could be useful for is if you in the future say you lose communication with your daughter uma voters will still continue to vote on this question has she graduated college yet according to that set of rules so um maybe it has some use case but it's just a little bit of an example of a deposit box that could not be used on a different price feed oracle um okay so i'll explain the prediction market this this is a very simple example of how prediction a prediction market today called poly market is built on the uma optimistic oracle and this is how it's sort of built today so say users want to bet on the question uh who's going to win the kentucky derby so use the user you might put 10 usdc on the horse seahorse to win the kentucky derby you're going to deposit this into a contract written by the prediction market developers and the prediction market is going to immediately ask the uma oracle did seahorse win the kentucky derby say say the user originally deposited this 10 days before the kenducky derby started so there's actually no answer yet the the contract needs to be written in such a way that um the prediction market contract needs to be written in such a way that um it will throw out answers where voters answer to the question that the the question hasn't resolved yet there's no way to know if seahorse won the kentucky derby if the kentucky derby hasn't started yet so the oracle's going to basically just give a standby signal to the contract and the contract is going to wait around until the kentucky derby actually happens and then someone will be able to propose a price the proposer wants to do this because they might earn like 50 bucks or just something some simple reward for responding to the question assuming no one challenges it the uh the contract can then pay out users and so this that's a very simple example of how poly market works today and imagine they're running this on many many different markets that are all asking questions to the optimistic oracle maybe 10 a day and individual people around the world are responding to this for a little bit of a reward um and very few of these actually get challenged because they're relatively easy to verify they're they're pretty hard to verify in the price feed oracle like it's not not easy to um to answer questions like um like presidential elections or whether insurance contracts smart contracts got hacked so today we'll just walk through some of the some of some of the the products out there that actually do use the oracle and we can reduce their use case to the questions that they ask um do you want to give this cool yeah so uh these are some examples of protocols that use huma today and like nick said the questions they asked so poly market is a prediction markets platform and you know they ask questions like did the trailblazers win their basketball game last night so you can you know create prediction markets on emma uh based on very arbitrary flexible types of real world data the second one the purple one is sherlock which is a decentralized insurance protocol and they ask uma basically was this protocol hacked and should my defy insurance contracts should it cover this insurance claim um so another good use case is you know enforcing legal contracts where there's some degree of ambiguity and you need some sort of human element to resolve these things the third is a cross which is a cross chain asset bridge and a cross uses zuma's oracle to ask for information about uh transactions that have happened on other networks so if you're trying to bridge usdc from say optimism to mainnet and basically across is asking questions about uh like certain usdc deposits and if like relayers are basically like forwarding uh funds it's yeah it's pretty complicated but like was this relay correct so like was this transaction correct and were the fees that were taken out of it correct um the la or the fourth one is uh basically asking for the price of a specific defy token so here it's asking for the price of the fox token and can be used in things such as like structured products or like bespoke financial contracts and then we'll the last one is asking what was boba's tvl in february of 2022 so this is used within these things that we call kpi options which are essentially trying to tokenize uh like arbitrary kpis or metrics around certain protocols so here you can create like a financial contract where the payout is actually determined by uh boba's tvl in february of 2022. so this is really a reiteration of that uh with you know what we're actually calling the products so prediction markets uh are good use case bribes optimistic governance is one thing we didn't talk about but uh basically we have a set of contracts where you could ask the oracle does this like arbitrary transaction follow a set of off-chain rules for a dow and if it does it allows it to be executed and then kpi options we briefly covered and then synthetic assets is like a pretty simple use case but basically tokenizing uh derivatives based off the price of like any real world thing and then the fun stuff so prizes uh we're giving out 10 000 total dollars uh five thousand dollars first place three thousand a second in two thousand the third uh we have a link where we give a more in-depth explanation around the criteria associated with it but like to really distill it simply it's basically the best use case that integrates inland's optimistic oracle we also are hiring extensively uh we have a referral program so right now we're hiring for a product lead front end engineer smart contract engineer so if you're looking for jobs and want to apply please do we also have a referral program so if you have friends that are interested you can make money off of that if you follow that qr code it links you to our referral program details and yeah thank you uh here we have some resources uh there's actually should be more than that but we'll publish these these slides afterwards that link to our docs uh the quick start tutorial that nick went over um within the docs or tutorials that go through that quick start tutorial in the example contracts and then we're all here for the next few days enjoying this experience with you guys so thank you are there any questions yes so the question was not just anyone can propose an answer to a question actually anyone can propose an answer to a question but you you just have to stake a bond the bond keeps you honest and prevent or disincentivizes you from just spamming answers so you'd post a bond that's usually much larger than the reward but anyone can propose an answer anyone can also propose a bond and challenge you and if someone challenges you the the answer goes to a vote to the uma oracle at which point there's no further escalation and the um oracle will just resolve the question yep so the the voters which are uma holders are paid in uma to respond to votes and they're paid if they vote uh with the correct answer so think about um participating voters who vote correctly earn a relative they accrue um a share of the network um and it's sort of taken out of the it's in it's diluted from the people who don't vote correctly or don't participate cool thank you 
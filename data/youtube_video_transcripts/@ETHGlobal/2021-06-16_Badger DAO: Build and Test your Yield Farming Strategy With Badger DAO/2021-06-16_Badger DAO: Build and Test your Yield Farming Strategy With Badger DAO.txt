all right thanks everyone for joining we're now live um and today well at this point one of our last talk of the day we're having the chance to have badger now with [Music] and um so yeah the workshop will be build and test your yield farming strategy uh with badger so uh i will let it um to alex to take the floor and introduce uh himself please ask question in the chat uh will from the team will be there to take your questions up if you don't have that time to address them here we will be uh converting the conversation to the discord channel um with the sponsors and uh we'll be able to follow up there awesome thank you very much and i'm alex entrepreneur we're we have also william we're from badger dao and if you're not familiar budget is an ethereum based protocol with the goal of bringing bitcoin to d5 giving it utility in this case yield uh over uh the last of uh six to seven months we built a bunch of products the most important one being set vault which is a tool that basically allows you to simply deposit your tokenized bitcoin be it wbtc or mbtc etc and earn yield on it since launch badgered out has amassed over 130 million dollars in treasury and over 80 million dollars in revenue and currently it has over a tbl of over 600 million dollars needless to say um uh it's it's doing pretty well and i'm actually happy to say that i used to uh be on the other side of the equation watching the videos and participating in hackathons that's actually how i met badger uh specifically uh through uh one of their bounties and so i'm kind of here uh you know paying it forward and hopefully uh helping you build something really cool uh today we're looking at building a yield farming strategy from start to finish we're gonna build it test it and deploy it and we're going to do that by using a tool that we've built if you're uh watching any of the resource weather and discord on youtube you'll have a link uh on the to the github uh source code that has not only the source code that you can use which is called the brownie mix but there's also going to be an example which is the wbtc strategy what we're going to do actually if you follow along you'll have the opportunity not only to win prizes for badger and we i'll talk about them very briefly but you will also be eligible to win any other prizes from other sponsors such as ave uni swap and even chain link because fundamentally building a yield farming strategy is the act of using the money legos to be to make your uh asset productive and as such it could be a great challenge to make all of these uh d5 legos work together and it's also going to be a great opportunity for you to stack these potential sponsor prizes on our end we're going to have a few prizes i'm going to start sharing my screen and uh our biggest price is going to be for ten thousand dollars specifically it's going to be for the top three strategies uh built with the mix that i'm about to show you the first price will win five thousand dollars the second one three thousand and the third one will win two thousand dollars if instead you wanna just improvise and build uh something else on measured out we also have an open price which means that any valid submission that is related to our source code uh is going to win uh this pool price without further ado i'm going to get started and again i'll try to uh i'm going to have to cut some corners but that said all of these source code with the badger strategy mix you should have access to and it's also documented there's also a full tutorial video that shows you how to set it up how to test it how to use it and there's also going to be an example project that i'm going to be going through the way you're going to get started is again you go on badger finance and you can open the badger strategy mix v1 and you can click the green button for use this template i'm going to call it wbtc ave demo and you can then click create repository at that point you're going to receive a git url that allows you to uh you know clone the repository so you can just do that and in my case actually already done it but i'll show you you can just type git clone and then paste the url and at that point you're gonna have access to the monorepo so for the sake of time i'm actually gonna skip over that and i'm gonna get started basically you're gonna need to set up this uh code and uh let's look very quickly at the monorepo there's gonna be three files that you have to edit you know there's a bunch of stuff that may be intimidating but fundamentally you only have to change free files there's a file called the config init file which as you can see allows you to specify a few variables in our case we'll want to set this up for the tokens that we're going to be using the want will be wbtc the lp component will be the a token from ave and the reward token will be staked ave so we're going to change that in a second then we're going to need to set up what is called a strategy resolver which is basically a tool that allows you to specify uh the difference uh the different set setup or the different state between specific contracts this is probably the most complicated part and i'll try to delve very deep but fundamentally this is the only file you have to change for the entire testing suite to work and then obviously if you want to write a yield farming strategy you need to write your contract in solidity and in this case the file is going to be called my strategy.sold very briefly in terms of architecture we're going to have again these three tokens one token the one that gets deposited in the strategy the lp component the one that represents the fact that we deposited somewhere else to make our asset work and then the reward the token that we're trying to farm so that we can accrue more want in terms of functions we have a few view functions here the get name and get version just you know vanity functions then we have the balance of pool which you need to set up so that you can determine how many uh tokens uh are currently invested then you're gonna have to change the deposit function that given a specific amount of want will invest the token and then you're gonna have to write the withdrawal all which is a function that allows you to divest all of the assets from the strategy this is typically used for migrations and then the other function will be the withdrawal sum which basically consists of liquidating some of the assets that are invested by the lp token so that you can liquidate them to want so that you know a normal person can withdraw basically an external account can withdraw the last two functions are tend which in our case is going to be very basic and then harvest which for the sake of time i may or may not cover but suffice to say that the harvest is going to be the core of the function where we're going to get our other rewards we're going to uni swap them into wbtc and if you have the time you could also add a chain link price feed to ensure that we don't get front run when we do the uni-swap swap so there's a lot of potential for multiple money legos if you want to do that well without further ado let's let me show you how to get started you're gonna first of all need to install a couple dependencies there's this file called audiovid.example you want to go on etherscan and web in the infura and you want to basically uh substitute these and then you want to rename the file from dmv you want to rename it from.dmv to example to emv in my case already done it for the sake of time you can see my keys if you want that's okay and uh fundamentally that's the setup in terms of installation you need to install your dependencies with mpmi so that we can have the javascript dependencies installed and then the second type of dependencies that you need to install are related to python if you use a virtual e environment you could install it by typing p pip install virtual emv and uh then you could activate it by typing virtual emv vmv which basically declares a new let me see virtual emv vmv which basically declares a new virtual environment and then we can activate it by typing source vnv bin slash activate this step is optional and it's typically done when you have multiple repositories with different requirements because otherwise your computer will start going nuts so in the we're going to now install the requirements from our requirement file by typing peep free install dash r requirements dot txt and notice that some people may only need to use a pip without pip free that depends on the type of version you have and now we installed python locally this is all we need to do for installation the last piece of setup is here in the config as i said we need to change the want to wbtc so what i'm going to do is i'm going to literally go on interscan and that's how you will do it uh normally you will just search for what wbtc address is so let's type wbtc we're going to get the adders and hopefully we can get the uh checksum the uh address uh but uh that's okay we'll type it here then we'll uh uh let's rename it here and then we'll get the lp component which is gonna be the ave invested wbtc which is called awbtc and uh you need to pick the second one because the first one is from v2 v1 so you want to use avevichu that's the one we're going to be using let's get this address here and then we're going to get the reward token which is gonna be called sdk ave which is the staked ave token which is the one that you can farm currently with liquidity mining incentives on mainnet so i'm gonna copy these others paste it here let me rename these to awb and then i'll call this one sdk ave so the beauty of this setup is that now uh due to us changing these variables these variables are going to be injected automatically in our contract up here in the initializer because we use upgradable contracts and you can see them here in the want config which means that as long as you just customize these variables you can go in the terminal and you can type brownie console to enter an interactive environment basically a simulation a simulated console that forks mainnet and it allows you to interact with the various smart contract apparently made a typo brownie console there we go and uh the contracts are going to be compiled obviously our strategy does very little now but we can still try it out so that you know what you're going to get uh uh as you continue working with this and now you can actually uh deploy all the contracts and store them in a local variable by doing deployed equals to run deploy and what's going to happen is that the deploy script which i'll show you very briefly is going to run with the settings we just made and it's going to deploy what is called a controller and a vault which are basically smart contracts we need to use in order to make deposits and check that the deposit go through and it's also going to deploy your strategy which is the contract that you're going to write it's also going to go on uni swap and swap some of uh i think five ether to a wbtc so that you can actually uh play around with the different tools they're already set up for you you can uh interact with them by just typing deployed and you see that you have all of this stuff so now if i want to check how much funds i have i can type deployed don't want dot balance of a0 because that's going to be the first address which by convention we use as the deployer and you can see that i actually have some wbtc in there which means that i can actually already interact with the contract so just to give another example i could make a deposit in the contract by first of all uh uh approving it so i'll need to do deployed dot uh um want dot approve and i'm gonna approve it uh uh approving the deployed dot vault for let's say 100 satoshi and uh by default that will be sent to the account zero so i don't have to specify it let me see i guess i do so i'll just type from a0 there we go so now i approve the token at this point i can make a deposit by typing deployed dot vault dot deposit open parenthesis 100 from account zero so a0 and now i've uh deposited my uh 100 satoshi into the vault and i can then invest them into the strategy by typing deployed dot vault dot earn which is going to be run again from a0 which for the sake of demo purposes also has um uh multisig permission basically it has um owner permissions so at this point you basically could continue interact with your contracts for the sake of time i'm going to stop here and i'm going to continue writing the strategy as i said in this strategy you're going to be investing wbtc on ave with the goal or farming the rewards and hopefully we have the time to do that as well i'm going to get started by uh first of all uh customizing the name let's just call it wbdc strategy wbtc ave farm start let's check the balance of pool in our case the balance of pool will be the amount of tokens that we deposited in ave so for uh which is represented by a tokens right so in our case we called a tokens the lp component so what i'll do is i'll type ierc20 upgradable of lp component which means that i'm typecasting the address into the erc20 i'm going to check the balance of this address so that's the amount of tokens that we have invested let me make sure it's correct there we go so now we have the balance of pool and that's because when we deposit which i'm gonna go and write next that's where we're gonna invest in ave so for the sake of uh time what you will actually want to do and by the way there's another section so you can check that out but uh you would have to figure out how the landing pool works you would have to get the api etc etc for this um for the purpose of time uh i basically already set up these interfaces here in the interfaces of a folder so that we can immediately use them so you can see that i have a folder called interfaces i have this green file called landing pool island input.sol which means that i can use it by importing it in the solidity smart contract so i'm going to go up here import dot slash interfaces slash ave so there we go which means that we can now use the lending pool if you're not familiar with how it works you would search for the deposit method and basically you will deposit the asset the wbtc for the specified amount on behalf of our contract without a referral code because we don't have one so let's do that i'm going to go in deposit i'll type i landing pool of landing pool which is a variable we still have to define we have to find the address for it and then i'll type dot deposit and the deposit is going to be done for the um want for the specific amount we have received up here and again we're gonna do it on the alpha of this address of the smart contract without any referral code so we don't know what lending pool is we can actually find it on the main documentation forever i'm going to scroll up a little bit you'll find the lending pool here this is the address and i guess i'll just open it and then copy this which is not going to be checksum so we'll we'll get an error message but i'll address it in a second here we'll add an address public constant lp or sorry landing pool it's equal to this address and this is a great time to try to compile our contract because it will actually break because that address is not check sound you can compile your contract by typing brownie compile and i do believe we're going to get a warning there you go and abram is kind enough to give us the checksum version so we can just uh replace it there we go and now we can try to compile again i do believe it will compile we haven't done anything crazy we just made a deposit in the other pool so congratulations if you followed along your wbtc is actually earning two basis point apy now plus 1.2 apy is taking rewards i'm seeing that we are very short for time so i'm gonna uh try to show you that withdrawing the withdrawal all and then i'll just give you an intuition for the rest of the code as uh as you can see it does take a little bit of time in terms of withdrawing all we will just want to withdraw from the landing pool so we can type i landing pool of landing pool dot withdraw and specifically we're going to withdraw want for the amount that is the balance of pull which we already wrote two we're gonna send the tokens to this address and in terms of withdraw sum uh due to uh quirkiness of this code we have to avoid withdrawing too much because otherwise other will revert so we can check that by doing if amount is greater than balance of pool then we're going to set amount to be equal to balance or pool and then uh we're gonna the withdrawal here which we can do by typing basically the same code the islanding pool the withdrawal but instead of balance of pool we're gonna withdraw underscore amount there we go so now we have a way to withdraw and uh the last couple of methods will be harvest and tend for the sake of time i'm gonna stop here and i'll show you what uh the last file you would have to customize is which is the strategy resolver so the strategy resolver basically makes it so that all of the tests that we have down here we have about uh 15 to 20 tests in these various files you can check some of them are examples that show if the configuration is set up other actually check for permissions and uh if you check the harvest flow test you'll see that it's calling a method called set deposit so instead of doing the normal deposit on the vault we have this function that basically will take a snapshot of all balances and all of the contract state before the deposit and after so that we can do a diff to check what the state is and the way to make that work is by using these resolvers so we will start by scrolling here at the bottom line 62 you'll see the uh function called get strategy destinations which allow us to register contracts that we want to check for i'm going to uncomment this and set the a token in this case which we set to the strategy dot lp component and basically that means that we're going to be able to track how the a token works and then if you scroll up you'll see that you have this confirmed harvest and then you have these hooks that all receive the before the after and the params which means that you receive a snapshot before and a snapshot after and the way a snapshot works is that it allows you to fetch again the state and the balances of contracts so what we can do is we can assert that after dot balances of want which is the token we already defined in the contract called a token needs to be less than before the balances of want for a token and i know this is a a little dense but fundamentally by writing this you are adding a check that after a withdrawal after withdrawal in any test we run we're going to check that the balance of it in the the balance of want in a token is less than the balance before and that's because if you check other whenever you invest in other the tokens go to the a token contract which means that uh when you withdraw you expect the a token balance to go down so that's what we just did let's see if i can give another example let's do the example for confirm harvest harvest is the act of reaping the rewards in this case claiming the staked ave and swapping it to wbtc so that we increase the value of the vault so if you check here this commented code you will uncomment it and you would expect this to be true because what what this coding is saying is that before before running harvest you would expect the strategy the performance fee strategies to be greater than zero and that that would be you yeah we expect that you're gonna earn a little bit from your strategy and as such if that's true then we expect that the after balance the balance after the transaction for the strategist address of the want token needs to be greater than the balance before because after harvest you have earned a little bit of wbtc so that's the check you would have to make and you can see that there's basically two types of logics in the resolvers there's the after dot get for name of contract dot name of view methods that allows you to get the state of the contract at the time and then the other thing is the balances so after the balances of the name of the token and the name of the um of the address so that allows you to run all of those tests and it makes it so that if you just type brownie test all of those tests that we already wrote as long as you uh finalize this file will basically verify that all of the code works properly which means that instead of having to you know go and write your own setup from scratch you can actually just write these three files that said uh i see that we have only five minutes so uh we'll if we if we have any questions we will take them now something i want to remind everyone is that we started by looking at the uh badger finance badger starting gmx b1 so this is the template you can use again we have five thousand dollars for the first prize 3 dollars for the second and two thousand dollars for the third one and if you're interested in learning more and basically using all of these lego pieces and making them put them to work you can go in the monorepo you can check the video introduction that goes through what i just showed you in even finer detail it shows you how to interact with the console how to run the test how to run the resolvers it's over 90 minutes and additionally there's also an example project which is the finalized version of what i just showed you here in the workshop that goes through the entirety of it so for two seconds i'll show you how the my strategy will end up looking it will actually end up also swapping uh the staked ave on your new swap v3 and you can see it here with the uh exact input single and then it will swap from ave to wef to wbtc again through units work v3 so that you will earn those rewards so uh in conclusion you basically if you want to try this bounty you not only have a chance to uh work and build a strategy that is uh potentially highly profitable on mainnet but you can also interact with all these money lego such as uniswap chain link and ave which by the way all have prizes at this hackathon uh potentially stacking wins as well do we do we have any questions no questions if you've got a few more things to add you can go for it for the next few minutes amazing yeah so at this point i guess uh i would uh highly recommend that you check the my strategy.sol on the demo example to see how the swapping is done and i'll just i guess i'll just give three alpha so the free alpha is that if you copy literally this code this strategy will earn about 1.2 percent apy which you will say it's not worth using right because uh uh there are other alternatives however if you take the same strategy and you add leveraged farming which means that you borrow and you deposit from ave and then you farm the rewards this same strategy can actually earn from six to eight percent apy which will make it one of the most highly profitable strategies on mainnet for wbtc so uh if that's something that interests you you can probably win the uh if global uh at least our prize for badger dao for the global hackathon and uh not only that you could also adopt that by using a similar strategy on compound and there's also another protocol called inverse of finance that is a fork of compound that you could also uh build a similar strategy in that said we also will reward uh submissions on polygon and uh not only that but we're going to do an office hours and we also have one on one uh we have a currently linked to the 101 sessions if you're interested in that so make sure to follow up with us at the uh sponsor badger discord we're gonna have a calendly link where you can schedule a one-on-one call with me uh for uh anything uh related to being stuck with writing your struts you can see here the uh the discord and we're also going to do an office hours on friday where we cover any stumbling block for people that are writing yield farming strategies with that said uh thank you very much for your time and uh we're good to go thank you alex thank you will um that was great uh super informative thanks everyone for joining and uh we'll see you on discord awesome everybody thanks for coming and yeah don't hesitate to reach out on discord uh we're friendly lots of great community members and team members there to help you out along the way so don't hesitate to reach out and look forward to 
get started here really shortly joined by the redstone team i'll give them a second to give a quick intro about themselves we will be taking questions at the end of this session today so make sure to put all of your questions in the chat below it's a great way to get some face time with team building this project um but also learn about things as they're happening um without further ado i'd love to introduce alex and the redstone team they can probably give themselves a better introduction than i can so i'll give them the floor from here on out uh for any of you just joining us remember post your questions in the chat below and follow up in discord we'll be doing q a right after that um but i'm i'm i'm excited for a great session today guys thanks for joining us thank you so yeah let's introduce ourselves and then go into the redstone and oracle's presentation and workshop my name is alex i'm a software developer at redstone oracles team and yeah i have several years of experience mainly in startup environment and also i also worked in a software house for for some time i have some small background in marketing as well but yeah i have mostly technical education and experience and today i will speak about the redstone and our approach to oracles and maybe jacob you can't serve that and jacob i am the founder of preston uh my background is in computer science mainly the traditional old fashioned boring fintech before the crypto revolution which i joined 2016. so i used to play many roles like that one startup being a blockchain architect in smart contract auditor for open temporary and yeah i was just frustrated with the state of arakas that i couldn't find a really stable solution and that's when we came together and started hacking for a redstone and we also got turkey from our team yeah yeah hello my name is tarek and yeah i'm the newest member of the redstone uh i worked several years on different startups and in different software houses and currently i'm working with alex on oracles in the rest okay great so i can i think we can move to the presentation and i would like to talk a bit more about oracle's in the beginning then we'll describe more deeply uh how redstone oracles work and then we like the majority of time we will spend on looking to the code and seeing how to actually use redstone oracles how to use them in your decentralized applications and yeah so as you probably know oracle's um is as are a service that connects blockchain smart contracts with the data from real world and the main use case for oracles is the pricing data for cryptocurrencies because uh like one of the one of the main use cases also is lending protocols or options or synthetic assets or stable coins all of them actually use oracle data because they need to rely on some pricing data from the real world for being able to evaluate value of collateralized assets because the majority also of these protocols use this collateralize that position model so oracles actually provide the data pricing data mostly but also other kinds of data that can be useful in d5 protocols and if if there is no oracle servers uh everything would be just like all these use cases would be uh impossible so if you if you consider blockchains with smart contract support like ethereum like polygon avalanche or any blockchains with smart contracts as a computer like a decentralized really secure and quite expensive computer but still it's an isolated computer which is not connected to the internet or to the external world and oracles actually serve as this connector to the real world they kind of connect blockchain computers to the internet and yeah and the what we at redstone want to do is actually improve this connection we want to make it faster and make it cheaper and yeah you may come up with a question why why blockchain nodes cannot directly query external apis and fetch the data from real world so there are two reasons for this the first one is the lack of determinism which is very important because uh from its design blockchain smart contracts blockchains are deterministic they they should evaluate the same output state for the same given inputs but if nodes would query data from different external apis from in different times they would definitely receive different values and this would kill this determinism the second reason is the lack of security and different security issues that come with this uh interactions with the real world so these are two reasons that make uh the underlying blockchain protocol um not able to solve this oracle problem not able to provide the data from real world directly to these smart contracts so yeah so there are oracles which actually say solve this problem there are several oracles currently in the market and usually they use two approaches the first one approach the first approach is called two-phase approach or request response approach where if user if a user wants to send a transaction that wants to consume some data real world data they need to send a transaction and inside the transaction inside this interaction the request will be sent to the oracle contract that we'll probably emit some events and some oracle note but listen to this events and reply to these requests reply send by sending another transaction so this approach needs sending two transactions and this approach is quite flexible because this way you can query query any data you want any api but it's unfortunately quite inconvenient because it breaks the execution flow because you need to wait for the second transaction to be processed you need to wait for the response and you uh for blockchains with long block time it makes the ux even worse for users so yeah this approach is flexible but not really convenient also it's kind of inconvenient for developers because they need to handle this replies and request replies uh yeah which makes the work a bit harder and the second approach which is much more convenient is called continuous price fees price price feeds or data feeds which is based on continuously like providing visioning providing data to the smart contracts and saving the data in smart contract storage so that then any time any contract can query this oracle contract and just fetch the latest value and this approach is very useful for very popular very very demanded use cases for example it works for providing enterprise or bitcoin price because this kind of data is is really popular it should it can be used by many different protocols and it makes sense to just provide it once and use it like fetch it from single place all the time but unfortunately it will not work for less popular assets because the the revenue that oracle providers would receive from from data consumers would be much lower than the gas costs that they would pay for just providing the data additionally it's quite expensive to save data in smart contract storage and there is another limitation in terms of update frequency because with this approach you cannot really update data quite frequently otherwise your costs again like grow quite quickly so yeah there are two approaches that are currently in the market and uh we proposed the third approach we which is kind of a combination of the previous two ones but also uh it uses um a pattern similar to meta transactions and it is based on uh it's based on the fact that or data providers do not push data directly to blockchains and they do not need to pay all this huge gas fees but instead they fetch data from like different sources and sign it with their private keys they create signatures uh that can prove that the data is valid and is provided by real trusted data provider uh yeah and then each time a user wants to consume the data and send a transaction that needs the data to do some action to allow something or block something they they can simply query the signed data package with the signature with the timestamp and the actual data and attach it to their transaction and this kind of upgraded transaction can be sent directly to blockchain where a redstone smart contract can extract the data verified signature is valid it's created by the trusted signer verify the timestamp is not too old and if yes then they can pass data to the target defy contract and and process state further and this approach is actually convenient because you can use the latest values you can really update it quite frequently because it's really cheap but it's also very flexible because you can connect to different sources and can and provide huge amounts of different data with low cost because you don't need to pay the the gas costs um so so yeah it i would repeat again how this work how this works from the technical perspective so if a defy user wants to understand the transaction they they prepare their like original transaction and then fetch the data from from some source and encode the data um using some like in in a very efficient data structure which is just essentially array an array of bytes and attach this data like price data or any other kind of data with signature and with timestamp to the transaction called data and then this like transaction with dependent signed data can be sent to the redstone helper contract which extracts the data with the signature verifies the signature verifies the timestamp and if everything is valid then the data is being passed to the define contract and yeah and the place where all these signed messages are being kept we can we call it abstractly as a redstone cache layer which currently consists of several light nodes provided by redstone and also as an additional source by streamer network streamer is a decentralized pop sub network which which which is just a perfect match for this use case because we simply need to relay the data we don't need to store them so it's kind of a decentralized and efficient ram which stores data for a short period of time that can be used by users but they don't need to be stored all the time and another very nice feature that comes with this design with this oracle's design is that oracles that work this way are cross-chained by by definition because the this cache layer can be used by any users and the this upgraded transactions can be sent to any target blockchains so users on ethereum or avalanche or polygon can simply developers on these blockchains can simply integrate redstone right away using like current data providers um and the very important topic about costs we put much effort for implementation the this signature verification and extraction uh part and it's implemented mostly in uh solidity assembly or yule which actually allows us to to have this verification even cheaper than fetching data from external contracts like it's done in other oracles so the data access cost is it is a bit even cheaper than in other oracles but the most cool part the coolest part is actually in the data storage cost because thanks to the lack of pushing data all the time to blockchains we don't need to pay the data storage costs in blockchain and thanks to this it's just really much much cheaper we use rif as a kind of backup storage but it's still very very cheap option comparing to storing data in blockchains because blockchains just were not designed to store large sets of data um yeah and now i will show you a little bit uh like what kind of data we already provide and how to use the redstone data in your decentralized applications and your smart contracts so if you go to app.redstone.finance you can see this application that the data that we currently are able to provide with the much lower costs comparing to other oracles we provide more than one thousand assets including crypto but also stocks currencies and some ecosystem related tokens for example for avalanche or for r-weave we also provide commodities and etfs grains yeah and lately we added the feature with providing data from even custom urls requested by developers so as i've said we fetch data from more than 60 sources if you go for example to to the other price and select the redstone provider you can see that the data has been fetched from 40 sources and we simply get the median value to have this like the most fair value of the enterprise and the most stable to be able to work correctly even if few sources are manipulated or compromised then still the value will make sense and this amount the number of sources makes the value more more secure more more fair uh so yeah you can also go to data feeds and see the data fees that are currently available we also have a production data feed which is used by a delta prime application running on avalanche mainnet but we also have several like demo data feeds that can be used on hackathon with different purposes for example a main redstone data feed that contains almost all the feeds or stocks data feed with the majority of stocks and commodities and as i've said we recently added a custom urls data feed which actually contains data from selected urls given by users you can also set up your or your own data feed go into this link custom urls it will open another application where you can see the registered data feeds with different urls so we can go back to the to the data tab and yeah as you can see like data is being provided for for a bit more than one day i guess and it fetches data from from this url and then extracts the number value using this jsonpath jsonpath is a language which describes transformation from json to some json or other value for example a number so yeah you can uh you can also request your own data feed given with with the given url uh so let's let's try to do this now uh to do this you should click this create new provide some url and then provide some jsonpath but let's click evaluate to get the response from this url like liferesponse and see what kind of data we can query uh using this jsonpath uh language it's you it always starts with the dollar sign and then dot then you can select row and as you can see we have now the value of this row property and dot eth dot usd and for example let's we can add the feed with low hour value and you can also add some comments here or and then simply click subscribe uh you will not be able to subscribe to the same like to the url with jsonpub that are already subscribed and yeah as you can see it's pending and it should be added in a few seconds i think so if we refresh the page yeah it's added and now you can use this data using this identifier you can go here again use this identifier in your smart contract and use the data and now let me show how to actually how to actually use the data in your smart contracts and in your applications so as a use case with the redstone with oracle's data we wanted to create a very simple but also useful example which is a marketplace for nfts but with an additional feature that it allows to set stable prices which means that for example if we uh operate on ethereum and have ether as a base asset we want to give users an option to post sell orders with their nfts in dollars but the actual value would be paid in in adders but the value paid will always be equal to this amount of dollars so for being able to do this you actually need the other price so in this case we have three smart contracts the first one is very simple it's essentially just an nft contract uh with the sequential id assignment for tokens but nothing interesting here it's it doesn't use oracles we have also marketplace contract which like this contract also doesn't use oracle's but it's very very simple implementation of marketplace contract for nfts actually the main two functions are post cell order which allows to post some order and the second why which is quite important is the buy function and it allows to buy the nft for given order id and in this implementation this function uses internal function get price from order which in this basic implementation of marketplace simply return the order price so this contract would implement the marketplace without this stable price feature it's just a price in adders or price in avex if you deployed an avalanche blockchain but the the whole magic happens in the third contract which is called stable marketplace which extends the marketplace contract and overrides this get price from order function in the way that it calculates the expected amount of um of base assets provided to pay to pay for the nft to pay for the nft in like given usd amount so as you can see here we use avex as a base asset and also all the prices provided by redstone all the values provided by redstone are multiplied by 100 million for being able to provide integers um yeah and we use here this magic function called get price from msg which actually does the whole magic under the hood it extracts the data from the transaction called data extracts the signature the timestamp the value and then also verifies the signature and you also can specify like who you trust you can specify designer who is allowed to sign the data packages and here we specify the redstone main signer you can also go to this github link and like see more signers data and addresses that can be used in the contracts you can also run your own mode and we are very open for running all nodes and we're like in the process of decentralization the whole solution because currently the majority of nodes is operated by redstone team but some partners are starting running their own nodes and it's um this is our plan to to have more nodes and more decentralized system and also you can override the logic for timestamp validation uh here we just simply return true for test purposes because there are some issues with hard hat tests but the default implementation of this function is just allowing the time window within three minutes which means that time styles that are older than three minutes before three minutes ago are not allowed and will not will throw an error yeah so this is the first part that is that should be done for being able to integrate redstone uh like the slide contract update but there is also the second part um which is updating your javascript interface because as i've said you need to do this this magic of fetching data from the centralized cache layer attaching this to transaction call data and we have implemented a very convenient tool which makes it uh kind of automatically the tool is called redstone evm connector and it exposes this rubber builder class which can be which actually this three lines these three lines is everything you need to do for being able to send transactions with redstone data here you can specify the the contract the headers.js contract objects object you can also specif you should also specify the data feed that you want to use uh so here is the redstone data feed and you can optionally specify the asset that you want to attach to the transaction call data yeah and that's essentially it after wrapping this contract you will you will receive another other js contract instance but with this additional logic that when you call any function on this contract for example this get price function it will under the hood fetch the data from uh decentralized cache layer from any given sources for given data feed and will automatically serialize them into this bytes array and attached to the transaction so i can show you in practice how it works because i have implemented a very simple ui for this marketplace app yeah you can go to the stable marketplace redstone finance and let me focus on the core part that actually uses the redstone oracles so actually redstone oracles are used only in by function here so if we click clear if we click buy for nfts under the hood as i've said there are two requests first to for two different sources for this trusted signed data packages if we see more details about the response we can see that there is light signature which is a cryptographic signature created by the provider there are there is array of values with identifier with value and there is also a timestamp which is quite important and as you see the metamask asks us to sign some transaction and if we go to the hex we can see that the end of this transaction like f41c is the same as the end of the signature that's because as i said the data has been attached to this transaction called data so we can simply sign it and send and everything will happen again as i've said the data will be extracted the signature will be extracted and verified uh yeah and that's basically how it works and how it can be used in your app as i've said we recently added a new feature with this custom urls i've already showed you how to set up your own custom url with this custom json path but let me quickly show how to use it in contracts as well uh so here we have a very similar contract to this stable price marketplace we have just a sample function that shows how that the value can be fetched from the uh from redstone oracles uh also we use getprice from msg and provide this identifier for this data yeah i think in this case it's enterprise yeah yeah we can also go to this link and that i shot before and see yeah it's just like data from this url and you can go to the custom urls and manifest updater at the transcended finance and see that this is zero x zero three one f and e t in the end yeah so this is this symbol that actually corresponds to this url and this json part and yeah this is this is a very similar contract to the one that i showed before it actually allows to receive data from two signers because we have two independent nodes that provide data from custom urls requested by users but in the javascript code i will show you example of test here hearth hot test but actually again we have this example contract which is the adders contract object we wrap it here using this rubber builder from redstone evm connector we specify the redstone custom urls demo data feed and we also specify this asset with the same asset uh like here if we don't specify the asset then all the assets from this data feed will be passed to the transaction but usually it's not needed so it's better to specify just to also decrease the gas cost yeah we can you can run this test and it would simply output the value received from oracle from this url and from this json path yeah i think that's that's it and we'll be happy to answer your questions if you have some but just to to repeat you can see everything like all the information at redstone.finance this is our official web page describes uh oracles and also there is a button to these abdo threads on that finance page we with all the required informations to start using our oracles you can also reach out to us on discord on twitter better on discord we are quite active there yeah and i think that's it thank you right on well i want to i want to thank alex and the rest of the team here at redstone for an incredible presentation uh as he mentioned if there are any last questions we'd love to get to them right now um feel free to post them in the chat right now or uh feel free to come off and mute and tell us tell us your question and and if not i highly recommend following up in discord where all the magic happens throughout this event they're going to be highly receptive to questions and they would love to hang out with you guys meet you and learn more about your projects throughout the rest of the hackathon i think if there are no more questions we can probably end the session here um but thanks again to everybody who came out today thanks for your time this afternoon and thanks for learning about uh redstone thanks to the redstone team for for your time it's always exciting having new teams here and i know that our hackers learned a lot from you guys over the past 30 minutes so i really appreciate that glad to have you thank you very much for inviting us it was a great pleasure to speak here thank you right now and good luck everybody we're gonna be closing the session here but uh have fun building and don't forget to reach out with questions in discord 
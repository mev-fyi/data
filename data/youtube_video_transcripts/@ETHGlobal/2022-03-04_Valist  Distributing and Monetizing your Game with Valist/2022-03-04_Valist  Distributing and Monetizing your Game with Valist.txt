uh we actually came out of a hackafest 2020 hackathon uh two years ago so it's been a really cool full circle coming back and sponsoring a neat global hackathon uh just feels that like perfect full circle uh but yeah we're super pumped um i guess to tell a little bit about that story uh we did come out of hakka fest 2020 um and then consensus protocol labs noticed us uh requested us to apply to their tachyon accelerator um and then we went through that uh and that was amazing uh it was like a startup bootcamp it was amazing and uh you know after that we raised a pre-seed round uh hired an engineer uh and then spent the last year solving a bunch of engineering problems around webthrough native software distribution so now we're here uh we're super excited to to kind of be uh you know the web3 native platform for these games and applications that are being published um so yeah well thank you thank you again it's it's always great to have uh former hackathon participants come back and and and join us for these events it's kind of like the the perfect life cycle right there so we're stoked to have you uh we will be taking questions throughout this session if you guys are interested if you have any questions ask now it's a great opportunity to do that um you're gonna be building with some of the stuff that alex working on uh that valus brings to us uh for this event so highly recommend linking up with him in discord afterwards and continuing that conversation um he'll probably drop some details in the chat or you know uh just just follow up with them it's it's a great way it's a great way to keep it moving but without further ado the floor is all yours my man all right thanks luke appreciate it well i will just get started uh by sharing my screen real quick uh just the quick format for this i'm just going to go through a little bit of conceptual stuff uh sort of what what through native software distribution is and what you could do with the values platform um and then at the end i'm going to show a little demo of publishing a unity game and token gating it with our software license nfts um and yeah i'll be i'll be happy to take questions in the chat i'll be paying attention to the chat so if there's anything that comes up that you're curious about definitely feel free to drop it in there but otherwise let's get started so i'm going to share my screen here so valast is web3 native software distribution and that means it's the best way for developers and dows to securely publish fetch auto update and fairly monetized software um and so i'll be going into a little bit what that means but basically the concept is bringing over all of our software to web3 so you know these elements here um pet publishing fetching secure updates dow coordinates uh coordination and software licenses um and why do we need it uh well uh as i mentioned earlier today we're still distributing web 3 over web 2. so you know despite all of the energy we're putting into decentralization uh we're re-centralizing everything kind of at the distribution level by publishing our packages on systems like microsoft azure google cloud github amazon um versal you name it um that's kind of the current bottleneck that we're trying to fix and what can we do now that we're in web 3 well at first the concept is very similar to any other web 2 publishing platform again things like versions publishing fetching um but it's also things like access control both at the team level and at the project level so you know we just port over all the existing functionality from our web 2 counterparts and then once reported over we no longer rely on a single entity for distribution so there's no way for the software to get taken down and we've seen github do that with some security tools uh i actually come from an infosec background myself so i i get personally uh i get personally caught up when uh microsoft makes those types of decisions um and i'm sure everyone here has experienced some form of that um but uh another amazing thing that we could do now is dao's can coordinate software releases together so instead of relying on a single team um like on the ethereum foundation to build and publish geth or any other blockchain node software or really any other web3 tool that we use instead of relying on a centralized team to package it or you know a lot of the times it's a github action running in some ci cd that's the sole packager and distributor we can now multisig this and have multi-sig software releases where now a thousand people from around the world can help build geth submit their version and coordinate based off of a hash there so you know basically decentralizing that process um and allowing you know dallas to actually publish their software directly and then of course uh like awesome things like secure auto update systems so for tools that are relying on ipfs and other smart contracts you can easily update that software so you can imagine in the future uh browsers like brave um instead of updating through a centralized entity uh brave has a lot of web3 stuff built in um if brave upstream ballast then it would be able to update itself in a decentralized way like this and you can apply this to all uh browser extensions pretty much any any binary software or or package software and then of course um and this is this is quite relevant for this hackathon you can monetize software directly using software license nfts you could basically create a license that you can then token gate your application or game with and basically sell it as if it was a game in steam only steam takes 30 um whereas with the software licenses you can configure that how you like um and we have awesome features coming soon like erc20 payment support and uh royalties and things like that but uh how does it work well the high level is basically uh you publish a release to ipfs this then gets backed up across a bunch of ipfs nodes on different storage networks uh sorry pinning services and then it's archived onto filecoin so pretty much anything you distribute through ballast is going to be redundantly backed up uh all over the world and then uh valas takes the sids from the artifacts that you just uploaded and tags them as a version inside of a smart contract and then this smart contract is on polygon and manages your team access control your project level access control as well as immutable versions for each one so um this then makes the client aware of all the access control lists and releases and then if you fast forward this to you can have awesome things like version front ends to where now you can go to uh valles slash uniswap slash frontend um and you can pick a version of the front end that you'd like um and it's all distributed that way and really it's a set of tools that glue these protocols together to make web3 developers lives easier that's you and so how do i use it uh well basically for this hackathon the primary methods are the web dashboard and the typescript sdk um we also have a graphql api um a lot of that stuff is abstracted away in both of these tools um and uh yeah you can you can use it all kinds of different ways where do you find it you can check it out at valles.io of course come hang out in our discord we'd love to have you and then the docks are always a wonderful place to look so i'm going to start there and just kind of go a high level uh tour so to speak of how you're going to navigate around and sort of the the key concepts to definitely read up on uh if you're curious uh but of course getting started page you know you could go straight into publishing a release if you like but you know if you want to learn more about web3 native software distribution uh the big picture of it uh again kind of how it works as well as the impact of web 3 data software distribution you can go ahead and check that out here we're always thinking about awesome different mechanisms for things like public goods funding as well proof of contribution nfts are coming soon as well uh but right now we have software license nfts so definitely uh we'd love to to hear your ideas for what you think web3native software distribution should look like and some of the use cases that you know you've run into in distributing your web3 software so core concepts you could check out how teams work really teams are very similar to any organization account on things like github or versal it's it's simply a higher level username that you can then put team admins on and projects under the team uh and then anyone who's a team admin can manage all projects um and are effectively admin accounts so for larger teams we definitely recommend making this a multi-sig system so you can deploy a gnosis safe onto polygon and then set that as uh the only member in a team um and make it to where now that team is controlled by a multi-sig for some of the more security critical actions a team also does reference a beneficiary address so um i'll get to this in a second when i go through the web app but basically you're going to take an address for all payments in the system so either donations or um the revenue generated from a software license nft will go to this beneficiary address and you could also do things like free licenses that allow you to allow people to donate or if you're an open source developer then you can create a special license that gets people extra support things like that and then projects super simple concept really a project is just a name space for all of the versions for that project and it also contains a separate set of project publishers so the members inside of a project only have permission to publish inside of that project so very similar between um you know a team and a project and uh to answer the question in the chat mar wen aziz um sorry if i butchered the name uh can the beneficiary also be a multi-sig absolutely um pretty much any address in the system can be a multi-sig if you like um it's also really easy to rotate keys if a key does get compromised if you didn't have multi-sig um but yeah all the access control is super flexible you could plug in your own multi-sig uh the only one we don't support yet is argent but when we deploy to zk sync we intend for arjun to work as well but uh gnosis safe on polygon is a is a good bet and then releases are just what they sound like they're just a packaged up application um it could be any binary executable it can be a web application um it could be a unity game which i will show off here in a little bit uh but it's really just any arbitrary piece of software that you give a version um the release points to the ipfs hash and so you can fetch it there and then we're adding more support for different storage networks as well but um yeah our defaults are ipfs and polygon um just as a reference and then for software licenses i kind of talked about this a little bit but it's a erc 1155 token and you can use our front end to easily set a price um and uh our front end allows you to easily purchase these nfts um basically as if you were buying a game from steam uh is the is the concept here um and so yeah it's 1155 compatible and then once you've minted the uh the license our friend allows people to purchase them and it checks the balance before showing them the download link and then for the extra security um you want to token gate from inside of your application so basically the flow here is once you've created the software license nft you need to embed the license check inside of your app and really all that is is making sure that the user has a balance of the software license nft so really you're just checking okay balance of uh the the wallet address make sure it's greater than zero or however you want to set it up and then unlock the rest of the game or application from there and we recommend several different uh ways to do that for node.js and web applications you could use our valid sdk to check these balances um and uh you could also use mintgate our friends at mintgate build awesome things and you can you can token gate with them uh for unity uh we actually have a lot of options here um chain safe gaming is is a great option our friends there um do great things we also have an example script that i will go over a little bit soon um that you can use kind of as a boilerplate for your game this is always going to be different depending on how you actually implement your game but we provide a sample script for token gating with um the valis uh software licenses um so and then you could also use the morales unity sdk uh or really any unity sdk that can query polygon balances um so yeah uh let's just get right into the actual uh deployment so um i'm going to i have this test key here um with the test organization um called acmeco that i'll be publishing too and i have a few uh example games published here um to jump into this one this is what it looks like when you've uploaded a game that you set a price to um and you don't have it in your wallet so um the front end knows that i haven't purchased this game and then offers me the ability to pursue purchase the license i set it to super cheap just as an example but you could set this to any amount in matic that you'd like um and again very soon we're gonna have erc20 payments there um and then when you do have a game uh it'll just show the download link and then you go ahead and launch it and it will launch the unity game there and so uh i will show you how to actually set this up uh in a in an easy way um really all you have to do um once you create a team i won't go through the team creation process but basically you would create an example team and you would fill in your website um you would fill in a description and then you would fill in your beneficiary address for that team um and again to answer the question in the chat uh this could be a multi-sig address and then you put a list of members that are admins of this um of this team so um i already have a team created so i'm not going to do that i will create a project instead under this team and i'm going to call this token gated unity 4 done this demo good bits so that's what happens but uh yeah let's give it a short description uh token gated unity game and an example token gated unity game sold through the ballast platform and then you could give a project a list of members that are separate from the team admins we recommend that you do use a different set of project keys from team admin keys for security reasons um so you know just in case the project key gets compromised it can only affect that project and again a project key can also be a multi-sig so it doesn't have to just be a multi-stick on the team level it can also be at the project level so i'm going to go ahead and create this actually i'll set a project image and we'll do something cool here um and create a project uh what that'll do is trigger a meta transaction so this is on polygon mainnet and uh valis is paying for all the gas for all of these features everything except for the actual purchasing of a game uh that you got to do yourself but everything else as far as you know creating a team a project and releases all are meta transaction powered so you could get started using this by just generating a fresh key um and getting started with it so our concept there is trying to make ethereum keys more like ssh keys in the sense that right now your ssh key is kind of your developer identity um on github and you know other places and you know where developers are pretty used to that flow um whereas now uh you could build up a reputation on your wallet and you can view all of the projects that you published from there as well as you know proof of contribution and any software licenses that you purchased so that transaction just mined on the polygon main net um and we'll give it a second for the sub graph to index things sometimes it takes a second but uh yeah when we created that project i hit refresh and now we have token gated unity 4. um and we go in here and we see we don't have any versions yet um and we don't have a license for this game it's it's currently sorry siri uh yeah but anyway so right now this game is just a regular project um there's no uh you know license associated with it um i've created these other licenses but they're for other games so i'm gonna go and create a license for this game now um and set a certain price for it i'll use the same image just so that um you know it's a little more consistent and then we'll call this um i was using gems so far we'll do sapphire edition for this license um and then i'll set this super cheap just for example purposes um but yeah and this is a the sapphire edition of the unity game and then i go ahead and create the license it triggers another meta transaction um and then you know we'll wait for that to mine uh and yes yeah the siri is always uh always chiming in she's always got opinions for things so but uh we welcome all opinions here human and ai so [Laughter] but uh anyway so we created this license uh and while we're waiting for it um i will check out the unity example that we have now just quick caveat i am not a game developer i learned just enough to be dangerous for this demo um thankfully our lead software engineer keenan actually is a game developer at by night uh which is incredible combo um but uh he helped me put this together uh so apologies if i'm uh butchering all the game developer stuff but um this is an example uh script using the chainsafe sdk to query the balances of this license contract so um the way this works is and and you could kind of configure this how you'd like you'll implement this um as you'd want to but the uh contract address um that that you could stay and then you change the token id uh you could change the salt that you want to use but the general flow is that um when you click this button here it triggers a meta mask prompt to sign a message and then it takes the recovered signature it recovers the address from it and then it uses that to query the balance of the token and then it logs whether or not you actually have a token balance so um you as a game developer uh when you connect this up uh all you really have to do is check the balance and then if the balance is greater than zero you can move on to the next screen um so you can do this however you like in a loading screen or a menu um really it's up to the way that your game mechanics work so um all you have to do here is i drag and drop this script into this object and then now you can actually change the attributes and so what we would do here is go to the view the licenses i'll give it a quick refresh make sure that the sub graph updates and we see the sapphire edition of the of the license so i could copy that token id it's in my clipboard now and then i could program this button to check for that token id once you hit save you can go ahead and build it for reference i'm using webgl that's the easiest way to get a game to talk to metamask um but uh you know if you're using morales sdk i don't think you need to do that but uh and then if you're not compiling webgl um it'll it'll pop open in the browser uh but you know this is a good flow um really the only settings that you need to really care about are ipfs gateways don't support some of the compression that unity expects so checking decompression fallback um or even disabling the compression format uh will help there but then you just go ahead and hit build i'm not going to do this now because it'll totally wreck my computer um it's actually bizarre it'll it'll make crazy pops in the microphone and everything so i won't do that i will show another license licensed game that i already put together in the unity 3 example but the idea being is that once you get your license id you could program into your game you could go ahead and build and then when you go to publish you would pick the sapphire edition license in the front end you give this a version this would be the first release and then from here you would be able to build uh your game files um you can upload it there and then you know it'll upload the whole game bundle um it'll create a transaction and link it to that license this won't this one's connected to the wrong license so it won't work but just for an example this is how you would actually publish your game you literally just drag and drop the unity exported files into the drag and dropper and it will publish everything for you um you could also drag and drop next js applications any static websites or any binaries um really you name it it's it's arbitrary and then the ballast front end and sdk just try to be clever about what kind of file it is um and yeah so let me just go ahead and purchase a license that uh we've already set up and built so that we don't have to go through that whole process um by the way throughout this i have learned game developers are a totally different breed i have i have a newfound respect for uh for these things uh fascinating stuff so anyway i go and uh purchase a license and it pulls up the value uh that i have i go ahead and click confirm and then we can watch this this is a normal transaction not a meta transaction since i actually have to pay for this game but uh we'll wait for this transaction to go through um and then this will actually mint the token into my balance um and you could actually check this out on websites like openc and any other nft gallery that supports polygon so you see the software license shows up here and then the one i just minted will also show up here in a bit um but uh you know of course you got to wait for things to index and you can kind of see okay i've minted a software license token um to this wallet and then um after that it'll detect that i have this license and then i can actually go and launch the game so this is my super simple attempt at a unity game my first ever unity project uh but uh yeah this again this is built with the chain safe sdk so when i go and click connect wallet it'll switch me to the main net because that's how chain safes works and i got this weird unity issue i see every once in a while um it's a weird unity thing but anyway i connect my wallets um it prompts for a message signature and then i go ahead and sign it and then it's hard to see here but in the log it says a balance of one here and the success means that i actually have the token in my wallet and if i was actually any good at game development then i would make the screen change and uh go over to the next screen now that i have the balance but um as you can kind of see the end to end flow works there very similar to something like steam to where you just go ahead and drag your your game assets in the license check happens inside of your game to keep things really secure um so even though the front end is also gating the download link um even if you grab the ipfs hash manually and downloaded it the game still won't launch without the nft so that's kind of a key piece there um but then the front end will also be intelligent about whether or not the user needs to purchase that nft so um again you don't have to do this to qualify for the prizes that we're giving away um this is just to qualify for our track one prize um so any game that's monetized through this system uh you could also use the licenses as an in-app purchase if you like um but uh yeah to qualify for the other prizes really all you have to do is drag and drop your game or application hit publish and then you qualify so there's definitely lots of different ways lots of opportunities there um and yeah the that's about it um that should be the whole process um we're here we're standing by for if you need help like i said our lead software engineer is actually a game developer so uh we could absolutely help with these integrations um whether using chain save for uh morales um their teams are also great and and are always gonna be happy to help as well um and uh yeah i'll just uh kind of catch up in the chat here uh pretty sure you are now professional game developer since you made it and so yeah yeah yeah definitely that's a new stripe on the belt for sure yeah thank you um and uh clark thank you and uh when marwan aziz uh can we deploy to mumbai actually yes um this is on polygon mainnet right now but um we actually do have a mumbai deployment if you want to use that one to test things out i could definitely send you the link for that um we actually just removed that link so i'll add that back um for you and then you'll be able to go to mumbai.valist.io to uh check out the test net version um you'll have to you know kind of make sure your meta mask is configured properly but the meta transactions all work there um everything still should work the same exact way it just won't show up on openc or anything like that um so a little less convenient but uh yeah absolutely and then pablo is it in your future plan to simply import from github absolutely so right now uh we've kind of focused on everything in the software development life cycle after the source control onward um but with our proof of contribution nfts uh we're gonna be having clever ways to scan the dependencies and make uh and contributors uh to give them that proof um as well as importing build scripts and making it super easy to basically plug this in to either your github repo your radical repo or git lab any other git repository we absolutely are going to have lots of uh deep integrations with with source control yeah but uh you can kind of think of this as like the hub part of github so all the features that github has around ci cd software releases um access control all those things um are what we're focusing on solving uh while our friends at places like radical are solving for uh source control and then we come together and the entire process is then web3native so long way of saying absolutely yes all right so it looks like we are right at time so um again i'll be in the discord um i am i'm gonna post my my hashtag here um definitely uh check us out and uh we're happy to help for for anyone uh looking for it right on thank you again alec that was great excellent session thanks to everyone who joined us uh as he said follow up in discord that's where all the magic is going to happen that's where all the great conversations take place and that's we're going to learn everything that you didn't already learn here which is i guess nothing you learned everything you need to know here he ran you through everything right like that thanks excellent uh presentation yeah yeah yeah one can only hope we're gonna be closing the room here uh we'll see you guys in a short bit for uh uh one more workshop tonight um but good luck with your projects looking forward to seeing what everyone builds and thanks again to alec and everyone else thanks luke thanks everyone and best of luck and have fun 
people are piling in so i'm just admitting everybody uh welcome everyone we're here um at the east global hackathon and we have santiago palladino from uh from open zeppelin um he's gonna give a talk on secure contract development and operations um and it's a half hour talk there be opportunities to ask questions in the chat there could be pause in the middle of the presentation to maybe field some questions and then maybe some questions at the end so feel free to just put them into the zoom chat here and with that i will hand it off to santiago and uh we can start awesome thank you so much andrew uh can you confirm me if you can see my screen just in case thank you so much okay welcome everybody uh santa was saying my name is santiago palladino i work at open zaplin and today we'll be doing an overview of secure development of operations some questions at the end okay uh so a couple of words about open supplying first open sapling is a security company focused on the blockchain space we work we have worked with some of the top projects in in the space and our offering is we provide audit services for smart contacts and protocols but we also provide an open source and free to use smart contract library which we'll be reviewing during this talk and we also uh we also built defender which is a platform for automation and the secure development of contracts so today we'll be focusing on both contracts and defender for development and operations and we'll be doing a very brief overview of the two and showing how you can quickly build some some interesting applications combining the two of them so so that this is not just a token here today we'll we'll be using we'll be focusing on this case study what we'll be doing is whenever a user purchases a particular token on unisop just to pick fbx we'll be minting an nft for them a collectible so think of it as a way of rewarding users for buying a particular erc20 what we'll be doing is we'll be monitoring all activity on a decks whenever leaves a purchase will mean a collectible token in response to that and for doing this we'll be combining both open supplement contracts and defender and this is just the case tabby so we can we can pick one example for guiding all the all the different components that we'll be viewing today okay so this is more or less what our system will look like for what we want to build today uh we'll be keeping an eye on the the uni subcontract that rates uni and if we'll be using uni as the year c20 that we want to monitor we'll be looking at all swap events and we'll in response to that we'll prepare a transaction that will mint an nft an ft instance for the original buyer so let's start with with the nft part let's start with actually building the collectible contract and for that we'll be using open supplement contracts contracts is a set of secure building blocks for solidity and it can be a little bit daunting in terms of how much it has we have been building open supplement contracts for over five years now um there's there are really a lot of of contracts available for you to pick from so to try to give a brief overview of what you can find here you can find implementations of the most common token standards you can you can use access control primitives such as ownable or broad-based access control or time logs for additional security which we'll be using access control in a minute we also have a support for different proxy flavors so you can so you can rely you can build up readability into your system which can be particularly useful in the context of a hackathon where you need to be modifying your code and updating on a very very frequent basis we also have support for meta transactions some utilities for matching signatures for interface checking security some security building blocks such as emergency polls or reentrancy guards and we recently added support for on-chain governance so you can have a contract where your where your users who hold the particular year c20 can vote on whether a particular proposal should be executed or not in order to make it easy to get started with open sampling contracts uh you can use the opensub link wizard which is what we're going to do today in order to set up the nft so if you just head on to wizard.opensupplylink.com uh you'll have a easy-to-use ui where you can choose between different base contracts such as erc20 71 or m55 or a governance contract in case you want to build some sort of functioning voting for your system for today we'll just focus on your design 21 and the idea is that you can use the wizard to tune fine tune how you want your collectible to work so for instance this would be a defender demo token or let's actually go with if online and you can inject any kind of features you want for instance i want my nft to be mintable and they want the contact itself to manage the ids so you don't have to worry about that outside the contract you can also inject emergency posts for instance and you can choose how you want to manage access control by default contracts is ownable which means that there is a single address that has full control over all privileged or overall privileged actions on the contract so there is a single address that can choose to pause or to mint or when we turn on upgradability to upgrade the contracts but you can also go with roles that gives you different roles within the contract so you can more you can finally control which addresses have rights to do what so for example we'll want to give the minter roll to a hot wallet that we're going to set up for meeting new instances but we'll want to keep the boxer role more tightly controlled same goes for upgradability we'll use uh we'll turn on appropriate ability for a contract so this means that a new upgrade the role will get injected and this will be the average set of addresses that have the right to upgrade this contract into a different implementation so if you see the contract code has grown a little bit but the idea is that you can use this to get started and this is a fully functioning erc 721 with all the features that we have selected it is that once you're ready to to use this you can either open this on remix to start working or just copy this to your clipboard and download it into a hard hat or traffic project and start working right away now given that we have selected this contract to be upgradable it means that we need to deploy it in a certain way um so in order to manage agreeable contracts we have a set of plugins uh here we'll be showing just the hard hat one but the results there are also truffle plugins if you prefer and these plugins give you primitives for both deploying and upgrading agreeable contracts so in the case of hard hat is super straightforward same goes for truffle if you are using e3s the only thing you need to do is get an instance of the contract of the contract factory the contract you want to deploy and just use the deploy proxy action point to that factory and the plugin will take care of setting everything up for you everything means creating an implementation contract a proxy contract that points to it and then whenever you need to make a change in the code you just get a contract factory for the new implementation you want to work with and run an upgrade proxy action using the address of the proxy you had previously deployed and here again the plan will take care of running all necessary validations deploy the implementation contract and updating the proxy to point to the new code so you can rely on this appropriate proxy primitive to keep updating the code of your contract as soon as you need while you're developing and this retains the same address and the same state and balance of the original contract so again this allows you to move faster when you are when you're deploying the system also in a long-term devol deployment it also lets you to fix bugs or add new features iteratively so to wrap up how a development setup may look like you you can just install open sampling contracts remember to install contacts upgradeable if you're going to use upgradable contracts these have a slight difference with the with the vanilla ones so they are they can be used in appropriate ability you can head on to wizard.opensupplement.com to create um to create the contract that you want to start with or a set of contracts such as tokens or governance contracts then download the code generated by the in a hard hat or traffic project and using the upgrade plugins you can deploy your contracts in an upgradable way using the deploy proxy primitive and then using the upgrade to the upgrade command to go to upgrade your contracts to new versions so before we jump into operations uh let me check if we have any questions so far if we can elaborate a bit on the permit function and vulnerabilities when using easy recover that's a very interesting very interesting question let's park it for the end it may take a little bit longer than i would like to to dip down to the deep dive on that one if we don't have time head over to the forum from the pensability.com and we can carry on the discussion there and i'm not saying if we have anything on the qia q a andrew uh don't think we have any questions right no i think that's i think that's it for the moment perfect do we know if there are any questions on the youtube channel by the way no we um i don't it's not open for questions uh perfect everything here makes sense uh can you also elaborate a bit more on upgradeable proxies yes absolutely so uh when you are setting up your contract on the wizard you can choose between two different upgradability patterns transparent and new ups ups is the one that we have developed more recently it's a little bit more lightweight and it also gives you greater flexibility when in terms of deciding who has rights to upgrade your contracts so you'll see that on the ups pattern there is an upgraded role that you you can basically assign any number of addresses to that role and they will have the right to decide what they want to how they want to operate and you also have an authorized upgrade function that you can override and inject whatever logic you want to decide under which conditions an upgrade can go through if you go with transparent the availability logic is not in the implementation contract that you write but it's hard coded on the proxy and there is a single address that's the proxy admin that has the rights to actually make run an upgrade so transparent gives you less flexibility in terms of deciding who and how can upgrade that's all hardcoded on the proxy itself we also have another pattern that's not supported on the on the planes which is the beacon pattern which is particularly useful if you want to upgrade multiple instances of the same contract at the same time on a single transaction still if you want to learn more about upgradability i suggest you go to docs.opensafely.com there is a section specifically dedicated to upgrades where you can get an overview of what planets are available what are the differences between the different proxy patterns and general information on availability okay moving on now that we have our nft contract ready and deployed yes i have deployed an instance before the talk in the interest of time we can move on to the operations part and for that we're going to use defender fedor is a platform for secure operations and automation of smart contracts and we'll be relying on this for all the automation that that's related to maintain new con new instances of our nft contract monitoring the existing monitoring the unison pool and basically wiring everything together so what we're going to do is we'll start by creating a secure hot wallet that we'll be using as a minter basically a wallet that would that will automate and we'll have rights for creating new instances we're going to assign the mentor role to this new wallet and then we'll write a small script for um for actually me running the meeting transactions and finally we're going to add a monitor uh money sentinel monitor on the unislav pool that will keep an eye on all trades that are of interest to us and will trigger the meeting operation so let's jump into defender and get started so we'll begin by creating the the hot wallet that will have the meter rights and that in defender is called a relayer in the sense that it relays transactions that that you request onto the blockchain so this is going to be an online minter and we're going to run this on the ringway network uh by the way we support a bunch of different layer ones and layer two support for for arbitrary is coming up pretty soon so if you want to develop another change besides strictly ethereum you can also do that using this tool so under the hood the relayer is just a private key that's assigned to you and you can use this for sending any transactions to the network the idea is that if you need to set up a custom script that will send transactions on recurring basis you don't need to hardcode your private key on your server or in your scripts you can you can keep that within defender and defender will derive a few matters for you so you can send transactions through it you also get an api key and secrets that you can use for authenticate for authentication whenever you want to send transactions from any of your scripts and you can rotate this api keys and secrets as much as you need and the thing is that besides just keeping your private key secure the relayer will also take care of uh resubmission of any transactions and deciding the best cash price for when you're sending your transaction the idea is that you can send the transaction using the defender relay client package if you're using javascript and sending transactions pretty straightforward the idea is that you can you just choose a speed that you want to attach to your transaction and the layer will take your figure of attaching a nonce signing the transaction choosing the gas price and broadcasting it also resubmitting it to make sure it gets mined it is that you can use the relayer just to say hey want this transaction sent and the relayer takes care of the rest so we have this address that this is online mentor that we'll be using for sending transactions that will take care of minting our nft but in order to do that we need to give a minter right on our contract to this new address so we'll jump onto admin which is an interface for managing contracts the idea is that whenever you need to find your roles even upgrade contracts or run any kind of privilege operations you can use this as a ui for managing your contracts you can just import any contracts you have and start you start interacting with them from here in particular i have already imported the nft contract that we'll be working will be working on today you can create a proposal for different kind of actions that you that you want to run on the con on the contract in this case what we're going to do is we're going to grant the minter role to the if online meeter we have just created and here i'm going to copy the minter roll from the contract you can use this to quickly inspect the contact state this one i have name defender demo not it online and you can choose how you want to execute this transaction uh given that my current metamask address has rights for managing roles i can just send this transaction from my externally owned account but you could also do this from a multi-sig or from a governance contract or even via time lock in case you want to enforce a delay on all actions you execute for the sake of the demo and usually in the context of a hackathon you'll be managing everything from top of externally on the account so that's what we're going to use here and you can just provide some information on the on the action that you are actually running so that other other teammates that jump into this understand what what kind of action is happening here and can even review it if you let's say if you run this through a multicell you can have other team members review the action and use that to decide on whether they want to approve it or not here since i'm the only one with the with the rights to do it it's pretty straightforward but still you can rely on this as a ui for managing administrative actions on your contracts and also for keeping a sort of audit trail on the different actions that you have been running on them okay so now we have a hot wallet with every layer that has minter writes on our contract the next step is to actually automate the meeting process for that we're going to use an autotask you can think of an autodesk as a lambda function as a script that runs within defender so you don't have to you don't have to run your own infrastructure or basically spin up your own servers if you want to do small operations and the idea is that you can upload any code you want and you already own an environment that runs node.js with a bunch of web3 related packages so you can just upload the code here and start using it right away in this case what i have done is i have a small script that creates a new constructing ethers contract instance at the address of the nft i have created it just calls save mint on a recipient address that gets injected we'll see how the recipient gets injected in a second and note that i'm just using regular research.js code here because i'm using the defender relay client ethers integration so it gets this gives me access to a signer that will take care of routing everything via defender relayer that way i just run a script as i would normally do and this will take care of shipping the transaction via the re-layer so i don't have to worry about gas prices nonsense securing the private key that's all taken care by the relay and i can also configure how this auto task is going to operate i can run this via public web hook so you can so you can integrate this with any external systems or even your front end you could set this on a schedule so for instance you could have your script run every 10 minutes every hour however often you need you can also connect it to a relayer so in particular i'm going to connect this to the earth online interview layer i just just created and so the idea is that whenever these whenever you send the transaction from this script it will get routed via the relayer automatically let's set the changes okay so now we have now we have a script that whenever it's executed it's going to use the if online mentor hot wallet that we have created for minting a new instance of an nft to a recipient the last step is to actually wire everything together by monito actually monitoring the unison pull we're interested in and triggering these actions and we're going to do that by creating a defender sentinel sentinels are monitoring agents that operate to a contract would be a contract you own or a contract external to your system such as this case and you can define what you want to monitor what you want to be alerted on and from that you can choose what do you want to happen as an action so for instance i have already already created a sentinel that monitors uh purchases of uni on redux this is monitoring the uni swap univ2 uni uni if pool and it's restricted to look for swap events so the idea is that you when you create a sentinel you define which contract you're monitoring on which network and then you can define conditions on what you want to monitor about that contract you can monitor every single transaction that goes through it or you can narrow the narrow it down to specific events or specific function codes so here i'm interested only on swap events where the amount that went in this is the amount of fifth that was used in the purchase is at least 0.1 if and here you can define any conditions you want on the parameters of the events on the arguments of the function or even on parameters of the transaction itself so for instance i could look only for transactions where gas prices is at least actually at least one gig away you can also use uh use this tool here on the right to um if to enter a specific block and find potential matches for this so you can more easily debug the conditions on your sentinel the idea is that once you have defined which contract you want to monitor and under which conditions you can also edit what you want to happen whenever whenever a transaction like this is picked so what we configure here sending out notifications is an email a discord message we could also configure telegram slack complete attack messages you can basically add several different channels and we're also triggering an autotask this is the other test that we had defined a couple minutes ago and that takes care of minting new instances whenever it's invoked so what we're doing here is we basically have a sentinel that's looking at all swap events from the unison pair it's alerting us via different notification channels but at the end of the day it invokes an auto task that calls the every layer that we had set up that will send the mint transaction to our nft and this relayer has right to actually call this mint method because we use that mean for managing the rules of the nft and actually calling the and allow the relayer to call the min function from it so let's actually test this see if everything is actually working together working together this is usually the most stressing part of a presentation so let's buy 0.15 if worth of uni again this is all required okay let's confirm this up and see what happens so as soon as this transaction gets mined what should happen is that the defender sentinel should pick up the swap event and once it's processed and it verifies that indeed we have the buyer has spent at least 0.18 which is the condition we have defined it should send a notification via email and discord which are the two channels that we have defined it should also invoke the auto task then the auto task in response to that will run whatever code we have defined that will invoke the relayer and the relayer will send the transaction for beating ift so you have an automated workflow here that whenever something happens in this case uni swap your pro you can automatically process that event and trigger any action on that in this case it's sending a transaction to an nft contract but you can embed any code you want here you can reach out for external apis you also have access to a secret vault key value stored and the idea is that you can do all this without having to set up your own infra you can run all of this directly on defender and have defender running everything for you so let's see if this work uh this is the discord i use for testing and yes you can see here that right now yes trust me this is the current time here in buenos aires argentina uh the uni purchases some rick by sentinel was triggered by this particular address and we have the link to the transaction that actually made the purchase here we can see that we traded 0.15 if for uni so if we go back to the other task onto the mint union let's see if we refresh [Music] here we have from a minute to go another task run trigger by sentinel [Music] and here we can see that these are basically the logs that we emit from our data's code the other task received this information from the sentinel so this was the event that was captured on uni swap this was a swap event which with these arguments and from here we can grab the recipient answering the buyer and use them as a recipient sorry it's this one and you can we can use this to know who should be the recipient of the nft and we use the relayer we had set up earlier for minting an empty for data address on this transaction so if we go to ether scan to check out this transaction we can see that indeed we have minted an instance of the defender demo erc721 and this transaction was sent from address c4d 740a which is the relayer that we had created earlier so to wrap up because we have just a couple of minutes left what we did today is we used open supplement tooling for both development of operations in terms of the open development we used open sampling contracts as building blocks we use the uh erc sent 21 implementation along with access control upgradability and a couple of other building blocks and we use the wizard for setting everything up easily and copy it into a hard hat project that we then combine with the printability plugins to deploy the contract in an upgradable way so that way you can modify the code as often as you want and just keep upgrading the contract keeping the same the same address the same balance and the same state now on the operation side we use defender relayer to create a hot wallet and for simplifying the process of sending transactions we use admin for granting writes to that hot wallet to the contract we have deployed we uploaded our logic tool to an auto task which was just a very very short script that grabbed the buyer from a unisoft given a swap event and sent the mint transaction to the nft contract and we use sentinels for monitoring the units of the usa pool and wiring everything together so that's the setup for uh that we built today hope that these building blocks are useful for you and whatever you build as part of it online as a quick reminder we're hiring so if you're excited about any of these tools and you're interested in contributing you know that we have open positions for working on all of them we're also looking for auditors in case you want to get on the security space and that's it remember to jump in on the forum if you want to keep the the conversation going or dogs if you want to dive deeper into any into any of our tools so that's it for the presentation i see that we have a couple questions um andrew i know that we're on time but is it okay if we go over time to go through the q a yeah yeah for sure we can take a few minutes and i'll do it i appreciate it i appreciate it okay so uh it's sentinel equivalent of an api provider like alchemy infura not exactly the sentinel actually relies on alchemy fiora and a couple of other providers but the idea is that instead of using it as a provider for querying the blockchain you define what transactions you're interested in by saying i want to monitor this contract i want to monitor these events or this function calls under these conditions and then you can plug that either to notifications you send via slack or discord or you trigger an autotask which is a script that will do whatever you want instructed to do so think of it as something that's constantly looking at the blockchain and will alert you of whichever transactions you say that are interesting for you at the same time i work with pre-deployed contracts that weren't deploying from the fender ecosystem yes absolutely it can work with any contact at all actually we just use the sentinel for monitoring the uni swap the unison pull and unisoft was not deployed from within defender actually defender does not let you to deploy contracts you can you can deploy contracts either manually as you usually do or using your pwt plugins also can the center work with functions that don't trigger any events excellent question that works on magnets and if i'm not mistaken braxton because we depend on a on a very very specific method that's not available on on our networks let me check it's available on mainnet and main trapstern and kovan that's it so uh if you're a maniatrox and kovan you can choose to monitor specific functions if not you are better off with with events let's see what other questions we have can send out that has been alternative for keepers like gelato network uh yes yes since you can definitely use sentinel autodesk um relayers as a sort of if this then that for the blockchain uh you can totally use for that i understand that gelato fulfills that role as well as for keepers we also have integration with chaining keepers that's something i we didn't cover during this demo but if you want to use chain link keepers you can use defender admin for registering your contract on the changing keepers network and basically monitoring and making sure that the keepers on the network are servicing it the question is whether you want a more hands-on approach where you have full control over the executions and the functions that are being called on your contract but you're using defender which is a centralized system as opposed to relying on a decentralized network such as the keepers network where you incentivize the keepers to call functions on your contract but you don't have direct control of them both approaches are valid for the context of a hackathon i would suggest going with something where you have more direct control but it's entirely up to you okay um not sure if we have any other questions that we want to go through or if the answers were clear enough okay sounds like we're good cool all right santiago thanks thanks a ton that was a awesome presentation so much information in just 30 minutes and uh yeah and everyone remember you can continue these questions in the forum at open zeppelin.com if if you want to follow up on any of this stuff and it'll also be posted on the global youtube this talk if anyone wants to refer back to it should be up in about an hour or two um all right everyone thank you again santiago thank you for having me andrew thanks and good luck everyone with the heck of them bye bye everyone 
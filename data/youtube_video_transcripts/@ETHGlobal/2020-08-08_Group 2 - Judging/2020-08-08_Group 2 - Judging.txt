[Music] all right welcome everybody we see a lot of the hackers uh joining in so uh that's kind of from some of the chat there is a good morning good afternoon and good evening to a lot of you and uh i am kartik one of the co-founders of youth global and today is day one of hackfest judging so uh this is being recorded so a lot of you are going to watch this uh after uh this is uh our combination of the hackathon week long hackathon and we're moving into our first week of day one after the whole week of judging and uh for everybody who's on this uh this webinar i want to congratulate all of you as hackers for making it to here and submitting your project and we're super excited to see what everybody does so as a summary of how the last month has been we've had 470 hackers from 50 countries in 19 different time zones participate in uh in in hacker fest and work towards playing with technologies and uh and ideas in the ethereum and the falcon ecosystem for the past four weeks and uh after all their hard work uh two days ago on thursday night uh we received a lot of submissions for what everybody had done as part of their their hackathon projects and today we're kicking off the first day of seeing what everybody has done and going through the judging process uh with all of our teams so after all that hard work i'm super excited to announce that we've had the support from not only just these sponsors but 132 submissions and this is super exciting because that is a lot of projects from participants from all across the world and we can't wait to see what everybody's done and also share their excitement so i want to congratulate to every team that has submitted a project and everybody who countlessly spent hours or the past four weeks working on understanding and learning about what they can do with the technologies available to them and uh and also for uh this call uh for uh taking out the time and all the time since you're in uh and being here to present what you've done and showing everybody else uh your project as well so before we kick off uh the actual judging process i want to move on to some of the logistics of how this uh this call is going to work uh there's going to be 14 teams that are going to be presenting today to our judges and we'll have four minutes that each team is going to get for their demo and four minutes for a q a and to kind of minimize any technical difficulties we have or maybe we have during the session we've asked every team to pre-record uh their demo and we'll be playing those pre-recorded demos for our judges and then we'll move into a q a session live with those teams uh to ask any questions or clarifications or give any feedback and for everybody who's not familiar with the the structure of this event the rules were fairly straightforward every project you see is a mix of individuals or a team and if somebody was on a team a team could have a maximum of five members in the the criteria for this uh process is simple all code that you're going to see today was written at the hackathon and this is kind of where it's super interesting because we've seen everything that hackers have done and our developers have worked on is a result of the past four weeks of work and the the biggest criteria that qualifies every team to uh to be eligible for any price is that uh they must incorporate the tools and technologies from the protocol labs in the interim ecosystem so you'll see a lot of creative uses of decentralized storage and also smart contracts and we're super excited to see how our teams have matched up those two ecosystems to uh to make something super useful and uh a quick overview of how judging is going to work we are going to have five categories for each team and our judges will be scoring each project on how technical the project is how original the idea is and how practical uh the solution is for everyday use along with how easy it is to use and understand and that kind of falls into how the ui and the ux of of the application is and if it's a developer tool how uh how well done the abstraction is for the developer use case and and for any categories that we've missed or anything that we kind of fail to outline in any of the four categories about we've had a general category called the wow factor that lets us skew and then highlight and do a catch-all for anything that we may have missed and before we move on to the demos i want to emphasize that this is actually not a competition and i want to really focus on that for everybody watching this uh this recording after but then also our judges and our teams the hackers are here to learn we have a lot of beginners who are uh super excited to kind of share what they've learned over the past four weeks in each of these ecosystems so we have a lot of people who understand the falcon ecosystem trying to play with the ethereum slide and vice versa and also everybody who is just super interested in seeing what they can do with uh with web 3 and andy sutras technology so we're super uh mindful of everybody's skills and and time they've kind of given and kind of the stepping stones they need to get to a place where they're comfortable with all these technologies so we want to make sure that everybody's aware of this as well and the judges are here to actually give feedback and actually understand and kind of encourage you to learn more or or try different things and and take this to uh to the next level so you can continue working on it and and just to kind of really nail that down not everybody's trying to become a business um so a lot of the stuff you're seeing is a mix of experimentation creativity and we want these things to be fun so nobody's going to be judged on how the odds of somebody becoming a business is as part of their hack um so with that i want to actually just move right into our first demo so we have all these 14 teams that are going to be coming on today and uh doing the hard job har are three judges uh they'll be here uh for the rest of the call giving feedback and understanding what everybody's done so i want to welcome juan bannet from protocol labs and evan madness and portal lambda from the ethereum foundation and they'll be our judges doing all the hard work today um so uh with that i want to kick off our very first demo for for today and that is team cellplane and uh with that i'll welcome them onto our zoom stage and i'll let them kick off with uh with their demo so team sail plane please uh take it away hey guys just a sec our project for hackfest is named sailplane and it's a collaborative file manager in the browser sail plan makes it easy for users to upload share and collaboratively manage files you can visit the website and there's no need to create an account everything that's happening is peer-to-peer the two primary technologies sailplan uses are ipfs and orbitdb both of these run inside of the browser tab ipfs is used for referencing and transferring data while orbitdb is used to represent a mutable file system and handle concurrent rights when you upload a file or folder to the website it's added to ipfs the output from this is added to a custom orbitdb store representing a mutable file system it exposes methods that allow us to move around files and folders and also calculate cids which we can give to ipfs later to download the data when a user first navigates the website they'll be introduced with a little modal with some information once they're ready to start using the web app they can click on the open drive button this shows them their first drive where they can start uploading files the first drive is a private drive which means every file uploaded is encrypted with a random aes key before being uploaded to ipfs we can preview we can preview images and audio files and we're looking at supporting more file types for previews we're opening up up another tab and we're going to copy the new tabs user id this is a public key that we use for shared secrets and digital signatures we're going to give this key write access on our drive and also read access we're going to copy the drive address and import it into the other browser tab we can see it's syncing and if we take a look at manage users we can see that we're not now a rider on the drive if we navigate to the file explorer for that drive we can see the files have synced and we're able to delete files in the file explorer we can also upload new files we can preview them from the other side in the file explorer we're also able to download files or folders and we can share single files from encrypted drives and we can do this by adding that files random aes key to the url fragment there are some things we weren't able to show so we'll have some links to the site on the last slide these are some future improvements we have in mind for the web app we're also interested in making it easy for users to self-host currently there's no built-in high availability nodes and we're looking at the best way to do that that's the end of our presentation here's a link to the source code and some public sites where the web app is hosted all right that's it awesome we'll move on to our q a so uh our judges any questions or comments for the team very cool i mean what what was the part that you spent the most time on technically probably i'd say like ui and ux was a lot of it and probably encryption for the encrypting files and public key encryption for files and how are you storing like how am i managing the keys right now like if i use those sorry how am i like managing the keys as a user manager is it like i use metamask like what's the oh oh so what what happens is it's all in local storage so it creates a key uh orbit db has an identity uh pub key pair and we're using that for encryption yes it would be kind of per device like if you think if you are in a different browser or something and probably get a different key yeah and we we're we're going to implement exporting keys and importing keys as well so that'll be easy to port over it's really cool by the way thank you on so have you had any limitations or any blockers during the development of the app there's uh there's no streaming um in browser right now so we're kind of limited to the file by file size and i guess also the um the total amount of storage is probably limited to in that uh yeah well we actually found that index db on most browsers actually isn't really limited uh we've been able to store multiple gigabytes of data with no issues and uh from what i've read googling it there's really no straightforward answer but it seems that people have tried all sorts of uh file sizes in chrome at least and had no issues so there's also issues with um safari deleting index to be after not visiting a site after a little bit there's no way to recover keys currently yeah have you considered uh like yeah um we're talking about we haven't implemented it yet but that's something we're interested in how ready do you think is um it is for uh for just broader users to like start playing around with them using it before they're on their own for files that are like under 100 megabytes i'd say it's like pretty damn usable now in fact like actually when we were building that demo video sending it back and forth we couldn't use discord because the file limits so we were just using sail plane we just had a shared folder we were sharing all our stuff through our app it was it actually works pretty well the best kind of dog fooding right there yeah that's right that's right i've thought i've thought about maybe in a month we could do like a more public release but we haven't really talked about it yeah we just wanted to make sure you guys had a pretty good release and it's it's pretty good at this point but i'm sure within a couple weeks we'll be really solid okay so is something about the name of the project how did you come up with stuff uh there's these uh like really high definition videos on youtube of like gliders people flying around in them and stuff and i just like them and there's another name for him is sail plane sail planes amazing all right so that is our time and uh thank you so much and uh in uh volunteering for being the first uh so uh we have a lot more teams to go and uh we'll do is uh move on to our second project in this team uh iman's already on the chat but i'll be playing the video for her and uh we'll then have her join for the q a part so uh let me just kick that off and uh with that we'll move on to our second demo hello this is iman from web3 drive as a problem we are trying to solve is letting the user the ability to upload large files to ipfs and encrypted from client side so in web3 drive user can upload any file from any size download it user can switch any ids file with the id as long as it's not in the current workspace it will be added in order to download it he needs to add the decrypt the encryption key to decrypt the file so this is the key download the file user can export his last five minutes can delete the entire list can import the list again user also can connect to web3 and sync his file data from uh three box sorry so this file is on a three box if i i wanted if i want to import my last files i can sync the file to a three box try fresh my file connect to three box each file has a unique key to incorrect and decorate the file i guess i can see the file which is not syncing uh with uh three books and file which is a sync if i delete it uh in all the file here i it will as long as i i'm connected to the three box it will be removed from the current workspace and from three books nothing here i connected nothing will show and here nothing in the workspace and nothing in the uh three box account and so user can control i have as a full control over his files and can share it with anyone thank you awesome so with that all let's open up the q a yeah it's really cool i'm curious if you can share if there's only one list or you can share you can have multiple lists and share them with different people currently the current implementation is that what you have stored in the workspace it's only one one bucket it's like a packet or one nest also the uh the integration of threebox is a really cool idea um yeah how how technically difficult was that like was it that kind of a straightforward thing or or was it um kind of hard to move from like the local storage buckets world into three bucks it wasn't hard as input the integration with the three box wasn't wasn't hard it was very good in the documentation i was just wondering is to use the thread db and hub the the js hub or using the three box um the only issue i found is that i'm not experienced with redux and react that's takes time for me thank you thank you so just be clear you're using three boxes like the account and and that's it right did i miss anything yeah it's accounting i think like linking it to uh uh legendary pilots sorry maybe okay sounds like i had a rat actually yeah evan if you want to answer that question i don't i don't know for sure it's i think like using the account and and syncing the file list to three box right yes that's what i'm doing i'm just thinking the account and i'm using the private and i'm just incrementing the what will be in this this private file thank you also any any other questions or if not we can continue to our third demo great well thank you so much man i hope i continue to all work on this and uh with that i'd like to uh invite eric to uh showcase ipfs deploy for java introducing ipfs deploy for java i'm eric lao and this is my project submission for hackfest first let's look at the motivation java packages are typically deployed to a centralized repository known as maven central this is the largest centralized package representatory behind npm it requires a formal publishing process and it takes hours before your published package is available naturally a decentralized alternative to this could be useful so i've created some build tools to help with deploying and consuming java packages on ipfs and filecoin this allows for decentralized java package repositories permissionless publishing of your projects and instant deployment results let's take a look let's say you have a java project project a that you want to make available as a package for other developers to use this is the build file for your java project simply add the ipfs deploy plugin into your build file in order to use it now we run the build command to deploy your project to text style you can see the command running in the terminal output where it deploys the project to a textile bucket the bucket url is shown at the end this is the url of your repository simply copy that and you can use it later on now let's look at archiving your repository to filecoin simply run the build command which will archive the desktop bucket to the file point test net you can run another build command to check the status of the archive process after a while you see that the archive is successful and that the deals have been made with falcoin miners on the filecoin testnet we can verify the status of the deals by using a file coin client such as lotus to get the deal state now that your java package is published to ipfs and filecoin through textile let's see how you can use it in the consuming project let's say your project project b has a compile dependency on project a however project a was written by someone else and they've made that available on a textile bucket simply add the url of your textile bucket in the repository section of your build file then you can run your build and you can see that compilation is successful notice in your build lock that the dependency was downloaded from the textile url instead of using textile buckets you can also use fleet buckets through fleeq storage let's see how this works enter the build command to deploy the fleet storage include your fleet bucket name as well as an optional directory name you can see it uploading to the feed bucket and when it completes you can get the url of the repository then in project b which has a dependency on project a paste the free storage url and then you can compile it and compilation is successful another thing that you can do is to use ipfs urls directly in this case this is just an ipfs protocol url and you can use it by adding a build extension in your build file for ipfs url support and you can run the build again and see that it downloads the dependencies directly from the ipfs url now let's talk about how this was made this solution implements a java build plug-in to deploy projects to textile or fleet buckets it achieves textile integration through the textile hub cli fleek integration through the aws sdk for java and filecoin integration through textile to file point archiving as you see in the image below your java build can simply make use of this ipfs deploy plugin to interact with textile or fleeq which then interacts with ipfs and or filecoin the next steps for this project are to add ide extensions for development environments this would allow for a better user experience and to add support for local ipfs nodes this would allow for enterprise use cases for example you could have package repositories on ipfs nodes within company firewalls this build plugin was used to deploy itself onto a fleet repository and you can use it right now in your java projects to decentralize your repositories on ipfs and filecoin thank you for your time that's really cool thanks how are you thinking of the um of the packages uh being managed in the long term like have you thought about versioning and so on like uh certainly with the um with with the fleeq or textile um links and so on that might work because you can publish a new version and so on but wondering if you've been thinking about it yeah so the way it works right now is you can publish multiple versions onto the same repository and it will be the same url then you can just specify the version that you want in in your build but it's all on the same repository it was super neat i don't i don't know if i have any any questions though okay thanks so what java projects have to package so far is there anything that works well or doesn't work as well right so this build plugin was i packaged itself and then deployed it onto fleeq so you can make use of this build plugin by adding the sleek repository which itself was deployed by itself that's awesome um maybe i have a question just i guess in general you did this for maven but what is uh kind of the abstraction here that let's let me let you do this thing for other um projects and other sort of uh dependency solutions yeah so i mean this idea could be used for any sort of dependency and build technologies right now maven is image is one of the major build technologies for java but it can be easily applied to other build technologies for java or other programming languages gotcha awesome so if there are there are no more questions i think we'll move on to our next demo and uh sorry one last question uh can people start using it yeah so it's available right now and it's as i said it's not available on the repository so all you do is you add the repository and the build plugin in your build file and you can start using it very nice great well thanks eric and uh with that we'll move on to our next demo and that is planet flare and i think the team's already here so i'll let them kick off with the video oh looks like we're not getting your audio so i think if you can stop the share and then make sure that uh you press the audio button on zoom uh that'll help us align the audio settings i think we should be good right now we're building a decentralized global cdn you've stopped sharing now so uh you can see the video we have the audio we're building a decentralized global cdn to put things in context let's quickly go over a traditional cdn architecture with the running example of a video streaming platform here the platform hires a cdn such as cloudflare to help globally distribute its content the problem with this architecture is that it's a very close market to act as a cdn you need to own massive data centers around the world as a result pricing power is concentrated to very few cdn providers second the data is not truly globally available for a remote user in a location such as argentina there may not be a data center nearby and that user has to suffer from poor performance instead we present planetflyer which has an open market anyone with a laptop can spin up a planetary node and become a cdn provider we also feature seamless integration where the end user does not require any web3 technology to enjoy this content and then the price is set by an equilibrium between the publishers and providers because publishers need to bid for content distribution it's also truly global because you don't need massive data centers and it's fault tolerant by default it's built on top of ipfs ethereum laptop metamask and textile now let's dive into the architecture over here the video streaming platform submits this bid for content distribution on the contract the content is wrapped in a textile bucket that the con that is shared to providers by the contract meanwhile providers can decide what to post based on their expected reward over time the providers cache this content and serve it to the end users in return the end users submit back proofs of receipt to the provider over time the providers aggregate these proofs and submit it to the publisher via payment channels the publisher verifies these proofs and author and sends the sends the provider an authorization to withdraw money from the contract here we're using planet flarecoin an erc20 token which is going to be used for all of planetfire's transactions to get a better sense of everything and how it all ties together let's dive into a demo in this video we'll walk through a basic end-to-end demonstration of planetflare's capabilities the text document that we're currently showing is going to be used by the publisher and shared across planetflair first using the publisher ui the publisher will upload the file demo.txt to planetflyer this has the effect of creating a new textile bucket and with this bucket a new bounty so let's wait for the file to finish uploading once the publisher has finished uploading the file you'll notice that a new bounty appears in the bounty table this bounty table is initialized with a cost per token of one which means that for each token or each file inside the textile bucket any provider that serves this bucket will achieve one planet flare coin now to verify that a textile bucket was actually created with these contents we'll visit the textile gateway now we'll take the new content id for the file that we just uploaded on planet flare and copy paste it into the skeleton html document that clients will see when they visit a website that's hosted by planet flair in order to alert a provider that they should be the one to help start hosting this bucket we'll also copy the bucket id into their ui now in the console you'll see that we just discovered this bucket and we're ready to start hosting it next we'll mimic the role of a client a client is just a regular user who's trying to access content that's hosted on planetflyer so we'll open the index.html skeleton file and try to load it in a separate window you'll see that the contents of that originally empty html tag just got populated this is because we retrieved the file using the data pfc attribute on that tag as a client we also want to notify the provider from whom we retrieve this content that we just got it and that we should reward them using one of the tokens we originally received from the publisher now we see that the provider has one token which they got for successfully providing a client with one cid finally we present this token to the publisher who verifies that the token was one that they originally provided to a client and now we get paid that's awesome that's really cool that's so great to see like the whole flow working like a publisher uh getting uh actually loading it on a page and then uh uh getting the submitting like the uh results and so on thanks awesome thanks good question are the bounties um uh i didn't see kind of like a like a like an actual contract hitting uh hitting ethereum at that point i know that at the beginning uh um during the hackathon you were kind of talking about posting these bounties on ethereum and that might have been a scalability problem um but here i didn't see you needing to do that um is that just kind of hidden somewhere in the flow or is that uh do you still have that that limitation so the bounties are very much posted on ethereum um we've just hidden it away because um it didn't show up in the minimum ask ui but it's actually happening in a back end um yeah so creating bounties in ethereum but every time you want to get paid that's done via payment channel so that scales really easily but you still can't sort of oh sorry um go ahead go for it so you throw rate limited by um transaction throughput in ethereum and on just uh how many transactions you can put through right so like uh yeah what is it how many transactions can you have in a theorem per year that's like the maximum like have you saturated all of ethereum that's how many files you can how many buckets you can yeah your rate limited on the number of buckets you can put up um you're not rate limited on how much how many times you serve that bucket yeah yeah and you're probably also not very limited on the bucket size right so that's a really good scaling idea because then you you can aggregate a lot of stuff into a bucket that's good did you implement the payment channels did you implement your own did you use something off the shelf um we wrote it ourselves so we just implemented it on the smart contract and then we exposed an endpoint on the publisher side that the provider would call and submit the tokens to and they could increment it and it works in the classic micro transaction way that you'd expect so you can batch a thousand tokens into the payment channel and then only make one call to the chain to withdraw your planet floor coin at the end and uh is this like a full-time project for you going going forward like i get that feeling you're open to it depending on feedback and guidance um being how the adoption is so we're we're very much open to it we haven't made a very hard decision over there just yet gotcha i mean i assume that's partly why you use pfc instead of ether or something like that right yeah fair enough just wanted to just want to make sure awesome questions that's where you're going i asked a bunch of questions so i'm good i really like the product it's really cool this is really cool glad to see some familiar faces on this team um awesome so uh congrats on on this awesome process project i hope you continue working on it and we'll follow up with all teams actually on how you can actually get support for continuing to work on this thing uh whether it's from the falcon ecosystem or the ethereum ecosystem and uh we'll we'll do that after and now with that i want to call brian who will be walking over or talking over his demo which is oh snap so i'll let ryan take it from here everyone so this is a quick demo for osnap so the primary goal here was to create an alternative to using a lamp stamp or a lamp stack but using decentralized technologies to where you can create something like instagram or patreon and deploy it quickly so the main thing is that this is all open source so if you go to github you can see just the basic project where this whole thing was set up and you can create your own clone and deploy it in you know just a few hours really so the idea for this one is to create something like instagram again but we're using ipfs to host the content we use filecoin to pin the content and then for any post that someone submits to this social network we require that each post tips to other posts so you can create something kind of like iota but bootstrapping off of the ethereum smart contract which is available again just on this open source repo so then to run through a quick demo we will connect to either the local or the hosted gateway and then we'll upload media directly into the application to where each media file has its own unique id so just pulling in some media off the hard drive we get a multi-hash and again this is either hosted from our local gateway or through the host gateway then to upload our media to this social network we again just enter the post ids that we want to tip and how much we want to tip each post that we're connecting on this tangle as a minimum requirement you have to give it at least over 10 to the 18th of a tip so then this will post through metamask and we'll wait for that transaction to process it takes just a minute for everything to synchronize wait for it there we go so now our media is on this decentralized social media network and that's basically it so we can pull it up just directly off of ipfs so to host this network there are no hosting fees but everyone who submits content will get paid is that what drove the design decision that every every submission has to tip to others yes yes so anytime you put content into the network two other people get tipped and you can't tip yourself although i suppose you could create other accounts but it's uh it's ideally requiring two tips so i can look at just this address and any content that that address has submitted or i can go to another address and see just the content that user has submitted and i can look at their content and we get something kind of like instagram but with no hosting fees and it scales peer-to-peer with the cryptocurrency incentives and again the cool thing is you can deploy this real quick just you know just a few hours and you have your own instagram and just to understand kind of how what the um with the relationship here means it's that a a post that is tipping another post um is is that there's a is there kind of a relationship implied there or it's just um picking any any two posts meaning um is it meant to be kind of like derivative content or or uh content that that kind of wants to specifically select and highlight and tip that other content or is it just kind of like um exactly two other pieces of content that you support basically but that way you kind of get that exponential scale of tips very cool how do you see this um getting used in applications do you think it's going to be like all applications on one one really large tangle or do you think it's going to be kind of a application specific or maybe even community specific i could imagine really the main purpose of this is just to showcase the source code so that you can get in you can see how do you create a react app that's communicating with ethereum and how is this all submitting content onto this platform and be able to just look through a minimum viable project which does just that the actual social network i don't know how popular it would be but for the the code base i think it's a cool starter that is really cool it looks really cool thanks great so if we uh don't have any other questions we can move on to our next demo and uh with that i want to welcome adrian and he's going to talk about i exact odb p2p okay dream take it away that were uh i think you forgot to check off the audio so we're not getting the audio on your screen share i'm sorry uh i close the video so i'm getting a hard time finding it again no worries hello everyone uh welcome to my presentation of i executed p2p i'm adrian crubwa and i'll be presenting you my work for this hackfest hackathon so my work focuses on the ixeco db what is your db it's the open decentralized brokering so basically the protocol powering the exact marketplace this protocol is pretty similar to xerox protocol that you may know consisting of sign structures that are exchanged of chain that are signed and that can be sent to the blockchain for verification by a smart contract it's decentralized by design but the current implementation relies on a centralized point which is their exact marketplace this is a place where people are publishing their order or where they are querying older people's order in order to to make matches what we call deals in the executive system so by design it decentralized but i'm sure we can do much better than that and have a more powerful layer for communicating old orders so this is why i decided to take this time the rkfs hackathon to try and build a prototype for a better implementation the required features are obviously decentralization but liveness efficiency and security are also paramount we want to have a censorship resistant protocol that is low that has high low overhead on each node so we need garbage collection of invalid orders uh or past orders and we need byzantine fault tolerance we don't want anyone to be able to publish bad orders or even worse submit uh erase existing orders so it's not just another decentralized hash table built on top of the p2p but this is more like blockchain aware we want to have blockchain in mind and build our infrastructure with blockchain at the heart so this is the initial design i won't go over it very long but you could see that i started by building my own distributed data store using lippy to pick a six sub and and i local at the store with but it was not that efficient and it was very difficult to to manage the replication and the search mechanism it was very secure however the later design uses orbit db for a better functionality and also for the search capability of orbit db which is very nice one of the issues however is that orbit db is not a blockchain aware so i had to embed some of the checks into into the code through the exec odb core and so you've seen that on one side there is the blockchain that is listened to on the other side there is the distributed structure data store and you also have an optional rest api below that that can serve external nodes so this is where modularity comes to mind first orbit db is necessary it's the heart of the system but there are additional modules that you can enable to command lines which is blockchain awareness to to have better vision of validity of orders blockchain listening to be able to share information going from the blockchain to a node like an order just being cancelled by its owner and rs api which is an option that is not available for browser mode but that allows external clients to connect to a node node so this is a view of the network and you can see that we support both browser nodes and basic node.js node and the node.js node are the one listening to the blockchain and the one serving terminals through the rest api this is a view of my prototype on the left you've got the react application the broad verified version that connects to the network and can show you the data store you can also inject new orders from that and on the right side you've got both the node.js daemon running and another terminal just asking uh data through the rest api so beyond the icat on there is still a lot of work to do security is a major concern so i'll have to build a custom access controller for rbdb that is more blockchain aware i also want to focus on the little bit to be optimization potentially creating a private network separating from the ipfs network testing testing a lot and eventually moving the ixec infrastructure to this decentralized platform so thank you for listening to me uh thank you for all the organizers of the ikfas academy and i hope to see you someday when conferences start again bye awesome we'll uh let's just ask some questions just maybe i missed it but uh uh maybe missed the reason um uh but was there kind of like a demo were you able to kind of get the whole thing working or or uh did you get kind of like pretty close no so i've got the the whole thing working but it's just like it's it's it's mostly a demon in the command line interface so it's not very there is no much stuff to show it's not like moving stuff it's like depositing file it's more like i was able to bootstrap an entire you know network of pptp node it was a major challenge to get it working and to synchronize fast because i don't know about other projects but having a client a client page on on a browser just synced to orbit db and three p2p having this thing under 10 15 second taps this was a major challenge so it's not something that can show very easily but that's working i think you can you can definitely yeah understood um i do think uh you can definitely show have demos with command line and browser pages and so on and that would help everybody kind of and you can talk through the challenges where you should be like hey like look this looks really easy but in reality this was a challenge to get this working uh but anyway so really cool project um yeah um excited for uh how it's gonna get used yeah and also what it's unlike maybe other presentation something that was said with me during the the the the initial presentation of the xander talks is that my objective was not to to build something that would be useful for everybody that between to turn to our product it was more a stepping stone for me to move from the theorem ecosystem and learn about lip b2p which was something that was very complex to me before this academy and kind of show how i grew into this ecosystem what ended up being your favorite part of the project sorry what's your favorite part of the project so so i definitely love learning about about p2p starting my own decentralized network it was very nice apart from that like orbit db was uh was was an interesting stuff to to work with but i think what was for me the most interesting was to personalize and customize the p2p option to have a fast discover network and be able to put ipfs instances and orbitive instances on top of that so i think most interesting part for me was was learning and discovering the lipitous ecosystem great well thank you so much you doing and this is uh hopefully uh you can take your work on this thing there's a lot of cool concepts in there and uh it's a really cool mashup of like what you can do with both uh the pdp and just mix that with ipfs and in the ethereum side so uh super excited to see that um and with that we'll move on to our next project and that is team omo earth so i'll let them kick off with your demo so i think we're not getting the audio here uh so if you would mind just sharing that with the check box on the zoom setting that would make it all good for us on the live livestream yeah sorry perfect when we are young we dream to become superheroes and astronauts but no one believes in our dreams when we turn into young adults we dream to become inspiring makers and leaders but we are all alone trying to survive in life when we are old we dream to become young again to follow our dreams but now it is all too late and soon death will take us down we believe your dreams are the thriving force into a new world of thriving abundance and open source creativity we are all homo sapiens and we are there for your dreams my dream for example is to kickstart the universal basic income economy of tomorrow over the last year i inspired philip and daniel to join my dream and it became our shared mission to empower everyone's dreams i open sourcing one by one all the tools and platforms which we all need to become successful homoprinters and now we are ready to alpha test our first proof of concept while launching our own dream as test campaign inviting you to join along our journey now let's start the campaign to validate our own dream hi i'm samuel and i'm phillip i'm daniel [Music] our dream is to launch on earth with our first yearly quantum leap summit on the 21st march of 2021 in the form of a one month eve global omoprinter hackathon where the entry ticket price is a weekly subscription like our summit project every omo campaign is divided into five leaves leap one is all about inspiring the first 12 fans and core supporters who contribute time in return for lifelong free access to our summit in leap 2 you can resurrect your first event tickets for lifelong discounts [Music] in leap 3 you start to pay your reservations and summit subscriptions the best part about your subscription is that you don't need fiat currencies as we have fully integrated the circles based universal basic income in the circus economy everyone has their own personal tokens personal tokens become interchangeable through a web of trust and ripple-like transitive path payments during leap 4 impact investors will be able to buy circles for feared or other crypto leap 5 will launch finally the quantum leap summit dao where all early supporters can get ownership token and voting [Music] rights [Music] [Applause] [Music] foreign [Music] so yes yes i think there's a there's a lot to this platform um i think uh uh i wonder if you if you um have like a what is kind of working now kind of end to end uh so in the demo that was sort of creating a campaign joining it potentially chatting and so on um i'm guessing everything that was sort of on that was working now or close enough um uh yeah usa more of a bit maybe a bit more about um how do you see this kind of like evolving over time in that uh do you think you're like you're gonna build out like the whole platform before uh trying to start working trying trying to get users through it or or um are you gonna kind of like focus and narrow down to a specific set of to maybe like a subset of the functionality release that and then go from there so our goal is to um pretty much early make user onboarding around september october with all the test nets and really try to get them into it and test test all the functionality and regarding the implementation all i was showing you is already implemented on top of textile and fully interactive with mutations and you built all of that during this hackathon yes correct three of us daniel philip and me because it's an ongoing project right i mean like beforehand um no i i mean i mean the idea is old and we made many tests and um interacting and trying our concepts out but like really starting and pulling it together was on octo in in this hackathon can you tell us more about this lab of trust that you showed in the video um the web of trust is you mean from the circle side yeah so circles um you you start everybody starts with their own currency and you can only change them if you trust another person it's and um when you don't trust someone you can only get the tokens um uh for a trusted person so if yeah i don't know how to explain better now maybe philip has an idea hello yeah um so so it's it's yeah it's circles it's not our implementation but a partner of us so we use them for the payment in our system so um for example if you if you trust me um i can send you my tokens but someone couldn't send you his tokens to you but he could send you tokens with exchanging it over me so for example some will want to give you 10 tokens for the entry fee for the hackathon so he changes to me and i will give you give you my token you trust and i get the some mistakes i trust so in terms of kind of like the next steps you kind of talked about how you're gonna launch with with those sort of goals in mind but uh what does that timeline look like in terms of uh how long do you think it'll take you to achieve that what was the first question again i just uh you kind of talked about the next steps uh for the projects i'm just curious like when do you kind of uh think or when do you think you'll be able to sort of make meet those milestones in terms of timeline for uh when others get to see it so like on testnet site and on alpha and playground we think we can around october we can have the first users play with it and where we don't reset data anymore got it i'll probably go on if you still have that question yes i would like to just dig deeper into like how the project was built and like what you liked about building up during next time philip you have something uh sorry didn't get the question so during that time like what did you like about building it and like which components or parts were like the most enjoyable and or did you have any paints during that project um so so most enjoying part for me was was creating those those craft coal layer um on on textiles so we built or we built an abstract layer there on textile we easily can create the schema model and consuming data over those graphql layer now and really on the fly that was that was great and and big stuff and for fun for next big components it will be creating those compiler views for creating those web components and then directly pushing them into into textile buckets and an ipfs of course great uh well with that i think we want to move on to our next project and uh i'd like to uh call up group facts and i'll have them uh share their demo so i see two of you are here and uh if you're ready feel free to share your screen hello we are team eureka and we present to you the facts the facts is a decentralized censorship resistant paper post model new sharing and blogging mobile application the core idea of this app is to have users post news articles and other users to verify the genuinity of it by adding threats to it which are in favor or against users can add images as a proof for their post or their thread let us see how this actually works first of all you will have to create an account by signing up after signing up you will be redirected to the home page as you can see in the drawer of the app after signing up you will be given with an ethereum address this address will be used to map your post with your account and also to manage all of your transactions you will also receive thousand the facts token as a signing up bonus on the home page the thumbnail of the post and the post title are visible to everybody if the user wishes to know more about that post he can click on it after which he will be asked to purchase that post as of now the default price per post is set to 100 tokens he can only purchase the post if he wishes to view all the contents related to it after purchasing the post the user will have access to all the contents of the post along with the threads that have been added under it he can also add a thread if he has some additional information related to that post by adding threads there are chances of him receiving incentives for that thread if the number of upwards reaches a certain number the transactions can also be tracked on ether scan the user can choose to upload a thread or a post he can also choose to donate to it by doing so he is supporting the publisher of it all of the transactions again can be tracked on ether scan the user can also view all of the threads and also choose to upload or donate to them the user can also donate from the home page all the users are permitted to add a new post completely of cost after adding the desired contents when he submits the post the post contents are posed to ipfs through textile buckets the ipfs reference along with some more information like the user's address are then pushed to a smart contract all of the transactions including the upwards and donations happen through the same smart contract users also have the functionality to top up their wallet as of now there is no payment gateway attached to it but in the production version there will be a payment gateway to manage all the vr transactions we can extend the idea by having the users to contact the publisher of the post to query more information regarding the post or actually buy it the front end for this app was built with flutter node.js was used for the backend block results api was used for smart contract interaction and last but not the least textile.ios packets for interacting with the ipfs this is what we came up with in the last 30 days it was a great experience building thank you that was very cool um i see you listed flutter on the in your stack and now flutter is built on darts and pretty new how does the how did this work with step 3 integration do you need any libraries or did you have any problems there uh so basically we just used web3 for building the user interface everything on the back end happens on x node.js expressgear server so do you use the three in the front end anywhere in flutter nope do you think that's possible to move the three components to the front or make api calls from flutter to a web 3 instance um i i didn't really get the question can you please sleep with it once again so compared to many browser apps they use the three on the front-end side with something like metamask or some other local battery provider do you think something like that would work with flutter or in your mobile app no so to interact with the smart contract we are using um there is a block vigil that is a provider so basically uh it it it it provides a ready-made apis to interact with smart contract by basically just pushing it so that actually reduces the that actually eliminates the need for something like metamask or stuff like that and we don't let users to handle uh their own ethereum address uh to reduce the complexity because like that letting users handle their own ethereum addresses sort of um interface in the user experience for the app so that's what we that's why we like uh chose to handle the ethereum addresses mapped to the user's account ourselves on the backend in a database see you touched a bunch of different parts in the stack um of different stacks and maybe even better way to say it like what what was the what was the most the worst pain point that you experienced most frustrating thing curious um i i don't think there was any nothing challenging um it was it was the first time working with ipf is like this is how we got introduced to it through this competition and um the most challenging part itself was um understanding and getting to know how it actually works and and learning how to use it yeah exactly like getting started was the i guess the toughest part and then once we got into the flow uh it was like things worked out great any any other last questions before we move on to our next demo going once going twice and uh we're good so thank you so much and uh with that i'm going to come up team eat sign to uh kick off and share what they made so please welcome each sign you can start your screen hi this is team esai and what we have built in this hackath is a decentralized version electronic agreement signing application built on ethereum and falcon here we are we have three team members in this hackathon which is porter jack and ship we present a decentralized docusign built with web3 technologies and this is how it works user login with mathmask upload and encrypt an agreement then stored in fair coin sign the agreement with historian private key and a transaction then invite other parties to do so esserian smart contracts logs every activity of the agreement related parties can easily verify signatures track activities and download a specific version of the agreement from falcon so let's directly down to the demo okay let's say alice login with my mask and powergate so she start a new document and upload it to the file called network and let's wait some time for the falcon network to seal the document okay after that we can download it from falcon and we can start to in white trust the party to sign the agreement with status after that she will vote yes for her a proposal of course and then we can view all these history all these activities in the history page okay let's switch to bob's account same login and we can see the active document shared with me and we can see ali's proposal and we can download the agreement that is has uploaded and with the history okay so bob will say well yes for it and that's all done but he can also reach a new proposal by uploading a new version of the agreement here and the same procedure to it and he will vote yes for her for his proposal and from alice point alice's point she will find her proposal being denied and she has also had right to say vote no for the new proposal [Music] and that's all the on that's the major functionality in this demo e-sign is made of three main pieces which is decentralized identity smart contract and decentralized storage the logic we designed is to make it easy to use all logic runs on smart contract and users explore no other servers need it and the future works we're going to do is to deploy the application on the midnight and we're going to expand it to a platform we're going to build more applications such as paper read or build ads and there's also some cryptographic issues where you need to figure out like how to sharing a p a key with a smart contract but without linking it to non-related people and we're trying to use a non-vulnerable token to enable intellectual property trade activities and that's all thanks for your time wow this is really cool oh sorry i don't know if you're are you actually done or is it just your demo i think i think we're in the queue yes thank you thank you i think that there's a lot of lag sorry um uh i'll i'll try waiting a little bit more um yeah i think this is a really cool platform a ton of functionality um really good idea um i think that there's a lot of um i think the functionality is there there's a lot of functionality there which is which is awesome to see um i think the ui the ui is functional and and good but i think the ux and placement of buttons and so on needs to get a lot of polish for it to become like a really nice good usable product but i think you have the core functionality there and that's kind of some refinement that you need to do i think you are also probably trying to do too much at once and so maybe narrowing down the product focus for for the beginning might help you find like a really core great use case and then from there expanding out so for example the ip trading nft stuff that sounds like a really cool idea but i almost would say it's a different it's a different project that you might relate to this one but it's kind of like a different i would probably not try to just bundle everything in and try to kind of decouple that to some extent um but yeah i think it's a really cool idea and and maybe um attaching to identities to some of the identity providers would be really useful because uh knowing that a particular identity signed a particular document that's where like if it starts becoming really useful um kind of managing a lot of the keys is kind of complex yeah that's actually what we're going to do in maybe in the next uh hackathon and we're going to um build more applications between eastern and falcon that's what we do yeah so for the non-fungible token part uh we're just where our original idea was to kind of uh make this project as a basis for a future project so it's not necessarily building directly on this one but more kind of using it as a starting point and also for the ux thing um i do apologize i'm a mobile developer and i had to learn react in like three weeks from nothing no sorry i think i think the functionality is all there and i think like you you work through a ton of really hard challenges very quickly like these platforms take years to build and you you guys did an amazing job putting it all together um i'm just saying the as you refine the product and focus you're probably going to play if you stick with this and and you build out this this this platform you'll probably refine a lot of the product usability to get at the point where it's kind of a very smooth flow right like if you use something like docusign or hello center of those things um it feels really clean and polished there's a lot there but it's just kind of refined i agree i agree definitely yeah so so it sounds like you're uh going to be building other things later on but not necessarily this one or or are you going to continue with this i think it's a really cool idea so you should consider continuing to do this because um i don't think there i think there is a need for being able to sign agreements with web3 identities and keys and so on and there just isn't a solution right now and that's a cool idea but it might not be the best idea you can work on so i don't know so one question have you thought about batching these signatures or like combining uh inputs to reduce the the friction or like work around skating problems but sorry i didn't hear your question clearly so i now have some other documents uh signing projects that try and combine these inputs to reduce the amount of data that needs to be submitted on chain or needs to be communicated have you thought about optimizing this file yeah so um i think i've uh we've already tried to minimize the amount of data stored on chain so that the user doesn't have to pay a huge gas fee um yeah so we're so the chain really is just for like a record keeping all the actual documents are relying on ipfs and falcon yeah and i'm guessing the signatures too right like the signatures go on on a thread like uh as opposed to i don't think i don't think the signatures make it on chain i think they just make it onto um i think they're off chain right maybe i missed that yeah so so so the quote-unquote signature here is basically um like you have you have a history of you can see that so this person uh voted yes on this this version of the document with their private key so that so that's like their signature in this case if that makes sense so it's just like a record or like a like an event on um on the ethereum blockchain okay got it so it isn't like an actual full transaction so there is kind of like a proposal and a full transaction flowing on the chain that's cool yeah and the file is stored only on the awesome well uh thank you so much e-time and now we'll continue to our next demo in the next team and that is project phone world workshop so let jay and the team take it from here randy go ahead and start the video thanks hello i'm jay carpenter representing the phone word workshops team in the hack fs 2020 event we have created your global directory we asked ourselves what is missing in the decentralized web what could take the decentralized web and move it to the next level we have this tension between machine friendly and human friendly addressing what if the two were compatible in the past we've had directories like telephone books that combine machine friendly with human friendly addressing in web one and two we've had the domain name system that does the same decentralized web has yet to create such a construct in our directory we kept it as simple as possible we're combining public keys with human friendly addresses and indexes we're using hashing and bash scripting will have a marketplace for lookup numbers so that they can move to the highest and best user and most importantly this will be swiss neutral non-proprietary to ensure the highest degree is trust and permanence it works like this we can take an easy to remember phrase like 1833 hollywood and pair it with a machine friendly peer id like this ipfs peer id here's our global directory in github let's take a look at an example using dial 1833 hollywood we'll show a peer connection a pub sub topic using that same peer identifier and a connection list normally when we're connecting to ipfs peers we use this long string which is machine friendly but now we can add a easy to remember address like and use a bash script like bash dial 1 833 hollywood and get the same result so we can take that same easy to remember identifier and we can subscribe to pub sub topics that are using that identifier and we can voila communicate over pub sub and live p2p using an easy to remember topic let's take a look at how we can create contact lists that have a lot of flexibility and power so if we do this bash dial 833 hollywood we can create different contexts like twitter we can create email contexts we can even create cryptocurrency contexts like eth and file storage context like filecoin and we get the same thing our team is made up of seasoned it professionals we're looking to introduce new decentralized addressing like quad one ethereum quad one protocol labs 1000 file coin quad 9 textile and we're extending an invitation to hack fs participants to create your own human friendly decentralized addresses using the phone workshops directory we're also extending an invitation to hack fs sponsors to become inaugural registrars with the phone word workshops global directory you can connect the way you want to connect here's our connection address on pub sub with phone workshops global directory we can take the decentralized web to the next level join us and move it to the next that was great any any questions from our judges yeah how does the registry how did the registry end up working i know there were a lot of ideas while uh during the hackathon i'm just kind of curious how uh how does one register a name and and uh assign a phone number to a value so initially what we'll do is we will take pull requests on our github account where you can request a particular phrase or lookup number and also include your your peer id uh with you know the connection information that's that's how we'll get things started and we're also having workshops which will start next thursday that'll basically be an introduction to people as to how they can you know get started with this does that answer your question one yep yeah yes it sounds like the registry is just managed through through github right yeah and it's posted on github now you can look it's there's only two days worth of data on it but you know part of the next steps is redoing the registry so it's easier to update and quicker to add basically registrations there was nothing in there go ahead i'm sorry i was gonna say there's something in there about like reassigning the most valuable name spaces so basically if somebody's went dormant you would reassign them on on github or something or initially people will be able to choose two two addresses uh one will be picked randomly and the other one they'll actually be able to choose so for instance uh one of our team members wants uh quad one or one one one one blockchain so they'll be able to get that and then if they want to immediately resell it they could put that on the market and resell it to somebody else if that makes sense and somebody else wanted uh one one one one cryptocurrency and they can get that and they can immediately they can build something behind it or they can sell it whatever so that's does that answer your question to the reassignment and so forth and we can we can give this a try if you'd like to like right now so i'll put this in the chat here's an example so if you have an ipfs the ability to start up a daemon you can start it up with that first command and then open up a new tab and put in the subscribe to the 1111 phone word workshops and then open up another tab and you can send a message and if anybody's fired up a damon yet i'll be happy to send the first message i'm going to send a message and hopefully somebody got it and i can send that again if so anyway it should work um it should it works now the the idea is to keep it as simple as possible the registry as well as the functionality and uh it's just been a blast to do this and i want to thank everybody for putting on this event because this would not have gotten to this point without this event any other questions okay cool awesome well thank you yeah this is cool thank you team and uh we got two more projects to go from our side and uh with that i'd like to invite the second last project and that is live like and uh i think someone here is already here so i'll let him kick off with sharing this video hello my name is smopyard this is my aqfs submission i'm doing decentralized live streaming so this is brave my browser it's equipped with ipfs companion and also another extension to play hls live stream so you just need a url i have here a http server that i made which is going to be serving the playlist use to view the stream but right now you can see we're not receiving anything so i'm just going to start streaming this http server is listening to a gossip sub topic it is receiving cids of dag nodes custom ones which contain all the video segments cids plus the previous dag node so that the stream can be linked together so as you can see it's receiving now i will copy paste the url i'm going to mute myself so as you can see it's downloading the master blast which is used to select the stream variant and then it's downloading the stream variant playlist every segment is uh fetched through the ipfs gateways so this is it for the on the viewer side on the streamer side now um i have obs which is recording this video and streaming at the same time on the left this is ffmpeg which is transcoding the video from obs into four different variants it is outputting those video segments to another http server that i made this server is receiving the video segments it is adding them to ipfs creating a dag node to link the four segments plus the previous dag node and it's publishing the cid of the latest dag node to the the same topic as the viewer and this is how it works thanks for listening bye love i love the background and uh we'll let the judges uh ask any questions so i'm testing to try different resolutions bit threads this is some limit there or how's that experience um i use the default uh four variants uh for example uh twitch.tv use those four variants um i just use the same codec and all the same thing just to go faster but it could be anything really yeah this is really cool so really quiet yeah thanks uh how um maybe i didn't catch this but how do you explain kind of the scalability of the whole flow to to work meaning like um maybe can you actually talk about through like what happens if like thousands of nodes or tens of thousands start following the same um yeah that's a big question um i'm not super sure how it works um maybe private networks or i i i don't know um like the four weeks i were used to like learn everything so i don't know yes so so um yeah so pretty cool [Music] yeah i think um if you're using gossip sub which i think you are um then it should kind of scale scale out nicely um it just might be a question of like uh yeah that would be like that would be great to test right like try try doing like a try live streaming something and see how many people and different things you can get watching this and the latency too is uh is uh very important when you're live streaming um just see uh how big is it or or how low can get actually maybe maybe it would be even better than what we have now with youtube or or twitch or or the other platform maybe i don't know if there's a lot of optimizing it'll take a lot of optimizing to get there because they work really hard to like immediately blast out content to a bunch of edges are you going to keep working on this uh after the hackathon yeah um at first i was supposed to add uh chat like but it was too much i just focused on the the video part but obviously uh chat and monetization too uh that would be cool that's that's another kind of words awesome i also want to um see uh with all the kind of transcoding and so on um are you seeing life here or or are you did you do it all yours yeah i think so you're using fmpeg and so on directly so yeah it's it's transcoding yeah great well thank you so much for a really cool demo and uh with that we'll uh move on to our final project for the day and uh this is uh i i i admit i i looked at this ahead of time and i'm super excited about this one so we'll let leon and team uh talk about the ipfs ff fps demo so i'll take it away from here uh just making sure that uh you're uh about to show the video [Music] wait for the boss to pitch what if i told you there is a powerpoint on the market just kidding we have a product called ipfs fps which stands for interplanetary file system first person shooter the unofficial decentralized game that can be played on earth and or mars we're working on it background story we wanted a game on ipfs not just any game we wanted a game with 3d graphics cross-platform compatibility and a physics engine dapps nowadays are quite simple they have an input box a button and maybe a smart contract we did more research and found unity so the question now is is it possible to have unity in ipfs we searched online for examples and or documentation but we couldn't find any so we spent the next two weeks in hackathon to see if it's possible long story short it worked and here's the demo here's a demo of our site just visit ipfs-fps.zil if you don't have a chrome extension then add in that sh here's the homepage if you want to start playing click here if you want an overview here's the high level it uses unity github fleek unstoppable domains pinata and ipfs if you want to read the full documentation then just click here the team the team is me leon hi and randy the designer we also made a game trailer for you guys so check it out [Music] [Music] [Music] [Music] go oh have you guys enjoyed that i think i think everybody thoroughly enjoyed that but i'll uh i'll have our judges asked the questions about how the game works so are you it's great very nice um so um is there some kind of leaderboard or some kind of score system to like have competition in the game or yeah so a quick story we had a um a speed run at the top a timer at the top to make things competitive we shared it with a couple people and things got really competitive so uh so that's just a side story but we've had tons of features um kind of listed out one of them being a leader board one of them being a multiplayer as one mentioned um having actual tokens involved so there's a lot of features we can add on to it for this hackathon specifically we wanted to keep things simple our main goal is to see if we can get unity on ipfs and it turned out okay so tell me about putting unity on ipfs was it hard what were the challenges i'm curious yep so if you want the whole spec we have a documentation so you can go to the site there's a button called read more something like that you can go in and read from a to z how to set it up but in short you install unity create the game export it there's certain configurations save it on to github and then hook fleek into github which does ci cd stuff and it spits out cid but to make it more human readable we added unstoppable domains and pinata for meta tags and long storm long term storage uh for the leaderboard do you try doing like a textile thread or something so that everyone could see it or is it just kind of like a speed run like or is it just kind of like a leaderboard out of the game uh i think we'd like to integrate more decentralized tech into it uh so yeah something like orbit dbe uh there's so many different options i'll give you another example uh someone reached out to us they realized that it's possible and they reached out to us and said is it possible to have prefabs um into these into these games so and maybe in an hour so i'm gonna write an article on how to set that up and make that all decentralized so there's so many different options this is just the beginning yeah i think that the big potential here is that um there's a lot of kind of dev tooling to write between gluing all of these pieces together right so like the the distribution flow that you're talking about can work and the kind of features and functionality to connect other games are probably very similar across a you know a lot large set of games so maybe by category like um maybe maybe a degree of latency that you need in multiplayer or the amount of data that you need to send between parties or whether they use nfts and all that kind of stuff um and i think you can probably translate like um now that you kind of built the game played with all of those things seeing what it looks like i recommend kind of doing that a few more times for a few different games and for like a couple other kind of things and then thinking of building a like dev tooling that makes that whole process extremely easy where like you have just one library that that you kind of for a particular kind of game right so if you wanted an fps like you you have that is mostly a single player game but uh but it has maybe a leaderboard or something then you know there's like a standard distribution and it's kind of distributed in this way it's kind of like a like an easy website that guides you through through how to like deploy your game this way or how to build it um yeah i think like right now like all of the all of the tooling is there for people to build like the kind of stuff that you you showed um but learning it and gluing it together is hard and so um and that's kind of like what what you achieved through all of this uh it might be that kind of suggests like making it very easy for other people to do that might be a very useful thing them yeah definitely to answer your question evan the hard part was gluing everything together as one mentioned so it took us about two weeks to actually figure it out but we made sure to document it because we couldn't find anything and then after that we shared that documentation other people and they were able to spin it up in maybe half a day so a fraction of the time have you made games before or is this just like something that seemed like you know new frontier try to try it out yeah so the the second hardest part was learning unity so i just learned it maybe five weeks ago cool house great well that was a really cool demo and a really good end to uh our judging session for uh today this is day one and uh i want to thank every single team that uh took the time today to uh to present and talk about what they did when all of our judges were asking really interesting questions and then kind of being excited about it and giving their feedback on all the projects so uh before the teams go i want to just make a quick note that i think a lot of you have been contacted individually but we are making a mini documentary on uh this whole event so if you want to be one of the the projects to be interviewed uh and included in the documentary there's a link in in the information channel on slack uh for the attendee so just make sure you go there right now we're hosting these mini interviews um as we speak so if any of you who are still here you know are interested in that i'd encourage you to just check that out and join that call for a few minutes so uh with that i want to end off today's uh today's session and uh i want to thank all of our judges and all of our teams and also for everybody who uh stayed up at our time zones to uh to be here and share what they built um and uh with that i'd like to thank everybody here and uh we'll see you all tomorrow for day two of judging so thanks everybody and uh hope you have a great rest of the weekend thanks everybody this is awesome great to see everybody's demos a lot of really cool stuff web 3 is coming 
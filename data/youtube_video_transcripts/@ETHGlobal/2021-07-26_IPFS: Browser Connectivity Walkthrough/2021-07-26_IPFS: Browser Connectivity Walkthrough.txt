okay hi everybody welcome to the ipfs browser connectivity walkthrough workshop we have ryan here who's from our sponsor ipfs and he's going to be running this great workshop for you guys ryan i'll leave it to you to introduce yourself and get started all right hi everyone uh my name is ryan but more known as discordian uh you can call me disco for short um this is ipfs jumpstart creating an in-browser peer-to-peer application and interactive workshop so if you want to you'll be able to follow along and let's get started so some people here might be wondering what is ipfs so we'll go over that briefly but feel free to ask questions as they come up so ipfs aka the interplanetary file system is a peer-to-peer data storage protocol it's typically used over the wider public network but will work fine within a lan and can even be used in a private network over the internet encrypted using shared keys so ipfs addresses content using cids and data is shared peer-to-peer between people using ipfs a cid is a unique identifier that helps with data discovery and deduplication ipfs can also utilize ipns aka the interplanetary name system to have one cid that can be updated to point to a new cid this works by the publishing node generating a key pair then that node can publish cids to that associated public key if this key or ipns address is shared then a receiving node can access the latest version of content using that ipns address as the publishing node publishes changes periodically so ipfs is built upon lib p2p this is used as the backbone of ipfs for peer-to-peer communications for practical application uses this gives us access to an easy to use publish subscribe system aka pubsup we can simply subscribe to a topic we're interested in as well as publish to it all subscribe oh yeah all subscribe peers will see the published message ipfs is also accessible over http via public gateways such as ipfs.io and dweb.link this gives non-ipfs users a sort of portal into ipfs without all the features of running their own node so what are we going to be doing today well today we are going to learn how to discover and connect to other peers in a peer-to-peer browser application we'll go over using webrtc star to connect directly with peers as well as circuit relay in case not traversal isn't possible then we will learn how peers can communicate with each other so we're going to be using pub sub today to build a simple chat application and then we will learn what some possible pitfalls you might encounter along the way i personally encountered some surprising pitfalls making my first in-browser ipfs application and i'll be going over those today as well after i think would be a good time to answer any other unanswered questions and then you will need a text editor for this workshop there are several amazing ones available including vs code notepad plus plus k bim nano emac sublime and more uh today i will be using bs code but we're mostly just going to be editing one file so just use whatever you prefer all right and then so if you plan to follow along you'll want to download the starter kit linked at the top so that's just workshop.thedisco.zone and hopefully that works out fine and everyone can access and download that the main file we'll be editing today is chat.js which will be included in the zip you can view your changes by opening index.html in your browser so we'll be starting with part zero uh what i do is i just copy part zero into a live folder and then just work on it from there but you can do whatever you prefer if you don't plan on following along i'll be streaming the process here as well at the bottom of this slide i've linked roughly what this demo will look like after we're complete today so if you if something goes wrong a completed version that you can just download and run is available there it's complete with a guide so please let me know in the chat if you run into any issues getting set up otherwise we'll be moving on to explaining what's going on and i don't see any questions so far so we will go into vs code all right so what i have open here is this is part zero maybe i'll just open that up quick for a visual so when you first get your zip you'll have all these directories i have copied out zero bare bones and i'm editing chat.js so this is up here are just variables and constants we'll be using later in here is what will be running on load so all this does is create an ipfs node which we can use directly in the browser right away and i will open that up to show you so this is our bare bones screen so i've created some basic html for us to have we got our red circle in the corner we got a zero here can enter a display name uh we can chat but uh none of those features exist yet we were just looking at the javascript all it does is create a node so how do we access that node well we can right click and inspect or you can press ctrl shift i usually to get to this window i'm just going to go over to the oh my screen block um oh that hasn't happened before so is the screen block on my stream yeah you can try um stopping share and then restarting it okay zoom buttons uh see those buttons are on the black screen that's strange uh i don't i can leave zoom and come back um okay yeah you can try that we'll hold the fort cool we'll entertain everybody okay so um while we wait uh whenever we have like big breaks like this i like to see where everyone's coming from if you guys feel comfortable you can put into the zoom chat like what country you're from i always find that really interesting or if you're in the united states like your east coast west coast wow this is super cool seeing a couple portugals germany okay ryan's back everything's looking good i'll let you continue waking cool okay i've moved the control bar over to the other screen too just in case that happens again okay so where was i right we uh we just got our first node going we have our browser window we were at inspect and we were just going over to the console so now we're in the console uh in our code we created a variable ipfs so we can do await weight ipfs.id and we can see our own peer id here we expand that out we can see that we these would be the addresses we're listening on and this is an array of zeros so we are not listening on any addresses and we want to be listening on addresses so we can get browser views we can check if we do have peers and we can see we have nine so these will mostly probably be ipfs preload nodes which helps us access content when we're in a browser uh we're gonna move on to step one now get bs code back open and this will be the connecting to peers step the first thing i'm going to do is update our constant we have here the bootstraps and we have now added in my bootstrap node so what that node gives us is then we have the ability to it we connect to a go ipfs node and this actually gives us the ability to use circuit relay now really quick i'm going to open up a diagram and this is on docset docs.ipfs.io go to how to ipfs in the web browser create a simple chat app and we have this diagram see if i can zoom that in and so what we've just connected to here oh no it just keeps zooming uh is p2p circuit and that allows us if we're stuck behind a nat we can form connections through the circuit relay just like turn where webrtc star works more like stunt so this means using webrtc star we can discover up here but if the not gives us trouble we can't directly connect with the pure so we have to use p2p circuit so using both in conjunction should more or less guarantee that you can always form a connection between peers moving on from that we'll go back to vs code and continue setting that up so we have our bootstraps there we're going to copy in a function real quick for the ipfs class constructor you can see the imports okay yeah good question so we're going to quickly look over yep so this is kate i happen to have this file open in there so it's actually gotten from right here uh in the index html there is an import so it imports ipfs min js and if you look at your files you have that file right there so that'll work over ipfs um i just figured it's a simple way to just quickly get rolling you don't need an npm or anything installed but you're more than welcome to use it okay back to vs code so we are going to continue copying things all right so we're going to get a function called do bootstrap and i might gloss over some of these functions a bit quickly in the interest of time but do bootstrap what this function does is this connects to our bootstrap nodes that we defined in this constant up here and if reconnect is true what it does is it initially disconnects from the bootstraps so what'll happen if the connection fails uh often it'll be left in your bootstraps you attempt the reconnection but it doesn't seem like it actually attempts the reconnection uh if you just manually disconnect first using ipfs form disconnect that gets around that issue so we'll just move right into the next function and this function is probably the longest explanation of the entire workshop but please bear with me uh we'll try i'll try to break it down as simply as possible and uh ignore the uh bad practices here but uh so we have process announced so what we use process announced for is for pubsub we are going to subscribe to a circuit called um i believe it's called announce circuit and we'll attach this function to it then whenever that topic gets a a message then this function will be called what this function does so the first thing we do is we store our own id um this is for use for comparison uh pretty much immediately after for example where if the message came from us we don't bother processing it we already know what the information was so we return then uh we decode the data so messages on ipfs will contain all sorts of information but the data that you send over will be in dot data so you want to decode that using a text decoder and i expect that to be an address or just a string in general so we search for pure lives which i will be explaining a bit more later but more or less we sent keep alive packets because i noticed in browser if i don't do that then eventually i will disconnect from my peers and i have had a lot of trouble getting reconnected to the views so if i just keep the connection alive with pure lives um i find that just totally dodges that issue altogether we store the time that we last saw let's see this would be a message from the circuit relay and the circuit relay also sends over kiva live messages here is where we expect to receive a peer-to-peer circuit address and what it does is it splits and tries to get the peer id out of it in the console log you'll see um these messages quite often and that's the peer that you saw announced and then just to make it clear it compares it against your own peer id then going on from there uh we get a list of the peers we're connected to and this is simply to check that we're not already connected to the pier um because if we are already connected to the pier we're probably connected over webrtc star which is a direct connection exactly what we want so we just return then uh if we didn't then we end up logging the circuit relay address and then we simply attempt the connection twice specifically twice because i find very often it fails the first time and the solution is literally to just try again i find it doesn't fail twice in a row and i'm not entirely sure what causes it but this little thing here uh has helped me out a lot all right so that's the long bit so we're going to go ahead and add another helper function uh this is check alive this is mostly just used to update the status ball in the corner which is that little red dot that i mentioned right here and then we're going to update our onload function with all new information so we've now expanded our create we've explicitly enabled relaying which i'm not sure if you still need to do that but it's here we have done it then we also this is where we add in our webrtc star node uh these are both the same node just using uh ipv4 and ipv6 separately we attempt that bootstrap using that function we mentioned before every second we update our status ball and here's where we actually subscribe to the announce circuit attach the function to it and then we set an interval so every 15 seconds we are sending pure live on there so other peers can know if we are around all right uh so might be wondering what this looks like in the browser it won't be a big change because we still don't have messages sending i have just refreshed here and you can see that now we have a green dot so we got the green dot because now we're actually connected to the peer-to-peer circuit relay and it is advertising uh people lives we've detected those and now we can see that we are in fact connected in a way that we can see other peers so we're gonna jump right into sending messages all right so we're going to scroll back to the top i'm going to drop in a join channel function so i've made a simple wrapper this uses our prefix here combined with the channel that we specify so we can join channels related to our chat application that we're building here it it's a very simple wrapper just for subscribe which we already used for the amount circuit copying two more so here we have send message and send message so the first send message this is just a simple wrapper again onto pub subs so this is this would be a publish instead of a subscribe uh basically the exact same thing but we're sending a message now that message doesn't have to be a string it can actually be anything you want uh it accepts binary just fine um then we have this send message function so this is the more high level one this is what allows us to actually get the data from the text input box so that's at the bottom of the web page and then we're just going to copy in one more function before we update our onload so this one's out so this is used for just dropping the messages that we received into the uh like the message area so you can see what messages you got um there's a very simple replace on here to help uh prevent xss just filters out the triangle brackets replace them with their html safe equivalent now we're going to scroll down to the bottom into on mode we need to do a little bit more in here after we do our bootstraps we want to join a channel named global this way anyone who's following along we'll all be in the same channel and then we're also going to drop in this so this will let us so when uh when we type in text and press enter then it will actually receive the message so that seems that seems all good so far so we're going to save that refresh give it a second to yep there we go it went green i'm gonna give myself a little name here and then quickly open firefox and then i'm gonna name this one firedisco so if i type hello in this it also shows up in here but hopefully if anyone else is following along then they will be able to see it as well i see your question george is it possible to encrypt messages it absolutely is possible but you'd have to write your own encryption scheme um otherwise as you saw anyone can subscribe to a topic and see the messages in plain text just fine so that would be a i guess a task left up to the developer oh hey i see some more activity all right now before we run out of time i'm going to quickly show just possible pitfalls and maybe how where this could be taken from there this is the shortest part so possible pitfalls so i actually ended up mentioning my main pitfall in in all the other explanations so the main pitfall was connections uh losing connections due to no keeper lives so if you're ever feeling like you cannot stay connected to these peers don't be afraid to do something like this this literally is just in the bootstrapping code you subscribe to keep alive topic that everyone knows i send one over every four seconds kind of simple um but that's really it and then another pitfall i found while making this demo so i'm going to show this off just because this will be the continuation from uh the simple demo that we're working on here so you can see there's a lot going on but uh this is the same base code just taken further so you can see we got uh we got emojis and everything and we got a picture sharing it all just works and it's uh it's all the same uh base code uh a lesson i learned so another pitfall when i was doing this is right now you can verify that a message came from somebody but if somebody log like let's say a bad actor logged that message and then replayed it let's say several days later maybe in order to make it seem like someone said something else that would work so messages are signed you could get around that by setting a time stamp on your messages and then um just checking like let's say you have a rule like messages can only be three minutes old well then after three minutes those messages expired and you just reject them so let's see is the message delivery synchronous or asynchronous that would be asynchronous um it's very asynchronous so if you sent a message and let's say uh your connection with appear is bad or maybe non-existent but another peer is connected and is aware that you are subscribed to that topic it will actually re uh the middle peer can relay the message for you um if that makes sense and you can still verify that it came from the sender because messages are signed um i hope that answers it this would be let's see i'll get the presentation open again but this would be a very good time for answering questions so i'm gonna just get this open so here i've linked the guide that this workshop is based on that's where i got the diagram that i opened up early on in this workshop um the demo that's linked there is the demo that i just had open showing everybody then we have the ipfs docs and then a link to js ipfs so i recommend everyone checks out everything they can uh i personally really liked the docs at ipfs.io that's how i started my ipfs journey but um yeah sorry okay what testing tools are available for ipfs i guess that would depend what you want to test um i am not entirely sure how to answer that question uh yeah i would say that entirely depends on what what you want to test all right um that's all i have okay if there aren't any more questions for ryan um thank you so much ryan for hosting this really amazing workshop it was super informative uh thank you ipfs for sponsoring um hack fest this year and i want to remind everyone that you can talk to ryan on discord and the hack fs sponsor ipfs channel and also there is going to be workshops happening all week this week including a brainstorming session on thursday and a team formation uh later in the week and kickoff is on friday so yeah really excited to see you guys at more of our events this coming week and hope everyone has a really great day bye bye everyone you 
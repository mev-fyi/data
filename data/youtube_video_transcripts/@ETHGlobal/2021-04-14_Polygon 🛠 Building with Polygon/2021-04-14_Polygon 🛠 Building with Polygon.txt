hi everyone welcome to the polygon building with polygon workshop uh here with us arjun and pranav um who will go and do the deep dive with you um so on this i'll let them give a quick introduction to themself and kick off the session thanks for joining us this morning i'm sure definitely great to be here uh so just a quick intro so hi hi guys i'm arjun um i had growth for uh polygon and uh yeah prana hey hey guys i'm pranav i lead solutions at polygon right and again just to quickly uh you know just jump into it so we just have like a quick 30 minutes so i'm just gonna uh just take maybe uh five to seven minutes uh to just quickly cover a few things about polygon like who are we what is our plan where we come from and then from there we leave majority of the time to run out to sort of cover uh how to deploy a polygon what are some of the things you know you need to keep in mind it's basically the same as ethereum but we'll just cover uh some of those points um let me just hit this button right here and i hope you all can see my screen um and yes and today i'm just gonna quickly just talk about uh about what our plans are um so just to dive right into it so the story of polygon actually starts in 2017 uh when you know people and we were called matic network and and in 2017 is when you know first conversations around scaling started because of the cryptic cryptokitties episode and what we kind of realized at the time is that uh you know that unless until we are we're able to bring a very high degree of scalability to the ethereum network you know we would never get any serious adoption or blockchain or any kind of very scalable solution ever deployed because at the end of the day um you know if this technology is not scalable then it will not be adopted so at the time vitalik had come up with a paper citing a plasma technology as a way of solving for the scalability problems of ethereum and and that's when we uh kind of uh uh so so one of our uh founders was a plasma researcher and he kind of came up with this um hybrid plasma pos chain approach right where essentially our chain kind of is tethered to ethereum so it behaves like a commit chain unlike you know like a pure side chain so what happens is that every uh few blocks so every 256 blocks on our chain we sort of uh merkle root those transactions in a way we like sort of compress those transactions and we put like a checkpoint on the ethereum chain so it acts like a commit chain and and what this did is this allowed us to greatly ramp up the throughput of the chain at the same time you know the costs were extremely low and it was a great solution and it still is like it's still under development uh our main net for our hybrid plasma pos chain went live uh about nine months ago and since then we've seen over 17 million uh blocks um and and you know we're doing close to about almost 200 250 000 transactions a day so that's roughly 20 of ethereum um on a daily basis and uh you know of course we have almost over 200 apps deployed in this chain and and just to sort of uh you know go deeper into into the rabbit hole here so when we develop this technology we kind of also realized that uh you know so this solution to scaling kind of created another interesting problem statement right so ever since 2017 when plasma was sort of the prevalent thinking around scaling we've seen other interesting scaling techniques come out as well like optimistic roll-ups ck roll-ups uh there might be some new ones in the future as well and what we kind of realized is that every every technology right has this pros and cons right advantages disadvantages so there's no one-size-fit-all scaling solution for ethereum at the same time the l2 landscape uh continuously keeps changing because there's always some new approach to scalability as the march of technology inevitably goes on um at the same time we also kind of realized is that all of these approaches to scaling are sort of being developed in silos right so there's no formalized framework that offers multiple solutions right so developers are constantly confused and uh you know on where which technology is better where should they go what and at the same time you know because the scalability problem exists we had multiple you know we have this never-ending list of ethereum killers you know which constantly keep problem up um again mostly because of the scalability and cost concerns of ethereum so what we kind of realized is uh you know that we needed to build a sort of a generalized scaling layer which acts like you know like a swiss army knife for ethereum scaling and infra development so the easiest way to visualize is to like imagine ethereum and then like killing layer around it right and in this scaling layer we would offer all these different abilities a person or a developer might need to to build any kind whether you want to build ck roll-ups when you whether you want to um acoustic roll-ups whether you want to build like your own stand-alone chain is where we'll also build the interoperability here and essentially what that does is that kind of turns um you know sort of a ethereum into a multi-chain system so one sort of ethereum in the middle and then all of these different uh sort of scaling solutions around it um and and this essentially is what polygon is all about right so all of these other technologies like optimistic roll-up chains gk roll-up chains we are also developing those uh of course it will take them a while before they become production ready um and we are researching that as well um but for now uh like the production ready tried and tested solution is our plasma pos uh chain but like what we kind of realize is that in the future all of these technologies should be available to the developer and and the developer should get to decide right what kind of solution they want to use um and of course you know like i said uh you know again we've blown past all of these numbers as well uh ever since the launch of rba as well and and just to you know quickly talk about scalability so when i say scalability high scalability like what does it mean so in terms of metrics it means that the transactions on a chain are final in two seconds so block finality so transaction finality happens in two seconds so anytime you click something like you know there is some action in two seconds almost like a web two kind of environment like when using uber or netflix the average transaction cost is zero point zero zero zero zero four dollars it's practically free right at the same time we are evm compatible so anything which works on ethereum works on our network we use the same erc style assets so that means all the token standards and all the tokens you're used to on ethereum you can use them seamlessly on our network we don't have our own custom token standard or anything like that um at the same time you know we checkpoint transactions like i was explaining before in a hybrid plasma pos approach we checkpoint all the transactions onto the ethereum network right so to ensure that all your assets are secured by ethereum security and and when you have very fast transactions with very high uh throughput at very very low cost at the same time with high security as well then essentially this inevitably brings the focus to where it should be which is on user experience right so if you can design great and compelling user experiences then that is what will get the next million blockchain users into blockchain technology um and and yes of course you know we've grown very quickly and we have like an exponentially growing developer community and encourage you guys to be part of it um i'm just gonna quickly run through a few of the slides so again we have amazing advisors now who join you know hands with us to help us build the future of ethereum scaling uh people like you know ryan shawn adams from bachelor's anthony sosano john lillich also jameson um our core team traumatic remains the same we also have mihaelo village one of the top you know 10 researchers of ethereum who have you know has come on board to help us build this new future um and again you know i just uh i don't want to take too much time but i'll just quickly cover like you know we've got like pretty much every major d app out there and whether it's in d5 or gaming is essentially deploying um on our network and you know i'm going to be updating all of these lists you know and because a week on week we have amazing deployments um so what i'm going to do is i'm just going to stop right here um and and just gives you kind of a you know brief flavor about what polygon is all about um and then i'm going to just uh hand it over to pranav who's gonna take you through how easy it is to deploy like any kind of uh any kind of smart contractor solution on uh on on on our chain so what do you got all right all right thanks thanks arjun for the brief intro and you know the the one thing you know all the developers definitely think about it you know these are the scaling solutions and there must be some other technologies involved in it and that will involve us to you know learn some other stack learn some other language and you know do things around it and that's not the case with polygon and that's makes polygon developer first approach you know on forefront if you are a ethereum developer you're already a polygon developer you don't need to make changes in your code you don't you know just have to understand the psychology psychology of our lay to chain you have to understand our commit chain you and your code remains the same everything else remains the same right so i'm going to give you a brief intro of how being an ethereum developer you can be a matic developer we'll start with deploying our smart contract on remix i'll appreciate if you can you know follow along otherwise you can just you know watch this uh recording and stuff we'll first of all deploy a smart contract on remix right and we'll deploy it on matic network doing some one or two changes then we'll you know use truffle to deploy a smart contract on the matic site matic blockchain then then you know we'll go through a very particular and very important concept which is network agnostic feature for doing uh you know a network uh reliant uh you know network specific transactions which are gas less then we'll cover something like a bridge and you know at last i'll be open to questions a lot to cover a lot to discover i am like you know really excited so it would be great if you can you know just have uh your computer started and we can maybe just rumble through it uh so all right let's just start with uh again whatever i'm talking about will be available in this talk you can just google something like bit dot ly slash matic workshop uh you know this link i'll give you after the workshop so that you know you are aware of it right so let's just this is a general smart contract as i was talking that we are evm compatible chain whatever works on ethereum works on matic network that not just includes the smart contract code but also the libraries involved in it right so this is this is the best part about being on the polygon chain all the smart contracts that open zaplin has developed for ethereum works for polygon as well and that's you know in that sense most of the libraries that you have on ethereum will work on polygon as well right web3 etherjs and everything like that so like you know just just to tell you guys this is a normal erc 721 multiple contract we are going to deploy it first on ethereum and then try to do the same on matic as well right so let's just you know i'm on godly test net let me try to deploy it deploy sign the transaction confirm it and it will get deployed on the gurley test net right first of all now like you know this will happen man it will take some time even the test nets on ethereum are a little slow anyways moving forward now we'll do the same on something like you know a polygon commit chain right so the first thing that we have to do in that case is we have to include a polygon you know in our uh network so what we have to do i hope you are able to see the screen right first of all let me just open the docs from where you can just you know copy the things that are required application files again i'm moving a little fast you can just you know have this recording and do it on your own pace but yeah go to the network details network feature here this is the place i have to be here like you know rpc i'll get it from here and the chain id is 137 for mainnet and for mumbai test networks it is you know 8001. again the matic matic mainnet is the midnight one and the mumbai test net which is corresponding to gurley is on the 8001 chain id all right so let's first do it on the mumbai girly test net right let's include that on the metamask custom rpc custom rpc matic test net rpc dot rpc mumbai dot matric dot today i'm getting this from here chain id is not 137 it is 8001 for test net right it is matic explorer is also there we are we also have an explorer right save it and it is added to our test network right similarly i've done for brave as well so here you can see right yeah now the second thing that i need to do is get some faucets right for myself so the first thing that i have to do is go here for sets matic type in here and i'll be here right and i'll be getting some faucets for deploying things on matic right just copy the address paste in here submit and if i confirm you'll be getting the faucets that are required so once i have everything i've said set the network on metamask i have the faucets now let's deploy a simple erc721 mintable which also has open zeppelin libraries with it right let's just do it this is for gurley right this works relentlessly for goalie now let's do it for matic test net so i'm on matic mumbai right now let's deploy sign the transaction this is automatic number you can see right now confirm and you know it will happen so you can see right now that you know i didn't even go through this i didn't even change one piece of the code even one semicolon and i was able to deploy my code as i was able to deploy an ethereum testnet similarly i was able to deploy on matic as well that's the beauty of being on uh you know evm compatible polygons uh come exchange right this is this is the first part the second part that we'll be doing is we'll be deploying our you know this is this is just for the smart contracts then the second thing that we have to do is make a decentralized application out of it for that we can use something like you know uh something like hard hat or truffle i'll be giving you this example on truffle but you can also try it on hard if you want to try it on hard hat this is the place you have to go uh deploying on matic using hard hat this is a place you can i would suggest you to check out but i'll be doing it on truffle so this is what we'll do right let me just go to this code this is a simple truffle package that i have installed for simplicity right and it has this okay let me just expand this okay now you're able to see cool right this is truffle.js config file and let's just first of all comment this out right let's just comment it out this is a normal truffle config file you know if you go for truffle unbox any of the packages you will get you'll be getting this kind of environment and let's just you know deploy something in ash cli oh gma cri all right okay it's running on eight five four five and let's first of all deploy a local test net right truffle migrate dash reset and our contract this is this this is the contract that i've deployed will be deployed on the local networks right you can see over here that they're deployed on the local networks cool so this is the first thing they are deployed on local test not now we want to deploy it on matic network how do we do that again i will be borrowing not more than 14 to 24 that is 10 lines of code and your contract without changing the contract structure or without changing the migration files without changing the src code structure i'll be deploying them on the matic as well this is the beauty of magic and this is the reason why people love polygon right let's just do it ruffle my great dash dash network uh this is first of all let me just uncomment this again this is what you'll find here as well uh this is the code snippet i've copied from here by the way from here right this is the code snippet all right uh this is one uh polygon all right network polygon reset uh there's some issue in this everything is either is not correct okay now let's see again truffle my great [Music] reset oh wait wait wait first of all let me just close this okay right so it will be deployed like this and you know we'll be deploying and will be set on the truffle networks as well now let me tell you the third part of it which is different for l1 and l2s right which is the one in which you know let's say you have some tokens on ethereum and you want to okay before that uh just you know just to tell you guys how uh how we interact normally let's say i want to interact with the dap which is deployed on ethereum how do i do that first of all i'm on ethereum test net ethereum main network right and i didn't do the transactions over there and that's how it works if you are on matic you will have to do something like a custom rpc and then you know try to do things with that and that is not at all which is scalable or that is not at all which is you know the way we want things to work upon so there are two approaches to work upon that the first one is introduced by metamask itself this is the blog post i would suggest you to read out about it so how that works is that you know in this application let's say this is the application you have right okay let's say i'm on ethereum okay here you'll find that you know this is the place i have to go and i'll be able to automatically you know switch my network or connect with mathematic maintenance right this is one of the ways this is introduced by metamask itself you i would you know if you are developing a decentralized application and you know to reduce the user friction you can you can use something like this particular widget to make it happen just one click and you know your custom this particular network will be added right this is one of the approaches second approach is about network agnostic features how do we work upon that is that if you are on any network let's say you're on ethereum you're on matic doesn't matter you will be able to interact with the decentralized application that is made on the matic network using something like a relay infrastructure right this is how it looks like you know some you can use something like bike on me or gas station network to make it happen so this is the decentralized application right you will be giving your uh signed uh transaction to this free layer and this three layer will be doing the transaction for you on the ethereum uh a virtual machine right so you just do a transaction and that relay will do the transaction for you on the ethereum virtual machine and that's how user you know will be not he just has to sign the transaction nothing else he just you know has to provide his public private key and the rest of the things will be taken care of by the relay infrastructure if you want to develop your own you can use something like gsn but i would suggest you to try out something like bike on me which has a mixer sdk which gives you the relay infrastructure which you can directly utilize to you know run this relay infrastructure the decentralized application developer will just give this public private key sign the transaction and rest of the things will be done by the uvm compatible chain right this is using native mental transactions and yeah that you have to include something like eip712 you have to uh add that part all right so this is the way i'll give you a small demo of how that particular thing works so this is let's say a minter that we had that somebody somebody in the community had created let's say i want to maintain an ft oh yeah this is a network network agnostic demo erc721 let's just take any this particular thing let's say i'm on any network let's say i'm on goalie right let me be on girly let me be on ethereum in it you can see right now i have zero ethereum on ethereum internet right still i'll be able to you know interact because this particular application uses network agnostic feature and relay infrastructure right submit the transaction oh am i connected by the way no okay now i am connected now let me just submit a transaction it gets uploaded to ipfs see here i just i just have to sign the transaction right that's what i was talking about you just have to sign the transaction and the relayer will do that transaction for you on the blockchain which is something like polygon right i just have to sign the transaction i don't have any ethereum that's okay but the transaction will happen and you know it will happen on the ethereum network and i don't even have to pay a penny for that to happen see here you can see the matic explorer where this particular transaction actually happened again this is a really good ui feature that you can add you can you know use some something like a network agnostic feature and people just keep on signing the transaction they don't have to spend the gas required and everything happens via the relay infrastructure really great approach that poly markets also used and you know their user interface looks very very seamless and yeah that's that's one of the ways to improve your ui and that's what polygon actually you know helps you on facilitating again moving forward uh the last thing that i wanted to talk you about was the bridge uh let's just go to the docks just go here okay so here i am on the docks you can see in the docks that this you know so let's say you know let me open google jamboard to make you explain if that's possible all right okay so let's say this is ethereum main network right and this is the matic network and now let's say you want to transfer you have some tokens deployed on ethereum and you want to transfer them on the matic network right for that we have a decentralized bridge to make it happen right uh i'll not be going into the mechanics of how this particular thing works but how actually it functions is that you know you just have to deposit in the predicate contract that matic has deployed on the ethereum network that will send a transaction on the child chain proxy and the tokens will be minted on matic now let's say you want to exit from this particular thing then first of all they will be burned over here right and the some the proof of the burn will be submitted over here and your tokens will be like you know uh unlocked they were first of all locked when you do this particular transfer so that there is no double spending or double token you know uh ids on ethereum and matic as well so this is how uh actually the transfer of tokens from ethereum to matrix works in a decentralized fashion right uh and this is this is the most you know a trustless approach for making a bridge and transferring assets let's say erc 721 erc20 erc 1155 and to facilitate this we have created something like matic js to make it work so you don't have to you know understand the mechanics if you just want to go ahead and develop it you just have to use matic js library this is the matic js library npm package you just have to utilize that if it opens all right so this is the matic js library uh you know matix js you just install it once you have installed you just have to utilize four of its function to do this transfer from ethereum to matic and let's say you know from matic to ethereum okay okay i come over here and you can just see first of all let's say i want to transfer erc20 tokens from ethereum to matic network okay so this is the first transaction that i have to do that is approved right and this is how it actually works then deposit so now my tokens are transferred from ethereum to matic now let's say i want to transfer my tokens from which are you know currently on matic to ethereum again similarly i have to first of all burn matic pause client dot bond erc20 and then you know retrieve them on the ethereum networks so this is the way for transferring assets from ethereum to matic if you want to get the field of this particular thing you can definitely check out uh this you know wallet this this particular wallet that matic has created and this is for the test network let me be on girly and come in here okay i'm on the curly network i'll just go over here which is the bridge part and now i'll be able to transfer you know assets from ethereum to matic and matrix to ethereum using pause bridge right i have any tokens currently i don't have any so i won't be able to show you but this is the best way out to you know uh do your deposits and transfer of erc22 comes from ethereum to matic and matrix ethereum again the development is very easy matic is a developer first approach so what you have to do is just go to matic.js this is the matic.js file utilize these four functions uh first two for transferring erc20s from ethereum to matic and the last two is for transferring uh tokens from matic to ethereum and seamlessly you will be even able to transfer your assets from ethereum to matic and similarly from matrix to ethereum everything that i've talked about is in this particular dock that you can see over here and yeah everything like you know something like oracle if you want to use chain link or something every documentation is present oh yeah if you want to use indexers maybe the graph or covalent both of them are actually you know present over here and yeah this is this is the uh very very you know exhaustive docs i would suggest you to please go ahead and check this out as well and also if you want to like you know just try out your own ways of you know doing this erc20 token transfer from ethereum to matic matrix to ethereum using matic js and you need the code for that we also have created that this is the one just go here and just click here this is the repository that we have created you know it has everything that is required it also has the bridge so you can just transfer your uh uh tokens from ethereum to matic and matic to ethereum uh one way of doing this is you creating your own ui of the bridge right for doing things like what avigorchi did they created their own avigachi bridge for doing that particular thing but the other way out is using this wallet that you know matic team has created for transferring your tokens from ethereum to matic and matic to ethereum so yeah that's that's pretty much it from my side we have covered a lot we first of all deployed our contracts on the remix side and make it work then we deployed our contracts on truffle and they were also working very much fine then then you know we discussed something like what metamask is added you can add matic uh you know using one click that's also possible then we discuss something like network agnostic feature for doing transaction in between we discussed two tools which was faucets and explorer for you know facilitating your experience on matic making it look like ethereum right at last we discussed a little complex procedure which is required for doing communication and acid transfer from ethereum to matic and matrix to ethereum that involved the bridge and uh you know at last one last thing you know which is again created by this is a community project that is created by some some you know matic lover uh you know just wanted to show you the stats of how like you know how how f blazing fast matic is and how you know cheap is it is like it is almost free to do a transaction on matic network this is the comparison as well for minting an nft and things like that and yeah so definitely would suggest you in this hackathon to try matic network out and build a particular project we have a lot of bounties whose uh you know details is there in the discord if there is you know you're developing something and you're facing some issues let's say in the bridge or maybe in the deployment or something please tag me in there i'll be super uh you know available over there all the time please tag me and let's make you know let's make our development super strong and super pleasing fast with matic so yeah that's all thank you so much for now and that was a great presentation i hope you're trying to crush a lot so really invite everyone to join you guys on the sponsor channel in the discord you'll have access to them and their team go there's a lot of resources already that are pinned to that channel and they will probably post more if you ask a specific question it's all going to be there uh thank you so much again pranav and arjun for joining us today and presenting uh any questions you may have are running out of time so i'll invite you to go and um leave them in the sponsored channel and on this i will wish you a great day thank you so much it's great to be here all right take care guys 
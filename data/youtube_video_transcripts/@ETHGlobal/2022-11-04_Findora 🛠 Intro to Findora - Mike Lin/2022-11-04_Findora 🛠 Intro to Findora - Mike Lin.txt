foreign [Applause] [Music] thanks for joining me today I'm going to basically walk you through the developer documentation for Fedora also give you a brief overview of the fender architecture and finally for our youth Global hackathon participants I'm going to discuss a little bit more about the Privacy routing SDK and also the ZK did SDK that you can use as part of our hackathon challenges so stepping right in uh the first step for developers to do is to go to docs.finderwear.org this is where all of our documentation is stored and once you arrive at the site you'll see that it's broken up into uh essentially two main sections one is the module section which has a lot of theoretical abstract Concepts that explains to you what kind of underpins the Fedora blockchain next we have this developer section right here this is where you're going to find all the tools uh and sdks that us developer can use and install in order to uh you know launch and run and manage a d-app on the fedora blockchain and finally at the very bottom I just want to mention that we have a network settings section so uh if you're you know a developer developing on our test nets for hackathon uh make sure you're on the correct test net uh for the eth global hackathon we'll be using the Forge test net so uh just make sure to point your RPC endpoints metamask wallets Etc to the right Network which should be forged test net for the eth global hackathon okay so uh that's the quick uh documentation walkthrough next I'm going to talk to you a little bit about the Fedora architecture so these are important Concepts to kind of know so you have kind of a background from which to build uh your d-app on Pandora so I'm going to go ahead and walk you through the introduction here uh scroll down here to the main image and essentially the important architectural facts to know about blockchain was you know originally Fedora started off as a utxo based blockchain and we incorporate a lot of confidential transfer features on top of this original Fedora utexo blockchain uh it operated under a tender man consensus later on in order to sort of serve evm developers we added on top of the existing utxo blockchain uh in an evm compatible blockchain layer so now Fedora is really composed of two blockchains connected by one consensus utexo blockchain and then evm blockchain so as an evm developer one thing to note is the Fedora evm which we also call the smart chain is completely 100 evm compatible meaning any ethereum tooling you've ever used You Know Remix truffle Etc it will work with Fedora evm any solidity code that you have on ethereum you can pretty much directly copy and paste it and have it run on Pandora evm as well uh another important concept to understand and terminology to understand is because Fedora has again two blockchains a fedora the original Fedora utexo blockchain and the new Earth and Dora EDM blockchain uh you have to have a way to migrate tokens between these two internal Fedora blockchains and the way to migrate them is through what we call a prism transfer so uh essentially you can consider prism as a internal Bridge within the overall Fedora blockchain so the prism transfer allows you to move fra tokens or any tokens between Fedora utxo and Fedora evm so that's the uh important concept to to know and finally I'll give you a brief introduction on sort of the newest feature that Fedora has launched it's still in an early stage in MVP phase but we're pretty proud to announce that Fedora is going to be supporting uh decentralized identifiers dids basically zkdid and credentials is what we call the product essentially it's a way to have uh you know an identity on the blockchain that's connected to credentials which reveal personal no information about that did holder and these credentials and the related proofs that are related to the credentials can reveal private information about the did holder and what we call a zero knowledge fashion essentially what that means is you know you can reveal that your credit score is above 700 without actually revealing the actual number of your credit score okay so with that I'm going to move on to uh the Privacy routing SDK essentially go to the developers section click on the SDK segment and look for the Privacy routing SDK and in our hackathon we're going to have challenges related to using the Privacy routing SDK so this is the primary document you'll be looking at to gain an understanding of what we mean by proud privacy routing so you can check out this diagram and below that we have the steps to essentially uh basically install the SDK into your uh basically JavaScript code and it gives you a little information about the token supported uh and uh the types of evm transactions that you'll be using and calling in order to implement uh what we call privacy routing so let me step back a little bit and just walk you through the concept of uh privacy routing so essentially uh the Fedora utxo blockchain has the bulk of the confidential transfer features right now so what we've implemented here is the ability to allow Fedora evm d-app developers to basically you know deploy their d-app on Pandora and then essentially route their transaction through their Fedora evm transaction through the Fedora utxo layer and when you route your evm transaction through the fender utxo layer uh this privacy routing SDK will essentially anonymize that transfer and what exactly do I mean by that essentially the process is this if I initiate an initial transfer from Pandora evm I can send that transaction to a fedora utxo Anonymous wallet this is a random Anonymous wallet that will be created via the SDK to give you an anonymous wallet on the fedori texo side then the SDK will create a second Fender utxo Anonymous wallet completely random and you will send the fra from the first Anonymous wallet to the second Anonymous wallet while in the fender utexo blockchain and by sending from one Anonymous wallet to the second Anonymous wallet you kind of break the link uh between the sender and the final recipient so this is where the the transaction uh gets gets sort of the link broken and is arguably anonymized and then the final portion of the Fedora uh privacy routing process is once the fra is in the second Fedora utxo Anonymous wallet now that it's been kind of anonymized this wallet on the fender utxo blockchain will send the token back across to the Fedora evm using prism transfer and now the tokens will be with the final recipient of Fedora evm so to summarize basically what happened is a transaction started on Pandora evm it got routed through the Fedora utxo layer or became anonymized where the link is broken on who the sender was and then finally it gets routed back to the Fedora evm wallet once again so now the the recipient doesn't know who originally sent the uh the the tokens from which which uh Fender evm wallet sent the tokens so that in a nutshell is uh the concepts and the overall flow behind the Fedora privacy routing flow and and the associated SDK that allows you as a developer to to to use this process uh so that's uh it for the Privacy routing SDK you know the other major challenge that we have with the hackathon is related to using the uh zkdid SDK so let me walk you through that a little bit so the uh zkdid usage is a little bit more uh complex because there's a lot of components and stakeholders so first you should go back to the module section and read through the uh important Concepts to understand when uh you know building or using a decentralized uh ID system with credentials you know understand who the key stakeholders are basically a credential issuer a did holder and the verifier the verifier is typically a d-app that wants to verify some private information about the users that's using their app right for example Ave might want to you know verify a did holder's credential talking about their real life credit score because Ave probably wants to give a a lower interest rate to uh did holders who have high credit scores in real life right because they're good credit risks so this document walks you through the overall architecture and again the key flows that have to be built by each of the key stakeholders so for example the credential issuer needs to do these things uh the credentials you're uh also needs to do this secondary flow as well uh and then finally this is the flow for the verifier and what they have to do so uh read through the the key sort of abstract material to understand uh decentralized identifiers and credentials and then once you're done with that you can move on to the zkdid SDK and essentially here in the developer section we'll walk you through the installation of the SDK uh here's the API reference for the SDK so these are all the functions that you can call within the zkdid SDK and uh very importantly because again it's kind of complex uh decentralized identifiers the stakeholders and the various process flows we've given you example code that you can sort of model and use to understand you know what the functions do and what the flows look like so there's three examples in here they go from sort of simple to hard just just to walk you through the key Concepts when you are you know building flows for a did and credentials one important piece is obviously creating and assigning the dids uh the second piece is creating credentials for example credential for your GPA that might be uh assigned and given to you by your University a credential from Equifax that gives you your real life credit score so the second portion is creating uh creating a uh and being issued credentials from these trusted parties and then the next piece is creating proofs from the credentials so uh at at the end of the process the verifiers accept proofs as input to verify information about you so in the process you have to create a proof that can that that proves data that you have in your credential so to create a proof you use your credential as an input along with something we call a circuit as well so when creating zero knowledge proofs uh there's cryptography involved that allows you to prove information that's in your credential in a zero knowledge manner for example you can prove that in your proof that your credit score is above 700 but not reveal the actual number for example maybe my credit score is 767 but I don't reveal the actual number I just prove with my proof that it's above 700 and so that's where these circuits come in these circuits apply cryptography so that you can create proofs that reveal your private information in the zero knowledge manner so that's why you need uh these circuits as well and to understand the concept of these circuits and to call the apis to uh create these proofs that require both the credential and the circuit as inputs to create your your proofs so that in a nutshell is sort of the process for the various flows and the the apis you need to call to essentially create a uh you know a zkdid and credential management process obviously in the hackathon you don't need to do all three you can focus on a particular Niche you know pretend you're you know a verifier that's built a d-app that's sort of like Ave that's a D5 lender and you just want to verify you know the did holders credit score but obviously you can you know you're not limited to that feel free to build anything that that you have an interest and passion for and with that that's that's it for this uh hopefully brief introduction on the uh you know key documentation how to use it and then the two key sdks that you'll need to uh read about and learn if you want to participate in the uh hackathon challenges uh that Fedora has presented at the youth Global hackathon so with that good luck and uh thank you very much [Music] foreign 
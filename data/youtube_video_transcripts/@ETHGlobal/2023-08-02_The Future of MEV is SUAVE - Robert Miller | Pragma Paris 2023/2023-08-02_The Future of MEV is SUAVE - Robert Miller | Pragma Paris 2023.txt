foreign [Music] so for this demo I'm going to bring on Robert Miller from flashbots and a lot of you've heard about what's happening in the world of Mev but you may not all know about the actual new things that flashbots are working on and to talk about Suave please welcome Robert Okay cool so my name is Robert Miller I work at flashbots a research and development organization focused on Mev or minor extractable value I'm a steward there today we're going to be talking about Suave so flashpot's vision for the future of Mev and the decentralized block building Network that we're going to be making I'll introduce the medm and we'll look at where Suave is and its release details in the future won't review this at any more length but again talking about the mevm Suave we'll Begin by looking at the med supply chain some of the challenges and why we are building Suave touchpads so the Mev supply chain is this framework that we use to think about how a transaction progresses before it's included on chain it's a fairly basic framework so you start with a user that has an intent this is somebody who as an example wants to swap assets on chain that intent gets taken by a wallet and turned into a signed transaction again as an example maybe the user uh is creating a transaction on unit swap that transaction in this case creates an Arbitrage opportunity that a Searcher is able to pick up insert their own transaction back running the user and capturing the Arbitrage to form a bundle of transactions which is passed on to a builder that processes these bundles creates a full block and a validator eventually signs that and includes it on chain you don't need to know the the details of that but this is meant to demonstrate that throughout this process we have a couple different centralized pieces of infrastructure that are really complicated performing these off-chain actions that are really important to how transactions get processed on ethereum and end users outcomes this is a problem because these Mev applications Searchers block Builders are some of the most important infrastructure on ethereum today uh they decide where value lands they decide which transactions get included on chain who is getting how much value um you have a couple hundred thousand dollars that every single month that is paid back to users who are using things like order flow auctions and actually 95 of blocks on ethereum today uh you know 19 out of 20 are created with this centralized Mev infrastructure with a relatively small group of specialized actors that do that about four Builders making eighty percent of that so there's this uh really critical infrastructure at the heart of crypto at the at the heart of ethereum today that is you know entirely centralized and running off chain and you can see here my atlas of Meb infrastructure that is holding up crypto um and this is a a challenge because while it mitigates a bunch of the negative effects of Med that I haven't touched on here too much uh with things like my Boost keeping the the validator set decentralized flash plots protect if you want to prevent front running this centralized infrastructure doesn't scale very well you can't just copy paste it move it to all chains it provides an Avenue for censorship which we've seen on on ethereum it needs policing in order to you know figure out who is a trustworthy actor in the supply chain and it has centralizing pressures even even more so than exists today so what do we do about this why do we not just Implement all the stuff as a smart contracts is one question you might ask uh and and that's largely because ethereum is limited in some specific ways which is fine it's it's limited for the kind of things that it's doing but as an example it has no way to handle private information if you are trying to get a transaction included on ethereum there's no way for you to send that privately to ethereum over processed uh that you can't coordinate with actors within block time so there's no way for you to agree that someone pays you to background new transaction on ethereum you can't get really quick off-chain information like a binance API if you're interested in conditioning your execution on that and it's fairly expensive to do compute so these reasons are why flashbots is developing something that we call the mevm which is this modification of the evm that we're making with new pre-compiles really specific powerful features for Med use cases specifically as an example taking a signed transaction simulating it and returning some information or building a block with a list of transactions that is input and what's really interesting about this is that since we are modifying the evm you can actually program any of the infrastructure as smart contracts you can write an entire block builder in solidity and I'll show you an example of that later within this like familiar programming framework that you know solidity using Foundry using the like standard evm developer tooling that exists already and this really lowers the barrier to starting writing this critical infrastructure right now which is currently a really high barrier to to entry and you get to benefit from the underlying decentralized infrastructure of the the mevm chain that that we will deploy so our goal with the mevm is to take every part of the Mev supply chain that exists today and offer it as a pre-compile so that in your smart contract you can call those pre-compiles and compose them together and write really complicated Mev infrastructure to do things that you can't do on chain in ethereum today um I'll run you through kind of the architecture of how this looks like at a high level and then an example a smart contract written with the mevm so the way this works the middle box here with three components inside of it is suave and it's got three main components for you to know about uh we first have the mevm chain that I just described to you it's this modified evm chain with special pre-compiles for Mev use cases and some of these pre-compiles call out to what we call an execution node this is a off chain node which is providing execution as an example simulating transactions merging them together building a block inserting new new transactions and it's doing this to provide credible and private compute off chain that you don't want to do on chain these run in trusted execution environments so that you can still trust their the the outputs and the results of this compute even though it's not all being performed on chain and I'll I'll double click and dig into that a little bit in one more slide if it went over your head by chance we have a third component here which is a confidential data store for private information that you don't want to store on chain that can be accessed by the execution node so you've got four main stakeholders developers who are writing their Mev infrastructure as smart contracts users who send private data that they want included on chain and authorizing some contracts saying hey I I'm okay for this block building contract or this auction for my transaction to have access to my private data executors that are back running or arbitraging doing Mev things to try to execute people's bids and the net result of suave is it is creating blocks that are included on chain for networks like ethereum or roll up um to dig into how execution nodes work a little bit more you have developers that are defining in smart contracts off-chain execution which is performed in what we call an execution node so your smart contract says hey take all of these transactions simulate them and treat them according to this algorithm and that's not not actually performed on chain instead all that is performed in this execution node in a trusted execution environment like in sgx where you know the code is running with some level of privacy and integrity so this is a really scalable way to get private and confidential compute for Mev use cases and the the other thing that I would note is that execution notes if a user permissions a certain smart contract have access to private private data um so this is what a mem contract looks like this is the flashbots Builder today our block building algorithm written with mevm you can see how it has a couple functions here that you you normally don't have within ethereum so we are getting ethereum mainnet State on that that Fifth Line there the latest block State we are simulating bundles of transaction getting getting the results we have a pending block there and we're simulating adding new transactions to it seeing if they fail discarding them so these are the superpowers that the mevm gives you that you don't have currently on on ethereum and lastly on that second to last line we are exporting the block so we are making it available for ethereum proposers to actually include on chain if they request it from 12. um and this is just one example of a use case there's a there's a ton of stuff that you can build so any off-chain Mev infrastructure we have the ambition of being able to support within the mevm so other building algorithms um you know that tree transactions differently you could do pre-confirmations with mem you can build uniswap X on chain uh with the mevm you could build Cal swap you know I won't I won't list it all there but we're really excited about the other potential mevm contracts that could be made and what we're really excited about is uh having really low barriers for other people to be able to deploy their own types of mem infrastructure on this and to have these different applications composed together into something that is larger so this is not a monolithic flashbots Builder that we're decentralizing Instead This is a platform where anyone can deploy their own applications and and all these can compete and compose together in this open market and we think ultimately that kind of positive sum platform vision is what's going to result in better outcomes for users and better blocks for validators briefly what I'll touch on here is this this isn't supposed to be made just for ethereum this is supposed to be a a platform that is building blocks for many different chains so I've been using ethereum kind of examples because that's where our roots are on but Suave and the mevm works with many different types of environments you can have execution nodes that are running evm you can have them running was some you can have whatever virtual machine that you want or what a support whatever chain you want and the integration is is relatively straightforward so long as your chain has some way to listen to Suave four blocks um so this isn't an idea for us anymore this is something that is real we're actually Landing uh blocks on testnet right now so we landed our first quarterly block a couple days ago uh on the left here you can see some some terminal screening of blocks being produced by Suave if you're interested in seeing this proof of concept you can feel free to to catch me sometime this week we'll be sharing more details online uh and we're moving towards the Centauri release that I talked about in the introduction which is a devnet that we're going to be launching in the fourth quarter this year when anyone that wants to can deploy their own nav infrastructure as smart contracts on Suave we'll share examples of what it looks like to take all of our centralized infrastructure create them as smart contracts on Suave using the mevm and again we're targeting the the fourth quarter of this year initially that's going to our execution nodes won't be in sgx they won't be interested in execution environments so they will require some trust in flashbots and the next release which we call Andromeda we'll put those nodes inside of an sgx so the whole system will not have any trust in flashbots and at that point we are looking to try to move on to other domains too so if you're a roll-up if you are an L1 developer please feel free to come talk to me about what it looks like to integrate to Suave uh so that's all I have to say today I got a couple things feel free to reach out if you are one of these stakeholders you're interested in working with us we are also hiring quite a bit um so hiring engineering managers uh developers a lot of product related roles uh I'm pretty Miller on Twitter thanks for listening really appreciate it [Applause] 
awesome looks like we're all set so without further ado um thanks everybody for attending uh the chain link workshop uh last workshop of the day today um the first day of market make uh we've got patrick uh from the chain link team who's gonna come at you live with a bunch of info on how to use chain link get data into your contracts into your dapps and of course many many many other things so patrick i'll turn it over to you awesome thanks so much yeah i'm just going to go ahead and share my screen i just had to uh had to retweet market make tweet can everyone see this looks awesome all right great all right awesome so what's going on everybody uh my name is patrick i work on the chain link project i'm really excited to be here really excited to be um be helping out with the with the global teams hackathon they always put on a stellar event i'm really glad that i you know i've been invited back so um yeah i'm here to talk to you about chain link about decentralized oracles about data and about building the next generation of smart contracts uh at this exact point in time we really have an extraordinary opportunity in front of us the world of smart contracts is like is right here uh we're seeing more and more adoption and more and more people understanding why smart contracts and why blockchain is so important and how it can really change uh the whole world for the better so we have this opportunity we have this um we have this obligation almost to do something fantastic and build really cool things and these hackathons are really the stomping grounds that enable this creativity that enable uh everything that we're doing here so uh so i will be uh uh monitoring chat from time to time so if you have any questions i'll feel free to pop them in there and i'll get to them when i can so let's continue on so a brief um a brief kind of layout of what we're doing here we can talk about the oracle problem some definitive truth for financial data verifiable randomness functions accessing any apis uh use cases and then we'll get into some demos at the end so in order to really understand chain link we first need to understand that smart contracts are not able to connect to external data or really any off-chain data resource on their own and this is a huge limiting factor for smart contract adoption because it means the only thing that we can really do is is token transfers with each other and that doesn't sound a very smart contract right because a smart contract is just a traditional contract that can do more things and it is you know decentralized and auto executes and it's not corruptable which doing token transfers is great but you know we obviously want to do more than that so um one of the questions that i often get asked is okay well why can't i just you know make an api call in my smart contract um and this is actually a really important question and the simple answer is that blockchain is a deterministic system and it needs to be able to be validated from the inception the genesis block all the way to where it is right now and if making api calls is part of that validation part of that consensus protocol then each node is going to get wildly different results when trying to trying to sync up right because if one node calls an api you know a minute later that api can be changed could be depreciated and if you try to go back and you know i you know 20 years later try to re-validate every single node every single transaction you're going to get it's going to be all whack and it doesn't work so so how do we deal with this problem so to interact with the outside world we need what's called an oracle excuse me an oracle is any device that interacts with the off-chain world to provide data to smart contracts and they report the result of this data in a transaction on chain so the block so that the block chain can stay deterministic so uh these are really really important obviously because they take these smart contracts from kind of these tokenized uh transactions to being able to take real data and build real contracts that have real meaning now here's where it gets a little bit spicier the oracle problem a centralized oracle becomes a single point of failure for the entire smart contract if you have a centralized data source but a decentralized logic your smart contract isn't decentralized one of the main reasons that we build on blockchains at all is because of the decentrality so if we have our logic that's totally decentralized that's fantastic if we get our data component of our smart contracts from centralized points uh it kind of defeats the purpose so in order to make our applications that truly never need to rely on one entity you know be it a company a landlord government or or anything like that you need a network of chain-link nodes you need a network of chain-link oracles and we use those terms a little bit interchangeably so to answer all this uh chain link is a decentralized oracle network it's a modular decentralized oracle network meaning you can build your networks to be as decentralized as you want and add as many nodes getting data from as many different data sources as you can so that your data can be truly decentralized and proof with these auto executing smart contracts and this is where chain link really shines so chain link allows users to build anything that they want and take smart contracts from doing just these token transfers to being what we really want smart contracts to be and replace and re-landscape entire industries right now to doing these superior digital agreements because that's what smart contracts are the added trust reliability and security of smart contracts is unnecessary it's something that we need in today's day and age and chain link allows you to do that train link is completely customizable it can work with any api and there's even more it's even more customizable with what's called external adapters and external initiators these are what allow people to uh to connect to any blockchain or any data source and have the nodes do hypothetically whatever you want and to get you started with d5 the chain-link project has actually gone ahead and found many of the best blockchain node operators on the planet and combined their prowess to build what's called price feeds these are decentralized on-chain reference points that can be considered source of truth for various currency pairs like the price of ethan usd for example and as you can see this is a little bit this image is a little bit outdated but everything is the same each node because ethan's you know not 200 anymore each node in the network uh independently retrieves data from some of the highest quality data apis and reports their answers on chain you can see the answers um that each provider reports so that everything is completely transparent many of the most popular popular cryptocurrencies or fiat pairs are currently supported and the best part is if you don't like it you can build something else yourself now so here's just a little bit more of the approach of how these price feeds work um or or the or the thought and the care that goes into making sure that these are so powerful they're uh they're centralized provably secure they're all using high quality data uh they use crypto economic security there's defense of depth a huge open source community that's contributing if you want to learn more about it definitely check out the documentation and you can kind of read into the uh into the actual oracles and the actual notes that are running these price feeds and why i'm stressing this point so much is we've already seen dozens of attacks and just in november alone when i was counting i counted six attacks six attacks in d5 there were over a million dollars each and they were due to the fact that they were using centralized oracle so we absolutely need to raise us as a community to a higher standard and use safer decentralized oracle so that we can build these awesome protocols in these awesome projects and defy is constantly you know one of the major areas pushing for projects and pushing for innovation and really drawing out the creativity of engineers and has a ton of momentum and knowledgeable people working the field chain link supports some of the top default projects already at the moment um there's over something like 20 billion dollars uh in d5 and you may think oh we're doing really well that's a lot uh it's not even close to what traditional finance is so there's so much ground to be uh to be built um and so some of the projects that are using chain link right now chain link price feeds are synthetics with over a billion dollars in assets under management you know loop ring set protocol ave with what is it like three billion right now or something like that uh so these synthetic price feeds are battle tested tried and true um to really give you these definitive sources of truth on financial data you know like price feeds there's more data than just the prices of uh f and different cryptocurrencies you can definitely check it out in the documentation or you can go to feeds.change.link to see the visualizations learn a little bit more about exactly what's going on under the hood and everything else going on there so with that as well chain link is more than just price feeds chain link is like i said it's an oracle that allows really any input and any output and you can really do whatever you want you can take your smart contract from being an agreement to just send tokens to doing anything that any contract on the planet does today this is the future that we want this is the potential of smart contracts to really do everything regular contracts do today and you know obviously uh contracts are play a huge role in our lives pretty much everything you're looking at is a result of a contract the computer that you're watching this on or maybe you're streaming it from your phone as a result of many contracts to get the materials to build the materials to build the software these are all due to contracts so you know going from regular contracts to these smart contracts to the superior digital agreements is a huge advantage um for humans as in the world in general so chain link allows you to do any input in any output and a huge um a huge use case here is getting provably random numbers uh right now uh what a lot of people use to get random numbers is uh they use a little bit of they the excuse me they depend on the block hash and they hash the block cache but right now that's not a really safe way to get a truly random number if a minor is incentivized to get a different random number they cannot publish a block uh which actually screws with the with the with the fairness of your supposedly provably fair random application so we can't trust the miners we can't trust we can't have the system we're working on the block hash to get a random number so we need a better solution and this is where chain link of vrf comes into play chainlink vrf is a provably random function generator so it provably creates random numbers that are verified on chain that they're provably random it's it was developed by some very intelligent people saying provably random sounds insane to me but yeah all the code is open source you can go check it out and learn how this actually works uh there are a number of projects that are working with this chain link vrf and are using chain link vrf you know one of them being pulled together everything is in the documentation you can start getting random numbers right now to power your gaming your random sampling or whatever you want to do with random numbers and again chain link is capable of being used to work with any api and can be extended to integrate with any blockchain with external adapters and external initiators so this is really the power of chain link everything that you know and love about the internet you know right now it runs off of apis you can take those exact same apis that makes the internet run customize them however you want and put them into your smart contracts and you can do it in a decentralized fashion uh and then here's a snapshot of the docs uh page of the chain link api calls which we'll get to in just a minute uh but really quickly before we do that i wanted to just run through a few sample use cases of what you can do with chain link enabled smart contracts there's a blog out there called 77 smart contract use cases enabled by chain link i highly recommend checking out if you're kind of looking for ideas or looking for something to do this industry is still i i know it's been what five six years six years since ethereum launched it's there's still so much innovation to be done and so many protocols to be built into decentralized fashion let's just rip through a couple of them decentralized finance again i know this is a big topic but there's still so much to be built in this area and so much to do and and so much to so much to be learned here fantasy sports or any sports game in general any type of poker game or any type of uh rng game or any literally any game at all uh any type of tokenized asset split up your car pots of land you know making it real chainly makes it really easy to keep track of who owns what and you don't have to deal with any of that paperwork and since your data is coming from a decentralized uh source no one can mess anything up and then obviously insurance is a huge one that i'm really excited for more products to get into this space you know let's say your crops are messed up due to the weather and your insurance doesn't want to pay out due to some pre-existing condition or something well it with a decentralized smart contract then a decentralized insurance platform you don't have to trust that the insurance company is going to do the right thing because doing the right thing is infrastructural which handling so with that it looks like we have plenty of time to go through a couple of demos and uh let me answer a couple of questions before i go on to that oh looks like there are no questions hello hello stream up all right cool yeah feel free to ask any questions during this um i i'd like this to be kind of a more interactive session so uh if anything is confusing feel free to let me know here let me switch gears to this okay so we're going to start on the documentation page so this is the chain link docs this is where most of you engineers are going to come to just start learning about your projects we are going to go and start with the price feeds so each section is kind of separated like this let's go to price fees you can learn more about what each of the price feeds does here and all the code is here everything that you want to do we can actually just go ahead and click this big remix button and we can get a demo spun up right in remix and this is going to be getting the latest price of an asset so again if we head over to feeds.chain.link we can see kind of what these these feeds look like once my computer decides to load or i have to make it wider we can see what these feeds look like and we can see the different nodes reporting their different individual prices that all gets aggregated to this number right here and we can even click on it we go check it out on ether scan you know everything that we want to know is here we're going to look at these internal transactions and we can see it gets updated pretty frequently which is really exciting so on ether or excuse me on remix here i've done this a few times so i have a couple different uh a couple different contracts here we hit that button and the code's automatically populated right here and this is everything that we need to know so first we're going to import the code from the chain link github and this is going to be how we going how we define connecting to connecting to the the price feed that has this decentralized price something else actually that i didn't put in this demo that i probably should is for those of you who want to try using ens ens is now enabled which is really really exciting you can actually just use ens instead of um instead of these these address strings which is really exciting so we're on the coven test network right now or we should be uh i'm on the mumbai test network actually gotta reload the site test password and can you guys see metamask or can we not say metamask yep it shows up it shows up okay great um all right cool so um uh yeah so we're on the coventest network here uh i have already gotten my test eth and my test link and a whole bunch of other stuff in here if you need to know if you need to get a faucet to get test ethereum or test chain link you can find that in documentation too you can also go through these tutorials if you're brand new and you're still learning this will also go through giving you some test net eth and some test net link so they can get spun up and learn how to deploy a smart contract you know right now and and on a test net which resembles very closely to uh the ethereum mainnet i got a question so i'm going to take it how would it work to get iot data into a smart contract even chain link could it help to get data for example data from temperature temperature sensors right if there were for good examples and want a supply chain and cooled goods you could just put one sensor in a cooling box inside a truck and put the other goods outside the box um maybe i didn't read this right but um yeah so that's a good question so getting iot data into a smart contract that's a really good question actually um basically what you would do is you would take your sensor and you would have it uh you'd connect it via an api to your chain link node your sensor could just send the chain link node api calls or excuse me the chain link node could just make api calls to your sensor and depending on the output of those api calls you could deploy you can make a smart contract do something um you could uh or the other way around depending on the output of a smart contract you could turn on a sensor or do something with a sensor so everything just flows through apis um so with a sensor for example if you wanted to make it decentralized you would have many different sensors like weather is a great one you know if you wanted to get the average temperature of boston uh you just have many weather sensors you know giving that giving that temperature update to this chain like oracles that's a really good question and we've seen a couple projects who start working with iot data for similar use cases so that's that's actually really exciting are there samples to connect to nyc miami uh date date open data apis to retrieve city data probably i mean honestly if the if the api exists you can work with it um so if if you find an api that actually uh gives you that data you can work with it i don't know of any examples miami date open data apis to retrieve city data i guess it depends on what time what kind of city data um something that is really interesting is we actually uh we released a video on using google's bigquery google's bigquery has a ton of free data a ton of really cool data that you can use to combine with smart contracts to look up nearly anything or whatever is in their data library but that's a really good question so your the question here is kind of more on sourcing data and where can i find data if you can find the data you can put into the smart contract a question from youtube i have an erc20 token and want to use the best tools to make it an incredible asset what aspects of link could i use to add to this already deployed asset um so this isn't really related to uh link so much um but i will say that the link token does have a really cool feature called transfer and call i recommend you checking that out um yeah that's a that's a pretty general question what aspects of lincoln to use yeah i would say look into transfer and call or or the e uh the erc677 standard actually question from youtube could you please tell the main difference between connecting two blockchains private and public using chain link and polkadot or cosmos main difference between blog using chain link and polka dot or cosmos um between connecting to blockchains private and public oh oh oh um so it sounds like uh you're it sounds like you're confusing polkadot and cosmos for oracles cosmos yeah cosmos and polkadot aren't oracles um so i guess that would be the main difference so that's that's not what they uh that's not what they do that's not what polkadot and cosmos does so chain think is an article that's what chain link's uh primary function is it's to get data from the real world uh bring it onto blockchains unless you're asking what's the difference between connecting private and uh public blockchains in which case i would say there isn't really difference um actually we did a we did a demo with um we did a demo with a project and we showed deploying a chain link node to a private blockchain um so if that's the question you can absolutely 100 deploy chain link to a private and a public blockchain i suppose you could use chainlink to attest to states of different chains um you could um and that would be a really interesting use case and if somebody builds that i i think that that would be really cool at the moment that's not uh what what channel is primarily primarily used for but that would be really cool and if you can build it um i would love to see that that would be really cool but yeah sorry i'm gonna go back to the demo here and i'll answer some more questions soon um so yeah so we have we're on the coven network here is the address of uh what do i have 40 minutes left i think we're doing good either scan coven so we're gonna head over let's head over to coven's um copens network and we can see again you know we can see this being updated it's not as frequent because it's a test net but we can see things being updated here so what we do is we take this address and we add it to our aggregator v3 interface as a parameter in our constructor here and then we can call this get latest price function uh which these are are the variables that are returned and we're just going to do price feed dot get latest round data and just return the price um a common question is why is an int why not a uint and the answer there is you know as more and more interesting types of data are onboarded you're going to want negative numbers so in remix we're just going to compile injected web 3 so we're going to use metamask here let's deploy it yep and we'll get the link there and this is our contract and we get the latest price and we can see this is the latest price of ethereum and boom it's that easy and then you can use this this price to do whatever you want you know maybe you want to make a decks maybe you want to make uh update some type of uh um update some value on your on your um on your smart contract you can do whatever you want with this price because now you have this definitive truth this decentralized reference point on what the price of ether is so that is the uh that's the price feed let's look at the random number again uh we're gonna do remix first and then we'll switch over to doing like vs code with a with a smart contract development framework just to show you um kind of the uh like if you want to start right from remix so same thing you know we get this populated uh we're going to import the vrf code which is different we're going to inherit everything from the vrf consumer base and vrf is a little bit different there's a little bit more to it than just the the view function on the price feed what we're actually doing is we actually make a request to an off chain oracle that oracle is going to generate a random number post it back on chain on chain this there's a smart contract that's going to verify if it's actually random based off on the node's key hash each node has their own key hash and then if it's if it's good if it's a random number it's going to output it to us so before the price view was a number that was already generated on chain we were just reading from it so here we're actually making a request to the node the node is generating our request and then it is making a second transaction back on chain for us so it's a little bit more involved but again we have a couple different addresses in here we have the vrf coordinator address which is going to be the one that's going to be doing the verification and making sure the number is truly random link token address and then we have our key hash of this oracle so when we're choosing an oracle we actually choose the um choose the oracle and we say this is that oracle's key hash that way they can't lie about if the number is random or not and so here's here's our constructor and since we're inheriting the vrf consumer base we're going to ah the two parameters that it takes is the coordinator address and the link token address as well and we're going to give it these two two global variables key hash and fee again the key hash is the key hash of the oracle and fee is actually the link that we're paying to the oracle to to execute this request so similar to how whenever you use logic on the ethereum chain that computation costs eath and gas uh whenever you get data or chain link that costs a link in what i like to call the oracle gas so um once we deploy it we're actually going to call this get random number function and we give it a user provided seed so this is going to be a number that we come up with to kind of bounce off of again to check to make sure the number is random and we're going to call this request randomness function which because we've inherited from the vrf consumer base it kicks off that random number request to the chain link oracle and again like i said we're making two transactions the chain link node is actually going to respond on this fulfill randomness function and you can see it's our internal override function which means there's a fulfill randomness function that we're overriding to add these into it only the chain link oracle can actually call this and fulfill the random number and we're just going to store the random number into this random result variable that we're going to read and see what the round number is so let's go ahead and compile this injected web3 let's deploy metamask pops up can you guys see it when mad mask pops up or no maybe not uh i know you could before but i know this is like a different window in any case i think it was a different screen yeah it was a different screen yeah so so this is the same screen but the other one's a different screen so metamask popped up i hit confirm and now we can see this is our deployed contract here now i'm going to hit this request random number and it's going to fail and i just want to show you this because the first couple times you might run into this you're going to get this gas estimation failed again remember you don't have any oracle gas yet so we actually need to fund the contract with our oracle gas which is our link so we're going to copy the address like this we go into our tokens we're going to send it we'll send it to link just to be safe even though the fee is 0.1 just in case we want to get a bunch of random numbers send to link here's our transaction it looks like it's pretty much already gone through yep it's gone through so once we uh once it's gone through now we can make the request because we have the oracle gas to pay the chain link node so we're just going to use one two three as a random number seed in the documentation there's a note about choosing a random number seed to keep it really secure so you're going to want to check that out too don't always have it be one two three um so let's do get random number now the mask pops up in a different window we're gonna confirm and right now before the node responds our random result is zero so we actually again we have to wait for two transactions we have to wait for it to send the oracle's got to get it and then respond it might be done already [Music] but it also might not be so once the random number comes back you'll see we'll get a random number uh within the range of zero to the max size of a u into 256. so this could be a this most likely it's going to be a huge number uh another question that i get asked a lot is how do i take this random number and kind of divide it into other random numbers you can use a module function and basically split it up by the digits and just have multiple random numbers to kind of do less requests there and yeah here here we'll see here it's this massive massive massive random number um but this is actually wild because this is a provably random number um which is something that is is so cryptographically wild um that i think it's it's insane that we we actually have the ability to do this so uh so this is how the the chain link vrf works are there any questions about that all right cool let's move on and now we'll move on to our last one making a get request so this is uh just calling any api this is where you can really customize your smart contract to do whatever you want um we are going to be calling from this api right here and actually if we call it right now we can see what it responds it responds with kind of this massive uh this massive json object and we're actually just looking for we're going to try to get volume 24 hour we're looking for this number right here if you enter one two three again i presume it will provide a separate random number did i delete that oh yeah i just deleted it yes um yes yeah different random number but um so the this is where you can really customize however you want i do want to point out really quickly we won't have time to go over it here um external adapter chain link blog but this is where you can really customize it and really make it your own uh we have a blog on building uh custom external adapters and what you would do is you build this external adapter and kind of make the api do whatever you wanted and then you just swap this out with the url from your external adapter which is really really powerful there's i know i mentioned external initiators as well there's some documentation on external initiators those are uh those are a little bit more involved but you can do some really cool stuff with them as well so here we have uh our code for making an api call we're going to import from github as well and same thing as the vrf we actually choose our uh we choose our oracle and we choose the job id so choosing the job is actually really important this is going to define uh what is the return type of the job um and what else the job does so uh if you're looking for you know some custom jobs or some really interesting jobs you can head over to market.link um select the uh the network that you want there's matic there's binance here too which is awesome we can say you know if it maybe we want to find like a get an http get job that returned to uint uh we could see some nodes that actually have that data or maybe a get job that returns a boolean we'd see some other jobs that are some other nodes that that have that job and you click it get the get the oracle address and then you can go to their jobs and find um you know for example their job id so that oracle address plus this job id here are going to what you need to populate the oracle and the job id and that chooses the specific node and the specific um the specific job so and again same thing as the vrf we're choosing a link token fee to to give these guys out as a thank you for uh for returning our data safely to us so this is the constructor in here we're actually going to call this request volume data and there's a couple couple functions in here so we build the chain link request by inputting the job the return or the callback address which is going to be this smart contract that we deployed and then the callback function which we're saying is defined as this fulfill function so if we scroll below we do see this fulfill function uh which takes the request id um and uh and the return data as its um as its parameters and again this is why choosing the the job id is so important because you need the job id to return the same data type that your fulfill function has it also has this record chain link fulfillment modifier which means that only the oracle that you specified can actually call this function and then we're just going to set it to this this volume parameter so in this in this build chain link request we're going to add some what's called adapters we're going to add a get adapter we're going to say we want the job to get this url and again we actually only want this volume 24 hour so we're going to use this this path adapter or this copy path adapter to walk the json to get to this volume 24 hour so when we saw this response here we see the first key is raw the second key is e third key is usd and that's how we're going to walk to this volume 24 hour so that's what we want then we want to multiply it because solidity doesn't work with decimals so we need to multiply it by a number high enough to get rid of all those decimals and um yeah we add this times adapter and then we send the send the chain link request so we send the chain link request to the oracle with the request that request object that we built here right and we added the adapters to and we add the fee and then when it gets done it's going to call via this fulfill function so same thing let's compile injected web3 let's deploy metamask popped up i hit confirm and and we have deployed this again remember since we're making a request we have to send it link so i'm going to send to link just to be safe i should just max out the gas for these right because it's a test net and i don't really care how fast it takes um yeah once it gets some link then we can actually call this request volume data function right and this is what's going to make this api call if we hit volume right now it's a big zero so let's hit this request volume metamask popped up it's on a different screen sorry i'm going to go ahead and hit confirm and it's going to give me it's going to give me the transaction here for etherscan so again this is making two transactions on each so it's going to make the transaction the chain link node is going to read the event that's emitted it's going to go get the data and go do whatever you tell it to do i mean at the end of the day all these adapters are just saying hey do this do this do that so it's going to go get that data it's going to do whatever you tell it to do and then it's going to return the data in a second transaction which will actually update this number here and it looks like uh it is already updated and this is the volume for 24 hours there so that's how you can get any api and get any data into your smart contract again this is this example uses a single node in a single data source so it's great for testing and it's great for um developing but in a production environment you know obviously you want to use decentralized data because that's the whole purpose of developing with smart contracts but for i got a question from maximilian but for external adapters you wouldn't have an average or median of the data anymore or not um i'm not sure i understand the question so with an external adapter you wouldn't have a definitive or proven um average or medium right you're trusting that that api and that single oracle is giving you um the this this average this median and that's not what we want in smart contracts we want to have trustless smart contracts i mean that's one of the whole reasons that we do anything with with blockchain what is the definition of an external adapter an external adapter is uh is anything outside of chain link's core functionality so um any any uh any adapter or task outside of changing core functionality so if we go to the chain link docs um let me just go to adapters actually so this is external adapters which will tell you a little bit more about it but if we go to adapters these are some of the core adapters um that the chainlink node comes pre-packaged with so example we can we can have compare which compares values we have copy which is that kind of copy path thing that we saw uh with eth bull which turns uh you know a boolean true or false into an eth understandable boolean f bytes which does the same thing for bytes into the same thing for int etx which makes a um a transaction on chain adapters which are also known as tasks are just something that you tell the chain link node to do so an external adapter is something that you tell the chain link node to do that's outside of these core this core functionality outside of the core of these uh these adapters here so an external adapter is where you build something yourself you can hook it up to your chain-link node and make it do something really cool good question oracle notes whitelist consumers out of the box or do they just respond to anyone using the oracle address and the right job id uh they can they can't actually whitelist consumers if they want um but out of the box they just respond to anybody with the oracle address and job id but again if they set that fee um then they'll have to uh they'll they'll charge the smart contracts for it so but you can whitelist if you want i mean because you use an api that might be a centralized source for the external data yes okay got it good question so you can make it do whatever you want but you're still go if if you're getting data via an external adapter in the same the same exact parameters apply right you're going to want to get that data from multiple external adapters for multiple different sources good question can you get notified by chain link when a price hits a certain amount without your contract interact initiating the request uh yes actually you can um there are some there are a couple different really interesting ways to do that you can do what's called a cron initiator which kicks off a job um just whenever uh whenever you set the schedule and you can kick off a job that says like check for transaction um or you could do an external initiator where you build your own initiator looking for a specific thing uh yeah maybe this cron job kicks off uh you know a quick script that you wrote that checks their prices um but yeah you you can have uh i mean this is the this is the beauty of chantly you can really make it do whatever you want to do um so yes yes absolutely all right cool i'm gonna move on to uh my next demo because i only have a couple minutes left here share this one so in a lot of my demos i do i do npm i do truffle i do hard hat i did want to show you guys a python implementation actually of of developing and deploying smart contracts that i really like because i'm a python nerd i love python which is brownie so um because somebody plays mute whoever uh um thank you um uh yeah because i love python i love working with python so um that we have a we have a blog coming out on this um you can definitely check out the brownie docs on this as well um first you'll need you'll need python you'll need ganache as well if you just have python you know you can just do pip install i think it's i think it's f brownie i'm not going to do it because i already have it next what you'll need to do is actually uh install ganache i think this is the uh the command uh everything for this is actually in the chain link docs as well hold on i'm flipping to the docs i know that i know that you guys can't see the page one second so here's the chain link docs uh it does go over uh truffle it goes over adding you know with npm you just add npm install contracts chain the contracts you can do with yarn too this will open up a truffle project um and then here's how you do with browning you also you do need ganache so you have to do npm install uh ganache so let's actually flip back now and let me share my screen here if we have time we'll also do the uh the truffle demo um so once we have ganache and brownie installed right we can do which brownie we see that we actually have it installed or brownie dash version or or maybe dash version is wrong yep and so right now we have a blank um a blank folder and brownie has this cool thing called brownie mix or excuse me brownie bake link mix and this will actually open up a smart contract project that already has uh um that already has some sample boilerplate code in it it looks like i need to do this oh right here um it already has some some boilerplate code for our chain link smart contracts so um you can go kind of most of the smart contract development frameworks have a similar setup to this there's like a build or an artifacts this is where it stores all your already deployed smart contracts uh there's a contracts tab which uh right now this one comes pre-installed with the uh with kind of the three main ones api consumer price feeds uh vrf uh some images this is a fun little chain link brownie logo uh interfaces which are are really good for working with already deployed um deployed projects and then we have scripts which is what we're gonna use to actually deploy stuff uh and we'll get there in a second you have your tests uh and then the brownie config which will define a lot of stuff um kind of going quickly because we're running out of time and uh and the readme if you ever get confused just go back to the readme hop into the discord leave an issue um you know we're very friendly and you know the chain the community is really excited to help each other and and and have people uh be really successful here so we can actually just go through the readme too um you can actually just go through the readme too to get started um let's uh let's actually just scroll down to here so we do need two environment variables uh we do need to export web3 i'm not gonna do the whole thing um uh if you're a project id actually i can just copy i already have it um i already have it exported and this is gonna be your inferior project id um you can go to infira get a free key and this is how we're going to connect to the covent test net you also need your private key you also need your private key so same thing you're going to need to do export private key equals you know whatever your private key is cad dog you know mouse whatever you can get it from metamask or whatever wallet you're using just do export private key a quick note from metamask is sometimes it doesn't export with like the first ox so sometimes you'll have to add that on and there's a link here if you want to learn more about environment variables and how to set them and it's really really useful for just kind of because a lot of projects use them so we're actually going to deploy um a a a price feed contract here so we're just gonna do brownie run and if you do nothing um brownie should give you oh wait never mind it gives you nothing if you just do brownie excuse me it'll give you kind of like a list of commands and you can do brownie help and see everything again this is all in the documentation um to read and you can learn more there but we're going to do brownie run and we're going to run our scripts we're going to run this deploy script which you can see it's a pretty simple python script which is going to just deploy that's our api scripts actually excuse me which is going to deploy our priceview.deploy and we're going to use coven so it's going to deploy the coven fusd it's going to deploy a price feed using this coventusd address so we're going to do scripts running run scripts [Music] the right uh am i the right folder oh i'm not in the right folder brownie run scripts um price feed scripts deploy and then we're choosing the network we're going to do coven so the same way we did with remix we can do it with here um obviously the huge benefit of using a smart contract development platform is you can do the tests um you can kind of script out everything that you want to do tests are obviously really important for keeping your project robust um and uh and it allows you to kind of have this this fully um coded back end and then you can put whatever front end you want on it as well so it looks like we were able to deploy so pricey deploy that here if we want we can also do brownie console but i'm just going to keep staying with the scripts because i really like them so we also have this read price feed script which we're going to run right now and it's going to take the most recently deployed price feed so this uh from brownie import price feed this price feed object is a list we're saying grab the most recently deployed price feed and we're just going to read uh from that so same thing we're going to do brownie run scripts price feed scripts read reprice feed network coven and then this will say hey we're reading data from here and here's what we get and again you know this is the price of f in usd and remember so it doesn't work with decimals so great so this is the actual price so we have uh a little more than 1200 so this is kind of a real quick way to work with um uh brownie to deploy your smart contracts again it is pulling from your from from my um my test uh metamask account uh which is how it actually deployed this on the coventestnet so so that's that and it looks like i do have some time left oh we you can go forever patrick oh awesome uh got a couple questions i'm flipping back to these questions now uh how scalable is the channel network uh really good question um that's uh that question can actually go a lot of different ways so um more and more i mean the chain link team is is working and the chain link cores is working super hard on building uh you know brand new features to you know reduce gas costs add more nodes and do all these really cool things and again you know open source projects so you know contributions are highly welcome and you can see everything in the repo um but uh but yeah so so chain link is right now it's it's working mostly on ethereum and it's working mostly with you know popular uh cryptocurrency prices but really any data that's needed or wanted for smart contracts chainlink can uh can add uh and so right now we've seen fiat cryptocurrency but i'd love to see more diverse types of data get on so that's one of the the easiest ways and and most exciting ways for me uh that chainlink's gonna scale is add more data types you know add maybe weather data add political data um like anything you find in google bigquery on a smart contract so we can build these uh insane smart contracts that can literally you know replace current contracts so we can have this more trusted environment using these trustless smart contracts so so that's one major way that i can scale another way is that chain link is blockchain agnostic so you saw actually chain link is on matic who i believe is also sponsoring this this hackathon um so if they are and you saw that you know maybe that's a little little double whammy for you there um chain link and matic um so that's another way to chain these scales to is being on on multiple chains uh asking how chainlings scales isn't isn't the same as asking how like um like ethereum scales right because chain link itself isn't uh a layer one uh chain links to layer two right it's it's it's a it's an off-chain resource that's getting um data and bringing it on chain you know the layer one aspect of it obviously is the link token that really secures the network and has some um some awesome improvements to actually make the whole thing work like you know the transfer and call functionality so um so that's a good question uh that's kind of a long uh that's a really interesting question because uh of kind of the different directions we can kind of go on with that but again you know uh everybody who's here feel free to hop into the discord you know the community's super active always asking really good questions um and uh and usually i'm around and usually a lot of the people who work on on the core is around and uh uh you usually get answered pretty quickly so uh and it's really friendly community so feel free to hop into the discord um and that's where the majority of the the uh the the community itself next question ultimately chainlink solved the trustworthy messenger issue but what about the data source authenticity issue is there any work on creating a marketplace for getting real world data such as temperatures reward data such as weather in a trustworthy way sorry if this was already covered just joined in late no worries no that's a really good question so right now the closest thing to that is market.link which has you can choose the different oracles that you want and kind of literally build your own uh like build your own kind of price feed based off these different oracles uh which is awesome uh more and more projects are constantly adding different types of different types of data and adding themselves to market that link you know like i said the more um more nodes get spun up and the more people you start contributing the network the more we'll see more and more of this this is something we expect to come um at some point kind of have this this marketplace for data uh where you kind of show up and you just get this decentralized data right now that marketplace is these price feeds because these are pre-configured decentralized network that you can kind of just skim through and say hey i want each usd i don't want to have to build the network myself um and you can just you see all the transparency of that of that uh decentralized network you know you can see it all right on chain uh over at feeds.chain.link so that's a really good question like i said more and more data is being added um temperature uh weather you know those are things that are being worked worked on um it's interesting too because arbol is a is an insurance provider that's working uh with chain link to to get kind of weather data to provide insurance for farmers so so i can only imagine that this is going to come a lot sooner a lot sooner but maybe not as soon as we wish but uh not as long as we might think yes i also didn't understand that because the data from sensors is easily manipulated great question so this is why you want a decentralized network of sensors so in the same way that we're getting you're getting decentralized data for your price feeds you're going to need decentralized data from the sensors and so it's going to be for some of those trickier data sources it i'm i'm really curious to see the solutions there on how people decentralize those like for example like what's the temperature of you know a heart um in a in like an ice box like you were saying like if it's being tran or like an organ that's being transferred um i'm really excited to see the solutions that people come up with here right one kind of the easy one is just you add a whole bunch of different uh different sensors that have totally different infrastructures into this box um in any case it's going to be really interesting to see with some of the some of the solutions that people come up with here you know the easier ones is like weather data um you know if you have a city and you want the the average temperature of the city you know you can just you can create thousands of these sensors all relaying this data to this oracle node um that's just going to take the median of all these sensors so for iot stuff like that it's it's actually really easy um the hardware part is the is the harder part the uh the chain-link part and the oracle part is actually it's actually the easier part you know the harder part there would be like coordinating adding all these sensors how many nodes secure the link network at the moment a good question so right now if you head over to market that link and i'll even switch views here back to my back to my internet browser we can see some of the different nodes excuse me some of the different nodes on the different test nets again this is [Music] this is um but we go to mainnet too so we're different nodes and their activities um but if you want to see uh um so securing uh securing the the link network is um might be a little bit misleading because there's obviously you know many different networks because each one of these price feeds is uh is potentially a different set of oracles you can see you know xau usd i believe this is um gold or silver i forget it's one of those actually it's gold okay cool thank you um each one of these different uh oracles is bringing that data in for it uh and so like this network for example has nine so it depends on the price on the on the feed this one has 21 uh which is really exciting uh and more like i said you know more and more advancements are being made um uh like for example you know when ocr comes out there will be even more nodes because ocr reduces the gas cost by such an insane amount so these are the ones that are securing like the feeds networks right now uh but they're more than that kind of just in the uh in the overall chain link community what's the partition tolerance redundancy for data served um good question well for the price feed unable to show price rate okay oh it's probably updating or something maybe it's updating oh that's pretty cool maybe i broke the front end um uh but yeah you can actually see on the different price feeds you can actually you can set your own deviations you can set your own thresholds it looks like this one updates every eighty six thousand four hundred seconds or whenever there's a deviation threshold of 0.5 or more um so these nodes are actually monitoring the off-chain apis that they're consuming or you know most of them are actually monitoring many apis to get a to get a decentralized aggregate themself which is then again decentralized on chain um they're monitoring it off chain uh and then if they see hey there's a point five percent update you know we need to update the smart contract to reflect this change so it really depends on the um it really depends on the network um it really depends on the price feeds but yeah you can set it to be really whatever you want the added delay by any amount of time is that just for price feeds um uh yeah so that's that's a good question so the data is uh saying it's delayed i don't think is it is accurate um but saying it's it's you know up to the second real time is also not accurate so it's it gets uh each one of these have their own heartbeat right and whenever that heartbeat hits it makes an update or whenever there's a deviation threshold so if i said it's delayed that's not accurate because anytime there's a significant movement uh everything gets updated um so it's it's kind of this mix of being um being the the price uh with a heart with with basically two heartbeats so and the primary one obviously is the is the threshold uh the deviation threshold if there's a big spike or a big drop in price uh it triggers a change so this question might be too futuristic but is there an adapter which can link quantum randomness sources to chain link if it's got an api you can do it long story short so yeah do nodes get slashed for producing slash voting on bad data uh yeah this is a really good question actually so right now um nodes are basically monitored based off their reputation if they behave poorly uh they get kicked off these networks if they are responding outside the range outside the threshold if they're not responding and since the networks are pretty small you know the groups are really swift to basically kick them off and bring somebody better in um due to kind of as the network grows you know more and more nodes is going to be added to these networks but due to kind of how small they are at the moment um uh they get kicked off really quickly to keep them incredibly high quality um because that's kind of the main uh you know there's so much money riding on these these these price feeds you know i think it's something like seven billion dollars eight bit nine ten billion dollars of d5 is riding on these these price feeds being accurate uh which is which is fantastic so you know they've reached this level decentrality um that is uh that's really efficient uh for these protocols you know like fedex right like ave and uh but yeah since everything is on chain you know every every oracle's reputation you know goes right on chain so uh if somebody screws up or somebody doesn't respond everybody sees so you know when you're running a chain link node you really want to have a really high caliber you really want to have 24 7 monitoring there's there's a lot that goes into it uh because if you're down for even a little bit you're you're probably going to get kicked off very cool excited for some graph protocol chain link integrations uh yeah we i've actually seen a couple of those which are which are really cool um i actually built a built up a project that pulls from one of them which is pretty cool so um cool so i know we're at time um but jacob said i can go as long as i want jacob you have made a mistake no i'm kidding um let me let me switch views again so i know i showed you guys um i showed everybody here brownie um this one is yup this was python we could do a couple different things here um please hit us with more stuff okay great uh let me let me ask which what would you guys prefer do you want to see truffle do you want to see brownie do other stuff do you want to see hard hat i don't have a hard hat prepped but i could get all the hard hat stuff really quickly is there something in particular you want to see truffle hard hat uh-oh [Music] we're getting a battle i'll show i'll show truffle um because truffles uh truffle and hard hat are pretty similar um let me go to this um i've also written a blog and a couple tools you know if you google actually let me just flip back real quick um you know uh q who said hardhat if you look up hard hat chain link i believe oh yup you'll get my repo here uh which shows how to use hard hat and chain link uh which is uh hard hat is actually really cool because it's got this kind of like this forking thing built in i definitely check recommend checking a hard hat if you haven't before but let's switch back i also wrote i wrote a blog recently on kind of the best smart contract developer frameworks and uh um i found that it's it's definitely gonna be truffle brownie and hard hat um truffle has a hard hat some really cool improvements so um so this is my truffle uh that's my truffle file uh this is similar to that brownie mix um yeah if you haven't heard of hard hat yeah definitely take a look um it's it's really powerful so this is my truffle file i already already built it again truffle is um it's from mpm so you do truffle npm install dash g truffle and this is how you get it it's built into scaffold e take a look at that oh is it oh i didn't know that um that's really cool yeah actually uh the the forking feature is is really powerful with hard hat um truffle actually does have a hard hat or excuse me a forking feature um but i i do like hard hats a little bit better it's a it's a little bit easier i didn't know scaffolding had a um [Music] uh yeah here i'll send you the link for for the chain link hard hat one i didn't know scaffolding had uh had a hard hat building that's uh that's really cool yeah bill yeah builder is now hard hat yeah they they recently rebounded or biddler or however you pronounce it that's that's why they they rebranded because it was like built builder biddler what um uh yeah i feel like now we have to do hard hat um but yeah so here's truffle um this is made with truffle and box smart contract kit slash chain link or excuse me slash box i'm not going to do it again because i've already done it here you can see everything in the readme oh actually this is the outdated one there's an updated one with price feeds in vrf which is really exciting so again npm install uh you know and everything's going to be in this this config so we're again we're pulling from mnemonic and rpcrl so mnemonic is going to be that cat dog mouse cheese whatever from our our wallet so we export it um export it from our ethereum wallet and then we export it as an environment variable um in our uh in our project here and then rpc url um this is going to be you know like your your web 3 url like if you had infira it's going to be the whole url string for that so we export those the same way as with python you know export rpc url equals www.infira.org covan you know or whatever it is uh again uh if you're unfamiliar with environment variables definitely check out that twilio the twilio link in the python chain link library now that we're bouncing around platforms and languages we might get confusing here um [Music] but yeah and then i believe you know once you've unpacked everything you can just run the your basic truffle commands i've already compiled here the readme says to do the npm but i believe you can just do the truffle ones so this is going to deploy a my contract which is our like api call thing again the newer version of this has uh price feeds i believe so uh we'll do truffle um [Music] exec uh or excuse me truffle um migrate network or i think i said it's live on this one right network live yep and then we're also going to do reset just in case so reset hard resets even if you've deployed so great we're deploying to truffle or excuse me we're deploying to the kova network right now because i have this rpc url defined as coven and we're going to see the those uh the oh so familiar truffle deployments here i'm going to deploy my contract which my contract is just a little bit more advanced version of that that api call bit that we saw um i should have updated this for the demo apologies there then we do truffle exec scripts fund contract network live we have a little fun contract script this sends the link that that contract needs to uh to make that uh to make the request to the chain the coracle so we're actually going to fund it you know via script which again is one of the huge benefits of you know doing everything in a smart contract development framework we can just script everything that we want uh jason i know you said i'd go as long as i want i will try to um rap sorry jason jacob apologies i don't know i came out as jason jacob i will try to not go too long um be conscientious people's time here um but so we just uh we funded it right there we can actually go and see um oh wait can you guys see my uh vs code yeah it's coming through yeah it's going through okay cool uh yeah we could see this if we copy paste it to etherscan i'm not going to do that because then i'm going to flip back and forth but then same thing we're going to do truffle exec scripts request data network live and so this is exactly what we did in remix just now it's all scripted out you can see all the scripts in here and this package is actually uh this truffle box is actually really nice because the tests are phenomenal um and so if you want to see a really good way to write really strong tests um in web 3 you know with any smart contract in general definitely check out this my contract test it was made by thomas hodges who's just a phenomenal [Music] smart contract engineer so we've funded it with link we've made the request we can see the request was successful that means the link went through which is great and now we're going to do this read contract which after we've made the request the chain link node is going to fulfill the request post the data back on chain and we're just going to read from it again truffle exec scripts read network coven and this should give us i believe this is the price of ethereum as well and i ran into an issue unknown network coven that's because we said it's live not coven and we got zero and that probably just means it hasn't responded yet we could probably check back in a minute but that's kind of the basics of of what you kind of look like here or you do truffle console live and you know this will bring you to the truffle console and you can you can do all the same commands um in your script here so like i could do let mc equals my contract dot deployed deployed oh i need to do await excuse me because this is javascript mc it's already been defined let's do mc and cc so i can do mcc.data.call and this should give us the um oh right because javascript does this weird stuff let's leave uh or exit i forget how to exit it actually control c yeah um that's how you get into there and uh is it just being really slow for some reason all right it's just being really slow for some reason and uh doesn't want to read but that's how you'd interact with truffle there going through some questions are there depths actually using the vrf feed would you vouch for the vrf feed on record xd how is getting a random number not a standard contract on zeppelin already um this is a really good question and the answer is uh 100 yes 100 absolutely and i've written a couple of blogs about this um so there are um [Music] there are basic ways to get a random number um that are just that are not secure right if you want to get a if you want to hash the the block height and use that as your random number absolutely but as i said if any of the miners have anything riding on it and they you know they uh they create the block that you know uh they create the block that would give a um give a different winner than what they wanted well then they just wouldn't publish the block right and so if you have a big mining group um kind of doing this now you've basically you know taken your fair lottery and it's completely ruined now right it's not fair anymore um so the reason getting random numbers in computer science is hard right uh because in computer science systems are deterministic even when like in your python or your javascript when you say get random number normally what it does is it just looks at a location and it just reads off of read some numbers and because it says okay this is random enough right these uh deterministic systems can't create random numbers now blockchain where the entire thing is deterministic and everything is on chain um it's even it's even harder right because everybody can see everything so saying oh i want a random number in a deterministic environment it's not possible right so in order to get around a number we actually have to look outside the chain to get a random number because because i see what your your kind of question is here right so if you want to create a pseudo random number absolutely go for it you know use use the block height use the block cache but if you want to get a truly random number uh where your protocol is not going to get hacked and it's not going to get attacked and again you know this is something that we have seen where people use pseudo-random numbers and their protocols um are injured that's the wrong word or injured because of it um yeah you know if that's what you want is great if you're if you're building a random system that or you're building a project that doesn't need a truly random number um go for it but if you need a truly random number if you're doing a lottery you know maybe some random sampling um or maybe some some high value gaming or even low value gaming or you really want to have a truly random game uh then you're going to need to use chainlink vrf and yeah that's not why it's not an opens up one because open zeppelin does um on chain uh contracts so uh opens up one's awesome by the way if if any of you guys are are building any projects uh definitely use open zeppelin for for reference they they build amazing stuff that's a really good question that is that is a really good question the answer is because blockchains are deterministic you actually can't get a random number a truly random number from inside the blockchain itself i guess zeppelin deals with smart contract-based libraries rng is something that requires either vrf yep it looks like oh yeah i didn't even see that you guys answered this that's why we invented lava lamps um yeah definitely interested in security properties of erf yeah definitely go check it out um there are some really brilliant people that worked on it um jacob i know that uh we you know we've super gone over um if people are interested and if we have time i will gladly show you guys hard hat if not we can jump off are there people who really want to see hard hat give it a second for the delay all right no yeah because because hardhat's really similar to um to truffle actually yeah if you fork um jacob we have time to do hard hat or uh should i just point them in the direction of the the readme there oh we got two yes now is it okay if i do the the four yeah if it's like maybe five minutes that's probably fine all right all right cool yeah i'll do the uh you guys can all see my thing still all right cool i'm gonna change screens real quick oh no welcome demos oh i messed up all right one second cd share screen there's got to be a simpler way to do this turn that card out okay cool everybody can see uh check the card out so same thing what's up yes cody you can see me typing around and stuff yep you're good all right great so um so same thing you know uh everything is in the readme for a quick start if you guys want um you can clone this repo again uh let me even i can even drop it in the chat here including this repo everything is in the readme so we're actually going to be using this alchemy mainnet rpc url so we're actually going to fork mainnet so we can deploy our contracts as if we're deploying it to a mainnet which is uh wildly fantastic because we can work with mainnet price feed addresses which is really cool um so same thing we're going to export our alchemy mainnet rpc rl and our mnemonic you know exact same as before you can see the example right here uh and this is with yarn so we already cloned this and in the uh in the hard hat config we have this uh this networks bit down here and this is where we define um the networks that we're going to be working with and why i think the hard hat forking is so simple is because in your networks uh we call one network hard hat and this is going to be our default network so whenever we you know run a script we just don't say a network it's going to default to this we're going to say it's default hard hat and the forking url that we're going to use is this mainnet url so um this is all you have to do to add forking in hard hat which is why it's so fantastic so you just do forking url um you can also do a couple other things i i to get it but this is the simplest way you know and then you can add the other networks as well um so we have price feed here we have deploy i didn't build a read um i didn't build a read command here but what we can do is oh we can run test um i forget what's in test actually oh not not too much actually uh we're working on updating this uh but yeah so we can do mpx hard hat run don't set a network uh and then we'll do scripts deploy.js that's what this is actually going to do uh which is really cool it's going to deploy this oh oh no i did i did i added a read to deploy the to the deploy thing which is really fun um i forgot about that yeah at the price weight get latest price oh cool so we deployed it and we read um so this actually deploys so hard hat has what's called a hard hat um uh virtual environment i believe or hard to have runtime environment you saw how fast that went so it actually forked mainnet um and we used a mainnet address to deploy this is our deployment script um price consumer either stock contracts we're deploying oh in the contract itself we're using a mainnet mainnet fused address so it actually forked the main net deployed the smart contract and then read off of it back to us so uh tests run really fast on our dat um because it uses this runtime environment instead of ganache and you know you can do this forking so those are some huge pros that hardhat has which is a really cool hard hat hard hat hard hat um al grand and cardano use vrs for the entire block production selection of staking pools so you can bet it's very secure however it all depends on the original seat data okay interesting user forks yeah um this is probably my favorite use of forks because then you can test with maintenance so that's kind of the simple overview of hard hat um uh like i said you know the setup is really similar you know it has this hardhead.config really similar to the truffle config the difference is there you have these tasks so i believe we do hard hat accounts and it'll print out the accounts yep so hard hat is kind of the the shortcut for it and any anything you add as a task you can just add that task there you can code whatever tasks you want and really make it do whatever you want to do so i i probably didn't even need to do the scripts deploy um i could have just set it as a task but um yeah you know artifacts are up here this is where um a lot of the stuff is going to compile you have your cache known modules obviously um and uh yeah pretty lightweight also ether's js that is a yes yes thank you jacob ethersjs is super clean but yeah i know i've run super over and uh if there are any questions speak now or forever hold your piece until you get onto discord and ask it there all right cool well uh that seems like it's it well thank you all so much for uh for coming and asking for these really insightful questions i'm super excited to see what everybody builds this is going to be a fantastic hackathon uh you know the youth global team always puts on a stellar event you know we're really excited to be here and be participating and uh thanks so much jacob and the whole team for having us here awesome nice to have you patrick thanks for going all over all of that and uh yeah again also thanks for changing being a sponsor of those events and you guys have been on so many of our events and uh it's been amazing to work with you guys for so long so thanks for coming back and looking forward to see what people build on chain link thanks everybody awesome 
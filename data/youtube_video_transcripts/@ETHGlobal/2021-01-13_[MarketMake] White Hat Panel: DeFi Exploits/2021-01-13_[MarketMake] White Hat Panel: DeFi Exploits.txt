hello and uh welcome everybody to the uh d5 exploits panel i i want to thank heather andrew and the if global for organizing it i'm joined with uh by five of the greatest minds in the ecosystem let me introduce myself first real quick my name is mariano conti i used to be head of smart contracts at the maker foundation lately just a figurehead and d5 floating around waiting to see what's what's up but for now i'll be i'll be your host for today so let me start with the introductions i want everybody here to just say a couple of words about um what you do and then please just uh yes or no if you've been personally wrecked uh in a d5 exploit so let's start with uh sam all right cool hey everyone uh i'm sam i'm currently a research partner at paradigm and what i do i mean you know find bugs report bugs help white hat hack funds back if there's a problem um and personally involved in getting wrecked not yet but you know that never say never thank you um morrelian you want to come next sure um so uh i recently joined optimism layer 2 scaling solution as lead security engineer uh prior to that i was one of the original auditors at consensus diligence uh and i still keep in close touch with them as an informal advisor oh um i've never i've been wrecked on defy i don't think but i've definitely lost crypto in other strange and exciting ways [Music] we can we can get to that later um emiliano hi everyone it's a pleasure to be here and uh i'm emiliano bonaci and um i do d5 uh most in my spare time i'm a builder i participate in several staffs and the integration academs i used to work in d5 for some project but now is not my main duty i mean during the day mostly during the night and uh as some said i participate to helping sometimes to you know investigate what's going on in on security breaches and uh to be honest i never get wrecked for an exploit but i get wrecked with some liquidation let's see so playing it fast and loose with uh with your vaults or or loans with you but yeah okay uh team shop hey everyone i'm tincho i've been like for more than two years already a security researcher open suffering while doing research from mostly doing audits as well uh so long been exposed to defy and an ecosystem nope and so far i haven't been i haven't been right fingers crossed i know lucky you well um let me just say it's uh as a fellow argentinian it's uh it's so encouraging to see a company like open zeppelin you know uh be founded in argentina and with so many of uh you know my country men and women being setting an example in this ecosystem so cheers um and finally doggy b hey everyone uh so i've been in the space for a couple years now usually as an independent consultant and work on various projects including urine now i am the maintainer of the viper compiler and several other python python-based projects um and help add them in the yes security space and so far been i guess paranoid enough not to have been affected by any any issues and hopefully that remains the case in upcoming 2021. excellent um well those were the intros so let's get right to it uh you know 2020 was an incredible year for d5 right we started with uh much less than one billion dollars in total value locked and as of today it's what like 21 billion dollars and as always as you know these numbers increase and the popularity of protocols increase uh so does the risk of some of them being hacked uh or exploited and i wanted to start with seeing if you make this distinction um so julian butter actually calls some of them hacks and some of them like clever or beautiful arbs you know i wonder if you agree or disagree with that like for example uh pickle the the evil jars that might have been a hack uh and then something like harvest uh he would classify us in part do you agree with this do you disagree and whoever wants to answer i mean i have to admit i don't really know what uh the details of that harvest hack believe it or not i don't read every postmortem but uh i don't think i see a big distinction like if somebody loses money they didn't in a way that they didn't anticipate or expect um nor the developer through malice then feels like an exploit to me yeah i guess i would agree with that and i guess the distinction perhaps is that the logic error was like you know either internal to the contract that the developer created or was kind of external through their misunderstanding of how to interact with another component and as we see you know more of these d5 money lego stacking behavior that misunderstanding how to use an external protocol is just as dangerous as you know making a logical error in internal uh to your contract and luckily since you know since 2017 in the ico boom um a lot of those internal errors we've we've created tools and and methods of detecting them so a lot of that has uh minimized and now we're moving to this like you know external how do we understand the system how do we interact with the system and that's kind of the next frontier of of uh security and for ethereum i think i i agree totally with i mean uh it's a really let's say graham arbitrage versus unexploit i mean this is the area where julian wanna play i would say that as soon as you know you have a let's say um a bad implementation or maybe you are not using correctly external protocols and you are target of this kind of stuff basically it's not an arbitrage it's an exploit so like traditional markets uh where we don't have any sort of you know smart contracts or whatever if you uh let's say um push the environment or push the other arbitrage spots to behave in some way basically you are conditioning so this is not playing fair let's say so uh for me they were not maybe an attack because an attacker it's more something hard but for sure they were exploits and uh maureen took very i mean boldly as soon as someone lose money and this is something that it's not expected to be then it's a problem yeah i would say i agree with that but um i would put the focus on the word expected right uh like for perhaps for the attacker it is expected for somebody to lose money right because it's attacking the system uh i'm 40 common people using it obviously not so i'm not sure to what extent uh expected or unexpected is is the right word i don't i'm i like i this is like a discussion that i've had with many professionals already and it's a discussion that i'm coming with myself and my bottom line is like what people have just said like if there is people losing money probably is not the best for the ecosystem and there is something to be learned and to be fixed in the future i'd like to ask how you know we have in this panel independent researchers people working for uh or that used to work for big auditing firms i want to know how you approach looking for vulnerabilities uh in smart contracts you know for example sam i think i saw you live stream once and i was surprised to see that it was mostly reading from github and uh pacing to remix and and running it there i was uh i was surprised yeah i mean i think um you know tooling is great it you know for for the regular developer it really helps them catch the like the the very simple classic bugs that we've all come to know and love you know like using black dot block cash but i guess it's just block cash now um on the current block or past 256 blocks um there there was a study that trailer bits did where they found that i think it was like 50 or more of the bugs that they identified in their audits were probably not ever discoverable by tooling um that's sort of something i've sort of held as a belief before i found out about the study i think really it you know tooling is not the key when you're looking for bugs it's really understanding the code understanding the patterns that you need to be looking for and that's why for me like my tool set unless i'm dealing with a huge code base like xerox um is just github and remix um in terms of process i mean you know the the big question you want to ask yourself is like what what is the goal right you can't you don't get nothing done without a goal and for attackers the goal is usually you know to drain the money or drain the eve or during the tokens um and so my process is usually start there right like if the contract has no way to send ether out or has no way to transfer token out there's no point looking for your bugs because it's impossible and likewise if there is a way to transfer the tokens out that's where you want to get to you can start working backwards from there instead of working forwards because you have you have you're starting from somewhere that you know it's reachable right you're not starting from the entry point and then sort of you know like you're not sure where you're going to end up right you know exactly where you want to end up it's the part that sends the ether out um i want to know somebody like you know doggy yearn is probably one of the ecosystems that's most integrated with so many other protocols and yeah yeah so i usually hear uh android say i test improv but that's only a half truth right it's uh you need to put things into ethereum mainnet in order to properly interact with you know the plethora of protocols that are around but there's a lot of things that you can you know you can fork mains mainnet state and tests like that up to a point right yeah i mean i usually would paraphrase that that uh that you know everyone knows that phrase but i would usually paraphrase it as experiment and prod because you know um you can get an idea of whether or not something works and you know people like andre they do this they do a lot of experimentation like off chain and local development networks and stuff but at a certain point you kind of only really get a feel for how something works by actually trying it and that's the experimental part so when i first got involved with urine like the design was a particular way and uh you know i saw a couple points where i wanted to like give a little bit more of a barrier uh between like the aspects that interact with external systems and that was really the kind of the genius of the strategy involve dual like architecture so you create this barrier between the external system and you have some sort of you know trusted entities in uh using that strategy that can do a migration or you know pause it stop it withdraw like they have a lot of actions available to them and they can react quickly and then that's connected to the vault which is the user-facing portion where we want to obviously be more careful um with how users interact with our ecosystem and that's also a point where like because it's externally available to anyone then that can be used in an exploit for like uh you know some sort of recursive behavior and i think we've seen this in the past uh with like how we interact with curve and then how curve interactive with another with another system you can create a loop um that a hacker could exploit in order to gain money because of you know uh depositing affects the price and then the price affects the curve price and then back to the other ecosystem and then it kind of all loops uh over again um sorry i kind of went a little off topic there but uh no no that's okay that ended up being a pretty common exploit uh during the summer right yeah yeah so um i would say there's like there's a couple variations of it but like the first idea is that if you can create a loop between like a lot of the urine clones fell into this trap where you can create a loop where the depositing and uh i think calling the earn function which moves moves the funds over to it could affect the price of the protocol it was invested in and then you can call withdrawal to actually drop the price because you've created this up and down action on the price of the external system you can actually manipulate that with a flash loan in order to extract value more value out of the withdrawal action than you got when you deposited it so that was one of the major changes that i ended up making was the there is no way for the deposit action to trigger um a deposit into a strategy um that that is a permissioned call that only um the strategy keepers can call so that that prevents that action from happening and then the withdrawal is also kind of um i guess the withdrawal is like the most important call to look into because it you do want users to be able to extract funds from the underlying strategies otherwise they won't be able to get their funds like 100 of their funds at all times which is something we want to you know move towards so with withdrawals we analyze like the ability to uh suffer a loss in the strategy from doing withdrawal if you're in like a leveraged position or something like that and just making sure all the bookkeeping is accounted for there interesting and uh i want to hear from from tincha and morellian like their experiences with you know big audience firms and do you know how uh like what the process is like uh over there yeah more or less uh i could start by saying that it's it's different from like going into etherscan and just looking for for transfer for external calls and so on when i when we approach knowledge we take a more like holistic approach uh because we are not only trying to break the system in your possible way to steal if the response is possible of course uh but we also take security like from from other perspectives of how mature the system is how we can improve in the future how sustainable and maintainable it is so annoyed uh usually is a more comprehensive snapshot of the project at some at a point in time my particular approach is an auditor i usually go bottom up in the sense that at the beginning i don't want to be like misguided by the documentation that developers put together so i like only trust the code and i will just start looking at the code and reading like line by line the functions and what is intended to do and from there i will like start building like the bigger picture of of what's going on at the end of the audit my objective uh is trying to get to know the system even better that the people that design it i i feel that i need to learn all the rules about the system so as to be able to understand what can be broken right if you don't know the rules you don't know what are the rules to be broken and we also auditors putting ourselves in the attacker role we need to understand what are the actual rules we've broken and to do that well you need to understand fully the code and to again be able to understand it even better than the developers it's a super big challenge but i know it's exciting and always always something new comes up yeah um it definitely like what intro says about uh about maybe like not just thinking uh what's the worst thing i can do and how can i do that immediately um is is probably like i think one of the great thing great greatest differences between uh how i imagine uh you know like basically like main net bug hunting is which is something i i kind of started doing like i had a bit of a hiatus between jobs and i i just started doing that uh for the christmas holidays and found that really fun and i think it and and through observing basically what other people and in particular sam were doing just through comments i sort of have been trying to shift my mindset a little bit more to just how can i break this let's just try and do that as quickly as possible um which is a more fun approach really but with auditing um i tend to have a very visual sort of approach to things like i really want to see the how the system fits together and um and what all the moving parts are and and so i often uh there's a tool that diligence uses it's open source um called surya and then there's like a vs code extension that uses it which makes it really easy to to build call graphs and and that sort of thing and just see how the like the various code paths um so i lean pretty heavily on that um i sometimes use tools just to kind of like prompt me so if i don't know where to start in the code i'll i'll run like a scanner like myth x or slither just to sort of you know it'll it'll probably land on the most complex area of the code if i look for an interesting warning um so that gives me a prompt kind of to go after uh and uh and then also like uh what i'd call threat modeling uh so thinking about like intervention to actors and and and permissions and roles so so really trying to break it down into who are the different players here what should they should they not be able to do and we still see a lot of access control bugs where just there's a missing modifier somewhere and um that opens doors for bad things to happen a lot and um emiliano i i remember you found for example the the curve voter proxy uh vulnerability um in yeah for yearn and then i became obsessed every time there was a there was an exploit your uh your twitter uh it gave detailed explanations of how this exploits worked and and they were great learning experience and uh you've been in in plenty of war rooms actually uh i'd like to know you know what it's like and you've probably been in war rooms with the with some of the people in this panel um can you tell us you know uh whatever you can reveal about uh you know what how that works uh sometimes probably before an exploit is uh you know it's sometimes after somebody has already exploited a protocol but uh oftentimes maybe before and how to fix can you uh yeah with some idea yeah uh it's it's an interesting question because uh if you look behind the scenes uh it's um you can understand more how is natural the the approach that we use generally uh everything starts with a message on telegram from someone with are you up uh it can be you for instance me that contact maybe sam or ask them or maybe directly for instance for curve finance recently for the problem with idol and with synthetics recently for the short collateral issue but yeah there is a a distinct branch between if you catch before the issue or after before if you catch before it's quite uh i mean easy because you contact directly the founders of the platform or the contacts that you have to use most of the projects have contacts that you may that you have to use for uh disclose the issue you don't have to be shy i mean if you find out that probably is working you have to contact them for instance with why earn i i did another time and it wasn't an issue but it's better if you you know uh alarm one more time instead of not alarming at all so before that you have all the time to discuss with the um with the projects about the issue to let them explain and to explain how to to do the how to replicate the issue and after the moment that moment we will discuss after maybe uh we will ask course to send because uh he got that beautiful piece for the dark forest uh taking an action could be something dangerous because you know we have frontrunner generalistic bots that can do the same i mean replicate you front run you and create the issue so depending on on the sides of the problem uh then you have to take different action but i mean if you catch before it's quite straightforward if you catch after i mean that someone broke already the system you don't have so much time so i uh found out that especially new protocols uh are not used to security processes that we have in you know traditional computing companies or in general and traditional companies so setting up a room basically a war room where you have all these stakeholders of the protocol and all the analysts or people that help you to understand what's going on and which could be the first action to do it's essential it's essential for taking an action and at the same times to organize the communication so these are two elements critical for the for the platform because if the user start to be you know scared becomes harder to to to i mean adds a lot of noise so basically when you start a world what you do is what i did on twitter basically so you try to analyze uh what what's the exploit keys so you try to replicate you have several tools you have command line tools or that beautiful website if tx dot info that help you to graphically see what's going on and if you are able i mean to understand where is the point the first action is okay how we stop the protocol how we put the funds uh safe and uh depending on the case this could be okay setting up the limit to zero for for instance y earn for a specific strategy or maybe upgrading the contract with a dummy one that doesn't allow the positive withdrawals for instance with the the recent acts to work finance or maybe do the exploit yourself to size the fund because you don't have any sort of other action so the idea is take the action promptly uh avoid to to get front handed and in this sense you know dark pools or services like uh you know taiichi could help in this sense and that's all i mean after you basically put the protocol in a safe zone then it start all the second part that is quite important because it's communication so you have to support the protocol for leveraging communication correctly so you don't have to rush too much you don't you have to communicate consistently so you have to say okay we we are taking an action we are going to update you regularly um on on some time frames or every two hours every six hours and then do a very uh let's say perfect postmortem explaining what happened and how are you going to you know uh it's basically uh in traditional companies is called correction of error so basically uh how you avoid that it will going to replicate hand how do you basically um let's say uh help the users that maybe lost fonts that's the this idea but explaining like this seems to be very structured but if you participate mostly of the time especially at the beginning you see that it's not so organized it's quite important that someone inside the group take the lead somehow and do order it could be also not not technical to be honest but in this kind of uh situation you have to be very you know uh organized otherwise it will be a mess and uh more time pass more easier i think the follow-up yeah sorry uh the follow-up with what you know emiliano is saying it's about preparation so um you know one thing that we really uh got set up uh like around 2018 was like setting up a security group where um you know people could figure out how to get contact information for different projects and that's like one of the ways that um you know as a community we're prepared to respond to these scenarios because if you can't get in contact with them you can't uh find the right person to help you solve the issue um like as a and then as a suggestion to you know development teams out there it's a great idea to have like defined procedures or at least like a good understanding of how you're going to react to different types of events like if you have an upgradeability system you know maybe think about different ways you can like upgrade quote unquote to disable the protocol in different ways and just kind of spec that out or have a contract ready to perform that action so that when you're in the scenario it's kind of an emergency scenario where you need to take action quickly you can just follow the procedure follow the you know the deployment script that you've created in order to resolve that quickly so you don't spend precious time when you're in this kind of war room scenario and you're stressed out about what to do and if you're gonna run into issues with the dark force like emiliano was saying having all that planned ahead of time gives you more you know emotional and psychological head space to think about how you're going to do those actions without suffering you know worse consequences than if you didn't and emiliano mentioned the you know sam's amazing escaping the the dark forest um i you know on the one hand i i hope that sam never has to write one again because that would mean that we wouldn't have another uh defy exploit again but i guess it's inevitable right um i i think your article was really good that it uh it brought to a broader audience like how uh some of these hacks happen and you know for everybody who had already read uh ethereum is a dark force by by dan robertson in this and that one uh the monsters one but in escaping the dark forest you ultimately won that time can you talk a little bit about that or maybe another one that that we don't know about yeah actually it's funny you mentioned one that you don't know about uh there was a fun incident that happened a couple weeks ago that um i i'm sure there's there's an interesting part to it that someone else is planning to write about so i'm not gonna spoil that part but uh we had to rescue funds from a wallet that was compromised um and the so so the an attacker was running a sweeper on that wallet right so when you send ether to it it would immediately sweep the ease out and so you know we were really considering how can we get tokens out of that um in such a way that you know the attacker doesn't pick it up and uh i think so so in that case we actually we we considered a lot of solutions um if you haven't heard about flashbots it's a project that uh tina and co are working on in phil um and they've got you know this this api that very much resembles what we used with uh tai chi sharing escaping the dark forest um we considered using that but unfortunately it was a bit slow for um getting the tokens out uh so in the in the end we we managed to get it out with um just the blowing contract that performed all the requisite operations and then quickly quickly uh getting transactions out from the compromise wallet there's another story in there about getting the nfts out which uh i'll leave for the other people to tell us um i think yeah it's definitely fascinating um you know what what's happening inside bimpool in ethereum uh there's really not a lot of visibility for everyone um you know you have block native who are doing like a really good job with their mempool service but i think we're still really in like the early phases of observability where we have this giant pipeline of raw data and we're not really sure what to do with it and hopefully as time goes on you know we'll start working on better tooling we'll start working on better processes and eventually we'll be able to process all that data into something that's actionable and something that gives us actual signals into what's happening rather than this giant fire hose of noise yeah and uh it's great that uh that you mentioned block native i uh disclosure i'm an advisor to the project i love them and they uh they they try to shine a light on on the dark forest so uh any recommendations like uh please they're always open to you know improving uh improving their product um i wanna ask uh moralian something i saw a tweet that you uh when you joined optimism your first order of business was designing a bounty program and you were asking white hats and projects for input and i want to see what uh you learned about that because it's uh it's weird right maybe you know white hat can give you what fifty thousand dollars from a project that has 500 million in value locked so can you talk a little bit about that yeah absolutely i mean thank you to everybody uh i got so much help with that project um it was fantastic uh there was there was so much good stuff i mean i i think that the so so bounties i i think they're they're something that comes up a lot and and maybe the first thing to say is you know how do you think about a bounty the way that i i think is is one way of thinking about it at least is that it it's at least so it's it's a way of incentivizing uh talented people and there's a scarcity of the talent that it requires to find these kinds of exploits it's way of incentivizing them uh to your code base um so in that way it's something of a substitute for an audit i won't get into that i really don't consider it to be a substitute for an audit um but it serves a similar purpose in that sense and that it's eyeballs on your code looking for bugs you can also think of it as simply like the way you want to find out about bugs so that's a little bit more where it is perhaps an alternative route for a talented security researcher to get some compensation um and i there's often you know people like there's there's always discussion about trying to peg the payout to the amount of money that was on the line uh there's just they're so um divorced in in scale in in our space that i think uh that's almost you know if you trade like 10 of like 10 million dollars is still more than a lot of teams have to pay uh and if they did pay it they wouldn't really be able to continue paying their developers for very long um [Music] so really i think of it as like you know it's just it's way easier than trying to launder money um and way less stress knowing that you um you uh operated legally and are not going to have anybody coming after you and and didn't don't have this these ill-gotten gains as well as more ethical uh so you can sleep well at night um other things that i learned you know the importance of uh so my understanding like what i've been told is that it's really like you get it's like any any announcement right so you get like a huge rush of of attention and people coming in and looking at your stuff so you really have to get it right off the bat we actually decided i'll say this now like so we're launching our our system on friday we'll have a security.md and disclosure page and probably sort of a good faith we'll figure out what we owe you if you report a serious issue to us uh but we decided that getting the bounty design right uh was something we didn't have time to do right now we really wanted to get it right off the uh right from the get-go so so it will be later next week i think that we actually release that bounty uh program um but so having the details down clearly so that people know just doing the work so that people can see like what you know that you've thought about how much you're willing to give for what kinds of exploits pointing people in the right direction saying you know if can you drain all the funds from this or can you cause like in you know optimism very very strange system so um you know it's not just oracle exploits but like can you uh invalidate a fraud proof or or cause like a consensus failure between the two layers if you will uh so so laying that all out making it really a lot easier for people providing good documentation so that they can get into the code base with like minimal effort um those were a lot of the good suggestions that i got that weren't i maybe wouldn't have known how important those aspects would be without that feedback do you think something like uh immunify i believe it's like an on-chain bug bounty platform uh yeah i don't i don't have really looked into it i thought it was just a page where it lists bug bounties that people can go in and so just sort of aggregating information is it doing an on-chain thing i believe they say they were going to do a 500k bounty on badger dao but i'm not 100 sure i don't know if somebody uh here knows a little bit more about it otherwise that's like the the holy grail kind of is like this idea of can we put the money on chain like put the bounty on chain and then that bounty contract can assess whether or not the exploit has happened in the target contract my sense is that like if you can write the invariance effect or the properties effectively enough in an external smart contract like then you can also just write those checks in the smart contract and not get hacked like i so i don't see it like i think it sounds awesome i just don't see it ever ever actually happening good point uh tincture let me ask you this during the the food coin craze uh i would see so many projects just copying another code base launching and then tagging uh auditing firms on twitter and it's like hey can you audit us for free or for like 5b um how do you feel about that it's like uh there's so many you know there's a there are not enough auditors right and uh i think that's also why you uh you created damn vulnerable d5.xyc it's a a series of coding challenges is that a way to bridge um you know developers to have like a more security-minded uh mind so to speak i can program i can architect and develop smart contracts but it is not my my strength is not in you know the security part of things i i think that that requires a different kind of training yeah at least yeah yeah let me start i think there are two questions entangled in there let me start with the winner of d5 um yeah i basically build that uh because i wanted to the best way for me to understand what is going on in the fight space and seeing all the postmortems and write-ups on twitter and stuff is for to be for me to actually locally try the exploit and understand step by step what's going on so as i was doing that in my home my personal computer i realized that i was actually like building challenges for myself and that i it would be awesome if i could publish those challenges out there and for developers too to understand uh where the common pitfalls to the nd5 it's clearly inspired by many many and many countless ctfs and war games and so on that they are in classical application security let's call it and uh also inspired by the ethernet a war game that opens have been created by alexander a few years ago and captured the ether and so on there are plenty of them i think already in ethereum but then boulevard is extremely like focused on on d5 problems that i have seen during knowledge in x-rays in the while some like little things that i add into the code to make it more challenging some people have told me hey this is uh like this is awesome but i have also i didn't also find it like super challenging and then i realized that that is true like many of the the actual exploits that we see today in d5 and they are they are not that complicated once you already found the vulnerability and know how the system works and can execute it yeah of course that is there is a code but in the boolean if i i wanted to take that the whole complexity of that into its simplest form so each challenge is like a a simple way to exploit a uh a system related to the fight for instance there is a challenge where you need to take a flash loan take a snapshot and then hack a governance system and you can do that and it's there and it's a way to teach or to educate the community in those regards so it was like a super learning process for me and hopefully it is also valuable for the community um coming back to like the original question about like auditing firms being typed in future for for for audits i don't know i think that um many like the most respectable autism films i have built a reputation already in the space uh so i i don't i don't think that we are particularly affected by a project tagging us or not in twitter um but it's also true that today many of these most respectable auditing firms in space are like super booked fully booked everyone that has tried to book another with these firms and has probably seen that already so there is clearly a shortage of origin professionals in the space um but but i don't think that china a specific company in twitter will change that and i think that there are always like perhaps uh putting grants out there if a project needs to be audited and it needs to raise money from the community and something in those lines i think there might be other ways to to fund audits for a project where the community can contribute to a project by funding an audit and then using that money to pay for knowledge in the in these uh auditing forms that might be a way but i don't see like i can talk into somebody in twitter won't change it won't change much just to jump in here um while we're on the topic of uh like challenges um i think it's definitely a true a true point that like right now there's not a lot of opportunities for people to sort of get hands-on um without you know actually exploiting protocol and explaining protocol at least should should be fairly difficult so it's not you know very suitable for beginners um we do have things like you know open zeppelin has ethernets as well which was i was a big fan of um smart's made captured either uh and there's been a smattering of challenges um competitions held over the years uh but you know i mainly want to jump in just like quickly show uh i'm helping write challenges for paradigms etf which you should totally sign up for if you're interested in trying some uh both some very simple you know like do you understand this concept uh can you execute and then also uh some very very difficult challenges written by yours really that um i don't know you might find a bit challenging so if that sounds like your thing you should definitely sign up for that anyways that's that's the quick show right there that sounds that sounds incredible i i hope that you know that this helps and because that was uh one of my questions like what can uh i think dean just sent me this one what can auditors security researchers and ethical hackers um like how can they help improve the ecosystem and i think building this sort of tools and challenges out of uh your experience with uh with working on this is uh is a great step and but you know what about uh training the next generation of uh auditors and security researchers uh doggy but i remember reading about the why academy [Music] uh yeah so i mean i'm i'm kind of loosely familiar with it so it's um uh i forgot his name or i don't even know if it's a he or her uh whatever their name is is um we we've done a partnership with git coin so get coin has this um kernel program and one of the tracks is a security track so that's people who are interested in uh like getting more involved with like ethereum d5 security uh topics so the the point of the kernel program is to kind of funnel people down uh this path of like yes i'm interested in it yes i'm good at it um yes i want to you know get deeper inside of it and as a part of the kernel track they're going to be working with with us um and kind of being trained in in our process our like internal review process that we're using for uh auditing strategies uh to kind of expand on that um you know as essentially was just saying the the the timeline for auditing is like just super out of the water right now like no one can really book anything um there's been a few like we have an auditor that we use that has like this uh monthly kind of rolling basis that you can get a little bit of auditing time out of them on a monthly basis and that's something we have as well but for us because we're releasing so many contracts namely strategies that interact with external systems in certain ways we have this internal review process so as a part of the kernel programmer we're going to be involving those people and really like that peer review process which is um like i would say one one of the more important parts of the security like security process i guess of developing smart contracts so just getting different eyes and different viewpoints cool um let me change topics a little bit and uh talk about flashlights because uh they always they always come up during exploits personally i think flash loans are are great they uh they allow so many good tools you know that swaps between protocols uh they even the playing field uh for everybody i cannot think of any exploit or correct me if i'm wrong that that was done with a flash loan that couldn't have been done with just a whale with enough capital um but actually fiona kobayashi sent a couple of questions that i want to read out so i don't know if you know there's a maker improvement proposal to allow uh flash minting dye i don't think it's infinite flash mint that's probably up to the debt ceiling and there is also a wrapped ether a wet 10 version that it does allow infinite wrapped ether minting how do you think about you know this uh this kind of thing do you incorporate this into your security-based thinking i think it was james prestwich who said that every token should allow infinite flashman because why not yeah so i think definitely uh the first thing to keep in mind about flash loans is as many people have already mentioned the problem is in the flash loans it's the fact that the system doesn't handle uh large volumes um and i think with flash minting it's even more interesting uh yeah like i took a quick look at maker's flash mint die implementation and it is up to us up to uh i think it's it's a separate ceiling configured in the module itself um and i'm super excited for like for the future that brings i think it's it's sort of flashlights and placement teams sort of forces people to consider things that they otherwise would have shrugged off and then would have you know got gotten bit by down the road uh and then with with their introduction they can now they now have to like consider it you know before launch right or hopefully consider before lunch um because uh if not then it's not a whale who notices that can attack you it's anyone who notices i can attack you um but then of course people people implement you know protections like they'll prevent they'll prevent uh any contract address from interacting with their contract or they'll prevent you from withdrawing in the same block that you deposited and like i think this is sort of in the same vein as like the non-wrenching modifiers where some people i've seen some people mention like this feels kind of dirty like you know you should just design your protocol to work properly um and i just wanted to offer like a a counter argument that you know um if it if it fixes the problem right like you know you can you could definitely rewrite your code to make it so that it is uh orientally reactively safe and then not use a modifier but like if the modifier works you know um why wouldn't you use it right like it's providing the security you need even if it might feel a bit dirty uh and the same with the tx origin eco's message center like you know it it still raises the bar for an attacker right like at the end of the day you're still adding additional security even if it feels a bit dirty um you know like go for it i think yeah i think the the words for that would be like defensive programming so you're just kind of adding layers uh to your design where like you're not sure like you know it it'll solve an issue like re-energy like every interesting card you know that solves a potential issue and that's just guarding against a scenario like like i'm pretty sure this doesn't have a reentrancy bug but in case i'm wrong i have this additional layer that actually is a blanket protection so you're kind of defensively you're building a defense against an attack by adding extra layers and just making a potential issue harder to get at uh not to say it won't be hacked so like pickles is a great example of this the the pickle hack was like kind of ridiculous where it involved like eight different um cascading failures that were kind of mixed together so it just it just makes the the barrier to entry to get to that point much higher yeah i would agree with that in the sense that defenses programming sounds the way to go the only concern that i have seen many times against that is that the additional checks that you use will cost money they will spend gas and so people will try to minimize and simplify and make smart ways in solidity to to try to save gas uh just instead of like putting a re-entrance in check they will try to do something fancy or just imagine that there is no re-entrance or whatsoever or just hope for the best uh so there is a trade-off between the different being so defensive and adding layers which i totally agree with and i i always recommend for developers to do that but the country argument will be that and the more checks that you have and the expense the more expensive it will be for the for the users to use those contracts perhaps layer 2 will save us all manner i think nicely for developers i think a nice approach is to as you're going just just pepper those extra sometimes feels like overkill protections all over the place like don't don't don't write code thinking oh do i need safe math here can i get away with normal math just like put the safe math everywhere and then if there's like a a code path that runs frequently like if it's your swap function or something go there and like if you've got to rip out safe math because it's i don't even think it's that expensive but like if you want to take out the reentrant modifier because it's expensive then like think about your swap function specifically and then like all the other functions that run once in a while and are not not so sensitive to cost uh you can like just leave it on and don't think about whether or not you can you need the re-entrant modifier yeah go ahead i would like to i mean optimization for me was always problem i mean that every time you think about about optimization uh maybe you write something dirty that is is not safe uh i i would say that you should consider in your design not only security aspects related to flash loan for instance but i saw um especially uh in in a in an implementation about a protocol right now that you should design the system in a way that also you don't get attacked by bots or front runners so if you split in two steps maybe some operations that could be sensible to this kind of attacks this is something that helps a lot the users i mean for instance the recent um hedgic redeem process was quite attackable by arbitrage so basically users were unable to redeem because every time there were a bot that was going uh basically front running them so i think that security should be a pillar of your design and it comes before the operational excellence that you may have for running your smart contracts or your systems and this is a value that uh that not many teams have in mind they just look for okay i'm cheaper than the other one yes you're cheaper but you physically and not safe so i think that you should consider more the security all over and let's say leave the ux aspects after because as soon as you have great fundamentals great you know a good protocol then all the other you know optimization comes you know more naturally maybe because you write a good code that's my my take about this yeah i guess i would you know the the words for this is premature optimization so you don't want to optimize too much out of the gate until the gear finally settled on a design and you can kind of take that brush of like going deep and figuring out well you know i could save a couple s load gas here if i do this or if i do that you don't want to do that too early because then it muddles the design process and you get it's it's difficult to modify optimize codes with code without breaking stuff that could cause bigger issues um and you know really at the end of the day paying a few extra gas is less expensive than losing all the money so you know don't don't prematurely optimize until you're you feel very confident that you're not going to really change the design anymore and you have the time to devote to a deeper analysis even even with slow getting a 3x next month yeah i mean it could it could be 10 000 gas to do an s load and it uh it's still cheaper than losing a million dollars you're right uh well speaking of um losing money i i i asked you the beginning if you had been wrecked by by any defy protocols and and you said no do you personally and this is for for all of you do you read the source code for every protocol that you interact with um i remember in 2018 just a single collateral die came out i i kind of said to myself i'm not going to interact with anything that i haven't that i don't understand and that lasted all of a couple of months maybe it's like it's impossible for everybody to read everything and understand every project right and and we say don't put in more money that you can afford to lose but then we have 20 billion tvl and you guys are are experts in the field i can write solidity but how many people they just take everything on faith it's like okay many people use it then it's probably safe what's what are your thoughts here i guess i would say that like faith is kind of an integral part of the process because you know you're not going to you know even as a developer you can do the review or like a security mind individual you can do the review and you can look through it but like that you're just one person and you you know only have a certain level of expertise that you can dive so deep in before you go you know aping around these new contracts so it's important to do diligence i guess um but at the same time like the only real predictor of security is time um so you just gotta you know start slowly grow confidence understand the different risks as you move along and try not to go quickly because when you move quickly that's when issues really happen i want to hear from from the rest of you do you use protocols that you personally haven't read the source code from my side um let's say um time is important if you want to be a farmer i'm not a farmer i mean a farmer like many others uh it's odd so basically you go for with face value with people that are already interacting with and sometimes yes it's uh it's maybe easier because you see okay it's a copy we have tooling for checking that it's exactly the same of the other just few parameters and you go within i would say that maybe not reading all the source code but when i interact with let's say important amount of money for me i do a lot of research on the protocol that i'm interacting with so for instance when i interact with compound we have a with maker to make it was the most difficult to be honest to understand at the beginning but i did a lot of research but this is a suggestion and i would say an imperative for anyone that want to uh to interact with d5 protocols uh you said that yes we know solidity we know we we are programmers but in general uh you don't have to be uh too much technical to you know uh intercept uh good signals that a protocol could be safe so it it's it's a responsibility of the protocol itself to communicate okay it's if it's safe enough it's you know uh have some sort of insurance for any any hex if you see that it has a bug bounty if you see that um did maybe a few audits with several recognized companies obviously it's not a guarantee but all these elements uh give you an image that okay this protocol take care of the security uh of itself so okay it could be a good signal uh for me i would say that it's uh an affordable uh in imaginable that you read every single line of also if you know code is low yeah it's okay but who is reading the the traditional law itself i mean uh it's it's too big yeah i really i don't think um i don't think nobody does that like reading the entire source code and understanding everything at the end of the day it will boil down to to to a risk that you want to a level of risk that you want to accept right i won't be even financial advices here but um even like even if you already know the entire source code that you can find on the blockchain like or like i don't know going to etherscan but you would be trusting interest and that the source code that is showing to you is real and so on and so forth but then you you need to also trust or review the front end code i don't know if anybody here has gone to adapt and with the source code of that and then you need to go to metamask and ensure that the metamask version that you're using is the actual one and so like there are many moving parts uh and even like if you want to be fully sure about it it will take you so long to it that it wouldn't make sense and so yeah there are trade-offs between i guess what you want to do the value that everybody can up to you and how secure it is or how you see security but i agree that there are many elements that are out in the wild that can tell you and can give you hints about this how secure the system is yeah i mean i think this is a i can think of at least one person who would have done really well with for being whether it's metamask was the legit version um but i think also this conversation is raising a really interesting point which is like there's just so there's so much code out there that you know as a user and maybe even as a developer it's hard to get that full grasp of what the the wider ecosystem looks like um which is a problem because you know like you can have you can have two protocols that are perfectly secure on their own um and protocol one has a weird quirk that you know by itself is totally fine and then you know when the developer of protocol two comes along and wants to use protocol one uh that one that that weird quirk turns out to be the facilitator of you know a critical bug and so this is a problem which i don't have a solution for certainly not off the top of my head sharing a panel but um it's definitely a problem we're facing which is that you know as the ecosystem grows it's only becoming less and less manageable for any individual person to reliably ensure that their product and you know every product they're building on you know nest recursively is secure and also all their interactions are secure i think that everything's been said there uh a slightly different like way of responding to the question is that i um personally was not a big i got into d5 because i had to understand it for my clients uh it kind of crept up on me and um and so i would do these audits for a while and then i realized like i actually just had to uh use these things to understand how they work and i often find like maybe yeah i come i come at a more big picture so i often like i'm like i'm going to have to put some money into this to like basically pay the education cost of a few hundred dollars of like using metamask and playing with the interface and seeing how it changes um and i think that's kind of an interesting way of of if you you know if you're spending money that you can afford to lose and that's really all i have in d5 is it's like it's just so i under i can understand it there's sort of an interesting effect to where you know maybe i don't care enough to read the source code until i put some money in i'm like oh what actually just happened where can i so it's a good way of kind of uh throwing some breadcrumbs into the system for for you to follow that's how most of my money gets into g5 oh yeah here we are sorry uh so basically is uh is paying the eight tax right that's that's what you said basically yeah i mean you gotta use it okay i i have one final quick question uh for all of you before we go to some um question from the audience so we have yet to see the big one right you know the big exploit that everybody's expecting uh even though there were there were a few big ones uh in 2020 i don't think we've seen the big one uh really quickly like worst case scenario what do you imagine that would be like i mean we saw like 30 million in 2020 right how much how much bigger do you want come on um i don't know i mean like i guess the thing is like all the existing existing protocols with the hundreds of millions in funds have been fairly well battled tested um i'm not expecting although knock on wood i'm not expecting any of them to get hacked in 2021 if they survive 2020. that being said you know nowadays you can you can deploy a new project and in 24 hours you'll have you know a couple million tbls so i don't know like maybe we will see the first 100 million you know triple nine digit pack in 2021 that would be a pretty awful milestone to set but you know if we're on the topic i guess perhaps the big one we will come when uh somebody really compromises a price oracle i guess that at some point uh today there are like a few prices or price oracles in on chain and many of them can be compromised and there are a really high number of profit depending on those so perhaps if you can actually compromise surprise oracle you can like break many many projects depending on those and you don't need to have a vulnerability in the top three d5 pulse d5 projects you can just compromise one price oracle and then rule them all and perhaps the big the big one will come there uh i'm uh i don't want to to do names to don't generate any sort of food uh but uh sometimes i stay awake during the night for these three reasons the first one is i don't want to see another black thursday so i'm a lot scared about what could happen if the network get clogged as the day so i'm many protocols uh you know are using oracles but in general is not related to or of course it's related to all the effects that should be triggered we have example in traditional finance i remember in the 70s i think that basically there was a an exponential explosion of uh all the action that should be done and the the machines weren't able to to to stay on the pace so everything collapsed basically uh it's also true that is everything is not moving nothing can collapse but i'm pretty scared about what could be an high volume of transaction on ethereum how the protocol could resist to this stuff i saw for instance many protocols that was delaying for instance oracle updates because it was too costly or suspended the operations so this is the first i'm not saying in in any particular order to be honest the second uh things is that we do a lot of things on chain but we rely a lot on many things that are pretty much centralized of chain not only are of course uh that could be decentralized as much as you want trustworthy game theory put whatever you want i'm not saying about oracle's but i'm saying more about packet assets could be stable coins or not we saw that many protocols i'm not doing any sort of names realize i mean d5 relies of a lot of liquidity expressed in that form i mean uh they they they were pretty reliable i don't have any sort of indication and for sure i'm not an authority to say what could be the problem i'm just stating that there are i mean big names big players that we rely on so my my the the positive aspect of this is that i'm i hope that in in 2021 we are going to see more options okay so uh in this way we basically distribute uh uh the the the risk uh the third fact uh is uh the the the it's basically uh an unknown black swan i mean we are so interconnected we already demonstrated in the past that if you we could have some sort of butterfly effect you touching one place and you have an effort in the other one very very distant very close so um i like a lot how much we entangle but at the same times it rises a lot the systemic risk of all the ecosystem so the unknown issue is something that it's it's gay but i'm talking just on the you know bad things that that keep me awake during the night uh i have one certainty that basically defy is anti-fragile and we demonstrated a lot with people protocols and whatever so i'm pretty sure that also if a very big event will happen obviously atomic bomb is not considered valid but uh we will be able to uh go ahead and learn from the past this is something that in technology or in another sector could be present but it's not so i mean from my experience so strong as i i'm seeing in defy or basically in in this industry sorry to take so long and expressing my my worries no no it's perfect um anybody else or do so yeah one would be um a bug in like a widely adopted erc standard that uh is just like once it's at um not everybody can fix it all at the same time how do you even disclose that properly um that would be kind of a that'd be a really bad day um and the other thing would be yeah something in the compiler like just some some some really horrible zero day bug in the compiler that uh everybody's been using for the last five years those are the sort of like black swan sleeper things that um i don't anticipate but could be pretty massive i would uh add to that and um so you know on friday optimism is going to be doing their release and as we all know a couple months ago they discovered kind of a zero day in the evm implementations that was inexplicably exploited not placing any blame or anything like that but we could see as we explore you know more of these layer two uh protocols that are up and coming we could we could see more um you know unexpected behaviors that are exploited uh in the evm like that um that causes network splits that cause its failures um due to network splits uh that'd be you know one thing i'm i'm looking i'm watching for and 2021 i you know i expect to see a lot more interesting behaviors due to layer 2 functionalities coming up online cool i'm sorry i uh i derailed the conversation to a to a dark uh place uh thank you for your answers let me okay have a couple of questions we have nine minutes left uh this flew by so fast uh so question one from chat should forked mainnet testing be used more for preventing integration exploits so this is something we've used a lot with with urine just because of just the due to the fact of how deeply integrated um strategies can be with other systems so you you can't really do a normal the integration test by replicating all the infrastructure that's on chain so this is really a shortcut for demonstrating if you know at least some of the common paths that could happen with integrating with an external system it's a shortcut that basically says well given that the current state i'm going to fork from that state and then i'm going to do a couple of my own actions and it also gives you some like uh like you can actually like mock like like a protocols multisig or governance contract or whatever and enforce it to do something in this fork mode that it you obviously can't do on the real main net in order to replicate those scenarios um kind of the trade-off there is that um yes you can do whatever uh you know scenario you can set up any scenario you want but um you obviously have to think about the scenario when you set it up for testing so you can't actually replicate on-chain behaviors unless you do like us like a serious deep dive and you know train like an ai model or something back like an arbitrage bot or something like that that that's obviously behavior that's way more complicated and you can't really replicate in a testing environment but you can rep like you know maker is a good example maybe you want to express make your osm shutdown or something like that you can replicate that scenario and fork testing uh and it's it's a shortcut for basically replicating maker's entire system which would you know probably take you a week to do so this is just easier you just fork maintenance you do the couple of actions that gets it to some shutdown and then you see what happens with your system during that um let me ask question number two from the chat what is the future of smart contract security more better audits insurance or something new this could be a topic for another panel to be honest yeah that's uh i i would say as an externa i mean i don't want for any sort of uh security themes as a developer or builder what i would like to see open zephany is doing a great work on this it's shared common patterns shared not only from the code perspective but also from the process perspective doggy says a very important stuff you have to prepare when you go in production it's not only deploying a staff you have a front end you have also to have some few process in place a disaster recovery an emergency plan you can call whatever you want so uh this is i i'm my i would say that it could be a community good so if we are able to push you uh to to to promote this practice uh along with you know maybe a committee of you know experts or whatever that help the protocols could be also participant to the protocols to define those uh i think that would be would be great it's we we already have some of them but are not so you're not promoted if you if you want to go i mean if i want to build a new protocol and i want to let's say see a list of every hacks that happened where i go i don't know i mean so having some sort of central point that helping you to to to develop following the best practice could be uh something quite cool and last but not least but then i will i mean leave the what's to more expert than me i would like to see more liquid audi things so i would like to see more um that are vertical on security that works side by side with the teams that could be engaged continuously not okay i finished the development that's all please audit so a more lean agile approach on this that's my expectation yeah i would agree with that definitely there might be room for improvement in knowledge uh in the sense that we could integrate better with the fast development cycles of the development team so in ethereum that will be great and that is something that we are currently working on actually european cycling and another thing that i that i really think that will come in ethereum in terms of security is some somebody has already mentioned this but it's more related to operational security in the sense that uh on it i know it is obviously like a snapshot a picture of the security probably before you deploy then you have back bounties there are other things but there is also this is also really important to have operational security once you have your system deployed how you detect what is going on in your system and how you maintain how do you execute actions and so on you need a platform for that um well but i have to say like i open separately we have open software in defender you can sign up for that and is mostly focused on operational security and one last thing i'd like to shout out is something i'm looking forward to is um you know as we mentioned these these projects are just getting more complicated it's hard to keep up even as a developer on how they work and how they interact with the rest of the ecosystem so uh dfi safety is something i i kind of advise and they've been working on trying to distill that information at least like what's publicly transparently available on these projects into like a score an easy to understand score that people can use um you know as a proxy for actually doing that analysis themselves if they don't necessarily have those skills um so developing that more in the ecosystem like more signals that people can use to determine safety of different protocols i think that's that's something where you know as a community we should explore more deeply like you know the human layer of security well we have about a minute and a half left and and this all felt like uh like parting words so um i think we're gonna we're gonna leave it at that if anybody has uh anything else to say to the community please please do so now and thank you very much for uh for coming to this panel like leave us with some parting thoughts words of encouragement don't get wrecked no obviously not i would say do your own research don't get rushed on trying everything and experiment because it's still an experimentation [Music] what you can afford to lose okay but this this should not be a blocker but just uh you know an acknowledgement of your limits or on the limits of the system itself so act responsibly so don't be an ape basically and do responsible disclosures please sam any any parting words yeah i mean i think totally agree with what uh emiliano and tinchel said um you know 2020 was pretty rough uh we lost i i don't know if someone did the tally i think we definitely hit over 50 mil probably over 100 mil some um let's try to make 20 2021 better um you know let's practice good development practices let's make sure we have all the documentation up let's make sure we're engaging with security researchers um where we need to with auditors when we need to um and then for the users yeah let's do your own research there's plenty of scans popping up uh you know it it breaks my heart when i get damned telegram with when people ask me you know like i just bought this token that you know is like mooning on unit swap and now i can't sell it what do i do and i i just have to tell them you know it's your money is gone um because i was a scam so yeah let's let's try to take all of us that we learned from 2020 and apply it to 2021 and then maybe we can close out 2021 uh with much brighter uh much brighter uh future it's not future by december but you know what i mean well um in that case i i really want to thank uh everyone i i want to end on a on a high note so uh sam i hope you don't mind if i uh read the last couple of paragraphs from uh escaping the dark forest um so this is this is for everybody after uh everything we've heard uh i just want to remind you that there's people like our five panelists out there looking out for us so on a late tuesday night our unlikely group united under a common cause and worked tirelessly to try and ensure that over 9.6 million dollars would be returned to the rifle owners all of our efforts over the last seven hours led to the single pending transaction and the spinning dots that came with it when the loading indicator finally turned into a green check mark the 10 silence on the call gave way to a collective sigh of relief we had escaped the dark forest uh i suggest everybody read the article i sleep better knowing that you all have our backs and uh on behalf of myself and the community thank you emiliano tincho sam doggy maurelium for all that you do and that all your contributions to this space and uh i want to thank heather andrew and it global for organizing this event and thank you everybody for joining i hope you had fun i'm mariano conte wishing you have a great day thank you 
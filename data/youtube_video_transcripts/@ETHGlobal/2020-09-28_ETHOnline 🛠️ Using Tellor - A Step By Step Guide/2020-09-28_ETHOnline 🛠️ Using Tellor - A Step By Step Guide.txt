great so thanks everyone for joining this morning um afternoon evening wherever you are in the world we have nick fett from teller who's going to walk us through a step-by-step guide to using teller a reminder to everyone who hasn't applied or staked we are still accepting applications for youth online don't forget to go and apply and stake and without further ado nick take us away all right thanks heather um yeah so as heather said um i'm nick um everybody if you guys can hear me okay post somebody give me a thumbs up in the chat um and also you guys can also use the chat uh to ask me any questions i'll be sure to kind of answer them as we go um but sure i'm going to start sharing my screen here and today i'm just going to walk you guys through how to use teller so how to actually implement teller inside of a smart contract um a little bit about teller first so i know a lot of you guys are probably here because you saw that we had some bounties that are available um so we'll kind of just go over what teller is how you might be able to use it and then um what the bounties are and then we can get into some of the coding aspects of it and how easy it is uh so teller uh we're a decentralized oracle on ethereum uh so we let you put real world data on chain so uh to tell you what we actually do before i was actually running teller we were doing a derivatives protocol so we were basically letting you bet on them can you guys hear me yeah go ahead sorry i you to do one accident [Laughter] thanks i don't know what you guys heard but anyway i think he did it really quick uh so we're we're um we let you bring real world debt on so if you want to bet on the price of a cryptocurrency uh the big problem with this is on ethereum is that ethereum actually can't read api so you can't go read coinbase's price you have to enter it into your smart contract manually and the problem with entering a price manually is that now you have this uh centralized point of failure so if somebody refuses to enter the price or they enter it incorrectly that's not a good thing so teller we're different because we use a competition we call them data miners to actually go and get this data for you so you can write a derivatives contract or any sort of application that requires outside data and teller will go and get that data for you and put it on chain so you can do this without having to say rely on this centralized point of failure so things that we would expect you guys to build and and some great use cases so you can just kind of look what in the ethereum space already uses in oracle and how can you sort of improve upon some of these designs and especially use teller to sort of further decentralize it so actually make it little bit more censorship resistant so things such as stable coins if you guys know maker they have their own oracle they use um that they use for their contracts any sort of derivatives products so you can think like synthetics or you can think even even augur is sort of a um a derivative based contracts then insurance contracts nexus mutual type things um these are all contracts on ethereum right now that that use oracles um so there's a lot of different pieces that anytime you need off-chain data you can potentially use teller um and what are obviously what can you what do you guys want to build um what are we looking for um the biggest things we want to see you guys just giving us feedback we'd love you know for you guys to get there and start implementing teller we're live on main net and then we're also live on rink b so if you want to test out your things on rink b you're good there um the big things uh try and get creative um we have one for the best original project another one for most creative and then on the last one for the best information implementation of teller into a pre-existing project so there's a bunch of different bounties um but feel free you know reach out to us kind of as as we go today or um just as the hackathon goes on i know it's a nice long hackathon so we're very available anyway let's get into um yeah let's get into the coding piece so all right i'm going to so we're going to do here is we're actually going to go through this is up on our github we have something called sample using teller uh this is a contract that'll shows you exactly an example of how to use teller in your smart contracts and you guys can probably walk through it really easily on your own uh but i'm gonna walk through it today uh so you guys can just kind of see me pointing and clicking so uh yeah i'll post the sample using teller repo in the in the chat as well um but it's pretty simple to find anyway so we'll make um a new project we'll call it ethonline cd intuit and then what we're going to do we'll do a truffle in it create a nice truffle project okay and then what we're going to do this will probably take the longest piece so we'll get it out of the way you can do npm install using teller um so using teller it what it'll do is it'll go and grab some solidity files and put them into your node modules file so then you can actually access them from your smart contracts and it'll have everything you need to read and test from the teller contracts so we're gonna come to our files and then we have our nice ethon line folder we're gonna bring it and then this is what you should have uh for everyone who um is nice and familiar with these base contracts or base truffle files but what we'll do to kind of just kick things off we'll just go and we'll copy things directly from sample using teller and then i'll kind of walk you guys through uh what everything is okay so we're gonna come into our we'll save it as ethonline that's seoul and okay thumbs up everyone i'm doing good yeah all right so we'll just kind of walk you guys through using teller and how we're actually going to read read values in here so the first thing that you're going to do at the top after your pragma statement is you're going to import using teller so after you did that npm install you have a package in here uh called using teller and from the contracts you're going to import using teller.soul so we can go just for fun we'll go look at it it's awful oh nice landed on it okay so using teller what it'll have in here these are all the different functions that you're going to have access to um the mock teller system so we we have like a mock teller system that's built if you know how teller actually works we have a series of proof-of-work minors that compete at adding values on chain for you obviously for testing purposes you don't have to simulate a network of proof-of-work miners you're just able to use this mock teller this teller interface to manually input values and test them or but whenever you do deploy to the real network uh the interface will work correctly so you can still use this one uh the big ones that you're going to want to use so there's a lot of functions that are native to teller so retrieving data if you have a an id and a time stamp but the big ones that we're going to use today we're going to look at get current value so you have a request id so this was actually linked in in the repo as well tell the way that teller works is each um numerical id is linked to a piece of data so like id one for instance is uh gonna be the eth us dollar price id two is gonna be the bitcoin us dollar price id 50 is the trb us dollar price and so forth um so you would need to find out what id corresponds to the data that you're put putting on if you want a new piece of data definitely reach out to me i can show you how to do that as well um but this is going to be the the base of the system uh you just enter in get current value you enter the id and then the way that it works is it's going to return back uh a boolean meaning did it actually go and get what you wanted to get so you want that to be true meaning you you didn't query some id that doesn't exist or something like that the value of it so what was the value and then also the time stamp for it so um this will be unix timestamp uh if it was so for instance if it was put on yesterday it'll correspond to yesterday's time stamp or if it was put on 10 minutes ago that way you can do some checks and that's the other and this is just the base of the using teller system you'll probably want to just use get current value but if you want to use a different function the other one that we recommend that projects who are trying to be a little bit more robust use is the git data before uh so this goes into how the teller system works whenever you whenever a miner places uh information on chains so let's say we have the bitcoin us dollar price and the miners say that um the current price is ten thousand dollars once it's put on chain then anybody can dispute that value so you can challenge it and say hey that's not correct and then what happens is the value will get taken off chain and it'll get put to a vote as far as whether or not it's correct you want to wait if you're a project depending on how long you sort of your your protocol will allow you want to wait for these disputes you want to wait for people to check whether or not the data has been been validated obviously the miners are incentivized to only put on correct values but if somebody is attacking the system bad values can get put on chain so you want to make sure that you wait for somebody to put on a dispute right now most of the disputes happen within 10 minutes given gas prices so you would want to put git data before and then in your code say now minus 10 minutes or now minus one hour and what this would do is it would make sure that the data that you pull into your smart contract is sufficiently old if that makes sense and this is sort of a common practice in oracles you'll see so for instance maker does this as well whenever maker updates their their smart contract oracle their oracle uh they have an hour-long delay for disputes so anybody can go and they can say hey that's not the correct price and you can freeze the the maker system um in a similar sense here you will want to wait for disputes uh or if you're just running a nice simple uh simple view function and nobody's probably going to attack your your oracle if you can just use git current value and it'll be easier for you uh you won't have to think about it so anyway now we're going to go back to our ethonline soul so that was what we imported and then we'll change the name here from sample using teller call it ethonline um and then you're going to use is using teller for those of you that i think most of you guys are going to be pretty familiar how to do some inheritance here but is using teller this basically whatever you use is it's just going to basically cut and paste all of those functions underneath your contract so you have access to them uh the thing that you're going to need to do is in the constructor it needs to know the teller address so you would have to pass in in your constructor the teller address and then you would pass it to the using teller function so this is how you would pass in a constructor argument to an inherited contract um obviously if you're just on testing you would be passing in the mock teller address or a pretend teller but we'll show you some test files and how that actually looks uh and yeah so now we can go and look at some of the functions that are available so you know we wrote here in the sample using teller you have read teller value you give it an id and it goes and runs that get current value function and then if it actually retrieved it it's gone it's going to return the value same with git teller value before same exact thing so now we're going to write we'll write a little function to actually use it we'll say is data big we're gonna do we're gonna do the the base of the base uh solidity functions here so i bear with me if you guys are uh pros so we're just going to do external returns and we're going to return a boolean and what we'll do result equals read tell their value of our id and then if results is greater than 100 we'll return true and if it doesn't return then we'll return false okay so i noticed something already um since we're calling read teller value which is right up here um this one is an external so i'm going to change that make it a public so we don't get get a compile error okay so now we're going to come back over and we're going to compile it we'll see if this works everybody doing good so far we can get into some use cases for teller um i know somebody asks that we can get into that near the end okay we got a few uh warnings on an unused variable but i think i think having an unused variable is a decent warning that we're okay to live with here so now we're going to do we can come back and look at the sample using teller repo if you guys are actually trying to deploy it and you want to know how you can deploy it so you can come and you can look at our migrations file we have some sample migration files here um but for our case you know we're obviously not deploying it right now we can just go and look at how we would actually test this so i'll cut and paste the sample using color test and then i can walk through it here okay so we'll come and we'll make a new test file save it online test.js all right and then we're going to replace sample using teller with line there we go and then i think sorry i'm just uh clicking around making sure everything looks good for the capitalizations but for those of you who aren't aware so this is just javascript function java javascript testing and truffle uh i like it i know people have mixed feelings on it um but this will be kind of the base way that if if you're using truffle this will probably be how you want to test your functions um but i'll walk you through how it sort of works so the first thing we're going to do is we're going to import it then we're going to import our mock teller system here we're just going to call that teller uh and then it sort of exposes a few different uh things that you can do so um the base thing is is you can run teller oracle submit value so this submit value thing what it does is you you can give it a request id and you can give it an amount and you can manually just say what the values are so the value of id1 we can set to 100 the value of id2 we can set to 200 and so forth that way it just makes it really easy for testing you don't have to wait for miners or pretend you're on the ringfield network or something like that all right um so what we'll do we'll come down here and we're gonna write our new function uh is is data big i think that's what i called it um and then then we'll write it so the first thing we're going to do is we have to submit our values to tell her we have to tell it what everything is so we'll submit one uh we'll do id 1 it's going to be 75 and then we'll do id 2 is going to be uh 150 so we'll double it because if you remember our threshold was if it's it's big if it's over 100 and then we'll assert um we'll run this one and then for is data big with our request id we'll assert that id 1 should be small so equals equals false data should be small yes very simple uh testing here and then we'll assert that id2 should be true so data should be big going back to basic numbers um so anyway now now comes the moment of truth we'll see if this actually runs um always live testing is fun okay so now what you can do is if you run truffle test for those of you that don't know it'll kick off its own little mock ethereum client and uh run all these tests pretending that it has its own live ethereum network that runs locally so all right first it's compiling them deploying them oh man okay so data should be small so we had an error man i can't believe we actually missed that okay so anybody see what i did wrong he's gonna he's gonna call me out on it that data should be small it says should work if result is greater than 100 huh i don't know i'm gonna have to get back to you guys on on why exactly this happened i literally just ran this and it worked so 408 oh somebody's thinking i you think i do this one like that so what was it what did i do before no i mean so i've done it before like i literally just ran this and then it worked [Music] anyway if data is greater than 100 return true that's correct okay um yeah we'll give it one more try and if it fails we can just dance ask me some questions um but it'll bug me for the rest of the day because i literally have a working test cursive live coding looks like there's some suggestions in the chat i don't know if you can see yeah i know now everybody's throwing in async and awaits i think everybody has the right idea for what's going on uh at least you guys know the tests are working that's good um so anyway um this is the base of teller um i think the problems that we're going about are going to be uh the issues that you have with anytime you deal with solidity or truffle testing in general um but this is gonna be yeah i won't necessarily make you guys sit and wait and debug my tests with me um yeah so it's a it's fun um as far as to answer some of your questions you know we'd love to actually just you know work with you guys a lot of whenever you guys are going to hack this um some of the issues you guys are going to face it's going to be a lot of just designing it so whenever you want to um whenever you want to use an oracle in your smart contracts there's a lot of sort of caveats about whether or not you you need a decentralized oracle so anytime you're using a decentralized oracle like teller the big downfall is that it's it's going to be a lot slower than if somebody just enters it into your smart contract so you have to know that hey that this is this is something that that i want to do with my smart contracts and then also um just knowing how to design your system for best practices so best practices when using an oracle making sure that you know you're you're doing things that are slow so a lot of times people especially you'll see a lot of times in defy uh what they try and do is they try and they try and build like a high frequency trading exchange on ethereum or something and you know a futures exchange that requires super high frequency data well you know if you're trying to use teller for high frequency data you're just going to have a really hard time it's you know if you're trying to use ethereum in general for high frequency data you're going to have a really bad time so just try not to do that um those are generally just bad practices in general um so that's usually um what we try and push people away from you know and we're happy if you have any designs or you have ideas for ways that you might want to use teller you know we're happy to sort of go over those with you um yeah so i think those will be um some of the some of the the pitfalls that you are going to run into you know some people have asked you know what what are some of the things that are using teller so uh lending protocols so that there's a lending protocol that that people use so you can think it's similar to say compound which uses their own oracle they use signed prices by coinbase and some others um and then some others as well uh we have somebody who's doing something very similar to like an ample fourth so if you guys know ample fourth they're a stable coin that actually has a fluctuating token supply and they use an oracle for all of those rebases so you can use an oracle for any of those and i see people are still trying to help me debug it it's okay um we can i'm you know i'm feeling in five minutes after this is over you'll jump into discord and have the solution yeah i will um or or it's just going to work that's how code works yeah yeah i think the next question i see in the chat is what's the best way to determine the parameters to use for retrieving the price feed info and then they have a link to prices.tellerscan yeah so i have um i i can forward that to you guys it's there's as far as like what the request id is i'm guessing um we have a whole spreadsheet available so i can forward that to you guys in our discord um so there's right now we have 53 available prices and then um you can create new ones um it takes a little bit of time to update especially just depending on what it is um you know sometimes because the the kind of prices that we like to support um for instance we have like 24-hour averages for the bitcoin price or we have um end-of-day medians for different prices just the prices tend to be a little bit more robust than just a instantaneous spot price um you know we want something that will actually be useful in d5 because a lot of times instantaneous spot prices can sort of be games for various contracts so we want to work with you guys on getting something that um is actually meaningful and useful for the specific contract you're trying to create so i'm going to pull over some of the questions from youtube as well asks uh what is a reward for a minor submitting data sure so right now uh if a minor we for each block so every time that we we have new teller values created five new values are created and five miners get a submit so we take the median of those five minor submissions as the official value and each miner gets right now one trb so it's like 25 bucks and that happens every five minutes uh the next question from l hume and youtube was so the miners compete to submit the answer to queries but doesn't that bottleneck the number of client contracts that are able to use teller at any given time um so it bottlenecks more so the number of available data points at any given time um you know if if one person puts up the ethos dollar price that's it you you don't need to put it up multiple times like everybody can read it on jane you muted me again zoom zoom is my enemy today yes okay um yeah so you would want you know what we think ultimately you know our prediction even a year ago was that ethereum is going to bottleneck itself um so you're going to have just very expensive limited contracts that are on ethereum and we think some of the the higher value data pieces will be put on chain and the other ones probably won't um so you know right now we're putting ethios dollar price on chain a lot bitcoin us dollar price and if some of the bigger apps are requesting them you actually don't even need to request them you can just sort of read from what other people are posting let's see okay another one is what happens when gas fees get too high does the reward automatically offset gas costs i think the answer is it depends but i'll let you uh actually answer it yeah so the way that it works so if you want to request a specific data piece of data you would tip it so the miners choose five data points to mine every block and which five data points those are which ones have the highest tip associated with them so you know similar to like which transactions get included into an ethereum block um it's the ones with the highest gas prices paid so what will actually happen is you would actually need to go and tip those so whenever gas prices get really high you would expect that if you want to pay those miners to submit it you would actually need to tip more to cover those gas costs for the miners or else the network kind of freezes which we've had happen a few times because if there are no tips and the base reward is less than the cost to submit the solution then the miner obviously won't really submit it um and that can happen so i think that answers the question i don't know um but yeah obviously you know like ins and sometimes like the ethereum network just clogs to the point that you know it can be it can be hundreds of dollars to submit a value on chain like just what you know during some of these crazy times so it actually doesn't make sense to to put the value on chain and we've we've devised a system where like if you really really do want that value on chain you can tip and pay for it um but you know you you want to sort of make way for things and build things that can withstand those delays anybody else with questions in either zoom or youtube feel free to listen i know somebody i know somebody else on zoom do you need working code and or just an idea i think it's a hackathon so you want at least semi-working code would be the uh the way to go about it you know obviously if nothing's um if it's a great idea and you have some broken tests obviously i'm fine with that but um you know you want to have sort of a feasible working of it and then somebody also asked am i eligible from for multiple prizes in this hackathon say if you do multiple projects um probably not the same exact one but maybe you guys have rules against that well so hackers can they can integrate multiple sponsors and then they're submitting one project that's um typically what happens um so they'll find you know a set of protocols that work well together you know they'll have an oracle provider some defy integrations couple different things and then they're able to submit to multiple sponsor prizes most people don't have time to work on multiple projects yeah well i mean these hackathons are so long now it's crazy yeah it's definitely very different um we've we've been finding that you know three or four week hackathons give people to enough time to add a little bit of depth and flesh out their ideas a little bit better yeah definitely so um anyway uh yeah anything else trent or good to go sam asked how to apply for the hackathon uh very simple just go to ethonline.org there's the application link there as well as once you get accepted you can have access to all the discord channels where's the best place for devs to find you know your docs or learn a little bit more about teller yeah so just go to teller.io you'll see links right on the front page to all of our github our documentation we'll be on the ethonline discord as well you know you we're also free on our discord or telegram depending on what you guys want to use so um yeah definitely just reach out we're excited to see what you guys build on us awesome thanks nick yeah thank you so cool so yeah we can wrap it here a reminder to apply hack on teller have a great day see you all soon bye everybody 
all right hello everyone thank you for joining us today at east global uh i'm shawn ahn from the uh youth global team and i am honored to be joined here by xiaozhou from seller jojo would you like to introduce yourself uh hi everyone i'm chad roli i'm a co-founder at cellular network and leading the blockchain related development efforts seller so today i'm happy to introduce to you guys about our new initiative which is called the layer to dot finance its goal is to scale d5 protocols in place on ethereum yeah okay so let's start uh so uh first let's start with a very quick overview of what seller is doing so seller is the layer two scouting platform we have been here for for three years and building all kinds of layer to scaling techniques uh what we already have been doing include the state channel network which is the first project we started it's a highly scalable and deeply optimized generic multi-hub city channels and we have yeah you if you're interested in check out the code open source they this has been running on the net for two years and we also have a a product called state guarding network which is a efficient watch tower cell chain because as you guys know that most of the layer 2 scaling they have one common uh challenges how do you protect layer two data like the uh there's there's always been like a uh even a challenge period for the for example the state channel optimistic role up and many other projects so we are building an efficient watch tower searching to address this availability data challenge issues it uh it has als also been running uh on midnight since last year it currently is on only supports uh monitor for the state channel network but we will extend it to also support the monitoring service for uh for optimistic roll up system including uh our upcoming layer two dot finance road systems now the today's focus is the layer 2 finance which is our new product it uh at high level it scale the layer 1 define d5 interactions directly in place where is layer to roll up and later i'll talk about what i mean by in place so yeah the code is open the uh once contractor code is open source they're welcome to check out and contribute and we are currently running a test net on robs10 it has been running since last week and it's pretty active i think there has already been more than 200 uh trend uh d5 transitions like investors sale transitions so far more than two hundred thousand and it's working pretty well yeah except i think there are two time systems they recovered due to the rough time long-range react so robson recently had a rear arc of 80 blocks or 40 blocks respectively that caused us to have to read to recover some states but still keep all the funds safe yeah so you are welcome to try out our uh test net the web ui ux will be significantly improved soon so now it's a it's more like a map ui interaction it will be updated in the verison okay so what is layer 2. finance uh why why are we building this um the motivation is clear the default operations today are expensive i don't think we i need to talk too much about this everyone know this it's hard for small players to participate so it becomes more and more like a big well game learn the ways the emerging technology of raw app including uh they carry up and of optimistic grow up now people are generally asking like can we move those all those d5 protocols to layer two let's just to do everything at a add roll-up layer so this is a very like exciting future that we all hope to come soon but uh we also also understand that it's not that easy because it involves like the migration of the whole ecosystem including the all the related layers contracts and all the other infrastructures like non-layer one infrastructures that are currently working with the ethereum mentioned so this whole ecosystem migration may not be that easy and smooth and moving d5 protocol directly to layer to rawa system may cause liquidity fragmentation because the those big wells may not want or may not need to move their move operations to layer tool rather because the transaction gas cost is acceptable to them so they could just prefer to stay on layer one and yes and do as your business so and also another problem is a protocol comfortability so it is similar to the e-commerce ecosystem migration so you have to make sure that all the protocols you want to interact also on the same layer to rob systems and have the same have the same properties similar like uh the quality proof precise all those properties so we hope this could come soon but it may not be that easy uh so what we choose to do our layer to the finance introduce is to not ask the to move d5 to layer to layer to log system but a move layer 2 to define style so we built a rob system to pull user requests in the layer to roll up and then aggregate these d5 interactions in layer one to directly still interact with all the original d5 protocols in layer one like a compound that if all the new units left you you name it so in this case we can greatly reduce the average per operation cost amortize the cost of each user and and still maintain the same like ecosystem all the basically all the previous uh concerns i raised about it's gone so we believe this is a much faster path for uh uh layer to earn for this raw up class d5 adoption in the ethereum ecosystem okay now here is a multi-tab of the high-level system architecture and so we have a set of contracts that in general is a grow up contracts it's all uh it is the domain specific uh law it it takes the like a pre-compared logic of how to deal with all those default operations and the role of contracts can talk to a bunch of strategies that also be developed by to four-hour system we have already developed a few strategies and we welcome the community to also con to contribute to this part to develop as many strategies as possible that they can be easily plugged in and to interact with the with the road contract and this strategy is the talk through the existing device protocols in layer one so the high level user overflow is like this so the clients make a l1 one time l1 deposit onto the l1 into the row of smart contracts they deposit 5000 usdc for example and then the robs the roxameter will pick up this deposit and know that okay now this client has this much of assets in the system then the claim can send strategy operations to the road block submitter the layer 2 server it is currently a single server and later can be extended to a cell chain to the then the drop block uh submitter will collect a user's request let's say i want to buy some shares of this of strategy zero onto sales strategy two i want to sell some from strategy one and use that money to directly buy something in strategy three like all those normal financial operations you want and client can specify this uh their operation intense and the roll-up block the meter will collect all those uh clients uh operation request with their signature metadata of course and then pack them into a lower block periodically and commit that rod block uh into the unchained draw-up contracts so the uh the high level of the the roll-up thing is similar to others actually also the contractor will only store the the block hashes and pass others pass the call data used for data dispute so currently we are using optimistic wrap approach and we are also looking to collaboration with other uh decay labs but as well but our current system is built upon optimistic rob and then the also the users all the clients aggregated intents will be the hash of all the aggregate intents will be stored on the drug contracts and after and there will be a few hours dispute window after that window the block submitter can execute the block and do the aggregate operation say that i collect these hundreds of operations from tens of hundreds of clients and in aggregate they they want to they commit 10 000 to strategy zero they want to withdraw 20 000 from strategy 2. so there will be to each strategy there will be a single external function call and the strategy then we'll do some simple internal processing and direct and interact with the d5 protocol itself yeah so this is the high level of high-level user flow you you you can see that it is straightforward it uh the way it save cost is obvious right it reduces the like the on client request the owen on chain cost 201 basically to upgrade all the clients intention of the same strategy into only one operations yeah so yeah this is the high-level uh thing however overflow so now go into some uh detail uh code code overview right so this is the law of contractor core function and the structs so in each block we have root hash in intent hash which summarizes what this block uh how this block want to interact with the strategies and metadata block time block size yes technically we can further compress these atoms these values into one single hash but for this first version we which is for simplicity and correctness so we keep four uh values stored on chain and we have basic operations like deposit withdrawal commit block which is a block id and a list of translations which i'll talk about later which is the either code data and execute block that you you submit the intended transitions again to and to actually interact with the default product with the strategy and of course because it is an optimistic roll-up you can you can dispute if this if the validator is the uh blocked meter submitted an invalid state to you need to submit the or the related translation and the account proof uh so i'm not going to into details of about the trans uh the dispute logic but if you're interested and take a look at our code there is our full dispute cycle yeah and these are the some uh some of the important transitions that a user submitted all blocks of meter summarized to to submit to the blockchain uh one is a commit transition it's more like uh buy shares so that that the user says i want to buy this by some asset amount from this strategy id and have a timestamp and signature and we have uncommit trans transition which is the user want to sell that sell their shares which is in our system we call it asking token strategy token so when you when you invest your asset like usdc dot you will get a corresponding st as t token of that strategy and in the uncommit transition you can see that i want to for this strategy i want to sell my st token and get my original asset back and also withdrawal transition that i want to withdraw my adult balance back to our back to my l1 account and there's another important transition which is the commitment sync transition this one is some is generated by the flux emitter so in each block in each row block the blocks emitter will look at all the clients commit an uncommon transition and and generalize uh summarize the transition yeah okay so um previously i talked uh i uh briefly talked about the uh the high level of our architecture to uh to give you an overview of how the system works but in the upcoming hacksaw and so we will we'll be focusing on helping communities to build build the strategies uh as you can see which is this part of the strategy they want to so these are decoupled coupled with our core law of logic and they have very simple interface they're very easy to be extended and flexible configuration so i'm going to give you a quick overview of uh of what a strategy looks like now you should be able to see the this open source uh layer to finance contracts called github repo and if you go to the contracts strategy you can take a look at the overview of how to development developer strategy and how to uh test your start your strategy like you should read through this to to build things and submit for the hacksaw so here is the interface of the strategy which is pretty simple so you have get asset address which is just to return the token address that they yeah currently we only we support the single token strategy only that each strategy won't have one like a die is one one token if you want to do it it's something like multi-tokens d5 protocols then you may need to do the swap single token swap to multiple tokens in reading your strategy the strategy interface currently only supports uh one token yeah and then the next uh then the two most important functions that the law of contract which is the strategy controller to interact with are these aggregate commit and aggregate and commit so at the aggregate commit is the controller only method right it moves the specific amount of asset from the controller which is the law of contract into the underlying d5 protocol yeah symmetrically the aggregate uncommit is to is uh is also a controller only method that uh moves the specified amount of asset uh from the d5 back to the control which is like if the user's aggregated intent is to withdraw some amount of money from the strategy this aggregate uncommitted should be caught and we also have harvest and sync balance so harvest is is need to be implemented when the protocol provides additional yields in for example in the form of governance token the other tokens like a cong so then this harvest what what this harvest should do is to sell the tokens sell the additional tokens transfer them into the asset token and reinvest into the protocol into the d5 protocol and so but be aware of those uh like flash law attacks when implementing these methods so you should restricted this method to externally owned accounts to only yeah and the sync balance is uh is just to return the balance of the sr token managed by the strategy uh it so in i think in many uh d5 protocols it just it only needs to be a real function but in some protocol d5 protocols it might need to may need to synchronize the balance with the protocol be before returning to it but i think in most cases the real function is enough now i can go over with some simple examples you can see that we already have a few strategies below and there are pull requests for for more strategies which you can also take a look so you can start with the very simplest like strategy dummy which we use the instrument to test our law apple framework right so this is like the dummy strategy which is not a real weapon so the aggregate commit is just a transfer try transfer the the amount from job contract from the controller to this address every commit is to transfect sync balance is just to get the current of uh current address and this harvest because we are going to mimic the harvest behavior for this this harvest we currently in this dummy contract that we specify external funder that whenever you call harvest you get some token from an external founder that which which is to simulate the behavior that have never harvested your your asset increase so yeah this is um like a straw man uh uh strategy contract to show like a the very simplest uh function of it and we can take maybe take a look at some for example this component as example which is the real strategy that we are planning to launch and that so so uh for example you you can see that it is not long it is a yeah it is simple as well so uh gas ready address sync balance easy this harvest you claim the calm token gather calm token and go to uni swap to spell it to sell back and to uh yeah to swap the com token into the underlying asset like dial usdt and reinvest into time to to compound right our grid gate commit is to get is to re receive the money from the road contract which is a strategy controller and to invest those funds into contact into a compound aggregate upgrade can anchor me similarly to redeem underlying assets from compound and transfer back to the europe channel to the road contract yes it's it it is important so this company company itself is a relatively simple strategy and some others we we also have a which is uh even simpler and we have also have a curve which is a a little bit more but still is important so you can see that a building such strategy doesn't require a lot of effort you just need to put an adapter between a layer tool finance law of contract and the actual d5 protocols and yeah you can use your imagination to build more complex strategies like for example to interact with the interact with multiple d5 protocols or do whatever investment combination you like as long as you conform to the simplest strategy interfaces yeah and another thing about the strategy so what uh what would a it requires if you want to uh if you want to hook up your strategy with the layer 2. finance so we in our smart contract we also have a registry contract that you can register assets which is uh uh what types of tokens asset you want to support and which registry you want to the system want to support so in our current version we only allow only the contract owner to register this registry uh register strategy and later this will be extended at the governance function to allow the community to use the governance power to decide which strategy should be integrated into the system perhaps i think that's pretty much of this yeah so the please take a look at the yeah data look out for this this with me and related links to see how to and also all these examples to see how to build a strategy so that's pretty much all for my uh my technical work through of layer two finance we are continue building so what's next our main we will not uh launch our current version soon at the alpha of launch and then and we'll continue developing more features and more uh and improvements in the upcoming releases like more strategies and some flow improvements which may require some some strategy interface changes but the high-level concepts will stay the same and it will do guest ask guest cost optimization currently is in each commit each user like a commit uncommit like a layer to deposit we withdraw transition i think it's cost about 5000 gas and we believe that could be optimized and yeah we'll have more features like a asset and an sp token transfer within the l2 systems and the fee structure governance etc that will be coming soon okay i think that is thank you very much i'm happy to take questions if there's anything i don't see any questions but we will also be on on this court of the the hexa and we have our own discord and a telegram yeah basically there are multiple channels so ask questions later we will be happy to answer you thank you awesome that was a very in informative and educational uh presentation really appreciate it um a question for you um someone would like to have if someone would like to have the slides is that possible sure sure sure yeah definitely ha uh uh this is uh yeah maybe i can just uh share the yeah share this video yeah i'll yeah i'll share the slides awesome sounds good um someone in the chat asked if wait sorry yeah uh never mind never mind oh yeah someone in the chat asks where's l2 code running yeah uh so out uh our autocoder we uh uh we it is not open source yet so we will open source part of the the watchtower challenging part soon and we are seeing like uh uh how much of the like the internal business logic will be open source and how much of the community features will be open source so at the bottom left we will definitely open source open source all the like the watchtower challenger how to how to submit the block and how to reconstruct all the layer 2 states from the entrance contract and discover if there are any uh malicious of of fraud fraud blocks and how to dispute the dispute the the submitted blocks yeah all those logic will be open source there we are because we are currently still actively develop and improve the code there that that part is not open source yet awesome sounds good and good luck to the developmental efforts um we're excited to see what's gonna um come up with that and um if anyone else has any questions please um feel free to like drop them into the sponsor channel so um on their sponsor seller but uh yeah unfortunately we're out of time uh but you know thanks everyone for coming appreciate y'all uh for coming so late at night um but you know like this is a very very nice enjoyable and if 
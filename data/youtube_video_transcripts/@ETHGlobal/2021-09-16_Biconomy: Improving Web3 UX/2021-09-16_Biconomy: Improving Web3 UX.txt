awesome well thank you everyone for joining us today i'm joined by session from biconomi i will let him give a quick intro as i said in the chat you are more than welcome to post your questions throughout the event if they come up i will funnel them to him and we will we'll do things in a little bit more of a personal uh personal manner excuse me um if you have any questions afterwards feel free to put them in discord and continue the conversation there in the viconomy sponsor channel but without further ado so shin if you'd like to if you'd like to begin floor is all yours thanks thanks luke uh hey hey everyone um this side sachin here uh so i'm the cto and you know co-founder at bi economy and uh today i'll be uh you know speaking about uh bi-con me what it does and it's you know we have uh you know few products that i'll be walking you through you know giving you some demos and uh how you can actually use those you know uh products into your projects and you know make uh a superlative you know user experience in your application so talking just a very briefly talking about pi economy uh you know it's a transaction infrastructure platform uh very focused towards the developers so you know we the the the the infrastructure which we have uh is uh majorly to be used by the web3 developers to improve the user experience in their application so you know what bike on me does is uh we have some sdks and you know api is exposed which developers can use and uh using bi economy you can abstract away all the blockchain transaction complexities in your application and let your users you know use your application you know built on blockchain uh you know pretty in a pretty seamless and you know uh very in a very easy way you know to say so to uh start with uh you know bi economy uh has right now three products you know for the developers uh in order to improve the you know user experience uh at the blockchain transaction level one is a gas less product so this product you know allow uh cloud dap developers to enable gas less transactions in their application so you know by economy is uh supporting uh a number of blockchains right now uh including you know ethereum polygon xti uh binance smart chain and all of their you know test nets uh just now we went live with the moon beam also you know on the polka dot ecosystem uh and uh our bedroom optimism are something you know which we are going to uh support soon so if you like uh you if you are building on any of these blockchains you know you can use buy economy to enable these uh you know user experience on your application so in in terms of gas transaction so you know this is a case where uh your users does not uh pay the gas fees for your for the for doing you know transactions on the blockchain but the dap developers you know they subsidize those costs on behalf of their users so eventually that developers are the ones who are paying the gas fees and users get to use the application uh in a very frictionless way they don't need to worry about uh you know storing the native currency of the blockchain in their wallet for example uh so usually this product is used on the blockchains where gas space is you know very very very low uh you know where it's uh very practical for the tap developers to sponsor the fees uh on ethereum you know of course it doesn't make sense uh you know for all the developers to sponsor the ethereum gas fees and uh for for you know such kind of blockchains where the gas lease is quite high you know we have another product called forward forward actually allows you to pay the gas fees not in native currency but you know in erc20 token and we are supporting the stable coins uh you know to uh make make it easy to you know uh like for for the bookkeeping of you know how much gas you have paid for a particular tap or on an application so it's easy to you know record all of these if you are paying instable coins and by economy behind the scenes is you know actually taking care of uh you know paying uh for the transit pay paying for those transaction in the native currency and getting back those cash fees from the user itself in the erc20 tokens so in this you know product dab developers does not need to bear any cost uh it's the end user who are directly paying the fees but in you know erc20 tokens and another product which we have is called hyphen it's about uh transferring your funds across uh you know different chains uh right now we support ethereum and polygon if you want to transfer your ustc usdt or ether you can use hyphen to instantly you know transfer your funds across these two blockchains and you know new blockchains will be coming soon uh so yeah these are the three products you can use i will walk you through them one by one uh mainly the gasless and the hyphen uh so let's let's start with the gas less one so uh to enable you know gas less transactions in your application uh like there are some pre uh prerequisite uh that needs to be done first thing is your smart contract on the chain needs to be meta transaction compatible uh and there are you know many ways in order to make your smart contract meta transaction compatible and even even there are some smart contract that exists also in ethereum today for example if you take an example of die die or usdc uh you know token smart contract they do support you know permit functions uh uh which actually is a case of you know meta transaction uh you know where user is providing their you know his signature and anyone can actually submit that transaction on chain and they will be able to you know provide that permit without spending any gas fees at all so whoever is submitting they are of course you know paying the gas fees so this this sort of functionality can be enabled in any smart contract and i'll tell you like how you can do it there are like two two types of uh there are two major ways you using which you can implement this one is a custom implementation uh in the custom implement implementation you write all the you know logic of uh enabling native meta transaction within your smart contract itself so it's uh you know standalone you know uh smart contract with all the functionality you know written uh in in the smart contract itself uh but uh that but but you know uh we recommend uh you know if you are building new contracts we recommend you to go for this standard implementation it has its own eip you know uh and telling you how you can actually enable the smart contract and it's a standard which you know most application you use so i will you know explain more about this standard so if if you just take a uh you know uh example of a meta transaction you know how it works usually you know user uh who is actually doing the transaction uh instead of sending the transaction directly to the blockchain they provide a signature they provide a signature from their wallet and then that signature is you know passed on to our layer and then you know relay is the one who will actually craft a blockchain transaction using that signature and they will you know sign that transaction that relay will sign the transaction and send to the blockchain and on the blockchain using that user signature you know some signature verification will happen just to make sure that you know no one should be able to submit any information on on the behalf of the end user so that's why you know that signature is very important here and you know replay attack mechanism are implemented on you know on chain that happens and then you know eventually whatever smart contract you are calling that is called and if uh if your you know uh if your smart contract is not meta transaction compatible uh then there will be a problem if someone else is sending the transaction you know on the smart contract message.standard would be the relayers address and that would you know fail the purpose of the transaction so uh when we say you enable meta transaction support by that we mean you get rid of dependencies on you know uh on on some fields like message dot sender message dot value and message dot uh yeah message.sender message.value so if your applica if your smart contact is not depending on these uh you know fields then your smart contract is meta transaction compatible right and how you do it uh let me just go straight to this eip270 implementation so implementing this eip is very straightforward this is your smart contract you inherit a base relay recipient smart contract you can use open json implementation also and there is uh also open zeppelin you know uh implementation uh and you can just you know search eip2771 open zeppelin smart contracts so you can just inherit those smart contracts uh so after inheriting you will be asked to you know uh uh override some functions uh in in this case you will be asked to override this version recipient it's just a normal function for the versioning purpose you can just return any any version over here uh this does not uh depend on any logic in your smart contract and the main main thing is this trusted forwarder smart contract so there will be a trusted forwarder field which you need to set in your smart contract while you know uh while implement inheriting this smart contract and these trusted forwarders are you know uh uh standard smart contract that have already been deployed on these you know supported blockchains so if you are using bi-economy uh you know we have uh you can just go to the contract addresses and go to the eip2007 section you can see different you know blockchains are there and you can see bike on me forwarder smart contact address so here you will find those trusted forwarder addresses over here and once you you know initialize this field you are done like your the part on the smart contract is done and if you see the flow like how the meta transaction flows in this case uh on the client side user will sign a message if he wants to initiate a transaction that message is sent to bike on me layers and then you know here you know one of the layers is chosen and he will uh it will uh send the transaction to the blockchain but it will not send the transaction directly to your tab it will send it to a trusted forwarder yeah and then here you know signature verification happens you know replay attack protection uh you know mechanism is implemented and then eventually whatever you know address uh interested folder will get from the signatures that address will be you know appended in the call data and then your whatever smart contract you were intended to you know call that will be called your business logic will be executed and uh you know uh and uh or like like like your your transaction is com executed and the the message dot sender you know which earlier we were using yeah one thing i think i skipped on the smart contract after doing after setting the trusted forwarder uh as i earlier mentioned you have to get rid of this message.standard you know dependency so what what you will do is wherever you are using this you will just you know replace it with this method and this method you will find inside this you know based relay cp and contract and uh you know whenever you know this method is invoked uh the actual you know uh user address is returned so if even if any relayer is actually sending the transaction in case of you know merit transaction flow this method will return the address of the user itself who has actually signed you know that message and sent to the relay so that way we are you know uh keeping the actual user address in the business logic and the transaction is executed relayer pays the gas fees user uh also you know does not pay any gas fees and there you know transaction is also executed so this is the flow uh so far we have uh covered all the changes you need to do on the smart contract level once they are done now it's it's time to do the client side implementation you know how you will uh take those signatures from the user and you know pass on to the icon relay infrastructure so in order to make it uh you know easy uh we have sdk which we called max sdk that enable allows you to you know easily you know integrate this in on your client site code and we do have a dashboard where you know uh you can uh you know register your application you will you know you will get an api key i will quickly walk you through the dashboard flow also uh this is a dashboard very simple dashboard just you know log in with your credential if you are just register with your email and then you know verify your email login with your credential and here you can you know see uh this list of applications you know you would be creating so in order to create a dab just go to register uh select any network so these are the network you know which we support right now uh ethereum mainnet is not open to everyone so if you are building a dap on the ethereum main net you can just you know contact us and we'll you know enable this access on your email id just give any name select the network you will be having something like this and if i want to open let's say let me open this tab you will just click view dab here you will see all the details related to your application you will see one api key this will be used on the client side when you will use the sdk and on the smart contract section you will have a you know add contract button just go here type any name you want this is just for the display purpose give the address of your smart contract give the api and here you know you need to select what type of meta transaction you are implementing whether if you have enabled the custom approach do this but in case of eip2771 you need to select the trusted forwarder over here and then you you know you click add your smart contract will appear here and then go to manage api section this is the part where now you are moving to the smart contract method level like smart contract is added now you will tell you know the bike on me that this is the you know method on which i want to enable my you know meta transactions so let's say you know your all the smart contract will appear here and all your methods will appear here and uh you can select you know any any of the method just make sure whatever method you are selecting uh the native meta transaction support is enabled on the smart contract level right otherwise it won't work uh so yeah that method you can select just give it give it like any name and you can select like multiple methods over here and once you are happy with all the methods you can just click save and your ap your you know uh your methods will you know reflect here uh don't worry about this api idea at all like sdk internally takes care of it uh but uh uh yeah so this is all the things you which you need to do on the dashboard uh you know just log in create an application upload smart contract and select the methods on which you want to enable gas less transaction uh pretty easy right uh or there are you know other customization which you can do there are some you know meta transaction limits you can set for example this is a dap on ethereum and if i uh want to put a limit on the dap level for example i just want to spend only one ether you know from my side to be spent on these guest slash transaction across whole tab uh you know whatever user are using my application i just want to put a limit on the usage that i can do and uh you know that usage can be uh you know with the duration like every every day i want to spend one ether or every seven days i want to spend one third at the dap level or i can say you know let let me you know sponsor only hundred meta transactions at on my dab uh every every day so that you know these sort of settings you can also enable at the dap level you can do per api level but api means per smart contract method level and as well as you can enable it at the user level so you you want to say i want to like for each user i want to you know sponsor 100 better transactions every four days right this sort of customization you can do over here and let's go back to the you know documentation now we'll talk about the sdk part uh look let me know if there are any questions in between uh so yeah sdk uh is a javascript based implementation you can you know use on the client side if your application is not uh you know based on the javascript platform maybe you are building a mobile application in those scenarios you know you can use the apis directly i'll come to it later but let me go through the sdk first so consider bi economy sdk as a wrapper around you know web 3 around the provider object you know which you get from your wallets so it's a wrapper around you know a web3 provider uh and uh in order to use it just just install it you know via npm uh in order to initialize it just import it and create a new instance of bi economy this is these are the you know uh parameters which you need to pass so this is the web3 provider object which you will get from your wallet so if you are using let's say metamask you know this will be window.ethereum and uh similarly if you are using any other wallet every wallet will you know provide you a provider object just pass it over here api key you know i mentioned you will get on the dashboard this is the api key which you will set and uh you can mention debug through to you know to print the debug logs in the console while developing and when you are initializing this you know this web 3 library instead of passing this web 3 provider just pass the bi economy object so as i mentioned it's a wrapper around the web3 provider so you you can use it the way you use the three provider in your application we support web3 we support ethers you know js also so any of the library you can use by economy initialization is the same in both the case uh once you have in you have created an instance of bi economy and an instance of web3 library uh then you need to you know uh listen for this python meter ready event uh once this event is uh received that means by economy sdk is initialized fully and you know you are ready to uh you know write all you know your dap initialization code and you can do whatever you want to do after this uh now the initial initialization part is done now how will you you know uh initiate your transactions from the client side so the good thing is there is no change in the way you are calling your smart contract methods from the client side uh it will still remain the same uh you will you know create your contract from your you know web 3 or if you are using ethers just create a contract instance and you know the way you initiate a transaction you know from the client side you can do it in the same way uh there are some snippets you know over here using web3 if you want to use eip 7.2 sign signature uh you know there are these combination you can see the code snippet over here and if you want to see the full uh you know example code there is a repository over here you can just you know go to the github and see all the working code over here and uh like there is literally no no change in the way you are calling your you know smart contract method it's pretty same you call the contract method you will get a transaction object you listen for its transaction hash and confirmation everything remains the same so internally like sdk handles all the things like for example if you are initiating a transaction uh we need a user signature right so you you don't see any signature like any code related to taking signature because everything is inside the sdk it will take care of you know getting the signature from the user i'll quickly uh show you a demo code so [Music] let me go through this repository so this is the same repository which you will you don't go from here meta transaction standard it will have a playground branch just make sure you on the you are on the playground branch and uh there is a example and react ui folder this is where you will find the ui code and just do this so this repository has all the different combination you can think of using you know a web 3 library combination and then the meta transaction approach whether you are using custom approach or eip2771 approach and then the signature combination you know you can ask for personal signature you can ask for eip712 type signatures so this is initialized uh let me just try to do a transaction over here all all this application you know all this all these tabs are on cover network by the way on this branch so uh let me see the logs also here okay so let's say i am writing this code this is a very uh you know simple smart contract i'm just writing this you know code on the smart contract using meta transactions so i don't need to pay any guest fees for submitting this transaction so when i click submit this uh my connected wallet asked me for a signature so this you know i provide the signature now the transaction is being handled by the max sdk it has you know routed the transaction to bike on layers and they have it sent the transaction to the blockchain and i'll get the transaction hash i'll listen for the confirmation and the transaction would confirm on the blockchain so if you see it is already confirmed it's on the cover network and if we see the transaction hash let me see it over here uh explorer is still waiting you know to to show the confirmed ui uh but if you see the from address over here this four four five five is not the address which i have in my wallet like it's 7f3b right so this is the case of meta transaction even though i sent this transaction uh this is one of the bicon mirror layers who has sent the transaction and paid this amount of transaction fee the transaction is executed on the smart contract and uh you know the the you can see the code is actually reflected over here so everything is done uh i didn't need to pay any any gas so this is the case of meta transaction this this is the custom approach by the way which i showed you let me show you one eip2771 approach you can just click on any combination here let it initialize [Music] yeah so here let me this is another smart contract you know here let me let me write uh another quote over here so earlier which you you know saw the the message this message is actually different so as i mentioned in eip2771 uh the signature verification is actually done by the trusteed forwarder smart contract and this is if you see uh this is the bi economy forwarder a smart contract you know where the signature will be going and this is a signature which i will be signing and i sign this and again transaction is handled by the sdk relate to bi-con mirror layers they will send the transaction to the blockchain and return the transaction hash and on the application i'll just wait for the confirmation again you know this matter transaction has [Music] gone through uh if you see again this uh this is like another new layer is chosen by economy uh and this transaction you know went through this layer this time but the logic remains the same on the smart contract uh you know whatever i am intending to do this is executed i didn't have to pay any gas fees uh because this relates in the transaction now the main thing i which i wanted to focus here is uh this is a smart contract where you know the transaction went now this is not my you know dap smart contract address this is a trusted forwarder smart contract and if you see the internal transaction there is another internal transaction that that that you know went to this uh this smart contract now this is my tap you know where my dap is actually uh you know hosted so in case of eip2771 there will not be any direct transaction on my smart contract uh all the transaction you know which you will find in the internal transactions you will see this is one minute ago and uh here you can find all the you know meta transaction uh this way so yeah uh this was the demo and how you can actually enable you know gas less transactions in your application uh you have to go through the dashboard you have to integrate sdk on the client side and on the smart contract just make sure your contract is meta transaction compatible using eip2771 standard so this was the gasless you know product any any any doubts let me see the chat if you've got some some quick questions i i didn't want to interrupt your flow there um but we have we have a few questions should dapps pay an initial fee to enable smart contract to use gasless transactions so uh if you if you're using bike on me right now on some you know smart con some some blockchains you have to like uh you know pre-fund the gas to buy economy and then biconnect will take care of you know spending the gas fees for your dap transactions using their really using our layers uh on some you know uh blockchains we are actually sponsoring the fees uh on behalf of you because it's not very much or like for example on you know polygon the gas phase is very very low so if you are just getting started uh you know you can use bike on me on polycon even even on polygon mainnet and we will not charge you any gas fees we will sponsor the gas fees for initial you know two or three months and uh you can just test it out if everything you know you like it and then after that you can just you know pre-fund some gas fees uh for your application um and then you know we'll we'll take care of you know using those funds to pay the gas fees for your transactions right on i i hope that answers the question um feel free to to come off meet if you'd like to ask um a follow-up we have another question in the chat any information on integration of gasless transactions with money streaming using superfluid uh with uh i don't have any code snippet or any example regarding that integration but it can work with any smart contract that has meta transaction you know uh support be it you know smart you know fluid smart contracts or any smart contract just make sure there is a meta transaction support on the smart contract level and you can use bike on me doing it to do the cashless transaction over here over there excellent well um if anyone has any further questions feel free to again hop off mute and uh go ahead and ask while you have a minute um we'll hold on for just a second if there's any further questions but that that helps everybody and we're we're all good to go i think we can wrap our session right here um thank you so much for presenting this no no no no i i i have more i have more to present it's great having you it's great having the economy team here again um you know we're really really excited to have you guys back and this this is really cool stuff i'm really excited to see what the hackers build with um during the event uh as we stated earlier if you have any questions you didn't think of or if you if you didn't want to ask right now feel free to drop them in the chat in discord in the bi economy sponsor channel that would be a great way to gain the resources you need session will probably be there himself helping throughout the uh the event so if you're building with biconomy look no further uh do we do we have more time luke because yeah yeah yeah yeah no no no rush no rush okay take a few more minutes go for it yeah yeah so i i want to cover this product also here in this workshop uh this is uh as i earlier mentioned you know this is a product you can use to enable uh instant and you know uh cheap uh transaction across ethereum and polygon so this is like we have like in in terms of hyphen we have also made an user interface where you know anyone you know even a normal user can come over here and use the hyphen product uh move their funds you know across ethereum and polygon uh you know i'll i'll also show you first i'll show you this this demo and then i'll walk you through this documentation and about how you can actually integrate this product in your application so if you you know you can actually build use case uh different use case using hyphen uh sdk uh let me so this is uh the user interface i i want to transfer my ether so you know this these are the supported tokens i just i just want to move my ether from ethereum to polygon uh very quickly for example now there are existing bridges like uh you know official you know bridge which polygon has made between ethereum and polygon if you want to move your your ether from via that bridge you can do that but from ethereum to polygon it will take you like 10 minutes uh to move your funds uh and while from polygon to back to ethereum it will take you 45 minutes you know or even like one hour for you to move your funds but if you if you are using hyphen and this all can happen like instantly uh if you see if i want to let's say move point one you know ether from ethereum to polygon uh there is some liquidity provider fee this is like 0.1 percent of the amount that is being transferred uh there is a transaction fee associated to it so uh you know the flow would be like this where uh you will deposit this ethereum on a liquidity pool manager smart contract on ethereum and there are some executor nodes which by economy is running who are constantly monitoring these deposit transaction once they see this there is another liquidity pool contract on polycon they will just you know uh initiate a transaction from that pool to release the you know the the um whatever amount you want to transfer now of course like the the transaction which these executor will be doing on polygon will have some transaction fees associated to it so this is that transaction fee and this is zero because we are sponsoring all the transaction on polygon because the gas fee is very very low so we can do that so that's uh why you will just have to pay this point one percent fee for the liquidity providers and you will get this much amount of you know each on the polygon so let me try to do this transfer uh now i'll do a transaction on ethereum uh in order to deposit my you know this asset on liquidity pool manager let me check the gas prices what are the gas prices and accordingly uh you know i will just send this transaction uh let me choose this and uh let me send this transaction on ethereum so if you see the transaction is uh broadcasted it's pending it has confirmed on the blockchain now uh let's wait for the transaction to happen on polygon now you know off chain executors must be listening to this transaction and they must have initiated a transaction on polygon and where you know i will get my ether you know instantly on polygon uh so okay the transaction is already done if i want to see i can see it on the polygon explorer this was done like 20 seconds ago and uh i can confirm my wallet address also 7f3b so this is my wallet address and i have been you know transferred this much amount of ether so this happens like instantly i didn't have to wait 10 minutes or you know even one hour if you see the details it happened like within six seconds from ethereum to polygon so if i want to move funds across you know different chains very quickly you can actually use hyphen uh you know to do that uh and uh you know this is a transaction fee that was involved with this transaction so there was nothing you know charged about this transaction from the end user this is something you know bike on me is sponsoring because it's like pretty pretty low right uh so yeah this is the transaction if you want to move from let's say polygon to ethereum uh and if you uh let's say want to move uh this much amount again now now now there will be you know now there will be some transaction fee associated because you know executors will need to do a transaction on ethereum blockchain and they will have to pay the transaction fee so since ethereum is not you know very cheap in terms of transaction fee so that's why you know uh this is uh this is the amount which you know hyphen has guessed that this would be the transaction fee that executors will need to pay so going from polygon to ethereum this is the fee which will this is the fee also you know to be deducted from the amount you are transferring and then you will get the remaining amount on the ethereum so now now let's come back to the documentation on how you can actually you know enable this this sort of you know user interface within your application also so you i mean the the the code for this ui is actually open source so you if you want to check the uh you know implementation you can just go to the bike on me repository and uh the name is right now instead exit demo i should probably change the name but yeah this is the repository for uh that this user interface which you are seeing here so you just want to refer the code you can go to this repository i'll quickly walk you through the uh like how you know how it works how you can use the sdk hyphen sdk to enable this so as i mentioned you know just there are you know two liquidity pool smart contract on each chain and then you know there are executed nodes they have like watchtower to monitor these deposits transaction which users are doing and based on that they will there are some executors who will you know initiate these cross chain transaction uh you know across this blockchain so if like from an end user point of view you don't you do not do not need to like know like what's happening behind the scenes as you saw on the ui everything you know is pretty seamless and uh talking about the sdk like how you can actually you know use this so uh you know uh as i told you about the mexa sdk the where the gas transactions were done where you the user sign the signature send the transaction to bicon mirror layer and then they will send the transaction to the blockchain right so in this case this does not happen that way uh you do not need to send any transaction to any relay but you can just directly you know call the deposit method of the liquidity pool manager smart contracts by yourself also you know even if you just want to test it out uh there are let me let me show you uh interrupted this is the address you can see the same address on ethereum this is a liquidity pool manager if you just want to do a cross chain transfer just you can interact with the smart contract and you can just directly call deposit erc20 you know method if you are moving erc20 tokens and deposit native if you are using if you are if you want to transfer ether uh because ether is a native currency on ethereum so you can just directly call these methods the executor will still be listening to these incoming transaction and they will you know complete your cross chain transfers so even if without using sdk you can check out these cross chain transfer by yourself but in order to make it very easy to do the integration to you know interact with these smart contracts and then also you want to check the status of your transactions you know when when the transaction is done on the other side of the chain so in order to ease you know all of these operations we have like build a hyphen sdk um you can you know install it the same way you use uh max hdk just install it import it and then initialize it again using a provider object you know you will get from your wallet and then there are these other extra you know options you can actually pass environment uh you can you know if you are test doing it on the test network so gourley and mumbai are the test networks for ethereum and polygon you can do it over you can mention the network here and there is some optional callback method you know whenever the cross chain transfer is completed uh sdk will actually call this method uh callback and you will get to know that your transaction is actually you know completed so this is the way you can you know opt for the confirmation like uh for the status updates of your question transactions and uh once you initialize it you can just call in it to initialize the sdk you can use a weight over here this is our improvement over the mexico sdk where you know there were some callbacks but yeah like here there are no callbacks you can just use a weight over here and uh in order to like before you do a transaction of course like if you are like trying to deposit some erc20 token in a smart contract you need to give you know approval also to that smart contract so there are some pre pre-deposit you know checks you can actually do using the hyphen sdk so you can just call hyphen.predeposit status pass the token address you want to transfer amount from chain id to chain id user address and hyphen will sdk will actually do these checks for you uh whether you know everything is okay to proceed or if you know allowance is not given for that particular token then you know you will get to know that you know i need to first give one approval to the liquidity pool manager smart contract and uh you know it will also check you know uh the these from j92 chain id whether they are supported by economy or not so you will get you know errors like unsupported network it will also check whether there is enough liquidity on the destination chain for you know your transactions to be fulfilled so if there is no you know liquidity on the other side of the chain it will warn you before you do this deposit transaction and you know these sort of error handling you can actually do before you actually call the deposit method and once everything is okay once you get the response code dot okay you can actually proceed uh to do the deposit transaction and again as i mentioned you can either you can directly interact with this uh or from the code if you want to do it you can just call the deposit method of the hyphen uh sender address receiver address and by the way these two can be different on the other receiving side you can have you know these tokens on in a different wallet altogether so maybe you want to move from polycon to your binance wallet for example so you can just put your binance you know application address in the receiver and uh or you deposit on polygon you will get it on your binance application that's also you can do uh token address deposit contract address will be the liquidity pool manager address uh and these this is the address and this is same same address is deployed on polygon also so it's like easy for you to you know use these addresses uh amount from chain id to gene id this is an optional you know flag you can you can also use you know buy economy gas less transaction in hyphen also uh again if you want to you know make this deposit also gas less for the end user uh so on polygon actually you can do this so in order to make it easy you can actually use bike on me over here i will not go too much into bike on my integration in hyphen it will be too much but you can actually go through the uh you know documentation over here how you can use bike on me also to enable gas less transaction in hyphen deposit methods also so yeah i mean this is the final thing you which you need to do once you have called the deposit method your part is done uh now you will just need to wait for its confirmation wait for you know hyphen uh executors to complete your cross chain transfers and wait for the uh that the the transaction confirmation on the destination chain now next part is how will you get to know like you know when the transaction is initiated on the other side of the chain or what is that status so either either you can just go to these helper methods either you can pass this callback method in the constructor itself or if you don't want to do this you can also call this hyphen sdk method check deposit status pass the deposit hash and the form chain id where you have done the deposit transaction it will tell you whether the cross chain transfer has been initiated or not if it is initiated whether it is still in processing state or whether you know the the transfer is actually processed so you will get to know the the status of your transaction using this method also so you can either periodically check this in your application or if you don't want to check this periodically you can opt for this callback method hyphen sdk will actually check this internally for you on a periodic basis uh so yeah this way you can actually integrate hyphen in your application also uh like within the uh you know application you can actually uh give this experience of cross chain transfers using hyphen and maybe maybe you want to enable like more use cases on top of it maybe you will have you want to make your own smart contracts on top of hyphen liquidity pool manager to enable swaps like if you want to transfer ether here and you want to receive uhcc on the destination chain you can actually build these use cases on top of you know hyphen by building those you know custom smart contracts by your own that works on top of the liquidity pool manager smart contracts and uh maybe maybe uh yeah swaps can be implemented using this using hyphen sdk or if you uh i think we uh we we have published published some bounties but uh it will be good if if you can make uh let's say a widget for the hyphen where you know a plug-and-play widget would be there using this max sdk internally and you can just plug and play in any application where you know some standard interface like this maybe or another interface will come up and everything will happen uh you know like this and uh like integration would be easy for any application to just you know drop this widget in their page and enable this communication within that application only so these you know lot of use cases you can build using hyphen and uh that's all from my side thank you thank you for that i'm really excited i i apologize we we do need to um get moving to the next session but thank you for showing showing us through the hyphen um the hyphen app and really excited for people to implement that in in their hacks um again connect connect with session in in discord uh and the rest of the economy team i know we were uh pretty close there but i think there's probably a little bit more information he can impart on you um but is is is that okay with you i mean is there a good place to connect with you if they have further questions yeah yeah you can reach out to discord uh we have the sponsor channel also but you can also reach out to bike on me's discord channel also so any any any channel is fine telegram discord excellent excellent well thank you so much uh i apologize we're short on time here but thank you so much for presenting it's been really incredible yeah and thanks luke for allowing me to present here and yeah looking forward to some some great great hacks over here thanks it's gonna be a fun month all right we're gonna be closing this stream here uh our next session in 10 minutes so we're gonna run 
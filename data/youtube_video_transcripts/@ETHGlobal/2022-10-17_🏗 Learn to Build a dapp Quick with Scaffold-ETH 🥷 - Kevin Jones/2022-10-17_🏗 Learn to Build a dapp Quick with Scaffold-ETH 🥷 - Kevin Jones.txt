foreign [Applause] [Music] how you guys doing thank you so much for coming you guys having fun or what welcome all right so uh quick introduction my name is Kevin uh I actually work full time for a Web 2.0 company uh nginx you might have heard of them uh most popular web server out there uh but I also uh am a part-time developer advocate for scaffoldeth thank you uh and I work based basically in the build Guild if you're not familiar with build Guild it's basically a group of developers that like to build on ethereum most of them are fond of scaffold eth which I'm going to be talking a lot about today and I also have a non-profit that I'm I founded in California just to kind of educate people about blockchain specifically ethereum I'm also a mentor for growick which is a free solidity track you guys if you're interested in that it's a free track and it's basically an eight-week cohort where you can learn more about solidity and I'm a photography and filmmaker you'll see me running around I'm actually shooting photos for the event today so anyways that's me that's my contact info if you guys want to follow me at all um so what is scaffold eat so um most of what I'm going to be doing today is actually a demo but I just want to give you guys a brief kind of overview of how it works um and what you need to get kind of go in and get set up uh you need git obviously because you need to be able to check out the repository uh and then you need node.js and yarn installed um node.js is pretty much the prerequisite you need at least version 16 or above so make sure you have that make sure you have the newest version of yarn don't be using like an old version of yarn on Linux there's this kind of old version of yarn that doesn't work properly so just get the newest version of yarn and then you'll be good to go that's really the only tools you need to get going it's going to spin up hard hat for you so hard hard Hat's like one of the main components to scaffoldeth uh as well as react so it's going to spin up react for you and it's going to do a lot of like the magic that you don't have to worry about like setting up a a hackathon project or any any web3 ethereum based project can be a hassle because you've got to spin up all these different programs and make them talk to each other and figure out how you're going to inject your API into react and yada yada everything's kind of already done for you and I'm going to show what that kind of looks like um and then everything obviously that I'm going to talk about today is based on solidity so you know compiler contracts and solidity and that is pretty much the you know the smart contract language of choice for uh scaffoldeeth um so if you're a developer how how do you spin it up so the first thing you're going to do is clone the repository you're going to do everything is based on yarn uh yarn scripts if you're not familiar with yarn yarn's really awesome because it is a package manager but it also allows you to run these cool like kind of command line scripts with simple commands so you can do that yarn this yarn that yarn whatever so yarn install is going to do all the dependencies for you and install all the prerequisites so you don't really need to like figure out what version of uh this particular react you want to use or a hard hat it's going to do that for you based on the current version of scaffold eth and then you're going to run yarn chain that's going to spin up your blockchain hard hat right running locally and then you're going to run react on localhost 3000 using yarn to start so it's yarn install you only do that once you're in chain to spin up your blockchain yarn start to spin up react and then you do a yarn deploy and what that is going to do is going to use hard hat to take the there's there's kind of like a hello world smart contract I'm going to show you we're going to start toying with it and just going to ship it and deploy it and that's going to also automatically inject the ABI so if you don't know what ABI is it's basically the way that the smart contract your front end can interact with that smart contract in a way because obviously when you compile down your smart contract into byte code it's not human readable specifically it's not readable from your front end either so as you interact with your application pretty simple uh you start to form blocks and you can start testing right and every time you do a deploy it gets a fresh copy of your smart contract and we'll show what that looks like as well uh so that's pretty much all the slides I don't like doing slides because slides are pretty boring so let's just get right into it um so if you go if you do a search for scaffold the first one is going to come up is going to be the GitHub repository so the primary repository for that actual scaffold eth is here scaffoldeth there's also this like challenges directory which is linked to like the speedrun ethereum challenges which I'm going to talk about in a second and then there's some examples as well so the cool thing about it is like you can find like ERC 721 example you can find an ERC 1155 example there's pretty much an example for like everything you need to know or need to build on top of so it's a great starting point for hackathon projects right you don't have to worry about you know injecting the open Zeppelin contracts they're already pretty much set and ready to go it's even got a little bit of a front end going for you it's already got ethers JS hooked up it's already got your API plugged in yada yada everything's kind of set up so if you like as an example let's just say you went to like scaffold youth examples and then you did a search here you could type like ERC there's an erc20 new demo there's a simple ERC 721 1155 and you can kind of pick and choose like from that starting point and that's a perfectly valuable starting point for your hackathon project okay um but we're going to be focusing on scaffolding the actual main build and that's where you should really if you're just like toying around and like building uh you're going to use that uh by the way all the instructions of everything I said is going to be inside of the repository as well so like the Yarns yarn install yarn chain urine start and pretty much everything I'm going to go through today is in here so don't feel like you have to follow along I'd rather you guys just kind of watch me do it and then unless you're really good you can follow along um and then after you get scaffolding set up I always recommend people if they're still learning to go to solidity by example and like copy and paste stuff from solidity by example into your smart contract and and start testing that way once you get like comfortable with solidity that's when you'll say okay well I want to like test my abilities this is outside of obviously the the hackathon but when you want to start learning more speed run ethereum is a great resource now it's um a basically like a set of challenges that you go through and real quickly one simple challenge zero is you build a simple nft challenge one is you build a decentralized staking app a token vendor a dice game and you go through and eventually you get invited to the build Guild right so uh and then you can actually start kind of being part of the build Guild community and then you you obviously get access to the special chat channels too as well where you can like talk to the developers and other builders and kind of work together to kind of solve these challenges it gets really hard after challenge four so if you can get through these challenges um it's a lot of fun all right that's enough chill about that but this is a good scan this if you want to know anything about scaffold eth all the links for scaffold ether in this one high hello card so if you're interested in that scan that I'll give you guys just one quick second and then I'm also going to give a poapp away so come see me afterwards and I will bring this up and you guys can scan the co-ops as well okay so let's uh let's get going here so um I I use tmux I don't know if you guys are familiar with tmux but it's basically like a terminal multiplexer it allows you to have more than one window open at a time you can do this in in multiple windows but the general like rule of thumb is you need like three windows open when you're working with scaffold Heath okay um the first window is pretty much where you're gonna uh do the yarn install so you're gonna set up install the dependencies I've gone ahead and done that it takes a little bit over a minute to do okay but once you get it set up you don't have to do that again you're good to go then all you have to do is do a yarn chain yard chain it's going to spin up block the hard hat node it's going to run on localhost that's it you can pretty much leave that window open all the time I like to have it just here in the corner because like you might use hard hat console to like print stuff to that console and you might want to like debug your contract and then over here in a new window in the same directory you're going to do a yarn start okay so what's that going to do it's going to spin up react on local localhost 3000 that's going to take about a minute so we will let that do its thing um and then the last command if you guys remember yarn deploy right so those three commands basically we've deployed adapt locally on our Local Host we can see here that we have we saw some contract calls uh let me zoom out a little bit we have some contract calls we have some uh it tells us how much gas was used we can see that react just started on the right now we see more contract calls and we see how much uh gas was used to deploy our contract on the bottom we even have our address so we get this kind of like cool printout it tells us how long it took let's take a look at scaffoldeth so it says I'm on minet oh let me disconnect from metamask okay so this is scaffolding so when you first get in scaffold eat uh it's basically react right but what's cool about it is it has all this stuff already ready for you okay um this first app poem you can think of this tab here like everything in here is like where you would build your dap that you're actually building for the hackathon it's like you're dap inside of scaffoldeth right and this is a special app.jsx file that's inside react and you can just build around that right so you can inherit all of the you know components that you have in react and whatnot um but what's cool is this debug contract debug contracts folder so what this does is essentially takes a copy of your contract and it builds like a full functional like debug UI for you so it has your your variables your your functions it has your contract address it has the value stored in that all in this one location and then you can really like kind of like test your assumptions as you're like developing right in solidity so let's take a look at what that contract looks like so Adam I'm going to use Adam um you know you can use whatever you want but obviously Adam is is uh just a basic text editor and what do we got here um we got a packages folder and then we have a hard hat folder and then we have a react folder okay most of everything I'm going to show you today is really in the hard hat folder and we're going to be working out of the contracts folder and inside of that is your contract okay so this is kind of like the de facto hello world contract that comes with it so we can see here that we Define a version of solidity we Define a license we import hard hat console so that we can do some logging to the hard hat console we name our contract and we also have like an event that we're we're doing that that basically broadcasts the address that calls the purpose function and the string that they pass into that function and then we have a another variable that we Define and we have an empty Constructor which is not doing anything but we could do that I'll show you about that in a little bit and then we have set purpose which is a function that allows us to change that that variable right we have this kind kind of like Public public variable here we could change it here like if we say Unstoppable like that and then save that and then do another deploy and by the way you might want to reset enforce or deploy sometimes just do dash dash reset and it will force a new contract to be deployed so I just add small change and then now we can look at the change here it's been changed in here right and so you're able to kind of just do your changes to the smart contract deploy go back start testing that's obviously just a very simple test but let's get going a little further down the contract okay then we have inside the set purpose function it just takes a very it takes a variable essentially a string and passes it to the new purpose and then we log that with console.log using hard hat console and then we emit that event right so that the we can capture the event and see that so it's a pretty smart it's like it's just a hello world it's very it's like the simple uh starter contract let's like let's make some changes let's make some interesting stuff so the first thing you'll learn uh you might want to do some kind of like access control so let's just do like a quick uh kind of like janky Access Control uh we'll make it owner sorry owner public or address public owner equals and we'll go back to our thing here and what do we see up here on the top right so this is a burner wallet okay the burner while it's cool because you don't have to have metamask installed it's just using a browser wallet and if like you were to look up open up another tab you still have access to that because in the browser right so you don't lose it but if you were to come over here and say oh well new incognito window and do localhost 3000 we would get a new instance of a burner wallet because it's an incognito one right so let's leave that open for right now because we're going to get back to that in a second but my point is that we can just use this wallet and it's empty right now but we can just grab some funds from the faucet clicking that button we can even grab more funds if we want you can grab the address we can come down here to the to the faucet and say oh I want like way more uh let me give me like I don't know thousand bucks send I'm able to just grab that those funds from hard hat just dump them into my burner wallet so I made silly ready to test I don't have to worry about metamask and nonces and that junk right um so let's let's make a change let's grab this address okay and we want to do like access controls now we have access to this wallet by the way the private Keys here as well so you can export the private key that it generates so it's full functional wallet right you can also import private key so if you just want to use like some one that you keep keep using um and then let's go to the thing and let's define that variable save it and then redeploy okay let's make sure it deploys correctly first which it does okay and then now what do we see we got a new variable owner right so what we could do is say like all right let's make sure that only someone who calls this function here is an owner like an access controlled uh function we could do something like a require statement right and we could say required that the message that sender is equal equal to owner otherwise you are not allowed to call this I don't know something like that um so what I'm doing here is I'm just basically like toying around with my smart contract redeploying my changes instantly I was able to get up and running with adapt and testing my assumptions so there we go um we have our contract we got a new one and then now if I want to come over here this incognito tab get some funds go to the debug contracts and try to change the purpose I don't know to Foo like this it's going to say you're not allowed to call this right I've done some basic Access Control right but if I come over here and I can say fubar sh send and it lets me right so good bad right uh but let's let's go a little further let's actually like wipe out like this concept of like hard-coded addresses and let's use anyone familiar with open Zeppelin open Zeppelin right awesome if you don't open Zeppelin gotta follow those guys um the first thing the second thing you'll learn with smart contracts is inheritance so we can see right here we can do like an import right we can import an open Zeppelin contract and then we can make our contract inherited from that right and you'll see a lot of the examples like erc20 example ERC 11 20 1155 721 use this import and inheritance function so let's do that and then let's save that and then let's deploy again so instead of doing a hard-coded owner we're just doing this inheritance method and we don't have only owner that's the thing we got to do is we got to inherit the modifier so instead of using a require statement we're using a modifier which is part of inherited uh Access Control ownable contract but you can see what we're doing we're toying around let me deploy again because I forgot that and then let's go back but what what's different now does someone want to tell me what's different the owner address it's unexpected what owner address is that it's just a random string right well hardat uses the very first uh contract address or I should say the first like uh it has a set of 20 accounts uses the first account to deploy the smart contract so what's happened is we've had hard hat to play our contract but it's hold on to the contract now we can we don't have any access control because before we had hard hard the hard-coded the owner so the next thing you'll learn you'll learn with scaffold eth is that you need to be able to change the deployment so if you look right below the contract folder there's a deploy script okay and this is where when you do a yarn deploy this is what's what's being processed right this is what's running and you can see here that we get a copy of our contract uh we we set the deployer as the deployer which is from the named accounts coming from from a hard hat and then we can see here that we get an instance of the contract and so in this script now we have a copy of the contract here so what we what we can do is call an inherited function right and if you know ownable or ownable uh opens up and ownable it has what's called transfer ownership function okay and you'll even see it down here on the bottom because we inherit it and you can see it's right there so now what we need to do is actually transfer the ownership of our smart contract to us and so we can grab that address again like this and then you actually you'll see right here that we have uh I I have it like kind of like grayed out in there uh so we can just grab that and here we can take the contract call the transfer ownership and then put the address in here so sorry let me grab it again and then save and then redeploy give it one sec that worked nice and fast and now you can see that it owns the matches again so we deployed the smart contract called the transfer ownership function and transferred it to ourself so that's cool we've been able to kind of toy around with our contract and you see how you get in this kind of loop where you like like I said you have hard at running you have react open you're testing your your smart contract building some stuff um and then you just kind of start testing those changes and you can even do things like I'll just do a couple more things here just to show you we're done with the deploy script so we're good now we have kind of Access Control let's pretend that we don't want to actually call only owner on that function because it's kind of boring to have like one function that only the owner can call let's make it a public function but we could do something like um let's require uh like a amount of value is sent um 256 public price equals I don't know point 0.001 ether so we can set up a a variable price and then we can come over here and then we can get back into our requirements right and we can say something like require message.value which is the the transaction value is equal equal to price or we say not enough something like that right so now what if we deploy our change which uh oh sorry when I always forget this you have to make that because it's we're accepting value now you got to make it a payable function so let's make it payable save that and deploy did I spell it wrong I did thank you one more time but you guys can see how easy it is with scaffolding to get up and running with a project um you know using this and start doing some changes so cool now we have a function but what do you see well the UI is adapted and it said oh well now we need to pass some value so then you can start testing and we even have that new variable here which is showing you the value and way so the first thing another thing you'll learn about you know when you're writing smart contracts is you need to send your transactions in way and not in ether and so um you know what this does is it kind of just gives you the variable and if you didn't have this variable here like you could use this little cool green little icon that does the math for you which one ether is uh equal to times 10 to the 18th power in way so what we could do is say okay well now we have this this function we want to change it let's set the purpose to Bogut uh and then we have to pass in if we were to pass zero zero zero one ether sorry let me do zero just so that doesn't freak out and then click this little button that would be the wrong amount it's going to tell me not enough right but I could just grab this and copy this paste it here send boom it worked so now what happens with our smart contract we have it has value right now it's actually storing some value which is cool uh it's like this little vending machine right so we could probably write like a withdrawal function in there that would be cool right and then with that one we would definitely want only owner right so we could use that only owner modifier uh but let's just do one more thing that I just want to show you with like one small change you could do something at the very bottom of your function that says price equals to price I don't know times two like that and then deploy that change and with one small line in the contract you completely change the behavior of the of this um kind of vending machine it deployed successfully and now if we change the uh thing to I don't know uh Colombia boom send now we'll see that the price adjusted right we did this simple modifier right okay so I think you guys get the idea it's it's just kind of like toying and like tinkering around with your smart contracts uh testing your assumptions with multiple identities right multiple browsers if you have problems and you want to like uh you know if you have any issues there's a telegram channel for getting uh getting like problems resolved I'll be around I'll be shooting photos but I'm more than happy to help you guys out if you have questions um yeah that's pretty much what I want to go over uh any questions I'll try to get at least some time for questions yep uh yeah yeah yeah so if you're um yeah if you're I mean are you saying like for a test net oh so let me let me kind of show you real quick you can generate an account so you can do yarn uh here let me open this so it's full screen you can do yarn run generate and what that's going to do is generated a special deployer mnemonic it's going to place it inside of your directory which I won't click on it but it's right here so it has the the deployer address the mnemonic is in there so you can inject that into metamask as well so you have access to it and then you can do a yarn account like this and you can also like what I would do is like I have a punk wallet on my phone and it pops up a QR code for you it goes by real fast but you can just scan the QR send some funds to that one and then now you have this kind of like wallet that you have access to the private key right no no this is a it's stored right here on your thing yeah yeah that's your deployer account so yeah that's a good question I was going to show that but I didn't have enough time and I wouldn't be respectful of other people I was going to deploy it and you can also verify your contract with a yarn verify um you can do all this cool stuff uh you can also do yarn Surge and you can upload your um your dap like you can build it with yarn build and then you're in Surge and it'll upload it to Surge you can also yarn ipfs and push it to ipfs so there's all this stuff that's just already written for you you don't have to hassle with it just take a look at the package Json file and it has all the yarn commands and yet one more question yeah no there is a test in there so you can do like a yarn test and there's a there's a test in the hard hat test and you can create and build around that um if I did right now it would fail because the test is designed for like the hello world one that comes with it um but yeah you can definitely just do a hard hat test and I think that directory is uh right here test my test and you just you write it like a normal hard hat test so it uses chai basically hard hat and shine yeah one more so uh there's uh sneak peek there might be a future version of uh scaffolding that has Foundry um there actually is one I think someone's already built actually that um it's not I don't think it's in here yet but I would just keep an eye on the repository here and see I could actually check right now um oh there is one yeah so there is one with Foundry I think I think it's kind of like yeah I don't know if it's been tested too much but um probably not the recommended one to to use for this hackathon but um yeah looks like there's already one yeah thank you guys appreciate it [Applause] 
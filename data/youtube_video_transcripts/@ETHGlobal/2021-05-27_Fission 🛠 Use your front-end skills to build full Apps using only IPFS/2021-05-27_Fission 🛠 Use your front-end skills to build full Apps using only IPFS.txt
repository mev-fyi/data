so without further ado i'll let bruce and james take it away introduce himself and uh start this workshop awesome thank you catherine uh hi i'm boris mann ceo and founder of fission we build heavily on ipfs we have a background actually where we work a lot with eth and some core dev activities um and uh gonna show you pretty much helpful tips on how to use ipfs james i'll hand it over to you to introduce yourself sure hey everybody i'm james i work with boris at fission i am head of the developer success team uh which means i work with uh developers on our platform making sure their apps are awesome so i'll be here to help out with any technical questions as boris goes along and my apologies i have a youtube stream somewhere in the background so i'm literally hearing myself talk right now uh on a time loop uh but i'll uh i'll figure that out in a minute so what is fission uh what we're doing is really building a client-side edge stack so that you can basically add identity and auth and use your own data and an entire distributed file system on top of ipfs um really standardizing and integrating hard things like privacy security sync and a bunch of other stuff that are hard for individual developers to build and we want to make these things accessible to people on the front end so that you can focus on full features apps that act like desktop or mobile applications including working offline and all of this is really because of the magic of ipfs so how do we use ipfs um content addressing is the huge innovation uh that ipfs does um it means the data is portable uh every single piece of content has this unique content address that isn't tied to a dns address it's not tied to example.comforest.jpg it's just a hash so that means that i can put it online you can copy it you can host it from your computer uh without permission so that kind of web3 permissionless is there of course most of the web runs on http and what the web native api does are our software development kit is it helps you run ipfs in the browser uh so we actually launch uh js ipfs which is also developed by protocol labs to run a small ipfs node purely in javascript directly in your browser um and then data is synced to individual users browsers and published out natively over ipfs we're not making restful api calls or talking to a centralized server uh we're making calls over ipfs and then our server is helping make sure it stays online uh so you don't have to necessarily worry about arcane concepts like pinning and you can add any other regular calls that you do on your front end so we actually designed an additional layer on top of ipfs that we call the web native file system so it's built on top as a public and key a private encrypted file system so right now anybody can access a content address on ipfs if you if you know that address so essentially everything is public on the wider global ipfs network of course this doesn't work if you want to share private data and and also adds a few other things like versioning um and metadata to make it an actual file system that you can use so we think ipfs and contrast content addressing is a truly new thing in the world it's super exciting but what we want to do is make it so easy to use that it's boring so our web native sdk uh really decentralized offline user controlled web app development um we include an auth system um so that no password secure authentication we're actually doing private keys in the browser which mostly in ethereum land you're taught is really dangerous what we're using is the web crypto api so the private key is kept in a browser including on mobile there's a link to our guide and that's where you can get started with the sdk and it's also where you can download the cli and get started all the stuff that we're doing is open source we're happy to have people uh come extended and work on it right now but right now our team is working on making really solid versions of all of this as a building block that you can reliably use james can i get you to actually talk over authentication and authorization for a second while i try and turn off this background youtube no problem uh yeah so uh in terms of dropping into what the the code actually looks like in the web native sdk um so as boris mentioned it's a passwordless authentication system so the web crypto api in the browser we use to generate non-exportable keys in the browser and then as a developer using web native sdk we've abstracted all that so you don't have to worry about any of the key generation the management of that that's all handled by the sdk so what you do is uh something similar to the the code snippet there where you call an initialize function um and you're going to give it a little bit of information about the app that you're you've created uh and then requesting some permissions to uh portions of a user's file system right so when your app boots up right they load the page and they go to authorize they'll be uh directed to the screenshot that you see on the right uh which is our uh what we call our auth lobby at the the login page uh and the the user will be prompted uh you know your you're you've been asked to to give permission to various portions of your file system by this app yes or no uh and then once they click either yes or no they're redirected back to your app uh and you'll see the second half of the code there um you've got uh some some states basically describing you know the current state of authorization for the user awesome feedback thank you and i just managed to go and stop myself from going well more crazy [Music] lots of code snippets around this uh where basically you've got these public and private files everything's encrypted at rest um our basic view with a lot of the stuff that we take on encryption is that you kind of have to assume uh that all the pipes are broken um and so our approach is that for private data you should encrypt it and end to end and you should encrypt it at rest um and we've we've done this in such a way that we feel quite confident about the security of your data um all of this is non-custodial so fission doesn't have access to any of your encryption keys we encourage you to link between your cli and multiple browser devices so that you can get back to those keys and we're working on other non-custodial account recovery as well um solving some really interesting challenge um we're making all of this work in browser without any plugins so you're not having to add wallet connect or meta mask and that's one of the things that you can do including of course all the stuff of being able to read and write files that you can't really keep on uh any blockchain because it is too expensive to keep large amounts of data so we're the perfect complement for a lot of your blockchain apps where you continue to only have to be on the front end and don't have to add a centralized server to to any of this um i will pause for a second do we have any questions in general about this that's a great question so ngc asks for ethereum dapps any benefit of adding fission authentication over standard web 3 metamask authentication method yes i have an example at the end but but essentially just exactly as i've said there's certain things that you can do with just the back end off from uh wallet connect or metamask where we're using um web3.js or etherjs to to handle that with essentially a statically published site any data that you want to keep for the user uh is something that you would have to add a centralized server to or then add a database to link a web3 autocad um id to something else that you store and with fission uh the user keeps all of that data so they come to your app and you get permission to be able to read that stuff client-side um so the user knows that their stuff is available and literally the data can't be hacked or leaked because it isn't sitting in one spot it's sitting with the individual user and so that would that would be the reason why you would add this kind of thing uh and of course files or anything else if you if you have uh things that you want to publish obviously nfts are a big topic um so so that's something that you can add where the user themselves stores the nft in their own file system it's the same address because it's ipfs of course but instead of some centralized painting service or or sort of thing like that each user could actually store their own nft and jointly help share it so what we also have included with the set of capabilities that you can do with vision is we have a full app publishing platform so it does static file publishing uh you'll get a free subdomain and ssl for both apps and users you can add custom domains some interesting things is because of the way that we've architected it all the features of the vision platform are available to each of your apps as well so you can make an app that builds apps um so lots of interesting use cases there where you might give access to users and in fact give and publish their own app for them and all of this stuff is being published to ipfs so it means that people can help host the app data as well as their personal user data the cli basically we've made this super simple you don't need to use github if you don't want to you can download the cli um we've bundled uh an install of go ipfs so that we can control it completely uh we've designed this to for not just web3 developers but we have many web 2 classic developers using this successfully in the wild you can sign up and register directly on the on the cli so you can go on the web or you can go on the cli and get signed up which we think is a pretty great experience install it and go ahead and do a fission setup uh it'll download from ipfs an ipfs stamen and set it up for you we've got lots of emoji which is always important uh it will generate a private key for you locally so just like your github or other ssh keys that you might have um and then a dns like for the user's did so as an example uh my public file system that i'm just going to type into chat is at boris.files um and uh that's actually uh my file system you you won't be able to look into the private file system because it's all encrypted but you can go down the the pretty tree and actually see the files that i have in there as well uh and all this stuff works both natively in the browser as well as on the command line for this um and then let's go ahead and register an app vision app register um you'll have a build directory you'll get a subdomain um and you can see here big narrow fuchsia elf we're pretty proud of the random subdomains that get generated for you or you can pick a name as well and then you've got a little local file and then you'll immediately get a link to where this is so ipfs.runvision.com is our ipfs gateway but you can then access it from any public ipfs gateway or from your local ipfs notes and then vision app publish there's no step two so all of these files are added to your local ipfs node and then we ask the fission server to replicate it actually natively over ipfs a lot of other systems do uploads over https and then do ipfs publishing on their side we think that's the not the right centralized model we think that you as developers should participate directly in app publishing uh so we've done this all uh over the native protocol what this also means if uh you're doing your second publish so we all know if we've just added a bunch of stuff to to get it'll take longer to do a git push or something like that if you publish a second time because you made a typo as a lot of us do um it'll be really quick because it's literally just sending the changed files over ipfs which will be just a few minor blocks uh indifference of uh the text that you're editing or an image that you're that you're updating which is a pretty nice feature uh we also have a github action uh james uh you built it you should talk about it sure um so yeah one one of the things as boris mentioned very quickly is uh unlike a lot of sort of static publishing uh platforms we don't actually rely on git right we do all the publishing directly over ipfs um which is great for single users uh often like low tech users i mean it doesn't even have to be a web app right like you can just publish a directory full of files uh to a fission app um but to enable sort of uh larger teams write multiple users uh we have a github action which allows you to to basically do everything that boris just showed uh but automatically right so on you know anything merged to maine automatically gets published to the new app um we are working on doing um uh per pull request basically preview apps right so uh yeah you know in addition to whatever you know uh you know automated testing you may have running uh for your app you can also have it spin up uh a temporary url where you can go do some some user testing as well uh on that new feature um so yeah uh basically basically it's efficient cli for multiple users awesome thanks james uh fission drive is our first party app where users can browse their file system uh so this can also be a really great hack like how do i upload something to ipfs use vision drive and put it in your public folder so i believe we're one of the only systems that natively do read write ipfs in the browser and so we maintain the fission drive um james can you drop the link in the uh in the chat there for for clicking um uh apps write data in here so much like you might have a library or preferences folder on your desktop operating system uh you can browse into essentially the the data files that that apps right in there as well this default view is encrypted by default we want users to feel comfortable um that they're not accidentally leaking data so we've made public kind of a separate area it does work offline because it's it's running as a pwa um and and will will have access to whatever it has locally um try it it's live now it'll guide you through creating an account on the web if you don't already have one and then you can in when you set up your cli and run vision setup it'll prompt you for your existing username and actually link with your private key in the browser a little bit like how key base has worked in the past all our stuff is is open source and available so you can you can use this yourself as well i've said this word multiple times and it seems scary so we are continuing our thread of private keys in the browser uh so working with protocol labs and an initial grant from uh from them and for file coin uh we've got an extension to our web native sdk that allows for not secure non-consolidated storage of private keys in the browser without plug-ins including on mobile that's a lot but again it means really great onboarding um i'll drop a link later we've got our sample app i think it's ancient round crab where we've got our uh filecoin demo app up and running uh where we're literally issuing a uh filecoin key in the browser on the fly uh for someone who doesn't have to go through the loop of downloading a wallet or creating something separately it's all non-custodial so underneath these are sort of key fragments um and running a cosigner where where the other parts of the key are held and then put together and so it's available now for filecoin keys and ethereum keys are next on the roadmap um again right now you can use vision as is to to help with your regular metamask and wallet connect powered uh apps um to add file storage and preferences any other user specific data i really want to stress for you this works today ipfs is exciting you should go do it try not to just use netlify or digitalocean or other things like this but see if we can make this stuff decentralized as well at the app layer so go to the guide install the cli vision register fission publish literally upload an image or something like that or an index.html um and that's live there's no step two we link it into dns because lots of people navigate over web too still so it kind of works for everyone um and try out drive and link of those things and add that web native sdk we've got some sample code and other things that you can get started with um and then add those ethereum accounts to actually exercise and show all of of uh web3 um but you can start with just vision and just ipfs and you're on web3 which is pretty exciting uh crypto poops uh is something that you should check out i'll i'll tweet some interesting stuff they're doing some interesting nfts uh and they ended up actually using fission uh for storing some of their nft data uh and have a nice loop going and how they uh how they upped up update stuff so i'll drop a link into that uh i thought i'd give a shout out to them as as someone who's leaning into this you just wanted to say poops oops um so one more thing which is um really to answer that question of well you know what's a very specific use case of why you would be adding this so in a on um ethereum dap um you're logging in with your uh with your wallet credentials and you have all of these other wallet addresses that might be your own your friends and other things like that the challenge is if as a dapp you store that in a centralized database you just created some really juicy data um that is locked in and available only to that to that user and there's no way for people to to really keep it with them in that user-centric data mode so if you've got an existing dap add a fission login let users import their own wallet address and labels and notes and other like contact details um so that in your app you can read from that data and and instead of having this hash uh it can say you know james's special hidden wallet that other wallet i was testing with james uh or or other you know uh special tokens i was sending to catherine anything else like that that i can put in there and that's all private and owned by the user not only that but we're actually making portable contacts where any dap that that user logs into uh can with permission read into it so that's a mode that we're excited to start sharing uh we're gonna start with ethereum and sort of evm based chains we're following the chain agnostic improvement proposals which because have kind of a format for storing those addresses including uh test nets and other things like that um and with file coin because of the work that we're doing there in in generating file coin keys so it makes sense for us to to showcase that as well um and if there are other change that you want to add easily out of pr with your own formats it's a very basic schema users would be able to even go into their vision drive and kind of edit the json file directly which we're looking forward to showcasing uh does anyone have any other questions i am going to do a quick demo of drive uh and let's see what the demo gods say awesome um so pretty simple i can click i might store my personal avatars uh in here so i think the uh ice cream picture is the one that ended up getting used uh catherine i want to know if i was the only person who shared an ipfs link to their avatar photo drive is pretty cool it's got a bunch of uh right click to it so i can link to the file i can switch here um and that'll be uh a direct ipfs link to this um i was showing before that i actually have a forest.files.fission.name and i can go here into the avatars folder and i can see the same one here this one you'll notice is that a dns link so i could actually update it but i can also use the immutable link with the hash in it uh that just works uh and yes that can that contax repo is currently still private until we get v1 working so oops uh and of course it's the same experience when i'm drop when i'm browsing in i don't do i have any private photos in here no not yet um and i can directly put apps in here as well so in here tw groceries um i've got this index file i've got a couple of images and if i browse to that on the web for my vanity link i can go to here and this will actually load up a tidbly wiki um that's actually another cool app so you're reading and writing a little personal note taking app uh directly in here uh all of the content is stored in one big file so you can see my shopping list that i need to buy some eggs and some pizza dough a few things that i have in the pantry freezers let's do a search for rhubarb my rhubarb sugar image um and all of this stuff is stored directly on ipfs forever uh right it's a uh um it's a public link so why the heck would we go to all this work to upload it multiple times if we can just reference it from anywhere at any time there's the direct link to it that's available there uh so pretty excited about um yeah really working together with ipfs and putting things in this commons network where we can share in hosting files and there's a fun link to tw groceries and not to put to fine a point on it but when fission first launched in october 2019 we launched at a hackathon in berlin called diffusion and the people who won the entire hackathon built on fission so just saying and that's it from us thank you so much for this great presentation for us and james um it was great is there any more question before we wrap up we have like a minute left um i don't see anything coming in in any case feel free to add any questions you may have in the public um web3 channel in our discord channel uh boris will be there and be able to answer you if you have any additional questions otherwise um this was really great thanks for being with us today and thanks everyone for joining really appreciate having you 
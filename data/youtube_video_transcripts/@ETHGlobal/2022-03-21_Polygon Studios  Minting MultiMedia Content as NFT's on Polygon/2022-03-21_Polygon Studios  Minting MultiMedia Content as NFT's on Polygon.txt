awesome so it is 2 30 so we'll get this workshop started um hi everyone thank you so much for joining we have raha from polygon studios doing a workshop on um minting multimedia content as nfts on polygon questions go into the zoom chat um and raha will answer them all at the end and with that being said i'll pass the mic off the red hat hey everyone how are you doing the uh my name is for hot i'm developer i've got a polygon really excited to be giving you all this workshop today i'm just going to share my screen awesome cool so yeah like i was mentioned uh this is all about uh minting multimedia content as nfts on top of the polygon blockchain a little bit about the agenda for today i'm gonna do a little bit of an introduction to like what polygon is um an introduction to the erc721 standard for minting nfts uh we're also going to do a little bit of an overview of a smart contract that i wrote that has like a very basic erc 721 implementation um you'll also be able to like go on polygon scan and actually interact with the um like deployed contract if you want to um and then finally we're going to go over just like the importance of metadata for nfts beyond jpegs so you know what do we need to do inside of our metadata to make sure we don't have just like a sort of like picture we can do things like having videos we can do things a lot a lot of cool things um a lot of different data points that we can add to our metadata to do awesome stuff so yep first of all i'm rahat i'm a developer advocate over at polygon previously been a front-end engineer ancillary engineer i'm also an indie hacker slash web3 enthusiast around last year i think i actually participated in one of these hackathons so it's really cool to like be able to come here and show you all how to do some really cool stuff now some places you can find me are on twitter at ra hot codes um the code that i show you today will also be available on my github um if you want to go through it so at any point you can follow me on github as well to get some of that code and yeah we'll just dive right into it now um first of all what is polygon uh so polygon is uh the leading platform for ethereum scaling and infrastructure development what does that mean we have a whole bunch of different solutions to help you build on top of ethereum and scale it and make it i guess more accessible to different types of folks we have a lot of things coming out like zk roll ups optimistic roll-ups but today what we're really going to be focusing on is polygons proof of stake blockchain which is where we'll be launching our basic erc721 nft contract cool so what are some of the advantages of building on top of polygon first off if you've already been developing on ethereum if you already know solidity great you already know everything you need to know to build on top polygon you can leverage the existing ethereum ecosystem and all of its tooling and with just a couple bits of like configuration you can launch stuff on polygon and i'm going to show you that today through a little bit of small code base where i import an erc 721 contract extend it a little bit and use hard hat to deploy that onto the polygon main net the other thing is it's cost effective for me to actually deploy this nft smart contract or going back a little bit when i was first learning about how to deploy smart contracts i think the very first time i tried to deploy something to mainnet the gas costs were something around like 1k or something for a very admittedly not poorly written smart contract that probably could have gone through a bunch of optimization but um it was my first time saw that that price attached to that deployment i was like whoa no not happening um but polygon is awesome because cost effective um when i deployed the uh demo for this smart contract this morning um it cost me just a uh like a few not even a feumatic like .008 matic or something like it's very different pricing tier and it's a lot more energy efficient uses less energy than the ethereum maintenance because we're already on a proof-of-stake blockchain cool so i mentioned this a couple of times erc 721 what does that mean what do we do with that well what what is why are we talking about erc721 uh erc721 is essentially a standard for how we can write nfts we can import the the standard from uh something like open zuplin opens up one is great because they house a whole bunch of different battle tested smart contracts that you can import into your own you can extend them customize them for your own needs and basically put them all out onto the polygon blockchain so without further ado this is one of my favorite codes that i love you know sharing let's look at some code i'm just going to switch over to sharing vs code so you can see what i'm talking about okay so let's share with you this good cool so like i mentioned before developing on polygon is exactly like developing on ethereum everything all of the tooling ports over one to one what i have here is a very basic smart contract put together with hard hat so if i go into my contracts i have this nfc smart contract i called it metadata nft.sol and the reason i called it that is because this is going to be a smart contract that you can mint pretty much any um sort of like contract that you want any sort of nft that you would like and you can go ahead and basically depending on the metadata that you supply to it it will maintain nft for you so what does that mean um first thing i did up here i've got these two import statements i'm leveraging again the opens up in smart contracts that already exist specifically the erc 721 standard you'll notice that instead of just importing erc721 i actually imported one of its extensions called the erc2721 uri storage why did i do that what does that mean essentially after a certain version of solidity their use this set token uri function doesn't quite work so because i'm using solidity above 0.8 i need to make sure i'm using this uri storage extension in order for me to be able to leverage this functionality over here now how do i know that these functionalities actually exist and are available from erc721 you can take a look at the opens up blend uh documentation to and look up erc 721 and see the different types of functionality that you can inherit from the smart contract now how do i actually make sure i can leverage those functionality um on line eight you'll see i declared my contract which is called the metadata nft and i said that it is a erc721 uri storage meaning i just want to inherit all of the functionality from that specific contract into mine doing some basic stuff i'm using this counters [Music] smart contract which essentially gives token ids to all of my nfts inside the constructor i'm calling erc721 and i'm passing it to arguments first is a title for my nfts in this case i'm just calling it metadata nft sorry i'm not very good at naming things but um and then the ticker which is going to be md nft this is actually what it's going to be called like on the blockchain what you'll be able to look it up as on openc and i'm only gonna write one function here just the minting function the minting function is going to take a token uri which i'll explain what that is in a minute but essentially it's just a link to a json object so we're going to take that json object we're going to increment our token ids to make sure that you know we have unique token ids for each of our tokens we're going to call this safement function which is part of the erc721 standard and that takes in two arguments first is this message.sender that is essentially your the the um [Music] the address of the person who is trying to mint that nft so i'm trying to mint this nft it'll grab my address if you try to mint it it'll grab your address it's a really easy way of just grabbing the ethereum address of whoever is interacting with your contract next we're going to pass that new item id up here which is basically just grabbing the current token id then finally we're going to do what we're going to do is set our token uri setting the token uri is going to be taking that link that we supply to the mint function and making sure that this specific data is attached to this nft and it's just going to return a new item id nothing too fancy how did i actually deploy this onto the blockchain everything is done through this hardhat.config.js so um i have everything masked behind you know some private um environment variables um you should definitely make sure you you know do this stuff to you know protect your private keys i am using the private key from my metamask wallet um as well as using an rpc provider um you can get any providers that give you like a polygon rpc endpoint um this can be from a provider like alchemy infura i think quick node and there's a lot of different choices for different rpcs it doesn't matter where you get it as long as you have an endpoint for that um that essentially takes your code and says um essentially talks to the blockchain network and says hey this person wrote some code and we're going to deploy that onto the polygon blockchain down here i have this etherscan object it's called etherscan but this is compatible as well with polygon scan either if you've ever interacted with nfts or done anything on the ethereum blockchain you might have gone through and used etherscan the polygon version of that is called polygon scan so i'm using a polygon scan api key which allows me to actually verify that contract and that is essentially what i ran uh this used to run this morning in order to go ahead and deploy this onto the blockchain so if you go into the readme you'll see like the different um scripts that you can run as well as a link to the polygon scan address where this is deployed so let's go over to that and take a look at the contract itself deployed on the block drain cool so this is polygon scan um again similar to ether scan the tooling just kind of like goes one-to-one uh very easy to switch between you know ethereum and polygon you'll see that i've done a few test transactions i can go into my contract and take a look at the deployed code here um the cool thing that i want to focus on is just being able to call the different functions that are available to us from this contract now even though i only wrote like you know one function and a couple lines of code you'll see that i get a whole bunch of different functions that i can actually call and that's because i went ahead and used the erc721 standard and i'm getting a bunch of like baked in code that i don't need to worry about writing on my own but we're going to focus on this mint functionality which is let me just do a quick search for it oh that's in right i was looking at the read contract um but that is in the right contract column and that is mint so what is meant to take it takes a token uri which is a string let's talk about that token uri real quick and the importance of the metadata which is going to be what really powers our nft so what we're going to do now i'm going to go back into vs code and i'm going to show you a couple of different json files that i have right in here so you'll see here this json file nothing too big going on [Music] i have just some information an image an animation url and some attributes and these are just some basic things that openc needs in order to read your contract you can take a look at the openc documentation for like the standards of how you should um essentially fill out this uh this overall like json object but as long as you're filling out what openc needs you can then add whatever else you want on top of that so this is completely customizable up to a certain point so let's take a look at a couple of the nfts that i've already gone ahead and minted through this so this is specifically um just a picture of myself um inside of the metadata what i did was i added a my portfolio and my twitter handle and these are like the traits that you would normally see on like an nft so this is like a fun little almost like a link tree social network typing nft that you can build if you wanted to and if i go into the details i can click on the token id and get transported over to this json which is the thing that i actually uploaded to the internet that i initially wrote in here how did i get that up here one very quick and easy way to upload any of your data onto the internet is using something like web3.storage literally you can go in here create an account which is free click upload files upload your json upload your images whatever you want i have so my images are all kind of like on this little file here it gives you what's called a cid and to actually view the file you would just add an ip ipfs.dweb.link at the end of it and then i have an image of my myself that exists on uh the web3 storage platform as well as the initial link over here so same thing same kind of thing here i uploaded this to ipfs through that web3 storage um uploading system and this just resolves to that initial js json object that i had so this is a very basic i guess nft kind of like what you might be familiar with of you know having an image having some traits um kind of similar to like any other you know nfc profile picture but y'all are building on a cool platform where you want to get things like you know kind of social you want to maybe have different types of nfts you want to you know if you're building like a social platform that you know is all about videos sharing content what if i want to make a video nft right you can do the same thing with this very same con a smart contract everything is dictated kind of by this json file so notice here i have this animation url and if i look at this other nft that i minted rather than just an image this is now a video right this is actually like a job announcement that i did where i made a wrap about how i joined polygon but how you know how does this work now i i changed like some of the properties where i have like a producer with a certain name the wrapper is myself and again this is done through this json object right this is the json object that was written inside of my code i have the image still of like just that image of me just that like you know a placeholder image but the really powerful part of this that lets you do pretty much almost anything you would want is this animation url that animation url links to an mp4 so it's the same type of link that comes from the web3.storage and rather than only linking to like a png or a jpeg i'm now also linking to an mp4 right and the cool thing about this this supports a lot of different types of um a lot of different types of files it doesn't need to just be an mp4 it can be a gif it can be or a gif depending on how you pronounce it um it can be a a music file an mp3 if you're doing some type of like music sharing platform um you can even like link this to an html file and render some html inside your nft like openc has like some uh things already kind of set up where like it takes an html file and renders inside of an iframe but there's a lot of different things that you can create into nfts like if you're building some type of social media platform maybe you know you want to you can do like image sharing with your regular nfts maybe it's a video sharing platform share videos through nfts maybe you want to do even do something like you know take blog posts or whatever turn them into svgs and then instead of like an image file here you can do like an encoded svg um svg link or something like that and depending on like what you want to do with like your nfts all you really have to do is just change around the metadata in here right and like i said this is just like some standards that openc has and again if i go to openc which i had up here these these are all things that i minted specifically from this contract and the cool thing here is like as long as these keys exist inside of this metadata opencv will work just fine but you can add additional things on top of that maybe you want more information for your specific platform maybe you know besides just an image link and a description there's like links you know to other work there's um you know whatever your social media platform might need any specific information you would want to have in your json you can have it and then you just read that you know specific metadata that's attached to the nft and do what you want with it right the possibilities here are kind of endless the amount of power you get from your nft is really dictated by this metadata and buy like whatever information you decide to put in here so that's really you know kind of like what i want to leave you all with it looks like you know on on the smart contract side all i did was write one function but with that one function i'm able to um you know mint a video nft i'm able to mint a regular image nft i can switch this out for svgs you know and i can even switch this out for like an html page and mint an html page if i wanted to like there are so many different um things that you can you know do with nfts beyond just like that you know nft profile picture type collection and i hope you you know you can kind of like take this maybe implement it into different things that you're building you know uh throughout this hackathon so definitely want to open it up now to questions and i saw a few of those coming in chat um if i go back to the beginning okay so the first question will we be able to marry the lens protocol on polygon smart contracts so one of the cool things is lens protocol is actually built on a polygon so yes you can you know do cool things like um if you're build like some of the things that i mentioned um throughout just like um the the little uh demo that i did was like you can take anything and mint it as an nft right so like if you're building some you know social platform for sharing images or sharing videos or sharing really anything you can turn those into nfts maybe for like a fundraising type platform or maybe just for sharing content in different ways and giving ownership to people and the content that they share so that's just like one way of like thinking about how you might use that in your specific projects um someone asked what font do i use for vs code it's a font called dank mono d-a-n-k mono um i i got that like quite a while back so i'm not sure um what the current status of that is uh so i'm gonna ask if we can use remix um so you can definitely use remix i was just kind of showcasing what's one of the tools that you can use with like um just like using the general ethereum ecosystem of so what i focused on was hard hat but you can use hard hat you can use remix you can use truffle any of those and anything that like works on the ethereum side also works on the polygon side 101 it just takes a little bit of configuration updates and that's pretty much it um cool let's see it's gonna go through just some banter about looks like webstorm you know all these are cool stuff you can use really definitely use the id the ide that you know fits for you and what you know works out for you um anyone know the open seat document that talks about the template that i mentioned so um let's see if i can grab real quick open c uh nft metadata yeah i'm gonna drop that this in the chat as well oh somebody else already put it thank you um cool another question how does lazy mint work can you edit the metadata after you have minted using your own contract uh you can do that you can edit the metadata you would need to add like a little bit more functionality what i did on this is really just like a very very basic implementation this is definitely not um the contract that i've written as is is probably not you know production ready uh it's really just to get you kind of like going and give you a base to get started um but yeah you can add more functionality for doing things like you know updating the metadata uh i think there's like a lot of examples of like uh different nfts where you can like change like the base uri uh change like whatever um where yeah wherever that uri is pointing to uh what exactly is the purpose of the ether scan key so the ether scan key was really just for me to verify the contract on polygon scan that you know allowed me to show you the code through polygon scan so i'm also going to drop that link in here so this will actually allow you to because i verified the contract you can actually go in and interact with it mint your own nft do whatever you want with it it's free i don't make any money off of it you just have to pay gas which is like a fraction of a medic so it doesn't cost all that all too much any gotchas to call out building on polygon versus ethereum it'll be my first polyglon specific build um the only real gotcha is just like make sure you look at your configuration uh make sure you're configured to deploy on uh polygon uh main net or test that versus like ethereum mainnet and testnet um so that what i showed is um in the configuration that i have um essentially i have everything set up for you so i'll also drop that github link as well just so you have those grab that but um otherwise it's everything is one-to-one any any solidity code that you write for like an ethereum smart contract is compatible on uh polygon there everything really is just um you know about [Music] configuration and making sure you're sending it to the right place yep verification of contracts is important to show you how to release different code and so can be audited absolutely you definitely want to make sure you know if you're building something that you want to have audited um to have you know that verification up and if you're building something open source to allow people to go in and like make sure you know you're not going to be rugging them or anything it's a good way to like add legitimacy to your project uh how is it possible to mint an nft to a user while not charging them anything for gas like os does with lazy mint gotcha okay so that was the question before um so that's um you can definitely add in functionality within the mint the mint function to essentially you know mint the nft for the person so you would do something like rather than sending in like the message.sender you would send link like the um the owner of the contracts address and make just have to make sure you have you know funds to cover the mint you would essentially mint the nft for them and then use one of the erc721 standard functions to as soon as you meant to send it to the message.sender rather than having them minted themselves so it's really just like you know you minting for them and covering the gas cost and then sending that over um the good thing with polygon is like it's very very cheap to mint i believe i minted the two nfts that i showed you all for like a fraction of a penny so a lot of the times it's almost like you know something you don't have to worry about too much but you know definitely if you want to go that extra mile for your users you can essentially mint for them and transfer right after you met um yeah i think that covers all of the questions um that i saw um if i missed your question you can definitely drop that in there again we've got like one minute left but yeah i'm really excited to see what everyone is building well i guess that's all the questions that everyone has for now um thank you so much that was a really really interesting workshop um can't wait to see what everyone builds um using polygon and um that being said raha can also be um accessed through the youth global discord in the sponsor polygon studios channel so if you have any questions for him definitely feel free to like reach out there um and we do have another workshop after this so i hope to see all of you there and once again raha thank you so much for taking the time to do this workshop for the hackers definitely happy to do it all right have a great day 
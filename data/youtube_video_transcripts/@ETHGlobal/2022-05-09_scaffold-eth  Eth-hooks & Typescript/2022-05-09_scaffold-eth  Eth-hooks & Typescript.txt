hello everyone just give us a couple seconds to set up the live stream all right let's get started hey everyone uh thanks for joining us for our last workshop of the day for hack money um we have shravan joining us who's going to be hosting a workshop on scaffold east youth hooks and typescript questions will go into the zoom chat um travin will look at them at the end of his workshop but also give you the opportunity to come off me if you want to ask your question live as well and with that being said i'll pass the mic off to schravin thank you so much all right really excited to be here guys and share more about scaffolding typescript and its companion library it hooks so i hope it's going to be a good great learning experience and you'll really get to figure out how to prototype quickly with the template and really try out new things in web 3. and additionally i hope you learned how ethox works and how it really helps you with the react apps a couple of housekeeping things like as assumptions i'm going to assume that you guys know how urine and pml node work and you also know what react and react contexts are and you've seen ethers before and you know what hard habits okay so we're going to get started with that so what is scaffolding typescript it's basically a template that makes it super easy to build web3 apps there is the links will be posted later but there is a scaffold lead typescript repo you can just clone that but use this template and i'll give you this batteries included kind of a template that makes it super easy to build that three apps and so kind of why do we need this it's really a challenge to get new projects going especially web 3 because there's so many things and things are changing so quickly and you kind of want to have a good place to start with all the libraries included and has the tools to get you started i think there's a need for like a solution with the great dx and it's kind of challenging to have that iterative loop from solidity code to your front-end and that's what scaffold leap will give you and of course i'm a really big fan of typescript and i think it really makes it a lot easier to not make mistakes you catch it in build time you know customers don't see it or your project presentation doesn't see it so i think it's a huge difference so as i mentioned before like why scaffolding rapid prototyping i can't keep uh mentioning this it's going to make your life a lot easier to just check out just validity code and really we spend a lot of time building that good developer experience uh it makes a big difference to be able to see your solidity changes right away and see how they work and lastly the most important thing is that it's effortless front-end with ethos library so we have a context for the theorem provider so you can get access to it anywhere in the app there is a context for contracts so you can use that contracts that you build anywhere in your app you don't have to pass things around it just makes things easier and then there are typescript definitions for everything including the contracts which are automatically generated by the build script so that makes it a lot less error prone when you're developing things and so the three things i hope you get away from this is um what like how how scaffolding and hooks work and how to quickly prototype these things and additionally i wanted to showcase uh how web3 front-end you how you can develop web3 front-ends in a very type-safe way okay so we're going to get started with just the code i'm going to quickly go over the commands that we have we have a bunch of commands that make life a lot easier the first one is yarn contract bills it builds your contracts creates that api and generates the types for us that we can use in the front end and our command loop like easily loops that into the front end the next is yarn deploy which is same as hard at deploy and it deploys to your target environment and we control device and environment variable and then yarn chain which is basically starting the hard edge of ethereum node so we're going to start with that i'm going to go in i have scaffold lead pulled and there the main library folders that you care about is the wide app ts which is the application and then the hard hat ts which is your hard hat contracts and hard at um application so i have on my right side a bunch of terminals um the first thing i'm going to do is do yarn chain which starts that hard at node so we can develop locally and then i'm going to start you know do yarn start to get that react app started uh so it's going to be and you notice that it's really fast it's running on light so it's like about 100 times faster than that pack so it's one of the big advantages for rapid prototyping uh so now we have that running uh it's it's actually running here i'm gonna reload this uh and then i'm gonna make sure that i build all my contracts so i'm gonna go yarn contracts build so this is going to go through and build my contracts right now i only have one contract in my contract folder right here it's called your contract the other one there's another contract but it's not set up to build right now and i have no external contracts i want to talk to and it uses hardware deploy in the background so basically just telling it to deploy that contract and that's the code for it uh so now it's deployed i'm gonna go and you notice that i'm gonna reload this sorry now it's built now i have to deploy it so i'm gonna do yarn deploy to actually deploy it to my local hardhat node uh that's why i wasn't showing up there so i built the contracts now i'm going to deploy it once it deploys you see the contract it makes it super easy and some of the features for example is like if you just set a purpose and it fails for whatever reason which is one of the functions in the contract you see why i don't have enough funds to send this so that's why it's failing there's a little helpful function here you grab the funds from the faucet and now we can do it so i'm going to click on that because this is a local running on local hard drive i can actually create a burner wallet and give myself money it automatically does that in the template uh just to show you guys there's a web 3 model and you can connect to any app using metamask wallet connect whatever right now we're using the burner wall i'll show you some the metamask in a bit uh so i'll connect it to my burner wallet now i have this i can actually set a new purpose so i'm going to do that so i can really interact with the contract right away and it's super easy to test it out especially when you just want to prototype things so that's one part of it and now we're going to show how that rapid prototyping works some new commands that i want to go through is are some web 3 helpers like yarn generate that creates a local web3 wallet for you so that you can deploy things to other networks but we don't need that for the local hard at and yarn accounts that will show you all the statuses your accounts on different networks but i'm going to go into that a little bit more later right now what i'm going to do is augment my contract to show you that quick dev loop that where i was talking about so i'm not happy with this purpose right now here you see this contract is basically a purpose and set purpose function and a set purpose event and that's not enough for me so what i'm gonna do is i'm gonna get that get another purpose a higher purpose like i feel like i need to do something better with my life so i have a higher purpose here and that's a new data field and i'm going to set up a function i'm just copy pasting this from a local file that's why it's appearing suddenly if you guys were wondering so this is a function for higher purpose and basically all this is is that because there's a higher purpose you need to provide some need to have a higher purpose it's just the way things are so i have this higher purpose you have to put an extra ethan there and it's just a public contract now but i'm going to make it a payable contract so you can actually give extra fee to it and that's my contract right now so i'm going to do that same loop again where i'm going to build my contracts so it'll go through compile all my contracts and build them automatically updates the front end with the latest types and whatever is required for this contract then because it's a hardhat node i can easily deploy so i'm just going to do yarn deploy after it's done you notice the address is in tx on the side that's part of hard hat um and then that's done so now it's immediately updated like uh it just shows up so we have the higher purpose the purpose set higher purpose set purpose um if i make a mistake for example i want to set my higher purpose so higher purpose number two and i send uh it gives you the full error message some error messages are parsed better but basically this one says you're not giving it enough eat to send it so what i'm going to do is because the required statement right here says oh you need you need to send pete with this purpose i'm going to do that i'm going to send 0.0018 this you're you're supposed to send it in clay so there's a little helper thing back here you click on it it converts it to great super easy to do and we wanted to make your life as easy as possible and then you send that the transaction was successful and you have a higher purpose now in a higher purpose number two it's running on a local node that's right so fast if you're running against test net it's going to be a lot slower just keep that in mind [Music] so that's basically like a quick thing uh another thing i wanted to mention is that you notice like there's a console log hard hat allows you to have a console log it actually would dump that in the yarn chain um out here so you'll have the console logs show up and you can set whatever you want and it's super useful to debug contracts so just keep that in mind as uh tip it uh so now we're gonna do something different i wanna deploy this to mumbai so we're going to go in and check out those two commands that i mentioned right here yarn generator in your account so i want to create an account as a deployer that i want to deploy to mumbai so i'm going to create a new wallet so i'm going to do yarn generate if i can spell that properly great and then it's going to go in and create a new account and this is my account and you're going to need a polygon i forgot what it's called automatic for that or tmatic whatever so i'm going to send that to this account for my meta mask so 0.01 and oh i've got to send it here we go so it's going to be sending that while it's doing that i'm going to go to yarn account and it's going to give me a list of all the accounts and how much eat they have what the status are and also like this handy qr code if you need to access it in another device but basically i'm looking for mumbai and the balance is 0.01 and my the money i send for metamask has shown up in my new account that i've created through hardhat so what i want to do is deploy this into mumbai and it's super easy with scaffolding all i have to do is go to environment variables uh which is in the webapp folder dot environment there's a lot more things here that you wouldn't normally put in and check into github but because this is a template that helps people learn we wanted to have everything included in there but when you're going in and developing your own app make sure to replace all of this with your own api keys and stuff you don't want to bankrupt austin so please do that um so we're going to go in and i'm going to change this to mumbai so it automatically updated the front end and it's going to load and with the and it reopened that web 3 wallet because the previous login wasn't valid anymore there's no local host or burner wallets in mumbai um so what we're going to do is uh deploy this again to so that it can update properly and we get those contacts showing up and while it's doing that i'm going to connect with my meta mask which is so this that that login that you saw there is part of each hooks and it's uh it uses web3 modal in the backend it automatically sets it up so that you can access this user's login anywhere in your application interact up it makes it super easy and i'm going to go through that ether's contact context later so let me refresh that i'm logged in there is a higher purpose i'm going to i can send matic and change my purpose so i'm gonna make purpose number two and then send that it's gonna pop up my metamask and [Music] make me pay some mumbai matic or whatever it's called i don't know um and then it'll it'll take longer because it's a test net so we're gonna while that's happening uh just wanted to showcase that how easy it is just to change that all of this is done through the environment variable if you notice the hard hat um oops i don't need to do that so the hard hat config automatically uses the environment variable to target the right network all the tasks that you are normally having hard at is not in the same file it's under this folder by tasks and it automatically loads it there's a bunch of helper ones that we provide as well with scaffolding um so i think it's done now and then there's purpose number two so that's good so that's a basic overview of that type iterator loop that i wanted to show you guys so now we're going to go into how the front end really works so we're going to talk about the react app now the react app is running white i already showed you how i started it i used yarn start and it uses white it's really fast it takes two to six seconds uh the other version of scaffolding uses webpack and it takes like 30 seconds to almost two minutes it's really a huge difference in boost of speed and now what i'm going to focus on is it hooks which is library that scaffold uses both scaffolding scaffolding typescript and there are two main things that really help you build those apps ether's app provider which is this react context that lets you access your ethereum network anywhere in your app and all the hooks use this under the hood and contracts app context which lets you access the contract um [Music] your contracts that you you want to use in your app anywhere in your app and um just to go over this and i'll show you more code about this the contract app context has three main files in scaffold elite it's the app contracts config which lets you set up the contract connector so you can actually connect to your contract and i'll show you how that works external contracts which say example you want to um i don't know load up uscc contract or whatever it'll help you do that without actually pulling the apis yourself or automatically get the apis for verified contracts and load them into the app you don't have to do any work and i'll show you how that works as well and web3 model is basically configuring this modal uh and you can set up right now i only have meta mask and wall connect maybe you have some other things you want to add you can easily do that with that and so it's very little config and the configurations are all in one place so right now i'm going to focus on how the contracts are loaded so there's three types of contracts as far as scaffold ethos is concerned hard hat local contracts that you're actively developing external verified contracts that die or eat unverified contracts like um stuff from abr like you load from api uh it gives you like a lot of flexibility for example i was working on a hackathon for a lens protocol and i just had to load the apis from my like their local apis to integrate with that contract and that was super easy to do so going into that a little bit more the contract context is basically the contexts are already part of scaffolding but if you have your own app and you're using oh my god it's slow if you have your own app and you're using it all you have to do this is my app there's a bunch of other things that you don't have to worry about but the main app is here there's some error handling stuff here and there's a contract app context and ethers have context and you just have to wrap your app in that and that's that's all you need to do it is already done in scaffold lead but that's all you need to do if you want to add this to your own application either it hooks to your own application so this contract app context is going to set this up so what it does is like the first thing it does is configures your app contract contract so when you run yarn build contracts build it runs hard at deploy it creates the type through type chain and then the types are generated for the contract and automatically pushes them into the front end and the using the app contracts config so this is how you configure the contract so i'm going to show you that now um contracts and things so right now this is contracts.config there's a lot of comments in there to make your life easier to help you understand how this works in addition just to show you guys there is ethos has a huge documentation page we're improving it as a go and there's guides and different things that you can use to really get into that um so i'll paste that paste those links in a bit so right now i have one contract so your contract you've seen to me deployed before there's a function that creates that contract connector based on the name of the contract and the factory that's generated by capture automatically when you run yarn contracts build it automatically generates this factory and puts it in your front end code under the generated folder and that's how your contract is used so i want to add two more contracts i'm going to use add your nft and which is another local card ad contract so to show you guys i'm going to go to the deploy folder in my hard hat go to contracts re-enable this it's just a simple contract that um loads it's just a erc272 721 contract so um that's that's ready and i'm gonna have to run yarn contracts building on deploy again to set that up another thing i wanted to show you is how to load those external contracts so i'm gonna enable this as well so this is gonna be enabled and right now it's not loading properly so i will set this up all the external contracts are loaded into this folder but it hasn't done that yet i'm gonna have to build that again um and there's this other example is how to load things from avi just a better as an example i'm not going to go into that right now so now i have all of this enabled one more thing that i need to do is i need to go to my external contracts and enable this so basically uh there is uh an external contract config file where i'm saying hey i want to load dye and main net the die contract is located in um this address this uses the sdk library under the hood the automatic configures everything it's amazing library it's the same guys with the type chain so give them a lot of kudos for this um so this is going to load the die contract you don't have to worry about loading apis it automatically does that to you this is really valuable for anyone who wants to interact with any contract out there makes life a lot easier so that's it i'm pretty much going to run yarn [Music] what was it contracts build again and it's gonna oh it doesn't need to compile anything but it's loaded the die contract right here uh and then all that stuff so basically it's loading this uh app contracts and the second part is that there as part of ethos there is a contracts context factory that you need to call in your app it's already done in scaffolding but if you want to deploy it use detox and another in your own project for example and it generates based on your contract config a bunch of contracts a bunch of hooks the the context the hooks uh basically one hook the load the contracts one hook to connect the contracts and one to actually use the contracts i'm going to show you that now um the actual code on where i'm using the contract is here it's a bit like advanced typescript stuff so little typescript magic going on but basically what it's doing is you just have to call the contracts context and then call it with that function that i just showed you which is this thing right here app contracts config from that other file that i was just showing which is this function right here um go away soon so um and the rest you don't have to worry about i won't go into the details of how it works but it's it's basically generating the context and a bunch of hooks for you that you can use in your app it's basically like a factory helper factory and you're telling it what the types are and that's where the typescript magic happens um so with that typescript magic what you get i am going to [Music] put it so i have this maintenance die contract right i just disabled this so i want it to oh before i go into that i have to use those hooks to load the contract so i'm doing that here use load contracts which is this one right here and i'm also telling it hey i've loaded the contracts can you connect my contracts to the mainnet can you connect my contracts to the network my user is kind of logged in right now i'm logged into mumbai i think uh so it does that for you and what what's happening here is that i'm going to get an instance of the contract so user app contracts is what what what does that so right now i'm saying i want the die contract that i mentioned in the contracts config which is right here see it says load the die contract uh so yeah oh my god go away so you have access to the diet contract now this is entirely tight main net die and you have access to the entirety of that contract so you you get to see everything about that contract so that has some special functions it's not a normal yes uh erc20 token like there's some other stuff like i think burn and a few other functions that are specific to die and you get to see those things so you can't make those mistakes this thing is strongly typed so if you put some random generation here or call the wrong contract it's not going to allow you to do that so that's one of the good things about this typescript stuff and to give you a further example there is a file called use scaffold hooks examples just to show you more and in here i have a place where i'm loading that using that contract so i'm going to uncomment this so basically what is going what's going on here is i'm loading that die contract on the main net chain i have access to that contract and then i'm i'm basically getting my mainnet die balance uh for my for the address that i've logged into with that so you notice that i'm using the use balance hook as one of the hooks and i'm passing in my current account from the eater's app context i'll go into that a little bit more in detail a little bit later uh but it's basically my current address of the person who's logged in and i'm basically saying hey don't use the context provider use this mainnet provider because i'm logged into mumbai but i want to see my mainnet die uh balance and that's what's happening here um there is some console logs that shows my mainnet die balance i'm going to disable this one okay so if i go back to my app you'll see in the console log i'm going to log in first the same thing was annoying so i'm going to log in first i use my metamask i logged in so if you notice in the console i have my uh main net my local balance and my current chain and i think my main balance is here too it's talking about the contract and and then it's probably oh didn't show up oh yeah because i did not enable so the other thing i was going to do okay so let's see oh yeah uh that's a good quick overview so one thing that i wanted to do is enable the other pages that shows the die contract so i've had to comment it out so basically there's a helper function in here and all i have to do is uncomment these two so it's loading my your nfd contract and my die contact contract um it's just a there's a function called you just have to provide a list of pages and it'll automatically render those pages for you so you notice now you have your nfd contract that you can interact with and the main guy contract that i can interact with um and get the balance off and use it for whatever purpose that i need it to uh then oh and then you have your diet contract show up here as well a die balance show up here in the console so that's a quick overview of how the contract context works um and then the last piece is the ethers app context so ethers app context is a way for you to interact with your hooks and sorry interact with the iteration provider anywhere in your app it uses the context that i showed you earlier and so for example you can also have alternate contracts like i showed you with the die contract use scaffolding um sorry so for example here i want to get the back contract from mainnet so i'm passing in exclusively main and adapter or normally it'll just use the provider for the currently logged in user so if they're logged into mobile i'll just show you that so you it it allows you to access the context anywhere you want so for example i have this nested page example that i'm going to show you guys so i'm going to enable that as well it's just an extra page that's going to show up and then that page that page is listed somewhere nested somewhere in my react tree so uh you don't have to pass down your provider through alter your react 3 right so that's that's the ease of using the contract so i have the ethers app contact context here all you have to do is do this to use it and then i can use my use balance hook and get that balance for that particular user or i can use the use balance hook to get it for my currently logged in user so i'm going to get the account of the currently logged in user um let's see my then i'll just use that so i'm going to enable these i'm basically going to show this balance on the screen and that's what it does and then i'm going to show my my balance here so this is showing me some typescript errors oh i have to import the hook okay so i've imported the hook it's going to load and this is the nested three you notice that it's a bunch of nested components but it's still super easy to access the context right here and uh one of the advantages of using the heat hooks is that you actually get the status of the hook so you notice that it's switching from loading to success it actually allows you to provide a better ui by knowing the status of a called to the ethereum network so you can show loading screens and show errors in a much more sophisticated way uh it's a lot easier than just calling uh the provider and getting the data for that contract or for something else and that's basically a quick overview of how the provider works that i wanted to show you i've already talked about how you can pass in alternet providers into it so for example you want you're logged into mumbai but you want to use the ems provider you can easily do that by passing it in one of the other things i want to show is a lot of problems that we have is that updating ethereum data so if you set your apps to update every block and then the user logs into polygon they're going to be updating every second it's going to spam your alchemy provider network for example so one of the things that hooks has built in is rate limiting and basically you set it normally updates on every block so for example this local balance is updating every block but i'm going to tell it hey update every 10 blocks and that's definitely possible with this use balance i can also tell it hey update every 10 milliseconds or 100 milliseconds or something like that that's that's also thing it uses react query under the hood and it allows you to do this uh super easily all i'm doing here here is use block number interval and passing a 10 or use refresh interval which is a pulling mechanism and i'm telling it update every 100 000 seconds i think the other one there's some fancier things in react um reactory like for example this one is telling it to update whenever the user brings that window into focus so they do something else and they come back to the browser and click on it and then i'll try to update everything immediately uh so that's a huge advantage you're not going to be spamming your pro ethereum providers or um alchemy provider or anything like that so that's a big advantage to it um and it also stops things from constantly refreshing if you have a bad hook or you didn't do the dependencies of your properly the other thing is that it also provides a manual update so you can actually have a function call an update and that's possible too that's this um that's this updater i can call that insane and a side effect if i wanted to uh and the last part i wanted to cover is the caching so everything that uses it hooks uh all the hooks cache their contacts so you're not uh overloading your providers yeah like you have a huge spike in volume you can have this will automatically cache everything based on your parameters and it'll you can call the same hook in multiple places in your app say i'm calling it in my i'm calling use balance in my main page and i'm calling it here as well and i'm calling it somewhere else for the same account or the same address it's going to collate all that and only make that one call automatically and you get this for free using it hooks so that way you don't have to like pass on variables you don't have to worry about repeated calls you can also make sure that like when the user logs out it automatically validates all the cache when you use logged in it validates the cache so it's very powerful and it saves you a lot of time and effort to do this just by both checking out how much time i have um so that's basically how uh what what's capable in uh it hooks there is a lot of hooks out there if you go to the docks you'll see there's used balance use block number uh use contract loader reader you can get the current noms whatever you need i'm going to quickly show you how use contract loader works so that's probably like sorry use contract reader works that's probably an important one so right now i'm getting the purpose and using that purpose somewhere so i i'm going to so what i'm doing is i have the contract here and i'm going to call use contract loader sorry use contract reader sorry i said the wrong name i'm going to pass in my contract that i wanted to use and i'm going to say hey i want you to call purpose in my use contract and all right say uh yeah i want to i want you to call purpose and uh that's it and you get access to that purpose anywhere in your app it's that easy to use use contract reader if you want to do this do it for something more complicated say in the main i have main uh and then i have the main net that i want to interact with uh i can use use contract reader and pass in mainnet die and say may not die i want to you know get call call something that has uh that has parameters it actually types the parameters so when you pass it in oops sorry my computer is put slow because i'm streaming so if you pass in the wrong parameter say i try to pass in a string into this that's going to throw an error so this really helps you type make things more type state type save so that you don't make mistakes calling contracts or even writing to contracts this is a huge difference it's the same with you use contract writer as well so that's basically a quick overview on um [Music] scaffolding typescript and react ethox and how to use that in your act app and there is documentation that i will paste in the channel uh it'll definitely be uploaded into youtube [Music] and then i'll answer questions so that's pretty much it please go on to the links i've provided and you can also go through the docs to find out more and you can go to scaffold repo and there's also a couple of things i wanted to show you there's this wonderful site called speedrun ethereum that has also a typescript section because basically austin and team have worked really hard on getting this work this is an easy way to get on board into ethereum to learn how it works that you go through a bunch of challenges and there's a typescript version of every a lot of the challenges as well and it teaches you how to create nfd and different things in the web3 world um phew yeah i rushed through that there's a lot to cover so um i'm going to go on and paste this into the channel if you guys have any questions i'm more than open to answering them now and let me know if there's anything in particular you guys want me to cover oh yes so yes it is possible to use tailwind it's already part of the app uh in scaffolding typescript if you notice in nested page i am using tilden here here it's already part of the template so you don't have to worry about it you can just use it it just works [Music] the components that we're using are part of this library called eat components and that uses ant we're in the works to update that component library into using tailwind and make it headless as well that's a work in progress we'll keep you guys updated about that okay uh doesn't look like there's any major questions i can check on the discord it doesn't look like there are any questions on discord right now either um but i'm sure more questions will come in and for the rest of you if you do have any more questions definitely feel free to ping travin on discord um as well um yeah i guess with that being said we can just end things here then thank you so much yeah thank you sharmin for taking the time to do this workshop for the hack money hackers um super informative and um i think that scaffold eath is always like something super interesting to learn um so yeah thank you so much and for the rest of you thank you for tuning in to shravan's workshop um and that is our last workshop of the day there's going to be more tomorrow and for the rest of the week so definitely tune into those as well otherwise um this workshop is recorded and on youtube so if you want to reference it after at any point after feel free to go on youtube and you can find it there i know we had a question in the chat about that so yeah with that being said i hope everyone has a great rest of your week and thank you for joining 
what is enzyme finance it is a decentralized asset management infrastructure built on ethereum which is a great series of words but what does it actually mean so in practice what it means is that a asset manager can spin up an enzyme vault that's capable of accepting investments and issuing shares and using the funds from those investments to allocate across various decentralized financed primitives and protocols uh it's essentially an aggregator of these protocols so that's also cool but what i think would maybe be best is showing uh how to create a vault and then a quick overview of what is possible within that fault um so this is the web app this interacts with the enzyme smart contracts to create a vault it's pretty simple it's five steps uh we'll name this youth online uh first you select your denomination asset this is important because it measures the performance of the vault is measured in this asset or against this asset it's also the asset in which you will accept investments next you can set up fees so as a manager in order to get paid you need to configure management performance and entrance fees there's a lot that goes into thinking about how you want to do this so i will post a link to the documentation um before because this these are also permanent once you set these fees they're encoded in our fee manager contract and you cannot change them next there are some deposit settings so these are changeable after you spin up a vault you can limit who can deposit so this is essentially creating a permissioned list this works if you have like a kyc program or you're working with a regulated entity that wants to control which addresses can invest in your vault you can also limit the deposit amount if for some reason you wanted to cap it at 10 grand or put a 4 10 grand [Music] pen grand being an arbitrary number you can control that as well so these are configurable after you deploy the vault next there's a redemption setting in principle uh your investors as vault manager your investors will be able to redeem their shares uh for their portion of the vault 24 7. there is one little nuance in that we integrate with synthetics and synthetics has a settlement process which isn't instantaneous so there could be an instance where you buy or sell a synthetic asset the trade hasn't settled someone tries to redeem their shares and the calculation of the share price is incorrect because uh you don't actually have those synthetic assets yet so what this does provides a window uh which essentially locks you out of trading synthetics during this time period uh there are some advanced settings um including a time lock so this would mean that you require investors to hold shares for at least this long this prevents various types of arbitrage we use chain link as our price oracles and sometimes you know they they update at different cadences depending on the oracle um so there can be some arbitrageable opportunities this hopefully prevents that we also have some more risk management policies which i won't really go into you can limit the adapters that you interact with again all of this stuff is in the user docs which we'll post so once you've done all that um you have a review here you agree to the gpo three terms and conditions and you create a ball i'm not going to do it this is actually gas must be pretty cheap no nft drops happening at the moment right now because this is a pretty good deal what you're doing when you submit this transaction is creating custom smart contracts which i will describe right now well in a second actually because first i'm going to show you what you can do as a vault manager so this is a vault uh that i created a while ago nobody's invested in it i haven't invested in it it just serves the purpose of showing how you can do things uh so first option uh you can trade and swap as you can see uh this aggregates a bunch of different centralized changes including paraswap which is itself an aggregator so you have essentially access to every dex out there you can provide liquidity on curve and unit swap presuming you hold those tokens in your vault once you've provided liquidity on curve you can stake it in the staking tab those lp tokens and you can earn yields uh on various protocols compound ave urine idle alpha more etc so this is essentially the universe of possibilities for you to that you can allocate to with the funds that you garner through people investing in your vault cool so that's a very high level i want to just talk briefly about how it works under the hood uh and then i'll pass it off to gabriel who's going to talk a little more in depth about the contracts themselves so an enzyme vault is at its core two main contracts um deployed to ethereum so the first is the vault contract this is where all the assets are held uh this is also where share price is determined and share issuance logic is held so when people invest and redeem all those calculations happen here excuse me uh the next is a comptroller so this is permission to set uh spend the funds in the vault and it's configured to talk to the outside world so it does through does so through a layer called the extensions um this is another layer of smart contracts that controls how the or allows the comptroller to interact with for example a performance fee contract for the fee manager policy manager will talk to compliance policies and risk management and then i think most interesting from a hackathon perspective is the integration manager so this is essentially where the comptroller and the vault are connected to decentralized finance the sort of flow here is that the comptroller will call a function on the integration manager and tell it which adapter to talk to so if i wanted to buy tokens on uniswap for example the comptroller would call the integration manager and it would say call on adapter and it would pass it through the unit swap adapter as well as the parameters of the trade union swap adapter would then go out and talk to the actual smart the unit swap smart contracts execute the trade and it would all flow back into the ball oops flow back into the vault we're currently integrated with a bunch of different d5 protocols unit swap compound curve uh idle ave etc synthetics um but they're obviously a ton that we haven't integrated with and i think there's a really interesting green field of opportunity here to talk to things like staking contracts uh for sushi or uh perp or that kind of thing and i'm gonna pass it off to gabriel who's gonna talk more about the protocol repo that we have set up in order to make it easy to develop these adapters yeah cool thanks a lot erin so yeah now i'll be sharing a bit on how you can get started to actually you know test some adapters write some of your own and yeah we've created a repo that i'm gonna share right now in the chat it's a enzyme finance hackathon template that really provides the scaffolding that you need to get started locally provides a hard hat config where you fork mainnet and can you know play with enzyme smart contracts without requiring you know big ass and all of that obviously so let me actually share my screen all right cool can you see the screen yeah good all right thanks so this is the the repo so to get started with that repo you simply click use this template this is going to prompt you to fork this repo and into your own github username now i won't do that now because i've already done it but yeah so the first thing you're going to need to do the instructions are here in the readme but you're going to need to provide an environment variable for an ethereum node because that's what we're going to need to deploy some contracts so and that example is here so scan api key is just optional if you want to you know verify your smart contracts eventually when you deploy to mainnet or the kovan you're going to need that but you can leave that blank when developing and then yeah you're going to need the ethereum node main net so that could be an alchemy node that could be an infrared node that could be your own client that you link to whatever you you prefer so when you have that set up and you've cloned the the fork to repo you're just going to [Music] run yarn or yarn and fall so once that's complete you're going to run yarn compile and what yarn compile is going to do is take the smart contract that you've edited or or built or just the ones in that are default in the in that repo and compile them provide you with some typescript interfaces or or reposes typescript so once that's complete you're gonna you can test it with yarn test it's gonna run the default test that we have for you know deploying contracts making sure everything is correct but it it should be at that point so the first thing we're gonna want to look at is we've provided one contract for you know one adapter that we already have integrated power swap which is a just a dax aggregator so through power swap you can for example interact with unit swap you can interact with kyber interact with curve and it just filters filters the best price the best price after your net of gas and allows you to trade them for you so an adapter if you recall from that from what erin mentioned earlier is just is really what does the integration with the external you know d5 world so when you want to interact with for example power swap you need to go through the the adapter going through the adapter what does the adapter actually provide it mostly provides a set of methods that converts a call from enzyme into a call to the external adapter in a in a consistent format so here you have a well swap v4 adapter contract uh it has an identifier every one of your adapters should have an identifier and then you have a set of methods one of the first methods that every adapter is going to have is just a parse method which is basically just a helper method that's going to take some encoded arguments these are going to depend on the integration that you you are doing and convert them into something that can be sent to the external adapter and then you're gonna see some for example in this case we have a take order uh function that takes these important arguments takes a vault proxy this just means the vault address the fund address and then yeah does that action on behalf of the fund now you don't call that adapter directly as a vault manager you call it through other smart contracts as erin had mentioned and i'm just going to go quickly back to one of the pages that aaron had shown earlier on and show a couple of smart contracts here so this is the the manager address this is the the public address that's allowed to do actions on you know behalf of the vault for example trading or staking or whatever and these are the smart contracts the vault is the is really the main part of the of the fund this is what holds the funds the controller is what you're going to be concerned with in most cases when you do actions on behalf of the fund so this is really the gateway that you interact with in order to to perform certain actions on behalf of the fund so going back to the code we have a small test here where in order to do an action with the adapter we first uh instantiate a controller so this is going to be the address this is specific to a revolt so we're going to use the address of that controller and then yeah we're going to use a provider as we mentioned that comes from your you know infera or your alchemy instantiated as a you know json or rpc provider in this case with ethers you could be using webtree if you prefer um so yeah we have some helper methods that convert um human readable uh args into encoded args so in that case it's named you know power swap d4 take order args so it interacts it's used for power swap v4 for the take order method that we saw just earlier on right here and it's going to convert a couple of you know relevant parameters into something that we can actually call the adapter with so yeah in that case we're you know we're trading cryptocurrencies so we're going to provide you know the outgoing asset the incoming asset and the corresponding amount that we expect to get back in the case of power swap we need to provide a path the reason for that is that power swap integrates with you know many dexes you could be going through curves you could be going through uniswap you could even be going 50 50 if that's what provides if that's what provides the best price so in that case i just have some mock data and typed it as any because i didn't want to this this changes that as time goes by so you'd have to fetch a recent path for that to work so that's the first step now we have the arguments that are really that uh what's necessary to to you know take an order from power swap but then we need to call that through our controller that we mentioned earlier on so the way this works is you interact with the controller that calls the integration manager which in turn calls the adapter our power swap v4 so here we have call on integration rx this is what we're going to provide to the integration manager to know to which adapter you should dispatch you know the action so we have the address of the adapter which if you want to interact with various you know adapters we have a reference that's been added here at the bottom enzyme protocol addresses so for example if you wanted to interact with power swap v4 you have that address here if you wanted to interact with synthetics you have another address here and if you want to interact with you know whatever adapter of your chosen you're going to need to deploy it and then use that that specific address and provide it to the integration manager so going back here we have the address of the adapter we have the encoded call arguments that we just we just you know declared earlier on so these are the you know encoded versions of the argument and then we have a selector now with selector you're you're gonna need to choose which selector you need when you create your adapter smart contract if that's what you decide to do so this really permissions you know which adapter does what and helps us you know identify the types of actions that are allowed by a certain adapter so in this case not sure if i can quickly find it yeah so when we do parse assets for method which is just you know turning the the params into something that the adapter can use we require is the selector to be you know take order uh selector otherwise if we use a lens selector if we use a redeem selector or whatever other selector we could have it's not going to work and all these selectors are you know you can access them you can quickly import them with time script i can perhaps show you a couple if that's useful so yeah you see take order selectors take selector redeem selector lens selector so whatever action you'd want to do there's probably already a selector for that i don't expect that you need to create your own but you you will need to use one when calling on integration args because that's a standard method that you're going to have to call if when interacting so then yeah as we mentioned earlier you're instantiating a controller then for the controller of the specific valve that you want to perform in action on behalf of and then you're just calling the controller that you've instantiated you're using the call and extension method because you're really prompting it to call something outside of itself and then you're providing it the integration manager because it's calling the integration manager not the policy manager not the fee manager and then yeah you're saying yeah we're calling an integration we're providing you the call arc that we've defined here and we're sending that from the address of the vault manager in that case uh the the manager wallet that we that we found here so since this is a hard hat and you fork locally you can always impersonate any address and you know test a lot of things out and then yeah you would be well you would be sending a transaction and providing gas in that case but yeah i haven't you know done that here so yeah that's pretty much it for the way you would you know implement and test your own adapter one of the things that is important to to know and to add here we have that in the tests is that when you create an adapter it's not going to be allowed to be used by the integration manager by default and this is for you know security purposes we don't want random people creating you know hacky smart contracts calling them adapters and getting someone to call them through their enzyme vault so every adapter has to be registered on the integration manager so it is registered on a network level not on a vault basis so we do that here with the let me just look like we're deploying deploying the power swap adapter and then we are instantiating an integration manager just a smart contract again similarly to the way we instantiated a controller lib and we're calling the register adapter register adapters plural with that that adapter's address so if you have an integration that uses three different adapters you would register all three of these adapters in that array here so and then yeah you can test by calling on the integration manager you know get me a list of the adapters that are registered and it should be it should obviously include your um registered editor so yeah that's pretty much it for the for the code obviously you can you know ask questions and we'll be monitoring the discord because we expect as you go and test things out maybe you're going to have questions with the protocol we go we we do have good docs that we've linked to uh in that repo and i think that darren shared them in that chat as well um one of the specific pages that i would recommend in the docs is linked at the end of their github repo here it's called extensions and plugins and that really goes over exactly what i've been just going through now the way you need to the way the permissions are set up inside of enzymes so you first have you know a controller which is really the part that's most trusted and then you have managers like fee managers and integration managers that in turn call their specific fees or policies or in our case adapters or i think they're called plugins here that just do actions and with external d5 protocols and yeah there's a summary here of what i've pretty much gone through with the code so yeah i think that's pretty pretty much what i had to show yeah cool so we can go on to the questions or erin perhaps you wanted to add something no thanks gabriel that was good we did have one question from thomas can we connect the adapters for other similar vaults that hold multiple assets but for other purposes as to other purposes as as asset management how can we connect two other to other similar vaults that hold multiple assets but for other purposes as asset management i'm not quite sure what you mean there um and i'm not sure what the permissions are in terms of who can call contra uh functions on the adapters do you know that i think it has to understand the question do you mean well every adapter is always available for all vaults unless a vault has you know specifically mentioned that they want to prohibit a specific adapter is that kind of what you're asking thomas or am i off can i maybe a mute myself yeah sure i can um i think my question is more uh for instance for for a lending protocol if i want to have a vault but with multiple assets in it to use as collateral and there as well i need to have some price points for the multiple assets to come up with one value of the total fault for instance that could maybe as well be solved oh it's the adapters you guys created i don't know if that clears the question interesting so using like vault shares as collateral yes um i think that would depend on the external protocol like for example well there's nobody out there that does that at the moment um but it's an interesting proposition because the vault is like an aggregation of a bunch of different assets yeah and and it's it's all denominated in a single unit a single token and yeah yeah i think the issue you would run into at this point although that's gonna be it's gonna be challenging that's gonna be not fixed but it's gonna be implemented in our next before release coming out in like a month or two is uh shares at the moment are not transferable so when you deposit into a vault you get an erc20 token representing shares on the of the vault but you cannot send these shares yeah okay arbitrary people so i can hardly see how you could use that as collateral since that the counterparty couldn't you know use them or you know redeem them on your behalf yeah but the uh that will be so shares will be transferable or managers will have the option to create a vault in which shares are transferable um in our next release zulu which will be sort of like middle of q4 so that i mean it could be an interesting thing to think about once that is possible yeah that's i really like that idea though okay no hoping yeah that nobody steals it for the hackathon no no it's very cool project by the way uh thanks for presentation thank you cool thanks anyone else well that brings me back there he is there he is if that's uh if that's all the questions that was a super interesting um presentation and workshop and a lot of a lot of uh good stuff in just a half an hour which is impressive um again you know thanks thanks to the guys here for putting it together everyone you know stick around in the in the um discord and reach you can reach these guys in the hackathon discord or their own contact information um thanks everybody for for joining uh this has also been recorded and will be on the east global youtube site for for each online event um and with that thanks guys for a great workshop and we'll see you guys later thanks andrew 
awesome let's get started hey everyone thanks for joining the first day of hack money workshops we have tim from teller doing a workshop on using teller how to bring any data on chain questions go into the zoom chat and tim will answer them as they come in and with that being said i'll pass the mic off to tim all right thanks anna um like anna said my name is tim and i'm on the teller dev team and i'm here to talk about the teller oracle so just uh an overview of this workshop i'll start by talking about oracles in general and the oracle problem then i'll give a quick introduction to teller and then we'll get a little bit more into detail on how teller i'll show how to integrate teller and then we'll actually do a live code walkthrough then we will talk about using a custom data type and finally we'll talk about actually paying for your data so what is the oracle problem smart contracts don't have any way to access information about the outside world they can't read apis or know what the weather is so you need some way to get data on chain if your protocol depends on external data and if the security of your protocol depends on the security of your data you have to find some secure solution to get that data on chain so there are um many ways that people solve the oracle problem you could take the simplest route which is pretty centralized uh just having a single address that is allowed to submit the data and the contract just takes that information as is so that's very simple but you have to trust that one individual um you can add a little more decentralization by using a multi-sig which um you can have a white list of five addresses for example and maybe one address can submit some data and then another two addresses are required to sign off on that data to accept it maybe that's a little better than the one address solution but you're still depending on a select few individuals and you have to trust them and trust that they will continue to provide the data there's also a common uh oracle solution in the wild um using amms like uniswap uh uniswap has automatic trading uh between crypto assets and so it automates a price and um people take advantage of arbitrage opportunities uh which should in theory move the price towards the market price but you know that also has its downsides um using an amm as a as an oracle depends on a lot of liquidity there's low liquidity it's very cheap to manipulate prices and then at the other end of the spectrum you have decentralized oracles and that leads us into an intro to teller which teller is a decentralized permissionless flexible and cryptoeconomically secure oracle protocol which sounds like a lot of buzzwords but let's let's break those down decentralization why does that matter um you don't want to depend on a select few individuals um you don't want to depend on the honesty of a few individuals especially if you're trying to build a decentralized protocol and that protocol depends on some data if you have a centralized oracle now you're centralizing a big part of your protocol there's also permissionlessness do you have to go through [Music] some company to ask for permission permission to use a protocol do you have to go through that company to participate in that protocol um if you do again that is a risk what if that company disappears one day or just decides to shut off your service one day when you're building a protocol and you're integrating some other protocol you don't want to run the risk of some one of your dependencies just being shut off one day and shutting down your project there's also transparency oracles are a tool a service provider that a utility to other protocols and so that other protocol has users and those users would probably want to be able to verify the integrity of the data that they're using um so having a way of actually checking the mechanics uh the goings-on and in in the oracle is probably an important thing there's also flexibility the ability to cater to lots of different data types different use cases and then crypto economic security as in is good behavior good data an equilibrium outcome and i would argue that teller checks all of these boxes so just an overview of how teller works teller has data providers that we call reporters these reporters deposit a stake of the trb token and then they have the ability to submit data so then users are able to request a particular piece of data and any of those staked reporters can then retrieve the data and submit it on chain once that data is on chain then anyone can come in and dispute the bad data and then once uh once some data is on chain and a little bit of time is passed to allow for a dispute then a user can retrieve the data and i guess i should note that as soon as the data is on chain a user can retrieve the data immediately but it's best practice that they do wait on that dispute period to allow for some finality of that data and so i'll talk a little bit about more about the dispute process um so as soon as some data is on chain again it can be disputed and anyone can pay a dispute fee in order to dispute that data and once it's disputed it gets removed from the set of available oracle values and so then for a two-day period teller stakeholders can vote on whether that data was good or bad um and then there's actually at the end of that two-day dispute period there's another waiting period and again someone can pay another dispute fee to challenge the outcome of that dispute and um but eventually after that one day waiting period goes by then the outcome of this dispute is determined and then whoever won the outcome of the dispute the reporter or the disputer they get the dispute fee plus the reporter's stake so because of that people are incentivized to monitor the oracle values and find a bad value so they can earn a reward and disputers are also disincentivized from disputing good values because they have to they have to pay a dispute fee and they don't get that back if they lose the dispute um and i see a question in the chat here yeah how long is the dispute period and yeah like i said that was two days so integrating teller is pretty simple um we provide a a helper library called using teller which can be easily installed just npm install using teller and that is just uh using teller is a single contract that you'll import into your own contract and it provides a number of getter functions to easily retrieve oracle values also included in the using teller library is a contract called the teller playground and that is a sandbox environment and that's useful for testing so you can simulate interacting with the teller oracle but you don't have to go through the hurdles of staking and everything but you can still write your test files and submit data and retrieve values similar to how you would in production and here you can see just an example of a simple function just retrieving a value this getcurrentvalue function is included in using teller so you can see [Music] for example you would just input what we call a query id which is a unique identifier for a piece of data and we'll see a little bit more about what that means and how that's generated um so this getcurrentvalue function is included in using teller it will it will return the most recent submission for that query id along with the timestamp and a boolean value of whether the value is actually retrieved and again we'll see this a little bit more depth in the code walkthrough jesse in the chat says what incentivizes reporters um reporters are incentivized by tips tips from users and i will also talk about that a little bit more at the end of the presentation but users in order to request some data they do two things they provide a unique identifier to specify what data they want which is called the query id um and then they also pay for the data those are the those are the two pieces of requesting some data and so you would just want to pay enough to incentivize reporters to voluntarily fetch and submit some date a piece of data so you just have to cover gas and a little bit of profit so let's move to a code walkthrough although i see another few questions true equals uncontested value or 50 successful attack oh is that for get current value um yeah the get current value returns um a boolean value did get a value and a timestamp that did get boolean value refers to just whether any value exists [Music] for that query id so that just allows you to easily check whether um so if nothing exists at that query id you'll get a bitcoin price for example of zero so this did get boolean value tells you whether the bitcoin price is actually zero or we just didn't actually have any value for the bitcoin query id um so let's do a live code walkthrough so here we have a simple hard hat project set up already and let's say you just set up an npm project in order to install teller all you would have to do is pm install using teller and that will get using teller installed in your project and then once you've done that you can import using teller into your contract and then [Music] you just pass the using teller contract inherit into it into your contract and then you also include using teller in your constructor and you'll just input the address of the teller oracle and so that will allow um the getter functions to access the teller function contract and then so in this example we have a get bitcoin price function so we just first set up the return values here again the boolean value if retrieve the timestamp of the value that was retrieved and then the actual value that was retrieved and so all teller oracle values are in bytes form so that allows a lot of flexibility because you can encode just all sorts of different data types into bytes and then decode them back to your intended data type so then once we have those variables set up we [Music] use this git data before function so that's different from that function we saw a couple minutes ago get current value because remember get current value returns the most recent value this git data before is a more preferred way of retrieving data where you input the query id again and also you input a timestamp so you're retrieving the most recent piece of data before this time that you input here um and in this example i use 30 minutes choosing that time is a bit of an art but it's just good to um the i mean the more time the better but it's good to allow some time for people to monitor reported values check whether they're good and dispute them if they are bad values um so that's that's just a tip of best practices and then and then here we just decode our our bytes value into went 256 value yeah so parse parse b asks so a statement is true if whales do not coordinate to contest it whales can mine staked value of honest agents um yeah so so this if retrieve value as long as there is one um yeah as long as there's one value on chain for this query id then this if retrieve will return true and so another point i should make is so where did we get this query id here for this bitcoin price um we we formed that up here first we make a some query data in this case we're using what's called the spot price query type and um and then we input arguments in this case the bitcoin and usd um so this query data and query id these are the way that we specify exactly what data we want we use that um in conjunction with a repo on our github called data specs where we really lay out in more detail exactly what data is expected how it's formatted what sources should be used what should be considered when disputing values so so for example let's add actually get another price in here let's get uh the price of ether as well so we have this variable which will hold the price that we retrieve also make a variable for the eve price query data um and so now we've we've formed a unique identifier a query id for the ether price and so you can substitute anything else in there you can specify any token or asset you want and we would retrieve that in a similar way in pretty much the exact same way that we we retrieved the bitcoin price so that is a simple example of retrieving some price data from the teller oracle and remember we formed a query query data and a query id to specify a unique identifier for the data we want do this git data before function from the using teller library and by doing this uh our our contract in the chat um let's move on from the code walkthrough so what if you need some other custom data other than a spot press your you can define a new query type is what we call it the proposal id [Music] so yeah if your hackathon project has some need for a custom data type you can feel free to reach out to us for help you can try to form it yourself um and yeah you can you'd probably be fine forming it yourself for the hackathon and if you want to move to production we can definitely help you nail that down and get it get it exactly how it should be but if you really want to make an official query type you can make an issue in the data specs repo and there you'll find templates for how that should be done [Music] and finally talk about paying for data in order to get data on chain you do need to incentivize the reporters to submit that data so again you need that unique identifier that query id to say exactly what you want and then the second thing you need is an incentive so we actually provide a contract called autopay which allows you to put in a one-time tip for just a single piece of data right now you can also set up [Music] a data feed at consistent intervals so say you need the price of ether at midnight every day you could set that up in the autopay contract and paying for data really just means paying for gas plus a little bit of profit so it's highly dependent on you know the expense of the chain you're using on polygon for example it can be very cheap and on very mainnet it'll be a bit more expensive so in review oracles provide external information about the world to smart contracts and so if your protocol depends on data to be secure then you are going to depend on a secure article and so teller is a permissionless decentralized oracle protocol and it incentivizes people to behave well you can easily integrate teller using the using teller library it provides lots of getter functions for retrieving the data you need and it also includes the sandbox the teller playground so you can easily test things out and simulate using the teller oracle and you can really use any custom data teller is very flexible and so you can just define a new query type and that's how you specify exactly what data is expected what you need and finally just in production not for this hackathon you would need to pay for data to incentivize the reporters to provide the data [Music] and if you need any help the teller team is always very active on discord you can find us there my handle is there on the screen heavy chain number 9088 and also there's lots of information on teller.io you can find our docs there and also our different social platforms and finally there are a couple relevant resources there the query builder will help you form your query data and query id the data specs is also where you specify exactly you specify a new data type you can also see all the existing data types there and also you can look into that using teller library on our github and that is it awesome 30 minute mark nice thank you so much tim that was super interesting um and definitely thank you for taking the time of your day to do this workshop for the hack money hackers tim is reachable on the sponsor teller discord channel if you have any further questions either today or throughout the course of the hackathon and that being said um we have one more workshop today with badger dao tonight at 6 30 p.m eastern hope to see you all there and other than that have a great rest of your evening or morning afternoon depending on where you are thanks anna and thanks everyone for listening see ya take care 
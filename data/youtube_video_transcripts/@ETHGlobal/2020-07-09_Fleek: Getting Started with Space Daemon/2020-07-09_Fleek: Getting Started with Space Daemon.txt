well excited to be here dear okay I'm gonna keep you muted Rickson that's okay okay we're up on Twitter and standby for YouTube okay we're up awesome welcome everybody to the first session on Thursday for hacker fest today we have a couple members of the fleet team we're gonna be going over the prizes for hack of us as well as teaching you a little bit about how to use their code in your heck of us project so we're very excited to have Brent Dennison and Guillermo with us today huge thanks for them making time and sharing ins and outs of how you speak so we're very excited today is the last day for staking please remember to stake if you haven't already for a cough s we'll be pruning the channels starting tomorrow morning so you want to make sure to do that if you plan on participating for the next 30 days again there are a couple more events later today check the schedule channel and you may have received a calendar invite to a few of them if you're interested in learning about some of the sponsors and we have at least one other sponsor talk pinata and then a few office hours so if you want to get a little deeper with some of the other sponsors check the calendar check the schedule channel and you'll be able to learn from all of them alright before I hand it over to Brett and the rest of the fleek team we're gonna do a quick show-and-tell there's no game this time let's see everybody can let's see what the game is show me a book you have on your desk nobody can win this one but I hope people have books in your by and then just show it turn out turn your camera let's see what so what people are reading oh it's not gonna show there we go learning Mandarin Chinese Andrew what did you have Tolstoy Oh good book steal this book I'm realizing that the the screenshare is cutting out a lot of these book titles so I can't read them all right throw them in the chat and that's the end of the game hope you all enjoyed Brett you want to take it away and tell us about fleek yeah awesome thanks Trent really excited for this workshop we are definitely involved and been building on the ipfs ecosystem so this hackathon is really exciting yet see fleek get each more usage to see some feedback today hopefully have some fun we're gonna do a live code along with the space damon the fleek space damon that we just like it's kind of recently released you know where we've talked about it a bit it's we have we just touched up our documentation around it so that's really nice and clean and hopefully it's really it's easy to follow along and they have makes it easy to build peer to peer privacy focused apps so we'll definitely get into that dive in the details there yeah but to start off so my name is Brett Shearer I'm the co-founder and CEO of fleek we have Janice incivil Roger who's co-founder and CTO will be doing the code along and also Guillermo who is a woman engineers on the on the flake team he'll be doing code along so I'll kick it off just by showing sharing my screen and talking a little bit about overview and the different products of fleek so yeah this is gonna be the space diamond workshop but before we get into that all dive I'm gonna just kind of give it a bit of an overview and I'll actually show off a couple of of the products already have that we have out the hosting in the storage but at a higher level fleek is a modern web development tool for building sites and apps on ipfs so yeah we have the hosting product which is like really one two three really easy one two three click to get and it front-end or web site hosted on ipfs we put we've pride ourselves and having a really good user experience easy to use interfaces we have the fleek storage that is for easily uploading files so we have like a so we'll dive into that and then the space daemon yeah I mean part of like what we do is we build on top of IP FS we build on top of textile and just different IP FS tools encryption tools etc to bring privacy to bring peer-to-peer technology to bring just like the benefits of a live DFS of what three to end users with developers with a really good user experience so that's why we we put a lot of care and attention into the the UI on the experience on the fleek Koh website and app and so yeah you'll see some of that right here I'll quickly give an overview of fleek hosting and then I'll actually show you like a quick walkthrough of it so yeah this is like Wan brought this up and a couple his talks and begin in his intro as well where it's really like the best option the easiest way to host your site or app on ipfs so like just a few counties click connect your github we get provider and then will detect the fleet will detect the framework you're using whether it's like Gatsby or whatever static site Hugo or react app etc and then once you deploy it's on PFS and then all future commits to that get provider github etc will be automatically deployed that's kind of how like you know it's like a hosting solution that's really easy to use we also make it really performant so performance is really important like you know it has a built in CDN then and that will like speed up the fetching of the of the website when it doesn't in the case that may be thumbing faster from ipfs in some cases but that's like just augmented in front of it to make sure it's always as performant as as any site could be so yeah just a quick lead cover the prize on that we are giving out a $100 just to ten teams that we picked that are using the hosting product so it's a really really easy one to to take advantage of and and you know if you ever get a novel idea or something you're working on to just host like the site or the front end of the of an app or web app that you're building on ipfs via via fleet so all quickly I'll show off the actual product real quick so once you get in roughly coasting this is well this is actually our so fleek we use fleek for all of our apps and sites so our docks our homepage our blog everything is hosted on fleek our own app is hosted on fleek as well so like I'm it's pretty meta I'm on an app it's called fleet gets hosted on fleek right now so yeah here's like a bunch of sites we have that we host but it's really just to show you how simple it is to get off the ground and chicoy sites so you just three quick steps connect with github i'll select my repo and depend then you just pick whatever repo you want to deploy this one I think this one here is just like a Gatsby blog my personally gasps we bought so once I click that one it actually had automatic attack that's a Gatsby site and it'll fill in all the build settings for you here like you can see like we haven't lunch that we support a bunch of different ones even if it's not listed here it's it's supported and we'll just read the package.json for you like so chances are it'll just be auto filled for you anyways something that's pretty cool worth noting that like even like besides web 3 even in my kind of web to hosting CI CD tools that's this is a differentiator is we actually have like docker image input here where so we're Auto filling it for you depending on what we detect you don't need to have one but you can actually create a custom docker image and and put it in yourself and you can have extremely costume like sort of build settings but yeah so then you just click the POI and from here you'll just like kind of wash it deploy and it'll go through the logs and at the end of the at the end of this process it uploads it to ipfs and get you get back at hash or cid and then we publish it onto dns for you so I'll just I'll just show off our blog that we have here so yeah like it's here's a bunch of deploys we we put out a new blog last night so like the end it'll just like it'll go it'll give you back this hash and it'll update DNS or it'll create a DNS if it's the first time and then point it to your domain so from here you can just like click and preview it if it's well in this case we've already added a custom domain you can do all that stuff over here you can add custom domains you can add we have ENS support so you can add ENS to it as well it really easily it's a super simple process we support a bunch of different wallets and basically like the cool thing about this is that we take advantage of the controller role that ENS provides to keep the user in full control but to make it a really good experience where all future deploys automatically update the cid the DFS hash on future deployments so yeah there's a bunch of there's a bunch of cool features in here like I go do all these to predict I mean you can like change stuff you can enable preview deploys deport reviews is something we released recently like so basically if you create a PR on that repo you can preview that deployment without actually having to merge it which is also deployed and ipfs and yeah some other stuff there too so I'll let you guys play around that and check it out uh I guess at this point I'd be happy to take any questions that are coming in on on hosting maybe I'll pause there if there's any questions are we seeing any if you include react and react native we do recruit we do include react a create react up Oh for the space daemon itself yeah react native for sure so it works for Nate the space daemon it's awful cover it works for native apps for for the hosting it's for like web apps for front-end so yeah every react apps can find the framework yeah so okay Elm we're adding support we're adding like native support like support for a bunch of different frameworks alum is one we'll have to we'll have to do that for but yeah if you choose other the input will show empty potentially or if you've liked in your package JSON you have to build settings it will actually detect it and if we don't know the framework it'll just fill in the build settings and say others the framework even though it'll have like they'll still fill in the build settings for you if it's empty then yeah I mean maybe it's not clear in the package JSON where we didn't detect it properly can you show how conventional CDN works yeah so the CDN is we actually use CloudFlare as a CDN so the CDN is on the domain that you add so like these subdomains that we automatically create when you deploy like these kind random names dot on fleek Oh like you know frosty glittery five four three on fleek and you can always change the name of the site as well but yeah the basically the CDN is on the domain itself so the subdomain is pointing to the ipfs hash and then it'll battle little cash a CDN because it's pointing to the subdomain and then any custom domains you add will also be added onto the CDN and and we have free SSL certs as well so we use let's encrypt for SSL certs to generate them and and give them and put them on on the domains cool so that's the hosting there's more questions around that definitely just ask and then let's go back over to the next thing okay so hundred dollars just to any ten teams that have that use that I mean it's pretty pretty easy to use hopefully if you have any issues you can always contact us in the fleet channel we also have our own like slack and our own you know we've intercom like messaging inside of the app if you end any problems just ping us like we're really quick to respond okay and then the other product that we have is fleet storage so this is a really easy way and performant way to store files and ipfs any file you know so whatever if I'll it is technically like I've you know supports like actually any file so it's pretty awesome super easy to use we have the web app UI which I'll show you we also have the fleek storage j/s which is like a library that makes all the methods programmatically so I'll show you that real quick but like via Tech Talks and then yeah it's really performant so the same concept where we publish files we actually use so behind the scenes we're actually using like s3 like an s3 type interface called Mineo and we have weekend so when we uploaded the ipfs it kind of has this sort of bucket type of structure so we're creating a bucket and it's kind of like an Augmented bucket on ipfs where the bucket actually has a hash the folders you can have folders within it and files within folders so the entire structure is complete on ipfs and like we and all have like hashes and those buckets are published to DNS so you have a URL that you can reference those files and that URL is augmented with the CDN built in has image compression and resizing so it's just like all that's kind of built in really fast tools that you can that just come kind of really packaged and easy to use so I'll show that super quick as well just go over here to the storage page I have we have some uploaded here we use it for like all the images for our blogs and stuff we we put it in like a bucket and then reference it via URL to make the builds much lighter so you click upload I'll just grab any given file here drag it in there you can drag folders and then click upload click confirm in that and it'll just it's kind of just going to the process uploading it so once it's uploaded you'll it'll automatically it'll just you'll show up right here in the UI so here it is and this is kind of like a whole management UI to see like all the files and manage them so I can open up this specific file I can open up the URL with it so here it is like on on the on this fleet bucket and I can use that URL to reference it within my app so yeah it's a whole management UI and then we also have these just to show you something that's pretty cool is like this everything is completely on IDF s so this bucket I can like verify this is on ipfs right and what it does it's looking up the hash of the bucket on a gateway any folder I open also has a hash I don't know if I have a folder on here any individual file is gonna be have its own hash so it's like it's pretty cool it took a pretty good amount of work to make it where the holes like folder structure and bucket structure could be completely on IP FS but still super for me like even like you might if you don't ipfs is you might not even realize it's like it's just all on it and it's really quick yeah I mean I'll just quickly show off like our Docs here you can come over here to the storage and we have the fleek storage Jas so the storage Jas like this is just a library with like kind of all the different methods programmatically easy to use this explains how to do it yeah so like get upload is like pen list get file from so this is like you can just like give a hash and get back the file and the might whether or not you store it through fleek or not it'll just it'll just get it from our gateway so yeah you can come over here and check us out if any questions definitely let us know and to reiterate a hundred dollars to ten teams use that so very easy thing to use definitely worth just giving it putting it something on there and getting a feel for it all right so I'll check if there's any questions on that chat your video is on fleek stores support streaming I think so yeah like Street like just like a video like a livestream are just like yeah if you upload a video you can definitely play the video and stream it 100% yeah that's what I mean as a database for apps so database law is like yeah it's just like storing files but if you actually want to like a scheme like it's a schema and stored like you know reference is database that's where you ya know it's not meant for that so like textile has something really cool like you use textiles database for sure and then our space daemon is something more along those lines it's not really a database it's just like a bunch of methods that you might use for building an app so yeah come with a textile built into it so um even if you're not using the space file API is once you run the daemon you have a built in textile node with this ER PC exposed so you could start using that for your database name oh cool yeah so good point yeah so the space demon has a textile node built into it it's like packaged up so when you download the game and it comes with the textile node and so you can use that as a database what is your encryption story with hosting an IP FS buckets etc for that like for the public hosting they're not encrypted because they're on ipfs and they're meant for websites that can consume them so it wasn't a private store we have plans to change that but then we're we're doing private private by default first is on the space side where the use case is more around your own personal files and you know selectively sharing with other people so on that side on the space statement side things are you know encrypted by default it's built on the encryption that textile is doing for their buckets so yeah it's answer that question for the public site hosting and sites application because they're meant for public sites and viewing they're not encrypted yeah can the keys for encrypted buckets be shared manually or is it was that purely handled through the API calls so we'll talk we'll get into the space daemon and you'll learn a ton about that you can absolutely have like encrypted buckets on you by default on the space daemon and and those can be shared via API via API calls we have sharing methods that make it easy to share selectively or like within a team etc is it possible to change the ownership of the file through fleek ownership of the file so I guess ownership of the file is interesting concept who actually owns the file so if you have you upload a file you have the file I guess she sort it but I know it sounds like an interesting use case for like adding in some smart contracts referencing a smart contract we referred an encrypted ipfs file and like whoever has the contract he maybe decrypt it would you have some cool use cases with the space daemon were like once if you have it encrypted there's ways you can look you could have a you like a sharing URL and like one of the things we're trying encourage is like if you have if you can put the decryption in the sharing your which I think we might every bullet Janis we'll talk about it so that could be like ownership of the contract can like you know actually be able to potentially like decrypt the file itself so not I wouldn't say through the storage though that sounds like the ownership isn't is a tricky topic ok so that's good for that now on to the part where we'll get into the tutorial really soon so the space dam just to give it a little bit of background we have so it is a so there's a J s client there's so its core it's a go I'll just skip over here it's core it's the space Damon as goat is a go Damon that package together I profess knowed a textile node so textile threads and buckets and will power gate that's kind of like Astrid because we're working on the five-point integration right now then this in this current sprint in one install Damon so like we've made it really easy to install this Damon um so you can check like in the tech talks will show you today how quick it is and once you install you kind of have all that packaged in so the actual game in itself has Munchie RPC methods if you wanted to interact with it directly but we also created a JavaScript client that can be that's like just exposes the methods way easier without having to like host your own G RPC client and all those methods that it's so so for us in our own app we so we're actually so we're currently building an app on top of the space statement that is coming out TBD but the we're actually using like this the J's client ourselves it made it easier for us to bundle it up and and deploy it and kind of just yeah it's a much easier to use for our final developer for the find developers and the team as well as as the deployments so you can so part of the space Damon you get is it has a bunch of like file commands that that interact with like encryption so adding files deleting files adding folders even like a bunch of different kind of crud commands that come with like encryption already built in so if you we come over to the docs super quick you'll see like we have the getting surgery well and walk through this today it has like a bunch of different kind of crud operations just expose these files we have sharing commands so like a bunch of sharing stuff where like all these different kind of different ways when I share files or buckets within a team or selectively with another person or kind of whatever type of sharing arrangement that you want to do these are just like kind of out of the box that we'll walk through today we also it also comes with identity service packaged in it's completely open-source so that any service has currently right now username emails but we're gonna add a bunch I mean it everything here we're talking about like the whole space damn itself is completely open source so you know we'll continue to add more like kind of services if it makes sense add more on the services it's open to contribute if there's a better way to do anything we always take approach that's like completely private completely reappear like decentralize but like gives the best experience possible so but we also want to make it like pluggable if anyone has better ideas if anyone has things to contribute like we're happy to plug and play and that kind of brings to one of the points over here where you know like we wanted to it'd be like an ecosystem where there's it can have like more extendable types of features so like maybe it's not just maybe like you know actually like video conference like you can do some sort of like zoom type thing on top of this right we can do other like not just files not just like file sharing but other types of interactions where we think can be built on top of this and that's and other you know maybe better ways to do identity or better ways to do different pieces that we've that we've created and so yeah we're excited about that at its core like it's really like this kind of this data repository that's completely user controlled right when you when you sign up so when you when you use the space statement it has like the keys for users that upload data they have the ill known keys they have the ability to control that data themselves and it's completely private is all encrypted and we think that an app like an app ecosystem makes a lot of sense around this so one really like interesting thing is like think about if like this is basically like a database that lives on the user's computer that's completely local and encrypted and you can have like any user data that's associated with apps can even be stored there so we definitely want to see a lot of things around that evolve where like users interacting with apps have their app data even store like locally on their machine that and they don't have to kind of give up their data to two different applications and we also think that like this once you have this space daemon on your machine and it's and like you have a desktop app that's using it or though it's just installed locally then it becomes a way for your entire machine to interact with like textile with ipfs and so this becomes like something that other apps can plug into so understanding like what apps you running that are interacting that needs to interact with your local store or local ipfs node even enable it also can even enable like web browser applications that are completely peer-to-peer because if you're running it locally you can it can create that kind of those experience around even web apps as well not just like desktop apps or mobile apps so yeah the I'll just quickly cover the prize on this is we're doing $3,000 for the first-place team some cool ideas just before we hop in is a paid to decrypt file app encrypted image sharing where the keys in the URL is something to mention like being able to share URL where they could decrypt it the actual file itself decentralized file sharing is an obvious one like it's little it's every single method you would need to do that and then this is the lot one of the ones I kind of mentioned with like user controlled app data where like you can imagine basically trading like an example app and showing a user interacting with it and saying all right like everything I do on this app is gonna point to local directory and store all my data here and then create some sort of interface where the app can actually like interact or you use the data without having a store which would be really cool and I think there's a lot of like even more interesting ways that could that could be monetized like where the user can get like paid for letting the app user data maybe there's a smart contract involved that pays them out something like that so I mean it's pretty endless like I think a lot of the ideas work for this I would base kind of building on it a bit on all the methods we have available that you could do but also anything you do to like extend the daemon or like to improve it or add more functionality is also like counts so if you don't see something here and you make a poor request to them and it adds something that's also awesome - so without further ado from there it's coding time so I will stop sharing my screen maybe I'll let me just check that there's any quick questions [Music] hope hope the computer doesn't crash or they don't lose your wallet seed keys associated with user email can we get a recovery key or something is there a color J'son yeah so that we're still working on right now but as part of the identity service Brett pointed out we're gonna add a recovery option so you can give an email to get an email or you know passphrase backup that you could then restore on a on another machine and as part of the identity service yeah we're off Daniel on the call also who is building that piece so I don't know if there's anything to add there but that's in a nutshell I think Daniel commented on it all right I'll hand it off to the Gamo to go to the next step yeah okay hey hey guys my name is Guillermo I'm front-end developer here at flake and now I'm gonna show you a little bit more about the space team on how you can stall a demon and how you can use it how you can interact using the client and of course all directly from the code so I'm going to share my screen okay can you see my screen yeah cool okay so first thing first a spread mentioning right here we had the documentation a lot dogs that flick that CO and on the space demon section you will find all the information related and require if you want to implement this demon also you will find information related with a client the JavaScript client library and of course all the difference medals that you can use or you can implement also you will find an examples so you can go directly to the repo and run some examples with the demon and the space claim so the first thing that I going to show you is how you can install the the demon on your machines so it's pretty easy you just need to go to the listed latest release right here and at the end of the list you will find different binary versions for different operating systems so you just need to download the version that you need for your operating system and that's it umm I already downloaded the day binary so I got it just here and I'm going to show you how you can run the daemon so I got my doom right here so the first thing that I need to do is change the permissions in order to be able to execute that file so it's just a sketch mode that's it and now I'm able to execute the binary so you can execute the binary just as any other binary file there is nothing new with this super important the first time that you execute the binary you will receive this warning of course if you are doing in OS X operating system so you just need to click console go to your system preference security and privacy and click allow anyway so after that you can come back and try to run the demon again this time you will receive an different message so you just need to click open and that's it you will see a bunch of different locks this is the important one if you receive this this load you are ready to start working with the demon and also you have some other important locks right here that I'd related with the ports word the demonics is exposing the difference methods that you can use in this case the that we are going to use is this perdon 99-98 which where is running the year pc web proxy the space client is based on your PC web so that's the reason why the the space demon groans and exposed this year PC web proxy and that's give you the ability to don't worry about two called year pissing methods or integrate something related with your PC and you just need to download the client the library client and interact using normal JavaScript functions so it's pretty simple to use and I'm going to show you how you can install the client and how you can interact with the with the demon using the dis library so right here I got a a tiny period it's just a create react application running with electron on a desktop application so I'm going to run this example there is just a basic setup there is nothing special with this just a simpler has a react apllication less electron is that in the repo yeah yeah yeah they the reason our repo I can show you later on the end the chat but yeah if you go to the to the to the difference flicker ripples you will find a this example and also there is another example and right inside they take a flick library the claim so yeah you can use whatever those to you okay so yeah here's the example I'm going to show you just a few basic operations that you can perform on the client like create a new baguette or list the a directory or open a file inside the packet so let's get started first thing is of course install the client you can find a client here and NTM the package is called leakage HQ / space claim and you can install it as any other normal package just gern or you can even use NPM if you want Flik I'm going to copy and paste this one and that's it so let's wait for the installation finish okay that's it so you have to run your team on on the background so after that you can start interacting with it so first thing is of course import the client and I mean a few configurations and then you are all ready to start using it so right here I had a folder from a client and as you can see it's super easy to set up the client you just need to import them create a new instance of the client and passing the URL where they grp see web proxy it's running so in this case as we saw before it's running on this board 99-98 and I'm pointing to my local machine so that's it the client gives you a lot of different methods that you can call and perform different actions on the daemon site so as you can see you have for example you can you are able to add items you are able to create a packet to create folders list the the baggage all these directories etc so I'm going to show you a few of those methods so the first one is going to be what I'm going to run the sample game okay let's wait okay that's it okay so I am going to open the developer tools to show you at the output on the console so the first thing how you can create a packet inside using that the demon and the client so right here I had the different components that are here and for the great bucket to code it right here so it's super super simple you just need to import the client this is the same client that I created before and once you get your client you just need to call the method that you need to in order to create a back in this case I'm just adding a son submit handler for this farm and right here is the code that you need in to create a new bucket the grade packet just need there's lot of the buckets so basically the name of the packet that you want to create and as you can see this method returns a promise so you can use async await syntax so much more Unicode you can create with this and yeah then you will receive the response from the space demon and that responds if they expose a method where you can use to get the bucket information this method they get back so basically it gives it gives you the the bucket object and this packet has a lot of different methods that you can call to get more information about the bucket that that you just created so for example you can retrieve the name of the bucket that you already pass it out to this function but you also can get the part of the of that backyard you can get the key of the bucket it's a dry off so you can other than a little bit more of information related with the back so what I'm doing right here is just using this helper function that the only thing that it does is it takes the back adopt it and use the difference getter functions in order to get different properties and just return a simple JavaScript object just to login a simple object and so you can see the information related with the with the package so I'm going to create a new bucket so here is the bucket that I'd already created so as you can see you have the key the name pad etc a lot of different information okay we already created a bucket so probably the next thing that you wanted to do is probably create a folders or or folders or different directories on your bucket in to organize your files so in this case it super similar is the actually is the same it's pretty similar to the previous code you just need to import the client and call the method create folder in this case you need to pass an object with two properties the first one is the bucket which is the name of the bucket where you want to create a new folder as you can now do you can create multiple packets so you can interact with difference package using the same function so that's why you need to pass the bucket name and also you need to pass the path the path is the it's the directory on your bucket where you want to create the folder plus the name of the new folder so for example if I want to create let's say that I have a super sub folder called suit inside of my bucket mean I wanted to create a a new folder called new folder the that is going to be the path for create a new folder in the case that the soup directory doesn't exist but the daemon is going to do is just recreate the but that you're passing as a property so you can for example create multiple nested folders using this this same module okay so yeah again you this function returns a promise so you can use a sink avoid syntax and let's create a new folder but right on the road directory so I'm going to call it soup phone okay was created okay so I created my bucket I created a subfolder and next thing probably your you need to do it list the directories so you can see what it what do you do do you have inside of your packet so in this case you just need to pass the bucket name where you want to it interact with and also the path that you want your list in this case this would fold and I'm going to show you the code for this one so list directory okay very similar you just need to import the client and call to the function that the list the directory in this case you have two different methods that you can use I'm going to show you that those methods okay so you have the list directories and the list directory the difference is like the list directories just need the packet that you want to list and the function is going to return all the files that are inside of your bucket even if there are sub folders or files inside subfolders so you're going to receive all the files on your bucket the difference within the with the list directory is that the list directory just returns the files and folders the of the pipe that of the path that you are passing as a as an argument so for example if I just wanted to list my soup folder I this method is going to return just the files and folders that are inside of this folder so in this case that's the method that I'm using so I should be able to see what it's on inside of my subfolder so I want to call them it seems like every seven arrow I'm going to okay that's it so here I got the files that are inside one of my soup folder as you can see there is a at default file called that keep this file is created by by default when you create a new folder so that's why you will see this file when you win your listed directory for the first time so yeah that's it next thing how you can upload files to to the bucket or to the new folder person okay so in this case I'm going to show you the code for the upload files same thing you just need to import the client and call the method needed to add items in this case we're going to call the other items but as you can see the this method it's not returning and I promise in this case it returns a readable string and it's just like any normal readable string you can read the documentation on the know DJ's Doc's so you can listen for the different events on that stream and output the results so this method what it needs is just an object with these three properties the first one is the bucket where you want to upload the files the second one is the target pad which is the pad on your bucket where you want to upload your files and the third one is the source pad the source of source path are your the pads on your machine of the files or folders that you want to upload so a it's an array so you for example can point to different folders on your machine or different files on different locations and upload all those files in just one call in this example I'm just going to upload one single file so I'm going to just call the test use that my test for test bucket and the target pad I'm going to upload the files to the folder diet that I already created a subfolder and the part of the file that I want to upload I'm going to find a file so okay so I'm going to okay so I'm going to upload this one so I need the path of that file so it's located right here so I got the pattern so I just need to add in the name of the file which is key that txt 60 and that's it so I'm going to upload the file and here I get a response from the demo as the response from the method is a readable stream you can subscribe to the data even and you will receive and even for each of the files that you are bellowing so this item results which is the response that you receive gives you information about the file that you've already uploaded so for example you can get information about the about the if the there was an error for the example uploading the file or you will get and you can get another information like where it is located now the file that you already uploaded on your packet to get the packet path or even you can get the information from where your uploaded your file on your machine so in this case that is what I'm I'm doing and just printing out the source on my machine for of the file that I already uploaded and that's what you see here ok so last thing probably is how you can open a file that is on your bucket as you remember all the files are uploaded to I to ipfs encrypted so you can just use your file directly you need to decrypt that files first so that is what the open files method does it just takes your file and the creep that file I'm putting into a temporary folder on your machine so you can interact with it as any other normal file so the open file right here you just need to call the client call the metal open file engine you just need to pass the back in name where is the default that that you want to open and the path of the file inside of your bucket where what you want to open so for example in this case I'm going to release my directories again and I'm going to try to open the file that I already uploaded so that's it I here I got my two files and I wanted to open this one so I just need need need to pass the back which is test and also the path so I click on open file and the demon returns the location on my machine where it's located at this temporal file decrypted so I can take that path and open that file for example or see what it's inside of the file for example [Music] so that's it so there is the content of my phone so I I can open file as well you see this same but and here I got my my file so yeah that's it basically the basic operations that you can perform using the client now Jenny son is going to tell you a little bit more about how you can share your baguette and explain explain a little bit more about difference method that we have available for you guys so once the stop makes my screen ask me okay hey guys I'm gonna share my screen now um you can hear me fine right yeah alright can you also see my chain now and it's on the docs page yeah yeah okay awesome so um just kind of starting from there the thing around sharing is these items are in the reverse order so like right now what's implemented is sharing a bucket and joining a bucket and what that means is there's an interface on the daemon that you can hit and you get back to information so when you call the share bucket you specify the bucket you want to share and what you get back is the payload you need for someone else to join it and then likewise the joining bucket is basically taking that payload let's say you've message that on slack or email or somewhere to someone else they could take that payload and then put that into join bucket and it'll join that same bucket obviously that's kind of a lower level sharing functionalities what would be ideal is okay share it directly by email or even in the app like when someone else is using the app it should be a way to kind of push that invite for that pops up in the app and adds them to that bucket so the sharing by email or by identity and doing the in-app messaging that stuff is in the works the first layer was getting the share sharing that basics down and that's kind of what we've been focusing on and and God so that's what I'm gonna show today the other ones are not implemented yet but now that we're done the base sharing layer there's there some improvements we have to make at that as well which I'll talk about it but then also add these other more or user-friendly sharing methods so that's kind of skinny on the different sharing what why are you seeing multiple ones here and and what they mean so kind of on that note what I have here is I have the daemon so off I'm on an ec2 instance on AWS so you can see that up here at the top oops so why I'm doing that is because I'm kind of simulating someone on a machine starting a bucket and adding folder to it and then me on my local machine I'm going to join that so I'm on this ec2 instance because it's an easy two instance and I can't run the GUI for the desktop app what I did was I created a little script inside the repo that demo was showing around using the client so what I'm doing simply here is one wall because I'm in a no js' environment we need to drop this in because the underlining JRPG libraries require that so and this is in the readme then I'm pulling in the client cheating a little here and working off the same directory as the example so I'm not pulling the NPM package I'm just kind of look pulling it in locally and I'm simply few simple steps I'm creating a bucket I just kind of called it bucket to share with the timestamp so every time I run this it generates a new one creating that bucket just logging the results to the console then I'm creating a folder within that called test folder a and then finally well I'm also creating that just to make sure it works and then last but not least I'm sharing it and you could see that the only piece required for the sharing is the bucket name and then the console will print that out also like I was I was copying and pasting this so that's why you see like for try caches here Trog the cleaner to have it all together or depending on kind of how you want to handle it but that's the summary of what this file is simply doing that basic operation and then the sharing so what I could do then is run this I'm using babel mode because i want all the night JavaScript syntax and I can just run that and then you the threat of the daemon on the ec2 instance is running here on the right side so I'll just go ahead and run that um and we'll see on the logs as it goes through the different pieces there's creating a bucket then okay so this looks like it's going to timeout okay I was hoping it wouldn't do that but one thing we're trying to fix right now is I'm gonna run this again okay so this is maybe a good opportunity to talk about how the sharing is working behind the scenes show you why I'm getting that error which I'm hoping I don't get on the next one but anyways when you share a bucket right your machine has a thread running locally and that is just on your own machine and when you share it it generates these addresses so why are there three addresses is because when you run the thread on your local machine it's listening on all these ports which is like your local host your private ID because there's you to instance there's a private IP and there's a public IP so the idea is if you you could share that whole payload to someone else and then they could join and what the joining does is it will try each of these it'll try to do it locally first and then it'll try to do your public IP and where the hub comes in so then they have the concept of a textile hub which is meant for when if okay that one did it that one work so I got through that time out issue so we're going with that in the hub is acts like a third party replicator backup you know relay engine really because like even though I generated the invite link here I couldn't and it has my public IP and let's say I had a static public IP that someone can actually reach if my machine happened to be turned off or I'm not running the daemon when they go and try to join that it won't work right because I'm not online so there's a fall back on the joining which goes okay first I try the local one if that doesn't work then I'm gonna try joining that same hub started running that same thread on the hub and that's where it eventually falls back to and with that the way textiles done it it's great because you don't have to give your textile keys to the hub in order to replicate there's two different keys there's like a service key and threads like the actual thread key where you can read and write content to so the hub only needs the service key you can think of it just that it's enough to get the data and replicate it and let other people consume it but without the readwrite key you can actually see it and that's what you're sharing here to the user with that so just to kind of move forward on the demo you saw that last one it didn't give that error we're working hard to fix that error like the textile hubs node for example it's like a lot of network i/o traffic going on it there's about 3 megabits per second input and output on the network side non-stop and then we're using a somewhat small instance for the hub that's where I think some of these timeouts are coming from so we're exploring that and then also on the gr PC side both server and client if there's some tweaking we need to do to make this not timeouts that's kind of something we're working on right now as we make this more stable having said all that I'm going to take this information now and join it so now I can just going to copy this into my notepad that can't see and um this you know bucket to share nine six seven ending an item and that's what I'm going to join so now I can go to my local machine so here I'm running another instance of the daemon but this time it's on my local machine here and since I'm running it locally I can leverage the UI that Ungar mo has created and try joining it so if you remember it was bucket to share ending in nine six seven and just before I join it if I go and try to list the directory for an example it's going to say the buck not found um but since I have the invite information I could start popping that in there's a bucket name there there's the P and then you want to paste in the addresses as well and what it will do is it will try each of those addresses and then finally fall back to the to the hub so now it's joined so now if I go back and lift that same bucket I could see the folder that was created on on you know on here when it ran through my script it created a bucket then it created a test folder a and then shared it so now that's what I'm seeing here and then now you can kind of do whatever you want on your on this bucket now that you're part of it you could share it I mean with other people and add stuff to it you know like a folder B and we're you know we're working closely with textile on more fine-grain access control so you know whether that's read or write or admin those things we're going to separate out into different access controls and corresponding keys um but that's the work in progress as well so that yeah that that concludes my demo there's any other questions regarding the sharing it could take it yeah there's a few questions in the chat museum right first the first couple from from Thomas from J rush well the user in my app need to be running space daemon in a terminal window no absolutely not so the way we're doing it that it goes to the packaging so right now because we're in heavy development that might be the case but like Brett said we're building our own app that's going to use the daemon and the idea is it's that app should check for the daemon and if it's not there install it run it behind the scenes and continue so it shouldn't be something that the end-users doing like of it as like a Dropbox system tray already been met amassed like when you have using meta Mac and you go to a website they check if you have met MS there and if it's there then they use it if it's not then maybe they'll fall back to another wallet and or do something else it's a similar thing here so it's in the packaging of the app and I think it's kind of like if we work towards a standard like that where any app builds on space daemon checks up the demons there and if it doesn't then installs it and runs it and that'll be a common pattern that could be used across the board well that in its partly it's mostly implemented in our act but it's not like a standalone library or and something maybe that's something we could add to this example for our like our client library that will let you do that piece as well so I think maybe that's something we could do it's implemented in our app but it's not like a a like a standalone library all right for you yeah I'm just gonna move on to that hash question the reason is because these are like version 1c IDs and not version 0 so the QM comes with like version 0 hashes and textiles uses version 1 and later and I think that's what eventually people will slowly move towards as well and that's that's why the hashes look different and the encoding is different as well thank you thanks but there's a nice utility maybe I'll share the link after this but there's a nice site by ipfs that you could taste in like any CID it shows you a kind of a breakdown of like what encoding it is what hash function it is etc and what version moving along I would like to upload my react after sleek how could I use daemon as a service is it necessary to have the client on my machine I guess the first thing that comes to mind is to deploy a react app the best way would be through the site and not the space daemon um and yeah the daemon has a service that's a good point like right now it's local only because like the main thing is it's using files so like if you want to upload a file on your machine you can point to it and then the daemon will have it locally so it'll work but as soon as you take that daemon put it on another server and sure you could open the port of the daemon and connect to it remotely but then the files you know pass don't mean the same thing anymore because when you're using the client you're talking about pads on your local machine but and then Damon's going to try to process that path as if it existed on the server but that's not done yet and we have talked about it internally to try to give that interoperability so if you wanted to run it in a hosted environment as a remote you can maybe instead pass like then upload the file that you pass in the whole stream into it set up the path and then the daemon will handle it so that's something that's on our radar but it's not possible right now it's not it's the goal is to have power gate in there it's not in there right now like Brett said the following stuff is in progress but the idea is just like it's running a textile node that it would have power gate built in and we'd exposed everything that power gate so you can hit it when you're running the daemon as well yeah we're on in the current sprint so hopefully while people are still idea here you're getting things going that we can announce that it's in there and it's usable really soon and do we have access to textile user or excuse encryption methods etc it's a bit of both like right now if you you could use the hub and do things like users and orgs and have access to that but the keys and encryption that's also like a lot of it is built-in so the keys actually used for the encryption is built in but you could they have a context layer that you can specify keys that are on the machine or the users teeth as a way to access control so dinner keys and I have to see if those inner ones are exposed as well maybe they are um but I haven't worked kind of like on exposing that we just kind of let it do its thing and we haven't brought those keys out or like use our own key at that level but we do use keys from a user identity perspective so you need that key to open the context to you the textile and if you use a different key it won't work but there's still a little kind of like that two layer of keys there one is like our s user identifying key and then there's keys inside textile that first key we'll have access to and and I think it would be useful to expose the inner keys and be able to supply your own I have to check if textile enabled that first of all and if they do then we could expose that all the way up to our API eventually everybody hopefully we got to all the questions but unfortunately we're gonna have to wrap this session because we got a prep for our next one at 12:00 as always you can catch the fleet team in their Channel if there's any final last things the team wants to say just to wrap this up please please go ahead and do that let me this what I'm gonna do is I'm gonna copy the questions from the chat and I'm gonna throw them in our fleet channel and we'll answer them one by one in there perfect and I'll tag you guys asked the question so we can continue the conv thanks for much for coming I'm glad we got through a bunch of coding and some get them out of the questions we'll get to the rest of them definitely use the fleek products use hosting you storage use Damon yeah plenty of prizes our whole team is in the slack we're ready to answer any questions you have we love to help even id8 all the way from ideation to execution will be online where we'll be working hard right alongside you so thanks so much for joining thank you again for coming on and doing all these demos for people it'll be really helpful all right we'll see everybody in slack and if you're joining the pinata session in 15 minutes we'll see you there bye 
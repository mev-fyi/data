hey everyone we'll get started in just a sec awesome okay got everyone in sweet hey everyone um welcome super excited to have you here today um so we have our super fluid workshop with sam um he is going to be talking to us about building deep fight applications on superfluid um so we'll have sam uh do his thing and then at the end or like i guess like as he's talking feel free to put any questions in the chat um and then we'll have a like a little q a session at the end um where sam can go over your questions but yeah same feel free to take it away and i'll go off video thank you so much well guys thank you for joining us these are always fun to do um today we're going to walk through super fluid from a high level a little bit right how superfluid works what it is for those of you that don't know and then we'll go through a specific application that that i built not too long ago that's a cool example of plugging money streams that are tied to salaries into the rest of d5 so i'll show my screen and we will get into it alright so i'm assuming we can see my screen here i will present in just a second feel free to put in the chat if you can't see my screen if you have any issues and i'll try to review it and make sure we're all good technically but let's talk through building d5 applications on superflu right and as uh you might recall i just said we're going to walk through what superfood is from a high level first so i'll go through it superfluid's a protocol which enables something we call real-time finance let me check the chat here real quick all right cree can see it we're good um and what real-time finance does is it enables things like digital native programmable cash flows right so when you hear about superfluid you'll often hear about us and money streaming together and the main thing that superfood lets you do is stream money with no capital lock-ups where everything is 100 programmable and on-chain so asset streaming let's think about this idea of asset streaming a little bit more right so these are continuous payments right any recurring payment you might want to make instead of sending it all like on in discrete lump sums once a month or once every period you want to send the money you can divide the amount you're going to send into tiny little increments essentially and money is sent every single second in real time without having to hit transfer every time on an erc20 contract to send over and over and over again so i'll get into how that's working in a second but we think this is cool because it it separates it doesn't separate it actually brings back together this link between value transfer and payment right so if i'm providing a service to you a lot of times what's happening is i'm providing the service and i'm getting paid later right if i'm working for you you're paying me once every two weeks i'm providing a service to you right now but i'm being paid later but things like money streaming enable is this this link between them the service i'm providing right now and the payment i'm getting so maybe every time i clock into work i'm just getting paid in the stream for every single hour that i'm on the clock right so real time transfer of value as the service is being provided another cool thing about this is that this embeds native payment terms into digital services as well right so if i'm providing the service maybe i'm giving you access to an api or i'm letting you watch a video or stream a piece of content it allows me to encode the payment terms on chain and lets you engage in an agreement that you can then just always query the blockchain and see that the the agreement is is still in place right so this removes delays because of the way the value is transferred it moves on payment risk because there's proof that this is happening on shane and the money's being sent in real time for every second that i provide value and there are no intermediaries because it's all on chain and we all like decentralization here so that's asset streaming and one of the key innovations here that's enabling this is this idea of a super token right so again i mentioned earlier you don't have to call transfer over and over and over again on the erc20 contract because we built an extension under the erc20 contract that we call a super token contract so it's compatible with erc20 and erc777 so all these these things you're used to right like approve transfer from uh balance of these things are all still there but there's something on this contract that's unique and it's this function called real-time balance of right so this real-time balance is tied into the rest of the protocol and it allows us to calculate what your balance is taking into consideration all of the money streams that are coming in and out of your account and i'll get into that in a second but there are two types of super tokens one of them are native super tokens which are just deployed directly as super tokens right they're not wrappers on anything else they're just through and through super tokens so they have this functionality directly and we also have wrapper tokens right so interoperability we all know is important what you can do with it with an erc20 token is wrap it as a super token and stream things like dye things like wii things that you're used to streaming as your c20s not used to streaming used to transferring as your c20s you can then use them in superfluid so the the thing that that ties these super tokens into the rest of the protocol are these things called agreements right so an agreement is this financial relationship between two parties where if i want to send a money stream i'm going to use an agreement called the constant flow agreement that lets me create a flow by passing in something like the token address i want to use the receiver the number of tokens i'm going to send per second right so this gives me an on-chain linkage between two accounts right you can have one to many streams so it's not like a state channel where you're tied to two individual accounts only you can have one to you can have many streams open at the same time and this is actually it this allows us to build in this real-time balance function into the super token contract right so there's a linkage between the super token balance of and what's happening in these agreements right so we can always have your your agreement data to get how much money you're either sending or receiving at any given point in time right and that brings us to this concept of the real-time balance right so if we can figure out using the protocol how many tokens you're sending per second and receiving per second we can get this idea of a net flow right so are you on net receiving more money you're sending more money right so your net flow can be positive or negative right and if we know what that net flow value is we always have the al we always also have to block that timestamp value so we can use the the block.timestamp plus this netflow to calculate how many tokens you've sent over a given period of time and we can only call that function when we need to right if you're going to perform another state-changing operation we can just always call real-time balance of first in that operation to make sure that you're only sending or sending tokens you actually have right so that's the idea of real-time balance it might take a second to get your head around that but it is quite important concept when dealing with superfluid because it enables this whole thing right it's not like i said it's calling transfer over and over again in the erc20 contract so another cool thing about this is that everything is programmable right there's this concept of a super app that we're going to go through later today in an actual smart contract example where you can build a contract that can react to specific events that are are happening related to super fluid right so you can have a contract that can receive funds and then whenever a stream is either created updated or deleted into that contract you can have the contract automatically do things and run callbacks with whatever logic you want in those callbacks when one of those events happen so this can be very useful for building really advanced d5 applications or applications is just taking cash flows and send cash flows out maybe split payments and do interesting things like that um again within some kind of deep application so if you have things like all these money streams flying around you have these super apps that are cash flow where they're receiving money and doing things whenever they receive money we have this really cool network of automated cash flows that can start getting really cool when you take into consideration that there are lots and lots of applications being built on top of superfluid right now so you might have somebody receiving a salary stream and then redirecting it into a dollar cost average um investment into something like rap bitcoin right you might have people sending funds into an llp pool right and all this this money starts just flowing around maybe being paid for subscriptions right and we're really excited about this idea of network cash flows so this is the kind of thing that you can help contribute to so shifting gears a little bit that's an overview of what superfluid is how it works if you have any questions please feel free to reach out to me or just put it put put a question in the chat and i'll see if i can get to it before this this workshop ends but in terms of this particular event i did just want to call out the fact we have 16 000 dollars available in prizes right we have a long list here i won't go through them but they range anywhere from one to four thousand dollars you can win if you qualify meaning if you use super fluid in some way and uh and build on top of us so we encourage you to build on superfluid obviously um and you know i'm excited to see what you all build so let's think through the basics here of actually building on top of superfluid right so there's a couple of things you might want to you might want to like either bookmark in your browser or you know be prepared to go check out one of them is the superfluid developer console right we'll use this today it's a really useful tool for writing subgraph queries that relate to superfluid and just maintaining and managing all of your streams another is the superfluid dashboard so this is like a no code way to manage streams if you want to create streams and new people you know it's a useful open source tool and you'll also probably want to use the superfluid sdk core right so we'll use this to write some scripts in a second but yeah this is this is very useful if you're just a front-end developer and you want to just integrate superfluid on the front end highly recommend using the sdk core and when it comes to interacting with superfluid we went through some of these concepts earlier i'm not going to go too deeply into these right now because we'll actually interactively go through them but again you need to remember you have to use super tokens when you're working with the protocol and if you're using super tokens that are wrapper tokens you'll need to remember that you'll have to wrap them and the function to wrap is called upgrade so if you have dye you want to upgrade it to die x which is how we denote super token dye you just have to call upgrade what happens is you're just minted a corresponding amount of supertow can die and if you want to unwrap you just call downgrade and the super token die is burned and you receive back the underlying asset interacting with agreement so this is how you actually would open up a flow this is what's happening behind the scenes in your case all you're going to have to do because we've built some helper libraries is just call create flow and pass in the token you want to use the receiver and the flow rate which is the number of tokens you want to send per second and you know behind the scenes what's happening is you're making a call to the host contract which is like the brain of the superfluid protocol and that host contract is then calling a function on the constant flow agreement contract which is the agreement contract that's going to mediate all the streams and then that's going to open up a flow between you as the sender and the receiver right so fairly straightforward there and if you want to actually see how this works right we're actually going to build something interesting i think um on superfluid in this short little remainder of time we have so the example i want to go through is this idea of what happens when salaries go on chain and and salaries are plugged into the rest of d5 right so we enable this idea of network cash flows and when salaries go unchained you can do interesting things like maybe borrowing against this future cash flow right if you're receiving a salary and it's on chain you have proof that you're receiving the salary why not be able to plug that into the rest of d5 right so we're going to go through an example i call the employment based loan right and this is this is just a smart contract framework for allowing dial contributors or employees being paid in a stream so people on our team are being paid in a stream it's an option we have as a perk at superfluid uh we're gonna allow people like that to borrow money against the stream right and we'll also go through like in our particular example the borrower is gonna put up some collateral just to make it extra secure for the lender but you can remove that if you want to if you want to fork this example so why is this example interesting well i believe and i think lots of lenders would also be partial to this belief that you'll probably be able to get lower interest rates if you're willing to tie your loan directly to your salary right if you can have a salary that is effectively just you know you have proof that it's coming into your into your wallet right and you can borrow money against it using it as a kind of collateral mechanism you can effectively just you know siphon off a small bit of that salary every month and have that just pay off the loan in real time and ideally be able to get access to better credit if you're just starting your career and have proof that you're receiving a salary right so then you know from there the salary itself you can you can turn into maybe you have some kind of nft contract that's plugged into the rest of d5 yeah i'm very bullish in this sector and there are a couple of companies even within the superfluid ecosystem that are attacking this problem as well so recall this this chart here right of like what what a super app is right we showed the programmability slide earlier we're receiving streams and sending streams out the employment-based loan contract we're going to use is going to be a super app right so it's going to receive streams and then based on things that happen with those streams it's going to create streams out to both the employee right who should be receiving a salary and the lender who just invested money and needs to be you know receiving interest payments for that loan so what we'll do is we'll build a factory contract which the borrower aka the employee will call to deploy a loan contract that has the terms of the loan they'd like to take out encoded into it from there the borrower is going to send a bit of collateral into the loan contract then they're going to have their employer send their salary into the loan contract and at first the loan contract is just going to send 100 of the salary coming into the contract straight to the borrower slash employee right so nothing really changes for the borrower right it's just a different address that their salary is coming from and you'll see here we have the lender in the bottom right corner not doing anything yet but the lender will do something in just a second but what what the lender is going to do is once all of this is set up right once there's collateral into the loan contract and the employer is sending funds into the contract the lender can then call a function on the contract to lend money which will then transfer the borrower amount right so how much money the the employee or the borrower wants to borrow directly to them and in exchange what it will do is start splitting it will split the stream coming into the contract from the employer such that a small portion of the salary stream is actually just sent directly to the lender right so they're being paid off for the loan in real time and the employee just receives a little bit less right in their salary so their salary stream will decrease a little bit and then what happens in the positive case is if the employee finishes paying the loan they can call a function on the contract to say hey let's let's close this loan the contract will look and see all right was enough money paid off to the lender if so fantastic let's close out the loan and 100 of the salary will be sent back to the employee all is good we have lots of smiley faces on the screen but in the bad case let's say the employee's fired or the employer just decides to be fraudulent and maybe maybe the the employee and employer decide to collude to try to like skirt around the system right and not get the lender their money the benefit of having some kind of collateral mechanism here is that the contract can just start streaming at the collateral to the lender directly right so what we do is we get a an updated price in stable coin terms so just in usd terms of what the collateral value is and we start streaming out an equivalent amount of the collateral token to the lender to make sure that they're getting something to pay off their loan in the event that something happens that's unexpected right so extra security here for the lender but i'll stop here right i might take a brief look at the chat and then we'll go into the code example itself so it looks like we have one question here in the chat uh from earlier in the call what happens when a wallet that has a streaming agreement has no funds is it up to the super app to decide so if a i think what you're asking here is what happens if a wallet is streaming money and then that wallet either runs out of funds or just doesn't have any funds at all well if the fund if the wallet doesn't have any funds at all the the flow will not even be able to be started right so there's a there's a check that the contract will run to make sure that there's some kind of balance in the first place if there's not it will revert but in the case that it does have funds and it just runs out of tokens the stream will be closed as soon as the balance hits zero right so when you create a stream you have to put up a small buffer amount it's only four hours worth of the stream right but that is effectively used as a an incentive mechanism for what we call sentinels which are participants in the superfluid protocol who close out streams and are rewarded for doing so right so the four hour effectively lock up is temporary and it's usually very small but it still serves as an incentive mechanism from ben m i'm a bit confused on how you update the balance of value without doing on-chain transactions can you help me understand that i think you use agreements instead of transactions so canal you're you're essentially right um the agreements have data in them on how many tokens a a given account is is either sending or receiving every second right so if we have that right if that's if that's written not written if that's if a transaction is written that has that like update the the value of how many tokens a uh a person is either sending you're receiving every month right let's say i create a new flow or i start receiving a new flow we can see okay this person's flow rate this person's net flow rate it's a positive 100 tokens per month if nothing changes throughout the course of that month and that person that's receiving 100 tokens decides to transfer 50 token to the end of the month what we do in that transfer call is check okay what's the real time balance of this user right we can see that okay this many seconds have passed by getting the blocked out timestamp value of right now as compared to when that last state change happened we can see that a month's worth of seconds has passed and that the flow rate didn't change that whole period of time so they did receive 100 tokens over the course of that month so if you have any other questions about that please feel free to just either reach out to me directly or keep putting them in the chat but for right now i'm going to go through the code example okay you got it thanks wonderful wonderful all right so if you want to fork this example by the way you can go to the superfluid github you pull this up here hang on just one second you go to our github and go to examples and this is the employment based loan example right this is what we're going to work through if you want to fork it more than welcome to we like you guys to make this better i'm sure some of you uh gas optimizers are better than me at gas optimization and things like that are doing interesting things so please feel free to fork it let me resume share i might have to just stop sharing restart sharing give me one second all right here we go so here we are we're inside of the the example we have this employment loan contract which is effectively the contract we're going to be interacting with we also have a factory so what i'm going to do is i'm going to deploy the factory and we'll deploy a loan contract which has certain parameters on it okay so let me go to my terminal here i have a couple of scripts written so one of them is just going to deploy the factory we're going to run this script this will give us some addresses we need to work with deploy factory all right so this will run here for us i have um some local variables here which represent private keys and things so we'll just wait for this to run for us we're running our deploy factory scripts we've got our loan contract and then we also need a basically just a mock chain link price feed contract as well which we're going to get there and we'll use that we need that because we need to pass that into the constructor as a as a variable which creates a new price feed contract which will run it it will be called um if we ever need to start streaming out collateral right so again it's just a mock right we just preset the value that we're going to get back from it but in real life we would just deploy we would get the real address from the chain link price feed so let me grab this address we're going to deploy the loan using this script all right have these here so i have in this section the parameters we're going to use so we're going to just pass in a borrow amount an interest rate number of months we're going to take to pay it back the amount of collateral we want to send the address of the employer address the borrower the tokens we're going to use so the the token that's going to be serving as the borrowed token which we're going to be borrowing in it's going to be die super token die and then we have a fake token i deployed called the friends token that's going to serve as a collateral token then we also have to pass in the host address which is the address of the post contract that's again the brain of the super fluid protocol the address of that price feed contract and then there's a there's because of some of the uh idiosync idiosyncrasies of the chain link protocol like price feed contracts we have to pass the number of decimals that we expect um to be returned on the the value of the price coming back from our price fee okay so i'm going to save this and we're going to run the deploy loan script okay so this is going to do is this is going to give us an address that we'll use to deploy the loan all right so again because of i guess i i need to get better my my promise chains here but i need to uh i'm going to run this again with this commented out just so i get the correct address so again i called this uh basically this view function to try to get the address of the contract right after this ran so there just wasn't enough time for this to actually be deployed but we have a contract it's deployed right here this is going to be our loan contract address that we'll interact with and so the first thing i need to do here is create a flow from our employer into this contract right so if you can recall back here step one we just did this we deployed the loan factory step two i guess we can send the collateral but before we send the collateral i'm actually going to do this step where i send money from the employer into the contract right so this is like you is the bar we're telling the employer to send funds into the contract okay so i'm going to run this create employer flow function make sure i have the right address in there move this around a bit so i can see okay so what this is going to do at first it's going to send the salary into the super app and then the super app is going to send 100 of the value of that salary to the employee right so this was successful okay and what i'm also going to do is run an approval script for sending collateral and we're going to go look at the stream itself while this waits to run so i'm going to approve our contract to take our collateral when we call our send collateral function so i'm going to call this borrower approval i'm in this right here loan address run that and what we're going to do is go look in the superfluid console which is quite useful as a tool you can use so i'm going to search the address of the loan and we can see that we are now in this contract here we have some streams make sure i got the right address here the loan address make sure it's correct i think i just use a different one so we have one stream coming in and one stream going out right so 100 of the value that's coming in is also being sent out which is what we want i'm going to rerun this borrower approval i think i used the wrong address for that all right so we're going to approve the spend here so when we call the send collateral function what will happen we're just going to check to see if the message.sender is in fact the borrower and we're just going to call transfer from on the collateral token which is going to be this fake friend token that i have so we're going to then call send collateral in this example here you run this okay so again all that's happening inside this thing collateral is i'm just getting the borrower as our signer i am then call i'm creating a contract object for the employment loan and then we're calling the send collateral function from our borrower okay so that looked like it was successful as well if i go to our contract address i can see that we have 100 of our collateral tokens here these were just sent which is what we wanted i'm also going to send it a little bit of a little bit of super token die at first as well so if you can recall i mentioned a little bit earlier that there's a small buffer amount that the sender of a stream needs to have up front right and uh i just want to make sure that our contract has has just enough of the token to open up a couple of new streams when the lender calls land right so the lender is going to call lend and there's going to be another stream that's open to the lender i want to make sure that our contract has just enough tokens to be able to support that right so ideally if the salary was streaming into the contract for a bit longer right this might not be as much of an issue but i just want to seed it with a little bit more funds okay let's make sure that works i'll refresh here all right getting our balances here yep we got some super token die now in the contract so now all i have to do is run an approval from the lender and then call lend and the whole process where our lender starts receiving a small bit of the stream will begin so let me approve from the lender right so we're going to run the lender approval and all that's happening here is we're just calling a proof on the fake die token so i'm using the superfluid sdk here where we're getting the superfluid framework object and then getting the super token using this load super token method which is pretty helpful and calling approve down here by creating this operation and running exec all right i believe that just worked and finally we're going to call lend okay so let me just paste in our address called lend.js if i go into the lend function i'll show you what happens what we're going to do is make sure what this check does is just make sure that there's actually money coming into the uh the contract from the employer we're going to check to make sure there's collateral if there's supposed to be collateral instead of the contract we then transfer the the borrowed token from the the caller which is our lender to the borrower right so the borrower gets their money and then we update the flow to the borrower such that they're receiving less money right a little bit of their salary is taken out it's siphoned off and we're going to create a flow to the message.sender here which is going to be our lender right and we're going to set that the the value of lender on the contract is not the message.sender and we're gonna get the start time of the loan just so we can always track to make sure that you know how long has it has this loan been paid off for and we can see how much the lender has received over time okay so if i go back one more time to our console i go into streams we should see something different here and we do right so we're still receiving a single flow from the employer and the stream has now been split right so this is now slightly less and we have a stream going to our lender right to pay off the loan so what would happen next is if i decide this will be the last thing we do so thanks to the global team i know i'm going a couple minutes over here um what i'll do is i'm just going to delete the flow from the employer so we're going to assume here that in this case our employee gets fired or the employer just decides to close the stream for some reason i just want to verify that this works right so that we need to make sure that if the flow is deleted right so there's no cash flow coming in anymore we need to make sure that the collateral token is being streamed out instead right we need to make sure everything stays solvent here all right so we just cut the stream all right hang on i gotta refresh one more time all right let's make sure this ran to the right contract might take one more refresh all right yep there we go so the flow rate going into the contract was indeed deleted you can see this is now zero there's now zero flows in terms of die going out of the contract and now we're streaming out our collateral token right so the if under the circumstances that the stream stops coming in we now just stream the collateral token out so that's the workflow there again it's a bit of a primitive for borrowing against your salary um and yeah that's the full walk to you you guys are you guys can be superfluid masters now so what i'll do is i'll go into the chat we'll answer some questions um and we'll we'll see if you guys have any anything confusing here okay so let me stop sharing and i'll answer some questions in our chat all right looks like i had an issue with github earlier thanks so late aka yao for letting me know and thank you for i'm omnifiance for putting the the link in there that was very nice is zapping possible with these rap tokens i.e if the employer pays in usdc and the lender wants die can we do use usdcxx to die in the in the ica contract natively and gaslessly so you you're trying by just swapping um from one super token to another you can't do that because somebody needs to be like on the other side i mean it's just it's just like any other token swap right um and what's happening with the wrap tokens is we're making sure that the the value of tokens that are have been wrapped is equal to the the number of tokens that's in circulation so if we started zapping across tokens it would mess with that accounting so we unfortunately can't do that okay i think one of the ideas on the idealist for the hackathon is to stream amm in which you could exchange a stream for another which would maybe correspond to what you were asking uh with oh you're talking about specifically probably with the the the zapping the zapping right of the tokens uh so part of the reason why that's on the idealist is because we want to see someone build that right we think that someone can use these super app contracts to facilitate the automation here and honestly there are some protocols that have already done it and got pretty close so there's a protocol out there called ricochet.exchange that is a dollar cost average investing protocol and what ricochet does is it allows you to stream i don't know usdc or some token into their protocol and they'll send you back rap bitcoin or maker or another stablecoin or ether in return right so we know that this method of streaming is possible we just want to see you know additional ideas and innovation on it right so if you want to build a stable coin exchange right like a curve sort of thing right using streams that's the kind of thing we'd like to see people experiment with this hackathon given that this whole event is all about uh d5 right is this an erc so we don't have uh like if you're referring to do we have do we have like an eip out for a new standard we actually we don't right now but we've thought about making one just to make it official and like instead of calling it a super token call it an erc something something something token um we've opted not to do that um just out of i'm not really 100 sure why but you know we've just called them super tokens and part of the way we explain it is just saying it's an extension on the erc20 standard what's the quickest way to get up to speed with the protocol looks great ben m thank you for the the comment we're glad you think it looks great we think it looks great too i'd suggest going to our docs right so um docs.superfluid.finance will be the place to start thank you yeah yeah beat me to it um and i would suggest depending on your level of skill and which you're used to if you're a front-end developer we have lots of sandbox examples using code sandbox you can just take and use on the front end um but i recommend looking at the solidity examples first and i can even if you want i can send you uh some additional content as well so if ben m if you want to hit me up in discord my discord name is right here and this is this goes for anybody else as well send me a friend request or just message me and i'm happy to go as deep as you want i have lots of resources i can send you above and beyond the docs if you like it it just might take some context on what you're trying to build first how does superfluid generate revenue does this cost to use so we don't generate any revenue actually we're just we're just building uh and our our philosophy here is that we just want to build infrastructure right and we believe and people that have like invested in superfluid believe that if we build really high quality infrastructure for real-time finance then it's going to work out for us in the end financially i wish i could give more of a complete answer than that but that's that's the best answer i can give you um our our product is really the the products that are built on top of superfluid right so if you want to build something in this event i'm more than happy to help you because this is like this is our game right we we love each global we love sponsoring these events because they they always bring good hackers here um and uh yeah if you want to build something cool i'm happy to help yeah created we we love you cree thank you all right cool awesome thanks so much sam that was yeah super informative i learned a lot i'm sure everyone did um thanks everyone for the awesome questions love the engagement um and yeah shout out sam and the superfluid team um so yeah as he said uh he's got the docs linked there but also like hit them up in the discord if you have any questions and yeah thanks for staying late everyone we'll see you soon thank you all this was fun best 
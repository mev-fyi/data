everyone pile in welcome everyone to the compound workshop um today we're gonna have a half hour workshop um we have adam here from uh from compound grads and the name of the workshop is building on the compound protocol we can ask everyone to um look in the chat and you can put questions in the chat during the workshop and we'll try to get to them at the end and again this will be recorded so if you missed something or have to leave um it'll be on the east global youtube right after this uh right after we finish here and at that i will uh let adam begin and take it away great thank you excited to be back at another eath online so i'm adam and i am the developer relations lead at compound labs i'm here to help you out with your compound protocol related development projects you can find me on twitter adam bravosa and of course on discord discord's the place to ask me questions related to development i'll help you out there you can add me and i will get back to you as soon as i can so let's talk a little bit about what i'm going to talk about today the bounties first and then i'm going to tell you about the compound protocol if you're not familiar i'm going to show you some developer resources and also do a little dev workshop so compound grants is an independent organization that funds builders like yourselves in projects that further the advancement of the compound protocol so even after this hackathon you can apply for a grant at compoundgrants.org to get your project funded and the bounties we have are the most innovative use case of supplying to the co protocol that is a three thousand dollar bounty there's also the most innovative use of borrowing from the protocol also three thousand dollars and the best most full-featured open source interface for the protocol three thousand dollars and if you do include your project uh having compound protocol in it but you didn't win the bounty you will win part of the prize pool which is also three thousand awesome so uh i'll give you a little bit of a primer before i explain what what the protocol is i work at compound labs and we're the authors of the compound protocol and the protocol is made up of several smart contracts running on ethereum mainnet since 2018. the mission is to create efficient algorithmic money markets so what gets me excited to work in the d5 space is that we author and continue to steward decentralized free and open crypto tools for everyone on the internet uh that has an internet connection uh this includes the banked the underbanked and also the unbanked so this is a huge amount of market share globally and if you think about it anyone on earth with a smartphone and an internet connection can use defy and use compound so historically we've seen interest rates for suppliers at 10 and even 15 on apy on usdc as well as the other supported assets and i love what we're doing because it's different from tradfi uh defy systems like the compound protocol are voluntary and code is law with defy you get decentralization and you get transparency unlike the centralized banking and financial systems so that's what gets me excited to work in d5 and also the ethereum space so what is the compound protocol if you're not familiar is simply put its crypto asset money market and we refer to it as the compound protocol it runs on ethereum it's decentralized it allows users to earn interest on their cryptocurrencies or permissionlessly borrow other cryptocurrencies so those are the two basic uses of the protocol for everyone earn interest on your crypto or borrow other crypto assets so uh it can only support crypto assets that are tokenized on ethereum as erc20s also ether so uh bitcoin is supported through rap bitcoin uh but assets on other chains do not work unless they're tokenized on ethereum so uh it allows uh suppliers to earn variable interest rate on their assets and an individual that uses an app like the ones listed on the compound home page at compound.finance they can use those apps to use the protocol or developers can use their own code to use every feature of the protocol and developers can build their own apps that use the protocol as interest earning infrastructure so that's folks like you in this hackathon you can build new apps that use the protocol so use cases we see are crypto wallets uh they allow their users to use the protocol for earning interest instead of having their assets sit idle in their crypto wallets and also businesses that hold funds for a period of time they use the protocol to supply and earn interest instead of letting those assets sit idle so i'll give you an example of supplying let's say you use one of the many interfaces for compound or you write your code to supply directly you can supply an asset like ether and you get c tokens in return so you would get c ether if you supplied ether so when a supplier supplies they get a fixed amount of c tokens and you can think of that as a code check for your underlying asset and as time progresses more underlying can be redeemed for those c tokens so you can think of it as time passing uh drives the interest that's accrued for the c token holder assets are stored in smart contracts that no individual controls uh c tokens are redeemable at any time so users can supply for as little as one block and interest accrues every ethereum block so nowadays it's about 13 and a half seconds and this enables on-demand supplying and redeeming from the protocol there's no need to wait for a lockup period you can earn interest by supplying to the protocol for as little as a minute the other major use of the protocol is borrowing so the protocol enables over collateralized borrowing of assets so an example would be you supply a collateral like wbtc or eth or one of the many others and you borrow a smaller value amount of die or or another asset so your account is over collateralized and in order to borrow a user must supply a collateral asset first and they can then borrow an asset that's supported by the protocol and the borrowed asset will be held in the user's wallet with no strings attached so borrowers earn interest on their supplied asset just like a supplier does however their borrowed asset also accrues interest as well in the the other directions so they end up owing more of the asset uh once they're done with their borrow so if the account becomes under collateralized like when the usd value of the collateral goes down or the borrower accrues too much borrower interest the users see tokens of collateral can be clawed back to the protocol when a liquidator performs a liquidation on the account so it's bad to get liquidated um supplying only is safer than borrowing you can't get liquidated when you supply only and there's much less risk involved when you supply only so that's a little background on the two major use cases of the compound protocol these are the currently supported assets this list keeps growing uh we just added four more recently in a decentralized governance proposal so pretty exciting uh most of these can be used as collateral almost all of them um there's a few exceptions but all the assets can be supplied to earn interest or borrowed so the protocol is controlled by decentralized governance so there's no one person that can control the protocol it is all through decentralization so you can check out the open source contracts on github or on etherscan uh governance is enabled by the comp token which is a utility token users can vote yes or no on proposals using their comp token so uh proposals are literal code changes to the protocol if you have more than 65 000 comp tokens you can create a proposal which is a little code change that will be applied to the on-chain protocol if it succeeds so this is the comp token it is the utility token users can use it to vote on compound proposals you can vote yourself if you delegate to your own address or you can delegate to another address say someone's more familiar with the protocol more active you can delegate your token to their address and your voting weight will be used in in the proposal so you can delegate to yourself or another address uh tokens are currently being distributed to users of the protocol if you supply or borrow you can earn comp token uh there's a four year period where the token is being dripped to users of the protocol we're currently about a year and a half in and you can get an apy on comp token if you use the protocol by supplying or borrowing and you can then participate in governance once you have com took so this is a little diagram that shows the phases of compound governance proposals created and there is a two-day waiting period where folks can review it check it for bugs check it for unseen uh consequences of the the code change and developers that have apps that depend on the protocol can make sure that their apps will still function once the new code chain is enacted after the review period is done there's a three-day voting period that is minimum three days people with comp tokens can vote yes or no on the proposal if the proposal succeeds it is put into the time lock for a minimum of two days so developers can make sure that their applications are ready for the new code change enact their code changes to prepare for the code change and once the proposal is queued and executed it then becomes part of the on-chain protocol code so here is an interface you can use to participate in governance this is at app.compound.finance of course one of the bounties is to build a open source version of the compound app it is very much welcomed to create as many interfaces for the compound protocol as possible it is uh made of smart contracts that are on ethereum mainnet so anyone can create a interface here's another cool thing we have a leaderboard of all the folks with comp tokens delegated to their address this is something that you can also build so developer resources we have docs everything is linked from the docs compound finance slash docs we have smart contract documentation uh api documentation sdk documentation uh developer guides open source code we got everything there so go and check it out you can reach us at compound.financediscord the whole community is hanging out there and you can ask questions lots of talented folks there can help you out we have our guides on the medium blog and also you can check out our open source code on the github listed there so take the opportunity now to screenshot this or take a picture with your phone and open the link to the github repository that i'm going to be working out of today this has the open source code that i'll be showing in a few moments and you can use this to go towards your bounty prize it is a little interface for compound that uses compound js and it's just a plain javascript html css app so let's check that out but before we do i just want to say one more time thank you to compound grants for sponsoring ethonline it wouldn't be possible without them you can go over to compoundgrants.org to apply for a grant if your project is relying on the compound protocol and furthering the compound protocol you are eligible for a grant head over there and apply for a grant so that's the end of my slide deck next we're going to go over some code so this is the repository that i wrote it is a simple app here's a screenshot of it there are a few features of this interface you can supply assets to the compound protocol using this little supply function you can borrow assets from the protocol you can see how much of an asset you've supplied you can see how much you can borrow based on the amount of collateral that you have in your account and you can also enable or disable assets as collateral using these check boxes so i'm going to fire up this app first going to take a look at the back end code for it it is a node.js app so what it does is use express and also hard hat to have a local host environment so the first major part is this this is a mainnet fork using hard hat so we take a copy of the mainnet blockchain and fork that to our local machine so we can do testing locally uh this this uses a hard hat you can check out hardhat.org for more information on how to use hard hat the next part is the setup of an express app this simply serves the assets in the public folder uh which is some html css javascript that's in the public folder here and the last thing this file does is it seeds assets in the local host account so we have a developer account uh mnemonic that's set up and when you boot up the hard hat fork of mainnet it's seated with 10 000 ether that's for development use on your local machine and this part sees it with some erc 20 tokens so if you want to use erc20s in your local environment you need to sort of steal them from a whale uh in your dev environment so that's basically what this function here does uh this only works on localhost uh we're impersonating using the hardhat impersonate account uh functionality and we're impersonating the c token addresses because they of course have plenty of erc20 tokens at their address so we're going to take 50 tokens and send them to our first account in our development mnemonic so that way we can use those in our interface that is connected to localhost so just again this file does three simple things it sets up a localhost fork with hard hat an express server that serves some static web pages and doorbell we also get erc20 tokens that are seated in our account so i'm going to start up this app in my terminal so i can start up with npm start that basically runs the index file and now we have our app running before i check it out i'm going to look at my hard hat config we are pointing to mainnet using a json rpc provider url you can get one of these from infuria.io or alchemy.com for free and you can fork the mainnet ethereum blockchain onto your machine using that provider url this is my development mnemonic this environment variable is the 12 word mnemonic and i use this for accounts that i use locally for testing the hard hat for config is here you set up your url you want to fork set up guest prices i have them set to zero so i can do things like move tokens from the c token address and also set up the development demonic this last part here is important uh we set the chain id to one the main chain id is one and metamask expects that the local host account is 1337. so when you sign transactions they'll fail so what we need to do is we need to make sure that we set metamask's chain id to one instead of 1337. now that my app is running we see that we forked mainnet using hardhat we set up our express server and we minted some well we moved some erc20 tokens 50 tokens to our wallet so if i open up this app in the browser here's the app i'm going to open up the development console just so we can see what's going on in there and if i open up my metamask um first i'm going to do that thing i'm going to make sure that my chain id sets i'm going to go to settings networks localhost and my chain id is set to one for some of you might be 1337 make sure you set that to 1 and hit save also we have 10 000 ether thanks to hard hat and another thing that i need to do is make sure that my non-semi account is set to zero this is something that you don't need to do on testnets or mainnet you only need to do this on localhost head over to settings advanced reset account so the last time i used this account locally my non scottish incremented in metamask so i'm going to reset it to make sure it's zero so our transactions will work now we're ready to go so if we look at our metamask wallet we have 10 000 ether we have 50 usdc and 50 uni thanks to our little seed function we have in the back end so like i said with this app we can do things like supply so i'm going to supply one ether and our each supplied will go up once we supply so i'm going to click that button and metamask is going to pop up a transaction gas is pretty high right now 55 to supply one ether i'm going to confirm so the console logs the transaction object and also the transaction hash if you're using this app with a testnet or mainnet you can check this out on etherscan to make sure that your transaction goes through as planned so this transaction got mined already when i refresh the page i should see an east supplied amount of one great so i refreshed i have 099 this is a javascript rounding issue that's part of the javascript language just have to deal with it so now that we have supplied uh we can technically borrow our borrow limits are still zero because we don't have any assets marked as collateral so what i'm going to do is i'm going to use this checkbox to mark my ether that i've supplied as collateral so when i click that check i get a new transaction popping up this is the enter markets function the compound protocol has two functions enter and exit markets for marking your supplied asset as collateral so if i enter the market ether is now counted as collateral so the collateral factor for ether is currently 75 that means that i can borrow up to 75 of my collateral in a different asset so once this transaction is mined it has been mined if i refresh the page i should be able to have a borrow limit of 75 um oh wait no that's not right uh of 75.75 ether that's right uh and usdc it's somewhere in the two thousand dollar amount right now let's try that out all right so we got yes .75 ether we can borrow the amount of supplied ether went up because we supplied to the protocol waited a few blocks so interest accrued uh so now that we have some collateral marked we can borrow an asset so we currently have 50 uni and we can borrow up to 99.34 uni we should go below this amount because if you borrow the max amount you'll instantly get liquidated on mainnet so let's borrow 50. it's a lot of gas and now we borrowed 50 uni so our our wallet should now say a hundred uni yes we have 100 uni awesome so yes this is uh this app it allows you to mark collateral borrow or supply and you can also see the maximum amount that you can borrow i forgot this part we can hit this enable ethereum button if you've never loaded the app before that will trigger metamask to connect your account to the app mine was already connected because i was playing with this app yesterday let's take a look at the front end code we got html css and javascript i'm only going to go over the javascript this entire app is only 271 lines of code so you can build a pretty feature full compound protocol interface with pretty small amount of javascript pretty awesome so we have a lot of helper functions but at the bottom we have the main function so i'm going to go over those first we've got a window load function so once the page has loaded we'll register that enable button so if the user has meta mask injected into their browser window will run this main function if not they'll see an alert that says please install metamask and once their wallet is connected they hit that connect button the main function will get executed here's our supported assets you could of course add to this if you'd like you'd have to edit the html as well uh these are our assets in our app first thing we do is fetch all of those dom elements like the buttons the text boxes and stuff like that we're going to get the prices from the price feed of the protocol so we can see how much liquidity we have when we mark assets as collateral let's take a look at that function we can use the window.ethereum provider that metamask injects we can get prices using the compound.getprice which is part of the compound.js sdk and we get the price of all the assets and we add them to an object so we can use them later next thing we do is get the selected account so whatever account the user has selected in metamask will be here and it gets logged to the console so up here is my ethereum address next we get the account liquidity this is a comptroller function that's part of the compound protocol you can check out that function in the docs here's how we would get read from the blockchain using compound.js this is a read function which will work for any ethereum contract what you do is you pass the address of the contract you can do an inline abi of the function that you're hitting with your transaction you can pass the parameters which is the user address see how much liquidity they have and of course the transaction uh parameters this is just part of ethers js the sdk wraps ethersjs and we get the amount of liquidity that the account has in usd scaled up by 18 decimal places so if we divide that by 1e18 we get the dollar value of our liquidity so that's how we're able to display that in the app [Music] next we have some setup functions for our dom elements we make sure that users can click on buttons and put text and text boxes the important part here i'd like to highlight is supplying and borrowing since those are the main functions of the compound protocol basically this function iterates through every asset that we're supporting in our app and it registers the button and the input and when the user presses the button we're going to run this supply function and what the supply function does basically is make sure that the user put a number in the text box and it uses the compound js sdk to do this one line function that supplies the assets of the protocol you pass the asset name the amount that the user wants to supply and of course this is optional here i put this so metamask can make sure that i have the right chain id when i'm on localhost and after the transaction is submitted we have the transaction hash logged to the console so users can investigate if there's some kind of issue and of course if there's an error we alert the user so they know that something went wrong so the inverse of supplying is borrowing with the compound js sdk it's it's easy again to do a one-line function for borrowing and of course for marking assets as collateral like when i click that check box there's another one line function for entering or exiting markets so if we check the box we're going to enter markets if we uncheck the box we're going to create a transaction to exit the market so that is uh basically the code of this app it's open source on github you can head over to github and clone it now and you can check it out and work on your projects for the youth online hackathon and hopefully go towards those compound grants bounties i'm here to help you out you can find me in discord adam b uh make sure you add me and i can answer your developer questions there that's that's all i've got for my development workshop happy to take questions now with the the few minutes we have left looks like we've got a question here from tunde od uh can you give a rough estimate of the amount of yield that can be earned on 10 000 usdc supplied only for one block or for the period of at least 13 seconds that you mentioned yes so for one block you actually wouldn't see interest earned you'd uh have a rounding issue with uh the c tokens so usually assets have more decibels than the c tokens c tokens have eight so if you only supply for one block you're going to have a rounding issue where you have like a hair less of the asset but if you supply for more than one block you'll see like a dust amount of uh the asset uh very very small like we saw in my app here so we supplied one ether and after uh i guess it was like two or three blocks we see this very very very small amount of ether so a dollar value of this is like many many decimal places of a small amount so that's a little estimate of how the protocol works the apys that are listed on the website are for of course a year of interest so if you go to compound finance markets you can see the current interest rates there and you can see how much you'd earn in a single block yeah you're welcome if anybody else has any questions uh you can ask them in the chat we have a another minute left why would you need a new open source interface so this is very important part of the uh decentralized decentralization of the protocol is uh to make it so uh there's no one central power controlling anything so if you have only one app for the protocol that would not be good that would be a centralization and of course uh us in the crypto community we love decentralization so having many apps that are supported there's less possibility of downtime less possibility of issues in the future so of course having more apps is a good thing of course if you have an app that has something you don't like you can make a new app and that would support more people and make more people happy uh yes all the assets are variable rates it's based on supply and demand of the current protocol so the rates change at any time yes a cheaper way to use any ethereum contract at the moment is to make sure that you use l2s for uh your transactions also um infuria has a service i think it's called infura idx something like that it makes sure that your gas price is as low as possible i think that's all the time we have for questions thanks everybody for participating and asking of course i'm available in discord from now until the end of the hackathon that was awesome thank you adam um yeah again we we uh want everybody to just reach out continue the conversation or question and discord and also reminder this will be uploaded soon to the um to the east global youtube so you can if you've missed any of this you can catch it there all right adam thanks that was awesome once again thank you so much you 
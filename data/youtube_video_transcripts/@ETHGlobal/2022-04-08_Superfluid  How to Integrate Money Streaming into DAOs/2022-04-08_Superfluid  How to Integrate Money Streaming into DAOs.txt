hope everyone's hacks project hacking projects are going well so far i know it's a really tight timeline to set up everything i want to thank everybody for joining us again uh we got an amazing session lined up for you today we're joined by sam from the superfluid team uh we're gonna be taking questions at the end so be sure to put your questions in the zoom chat below uh and we'll get to them right after the session but sam i know this isn't your first rodeo and you need no introduction so take it away thank you luke i appreciate it it's always fun to do these workshops i like i just want to echo that i hope all of your projects are off to a good start but i'm excited to talk to you about superfluid today so i'm going to share my screen and we will run through uh a little presentation for you here give me one second all right we're sharing now let me move this over i'm assuming that everybody can see my screen okay somebody just uh speak up if you can't luke speak up if you can alright i got the thumbs up that's good okay so what we're going to talk about today is how you can integrate money streaming into your dow operations that'll be the overall theme we're going to try to pack a fair bit in so we'll go through what superfluid is some resources i'm going to point you to to start building on superfluid for your project this weekend and then we'll go through a very simple super fluid smart contract that will allow you to integrate money streaming into some dow operations so [Music] we get into this here um what is superfluid right so superfluid is a protocol which supports what we call real time finance right and one of the things that you can do with superfluid is create digital native programmable cash flows right so we like we use stream money with no capital lock-ups so you don't have to lock up funds in order to stream money and you can do it in a way that's completely programmable and on-chain which is great for you all as developers [Music] so thinking more about this idea right part of what really excites us about superfluid is that we believe that the internet is to information what blockchain is to value right we're going to see a bunch of new use cases that are what chris dickson would call non-skeuomorphic right so brand new use cases that are specific to uh how money can move in a world where uh we have this internet of value and when it comes to cash flows one interesting thing to consider is that services flow in real time from a provider to a client and the payment should work in the same way if you're providing a subscription-based service or if you're providing your service as an employee you should get paid every second that you're providing that service and that's possible now with things like superfluid and with it with the money stream itself getting a bit more detailed on what it is and what it can do within superfluid a money stream is basically just a continuous payment that's an open-ended connection between two accounts again this provides a really cool direct link between value transfer and service provision and it also allows you to embed these kind of payment terms on chain right so if i agree to send you uh ten dollars per day indefinitely that those are payment terms right that is on chain i can i can use the graph and query that and probably have some kind of uh proof that that i'm paying you or you're paying me in an on-chain way that's verifiable by a third party and this helps because it prevents any kind of delays around payment risk during the payments process right we all might have an experience of getting paid a bit later than we should have or something like that superfluid can help prevent that [Music] so what is the protocol how is this working under the hood right so we have three high level aspects to the protocol one of them is the overall protocol like superfluid host of the protocol right this is kind of like the brain of everything we also have an agreement library which effectively encodes how the stream should work right so right now we have just a constant flow agreement which allows you to send a constant amount of tokens every second we have a new decaying flow agreement coming out which sends them kind of on a curve or exponentially the case that's the agreement library right this this um basically like like i said library of of different things that can mitigate value transfer and then the third aspect of the protocol that's important are super tokens so super tokens allow you to be able to calculate a real-time balance at any given point in time and what's happening is that the super token has a function on it called real-time balance of which allows us to calculate all of the incoming and outgoing flows you're receiving and combine that with whatever your static token balance is maybe you have 100 super tokens in your wallet we'll take that plus all of your flows into consideration and be able to get your balance at any given point in time right so again we can unpack this all day right there's a lot of depth here but i will leave it somewhat high level with that but what i do want to get across here is that this is all very programmable right you can create cash flow or smart contracts right i can send a stream into a super fluid contract right a superfluid super app as they're called and inside those contracts i can have callbacks execute to perform cool operations whenever a stream is created updated or deleted with uh with that contract is one of the receivers right so as one example what you could do is you could create something like a tradable cash flow where you send funds into an nft contract and then have that nft contract send 100 of the funds coming in to whoever the owner is so that anytime i transfer the nft funds are then sent to the new owner right so that's just one of many things you can do with uh programmable cash flows right and again these programmable cash flows are called super apps these are reactive smart contracts where you can put any arbitrary logic inside of these callbacks that can run whenever a stream is created updated or deleted with that account as a receiver okay so it's a high level overview of superfluid um getting a bit more tangible and specific for you now we're really excited to be sponsoring dow hacks the youth global team always does a good job with these events and we think superfluid has a lot of interesting overlap with dallas so in terms of our prizes we have three thousand dollars for the best overall project built on superfluid 2000 for the best super fluid application for dow finance uh 2000 for the best use of super fluid and nfts for daos and one thousand dollars for the best use of superfluid and another sponsors tech so lots of good prizes out there for you and lots of other good sponsors if you want to integrate superfluid with a different sponsors tech [Music] so building on superfluid right hopefully you're here because you're interested in building on superfluid in some capacity let's get into how you can do this um both with some general places you can go that might be helpful and some a bit more context on how things are working under the hood in the protocol and then at the end if we have time we'll get through a bit of the an example app that i've created okay so one resource that you definitely should check out if you're considering building on superfood this weekend is the developer console right you can find this at console.superfluid.finance it will help you to manage the entire development process right very useful another place you should go is the superfluid dashboard which is a more like visual way to create update and delete your streams right so you can actually perform state changing operations at the dashboard you can find that at app.superfluid.finance and then on the development side one thing you'll probably want to use is the superfluid sdk core so this is a really easy way for you to get started with superfluid in javascript or typescript and you can very easily create streams with a single line of code right so highly recommend checking that out and we'll use that a bit when going through our example app okay so let's look at the basics of building on superfluid right so what's actually happening under the hood when you are working with these money streams and programmable cash flows well like i mentioned earlier there are roughly three things to keep in mind when looking at the protocols architecture one of them is the host contract which is the brain of the protocol you won't really interact with this directly but it's good to know that it's there and basically controlling all the the high level actions taking place the second thing to keep in mind are agreements right so for working with money streams we'll be working with the constant flow agreement but we do have other agreements i mentioned the agreement where there's a decaying flow right that will be available soon but there's also something called the instant distribution agreement which allows you to send uh lots of separate transactions right now lots of separate transactions but allows you to transfer tokens to large numbers of recipients in a single transaction all right so we won't get into that today but i do recommend checking it out we have lots of good examples on it in our docs and then finally um you'll want to keep in mind that you'll have to use super tokens here right so in our examples later we'll use something called die x which is just a super token wrapped version of dye but again you can learn more about super tokens and some of the exotic forms of them inside of our docs as well but like i mentioned we're going to be using die right so if we want to get super tokens we know that interoperability is so important in our space right we are building money legos right not money silos and in order to get die you can just simply wrap your existing die to get the super token version right so you just call a single function on the diax contract that function is called upgrade and will allow you to upgrade your erc20 die to super token dot if you ever want to redeem those tokens for the underlying it's very easy to do that you just call downgrade and all of the super token dial that was minted to you is just burned and you get back your underlying your c20 asset so once you have super tokens you'll want to then interact with an agreement of some kind to create a flow and this is what's happening under the hood when you're making a call to the protocol right so we abstract this away from you using the sdk and some of our libraries in solidity but what's happening is you as the sender of a flow are technically making a call to the host contract right you're basically sending a transaction to the brain of the protocol and inside of that transaction you're telling the host which agreement i want to use and within that agreement what function i want to call right so for example if i want to create a flow i'll call the superfluid host contract the house contract will call the constant flow agreement and it'll say you know inside of the initial column made the host contract you'll be able to specify i want to open a stream of uh 10 die x per day to my friend right and boom this all this process all flows through and a stream is open from you to your recipient right again we abstract this away from you but i do i do just like giving people an insight about what's going on under the hood okay so those are some basics it's time to build okay so to give you a bit of background for we're going to build we need to talk about this idea of network cash flows and how they relate to dows okay so again as a reminder we enable these programmable cash flows and one interesting thing to think about with these programmable cash flows is what happens when assets can continuously flow through it through an organization in a very automated way right so if i want to make sure that my dow is budgeting correctly and i want to make sure the cash coming into the dao is being sent properly to subgroups and that those subgroups are able to send cash flows to their individual contributors how might superfood be able to help with that well we think that dow treasury management um could probably be done in a more effective and automated way and one way to look at this might be to use nfts and superfluid streams as a way to manage this internal budgeting right so you can imagine you know i have this good champagne visual for you here this i think is at least helped me when thinking through this example at the top someone's pouring the champagne into that top glass right you can think of that top glass as like the dow itself right so the dow not every dow uh has cash flow right but we expect as more and more dials are created you know there will be some form of cash coming into the dow what that dial that needs to do is easily funnel it to these sub glasses right so you can think of those glasses as individual working groups and then maybe at the very bottom maybe those are individual contributors uh to each of the working groups right in our example what we're to do is we're going to create a system to allow you to in uh issue nfts to working groups within within a dow and then every time you issue an nft that nft comes attached with a superfluid stream right and if i ever want to edit the nft as the leader of the dao so i'm sending less or more to each individual working group we'll make it easy to do that and we can also make it easy to merge and split those nfts into more nfts and separate cash flows right so we'll go through that example in a second but as a recap what we're going to build is a contract that stores and manages nfts that then manage the dao's overall budget okay we'll do we don't have a ton of time we'll do this in five or ten minutes but what's going to happen is the dow is going to make sure that funds are sent into this contract and the contract's owner is going to be able to mint new nfts to the addresses that manage the sub portions of the dow why is this interesting well again to recap dao is need an easy way to manage the flow of funds within an organization and it'd be nice if there was some kind of good accounting mechanism like an nft uh to do this right maybe they can be tradable right when you trade the nft it comes with the cash flow maybe if you want to sell a portion of the dow you just trade the nft and the cash flow comes along with it right you can get very creative with this so from an architecture point of view how is this going to look right so the dow treasury there is separate from our system but we can imagine the dow treasury as the owner of this budget contract here in the middle the dodge treasury is going to send funds to the budget contract and then the owner of the budget contract which presumably will be the dow treasury will mint nfts to sub-working groups okay so this is more of a textual recap here i'm not really going to go through this because we kind of just talk through it but what i'm going to do now is actually go through writing some code to do this and i do want to let you know that as i go through it we do have the example sitting in our examples repo so if you go to our protocol model repo right just look up superfluid and github product protocol model repo and examples you will see the budget nft example in there okay so we will pull up my code editor here and i'll more so just talk through the example just due to you know any interest of time [Music] but let me pull this up and let me make my font much much bigger for you one second here let's zoom way in that might be too much all right i hope the font is okay let me check the chat to make sure that no one has any complaints about the font uh just drop drop a complaint into the chat if the font is too small no worries but you'll see here that this project is pretty simply set up right there's basically just a single nft here uh our nft this budget energy.sol is a single contract here and we have some scripts that we can use to interact with this okay so this contract is an erc721 contract it's also ownable and what we're doing is allowing outsiders to come in and issue nfts we're not outsiders but the dow treasury is going to be able to issue nfts they'll be able to edit the nfts and then if we want we can also burn nfts split the streams into additional nfts and then also merge nfts into one okay so this is just good for overall cash flow management and what happens when i issue an nft so this upper level function is called you minimize this a bit [Music] which calls this internal function what it does is it adds we're basically storing what the flow rates of each nft are so we have token ids generated for each individual nft that's issued and what we do is we just have this mapping here that's going to map the token id to whatever flow rate was just passed in here we'll make an event when that happens and then right after we make this change inside of our contract storage we will mint the nft itself okay so we have the mint and then we also can see that we have this before token transfer hook implemented right so this is an extra utility on your c721 contract you can use if you want and what happens here is we get the old receiver new receiver and token id so that anytime i transfer the nft what we do is we can either increase the flow reduce the flow to make sure that the nft's the attached flow to the nft is being sent to the right person in the right amount okay so for example inside of increased flow let's go down a bit all right so if the the current outflow rate is zero right meaning there is no stream to this new owner of the nft what we're going to do is we're going to create a flow to the new receiver of that nft and make sure it's at the correct flow rate so you can see what this create flow is it's just a call to the superfluid host contract right and what we're doing is we're passing in the logic we want to call on the constant flow agreement contract so we're passing in the token we want to use the address we're sending it to and the flow rate and just for context the flow rate is the number of tokens you want to send per second right so you can learn more about how this call is actually working inside of the solidity examples of the superfluid docs right it's actually even easier now to create a flow like this because of the fact that we have a new library lets you do this in a single line of code but that's a bit of an insight into what's happening under the hood there so okay we have the issue nft function what about with an edit of an nft right so what happens when we edit is we just pass in the token id of the nft we want to edit and the flow rate so when this happens what we do is we at the end of the function just change the flow rate here in our mapping so that the token id is now mapped to a different flow rate and then we actually go in and either reduce the flow if the the flow rate is decreasing or we increase the flow if the flow rate is increasing okay and finally if we look at the split stream and merge stream what we're doing here is we're allowing the the owner of an nft to split their stream into like a set of sub streams right so this this is the use case here is i am a subgroup within a dow and i have individual contributors that i kind of want to effectively hire to manage my different aspects of of my subgroup right so i am splitting my department into individual contributors that i want to send the cash flow to we can do that using the split stream so what we're going to do here is take the token id that i want to split we're going to set the the new token flow rate which is basically just going to be how much i want both my original nft that i'm splitting and the new nft that i'm that i'm splitting it into how much do i want them to receive right so if i set this new token flow rate to be half of the flow rate coming into my nft now we're just going to get 50 each of that flow that was originally coming into the parent nft okay and then same thing here we're just we're handling things in our mapping and then we are either calling we're calling reduce flow which needs to happen if we are splitting it and we're issuing a new nft to that new owner okay so like i said you can go read through all this logic in detail inside of our repo i don't have time to go through every single line just due to the you know the fact that this is a 30 minute workshop but if you want i'm happy to spend time with you one on one and walk through how all this is working in solidity if you'd like okay so that's the contract i've also written a couple of scripts in my local environments to help us interact with this okay so one of those scripts is this script to deploy right so this is just done using standard um ethers methods right so i am just creating a signer here i'm actually using a super fluid the superfluid sdk to create a sounder but you can do this in ethers as well i'm using the ethers get contract factory here and making sure that it's being deployed from an account that i have the private key of we're deploying it here and then we'll just log it okay so let me run this script [Music] all right run scripts deploy budget [Music] nft dot js okay that's deploying can we deploy our own super tokens this is a cut this is a question coming in you can deploy your own super tokens you can actually either deploy a super token that we call a native super token which has no underlying erc20 asset or you can just deploy a wrapper on any erc20 token you want to use so if you have a governance token in your dial you want to wrap it's very easy to do that um i can actually at the end of the call i can probably quickly grab the link for you to with instructions on how to do that okay so back to our application here this budget nft was just deployed correctly fantastic so now i'm going to copy the address here so we can use it in some of our other scripts okay so i'm going to paste into this script and what's happening in this create flow script is i am sending a stream into the budget contract okay so this is important because the budget nft contract needs to have some funds to distribute to the sub nfts right so we're imagining that we're calling this as the dow treasury owner right we're making sure that funds are sent into the contract so they can be sent to the subgroups within the down okay so this is all set up here what i'm using is the superfluid sdk core to create a stream it's very simple to do so right all you have to do is call sf.cfav1.createflow pass in your receiver pass in your super token and pass in the flow rate you want to use and again the flow rate is the number of tokens to send per second in way okay so i think this is roughly one hundred dollars per month maybe more it actually might be more it might be like a thousand okay so i'm going to run this script now we'll create a flow all right and before i do that while this actually works i'm going to go to our superfluid developer console and show you how you can manage some of this okay so let me slide my browser over onto the page all right zoom in on it a bit inside of the superfluid console you can search any address if you want so here i'm at console.superfluid.finance let me just go home so you can see it i can type in any address in any network right so this is the address of the newly deployed token here or contract here rather let me search one more time okay we have an address on coven which is a test that i'm using i am sending funds into the contract which is great we see this that this transaction just went through correctly and now we have a flow rate of 333 dollars per day so this is actually much more than a thousand dollars per month this is quite a few this is more like i think 10 000 per month right so stream is being sent in now let's make sure that a stream can come out of this contract all right let's make sure that calling that issue nft function indeed does issue the nft and then also issue a stream to the address we're going to send that nft to all right so another script here inside of issue nft [Music] we're just getting the contract instance of the deployed budget nft let me make sure that i have the correct address here just copy this address issue nft i'll save that again all we're doing is we're just getting the deployed instance of that nft connecting it to our assigner passing in the address we want to send the t to and then the flow rate all right so let me run this issue nft.js all right so while this loads let me look back at our question chat no questions issuing nft from a contract and all right this transaction was also successful so if we want we can see the hash on koben ether scan if we want you head back up here see if it propagated all right looks like it's still loading what we'll see here in a second is that the contract will have not just an incoming stream but it will also have an outgoing stream there we go right we are indeed sending the stream to this address ending in 6b3 which is correct here all right so an nft was just issued and a stream was created that went along with that nft okay i have another script written for editing the nft i don't think we have time to go into it because i do want to open up the floor for a couple of questions but as a recap what we just did is we deployed a smart contract that is able to receive a stream and it has functions on it that we can call to both issue nfts that are attached with superfluid streams to them okay and there are ways to manage this within a dao if you'd like right you can edit the nfts over time if you'd like to you can merge them split them and yeah this is a good potential starter project for those of you looking to integrate super fluid functionality and things that can really help dowse on a day-to-day basis so i hope that was helpful i am here if you have any questions on this particular project and i'd love to open up the floor for a couple of questions while we still have a bit of time so let me stop let me stop the share and uh we'll look at the chat all right so we have a question is there a way to get streams some some to get streamed amount for some amount of time eg can i know how much i stream to address x in the last week yes you can so we have a our own subgraph deployed um and if you want you can not only just clear the subgraph which we have examples for in our docs but you can also use our sdk to ask the same kinds of questions right so you can add your own queries inside of our sdk let me send you a link to our subgraph docs though there's a good example in here okay current streaming time bias in your example is per second is it possible to do so in hours weeks or months so when you call the the function that will create the stream you do always have to pass in the number of tokens you want to send per second right if you want though we have some example formulas that will allow you to calculate what an amount will be per second based on how many you want to send how many tokens you want to send per month and a good example place to do that is inside of our docs at the bottom of our money streaming docs let me send you a link here you can type in an amount per month in way and just hit calculate and you'll be able to get whatever that is per second so use that example there that i just said without creating contracts can we use with api directly sending tokens in a stream and cancel yes absolutely so again let me send a link to this money streaming guide here which allows you to just create update and delete streams using just javascript in the front end right so there are three code examples you can take directly from this link and pull into your own projects can we set a limit to a flow good question so when you create a flow now it is constant and it is open-ended right so in order to stop the flow there has to be another transaction sent to do so there is a functionality being built into the protocol now by our protocol team that will allow you to set an end amount right which will automatically close but for now for the sake of this hackathon keep in mind that if you want to flow to end at some date in the future something is going to have to call delete flow or update flow at the end to make sure that stream's closed right if you run out of tokens what happens is there's a there's a network of what we call sentinels that are compensated to close streams that have run out of tokens right and what they're compensated with is an initial escrow or buffer that you put up when you create the stream so when you create a stream there's four hours worth of your stream that's taken up as a kind of buffer right if you close the stream before you balance it zero you get that buffer amount back and in most cases it's a relatively small amount right if i'm sending 100 tokens per month four hours worth of that is very little money however it's good to know that if you don't close your stream before your token balance runs out during that month or during during any point in time that four hour deposit is is taken so just keep that in mind all right where can i find the link to the github repo for the code you showed in workshop good question so let me send it here budget nft hard hat there's also a truffle version of the project if you'd like to see that but this is the hardhat version right it's just in our main github repo in the examples folder [Music] all right any other questions that i may have missed i've never used hardhat is it possible to deploy the contract using remix and then interact using a front end totally totally so what i'd suggest in this in that case is just to go into the contracts folder just grab the budget nft.soul and literally copy and paste that into remix that'd be one way to get started all right that may be it for questions one more one more question okay [Music] type type fast are the streams public yes so everything is on chain in that you know you can look it up on a block explorer or you can use the superfluid console to do each individual stream meaning like does everyone see the address sending and receiving yes yes right just like any other on-trend transaction right now um you know i mean obviously granted there are some zero-knowledge protocols in layer two starting uh most transactions work in the same way and that if i send you funds there's a transaction hash out there which shows that i sent you a certain amount of funds right super clear works the same way unless you know in the near future we're all able to deploy on zk sync or start net and make it all private all right thank you guys for some good questions this is uh this was a good time and thank you sam this was an amazing presentation i'm sure everyone learned a lot heading into this weekend where that knowledge is going to be really super valuable for them i want to thank everybody for joining us today and uh get excited for the kickoff in in 30 minutes looking forward to it one other thing i just want to stress is that if you're here and you made it this far and you watch the presentation we really appreciate it and i consider me as a resource all weekend for your projects hit me up anytime even if it's non-superfluid related you can find me in discord under this handle hang on let me put this in quick and we can jump it's absolutely right um make sure to continue the conversations in the discord it is an incredible resource as you're building your projects there's a lot of knowledge in there a lot of knowledgeable people like sam and the rest of the super fluid team all right y'all we're gonna end in the session here take care good luck this weekend look 
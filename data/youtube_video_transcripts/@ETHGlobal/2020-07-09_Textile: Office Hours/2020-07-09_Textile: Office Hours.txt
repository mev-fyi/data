and we're good cool all right I just said this but just with anybody who's on the stream this is the textile office hours part of HACC FS I've got a Andrew starting off the session with us and then a little bit later a few textile team members will join as well so all that names have started give a little intro and then we can have people talk about their projects any tough issues they're having and likewise go ahead of cool cool yeah so thanks everybody for joining us again maybe you'd probably just helpful kind of like kick off with a lay of the land remind everybody all the things that we're offering and then point out a couple people on my team that are already on the call and will join the call that are just like great resources in all the weeks going forward and then we can just jump into some common problems maybe it would be useful right now while I'm just kind of giving the lay of the land if you want to already kind of mentioned topics or specific or even specific questions in the chat and then you know if there's any kind of consensus around ones we can service those more more quickly and then just try to get to all of them and so let's see so quickly the land all the things that textiles trying to offer for this hackathon first one is all the power gate stack so if you're here for talking about power gate you're in the right place we're offering power gate in a few different ways obviously the open source stack run at your your own there's no closed source stack but the run at your own stack from github and on docker in docker images so anything you want to ask about that feel free we're also trying to offer power gate as hosted instances sync to test net and so for those of you that are building teams and need things from test net and you're having issues syncing yourself or worried about resources to do that we're going to be offering help there so if you don't talk about that totally open a chat about that and what our game plan is there in timelines we have a number of teams that I've already signed up to get access to that so if that's you let's talk about that today we also are so then on the textile side of things we have threads and buckets which we gave a workshop on the two days ago and so if you want to talk about those happy to jump into that we have the textile hub which offers hosted api's we're pushing threads and buckets and things like that to ipfs for persistence so if you have questions they're happy to talk about that and then that brings me to the last kind of piece of the offering which is we have a we have a future version of the hub that we're giving everybody at HACC FS access to early which is purely experimental beta stage connected to the power gate so you can push buckets to this experimental hub do everything you would do on the normal hub but also be able to store those buckets on file coin and get deal information about those buckets being stored and we'll add more features over time to that so that kind of opens up everything just one note about the hosted Bower gate were in kind of a warm-up stage for that getting a node connected to the test net and test everything out it looks like all everything's green lights this morning so I'll be sending emails to people that signed up with details to help you get connected to that this weekend if you're going to be working and then for the alternative hub this feature is to cub we haven't shared the details to connect to that yet but we will be sharing those either later today or early tomorrow morning so basically everything that you do with the hub CLI or the hub javascript libraries buckets or threads you'll be able to do against this this future beta version by just changing an API endpoint and so you can already start using the existing kpi's and hubs and then convert over to this once we give you those details there's a bunch of strong warnings with that one just because is very beta and it is running on test net that don't do anything that you that you need for production don't store any sensitive data important data data that's not yours data that's illegal let's just have fun with it and same thing with the hosted power gate instances like let's have fun with those if we find people not having fun with them then we'll just have to lock it down more and be specific about who were working with on those things so that all said let's open it up some questions I see one already from you from our from karate about design patterns oh and then I see one of eyes allow to talk totally allowed to talk this is in a presentation mode I was just kind of given the lay of the land so we all know where we could jump in but about the design patterns do you want to say something more about that karate you're muted you can unmute you definitely don't want to give me the router on you why so why's this is you guys all know me default mute like series of ex-girlfriend's king vouch for that I'm gonna type in there what I put I'm not expecting to answer all these but I type them up so I could paste it and make it easy but I have workflows user works looks for the app and I'm also happy to contribute to your box if you want me to write a blog whatever I'm happy to contribute these kind of things I'm running into you I've made some questions around business community planning how we're gonna host this long run not because you know not because I love decentralization right but we're gonna need that aggregator so we need to know how I'm backing in this up and how I can support my users so I'm sure when I deploy this app that I'm this platform I'm deploying that I can support it then the next one was I have a whole bunch of user signup workflows right most of them are pretty basic right now which is click the link user puts their address into my react app they get the link from hub right and then they basically click it and then what happens if their machine gets wiped out their iPhone Android gets wiped out then the next one is grouping content by bucket by or so that the encryption keys like you designed it so I could do my monthly right each month I get a new or bucket and then when they pay they get access to it which is as you know my hack and then the final thing is smart contract aetherium interaction so this is I'm leaving this open for the next four weeks anytime anybody wants to talk to me about it and I would be happy to write it up and publish it or make a pull request to your dogs yeah super so I can so I can kind of answer to those pretty quickly and then to them are obviously like complicated and probably probably nuanced pace on what you're imagining so maybe we can just set up some time to chat through those like specifically and then figure out your use case because a lot of this stuff is just early testing so it'll be based on like what do you need and then we can plan to build it too so so for let's start with the number four so smart contract etherium interaction we haven't done a lot there but because all this stuff is based on IP FS there's a lot of good there's a lot of good documentation about how to use IP FS content addresses hashes in smart contracts so anything that you do there should be compatible with the things that you're doing in textile especially like bucket IP NS addresses I think are pretty interesting and useful there so that you can point to dynamic datasets that are signed and and have this and have this address that you can reference in in smart contracts but you'll be kind of on the forefront there so like we'd love to know what you need there and like what's tricky and we can try to build documentation around it and then just share with other people how you're doing it what solutions are I know a ton of stuff is possible there but yeah you'll be kind of kind of on the frontier so then number two user sign ups that workflows yeah that one's really interesting so we have a lot of our documentation we built around yeah just the on-demand key pair public public private key pair that you create in the browser and your user gonna have and then and then you hit the api's with those identities that's just because we're really identity agnostic we haven't tried to solve any identity things at textile specifically we say like whatever your app is using for an identity should just be able to be able to use that against the api's and so we have some basic examples of how to use say identities in like a three box profile we're talking right now about trying to get a meta mask basically you could let somebody use their meta mask public key and you like that one okay cool so there's just one little hang-up there I think about the basically our typescript types make it tricky I think but we can we'll try to solve that pretty quickly otherwise that one should just work out of box so what you would do is you would I don't think that in meta masks it's like straightforward how to get the public key but I've seen that it's possible to get the public key just by kind of parsing one of the other outputs from one of the api's you get the public key and then it already has a built-in signing endpoint and that's all you need to hit to hit the user group key API or the API with the user group key so you say like this is a new user with a new public key and then you provide that with the signing challenge and they should be good to go are you unmuted no we need karate back I mean I talk to myself and I don't why you guys here and you saying yeah and like stuff like that but like so do you guys work with either's this I saw your library does it work with ethers so I could use ethers in my react app to pull the address from the person's browsers does your library work with that yeah yeah I started working on an example to do that like just two days ago and that's where I learned about this type ms/ms mash and so I think I opened a ticket on our on our one of our J's repos to fix it so we're looking to do that pretty quickly like you know before the end of this hackathon for sure we're gonna have a example of that but hopefully pretty quickly of how to do that so just stay tuned and I'll share it in our slack channel for sure once we have a meta mask example up there so then the other two yeah the business continuity planning need to learn more about what your thinking there and like what you need from us documentation wise and everything and we can build it for sure happy to work with you loses the phone or basically chase counts or wants to give it to their girlfriend boyfriend dog cat wants to be able to read the subscription how do I imagine track there's keys for because I just don't that friction I've lost like we've all ever been on here is lost while it's before you know we've all either tokens lost in the world of crypto out there every honest call and so I want to make it easier because I'm trying to onboard people wanted to decentralize web and they don't understand man it took me years to really get to so this is me signing and all that so that I need to have a good story not for beta sure I can throw something out and it could be this horrific experience we're all used to but I'm not really completing the hackathon if that stays yeah personally finishing I mean you know I'm missing the goal yeah yeah okay let's keep talking about that because I think there's some neat solutions out there that other teams are working on and so just figuring out how to pull them into the into the workflow should be cool and then yeah and then number three so you yeah we already have that at the developer level the org the org level or so like you can invite other other developers to buckets and even to threads and they'll have complete access to the ones you created the developer level but then users that you on board with the user group key we don't have an org level automation and so it sounds like yeah that's what you want and so let's just talk about that because I think that's a pretty common one we just haven't gotten there so cool let's bring those those two to like continued conversation so next one implementing a simple blogging platform yeah so this one's just an app architecture question and I don't have a good answer for you about Ivan Ivan architected blogs and posts and likes and follows with with threads or actually any technology before I think it should all be possible but one thing that we could do there is like if if I have a sense of what the architecture already looks like in your head without threads without ipfs like what are the what are the connections and what are the kind of models that you need we could easily kind of work through that and and say like what would be possible and what we could move to threads or buckets or other like just pure ipfs or purely p2p to make that possible but it's not it's hard because this is pretty I mean a content management system with a kind of social network on top that has likes and follows and personal feats and things pretty pretty complicated so any more information you can give us they're happy to like dig in and help anything else to say about that one I can't Alex I was so implemented the sort of social network protocol on substrate blockchain and then and then destroyed content on a BFS but all the structures watching and the linkage on blockchain so authorship who created what blog and as the post was posted and here is the comment was this post and here is the list of opposed Ono's for this post everything is on Shane and I'm thinking about he performs like maybe not linking post and calling some lights on Shane but just showing the block like registered on Shane and permissions and then okay cool recreate the same structure that is DB so we need to follow and we need to link post to a blog the link and optionally another parent post in this way we will get three like structure of comments and then likes from be linked to posts and shares should be linked to tend to log so okay I have an idea for you at least to get started the likes and the share those kind of like derivative that derivative model that's trickier but as sort of like the first step I could actually build that with buckets easier if I were you so what I would do is something more like in in the on chain piece I would point to the IP NS address of the blog and that IP NS address could be the IP NS address of a bucket which is living in a thread and so then the author of that blog can push new posts to that bucket and it will update automatically people who resolve the IP NS address so I did an example of this you could do it in threads as well but you don't have to you could just do pure buckets and so I did an example that has a data model kind of along the lines of what you could do and it's in our it's an art Docs it's this photo gallery example and in order to give a user a kind of nice photo gallery publishing experience they actually just write a JSON file to the root of their bucket that keeps an index of all the photos that they upload to the gallery and so they have control of new photos they're adding to the bucket but then they can publish the IP NS address of the bucket and the HTML page can just look at that index and selectively load photos so you could imagine a an alternative way where the blog they just keep an index of their blog posts in the same bucket they're putting the content of each blog post maybe that's just markdown or whatever and then when somebody goes to look at it at the IP NS address the HTML can render based on that index so that that HTML file could grab you know the time ordered ones I mean you could be building the when authors write in a new blog post they could be updating search indexes and all those sorts of like comment you know you see in Jekyll and Gatsby and Hugo kind of generate the content put it in the bucket update that index and then people can go look at it and since buckets are buckets our user already authored by the user by the user they could just be that could be the verification step itself so that could be a really interesting thing to look in into if you go pure threads you kind of be doing similar things but but you wouldn't get some of the nice like automated gateway rendering and things by having the buckets which are are fundamentally they're like UNIX FS folder structure can ask additional question to this if you're thinking about at least some like miss follows and it's like they need similar structure so they should be mob the block is a key and there is a list of followers and then post is another post ID is a key and there is a list of the same thing than just true false so something about yes yeah she is a hostage and civilian is a list of followers or list of likes dislikes so every post that they put so if you do it with the bucket structure you're thinking like basically inside the bucket you might have a folder where all like just like any kind of like web web folder architecture you might have a folder that has all the posts in it well every post is gonna be a leaf in your in your Merkle tree so it will have its own IP FS address as well and that's immutable that that will always be there and so that could be that should be the ID for the map what's really cool is then you can reference it in on the blockchain as well and so anytime that there's this social piece where it like people are saying I liked this post to me that feels a little bit like that should be something on chain because you're gonna because that's going to handle kind of who has sort of the permission to be to be saying I did whatever or like this is really my life and so that could basically be they could have a hash that is that exists in some some blog ID and they could say I liked this one and then you could just look at that map anytime somebody goes and they they look at that blog post they could also look at that current map and you could figure out all the people that have liked or followed or whatever that specific blog post yeah but it sounds a little bit not optional because if you look at social networks and Zemo like some comments rather than read posts so in this way you might just shoot that is would say five ten percent of all the content and like is maybe put like on unblushing it's quite expensive thing I was hoping to make it less expensive too I guess I never was thinking is it possible to say McKinsey say like yeah this market or something and then he collects what why what he liked what he disliked and then so some sort of some sort by - just an aggregator all the likes from Holzer users that he this service can find for this post so that seems doable - yes you'd have like every every user is like and maybe in their own feet of likes but I feel like oh yeah I mean that would totally work but then you just have this a inverse scalability problem that every user needs to go look at every other users feed of likes in order to figure out if the one post they're looking at has been liked by all the users we don't have anything we don't have anything at textile that like makes that easy that you could like roll those all up some sort of like MapReduce at at the network layer I think it's a really interesting idea I just don't have a good easy solution for you it could be some sort of centralization in this but at the same time as cars from the present adjacently it's it could be a problem of end-user application so end-user application knows who are the users of this network a blogging platform and then here also the data from the from Jenkins and do not reuse and you can see the likes on this post is it sound good yeah I mean it seems like a good starting point for sure and then we kind of probably like yeah see how it scales on the different angles of it um Philip I see or Trent I see you say J can go next yeah I was just trying to get an order going okay yeah J go ahead I think you're unmuted yeah um are you hearing me yep hey Android sort of high level quick question of you actually cool so first first I'm looking I'm reading about of course file coin and ipfs and I'm reading about textile and I'm reading about fleek and I just noticed today that truffle announced that they're going to be using textile under the covers and what they do and I'm just wondering is it this is kind of like a stock emerging on top of this on top of ipfs and I'm I'm a little confused as to where an application developer would sit in that stack like should I be looking at couple or should I be looking at textile or ipfs can you just help me get a yeah sort of understanding there yeah so I know obviously I just know kind of what why I know a lot of where text ipfs fits and and where text outfits because we build we build entirely on top of IP FS truffle I know probably about as much as you do but let me let me let me kind of break that one off real quick because I think that one's easiest is basically truffle the only thing that they're doing with the textile stack is they're using some pieces of the power gate to make it easy for people that are doing smart contract development and have been building on a theory and building daps already can use some of the nice services and api's that the power gate delivers so I think if I think it's like if you're an experienced sort of aetherium gap developer you're probably gonna go to truffle because you've probably already been using it and I think that's a great way to go they don't have threads or buckets or any of the IPF Essex trap abstractions that we've been building and so then that comes to textile what we're building so we think that like we've been kind of thinking of what are some of the common patterns that developers need when they're building applications and two really common ones are you need to synchronize data like whether that's metadata application state messages all those kinds of information the light information that usually you move around in a database it gets tricky on ipfs because the first thing you have to figure out is how to manage a lot of content to dresses so you're moving around a lot of addresses and if you're adding encryption you're moving around a lot of addresses and keys and so threads sort of simplifies that it just gives you a useful API to to not have to think so deeply about that but it's under the hood it's all IP FS and so if you don't need it the way that we've kind of formulated that opinion you should go right to ipfs threads also bakes in some live p2p things to help with the communication between peers so Peter Luhn p2p is an amazing library so if you just want to have peers sending messages back and forth that's obviously a place to go you don't probably need full bake threads when we build threads we also realize that people quickly wanted to move around larger binary files or they wanted to attach things yeah and so that's where we built buckets we were like okay there needs to be an easier way for people to create for holder's as there used to them of files and have those synced to different nodes and so that's what buckets does which it did so I'm sorry so my application is maybe a little bit different because I I hear you guys talk about the ability to change this data over time but my data is frozen solid as a rock and it never changes once it's created so I think maybe some of your features are maybe not applicable to my data because it doesn't change quite so much it doesn't change amber once it's created yeah so the only thing okay so if you're you if you were using data that you never want to change in buckets the only feature that it has the couple of features that it has that are really nice for you is that it's really well it's meant to help you push your data to two remote nodes so if you need to do persistence of that data so like if that data is being created in the browser where that session might go away but you want to push it to a remote node that it's gonna be persisted as the same thing with the same hashes buckets can help out there but some companion services like pinata so if you want to go straight to ipfs and just create those hashes and push it to a service like pinata you can get the same thing you're just not going to get that like folder organization and a buckets also has like the IP NS addresses out of the box and HTTP addresses out of the box so they're just kind of like nice helpful features but if you don't need those things then you can go straight to ipfs and you can get hashes for the files you're creating you can push those hashes if you need to get them off device you can push those hashes to other services as well so like any pinning service like pinata I understand completely thank you and one very quick question I know I'll be done is there a JavaScript library for using your stuff I imagine there must be yeah yeah totally I'm pretty straightforward how to use it it's basically put get and list or something like that yeah push pull and list yeah exactly I got you all right thank you I have to get off the call but thank you so much yeah absolutely who's next I don't think anybody else is raise your hand oh okay so just for reference if I've ever suggested people raise their hand is a little thing underneath the participant tab it's kind of it's not immediately obvious and it might be different for nom host but it should be somewhere in that area and you can raise your hand through that yeah and in previous sessions we've had people like literally waving but when I say raise hand that's oh wait am i fill so was that you okay there we go hi I'm trying to build a lyric sharing application and so the idea is that you know users connect they see the same lyrics at the same time you'd have a controller there's essentially three three sort of different apps one would be a database for storing lyrics in which could be shared between a group of people who can edit it another one would be a controller application which is a group of people who could decide which song is shown next and which verse of that song is shown next and then a consumer application which only just shows like the verse which a song is on at the same time I've been sort of playing around with lib p2p and ipfs building it just rolling my own pub/sub stuff with it and so I I think I'm doing okay on that though the nice thing that I'd see with in textile is the ability to get the as soon as somebody logs on they could get the current verse without having to get the pub/sub message and I've got a bunch of questions around basically how textile is doing things so am i right in thinking textiles database is a log of data basically and when somebody the database is based on the log so when somebody comes in it reduces that log to get the current state so they essentially have to get all previous messages to get to the current state is that right or is that not right yeah there's some there's some minor details there that are slightly different so just because it sounds like you're interested in the deep down the way that threads work is every peer actually is its own log so every computer is a single writer log and then yeah and then that reduce step pulls all the logs from all the peers to bring up the latest date we have some consumer was getting that they then have to pull in the whole history they wouldn't just get the current song current verse yeah we have some work outstanding to do snapshotting and so that's one of the coming features where a peer would be able to jump in and just pull the light a snapshot to just yeah right to the little great to the newest um and could I get a feel for sort of what the latency is it's pretty the wrong word using textile versus doing raw p2p lib p2p stuff mm-hmm I'm kind of looking for about a second of delay it needs to be less than a second basically put out half a second so yeah i think i think lib p2p probably i mean depends what you need exactly limp p2p is what threads use behind the scenes yeah it's a much overhead on top of the threads is adding to live p2p or well the biggest overhead might be the encryption step so like everything over threads is going to be encrypted so you're gonna have those the speed of encrypting in and speed of encrypting out so that could cause some latency if you're using threads with the hub I see your question first question - can I use threads to be without the hub you totally can you can use the go as limitation to run your own Damons you can connect other go instances to Damons have them run their own embedded the javascript version it runs best against icing so there's an embedded one i could run in the browser because I'm wanting most of the application to run in a browser on a phone and really not have hosting services or things like that is that so we've been implementing it in phases with go being the first and most complete so everything is possible in the go side with the JavaScript side we split it into two parts there's the database and then there's the networking side and for most networking on the in the JavaScript library it pushes that to a remote node the reason that is is because expecting peers to be able to connect and find each other and stay persistent in the browser is really tricky and so when we said it's like let's not tackle that right away in our implementation instead connect to other nodes and ask them to do networking for the browser and so for that you can use a go daemon you can use the hub and then we'll be back filling that as we go and adding more and more than networks so if I would using textile for the viewing songs part of it it would all be routed via central via servers basically yeah but I don't know this I don't know how rather than web RTC yeah I don't mean centralized it's more like there's gonna be a cost in it if I'm using somebody servers or I'm gonna have to host something myself I'm you're trying to do something that I can scale it absolutely yeah yeah knows I think that's true but I think there might be networking already some networking already in the JavaScript library Karson hasn't joined the call yet but let's come back to that question and ask in a little while what the state of the networking is in the browser because you might be able to get away with some of it like it might already do I know that he was planning to put the little p2p push-based okay this is let me let me actually explain this really quick because it's pretty nice so in threads one of the things when we were experimenting building apps in ipfs and using lib p2p one of the things that we found with a database that's really important is you want peers to be able to not only have to push and this is what you mentioned before like you come online and you have to wait for somebody to push this day out to you that's great but it's really hard in mobile networks and on in browsing browser networks where peers are ephemeral and coming on and off a lot so you actually want as you want peers to be able to also pull and so in threads every peer also becomes a pull endpoint but you can also designate remote notes to be deaf pull endpoint and so so that that's like a that's one of the things here and so what with the network inside of JavaScript I think it might already have the push-based built in so it would already do what you're doing which is other peers can push their updates to other peers they know about but it doesn't have the pull because that's that's tricky in browser still and so we're kind of solving that one but I might be missing so let's let's revisit that one when Carson comes back online and say like I'm thinking where texture might fit most for me is in like the song database and and what I'm wondering if that would lean most towards being buckets water was being thread DB and the kind of thing I want here is I want a pool of people to be able to edit a group of songs and that database should essentially be private between that group of people you can have some people who can read it and edit it others who can just read it and then the general public you can't see it at all so that's exactly what we're building in threads but that that's another piece that that that is a more sort of a more complete ACL which has those different roles and we haven't we haven't been able to implement that yet it's just piece that we keep back logging and keep back logging for other features and every sprint it comes up that it will be the sprint we do it and then we don't get around to it so it's coming soon to be able to have yeah read write just read private but so right now buckets can get you to those really easily which are you can have the people that are able to read and write the buckets and then you have the people that can just read it so if you publish it and it's open you could publish be yeah the IP NS address for example see presumably if you encrypt the data that you're you're writing then that gives you if you just encrypt each piece then you can have some key which is only known to the totally readwrite totally but so one of the things once we implement a CLS and threads that will also trickle into buckets because they run on threads and so you'll actually be able to have buckets that are encrypted but you can actually provide read endpoints for those buckets for the public but that's coming so yeah and your trajectory is towards something that could just run in the browser in the future and there's no dependency on yeah with the API key thing is that centralized completely the API key or for the hub yeah love is a centralized thing yes yeah and I can't do anything without hub really or I can use threads I can use thread DB without hub can I yeah yeah yeah yeah so our goal is to make all of this um this is probably just useful to restate for the people here like our goal is to make all this very open very interoperable very run it yourself but a couple things we think like I I kind of think strongly that services like the hub aren't going to go away but the lock-in behind them your motivations to use them who's paying for them those will change and so we really want to build the hub as a resource to help applications be able to onboard to these things quickly without say having to force all application users to have to run their own IP FS nodes that's a really good like so we did a lot of mobile development where maybe that's tricky you don't want to have a ipfs note that has to do the full networking and all that but you just want to push that to remote services so the hub is a good resource there but we have open protocols like like threads that are built on ipfs and the p2p and the idea is that other services should be able to implement those things too or you should be able to stand up your own services to do those at the same time we want to backfill a lot of these protocols that they can run in a more and more decentralized way as we move forward but if we try to engineer them in the purely decentralized way right away they're going to be broken and we're gonna have a very hard time getting apps to actually implement them and what we want are we want all the web to apps in the world to come build on this stuff right we want everybody to say oh actually giving users control of their data using encryption having open protocols those are all really good things we want in our app but we wanted them to be performant and work today so we're we're starting with getting things performant and working building on the right sort of mission and vision and ideas that we can spread it out more so I mean and if I've got questions of and building stuff out is there a good person I can contact during the hackathon - yeah we're all thinkin what's the best channel to reach you is it a slack or the yeah the slack support textile team is awesome place where all of us are there listening the team is Ignacio sander Aaron and Carson and myself and we're all there all the time so yeah just ask away thanks a lot so just a quick note Trent said to raise your hand using if you go to participants and click raise your hand you can get next Austin yeah I mean it's mostly useful for like when you have a ton of people and it's just a way just because sort out with a group this small shouldn't be an issue Austin go ahead mm-hmm looks like you're unmuted but we still can't hear you might be a permission sting for audio good better there you go okay okay yeah I wrote about big part but I think most of it was answered there as far as what's gonna be available just in the browser without having anything installed the key feature I'm curious about whether or not it'll ever be doable in the browser is large-scale encrypting of buckets because if you have like a folder with even just a few movies of a few hundred megabytes each will a browser be capable of encrypting a bucket of that size it's a really good question one thing that I'm not I'm not probably the right person to answer this I'm guessing don't know if I've seen Sandra pop in here so we there's a really good thread in that let me reshare it in well actually just ask your question in the sponsor Channel and and I'm sure Sandra will jump in and get you some thoughts there we were talking about that recently like how you would but not browser-specific but how you would handle say like large-scale encryption of of like a video and one thing that we want to do is add like streaming buckets support and I think some things like that could help within the browser you just be having to encrypt smaller chunks of it at a time but I'm not sure I'm just not the expert to answer that one do you need to get unmuted again Austin yeah Trent can we unmute him yeah thank you and then the the other part because I'm gonna be encrypting the buckets and trying to decide between your guys's hub tool and then the space Damon from fleek as to which one to use they seem to have a very well defined API and then I think your your command is the hub buck in it - - key and then there'd be further things to do on that when the basically which one do you think is the most well developed as far as like single access tools for just defining this as which is the cleanest API to use and and I know that you work for textile and all of that but yeah I know I mean I mean we work really closely with fleek so you're talking about their their space tool that they that they've been talking about yeah so I think the biggest difference there is that space is intended to work locally so like if you if you want to run a if you want to build a desktop app or you want to build a system that people can install on their computer that the space node essentially will give you access to buckets and things directly we've been talking with them too so that when you do that you could give it a flag that would let the user push those updates to the hub for example for archiving and persistence as well I don't know the status of their development there but if you want to use if you want to build browser applications or even if you just want to use the buck instance itself you should definitely just use textile so it's just a dependent just kind of depends on what you what you're building and where your app should be installed and things like that cool anybody else you also just have open discussion it doesn't have to be a specific technical question Andrew I know you said you were expecting other team members to join you know if they're still going to joiner they weren't joining us because they were on another call so I'm guessing they're just still chatting away over their summaries I see I see Aaron's here Aaron is one of our power gate experts any power gate questions in here hey where's Austin Austin Oh should be good yeah actually it's not so much a question but if I thought I had well I think it was phil was talking about making this as scalable as possible with zero cost and my hack dealer to karate z-- were check for something on aetherium for a purchase and then share an encrypted bucket with the key after the check succeeds but then what that all depends on whether or not the hub's there or other users so it's on the topic of power gate they once you push something in a file coin that way that might be the best way to do it because then it's there it's behind a bit of a pay wall because then you need to do the retrieval cost but at least it's there and then if you want another further layer I don't think it's doable yet but it's it could be another whole hack project is a crowd store or store together that way you would have a contract for all of the users pull money together to maintain that that one bucket or whatever on file coin or through party at all times but I think a couple more layers need to be developed for that yeah that's awesome that actually so that's um that's related to the this future hub version that were sharing with you all I don't know if everybody caught that idea but you can take buckets and you can push them to new deals on the test net once you do that you can take the deal away from the hub like you can take all that information away and you're not locked into the hub at all you like you said there's some cost to go retrieve it from the file coin Network but it's yours it's like there's nothing we can do ever that would stop you from getting that data back so that's really cool and so that will be the buck archive commands so you can do that through the CLI you can do that through the JavaScript library so you can build this great buckets for users or do that as a developer push them to the hub call this archive command and get the file point information back I see a question here from karate are you going to offer hosted power gate as a service long term we're not sure yet we were definitely doing it in the near term so throughout the rest of test net we're going to be spinning up power gate instances for teams and offering help the idea there is to work with you all that are part of the hackathon as well as teams that have received grants from file coin already that sort of have the momentum and will to actually build interesting things on power game and we just want to help get more people on board it to the ecosystem and try things out and if you know some team some teams just don't have the resources to stand up nodes on file coin yet and maintain syncing and that's something that we do all the time on our team now and so we're gonna offer a hosted power gate just to help those teams get api's and start building faster but long term plants we're not sure yet we'll probably use that as a test to see how well it goes and see what kind of demand it drives and see what's there whoo and I see Carson hi everybody double-booked myself this morning but person I I already have a question for you it was from before because I wasn't sure the current state of networking in JavaScript threads the current state of networking and JavaScript threads yeah the thoughts behind doing any lip p2p push based networking in threads yeah we really want to get to that there's a couple of things that have to have that in order to do that and I think what we're gonna do is roll out a sort of like staged upgrade of that so we'll to get a full-blown pure JavaScript threads daemon essentially is like quite a lot of work because threads supports both push and pull and pulling from a browser peer to another browser poll peer is effectively like you'd have to run a server in the browser which is not a thing that happens so we have to come up with ways to send shouldn't proxy those poles but what I'm going to start with is basically like a pub sub based like layer that then will allow us to still do pushes and pulls through like remote network and then we'll start to upgrade to like full IP FS are full the p2p based pushes and pulls but it'll take a little bit of effort and then not at that stage you'd have like browser to browser pushes and poles which is pretty magical and we have prototypes for that working now and it's just a matter of kind of rolling it out in a sustainable and scalable way cool ok thank you very much this is Jay I've got a question so our team is running our gate excuse me an AWS and we're also running have an AWS and I've got hub running on a Raspberry Pi I'm trying to get power gate running on a Raspberry Pi and I'm having some trouble with probably the go path but I'm not up to speed enough on go path really troubleshooted at this point without probably some time so anyway I just wanted to throw it out there that we're building a lot of things on Raspberry Pi and if you know people see someone else who's running power gate on Raspberry Pi if they could connect them with me I would really appreciate that or throw it into the chat session some sort of linked you know posts and so forth tutorials that would be most helpful so yeah that's that's magical that's crazy yeah we also you know I'm also interested in anything else that can be stood up on a Raspberry Pi like somebody posted that they connected a terabyte drive to a Raspberry Pi and they're supposedly mining file coin but I thought it took like a 128 gig of RAM to run a to mine file coin but anything like that is really really of interest to our team so yeah yeah super cool I think that's really interesting I can't wait to see how you do it we'd love to add any of the instructions for successfully running stuff on resurrect ID to Doc's or at least link to it if you have write-ups on that stuff that would be awesome I think that's really cool so I see a question here can we push custom objects to buckets I've only seen images into buckets in workshops and documentation that's just cuz images are cool but no the documentation has an example where we push images in folders but we're also pushing JSON files that track metadata about those images you you it can push anything it's there just UNIX FS file structure folder structures so anything that you save on your desktop you should be able to push to two buckets but also Aaron just posted something in the chat there which is very relevant which is you know it's totally fine to mix data types in a thread slash bucket as well so you might have binary stuff in a bucket and structured data in thread DV and the neat thing about buckets is that it's also on a thread so it's really easy to mix data structures and types in a thread like that thanks karate nice seniors always I was just goodbye to him we don't have to leave he said goodbye on the job any anymore I see Alex is raising a hand I was thinking about this post and she said we can use poast file body identification but I think it's not optimal because then we cannot have updates and if you need to change a char than every single broke so what if I have a folder each post and session D could be something like body and images or meet a number of images yep just a quick clarification there already yeah you don't have to do the the hash of the post directly you could actually do the path address under the IP NS address itself and since its IP NS that the content that is in that path could be changed by the owner so post could be just one two three and just increment in that number is it folder yeah I think a model would work like that Obama's for example you can have a subfolder yeah I think that I think I would work yeah for sure and put about resolution I I've been seeing something for any examples that I've been doing I I haven't seen more than twenty seconds or so but I have heard worse I think a lot of that and proved quite a lot with 0.50 release and beyond in ipfs so I'm just quick fYI I have to jump off here in two minutes if people want to stick around maybe Carson could you take over and just follow up just answer any more questions yep I can hang around for a little bit here super or I don't know if Trent we need to we need to stop here we've got a little bit of buffer after this people solve questions we keep going Alex I don't know if you wanted to keep keep asking though I didn't mean to cut you off I [Music] says to be is it running on every side so every user has its own stress to be if they're talking about Saddam's accuser says to me what's architecture here yeah it depends on how you wanna on how you want to architect your app and how and like what what they're using threads TV for so you can use a like local first offline first thread database which is a database like import database from threads and effectively what they have is like a local database that's like in their browser cache or if it's another node app it's you know on disk and any write reads and writes are happening local first and then flushed to the network and so in that case you basically have like in replicate replicas of that database and that's how that would work alternatively you can have you can use like the hub textile hub to create an a developer account and then in that situation instead of having like n replicas you basically have like one replica on the hub scoped to different users so it really depends on sort of what you're using it for and how you're using it and the hub is designed to be pretty flexible so you could have like n databases scoped to each you like one database per user effectively or it also supports like a multi writer scenario or sorry sorry like multi tenant scenario so a single writer multi users in that situation you might you know that might be an app where you've got like public comments so you have a single database with a comment collection and you might have multiple users but they're all effectively being written or they're proxying their rights through like a single developer user so it really depends it's designed to be pretty flexible and to match like actual database use patterns that different developers have so the answer is it depends which is an annoying answer I know but you know it depends on how you want to structure your application one of the coolest things I think about decentralized tech is when you start to is when you start to get there like in replicas scenarios which is which is pretty powerful but it depends what's realistic for your app there is a second courtesy if you using this central starting to write comments you can run into well so we do have support for like different types of conflict resolution if you're using the hub we have like a default codec that is used to manage like concurrent rights and it uses basically like an arbitrary but deterministic ordering for updates but in that scenario you could have multiple users like mod mutating the same object so you know the application would have to be like any database you know the application have to be designed to to avoid writing to the same object at the same time but if you have this sort of like single writer multiple database scenario then that concurrency issue kind of is handled because you get you can take advantage of the codec to actually do the conflict resolution so again if you use a centralized database you're using a centralized database and so you've got to deal with that and if you're using in databases then you have n databases that can sink and then you have like to deal with that so it depends on you know at what end of the spectrum do you want to deal with things do you want like immediate right consistency on your application if if you set it up so that you have a single thread that's that end users are writing to then those n users will be eventually consistent and they will sink yes depending on network connections and things like that it could take some time for them to all sync to the same state but eventually they should sync to the same state example of for example every user has its own database and send notification to some arbitrary service that I modified in my system please pull this data and aggregate it on your site I mean in order to implement something like MapReduce there's every user I mean that service aggregates data from all the users databases by every user much voices chance I mean just change well the way you might do that is that you would actually have like you would actually just your you know whatever you want yours the service that you want to do the MapReduce would itself be a peer in that Network and so when that peer sinks because the all the peers like if they're sharing and they are like known peers they will notify each other when an update happens so you could just have that reducer Pierre let's call it that'd be a known peer in the network and then when any other peer makes an edit they will push their edit over to that peer and then we have some like notification api's so that as soon as an update from the network layer is detected it's pushed then you could kick off that Map Reduce step on that particular peer and you can also set it up so that that peer basically also pull polls so that if you don't want to rely on pushes you can also pull from known peers so you know like in a common scenario for that would be like you know us you might have like a set of peers that are all writing you know environmental data to a given thread and then you have one peer that's actually responsible for like aggregating those results that peer would be an additional peer in that network and then on every update that peer may kick off some particular job next be you know Map Reduce step or something like that but just to be clear all the peers are synchronizing the full database state so like queries and things like that are not fully distributed the queries are based on what the the peer knows about so saying if for example every user has let's say [Music] [Music] well no the peers will only notify the well I mean I know it depends on how you set it up but the peers only notify each other of changes and only diffs gets sent across so the diffs would be applied locally so you it's a very small like the updates tend to be fairly small the full state sorry when I say the full state I mean they're just like arriving at the same full state locally but they're not transmitting the full state [Music] look at something like this again I we don't have an example of a sort of that particular scenario of a single like Map Reduce a situation like that but we do have some great tests in our go implementation that shows like spinning up multiple peers and synchronizing across those peers some eight or even more of a go person or JavaScript just trust okay yeah I mean I don't we don't have a specific probably for like spinning a test of like NP r--'s synchronizing the the go exact an put you to the go examples well it is possible I just don't have any examples yeah I mean so the best place to jump to go there is just well our Doc's honestly have been updated pretty recently so Doc's textile dot IO and then if you go down to like Bill there's on the left hand side there's building building an app I think there's a pretty good like getting started framework but then the if you want to dig into the repose of the JavaScript repos then it's github calm hold on I'll just type it in here yes threads this is a place to go and just for reference there's the go threads one so go is always our reference our reference implementation and then JavaScript is ahead and it's on some things and bind on some things but in general the reference implementation is go and the JavaScript implementation is the like nicer API I mean that's coming from someone who likes to write JavaScript so we do get that question a fair bit and the answer is we would love to but we just don't really have to like human resources to devote any time to that right now but if it's something that you're interested in I would love to see a ticket or something like that and either go or the Jazz threads repos that would help us to prioritize that kind of work so that that's the real answer to that question you and I want to highlight this anyone else I mean I'm happy to keep taking Alex's questions here but also if anybody else has questions I don't be shy these are good questions so [Music] don't be shy any other ones Alex any examples of real almost real world applications I mean you can just a couple of examples in that folder and it's it may be I don't know something like how would you say something like what there is audio source I don't remember exactly I don't have an example like that I mean we have examples of non blockchain apps so like if you're familiar with any type which is a sort of like notion type framework tool that's built on threads DB fleex product launch just recently spaces is built on threads and buckets we do I know there are some examples of other teams like sapien is building things with threads they that's like a blockchain ranking rating framework I think that's more of a Bitcoin thing though and sorry there's people in the background here and I don't know I'm blanking on other examples off the top of my head but in the theory of space I'm not like well I'll try to write I'll try to come up with a little you should have a list but I'm just blanking right now I'm not off the top of my head I just say I'm just something that is working and we can create understand that it works and then it's easy to see how it's implemented in sources yeah yeah I mean the other one of our own products that is a useful and to look at is buckets which is implemented on threads so you could see one like how we think you should you might want to architect an application so that's github.com slash textile io / textile and that's our like hub buckets implementation so that's an application that was built on top of threads I think we may have surfaced all the questions that people have for this session go ahead oh oh I thought we had enabled the the unmute yeah so I just wanted to find out what happens so for we user creation and like group creation and things it's that always free basically is that and where are the users kind of so if textile disappears do our apps keep running or do they stop running great question so textile everything text our build is designed to assume textile or one day not exist so yeah and I think that's kind of everybody's goal in this space right so we have a pretty agnostic like identity agnostic treatment of users so as far as and it depends on what you're doing right so if I'm thinking about the API keys here that I'm generating basically so I'm using the CLI and I'm getting group keys and these things that's yeah that's to use the text like textiles hub infrastructure yeah so it's like that is if you want to use the hub then we need some way to track usage and stuff so that's how you are you know think about here is like if I've got my decentralized app and my users are trying to create groups and things like that for themselves to communicate with each other they somehow having to interface with the hub in order to create these groups is that how they do that if you want them to if you want them to use the hub which is basically like you're always on a cloud-based infrastructure then you'll have to go through the hub but yeah everything that runs on the hub also runs like on a desktop or on a on your own threads daemon if you're the developer and so if you would rather your users use like the local oh no I think I lost you I hope I didn't are you still there oh good okay yeah I'm still there so if you'd rather your users be like connecting to a like a local desktop peer where they have full control over everything then that is also a possibility yeah so it's like it's designed to be a hybrid network so if like doesn't exist they'll still be able to like access their data create groups and share data etc with other peers it just works better when the hub is there because you've got that always on peer just like why when it's ipfs it's useful to have like a painting service because you know at least someone out there is pinning and storing data and is online yeah and this is like this is not a textile question this just might be something you know can you subscribe to an IPS name update so i think i pns is using IP FS pub/sub or liberal p2p in order to do it's kind of it's sending updates to transparently update these records is there any way you can hack into that and actually be informed when a name is updating cuz I couldn't see anything in like Lib Pete's in IPF SJS that enabled you to actually listen to those updates so it's almost like if I wanted to do that I have to poll locally to say has this changed but yeah well that's a good question so with the so IP NS recently added support for like propagation over pub/sub hmm which means it's using pub/sub which means yes but but right now that's handled sort of like seamlessly like if you have the pub sub set flag on but since it is using pub sub it must be like publishing on a particular topic so by looking at the source code we should be able to figure out what the structure of that topic is and then you could subscribe to that topic over pub sub and then yes exactly cool yeah so the answer is I'm not totally sure off the top of my head but for sure it's possible yeah thank you yeah and then I mean just to like self promote if you're using threads it also does all of the like notification of changes over pubs emcees yeah so subscribe to in me I don't know does does the Jas ipfs does it also do i pianist offer pub/sub I don't know if he mentions it so it's got things like you can see you something you can get some stats on what's happening without actually being having something to subscribe to which seemed to me to be the useful thing right you know you may have to yeah we meet you meet you'd probably have to figure out what the likes the structure yeah yeah and can you view that it is why shark the wait no it wouldn't well I mean honestly you could just look at the yeah you could just look at the code I'm sure it's like a structured you know it's probably the IP NS at it might just be the IP NS headdress I mean that would mean yeah yeah thank you yeah anybody else all right gonna make sure I'm not missing any other raised hands I think they're all clear this has been great a lot of really good questions have you been able to have Carson stick around for a little bit extra yeah oh he's back he's gone he's clapping oh he's clapping okay thank you those kudos to the team thanks everybody we'll see you same bat-time same bat-channel next week right yep I think that's cool alright see everybody in slack 
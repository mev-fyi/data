way all right so i'm operating with the assumption that you guys can see my screen frank can you give me a thumbs up because i can see you okay good all right so what we're going to talk about today is how you can use superfluid to build with programmable cash flows and nfts at the same time so the beginning of this presentation will just be about what superfluit is um how you can use it and i'll go through a couple of examples in our docs about how to play around with super fluid and then i'll quickly walk through some actual live examples using nfts and then open up for q a i'll try to do it quickly because we don't have a ton of time but uh yeah if you have any questions just feel free to put them in the chat so what is superfluit um superfluid is a protocol for digital native programmable cash flows um it allows you to stream money with no capital lock up and everything is programmable unchained and what we like to think about super fluid as is what um like kind of what the internet did for information um blocks change is doing it to value and one thing that the internet did to information is it allowed you to stream it in real time super float is doing the same thing but for money and for value uh more broadly um we believe that payments should work in the same way that services work right they've flown in real time from the provider to the client and and money should be able to do the same thing um so what is money streaming um money streaming is the process of creating continuous payments between two accounts um we allow you to create a like a direct link between one account and another and send value in real time um in an unchained way you can also do things like embed native payment terms into digital services and the nice thing you get when you put these these agreements on chain is you avoid delays you avoid on payment risk like i know fran from our team likes to talk about an example of you know him having to wait three to six months to get paid doing past jobs that's something we can eliminate using things like money streams so getting more broadly into the super fluid protocol or not more broadly more specifically in the superfood protocol like i mentioned everything is on chain these are agreements that um take into consideration um two users and allow you to create a link between two potential users or more so what we do is we use basically time as an extra variable to calculate once you set up a money stream between two accounts how much money has one user sent to the other over time right so you can define a flow rate meaning how many tokens you want to send per second to a user and then we just use like the block.timestamp value on chain to calculate that for you in real time um so that everything settles and there's the proper accounting for each user's balances and uh what this does for us is it allows us to create a nice modular layer here which is upgradable and eventually extensible through governance that we have within the protocol the other thing we can we can do is create programmable cash flows right so the the little subheading under the title of this was creating programmable cash flows you can create things called super apps which i'll touch down very briefly later that can react to streams that are sent into a contract you can do interesting things with callbacks there and it's definitely worth experimenting with them along with nfts so getting into uh quickly i'm taking a quick detour into uh the prizes for this event um we have some ideas for how superfluid can be used along with nfts we have a couple of articles you've written on this recently we have an examples repo in our repository example section of our repository and these are the prizes we have for the event so we have two thousand dollars for each each prize uh one for the best financial innovation using superfluid and nfts another for the best coordination mechanism using superfluid nfts um one for the use of superfluid in either digital art or gaming and then another for the most futuristic project built on superfluid because we're not going to sit here and act like we we know um everything that's going to be created using some of these new primitives but getting more deep into how you can actually interact with the protocol there are really three types of contracts that you as a developer would need to interact with when creating money streams or dealing with super fluid one of them is what we call the host contract right which is kind of like the brain of the protocol itself another is agreement contracts so you have something like the constant flow agreement which is going to facilitate money streams you also have the instant distribution agreement which can facilitate mass payouts um and the third type of contract you're gonna probably interact with are the super token contracts themselves so i'll talk about super tokens in a second but you should know that if you're not a developer or if you uh you know maybe aren't as confident in your developer skills you can use the superfluid dashboard to interact with the protocol right you can very easily create money streams from this dashboard you can very easily get your own super tokens through this dashboard um it's very easy to do that however if you are a developer we have other tooling for you like the superfluid developer console that you can access at console.superfood.finance um and that's worth playing around with if you're trying to create actual applications on superfluid so when it when it comes to dealing with things that we're we're taking this on a lower level now we're going to get more into the developer side how you as a developer can interact with the protocol um what you need to interact with superfluid agreements if right if you want to create super fluid money streams or use that instant payouts feature using the instant distribution agreement you need to have super tokens to do that so super tokens are really just you can either create a native super token that has these special features lets you create money streams or you can wrap an existing erc20 token um as a super token right so for example if i want to go get some super token usdc which is or super token die which is denominated in the little x symbol at the end of the normal ticker symbol you can go to that contract and call upgrade to get some super tokens so if i have die i can go to the super token contract for die x i can call the upgrade function and then what what's happening there is i'm just going to deposit some tokens into that contract right and then it's going to mint me an equivalent number of super tokens so if i have five die that i want to wrap then i want to upgrade i deposit those into this contract and i get five super token diamonds in return the inverse of this process is the downgrade function which just lets you burn those super tokens and redeem the underlying tokens back right so it's a pretty simple process if you want to then do things within the agreements themselves right so if i want to create money streams themselves what you can do is interact with the protocol on the low level in this play so anytime you make a function call to the superfluid protocol to either create a money stream or deal with some of those instant payouts like i mentioned earlier what you get what you need to do is first call the superfluid hosts contract that i mentioned earlier that host contract will then call the constant flow agreement contract for you and open up your money stream now a lot of this can be abstracted away using our new sdks you don't have to know how to make this call in low level solidity although we have examples in our docs and that you can find in our examples repo for how to actually do this i'm not going to get into the solidity specific examples too much today though just in the interest of the time it's really much easier uh to just use one of our sdks to create these streams so today in the interest of time i'm gonna kind of skip over some of these super app examples um normally i would go through like what a super app is how you can do really interesting things in solidity with programmable cash flows i will skip this for now though and i will just point you to the super apps section of our docs if you're curious about this but we're gonna we're gonna move over this and get into our sdk and some other things but the the thing that i mentioned earlier around just very easily opening up money streams using our sdks um you can find some interactive examples on this inside of our docs so you see here just a few of the functions you can call using our sdk to either read data about money streams or actually like like write transactions um using the money streams and what i'll do is i will take a quick pause here go to our docs and show you where one where to find them so you can play around with them yourself and two just kind of how they work so we'll do this now and then i'll quickly walk through a specific nft example and then we'll do a little q a so let me stop my share and just open up a new window here all right let's go to our docs i'll expand this so you guys can read it i hope this is a little more readable i guess i'm not even sharing anymore am i now we're sharing again if you guys see my screen frank can i get a thumbs up if you guys can see it all right wonderful so this is our our new interactive section of our docs around money streaming you can come here at docs.superfluid.finance and head to the money streaming section and what you see here are a few examples of using our sdk to interact with the constant flow agreement so if you want to create a flow you can learn how to do it by coming to this first section here so we have this nice code sandbox up where you can kind of push things to the side if you want to see how the code actually works and i have a very simple react app up where i am using this logic here to create a flow so i'm creating a transaction object here um using this sf.cfab1.createflow function i'm passing in an address is the sender i'm passing in a recipient who's the receiver which i'm just going to enter in this box over here i'm passing in a flow rate which is the amount of tokens per second that you want to send to the recipient and it's denominated in way and then i have the super token that i want to use and here i have just the address of diax on the coven testnet so you don't have to really enter that in if you come to this example we have the sender address hard-coded and it's unlocked so i do have like like a signer created right with this with this sender right don't take all of the tokens from this uh this example right they're all fake test tokens um but you can enter in your own address here and create a flow from this hardcoded address to your own address and then see how this works so if i enter in an address here i have this preloaded i don't think i have a stream open to this address already but i guess we're going to find out i can enter a flow rate which is then converted into how much of that token per month is actually being sent maybe i'll add one more zero here so it's roughly 25 per month then i can click this button to create a stream all right looks like i already have a stream open to that address so it's going to revert for me but what i can do is grab a different address and this should work so let me grab a different address here in my accounts copy this i can paste this in here and click to create a stream all right so you can see that that worked i have a message here that says you just created a money stream you can view the stream at this link and just some more data around the sender receiver and flow rate for that stream so if i open up this superfluid dashboard now zoom in a bit again we can see here this is the address that's uh unlocked for us let me refresh and we will be able to see here in just a second that new flow created so you can see that that address that i'm sending from is this one here which is the same one we see up here and this is the stream we just created so i just copied and pasted in this address and now we can see that there's a new money stream open here so boom we've just created a money stream now if we want to update that stream we can do the same thing here where we can just pass in that address again enter a new flow rate and it'll update um and that function looks very similar to the create flow function where the only difference is update flow instead of create flow and this will revert if the stream doesn't already exist so don't try to do this with the stream that already exists otherwise you'll get an error message and then finally down here you can delete the flow so if i want to delete this stream let me go in here and copy this address and we'll make sure this gets deleted all righty looks like we got a little error message there let me refresh this code sandbox sometimes these uh get a bit buggy when you can find them to such a small space but let me paste in this address we'll click this looks like we're having an issue with that we still have to check after this ends but the idea here is you can just use these very simple operations to create updated delete flows so this sf.cfav1.deletflow will delete the flow for you and yeah that's how you can manage that flow creation updating and deletion process so i highly suggest going here to play around with this this is a good just learning exercise for you to to get an idea of how this works and then also just copy paste this code or fork the code yourself for your own projects so we'll pause there and we'll run back to our presentation alrighty let's go back into our slides right you guys just saw a quick little run through of using the core sdk um with the last five or so minutes that i have what i'm going to do is just walk through the logic behind an example that you can create on your own and i'll make sure that you guys get the links to these examples to play around on your own i've got both the remix just for you and a a repo that you can check in our examples section of our repository so i'll run through the example itself i'll get i'll point you guys to the links actually interact with it and then we'll get into a bit of q a so before i talk about the example i want to talk about a few high-level concepts that are also interesting to consider when it comes to super fluid and how you might be able to use superfluid to help and not only superfluid but also nfts to help with uh dow coordination mechanisms um one thing to consider is this idea of networked cash flows so not only do we enable this whole concept of streaming money and programmable cash flows but the more of these money streams end up in existence the more opportunities there will be for them to connect with each other and create this really unique network right so for example i get paid in a superfood money stream i take a portion of that money stream and i send it to ricochet exchange which is a protocol for real-time investing and if you think about it money comes to me from superfluid i get the money i send it to buy wrapped ether and bitcoin and other assets that i like and i might take another portion of my salary and point it to some kind of crypto donations app i might take another portion and put it into a liquidity pool right which do exist you can stream into lp positions and you get this this sense of what can happen when you have these things just bouncing off each other right and it also can happen within an organization so the example i'll go through we'll discuss how you can use the same kind of concept within a dao um when it comes to taos themselves one problem that that we're seeing um in the dive ecosystem is that that treasuries are really really big um and capital allocation is something that hasn't really been figured out yet right so there are grants programs and things but um in terms of the actual operational budgeting um there aren't that many great best practices for that um and you know right now when you think about how funds are allocated within a dao um they're typically done one of two ways right you can either do it in a very monolithic way based on grants and proposals or you can have working groups with their own budgets and you also have hybrids of one and two right um and one way to think about this is um using nfts to allocate budgets to these working groups right so maybe you have a few working groups or just a few individual contributors and maybe the way to really like define a budget is to issue each working group or individual in nft which could then represent a portion of the cash flow that the dow is spitting off or a portion of the cash flow that needs to be sent to each individual working group to compensate them for their work so we have a contract we built called the budget nft contract that will store and manage nf will help allow a dow to budget out between the different working groups using nfts and super fluid streams so what the dao need to do is deploy the contract send a super fluid stream or just some funds more generally to the contract and then whoever owns the contract maybe the multi-sig fit down they can mint new nfts to contributors that will manage various aspects to the data so this is interesting because it helps with the management of flows of funds within the organization and the nfts can also be traded amongst participants and you can also split them and merge them back together and do interesting things with them so the way this actually works in practice is you have this diagram of the dow treasury right they're streaming into the budget nft contract and then you have these nfts minted um the dow can open the stream and send super tokens to the the main contract entities will be issued using this function called issue nft and then the owner of those sub nxts each individual owner can manage those those entities themselves right so they can split their own nft off into members beneath them and then they can have access to different act like sources of funds as well so again just a reminder i'm not going to have time to go too deeply into this because i want to have time for a bit of q a but you can find this example in our protocol mono repo under examples but to um and to give you one more just quick idea of of how did this logic will work right number one we're going to send this stream to the budget nft contract number two we're going to use the issue nft function to issue an nft working group one what that issue nft function will do is also open up a stream to the owner of the nft and then anytime this the nft changes hands the stream changes who it's being sent to right so if you transfer the nft the new owner of the nft will then receive that stream right so we can do this a couple of times if you then own one of the sub nfts you can split streams and merge them back together for example if i have a couple of streams i can merge them together using the merge streams right so we used to have three nfts down here now we can have two of them combined into one if you want to consolidate groups and you can also split streams off so if you want to split an nft in two essentially create a duplicate nft what that will do is it will send half the stream that was being sent to the original nft to a new owner of the of the new nft right so lots of interesting things you can do here again i highly recommend going to the uh examples repo and seeing the code yourself but that's just one conceptual example of how you can use nfts and superfluous streams together for some interesting coordination mechanisms so we'll do a bit of q a while we have time right now but i just wanted to say before we do that we really want to help you build right uh if if those of you are here after joining our discord or something uh or just being in the uh global chat you've probably seen my name pop up a few times just uh trying to help teams form and throw out ideas so please feel free to reach out to me either on discord or via email or even twitter and i'm happy to help you guys so we'll pause there and we'll get into some of the questions you guys might have had all righty oh sam i'm happy to say there's been quite a bit of conversation going on um we had a few skeptics and for example there was aditya that thought that it was property information but as i shared with him our code is all open source so you can go and figure out how the money is streaming in real time with no gas just by checking a repository i think emeko was also asking some interesting questions i hope i cleared it up did you have any other questions maybe not maybe not we also had her yum who is a bit skeptical but i sent him a stream so maybe he's less skeptical now i have one more but it reveals some cool ideas well eneko uh it's cool to hear that and if you uh need help creating a team also let us know sam's been in contact with a bunch of uh other hackers so if you need people to hack with let us know is there a way to real time stream by holding nfts yeah so we have a few different solidity examples that allow you to build nfts which carry the cash flows so it's possible but obviously that money has to come from somewhere right so you have to build some sort of system that that makes sense but yeah sam just shared one of the examples of uh kind of streaming out of these well thank you guys for joining i mean we i'll obviously stay here for a few more minutes if you guys have any questions um but if yeah if you guys have any i might have helped answer some questions from skeptics but you know if you feel like it's proprietary information or something like that because it's uh we're being somewhat high level the only reason we're being somewhat high level is that like when you get to the actual solidity itself it can be kind of dense but if you want i'll give you the whole rundown on how it works just just hit me up and we can we can have a session uh no worries i'd like to actually know what is the reason that you wanted to include as money streaming like like what what's the idea behind it what kind of use case do you have um i'd say money streaming is crypto's way of doing recurring payments so you know in traditional finance recurring payments are done once a month every two weeks kind of depending on on which tradition uh you're from but that's not how our relationships work right it's not how we consume services digital services it's not how like when you rent a house you pay once a month but you're using every day right using webfree we can create these payment uh streams which are actually much closer to the way we actually consume services uh in the real world so the kinds of use cases that we think superfluid will be used for are literally every single recurring payments that you can think of from your salary to your rent to your gym membership to your support for a growing artist or to your donation to a charity in zimbabwe right literally whatever you would generally do on a monthly cadence you could do every second instead we had some good comments from leslie here i don't want to i don't want to cut you off if you had something else to say but i can address leslie's couple comments yeah go for it cool leslie yeah um first of all yeah i totally agree with you on the uh transforming payments to low-wage workers and payday loans i i've worked in roles where i had lots of teammates or just people that i worked with that weren't positions where they had cash flow problems due to the fact they got paid every two weeks and not in real time for their services so i'm hopeful that this kind of technology can help with that use case as well in terms of sending the money um good question on whether or not you need to have you need to fund an account um so when you create a money stream for like let's say 10 per month i don't have to have all 120 dollars per month up front to open that stream right if i want to send it for the whole year you just have to have a minimum balance of super tokens in your wallet right so i can opt to send you 10 per month and as long as i have a greater than zero balance of super tokens in my wallet um if the stream will stay open right you don't you just wanna let that balance get to zero so the nice part about that is i can send a stream without having to lock up a bunch of capital in one place um and it's it's just better for capital efficiency um instead of sending a max so it depends on what you mean by max um the flow rate that you're going to spend is just going to define an amount per second in terms of the tokens you want to send um that will that stream will stay open until you close it or until the 
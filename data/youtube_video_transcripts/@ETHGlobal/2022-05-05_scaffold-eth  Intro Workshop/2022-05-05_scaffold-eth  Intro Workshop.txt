okay we are live thank you everyone for joining us i'm going to introduce you here to kevin from eat scaffold uh scaffolding sorry uh he'll be taking over now if you have any questions you can leave them in the chat you will be answering them at the end of the chat end of the workshop and we can go ahead awesome thanks for the introduction it's great to be here guys uh thanks for joining uh coming to hear this talk uh today you know the goal is to teach you guys about scaffold eath um when i first came to the ethereum space scaffold eats was a god save for me because it really helped me get up and running quickly um so i'm just going to run through some slides here and then i'm going to do kind of like a real-time demo we're going to like tinker through and do some real uh hacking basically here um so yeah first of all welcome everybody awesome that you guys are here um awesome to be part of a hackathon i was just to eat amsterdam and like the energy is just great so i hope everyone's enjoying it so far again today you know the goal is to teach you guys about scaffold eat um scaffold eat is an awesome open source project originally created by austin griffith uh there's tons of content that is actually built into the repository there's a master branch obviously that you can spin up and we're going to be doing that a little bit later that gets you up and running with a full uh stack basically for ethereum to get developing it's got hard hat react it's got a lot of hooks in there and components installed it's also got um ethers js it uses for for interacting with the wallets and stuff like that it's also got built-in integration for uh meta mask um and it's also got the ability to do like wallet connect too so you can connect like other other wallets that you might have um and it's also got some built-in uh burner wallets too so we're gonna be showing kind of what that looks like and there's just tons of like starting points like examples where you can start out with like there's an nft example there's a nft marketplace kind of example um and so you can easily just kind of like check out the repository switch the branch and then follow that readme for that branch to get like kind of a working scenario up and we're also going to do that at the end we're going to switch to another repo and show you how easy it is to to kind of start up a uh a different branch um and also uh once you get up and running you know we're gonna be able to do some tinkering we're gonna show you a little bit about how you can like interact with the smart contracts and start uh deploying it and you kind of just do like examples like you can pull examples from solidity by example and just literally just paste them into your contract and it will just the ui will actually change and manipulate as you go along which really makes it easier because you know one of the struggles with setting up uh an ethereum marketplace is really uh you know the amount of time that it takes uh to spin up everything so that everything is already kind of set up and it uses yarn package manager so all you got to do is run some yarn commands which we're going to do and you're up and running um so it's basically what you need is you need node.js installed you need yarn installed make sure you install uh the newer version of yarn uh there's like an older version of yarn that comes with like some versions of linux make sure you're using the new version of yarn package manager and then obviously you're going to need git to check out the repository um unless you like download it from github directly uh and the the node when you set it up is going to spin up a hard hard hat node with all the the wallets already built into there as well so it can start deploying your smart contract it's also going to come with a full run react app as i mentioned with all the hooks and all the components already ready to go and a full-blown ui with the burner wallets um so it just gets you up and running fast and then obviously everything we're going to be doing today is going to be based around uh solidity uh some solidity smart contracts we're not really going to dabble too much into the react stuff i am going to show you the like file structure and kind of how everything's laid out but really the goal is today to show you how to like kind of start tinkering with your smart contracts um and not have to worry too much about react because react should be something that kind of comes later as you start to build the ux and the design of your app right so uh i want to give you a quick run through kind of what this looks like from a developer standpoint so you know if you're a new developer or maybe your existing ethereum developer you know you might be used to kind of doing everything by hand and getting your environment set up or maybe you have like a virtual machine that you use um the cool thing about uh again scaffolding is everything's kind of handled by yarn so you can literally just check out the instance and you can do a yarn install and the yarn uh the yarn file basically is going to have all the prerogatives that you need and understand what needs to be installed so it's going to do all that for you you don't have to worry about versioning and all that all that good stuff um then you just really run a yarn chain which is going to split up spin up a hard hard hat node and it's going to spin up like a blockchain for you to actually start tinkering with and then you do a yarn start to build the react app and start the react app and that's going to be running on localhost port 3000 and then you can do a yarn deploy which uh executes a deploy.js script uh inside the scripts folder this is gonna actually deploy your uh your smart contract uh to that blockchain and then as you start interacting obviously with uh your smart contract the blocks are going to be added uh and to your hard hat heard that note so it's pretty straightforward and we're going to actually going to go through this and do it uh the one thing i will say that's very important is after you get set up and you know you really want to master scaffolding you know solidity by example is a great uh kind of thing for you to go through each example and paste that in and kind of start tinkering and see what it looks like on the ui as you make these changes but speedrun ethereum dot com is a great resource and it's kind of like a validation check for uh the work that you are doing in ethereum uh to see kind of like where you're where you're at um and that's that's really useful because it's gonna do things like you know set up a nft example or set up a dex or set up a marketplace and it's going to really kind of like test your knowledge and kind of help you kind of by your by the time you're done with with running through solidity by example and running through speedrun ethereum you're going to be ready to go as a full-blown ethereum developer and so all this stuff was kind of created with this whole kind of constant learning in mind so speedrun ethereum speedrun ethereum that's the place to go um if you guys get stuck and you guys need help the best route is actually go to go to the telegram chat that we have for scaffolding um you can literally just google search it just search scaffolding telegram uh developer chat and it should be the first thing comes up on google but i will paste the link here in the chat as well um and then there's a bunch of good docs so you can literally just go to docs.scaffoldit.io and all the kind of walkthroughs of like kind of what i'm going to be doing today are on there um really technicalities like if you're trying to do something very interesting like you know that maybe you're not kind of understanding how the file structure works or something after we're done today that's a good place for you to kind of reference okay so that being said done with the slides uh now we are going to do the fun part so again i mentioned solidity by example it's a great resource for if you're trying to learn uh solidity you can literally just go through here and kind of cut and paste or copy and paste into your smart contract uh speedrun ethereum this is kind of what it looks like as well i just want to go through that um it's got you know challenges basically here so there's a simple nft example and you have to actually you connect your wallet here and you go through these kind of like uh kind of like it's kind of like a game right you go through and do these uh these quests and as you do you get kind of validation and it kind of shows like hey this is my my uh my wallet and i'm i'm kind of a a vetted ethereum developer by going through speedrun ethereum um and i do want to show you real quick about the branches so when you do go to scaffolding then you come here obviously the the master branch is kind of going to get you set up with a really basic hello world we're going to do that here in a second but if there's something you're looking for like i don't know you want to do nfts right uh you can literally search and see there's already some people that have kind of come here developers that have built builds uh for for nft so there's like the simple nft or uh you may have heard of uh lugies which is amazing you can actually come in here and do the lugies svg and nft which is like an on-chain uh generated uh graphic of a loogie that austin created so there's all sorts of cool stuff that you can do and if uh if you already have an idea in mind you might want to search through there and see if there's something that you're already ready to kind of build off of rather than starting from scratch so that's very very important so that being said um we're gonna get started here we're gonna show kind of what that looks like so uh if you guys are familiar with uh so i'm using tmux which is basically like a multiplexer for a terminal just so that we can actually see um kind of multiple uh kind of like windows at once you could just open up multiple terminal terminals if you wanted to but i just like using this so i've gone ahead and i've actually checked out scaffolding we can see here that i already have it here um and so we've checked out the code i haven't done the uninstall yet so let's go ahead and spin that up and do that and what this is going to do like i said before is it's going to basically read the package json file it's going to determine you know all the requirements for that repository that you're in so in this case i'm just in the master repository and we're just going to build out that and it's going to install the dependencies um this shouldn't take too long usually takes a little bit over a minute means said so we can go back to the scaffold youth branch we're on the master branch so you'll see here um uh here's the steps right here so if you guys want to want the steps and you guys aren't following along with me here this is where you clone it then you do a yarn install and then you do a yarn chain so let's see if this is done should just take a second i was going to do this at a time but i wanted to show you guys kind of what it looks like because there are some errors that pop up here um and those those can actually be ignored uh so you don't have to worry about that um i did go ahead and do it for one of the other repositories so we won't have to wait for this uh on the next session all right almost done here we go okay lied to me okay well let's do that let's take a look at uh some of the more details so again i'm gonna check out the repository uh i've already gone into the directory i'm gonna do yarn install what i'm gonna do then is i'm gonna run a yarn chain which is actually gonna spin up uh uh the blockchain for me and then i'm gonna open up another terminal which i already have on the on the side there and i'm going to do yarn start yarn start is going to spin up uh the react node and then there's yarn deploy so you can do yarn deploy like any time that you make a change so if you're one of those people that wants to control when the deploy happens you can do your yarn deploy there's also another command that's called yarn watch yarn watch is really nice because it will just constantly watch for most of the configuration files that you're editing and then as those configuration files change it's just going to automatically deploy um so while that's doing that let me go into uh oh there it goes okay so it's finished okay so i do want to show you guys real quickly what the repository looks like so let's go up and let's load up atom so i'm using adam for my text editor which is just going to give me um kind of like a ui for for the configuration files and this is what you get so there's the most important thing is that there's a package folder here and there's really the two main places that you're probably going to be working in is going to be hard hat and you're going to be working in the react app okay so inside of the hard hat folder there's a contracts folder and then inside there is your contract so this is your um uh your essential your starting contract so what we got here is a very basic contract it has an event that gets sent it's got a string so that we can store some some data on the blockchain in this case it's just a build unstoppable app string and then you have your constructor which is anything that you want to be deployed at the time the smart contracts deployed and then we have a basic function which allows us to update that variable in real time so we can see here that we can set a new purpose and uh we can set that purpose too and log it to the log as well the console log and then we can also set that purpose using the or send an event that shows that that is uh emitted as well so out of the box so now we got uh the project installed so it's pretty much ready to go what we need to do now is spin up the blockchain so we're gonna do a yarn chain and what this is gonna do again is to spin up a hard hat it's going to it's got some pre-kind of setup wallets and stuff like that to handle the deployer and i'm going to get into that a little bit later and then i'm going to come over to this window and i'm going to do a yarn start so this is going to spin up the react app and it's going to spin it up on localhost 3000 so it should spin that up in just a second um this is actually not the window that i want to use though it's okay though we'll use it on this one okay so we'll go to the app it might take a little while for that app to start as well so what i'm going to do is while that's doing that i'm going to do the yarn deploy so again you can do yarn deploy at any time that you want to deploy your contract i personally just like to do yarn watch because it's going to constantly check my config files for me and it's going to automatically detect as you can see here that it saw that the contract needed to be deployed and it's going to compile and deploy it for me so we're pretty much good now so at this point we'll see if we can come over here and spin up the app it looks to me like uh it's still starting so we might have to give it this one a second so you can see here on the top it says starting the development server uh it does take just a second for react to start i don't know why that is but it takes so long but uh reacts a little bit slow to get going but hopefully once it's going then we'll be good um okay so let me go back to the uh sorry we're jumping around a little bit but that's kind of how it is when you're an ethereum developer okay so we have the the contract you know where that is that's here in this contract folder right but then you have the react app folder so that's where your react app is is basically living and then inside there is your source code and then you can see here that we have like the app.jsx file which is going to have like basically all like the eth hooks installed it's going to have ethos is like a library that was created by scaffold eth that has like all these kind of cool things like uh checked balance or see the gas price or different things that they've built into east hook so it's already got that installed for you it's got you know basically the the setup for your alchemy key there's like a um inferior sorry inferior key um and uh all your networks are already as well in here too so um sorry this is prompting for my meter mask we're not going to use that because we'll get tomato mask in a little bit okay so now the app has started okay so we got the app up and running this you can see here that it's listening on localhost 3000 and when you first get into the app you'll notice that you have a burner wallet which is great because if you don't have metamask installed on a browser or something like that or maybe you don't want to use metamask because you're like sick of like non-stairs or something like that you don't have to mess with any of that you pretty much just have a wallet that's ready to go the only thing is it's empty so cool thing is scaffolding has a built-in faucet so we can easily just grab funds from the faucet and eat it instantly on this kind of wallet that we have here we have some credit so we got like 30 30 in ether um if we want to get more we can grab the address here and then we can go down here to the faucet and we can even send some more so let's say we want to set a hundred bucks and so then now we should have 127.99 um and that's going to just kind of uh give us some extra money so we can work with the the app so again when you first come in this is this app home directory is where you might want to build your your front end so if you want to write your own custom react code this is kind of where it's going to be and these are just some examples of how you might use things like what your balance is or maybe it's just kind of giving you like an idea of where you need where you need to go to edit this so it's in the home jsx file so the app.jsx file is the scaffold eth application right but inside of the views folder which is here in the views folder you have your home jsx and this is where you can start building your app you can see all that code that we're looking at right here on this home tab so it allows you to build your app within scaffold ease so that it's kind of you still have all the functionality of scaffolding but you're able to build your app in that kind of like little tab then as you start building uh your app so you can like not worry about this right now and you can just kind of tinker with how react is working so when you go to this debug contract section we can see here that we have our contract that's been deployed we can get its address and we can see that it doesn't have any funds and we can see that it has a purpose that we showed you earlier in the um in your contract.soul and we can see that um i can change it so i can come in here and say all right foo and i can send that uh and i got some gas so it's asking me if i want to use metamask so oh i don't want to use minimalist right now so i guess last time i did the demo i would mess around with metamask so there's a little log out button here so we can just log out of that and then uh i just realized that we weren't using the burner wallet so now we're using the burner wallet sorry about that um but the burner wallet again is empty so we need to get some more funds from that so let's get some funds and now let's try to update um the contract here sen boom and then you can see when i uh when i use the function to update the contract the variable the state variable was updated there pretty easily and then i paid a little bit of gas to do that okay so if you want to connect metamask you can you can just click the connect button and you can connect the metamask or any of these other methods you can use a coinbase wallet if you want to do it on production or you can use wallet connect if you use like rainbow wallet or something like that so it's got that um that built in which is great but we're right now we're just going to use burner wallets okay so uh let's go back to uh where we were so let's go back to our contract okay and let's start kind of like tinkering around with the contract so the first thing i want to do is uh and the first thing that you might want to do is is set up some kind of like access control for your contract so let's say that you want to do um right right above the string you want to create an address and you want to make it public so it's an address um is is the type of variable we're using we're going to make it public and we're going to call it owner and we're going to grab the address for this particular instance that we're using so this burner wallet right so we can grab that and this is the address for the burner wallet i could also use my mini mask if i wanted to but right now i just want to show you this burner wallet that's built into this instance is good to go so we can define that this is the owner and this is a new variable and this is the address for that owner then we can come down to this like set purpose function and we can start to do like a kind of a hacky access control i would say this is like the old school way to do it which i'm going to show you the old school i'm going to show you the new school way uh we're going to say uh requirements.sender equal to owner and if not let's say you are not the owner sorry not the owner right boom so now if i make this change i hit save we'll notice here that it automatically detected that change for me and it's automatically going to deploy it and we can see i did something wrong okay so i did a spelling error so you're gonna get like some kind of output in your console here that shows okay well what did i do i spelt um something wrong so let's see what i did i didn't put message.sender i put message.send so then we can save that and go back and we can see now compiling and deploying so you see how we're tinkering and we can see here on the top left that it was committed to the blockchain and then we got our call which allowed us to see the contents of that and we also published the subgraph which that's a whole nother thing but uh we're not going to get into that but you get the idea so now we can see here that we have the contract has automatically been deployed and it's automatically updated my ui here so now i have a new variable called owner and it matches my wallet so now i am the owner of this contract so if i want to come in here and change this to yo what's up exclamation mark i can do that because i'm the owner but if i open up another browser and i go to this let's say i'm a different user now i have a different burner wallet so here i'm using a different browser it could be an incognito mode but i'm just in like another uh profile on my on my chrome so i have a different wallet address so now if i want to come to debug contracts and say uh hey how are you or something like that i don't know i could send i'm going to get an error and it's going to show me here in the console that i'm not the owner so it's it's a cool like kind of built-in way to see the exceptions that we're getting from solidity um in the ui so it's really awesome for like troubleshooting and stuff like that so that's cool um we wouldn't really want to probably rest we might want to restrict just the owner to upgrade the purpose maybe if it was like kind of a centralized app but let's do something a little bit more interesting and let's actually go back um to the source code here oh sorry where is that there we go okay so instead of doing and there's a there's a cool thing you can do with uh solidity it's called inheritance so instead of us actually defining an odor like a owner a hard-coded owner what we can do instead is get rid of this line and get rid of those lines kind of revert it back to the way it was and we can uh import and use open zeppelin contracts so we can import our our opens up on contracts so if you're not familiar with open zeppelin there's a bunch of like pre-built contracts that are just ready to go to do different things and one of those is access control or ownable that allows you to uh set an owner using that built-in functionality so you don't need to write any of the code the only thing you need to do is inherit that so we can say we can say it's ownable and then instead of over here we can say okay well only the owner can uh actually change this this uh function or access this function so we can save that now and if we go back watch terminal we can see that the app is deploying complying and deploying that one there's no uh no errors in my my text so we're good to go and so now we can see if let's just refresh it just to make sure that we got the newest version okay we're good but there's a problem uh i want i don't want this address to be the owner what address is that uh it gets a little confusing when you deploy an app with the um the ownable because uh you're not using your browser to deploy you're abusing hard hat so this particular uh address that we're seeing here is actually the very first wallet that is built into hard hat so what we want to do is if we want to take control of this contract we need to transfer the ownership of it so if i was to come in here i wanted to change you can see the function here it's transfer ownership on the bottom but i'm not going to be able to transfer it from the ui because i'm still not the owner so if i was to try to go here and say yo hey and i was trying to send that it's going to tell me hey ownable the caller is not the owner so it's blocking me because i'm using opens up on ownable so what we need to do now is we need to go into a special part of uh scaffolding and the the the particular area that we need to go is in the sorry it's in the deploy folder and okay you might say oh i'm going to go to the scripts folder and then go to this deploy and you'll see this stop this is the old deprecated deploy file uh this just threw me for a loop one day i was like trying to update this and then i realized it was the wrong one so they put this giant stop here you need to use this deploy folder here what this is doing is this is the deployment contract this is exactly what's happening here in the corner when you're actually deploying your app so we want to come in here and we want to do what's called a change basically like transfer ownership okay so in order to do that we can do that by just going in here let me grab this code because it's just easier to paste it in uh and we can put it right here let me just make sure that's the so that's not the right um uh address so let's go grab the address so we want to actually transfer to this one so let's put that in here so what this does is it's just an await function and uh my proper tabbing because that's going to bother me so what it's going to do is it's going to after the deployment of your contract is deployed it's going to get an instance of your uh contract as your contract and then what we're going to just say is okay we'll wait and also do a transfer ownership so here's the contract variable transfer ownership and then this is the the address that we want to transfer the ownership of the contract to so once we save this and then we go back we'll notice that it's not automatically compiling and deploying sometimes when you edit certain things in scaffolding and it's not like the contracts or the react file you'll need to restart the deployment so i'm going to do that one more time i'm just going to do a yarn watch now what should happen now is it's going to re-deploy and force that to change and then we can come over here and we'll also need to refresh scaffolding and then boom there we go so now we've we've deployed it with hard hat but then we have our uh burner wallet that has been transferred as the owner now you might if you're kind of tinkering you might want to have a more permanent private key that you're using so you might use metamask for that uh because you know you don't want to have to constantly be like updating the deploy script and it can get kind of annoying so hopefully that makes sense so after we do that now we have we should be able to set the purpose to yo yo yo and hit send and boom we were able to update it because we transferred ownership of that so again this is still a kind of like a centralized application and it's not really like it's not very cool it's just kind of like all right we're like we're doing this um what we might want to do is actually say like all right if someone wants to use it like anybody can use my contract but maybe you need to pay a little east to be able to update that uh that variable so what we can do is go back to our uh sorry where's that we'll go back to your contract here and let's let's get rid of the only owner we don't care that that only the owner is there we can still use ownable and we can still transfer the ownership and we can still have that functionality but let's get her get rid of that but let's make the this contract payable so that or sorry this function payable so this function people can anyone can set it but let's do a requirement let's do a special requirement that says all right if you want to change the subject that's cool anyone can do it but you need to send in message.value which message that value is the amount that's in the transaction um on top of the gas that you're paying to actually like run that that transaction so in this case we're going to say you have to have a value that's attached to this transaction that is o that is .001 ether and if not we're going to send an error that says uh need more money or something like that um we can you keep you want to be like good you would say you know 0.001 to be exact or something like that you know you can like do whatever you want here it doesn't really matter and we can save that and let's go back to here and we'll see that we are compiling what did i do i did something wrong in my fat fingers what did i do oh i didn't end it so yeah sorry so let's save that now we should be good see if it's deploying compiling and deploying cool so deployed all right so now like anybody can come in here so we can go back we can go to this one but that's not pretty cool and oh you will notice that the ui is updated again so not only does it have the string that we want to update for the new purpose but it also needs some value right so let's go over that other other account we had here and we can see here that um we're in another wallet we have this is the wallet address we have the contract address it doesn't have any funds in it right now and then we can see who the owner is the owner is this tab over here but i still want to be able to change it well i don't have any money so let's get some thought let's get some money from the faucet so now i should have like 30 bucks or something like that 27 to be exact okay so now i can change it to whatever i want so like hey this is cool right um exclamation mark and i have to send some money so i don't send in enough let's say i send in point zero zero zero one uh now there's this there's a small quirk and it's not really quirk but it's more just to teach the developer how ethereum works and if you don't know already you know most of the uh the base uh transaction that you do is is actually in way so 10 to the 18th so if you if you want to just to make it easier for you you can put the amount in ether here and you can cut this little green button and that will convert that to to whey for you obviously you wouldn't want to uh make your user put in whey so you would put that into your application as you build it right but that's okay this is just a friendly way for you to tinker and do that so let's click send and then boom it says need more money point zero zero zero one to be exact so now let's go back there i think we can just add a zero and then try it again and boom it was a success okay so now we can see what's interesting is now we can see that we have some value in the contract okay so the contract has value i've paid some gas to to change the uh the purpose to hey this is cool and i've also paid some ether into the contract and so the owner of this contract now has some money right so what do we need to be able to to do that well we need a withdrawal function to be able to get that money out now we don't want everyone to be able to withdraw money from the contract this is where we can go back to using the ownable uh pattern right we can make a public uh withdrawal function and we can make it only the owner can and can call that function and then we can do a kind of a check so we'll do like a bool uh to check and we'll we'll call it uh success sorry it's actually google success i think and then we can do make sure that the message.sender dot call so this is to check to make sure basically that um that they're not trying to pull more out of the contract than it's available uh in the contract because then you would um so we would basically we're gonna grab address this which is this contract's address and we're gonna grab the balance for that so this is basically a check to make sure that the person withdrawing the money is not trying to withdraw anything more than what the balance is on this so i think that should be good let's see if i did this correct so we have again we have our set purpose which anyone can do they have to send money in and then only the owner can withdraw that money and i think we should be good with that let's see if this actually works uh let's see if it's deploying let's make sure i didn't do uh what did i do oh i said the stop balancer see i'm like i don't know why i'm just not typing good today okay let's try that but you can see how easy it is to start tinkering and add some stuff and it's just deploying for you and you don't have to worry about it now there it goes it's deployed it's ready to go so compile deployed we're good to go oh we got another error what did i do i probably typed something wrong message.sender.call value address exactly what i did i did something wrong here um okay but you get the idea so if you're you can create a function uh oh it did it did let me do it so let me try so now i'm i'm in the owner there's no money in there because we kind of reset the contract so let me go back to that other tab and let me do that again what i did earlier let's get some we have some money in there let's refresh it get the new instance of the contract we have the contract here it shouldn't have any money in there let's see if it works keyboard hundreds there's no money we have that let's change the function to uh i don't know yo hey how are you question mark and uh point zero zero one ether two way send boom so we were able to update it now if i want to come here and i wanna withdraw let's see if it lets me not the owner so it blocked me because i'm not the owner because i'm using ownable now i can come back over here to the contract as the owner because i am the owner now i should be able to withdraw and there we go i was able to pull the money out of the contract and it went back into my wallet so we're able to use the contract as a bank kind of like a vending machine and we're able to kind of like do access control on what parts of the contract or or what functions of the contract can be manipulated so that that's a pretty cool run through that gives you a really good starting point to start tinkering i hope that was useful but i want to show you just one idea of how you might uh check out a new branch so first let me close down this other one because just so there's no issues with like memory or something like that okay so i just been down the old version and then i have another kind of repository here where i've already checked out scaffold eth and i've already checked out um if i do get branch here we can see that i'm in the dice game so there's a dice game and i can actually just i think i already did yard install we can just check real quick hopefully i did because i don't want to make you guys wait again for that because that was like brutal and i don't have to wait okay cool so it's all set up so we can do the same thing we can say yarn chain boom then we come over here we can do yarn start then we come over here and now we're going to get a new instance of the of the app and then we're going to come over here and we're gonna do a yarn uh watch so so it's the same thing the same same kind of setup but we're just using a different base image and let's go ahead and uh we gotta wait for yarn to uh react to start that is the one thing that you do have to wait for no matter what um so real quick i just want to show you guys what we're what we're doing we're grabbing the dice game so dice game right here so here's the dice game it's uh looks like it was created and it was updated 21 days ago cool so we can see the steps that i just did i basically cloned it i went into there i checked out the dice game then i did yarn install yarn chain yarn start you're on deploy ready to go and then once we have the app up and running oh let's look at the source code real quick so let's go to packages uh actually let's do it in the uh let's not do it in uh in there let's do it through uh through the console so let's do atom dot oh yep adam dot so i'm in that right directory let's load that up okay so here's the uh dice game contract as you can see it's a little more advanced kind of contract but uh it says some hashing it's it's checking a previous block um and it's got this kind of function where you it's sending out some omits of the role and what was rolled it's basically a dice game exactly what it is so you can look at this and be like oh cool okay i see how he did that and then we can come in here and then we can look at the app so let's uh refresh one more time let's see if the app started yet yeah okay it should be up and running now so you'll notice with this one we have a ui that's already been built as well and so we got to get some funds and we actually need to get some more funds because this game is expensive to play it's like vegas uh so let's get like i don't know let's get like 10 000 bucks and we just have like we don't have to worry about it and i can roll the dice and boom they're just gonna roll the dice and it's gonna tell me that i didn't win so now the contract should have some money it's got 27 dollars and 24 so every time i roll the dice it it's basically telling me that i uh basically i lost 27 and 24 cents i rolled an 11 and the prize is 0.0018 so i could literally just sit here and like different people could play and as they're playing we're adding more more value to the contract and whoever wins is going to get paid out there so i can literally click this i did this yesterday and it took me like i don't know like 10 minutes to win the prize so i'm not gonna force you guys to watch me do that but you get the idea is it's basically using the contract as a bank we're rolling the dice putting some money into the contract and then if i roll a zero i would win that wouldn't that money right so it's kind of a cool way for you to see kind of what like a game might look like for the contract acting as um as a bank so yeah so that was a quick run through i hope that was uh was useful to you guys um i'm definitely willing to answer questions um i'm stoked to see what you guys build with scaffolding i'll i'll be in the telegram channel to like help out as well austin griffith if you guys don't know him this guy's awesome uh he's on there often and there's a whole team of developers the build guild is there uh ready to help so yeah great thank you for that um is there any questions in the chat there you want to answer if not um you guys can find the telegram on scaffold eth github i believe yeah okay i see the chat i see questions here uh yeah so is it working with next gs i think there is a next js build so if i'm not correct uh i for a while i was messing around with an xjs as well i believe there is so yeah there's scaffolding xjs here there's also a scaffold next js base example as well or sorry nft example so yeah so if you search here search shirts next js there's a special branch for that so yes that one we do have thank you for telling me on the uh i wasn't watching the chat while i was doing my demo but uh um thank you for all the telling me what my my syntax errors were um the random value that's a good question so i didn't write this contract but if we look at it um it looks to me like if i can kind of pick it apart and i've kind of looked at this before um but i'm trying to remember so what they're doing is they're taking like the previous block and i don't know if it's the most the best random way because it's not i think the best random way is to use like an oracle or like something that is like um off-chain giving you like a random number this is actually doing it based off the uh the previous hash uh and it's using this keck cac 256 function to do that which is passing the previous hash which is the previous block number -1 and then it's grabbing the address and the nonce and like hashing those together and then it's basically creating a role based off that hash so it's i don't think this is actually the best way to do a random number but i think for a hackathon it's it's good enough uh and it's a good example and that's probably a deeper question for uh for the community on how you do perfect randomness but uh hopefully that answers your question on that can it be deployed on fleek you know i'm not sure if it can be deployed on click uh i think flick is just a like an ipfs host right so you can either so it's if you want to deploy your app to like um uh ipfs there's a command for that you can do yarn ipf rpfs believe you can also use surge i don't think that we have fleek integration yet but um uh definitely i can i can do some searching for that and get back to you leonard on that one uh yeah you had a question yeah so you mentioned well one of the burner accounts so it's still part of one of those 10 hotted accounts right that's a good question i i think it is using uh accounts from uh hard hat yeah um and actually maybe it's not actually it might be just be using like accounts that are built somehow into the app um i'm not 100 sure i don't have an answer for you on that one um i can find out as well if any questions like that i didn't answer you can email me kevin at kevinjonescreates.com and i can follow up and get an answer for that uh there is not a discord channel um but the telegram is the way to go because there's about 2 000 developers uh in that in that channel uh it's like the place to go first for scaffolding chat and it's like super active like literally there's probably hundreds of posts a day so it's very interesting you can kind of see like a transparency you can also search through the telegram channel if you guys have questions or problems great thank you kevin thank you everyone for joining us um we do have a coinbase workshop happening in 15 minutes as well as well as a team formation at 6pm eastern time um so yeah thank you very much we hope to see you soon and thank you kevin i'll see you soon as well yeah 
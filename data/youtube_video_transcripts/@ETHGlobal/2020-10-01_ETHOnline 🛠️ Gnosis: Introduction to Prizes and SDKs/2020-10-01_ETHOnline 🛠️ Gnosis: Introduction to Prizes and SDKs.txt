introduction to genesis prices and sdks joining us today is lucas and khaman who will be taking us through the session one quick reminder to everybody to stake their spot for eath online if you're having any issues please don't hesitate to reach out to myself or anybody else on the youth global team and with that i'm going to pass it over to lukas and hermione who will introduce themselves and get the session started thanks for the introduction uh welcome everyone uh it's a pleasure to be part of online uh especially with devcon not happening this year it's great seeing the entire ethereum community coming together and i'm looking forward to seeing some some knowledge sharing and you guys building some cool stuff i'm gonna share my screen now just let me know in case you're not seeing my my slides right now um looks good um yeah so at the beginning you will have to to listen uh to the product guy giving you a little intro to what gnosis does and how he can engage with us during the hackathon and then i will hand it over to german who's going to do the more interesting stuff and giving you a technical introduction to the nosy safe sdks all right a quick intro for those that know don't know knows this yet we're building essential infrastructure for decentralized applications and we're actually having a free technology pillar in cypnosis that's the gnosis protocol which is our decentralized exchange offering then we have the nursesafe which is a smart contract account and finally the conditional tokens framework um which is a yeah a token framework where you can can use built-in logic into tokens i will explain in more detail later um all right at the second tone we're actually having free general prices uh first second and third price um yeah the the requirements to qualify for for these prices is that you can actually build whatever you want but you make have to make your uh your hack leverage smart contract account capabilities so we're actually offering as part of our safe technology stack to sdks that allow you to to leverage smart contract account capabilities that's the safe app sdk and contract proxy kit and i will go into more details about how they differ later so why should you even do that nowadays developers still mainly have metamask in mind when developing decentralized applications yet for the user this doesn't provide the best user experience because first of all make the mask being externally on the account basically if you have more complex interactions with the theorem blockchain you will have to basically have the users sign multiple transactions which is super inconvenient and more regular users don't understand why one interaction is being split up in different uh transactions and then you have all these problems around transaction fees uh what's the the right transaction fee uh to set and then you have stock transactions because the fees are too low and so on and finally um externally on the accounts basically being an account that's controlled by a single private key um involves all these issues around key management and when when users lose their private keys they don't have access to their digital assets and cannot interact with with your dap anymore so we really believe and gnosis that smart contracts are are the future and that any account in the future will be a smart contract account which is controlled by by multiple private keys or by externally on external accounts under the hood but the actual account will be the smart contract account and this enables developers to to leverage all these capabilities of these smart contract accounts for example multiple contract interactions can be batched together into one single transaction and you can leverage transaction relaying uh through meta transactions to to abstract away these issues surrounding transaction fees or you can have your users pay transaction fees with erc20 tokens and finally smart contract accounts enable you to have more sophisticated access control schemes in your account so it's not just this one private key controlling your account but you can actually have multi-factor authentication multi-signature accounts but also built-in account recovery schemes uh and and other means of controlling this account so that's really the the reasons why we think that smart contract accounts will enable much better user experiences for users and enable developers to build better decentralized applications so before i go into these different sdks that we're offering we're actually also having two additional prices during if online uh where we want you to to also build on the other technologies that uh that is offering and that's the gnosis protocol which is an end-to-end decentralized exchange uh so different from maybe some other decentralized exchange that are being launched recently it's really n20 centralized meaning uh there's no admin key or that the parameters cannot be modified uh but rather yeah and also there's no automated market maker behind it so there's no issues of impermanent loss all of this works with a batched auction mechanism meaning there's at any time through these batch auctions there's a uniform clearing price for users and this is especially interesting for ido's initial dex offerings where you can really make a fair price finding mechanism out of this decentralized exchange yeah and the the other part is the conditional tokens which enable you to basically uh facilitate tokenized logic uh you can imagine it kind of like if this and that built into these tokens where the value of a token depends on the outcome of a specific event and that's interesting for future key applications but also you can use it for example for conditional token investing applications or for options contracts for example so for these two technology prices we're actually having two separate workshops that are happening tomorrow right before the kickoff of if online uh so make sure if you're interested in the technologies or even better if you want to build something using these technologies that you're participating in these workshops um and also coming back to the prices the prices are in a way composable so if you're building something with the the safe sdks that's also building on top of gnosis protocol you can obviously qualify for both the technology price as well as the general price or you can even if you're even more brave you can try to combine conditional tokens framework and the nurses protocol and go for for all of the prices all together so for more information on our prices but also just additional resources and support you can join our channel on the online discord uh or even better uh join our own discord that knows this discord because all of the developers are obviously more more active there also during the hackathon but we're trying to be as active as possible also in the eve online discord okay let's get back to the to the safe sdks as mentioned we have the safe app sdk and the contract proxy kit which both enable developers to use these benefits of smart contract accounts and to explain uh what they can build with with the safe apps sdk i'm actually doing a little demo right now so we'll now go to the safe multisig which is an interface that we're building on top of this smart contract account standard and i'm just going to create a new nosy safe account so let's give it a name so now this account is controlled by my meter mask account i could add additional signer keys additional owners that are controlling this account even set sort of like a quorum or threshold where like only part of these signer keys are needed to to make transactions with this account i'm just leaving it with the meter mask for now so that's it i need to do one transaction to basically deploy the the proxy uh for this account and that might take a minute because we're on rinkeby this should go a little bit faster we're done so now we've created a nosy safe account and obviously there's no funds on there yet so let's just quickly send some fun so i can continue with the demo so now in this interface um we have this option or this tab here that's called apps where there's uh different decentralized applications that sort of work as kind of like a plug-in so we have an application from one inch but also a means to to manage your balancer pools here um yeah or also an app from xavier which enables you to to stream money and i'm just gonna demo this with savior [Music] so the defense arrived in my account this means that i can now initiate a transaction sending it to my own meter mask account and then i can basically define here that's how xavier works basically the duration of the stream whereas the this ether is going to be streamed towards my meter mask account so let's say starting tomorrow until the end of the month now when i create a stream uh basically the application then packages this this input together to a batch transaction so you can see this interaction actually involves multiple transactions whereas if we would build a regular dap i would have to ask the user to confirm multiple times but using the smart contract capabilities uh i only need to do this once so now when that's done basically as soon as the transaction went through you can then see it in your transaction list where you can see that this transaction has done multiple interactions here send some some ether to the reptifer contract made an approve and then interacted with the savior contracts and that's all bundled together into one ethereum transaction so basically with the safe apps sdk you you can build these uh these apps and enable the communication between your app and the the safe multisig interface um yeah and command will go into more detail how this works on on a technical level all right the second option that you have to to leverage smart contract accounts is the the contract proxy kit which you can use to build standalone decentralized applications that don't live in purely within this safe app framework and where you don't assume that every user already has a safe smart contract um so actually when you're using this this proxy kit whenever user is coming to your decentralized application and is connecting for example uh eoa like metamask once the user is doing uh an interaction with the with the dap then we're creating through the proxy kit uh a safe smart contract account under the hood and then you can leverage this smart contract proxy as a means to to benefit from from these capabilities so uh in what cases should you go for the safe app sdk and uh when should you build a adapt using the cpk so the safe app sdk is is really useful if you're one if you want to build a dab that's optimized for the safe multisig meaning uh the safe multisig is is used by more than 5000 people storing over i think it's one billion us dollar worth of digital assets and mainly used by um like projects and and groups of people that are um that are managing digital assets collectively so that's if that's your target group then um that's that's definitely a good way to expose your dap directly to users because it's it's uh completely built into the the safe multisig and also if you just want to build a simple adapt to to demonstrate something that's also a great way to do that um the cpk is is useful if you really want to build a standalone tab and that doesn't assume that the users already have a safe account so if you want to address a more broad market maybe yeah just people that don't yet have a smart contract account and also the cpk enables you to leverage the relaying functionality and come on we'll go into that probably uh in more detail but you can use the cpk to for example uh yeah pay transaction fees for for users um through major transactions um yeah that's basically it oh one important thing that i've i've missed um if you're building a decentralized application using the contract proxy kit it's actually also compatible as a safe app sdk so coming back to the interface users could actually go ahead and and import an app using an url and if this app uses the contract proxy kit it would automatically be compatible also to be used right from the interface so that's for the more high level stuff i would now hand the mic over to hermann who's going to do some work uh technical introduction into those two sdks so i'm gonna stop sharing yeah hello everyone i'm herman i will show my screen okay so here we will see how to how to build how to start building an app that uses the cpk or the save apps sdk to run inside the segment sync web interface so we're going to start with the safeapps sdk and this will be an application that will run inside an iframe that is in the same dc web interface so there will be some communication that needs to be there and here we will have the the documentation the the repo on github i i will show you uh all the links later in the slides so here uh first of all if we want to use it in uh in a project uh we will need to install it and and build it the app right john and [Music] and then this communication would work will work as long as the url of the main web so that the sigmoid dc web interface is one of these it can be mainnet ring kv or if you are running uh both both apps on localhost that's okay so when you are building your uh your safe app you would need first to import the safeapps sdk and call the the init sdk method this will give you an object that you will use in the communication between the your safe app in the iframe and the web page the save multisig the events that are that you would have to listen in the in the save up are three so for to listen them the object we just created here the apps sdk we would call the method [Music] at listeners and then pass three parameters and an object with three parameters on safe info on transaction confirmation and on transaction rejection unsafe info would will be used to will be used when the save apps the the web page wants to send some information about the safe to the safe app like the address the balance etc and the other two on transaction confirmation and on transaction rejection will be received by the safe app when the when the safe app triggers a transaction sends a message to the to the web app then you can [Music] submit this transaction with your meta mask or whatever in the web and then the web will return the the result of this transaction depending on if the user confirms it or rejects it uh these two listeners will be triggered inside the the iframe uh before that we need to start the transaction in the safe app and the way to do that is uh calling the method send transaction from the apps sdk that we instantiate at the beginning here in this method it requires an array of transactions as a parameter and it's an array because the save up the save contracts allow batch transactions so even if you just want to send one transaction you should do it inside an array for each transaction uh we need three parameters two value and data two is the address you want to call value if you are sending ether and data if you are sending some data to to interact with a contract after this call there is a message that is returned with the request id we use the request id to track everything every transaction that is sent from the from the safe app and uh also there is um this match this message also returns the safe transaction has but that is not the same as the transaction hash of ethereum so if what you want is to get all the information of the transaction the way to do that is uh to call the sdk the method gets get by save transaction hash and pass here the safe transaction hash and then this transaction will have all the information like a normal ethereum transaction some things important when you want to set up the environment in your safe app there is a manifest that is mandatory with some properties like the name of the app the description icon path and then some information regarding the name of the project and url this is needed because uh in our in the safe multic web interface there is this menu with all the apps listed so if you include yours manually of if it's already listed there well there's a name a description and the icon and also it is required to to enable cross-site requests because the app is running inside an iframe in the web page so this is needed and also https is also needed if you are using react scripts for example the easiest way to do it is uh here in the starter script just export the https or set it to true and that will make it once you have your yourself app the way to load it uh well would be to go to the app section in the in the web and then here paste the url of the save up agree and save it uh as i said in the beginning uh this the web the the save multisim web interface could be one of these urls in running magnets uh rinkyv or localhost and the save app can also be deployed somewhere like madlify search ipfs or can also be running in local hosts [Music] okay so to facilitate all of this richard manager from the safe team created a safe up template which i really liked and and i hope you too and this is a a create react app template so if a new project is started before creating it uh using the command npm x create react app followed by the name of the of the safe app we are creating if we add the the property template and we uh write our template which is adnosis.pm cra template save up then we can start with a basic project that has like everything set up so here once you have this project just it is only needed to install it replace the vm file removing the the sample and to start the project and we can see uh we can see this template in a in a minute live and one thing uh very important is the use of the safe reactor components so i'm gonna use two uh two apps one for the safe sdk and another one for the cpk uh probably they are not using these self-react components but these are just example apps if a safe app is created that wants to be integrated in the in the official web page for the safe then it should have the same look and feel so this library should be used to get some components like inputs buttons and everything with the same styles something also very nice that has this template is that it includes a hook that also richard created notice that this hook is not in the gnosis pm github so use it at your own risk nothing nothing risky but just notice that it's not it's not there and this hook will simplify everything even more because it provides a safe provider that if you are using react well you will import it from here you can wrap all your application with this safe provider and then inside of the app called the use safe hook that returns uh the safe object and here in the safe object you can ask for the save address the balance etc it also allows you to send the transactions as we saw before and let's let's see the the template [Music] so here is it uh yeah this is what we what you saw uh this is the the root of the app that is wrapped with the site provider and inside of it we have a function to submit the transactions and then we have a button to to trigger them so uh i have it here this is the safe multisig web interface i i previously imported this app here in the manage apps add custom app and here adding the the app is running on the localhost not ready like not running yet it will be running now okay so now this safe app that is supposed to run inside the inside the iframe is running outside so you'll see that it's waiting for a safe and it's never ending this is because it is expecting to receive the listener with the safe information that we saw before but here we have it inside the the iframe with the right communication between the safe up and the work page and the the safe app that we are that we have selected here in the in the web interface our default one is the one that is sent to the safe hub and here we can submit a transaction and as lukas showed you before there is this model coming from the web where you can submit it so the safe app sent the transaction information to the web now the web asks for a confirmation to our owner metamask i will put a high gas price here to be fast and then in a couple of seconds we will have our transaction confirmed hopefully well we can see the the model later the alert okay so uh that's all for the okay yeah there it is that's all for the safe apps sdk now we will switch to the contract proxy kit uh as you may know the contract proxy kit its purpose instead of being just running inside the iframe in the safe web interface the purpose is to offer all the functionalities that the safe contract have to every the app or to every the app that is using it for example uh well this this typescript library will create a safe app on behalf of the user transparently and once created it will allow the well it will allow to batch transactions to send meta transactions to manage all the owners this this safe haves also users can reuse their existing saves we will see this later that if you already have a save you don't need to create a new one when you are using the contract proxy kit it also offers the integration with the safeapps sdk and last thing is that because it is a safe what we are creating you can always take this uh these save fibers and load it in the into the into the safe multisim web interface and there you can see all your transactions configuration owners the contract version and everything of your cpk which is something that is would be hidden if you just use it as a as a library so this is the [Music] the architecture or the structure of the cpk project for for using it you don't need this but it will help if i explain a couple of things here so these boxes are type script classes the main one is the cpk and this class offers some public methods as a as an api that that the app that is using the cpk will will go here the cpk has a safeaps sdk connector and this uh implements or integrates the safe apps sdk so if the if the cpk detects that is running inside the iframe inside of one of these allowed urls then it will know that is running as a safe app and will override some configuration that will we will see later and if it's if the cpk app is running standalone outside of the web interface then this won't be needed there are also two important classes these are the flight flip adapter and the transaction manager the transaction manager is something that will allow to to send transactions directly to the blockchain using the cpk transaction manager or there's also the uh the option to use a relay in this case the safe relay our relay transaction manager right now if you check the cpk code you'll see that this this is this is implemented but right now it's not working with our backend because there are some checks that don't allow the cpk to to use it but in the near future future future uh we will have dissolved and hopefully add more v layers to make it a bit more agnostic and finally the flip adapter offers some utility methods depending if the app is using the web3 provider or the ethers js provider and this these two classes will be used when the cpk is initialized and that's why it is important to mention them before so we can go now to the contract proxy kit repo on github that i have here contract proxy key inside of the gnosis github account and yeah when you are creating a new or or an existing map to integrate the contract proxy kit first we have to install it and import it the versions we accept for the providers are the one three one and two and for ethers version four and five one instantiated cpk there are two methods that can be confused a little bit in the beginning but i will explain the difference so there is this static method called create and then we have the constructor the recommended way to create the cpk is using the static method create that will inside called the constructor and when you use the create it allows to initialize or to configure all the cpk while the constructor won't be is not so flexible let's say that ways so here we can see an example of how to instantiate the sapk with the web3 provider and etherjs provider if we are using web3 we we import both packages we create an instance of web3 and we have our object the cpk we call the method create and then we have to pass these parameters that are used to configure the the cpk if you remember the the graph the diagram i showed you before this if leave adapter is one of the important classes i mentioned and for this class you would have to instantiate it outside of the cpk and this gives the cpk more flexibility in case uh somebody wants to create its own adapter or whatever so if we are using the word three we call the we instantiate the word 3a adapter passing the word three object and then this object passing it to the to the create method apart from the if leave adapter there are other parameters like the owner account if we want to so the the cpk will create a safe proxy contract and if we want a specific account to be the owner of this safe we must write this down explicitly in the to pass this as a parameter so in this case this account would be the owner of the safe we are creating with ethers is something very similar we have the ethers adapter instead of the web3 adapter and it requires two parameters the ethers and designer coming from the ethers library and then just to call the create with this object the last parameter we need to configure the the cpk correctly so we have the if leave adapter the owner account and the last one is the the network configuration so the cpk already have a list of networks where we have all the contracts that are used inside the cpk deployed like magnet shrinkaby and some others but if somebody wants to use the the cpk in a different network on in the local host for running tests or whatever it is needed to include the network id and all these contracts that are used the master copy address the proxy factory the multi-send address and the fallback handler address yeah with the addresses you want where these contracts are deployed so the cpk we know that we'll create a self account right so we have the safe account the proxy and the owner there are two methods in the in the main class the cpk that offers the public api and these methods are the get owner account that will return the owner of the safe and the address that will return the others of the safe if we are using a safe as an owner then the cpk detects that and he uh he will not create a new safe he will just reuse the existing one so if we are using a safe as the owner these two methods will return the same address that is the owner here we can we can see it very similar to the sdk the safe apps sdk we have the access transactions with the same the same signature of the method we have to pass an array of transactions and here we have uh an additional property that is operation depending on the transaction you want to send that can be a call or a delegate call and here we can see some examples of some transactions that are executed when using the were three or the ethers there are also some options to set the gas price when [Music] when using a batch transaction or the gas limit and yeah here you can see how to run the tests and remember that using the cpk can or allows to run this up as a as a safer and yeah you have here more information here in the docs if you want to read more documentation in detail you have the cpk markdown that lists all the methods inside the cpk class and you'll see what they what their parameters are and what they return so i think now we can check the the example of app we prepared for this using the cpk remembering that this app is not really using the the save up components that should be used and uh here just this app doesn't have any purpose just to to call these methods that are public and and just list some information for example there is a method that is called is safer so here we are we have this app running inside the iframe and it returns that yes it is a safe up if we have the same app here outside deployed somewhere inserts outside of the of the web we'll see that the cpk detects that is not receiving any information from the web page and then it knows that it's running standalone also uh you can get the cpk address with the balance the owner which is the same here as the safe we are using outside this will be used uh when the relay service is ready but here you could write the direction the url you want to set for the relay and here from the other side uh we can send a transaction for example here you see that the the model that lucas so uh showed before is the one coming from the the web and this works uh exactly the same as the as the safeabs sdk in fact is it is using it we are on drinkaby we can confirm okay and then there's also some new functionality in the new version that allows to configure the the module so the save contracts are modular and you can add more functionality adding them here you could for example this example module in the in the ringcavi network the daily limit module uh here you could create a transaction to enable this module or disable or get the list of modules that are enabled for this safe and here outside we have to save with different with different data because this is not running inside the safe and here this will be the same and i think that's it yes so uh thank you very much for having us uh so as a as a resume we have uh two sdks the safe apps sdk and the cpk they say fabs sdk is more focused on running inside the the safe multi c web interface and the cpk is it has a more general objective or it's it is more flexible and can be used in every the app and that's all thank you i good luck to everyone that is participating in the in the hackathon this this month if you are interested in running a an app a project that with any of our sdks just talk to us in the in the discord channel and we will be there so thank you okay thanks guys um i think we had a question in the chat um just from allen and yeah it says it must have been while you were explaining it was during um your section lucas which was this only applies for dabs written with the latest version of the cpk 2.1.0 i'm not sure if you can answer that uh yeah i actually wanted to mention that the cp the apps that are built with cpk would um be a safe app if they use the latest version so it doesn't apply to every depth that's already using cpk already if you just happen to know about that at least not yet until they upgrade yeah so there were there was a release recently if you are already using the cpk with an old version please update the version to get this functionality okay great um if there there's no questions left thank you so much lucas and hermann for the session today and you can reach them in the discord sponsor channel and if there's any links you'd like to share in that channel as well that would be great for the hackers um but cool thanks guys thanks for having us thank you very much 
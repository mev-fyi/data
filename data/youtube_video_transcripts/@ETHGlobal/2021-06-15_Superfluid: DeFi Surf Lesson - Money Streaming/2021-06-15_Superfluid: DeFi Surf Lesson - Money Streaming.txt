today's workshop with superfluid we have patrick and francesco with us who will walk you through defy surfing lesson money streaming um so i will let them take the floor in a second please anyone who has questions post them in the chat and if you want to keep this conversation going afterwards join the discord channel um sponsor superfluid in our event discord all right we for you francisco i'd like to introduce yourself all right hi everyone uh super cool to be here uh with all of you i'm usually on the other side of hackathon so it's it's always exciting to be on this side be envious of you but it is what it is so i'm francesco i'm one of the founders of superfluid and today uh here with with patrick my colleague we're going to tell you a bit about what we do but the main point here is to make you understand what you can do right because the most important thing at a hackathon is building and we want to see what you can do with our technology so i'll give you a brief intro on what we on what superfluid is and then i'll hand the mic to patrick who will show you how to use it so here we go so superfluid superfluid is a protocol for digital native programmable cash flows this is very important because so far there's never been a way to digitally represent a cash flow now cash flows were always a series of transactions over time but they were disjointed right you've got a payment now you've got a payment in the future and then afterwards you would say you would piece to piece them together and say okay this was a cash flow right but that makes it very hard to program around so what we did at superfluid was uh trying to improve that from the ground up so we built digitally native cash flows so why we're doing this is because we think digital money is broken now obviously we use it every day it works right we we all use money but the fact that we've ported an outdated system without upgrading it is what is this mistake we always do with online businesses right like if you think of netflix when they started it was blockbuster but with a website they did exactly the same thing but they had a website so it's obvious that when you start using the internet you just kind of copy things but then when you start using the medium to its full extent is when you go kind of next level and we think while obviously you know the blockchain is a great way to move value on the internet we still haven't seen money 2.0 because services uh are flowing in real time right when you sign up for service online you start using it in a continuous way right you you sign up to netflix you get access for until you kind of sign off but you still pay once in a month right there's there's this disconnect between how you pay and how you use the service and that is only there because our payment systems are so antiquated so what we want to do at superfluit is build the next generation of money right so we're rebuilding money from scratch improving on the token standards we have to create a more expressive money layer a money layer that can express cash flows on chain as a data structure enabling uh developers like yourselves to use those cash flows into their applications in a way that wasn't possible before and we do this through perpetual money streams so money streaming is this concept of transferring money over time so you have to throw away transactions right don't think of money moving as lump sums but instead think of money moving uh fluidly right so every second a tiny bit of money is moving from one account to another now the way this happens in superfluid is without gas and without intermediate transactions so as a user you open a stream with one on-chain transaction and after this money will keep flowing until you stop it or run out of money it literally flows forever with no gas right so this is really powerful if you use it properly and you can use it for a lot of different things but the really cool thing is it ties service provision and value transfer directly right every second of uh value that's transferred to you you can provide services and vice versa right so every second of a service you use you can pay for and this is very important because if you don't have delays you have no on payment risk and obviously it's crypto we can do all of this with no intermediaries and we can embed logic into it creating even more interesting applications now the way superfluid works we basically store a lot of data on chain on kind of how the money should be transferred over time we use the systems clock so the blockchain's clock to tick forward the balances the balances are updated uh on the fly because they're basically calculated at every block by the blockchain but this doesn't require transactions right we only make transactions when we change the state so when we open a flow and we update it or when we close the flow then we have to make a transaction but otherwise the money will flow with no transactions and that's very important because it gives users a very good experience they only do one transaction and money flows forever now the way superfluid is built we use a concept called super tokens so super tokens are erc20 tokens they're compatible but they're different they're much better they can do more stuff and you can make any token a super token by uh upgrading it basically wrapping it like wrapped ether you can also create your own tokens using super token the super token standard directly in this case you never have to wrap and unwrap and we also have a concept called the agreement library but that's a bit deeper so go look for it in our docs now when we say superfluid is programmable cash flows what it means is you can build applications which react to cash flows so if i send a stream of money to what we call a super app this super app will be able to react to that stream so imagine i start sending you money and your reaction is to send me a token back right and what we've just created is a streaming exchange which is one of our bounties for this hackathon so this kind of logic is possible with uh superfluid but it requires a bit of a shift in mindset and the reason i say that is because we're used to transactions right we're used to an instantaneous transfer so i send you money now you have it that's it now cash flows have a life cycle you start a cash flow you can update it you can close it and because of this we need to build our applications with real time mentality right as long as the user is paying i have to do things when the user stops paying i have to do other things right so a bit of a shift in mentality but it's extremely powerful now super apps uh you can you can build superfluid and two different ways use our javascript sdk which patchwork is going to show you or use the super app framework now we're gonna do another uh call with that in our discord next week so if you wanna work with super apps come join us there and we'll have another workshop so if you're not a dev but you still wanna kind of wrap your head around this go to our dashboard and there you'll be able to just open streams uh we support all the test nets we're on x-tie we're omatic so just go crazy try it out and if you have any questions go to our discord and we can help you there now i'll leave it the floor to patrick who will drive you through how to actually uh use superfluid in your app fran while i'm doing my presentation do you want to maybe pull up the bounties so we can rattle those off real quick yeah so uh for this hackathon we have ten thousand dollars in prizes our top prize is two thousand five hundred dollars for whoever can build a really good ux ui for a checkout experience now superfluid are perpetual streams right so they're perfect for thankful services right so the example i was using before subscribing to netflix use it every second you should pay for every second and for that we read we need a really good checkout we then have uh free bounties that are fifteen hundred dollars each and these are for streaming exchange for uh a way to stream money into a savings account and in this one there's actually a joint bounty with stake dial so check that out it's extra one thousand dollars if you use stakedown and superfluid and the third bounty is for whoever uses uh the erc777 callbacks this is also a functionality that's built into our tokens and uh we want people to start appreciating this more because it gets rid of token approvals now if you've ever used uh you know uni swap or other apps on mainnet you know that approving a token every time is expensive it's annoying and ultimately it's unnecessary you'll find out uh how by checking out superfluid uh we also have three thousand dollars in an open uh bounty pool so anyone using superfluid even if your hack doesn't kind of fit into these categories you still get a piece of that action so pat go for it all righty so now that we're all jazzed about superfluid we know we what we can do well let's talk about how we're going to do it so uh this is the uh the surf lesson of the day is we're gonna learn how to ride the super fluid wave so the first um if this if you want to take one thing away from this little workshop here is that i want you to take a look at this line here alice dot flow we're passing bob's address and we're passing some number so in essence what this is doing is in one line we are creating a flow of tokens from alice to bob at a specific flow rate and that's pretty much it that's that's the gist of uh what we'll be learning today um and um let's dive in so uh we kind of package up all the things that you need in a javascript sdk and you can read the docs on this if you want to learn more essentially it's just a matter of installing a couple dependencies depending if you're using ethers.js or web3js and then calling the initialize function on the on the sdk which is just going to fetch some contracts uh addresses from a resolver and then it's going to load them up so that you're not having to uh to do any of that stuff and you can get jump right into creating new streams and the docs of course are here if you need it and uh once you've set up the sdk now we can figure out which token we want to stream to somebody by going to the token list and getting the address and then we create a user object so carol equals sf.user and we provide some details about carol such as her wallet address and the token that we want to be streaming and then we call that function that you saw earlier carol.flow and we provide the arguments there so who who are we flowing to who's the recipient we provide their address and then we provide a flow rate and so the flow rate you're seeing here is a thousand tokens per month and there's a lot of decimals and calculations and stuff that you're going to have to do so let's figure out how we can calculate flow rates i put together uh this helpful little tool here and by the way the presentation uh is is fully open source you can click the link we'll put it in the description of the video you can click the link um and load it up and play with the code and edit it you can copy the code for into your application directly some of these will be react components that you can just grab so for this example here uh what we're going to do is first we're going to set some some base values so we're going to calculate how much time is in a certain period so in one minute we have 60 seconds everything is in base seconds here um something to keep in mind we're always dealing with seconds because that's um like fran was saying that's the clock uh for the the blockchain's internal clock is in seconds so in one minute we have 60 seconds in one hour we have 60 of those one minutes and then 24 for a day and 30 for a month and so once we establish those now when a user goes maybe to your adapt and wants to say hey i want to flow you know one token per hour well you're going to need these constants here to calculate what the flow rate should be and so in order to calculate the flow rate all we do is we take one token and divide that by the period that we're looking at so if it's one per hour we do one e18 divided by one hour and that's going to give us the flow rate in tokens now you might be saying what's this one e18 so this is one with 18 decimals and that's standard for most tokens to have 18 decimals and it's something that you might need to pay attention to when you're getting started it might be easy to say you know okay one is one token but it's not it's actually one with 18 decimals and i put a link in the bottom here make sure to pay attention to units when you're working in solidity um or in javascript and you're in your calling functions on this library there's a link to the docs there so if we run this we can get a flow rate that we'll use when we call the sdk so for instance one token per hour is two seven seven seven seven that's really a long number and one token per month is also this really a long number um and that is our flow rate in seconds adjusted for 18 decibels which we call units of weigh so don't don't get too hung up if this is a little confusing right now just remember that you got to pay attention to units when you're uh when you're using tokens okay so now we know how to create a flow we know how to um how to calculate the flow rate so alice started flowing right and now we want to see what's happening with the flows so now it's time to fetch some data back so we wrote a transaction on chain and now we want to get something back about alice's account or maybe about someone else's account we're going to use a really nice query service called the graph for this and with the graph we can query things like account details uh different flows that are opened events on our super tokens and transactions there's a link here to the playground if you want to go poke around and start writing queries and there's plenty of docs and resources in the link here now don't be uh you know scared off if you're not familiar with graphql you can pick it up pretty quickly especially with the examples that i'm providing but essentially you're just going to define a query in in your app and then you're going to call make a post request so you can use axios you can use fetch you can use any library there's also apollo graphql which is specifically for that but you don't need that like it you know you can take this example here and copy it and run it and it'll work just fine um the only thing you need to pay attention to maybe that might trip you up is how to pass arguments so in this example we're asking for an account and the arguments that we're providing are give me an account that has an id of this value and that's their that's the account uh address that's the wallet address for the account that we want so that's that's how you um pass an argument to a query and then inside the body of this uh request we are just passing the structure of the data that we want so we want to get all the flows owned by this account and um uh the specific elements of that we want are the flow rate which we talked about earlier the sum which is how much tokens have been flowed over time the last time it was updated and then uh some details about the specific token so this example here is in a react component which is in the presentation that you can just copy and uh that's in component slash graphquery.js and so all this is doing here is taking that query that we you just saw and putting it into a table so we see for this account for alice's account she started a flow rate um here's the flow rate that's one token per hour if you're familiar the last update here is a as a time stamp and the sum is zero that's a little interesting we'll come back to that and the token details we have the id which is the address of the token and the symbol so this is epec so this is uh the super token version if so at this time right and you can go into your console in your browser and uh convert this to you know human readable time if you want um at that time alice started flowing tokens at this rate she started flowing east x and so you might say okay well if that you know let's say that was three hours ago or something right why is the sum zero well the sum zero is because uh what is actually written on chain right now does not include does not account for the time since the last time she updated so so the balance is moving so the ethex is flowing right but because we're not submitting transactions like every single block to update something uh the value it look it appears as if it's zero in this query that we made and we need to do some calculations to account for the difference right so she started streaming three hours ago and she hasn't submitted another transaction since then so what's on chain uh you have to do a little bit of extra calculations now if the recipient wanted to go and take those tokens they can totally do that and uh do whatever they want with it that would submit a transaction and write it and then this value would get updated right but this is just something to keep in mind that what's on chain is only the last action that somebody took so in order to calculate the actual sum of tokens flowed in three hours we need to do a little bit of extra calculation so the on line seven here is the actual um calculation uh we're just taking this the existing sum from the query that we got earlier which was zero and then we are adding to that the difference in time so now minus the last update this is just this is basically the difference between now and the last time transaction was submitted times the flow rate so if now is now is now right three hours ago is a new date three hours ago we're gonna set last update time equal to that we have the flow rate from the query we have everything we need um we're just we just need to multiply the flow rate tokens per second times the amount of time that has passed and if we do that then we will get about three tokens and you might say okay why is there a little bit of precision loss here well there's a number of reasons why but for the most part you know if this is dollars or something we don't really care when it gets down to that number for your ui it's not that important what's on chain is going to be correct you don't need to worry about that but when it comes to to making your front end and showing this data for users at this point you know don't worry about a little bit of precision loss you can always make improvements later so once you start working with calculating flow rates and stuff like i said in a previous slide you know units are important don't forget units and so you might want to start using a big number library and i would recommend ethers project slash units or you can use bn.js those are two good libraries to use and that's going to help you convert between you know 18 decimals etc okay so now for the final boss so streams are alive you have to remember this when you're presenting this information to your users these aren't fixed uh you know transactions it's not it's not ten dollars ten dollars ten dollars it's like ten dollars per second per hour right it's alive it's growing it's moving and so i've got an example here and the react component is also in the presentation that you can grab basically i can if you just calculate uh the the increment over two seconds and then create a timeout a timer that updates the react component every two seconds then you can make a nice little ui county here and here's a couple examples so things to keep in mind here we have this really long number do people care about all these extra digits probably not so let's trim that down let's go down to four digits um and then we're also you know missing some commas over here so let's let's add the commas okay good we've got a nice formatted number and then we also got a nice animation there that's making the transition a little bit smoother makes it feel more you know more friendly of an application so this component like i said is available for you to just copy and drop right into your application okay so your adventure is awaiting uh we talked about super tokens and we talked about streams how we can move tokens over time two other features that i didn't dive into today one is erc 777 and like fran there's a since like friends said there's a bounty specifically on using that feature which allows tokens to react to certain events so if you send somebody tokens then the recipient like logic can be triggered and like all this magical stuff can side effects can happen uh using callbacks and so that's erc 777 and then if you ever wanted to execute 100 transactions at a time you can use the batch call feature and all of these features are native to super tokens right out of the box so um really looking forward to see what you guys are doing with super tokens and then if you want to bundle that all that up and you're feeling ambitious uh dive into super apps where you can automate some of the stuff and code in a lot of business logic so uh feel free to reach out to us on discord and check out docs in the example section if you need help yes it's time to take some questions fran are there any that you've seen so far yeah so there seems to be a bit of maybe something i should have cleared up a tiny bit better in my uh in my pitch uh so just wanted to make this clear a user can have as many streams as they want both uh incoming and outgoing at the same time from the same account so you know if you're a use if you're a business for example you're accepting subscriptions you could have uh hundreds of users sending subscriptions into your account now as the receiver you don't have to make any transactions to receive that money it is automatically consolidated into your balance and uh it's yours to spend like there's never there's no delays you don't have to do any actions it's just there and uh actually it's really cool because you can also stream it out so if you are receiving a stream of money you can also stream uh money out and you could potentially have a an account with no balance right zero balance but with you know a hundred thousand dollars coming in and a hundred thousand dollars going out every second and that's just make sure you save for retirement though yeah yeah absolutely but that's possible right uh so uh you don't have to do anything as a user and um when pat was showing uh the streams uh the sum that you see there is stream specific so that is not necessarily related to a user's balance that is just to calculate how much that specific stream uh has moved so far check the user's balance what you would want to do is basically check you either just query the blockchain and say how much is his balance or you want to sum all their streams some all their transactions and then you can calculate it yourself so there's two different ways of doing that but this was more about uh specifically you know alice is sending money to bob how much money has alice sent to bob uh so far right so the sum zero does not refer to a user's balance we have one question about when does the erc20 get swapped to super token when i start a stream question so no so basically you would want to do that beforehand so if you want to use superfluid you first have to upgrade your tokens right so then you you kind of top up your super token balance and then you can stream but the stream and the balance are kind of separate right so you can have super token balance because you want to use other super fluid functionalities not necessarily streams and uh you can have receive a stream without needing to ever upgrade right so the upgrade is just kind of a utility but ultimately you can think of super tokens as their own tokens there's another question which is how does that go into the balance on chain without gas fees well we get that question a lot uh my kind of go-to answer is black magic uh but the truth is uh basically we are using the blockchain in a slightly different way right we're not using it like a paper ledger we're using it like a live machine with state and uh a clock right and the clock is what moves money it's not uh transactions so that's kind of a simplified way of explaining it but if you join our discord uh we can kind of go over this i'm happy to kind of explain it in more detail that's a discord.superfluid.finance and we're there all day and just kind of love these kinds of conversations so just kind of come and join us i think catherine switched on her video so she's probably going to kick us out now thank you guys that was a super great presentation um i'm sure uh that everybody learned a lot there's been a lot of good questions and yeah you can either join on the discord the specific super fluid discord or um for the next three weeks uh you guys will also be on the global discord channel so feel free to hop in there anyone who would like to continue this conversation really appreciate your time uh and everybody's saying today thank you very much thanks katherine thanks everybody thanks everyone bye and good luck at hack uh money make something cool make me proud 
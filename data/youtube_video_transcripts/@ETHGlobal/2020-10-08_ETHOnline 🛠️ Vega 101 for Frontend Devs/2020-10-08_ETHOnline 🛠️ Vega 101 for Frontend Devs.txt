vega 101 for front end devs today um we have by joining us who will be taking us through this session one quick reminder to everyone any issues please do not hesitate to reach out to myself or anyone else on the east global team and with that i'll pass it over to barney to introduce himself and get the session started hi there everyone uh i'm my name is barney i'm one of the co-founders of vega and i'm going to walk you through the vega protocol today give you a little bit of background information uh and then also kind of introduce you to some of the the features of the vega apis and the features of vega for front-end development and building visualizations i'll also tell you a little bit about some of the uh the bounties that we've got up during youth online and some of the ways you can participate there and uh at the end i'll be happy to take any any questions that you might have um so just to sort of set the agenda there briefly to talk about what we're going to cover today what is vega protocol i'll give you a bit of a whirlwind tour of some of the things that vega can do and just give you an explanation of that um i'll talk through the hackathon bounties and what it is we're looking for um and uh then i'll show you some of the developer resources that we have at vega that you can use and then finally and for the bulk of the session i'll actually walk you through some live coding and we'll build a very simple uh very simple kind of web app that connects to vegas streaming apis and takes a look at some of the data that vega exposes so let's uh let's get started and talk first about a bit about what is vega protocol so vega protocol is what i call like a next generation so cross-chain derivatives decentralized exchange um protocol is designed to allow capital efficient derivatives trading and it's also designed to allow cross-chain settlement so in order to do sort of risk management and the performance that we uh we wanted uh to kind of compete with uh centralized exchanges vega is designed as its own kind of blockchain its own sort of layer one that's uh kind of vertically integrated is optimized for trading from the consensus layer uh all the way up to the kind of apis and databases and stores that exist on the nodes that gives us uh fast decentralized order books it also gives us the ability to do things like prevent front running and there's some great research on our website if you want to take a look after this which has some papers and stuff around front running around liquidity and other things it also means we can offer really high leverage and really high capital efficiency compared to other on-chain exchanges that's because we don't need to use things like liquidation auctions and we can actually do atomic margining and liquidation so vega gives us sort of vastly improved experience over purely ethereum only uh sort of derivatives protocols uh and it allows us to create a kind of really exciting set of products but it integrates with ethereum and in future other blockchains but the first integrations with ethereum so to begin with every asset that you trade on vega will be like an ether or an elc20 um and that's that's kind of where the assets come from and how the settlement works and we have a bridge between the two blockchains that works to do that so that's a very very high level on vega and you'll see some more as we go through of some of the things that vega can do so let's talk a little bit about what we're doing in terms of bounties um so in terms of bounties um we're offering five thousand dollars worth of bounties i think probably i think it's paid in die um there's three thousand dollar grand prize for the winner of the uh the overall competition and then fifteen hundred dollars and 500 each for the runners up in third place so what we're looking to do is we have this huge trade of data that comes out of vega it's a completely transparent blockchain which means you can find out way more information about what's going on from a trading perspective than you'd ever be able to see on a centralized exchange you can find out when people get you know closed out or wrecked you can find out what the prices are you can find out the risk management that's going on see everything happening and you can connect to the streaming apis and so something we're really interested in doing is understanding like you know how we can visualize that data how we can look at it and how we can show what goes on in vega to give you a demonstration of what vega actually looks like right now this is our test net so here you can see the vega test net running and you can see it looks a lot like a normal trading interface um everything happening here is happening on chain so this is all uh stuff that's going on on an on-chain environment everything is decentralized um and you can see it looks very sort of normal and boring in a way like it's uh it's a functional uh front end it's functional exchange but it doesn't really highlight any of the exciting things about vega like the ability to see what's going on with other people's positions to see the money and the movement of collateral between people's wallets and things like that so we're really interested in seeing the different ways we can pull that information together and visualize uh that information um so that's really you know what we're looking for in these uh in these bounties and something that we want to see and so that's really going to be the focus of what we're doing here so to talk a little bit about the architecture of vega and how vega works oh geez my screenshot slime show is not not behaving um talk a little bit about the architecture and how vega works um vega is uh vegas blockchain as i mentioned it runs on uh tendermint as a consensus layer which means it uses the same underlying software libraries that things like the cosmos network but as i mentioned the blockchain's customized for trading so the entire core of vega is custom built to process the vega protocol to do risk management margin calculations and managed positions and to keep the network safe there's lots more information on the web at vega.xyz as well so there's a few developer resources that will help you get on the way so docs.ethonline.vega.xyz is a public doc site which shows some of our api docs there's actually another testnet doc site which when you get on board into the test net uh gives you a lot more information and i'll show you some of that in a minute um but we can we can go through some of that and you'll be able to see it gives you a lot of examples of how to use vega we also have the community forums at community.xyz and the discord where me and a lot of the technical team hang out and are happy to answer questions at vega.exposed discord so what i want to do now and for the bulk of this session is actually to give you some sort of hands-on uh stuff and some hands-on demonstrations of some of the things that are going on so uh the first thing we're going to do is quickly just take a look at the vega block explorer to kind of orientate ourselves with the network so here you can see the block explorer hopefully uh which is our current network so our testnet is currently running seven seven validator nodes and you can see some information about the recent blocks and if i click through there um this is a very early block explorer but it's something that you'll be linked to in the test note onboarding and you can you can use to to see some of the content of the blocks all right the uh we'll call that a call out of curse of the demo and we'll move on from the block explorer but let's look at the uh the actual documentation uh because that's uh so taking a look at the documentation here this is the vegas sort of tested doc site with a number of different bits of docs um so first thing you'll find here is lots of information about vega markets and how to trade on them uh you can see we've got a lot of information about what's currently there on the network and some of the information about how things work i really suggest you browse this um while it's in signing again if you want to make transactions on the network um then you're going to need to use the wallets we have a command line application for wallets which allows you to create your own on your machine at the moment we're also running that as a server um sort of centrally to enable us to quickly create test net accounts when we recreate the test net and to quickly get people up to speed but eventually you'll be able to download that it'll be completely open source and they'll also be web wallets as well so in future they'll be the ability to use vega to trade entirely from within a web on it so that's another way you can do that looking at the api section we've got some pretty good documentation for the three types of apis that we offer these apis are all exposed by the node so there's nothing centralized here it's each node runs a server we have grpc so that's the kind of protocol buffers rpc we have very sort of comprehensive docks of that which are generated from the underlying protocol and you can see all of the things that can be done there including making trades with drawing collateral depositing collateral getting margin information etc uh we also have rest apis the rest apis are effectively based on the uh grpc um apis as well so they use the same underlying apis but they're just allowing to do things in a much simpler way um using kind of curl or using your your favorite sort of uh web client and then the final final type and the type that we're going to look at today in most of this session is the graphql documentation the graphql apis graphql is really ideal for building front ends and streaming data visualizations because it allows you to quickly get streaming data to customize queries and to join across data types we have good again we have reference dots there but we also have a graphql playground um which allows you to uh to test out queries so for example here i could take a look subscription trades let's get the size and let's give it a price and if i do that you'll see that every trade that's happening on our test net is streaming through into the graphql playground so it's really easy to sort of test out your queries and test out the apis using that playground again a very useful tool there's a section of how-to guides as well um so if you want to sort of get started with a few different things there are some guides which kind of walk you through stuff as well if you find something wrong on testnet or on the documentation or something is missing please feel free to report an issue that will take you through to our notes page and the notes page can be used to uh to share your feedback with us and to get started you can also report feedback in discord or use the forums as well i'm very happy to take that in any any of those channels don't forget to join the discord it's really uh where the technical team hang out and where i hang out where it's easy for us to answer some questions uh there's a few bits of examples and again these things will be will be shared with you as well there's a few bits of examples so for instance we have some some place api scripts on github which give you again some some code which you can get started with which help you kind of use some of the apis via rest or grpc we also have a python client for the grpc so if you actually are a fan of python or you want to do some data processing uh before the data gets to your front end you can actually use the python library that's published the python package index and you can you can access vega that way as well um so that being said let's start uh let's start our project and let's see what we can see what we can create using vega in a short amount of time uh so let me let me start from the beginning outside my finished version and let's recreate this in a live coding uh live coding sort of settings so first thing i'm going to do is i'm going to be using the svelt frontend framework for this because it's very very simple very easy to get started and build something but everything you see here will be very easy to translate to react or your own favorite front end so i'm going to create a new new project here by doing mpxd get to download the spot template from github and then i'm going to install the libraries that i need to access graphql and subscriptions uh from my application so again just quickly do that i've actually done that in the wrong place it's not going to work i can install those things and it should work just fine there we go and i'm also going to copy the file which i've got which contains uh my test net information uh into the [Music] into the source folder of this just so that i've got that testnet logo information available to me so now what i should find is that if i create another terminal here and do an npm run dev should find that oh yeah npm install for the template let's do that so we do an npm install to install the the framework the the dependencies were downloaded but that didn't actually install the framework itself so now when i do a run dev we should find that we get uh there we go we've got the dev server running so if i switch to my browser um we can see that i've got the uh this felt hello world we've got a basic application up and running nice and easy so let's go back to vs code and then let's get uh let's get creating something so um firstly let's just go to index and let's give the wrong one that's my finished version and let's give this a call title trade stream so let's give it a title save that and we'll see as soon as we switch back to there you can see that everything has updated so let's take a look into my live documentation my source application application here um and again let's change this heading to the online trade streamer just check that everything is all hooked up okay there we go that's all working so now we can start actually writing some code um that's going to use vega um so we're going to get rid of this name from the script which means that i'm going to just open the main.js and we're going to remove the name from the properties as well we don't need any of these properties in here and we can go back to the application and now let's actually create a new file to download some trade data from vegas so let's use the uh the store framework it's very simple to use and that allows us to sort of quickly do this so i'm going to firstly i'm going to import the readable store definition from spelt framework if you're using a different framework this will be different and then i'm going to get the subscription client for graphql so to subscribe to a graphql subscription there's the import there and i'm going to import the endpoint that i'm using for testnet uh from the secrets file that i just copied in uh so now let's just quick let's just create ourselves a function in order to stream some trades so this will be our trade streamer and this is some sort of this is how smelt works when you export a function like this to create a trade stream then um you basically create a stream or a store uh it's a readable store it starts off empty so we just created initializing an empty array and we we provide a function which should be called when this when the store is started and it provides a set method which gets passed in that allows us to set the data so let's create an empty array for our trades uh and then let's create a client uh to the graphql endpoint for our subscription so we've now got a subscription client that lets us run a query the same as in the uh in the graphql playground so you know the same as this this playground here we could run this query and we'd get things out of there so let's actually copy that query that's going to be useful to us perhaps and let's put that query into our code so did not work because i'm going to copy from my other files so let's take the trades let's get the price the size but let's also get the id of the buyer and the seller and the id of the trade so we've got all that information available to us uh in the response um and that's also set ourselves a maximum number of trades that we want to store in the clients only 256 so that we don't end up filling up all our memory if we leave it open for a long time um and that's basically ready to ready to create a subscription now so let's do this request equals client dot request then we send the query to the request query it is a trades query and let's also just tell this that we would like um actually that's everything uh and then let's subscribe to the results of that request and we send an object in and the main thing that we provide is a next function which is going to take the response and do something with it so we're going to get the response from this graphql query at the moment we've really just submitted this query instead we want to subscribe to trades to vega the vega node and we're going to get a response focus and trades in you can see it's really actually very very simple to get this data out of the node um and now let's just do a bit of a check let's just check that our response actually has some data in it and the data contains some trades because if you get empty empty data you don't want to have a sort of null pointer exception or something like that and if it does let's log first off let's log in the console that we receive some trades just so that we we can see what's going on if we need to debug it and then let's add those trades to the existing trades away that we just defined up here so we'll do eight okay we can concatenate the trades on and what we want to do is we want to concatenate the first updated.trades so this is just again the response from the graphql query um and then what we can do is we can say let's slice that array and let's set it to be a maximum of the max phase so now if the if after we if after we concatenate that um this isn't going to work this is going to probably it's going to work or not um this may not work because this is probably going to always take the beginning of the uh probably always get to the beginning of the array so we're going to get the wrong set of uh of max trades uh which is not going to be exactly what we want so i'm going to leave that off for now we're going to have to deal with that later we'll deal with our very long thing and then we call the set function that was passed into this just to set the uh the trades and set us on our way so that's all there is to it to create something that connects to vaguely so when we when we build a simple uh simple front end in a second what we'll find is that we've done we've done enough to subscribe to the trade data we've done enough to receive that data add it to an array of trades and then publish that out to the application that we're building and one of the things that's really exciting about the playground is if you click docs on the right you can see that everything that you can do as well as all the docs that i showed you earlier everything you can do is here so you can take a look at the trade subscription you can see everything that's available you can see what data i get about a buyer you can even find see how you can actually find the positions and the margins for for the buyer if you wanted and view that so you get a really really rich set of data that's available um via the graphql api so let's move back to our application and let's build something in the front end because at the moment we've just got the boilerplate that came in so let's replace that boilerplate instead of a paragraph with that text in let's stick a listing and then let's do trade and then in brackets we're going to do trade.id here and this is just useful so that it can sort of keep track of the trades and understand knows that um the id is the thing to key key the results on so we'll do that and then in there let's just create a an align and then let's just put some information about our trade so trade size and trade price so there we go so there we got that in there and now we're just going to need to import the the trade stream that we created so let's screen four and then let's just instantiate that trade stream and create a new trade stream like that let's see what's happening do we have a list of trades or not no we have an error that's the fun that you get in the live demo trade is not defined that's that so it's a reasonable sounding error so let's try and work out what we've done so we've defined our trades there this is an interesting one stores what are we missing what time are we missing this so something's fair to compile this door so let's just take a look back in there is ah we've got our function start but after this function start we need to close the brackets around the readable that we're returning so we compile that and see what's happening over here hey there we go so we've now very very quickly been able to build something that streams trades but as you can see um we are just getting the size and information so let's see if we can add some more information to these trades here so let's add the buyer and seller um so let's go into the app and then let's just have the trade dot dot so now we can see who's buying and selling the trade and then let's go back and there we go so we've now created created something pretty interesting there and then let's just um let's go back into the store and let's just see what happens if we um this works right that's going to be the wrong way of doing it it's going to be that should take the uh the last rather than the first and so now we should start to see things no i'm my uh my programming is not working very well here so let's remove the slice and then let's just go for let's go for this way around of doing it um you guys will probably be better coders in javascript than me oh yeah it's not my usual language but let's reverse it so that we get the new ones on top at least so we can see them kind of coming in there we go so we can now see each time we uh get a new block we're getting a new set of trades being pushed into the client here on on vega so that is um it's a very quick sort of tour of some of the front-end development um obviously pretty much every feature is available via the the uh the graphql so as well as being able to sort of look at the data that uh it kind of gets created by queries and by uh subscriptions you also have mutations so you can actually submit transactions to the blockchain you can uh you can prepare transactions and submit them once they're signed um and you can basically do everything that you could do uh for many of the other apis in any interaction with the vega network via the graphql um so that kind of concludes a very very quick you know obviously we only have sort of half an hour or so to do this so very very quick um sort of summary of how to start building things with vega and hopefully what you guys can see is that actually connecting to the nodes connecting to the network getting data out and querying about trades it's really really easy obviously if you're building interesting complex visualizations it might be that you actually want to do this in python or do this in node and store some data and do some stuff on the server side or it might be that you want to just build something entirely client-side that's up to you but we've done a very quick tour of the the graphql apis and some of the documentation and we've demonstrated how easy it is to build something against the vega network and nodes and use the apis so i really would like to hand it over to you guys just to sort of um to find out if you've got any questions uh and i'm gonna take a look at the chat as well and see uh see if anyone uh see if there's any questions that i can answer in the chat as well but uh feel free to add questions in the chat or once i've gone through these ones speak up as well um so first one uh block time on vega is roughly in the order of sort of seven or eight hundred milliseconds um so if i switch back over to test net and look at our network panel here um you can see the last block every so often it samples a block duration so sometimes they're up to a sort of a second 900 got some slow blocks going on there i'm not sure why um we occasionally uh build new features and give ourselves some performance headaches um and that's something that will obviously settle down as we get through public testimony and into mainnet that the the usual expected block time is still seven or eight hundred milliseconds um we're seeing slightly higher sometimes at the moment that maybe that some of the new features are uh slowing things down occasionally but you can see you're sort of getting getting that seven or eight hundred a lot of the time and then occasionally getting longer blocks as well so that's the block time question um do groups of trays come in with each block uh yes uh so and trade ordering works um in the order that the group of trades in the block exists so the block is ordered it's not just a bag of not just a set of trades it's actually an ordered set of trades um there's actually some really cool stuff um if i go into right here there's a really cool uh paper that i really recommend if you're kind of interested in some of this techie stuff and there's actually a talk about it as well um so the talk um which is just moved quite a long way down uh this one here with up with klaus talking about mitigating front running and ordering so this is this is a really good introduction talk to this but there's a there's a paper on it as well which is available here on iscr and this paper basically covers um our unique research into how to get fair ordering of transactions within a block so we've actually designed a protocol that runs at the consensus layer of vega to give fair ordering and it means that if you trust that the uh so two thirds of validators are um sort of you know honest nodes then you also trust that you've got fair access to the order book so that's uh it's really worth a check so any other questions for anyone on the technical side on the protocol side on the network side and anything about vega very happy to answer any questions you have and of course obviously if there's no questions right now we're also very very happy in discord uh to answer questions in the public chat channels or you know via dm and direct message uh on twitter wherever else you find us i'm always very happy to to engage with you guys uh same in the forums uh just interested to keep the conversation going to get your feedbacks as well as your questions anything any feedback you have anything you like anything you don't like uh very very happy with any of that uh this demo on github yeah i'll happily um i'll happily share the code from today's demo and some links for some of the other demos and example scripts as well absolutely very happy to share that information as well thanks so much barney that was a a great session um if there's no more questions from any of the hackers on the call as bani mentioned you're more than welcome to reach out in discord in the sponsor channel and um yeah perhaps you could even share these slides in the sponsor channel barney uh for the hackers and yeah thanks so much that was really great and thank you for training very very happy to share the slides and i'll get them on to discord in the channel um and we'll get the information up on to onto github for the quick example demo that i created and some of the instructions for that too so happy to share that thanks everyone for your time and uh thanks for your interest in vega thanks for participating in the hackathon i'm really excited to see i think there's some really cool stuff we can do with the data in vega we it creates an absolute ton of data and i think it'll be really fun to see some of the visualizations and you know i've been thinking about ideas myself but i don't have time to do any so we're really excited to see what you guys come up with cool thanks bonnie cheers thanks 
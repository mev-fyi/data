great and we are live so we have john here from uma who's going to give a workshop session on how to get started with device easy is oracle john i'll let you take the spotlight all right hey everybody i'm john i'm a smart contract engineer at uma uh we built web 3's optimistic oracle which can pull any kind of data on chain that you need your products or protocols it's super flexible and i'll just kind of walk through what an optimistic oracle is show an example of how to use it to solve for a particular real world question and then show a little bit of code from a contract that could be a good base for hackathon projects all right welcome to hack money ooh transitions okay so the goal of the workshop i want to explain what an optimistic oracle is i want to show how it works uh just do a walkthrough of a demo and then explain a little bit of what teams are actually using it for because it's been live in production for a couple of years and we've got a bunch of interesting protocols that are using us plus one off products for treasury management and that kind of thing so basically if you're not familiar oracles are a really important part of a smart contract system they allow you to communicate between the external world and on-chain environments and the external world might include other blockchains too so it's not just about these real world events that you would think about it could also include off chain calculation it could be bringing together a lot of information from multiple chains and we'll get into a little bit of the flexibility when we talk about some of the projects that are using us but they're really critical um basically the problem with smart contracts well one of them is they don't know anything outside of their own context where that context is a state that's stored on chain that they can access through various call functions and that doesn't include most of the information that you would want in order to resolve economic agreements or run an application and it's actually best practice to not store too much data on chain it's really expensive you really only want to store what you need for an atomic transaction like all the state is right there for you to use in a particular transaction everything else if you can have an oracle system that is economically secure it's better to offload that to some kind of off-chain source so a type of oracle you might be familiar with are price feed oracles this is your chain-link style oracle and it's kind of the powerhouse of defy a lot of d5 is built on top of price feeds that are coming in as like a push-based system where it's like here's the price of eth or here is some information about the world continuously updated on that kind of system it's not as great for scalability though the way that it works is you try to verify it in advance you have a bunch of nodes or some other mechanism that are reaching an agreement on what the actual state of the world is and then after you've verified that that's pushed on chain and that answer is more or less final um so it's not as flexible as you might want for a new type of protocol and you also don't get the shared security either that your security is based on how many nodes there are or how strong the consensus mechanism is before the price gets pushed on chain there's no recourse to it but i don't want to downplay it too much obviously i'm biased working on optimistic oracles but a lot of d5 has been made possible by a price feed style oracle so optimistic oracles have their own trade-offs they enforce correct correctness after a dispute so it can bring any kind of verifiable state of the world on chain you don't even need a particular api endpoint it assumes that a proposal is correct unless it's disputed and if you're familiar with how optimistic roll-ups work you'll see that it's basically the same mechanism where with an optimistic roll-up you're proposing like here's a bundle of all the transactions that happened on this roll-up if that is incorrect somebody else can dispute it and you can go to a fraud proof system this is very similar to that except it can be any piece of data that you might need for a smart contract it's there's a clear price tag to manipulation too where if you have a lot of contracts that are using the optimistic oracle as a security layer the cost to corrupt the oracle the cost to rig a vote should always be kept higher than the potential profit to make a bribery attack non-economic that you don't have to rely on altruism from any of the voters in the dispute resolution system and it allows for recourse too so if the data is wrong you have a chance to correct that but a big thing is though as you can imagine the delay is something you have to work around and we'll get into that with some of the protocols that we've built and other people have built on top of that it is possible to have more or less instant settlement based on some price but we'll get into that later um normally there's a delay of like two hours or so and it just depends on who is actually waiting those two hours a bit vague but i'll explain later uh this is kind of the process flow i link to the slides in the chat um i won't walk through this entire thing right now but i think maybe looking right here is useful so what happens if there is a dispute is that it gets escalated to what we call the data verification mechanism or dvm and with that it's a vote of all of the uma token holders so when somebody makes a proposal they're posting a bond uh behind their data that they're going to lose if they're disputed and ruled to be incorrect same thing for a disputer they're incentivized to dispute incorrect data because they'll get a cut of that proposer's bond but they also have to post a bond to prevent arbitrary disputes when it escalates every uma token holder can go and make a secret commitment on chain of what they think the actual answer was and the reason is kept secret is well one to make bribery attacks harder nobody can prove how anybody else voted and people could make claims about how they voted that are incorrect um so the the bribery type systems that you see around um uh like rewards systems would not work for this um you couldn't demonstrate that you're voting a certain way in order to collect a bribe at least not in advance um it also prevents lazy voting where you can't just see like oh here's what the majority is voting right now i'm just going to vote that way you do have to think about it and you have to follow the methodology to find what the actual correct answer is and then after all that's done there is a 24-hour reveal period everybody reveals your votes and you figure out what the actual answer was based on the majority response and the voters that voted with the majority get newly minted uma tokens so you are incentivized to participate in the system and we have pretty high participation compared to you know a lot of dow governance systems where there isn't any direct incentive uh with uma you always have an incentive to vote you always have an incentive to vote correctly and you're disincentivized to vote incorrectly even if you are with the majority it's going to tank the price of uma because the oracle's not working anymore and since your voting rewards are based on how many uma you have you have a lot at stake you want your value of your uma to remain high and not have the oracle break and then uma goes to zero so that's kind of where the cost of corruption profit from corruption calculation comes in okay so that's a lot of high-level stuff um i want to give just a simple demo of how this works in practice by walking through a flow of um just like a basic factual question and then showing what the proposal process looks like i'm gonna pull up my terminal here um so we're gonna deploy on covan i ran through this earlier today so hopefully it is still working so what i'm doing right now is i'm deploying a contract called a long short pair contract and this is a contract that uses the oracle to settle essentially a bet there's a long side and a short side on some question the holders of the long tokens will get paid out 100 percent of the locked uh collateral if the answer is yes the holders of the short token will get 100 of the locked collateral if the answer is no and these parameters are kind of set in here if you're interested in the code you can dive into it later all this is um in our protocol mono repo so you can take a look so you can see here the question is going to be will the uma hack money demo be presented on cinco de mayo so this isn't something that is like a price feed there's no api for this it's just a factual question about the world that uh a neutral third party with access to a computer and the internet would be able to verify that you know what the answer to this is and it is cinco de mayo so you can kind of predict in advance how this the rest of the demo is going to play out um so i'm going to mint the long tokens and the short tokens and send those to various recipients on covan just wait in a moment [Music] okay so that's minted and now i'm going to submit a request and we'll walk through a bit of code later to show what this looks like in a smart contract but this is making the request now saying like this answer is knowable at this point in time uh we're calling to expire this contract and get an answer and settle everything and so then we can go over to this optimistic oracle interface which we set up to answer a lot of these types of questions connected to a wallet and you can see that there are a bunch of proposals and settled responses this is a yes or no query so this is an example of an identifier that you can use within uma this is if you want to just ask a yes or no question that's just written in natural human readable language so when you go in here you can see some more details here about how to answer the question so if you're a proposer anybody can be a proposer you just have to back it with a bond so anybody can see these requests come in and anybody can answer them and in practice that's what happens and it's fairly competitive a lot of questions will also have a proposal reward attached to it so that the proposer has a reason to take the risk and post the bond and give an answer so here you can see a more detailed question and you can see various answer values which are customizable depending on your use case but basically the idea is you would answer one or p2 if the answer is yes that uma hackmoney is this demo is taking place on cinco de mayo so i'm looking at the calendar and it is cinco de mayo so i'm going to answer one and submit that all right so that is going through and we should see an update pretty soon once this transaction goes through that is going to basically start a dispute countdown there's going to be in this case because it's demo oh there we go okay so it did the update and then i refreshed unnecessarily uh there's basically 45 seconds left um i did link to the covan uh interface here so if anybody wants to go in there you could actually go and enter a dispute um there would be very little consequences except that the demo would probably not settle correctly which would also be interesting though i wouldn't be too mad about it because at least you're trying out the system but basically there's like 22 seconds left this would normally be about two hours if you have a lot of value that's at stake you might set a longer challenge window to make sure that there's plenty of time for people to get eyes on it and dispute any information that's incorrect but two hours is sort of like a default for most use cases this is 60 seconds just because it's a demo so three two one okay it should no longer be possible to submit a dispute for this so the interface has picked that up now it should be doing some updates here uh basically saying that this is now possible to settle um so i'll go in do that final step to settle it and this will pay out the values to the the long and the short tokens so the holders of the long tokens in this particular case are going to get 100 of the locked collateral from this contract calling the settle method and it's settled so that's the basic idea oh and this is updated now so this is all done if you go back to the home page here this should update to settled yeah so this is settled now all right so the demo all worked sweet [Music] okay so just to reiterate we asked the yes or no question we answered the question and any book proposer could do this you could have gone in and uh done this if you had some covan eth and you know anybody else can dispute you you wait for resolution and then we accepted the information is correct if the sid get disputed it would go to the data verification mechanism and that's like the whole 48 hour period of the whole on-chain voting process by design that is really rare the economic incentives for the proposers and disputers disincentivizes incorrect answers and incentivizes correct answers so disputes are very very rare and that's by design so what you need to know um if you want to ask a question to uma's oracle you have to write a uma improvement proposal or umip that describes the methodology for arriving at the answer so we have methodologies for a lot of different things various token prices yes or no queries custom kpi option outcomes there's a lot of cool things you can find this all on our website the liveness period is customizable it can be longer or shorter depending on your use case and resolution is all decentralized anybody can propose anybody can dispute um and every dispute shares the same level of economic security it escalates to a vote of all the token holders even if it's just a matter of a hundred dollars or something it doesn't matter you'll have the full weight of the multi 100 million dollar market cap uh staring down at your question and trying to resolve the answer correctly so these are not hypothetical things these are things that people have built on uma so there are prediction markets there's insurance optimistic governance is something i've been working on um so being able to manage and gnosis safe optimistically rather than with a multi-sig so you have more trust minimization there rewards as a service kpi options and synthetic assets which are kind of a classic use case for an oracle so these are some examples of questions you could ask so poly market is these kind of yes or no questions that we were looking at you know did something happen in the real world um sherlock is a insurance protocol and the question is basically was this protocol hacked with a little bit more complexity they've got like their own identifier there across is a cross-chain bridging protocol and for that the question is basically did i do this relay correctly it's a permissionless system where anybody can be a relayer who advances you the money on the destination chain when you made a deposit on the sending chain and then they get reimbursed after the dispute period and so when i was talking earlier about that waiting period and who's going to actually wait it would be a bad user experience if you're trying to bridge from one chain to another and you have to wait two hours this system means that the relayer pays you immediately sometimes within the same block within like a few seconds and then the relayer is just waiting a couple of hours for reimbursement so the user experience is that it's basically instant but you have the full economic security of the oracle and then a couple of other examples success tokens shapeshift did some fundraising with venture capital firms where instead of just selling them tokens at a discount they sold them a token with an embedded call option that is only valuable if fox's token price goes up and so that's implicitly a discount but it's more incentive aligned because it's not like the venture capitalists got 50 off the current market price of fox their upside only comes if fox's price goes up past a certain level and stays there at the expiration time and then with boba network which is an optimistic roll-up this is a custom kpi option they want to incentivize people to use their network in certain ways you saw like the uh the optimism um airdrop plan of having multiple air drops it's kind of a similar thing with boba uh but with adjustable kpi so each epoch um they're maybe focusing on different thing and calibrating to try to encourage something and so the payout for the tokens that are being airdropped people uh is based on tvl in this case um so higher tbl means higher payout everybody's incentivized to increase tbl on a boba network all right so uh our team is growing um everybody's hiring as you know uh we're really really actively hiring especially for front end engineers right now we recently were about to double the size of our smart contract engineering team um the range of things you can build on our oracle is immense and so it's really just a resource constraint kind of thing we can only build so many things in-house we would love other teams to collaborate with so even if you're not joining our team we would love for you to build on our oracle and we'd love to support you as much as we can as you build out your own protocol and there's some links in the slides that i sent in the chat and if you aren't personally looking for work or interested in working on this but you know somebody that might be please send them our way we do have a really uh good referral program too so you'll get payouts if they make it to past such and such interview stage or if they join the company if they stay at the company for a certain length of time and these are all through kpi options too so it's using our own technology for it so please refer people if you think that they would be good and that is about it um you can follow me on twitter i'm stepping in for chandler so i left him in as a contact on telegram just his voice is a little bit shot today and i am open for questions let me see what people are posting on here link to the dashboard uh yeah so that link is there um for the covan version of the dashboard so um if you go in and create your own um uh contracts you can kind of follow these demo scripts the scripts are also public so you can test out deploying something on covan or for your own hackathon projects if you want to use coban as like a test net for that you can use this interface if there are no proposers the question just kind of hangs there until somebody proposes so you can also propose yourself and that's kind of a common flow too so with a cross for instance you're doing one step as a relayer you just you want to request an answer to the question of did i relay this correctly and you're also proposing the answer at the same time because you just want to get paid back and that's literally like one function call for that so that's a common flow how is uma different to teller so i'm not super familiar with teller my understanding of it oh if you scroll up javier so the covan optimistic oracle ui is the link to the interface um i do think that teller is a price feed style oracle so i think that the the difference there is really like the mechanism i could be wrong about that maybe teller is an optimistic oracle but i think it's a price feed style oracle feel free to correct me thanks um cool it looks like we've got a few more minutes too if anybody wants to ask questions um live as well i'm happy to answer or dig into something oh you know what actually i forgot to show you the the code so let me go to that i'll walk through some example code there's like a fairly simple question where the contract received the information that the proposal has been either disputed yeah the interaction between the contract and the oracle um so i think that this uh we can dive into like the actual um contract addresses and i can add those links but i think walking through the code of an example contract here might be useful and just kind of show the flow so this is a really simple contract the purpose of it is just to do a demo where you're getting the eth usd price so you put some eath into this deposit box and then later you're going to say give me x dollar amount of each obviously the smart contract doesn't know what the current price of eth is and so that's where the oracle comes in and says here's what the current conversion rate is so if you're withdrawing one thousand dollars here's how much each you would actually withdraw this is in our protocol repo under packages core contracts and let me add this to the chat as well in case i didn't okay yeah this is a good one to use as like a base template because a lot of use cases are basically modifications of the same deposit box idea you put some money in a box and then based on certain circumstances you withdraw money from the box or send the money to some other address um so the flow is basically this there's a bunch of stuff here for just handling withdrawal requests you don't have to think too much about it it'll just be useful when you dive into the code yourself tracking different deposit boxes for different users the price identifier is going to be eth usd in this case rather than yes or no query here we're getting the conversion rate of eth to usd um so the actual functions so when you make a deposit there's no interaction with the oracle yet you're just putting money in there and it's updating the state within the contract but when you start a withdrawal request this is going to start interacting with the oracle so you want to withdraw a certain dollar amount of eth you're going to request a withdrawal and this is going to request an oracle price so this is an internal function that will do that there it is so yeah it's basically going to get the oracle contract address and it's going to call request price and then that's going to be open for proposals after you've requested the price which is the eth usd exchange rate at the time of the withdrawal request so then following that anybody else can propose and that's just within the oracle system itself so you would go to the same oracle contract either through our interface or you could go directly through ether scan or you could have a bot that's automatically responding to these things since this one's a token price one it's probably just a bot is gonna be the fastest one to do it um so yeah so that price request is made anybody can propose uh assuming that it goes through uh the whole process and it's settlable now which means that either it wasn't disputed within the challenge window or it was disputed and you got an answer from the dvm now you can execute this withdrawal and that's going to get the oracle price and so very similar you're going to call a function on the oracle down here so first it's going to check like is there a price was this resolved um otherwise you know error out and then it's going to call settle and get price which is going to give you the actual price it's going to just check to make sure that it's a positive number there's no negative value for each doesn't really make sense and then it returns it and that oracle price is now going to be used within this contract to send the correct amount of eth to the user um so taking a look here you're getting the exchange rate and then you use that exchange rate do some math on it and give them the correct amount of each and i won't walk through like all of like the math or whatever but um you can take a look at it and see like reasoning about it how it works there's some comments to explain it um but that's the basic flow um you're going to request some information from the oracle you get a response which is some uh value and then you use that value inside your contract to do some other stuff does that make sense cool well i guess if there aren't any other questions um you know we can wrap it up i think i shared all the links in the chat let me see oh when is it disputed i see okay could i pull data well there's a couple questions could i pull data from an api to get the going rate for an item on a resell market um yes but you don't have to do it directly through like it's good to have an api that is accessible to anybody to use so any proposer any disputer any voter could access that api and see what the going rate was at a time of request so you could absolutely do that in some cases though you don't need an api like the question about is it cinco de mayo when this demo happened um there is no api for that you know it doesn't exist but you can verify it just by like thinking about it and doing some research and seeing like when this was posted on youtube or whatever but yeah absolutely you could use an api um and what do the fees look like for using uma so the fee model is basically maintaining that cost of corruption profit from corruption um uh comparison so if you are a big protocol that is using uma and contributing a lot to the potential profit from corruption by providing value that could be stolen if you corrupted the oracle um the model we're kind of leaning into right now is that you do a token swap with the uma dao so you have uma tokens now with your protocol or with your project and you're using those to vote so you're participating in the voting system and the tokens that were received in the uma dao can be used to buy back uma from the market and basically drive up the price of uma to increase the cost of corruption if uh the numbers are getting too close together and right now i think the total value secured by um is around 130 million dollars and the market cap is something like 500 million dollars so we're in a fairly safe place right now but that's kind of the the general fee model and it's it's kind of a friendly fee model too because you know you're not getting nothing from it if you're doing this token swap and it really only applies to people that are contributing a lot to total value secured so if you only have a contract that's going to have like a million dollars or two million dollars secured it's not significant enough that we would ask you to pay fees if you're bringing in 100 million dollars and we're close to the threshold um then we need to talk about like a token swap and it's in everybody's interest because it keeps the oracle secure um it's also a nice revenue stream for whoever's holding those uma tokens in their protocol or their project because they get the voting rewards now and they're highly incentivized to vote correctly because they rely on the oracle's correctness for their own system so their actual cost of corruption is much higher than just the value of their uma tokens their cost of corruption is the value of their uma tokens plus all of the value of their protocol basically yeah oh so uh javier so when it's disputed that's just going directly to the oracle contract so anybody can dispute anything you don't have to go through for instance this optimistic deposit box contract to dispute um you just go to the oracle and you can dispute anything that you see is wrong and in a lot of cases you'll be doing it through this interface a lot of people are watching this interface for mainnet to manually dispute stuff and check and then sometimes there's the contract now it is disputed um well this one wasn't disputed though did you want to i guess we're running out of time but oh how it knows it's disputed uh so it won't settle on a price unless a dispute is resolved so when you're going in and you call um uh this like get oracle price here and you're getting the price from the oracle you won't be able to get a price unless it's resolved which means either it wasn't disputed and the time limit is up or it was disputed and the dispute process is done now and you have a final price um so that's kind of where that check happens and you'll see it error out um here you'll basically get in this case uh unresolved oracle price on this check we'll call has price and if you do this and there isn't a price then this will also just air out too hey thanks john for the presentation and thanks everyone for joining if you have any more questions feel free to follow up over discord and yeah enjoy your day thanks 
all right we are good to go hello everyone thank you for coming to our first workshop of road to web 3. super excited to have you all here and we're super excited to have ion ivan on tech here um from morales is going to do a workshop on building full stock polygon apps so with that being said um questions go into the zoom chat and ivan will answer them all at the end and i've been feel free to take the mic perfect thanks a lot thanks a lot guys so yeah in this video in this workshop we're going to discuss how to build full stack because full stack means a lot in crypto and it's actually not that easy to do if you just use the bare bare bone tools like web3.js or ether.js why because they don't create a connection to your backup and often when you create dapps in most cases you're in the back end why you need to initiate the user session you need to put a cookie on your user's computer so you can have a normal user session so you can save data about the user so if they enter something on your website you want to save off chain in your database you can do that and of course you can swing smart contracts you can sync user events and transfer for all of that there needs to be a backend component and this is the hard part about creating dapps when we've interviewed dub creators and we looked at the biggest projects 90 of development time goes into building the back end for your adapt and this video we're going to talk about how you can make this process quick and how we can make it as quick as possible so uh you should see my screen by the way let me know if you don't see my screen you should you should see my screen this is what this talk is about and we're going to focus on polygon but also i'll mention how to do this cross chain because at the end of the day we have a goal want to build great dapps and want to build them quickly because when you are in a situation like this in a hackathon of course speed is of the essence you gotta be quick if you're not quick you're not gonna build great things and you want to build on polygon but as your dab scales you will have a lot of demand from other chains and if you look at the big projects today they're almost always cross chain you have some kind of components on other chains so you want to have an option to go cross chain and that's also what we're going to talk about how you can go cross chain seamlessly and how you can go cross platform seamlessly meaning that let's say you have your dab how do you build a website how do you build a mobile app how do you build a game let's say you have a gaming use case where your users have assets how do you easily get your nfcs your users into a game engine like unity so in this talk i really mean we're going to speak about full stack and full stack means that you are on any front end basically any whether it's mobile web game you're on any blockchain whether it is polygon or anything else and you also have this backing component handled for you so with this kind of tools with this kind of agenda the goal is that we will reach our our success which is of course that you get a lot of users you get them quickly and you you reach your ambition and that's what we're here for now you have a lot of ideas maybe you have some idea about nfc marketplace maybe some kind of webster game maybe something else no matter idea what no matter what kind of idea you have you will need exactly the same things to get started you will have to log in the user because that's what everyone needs if you cannot log in a user you cannot have an app you will have to fetch the balances of the user what how many matic tokens they have what nfts they have and so on so forth if you want to extend your dap cross chain you also need to do it for other chains for solana how do you build a dab which works on polygon on ethereum but also on solana which is non-evm we're going to discuss that then you need to fetch transactions meaning that when users do something in real time do you get an alert do you get push sms web hook how how do you do that it's very important and of course there you go back and you the back-end solution for that that's where we start really speaking about this big big part which is your back end the tune tab uh you need to have real-time alerts like we discussed and you need to build indexes so index is very important it is basically taking unchained data and making sense of it so the simplest example of an index i can give you is let's say you have a game where people can trade their nfts back and forth how do you get the total volume of all your user transactions you cannot ask the blockchain for the total volume the blockchain does not know the blockchain just knows the transactions and so based on the on-chain transactions now you can calculate them together and you can get volumetric so this is an example of where we take on-chain data and then we do some calculations and we have a new metric a new high-level more more abstract metric and of course when you have an indexer like this each and every block you need to update it because you have new engine data coming we're going to discuss that and the intercept transactions and transactions as well initiate transactions initiate transfers initiate smart contract interactions so no matter which block which blockchain you are on or which use case you have in mind you need these things this is cross use case standard stop and the problem that many people make is that a mistake many people make is that they are reinventing the wheel everyone is creating these solutions to do these simple things over and over again over and over again although everyone needs exactly the same thing the problem that that arises very quickly is that if you connect directly to an rpc node which is in many developers mind is the standard way of starting you have a new project you connect to an rpc node you quickly start to realize that it's very primitive low-level technology it's very very bare bones it cannot tell you anything basically it cannot even tell you the balances of your users you cannot ask an rpc node to give you the tokens that your users have it does it now you need to loop through a bunch of smart contracts ask each smart contract and then maybe you can figure out so number one it's a it's it's it doesn't have a lot of data it's unstructured data so you always need to do work on the data that rpc node gives you this is by default it's a horrible database what do you mean by that well the blockchain is unstructured if i want to sort let's say i have an nfc marketplace or nfc game i want to do some sorting let's say i want to have the biggest users in my game based on volume i cannot ask that from an rpc node it cannot do queries it cannot do aggregation it cannot calculate some kind of average for me it's up to me to build around the rpc though then build these features and it be it this requires massive codebase so what what uh what does happen when you connect an rpc node directly well what does happen is that you end up with a massive massive code base around the rpc node where you for example i need to log in the user and you need to verify signature so in order to establish a user session between your server and your user you need to have a user session with a cookie you need to do it yourself if you do it from scratch you need to figure out how to do real time so that when something happens on chain something happens in your user in your user database how do you quickly get an alert into the front end or send an email or send a push notification how do you do this user life cycle where they sign in and then you initiate the pipeline of fetching their their their events and their tokens and their and their nfcs how do you think transactions smart contracts and you need to not only build this i mean building this is difficult enough it's going to take a long time you're going to make many mistakes it's going to be very difficult to debug but it's not only that you need to build you need to provision you need to provision infrastructure so when you get many users that this monster this this ginormous thing actually scales and you to ensure that it can actually be debugged when some some issue arises not only you have to scale you to debug you need to maintain it there are new versions of different different different components you need to maintain it so all in all it becomes a mess very quickly and that's why most web3 developers say that this takes 90 plus percent of their time because creating a smart contract creating the smart contract part of your dap it's easy it's relatively easy is it expensive it's expensive you need to have a professional you need to have audits but once it's done it's done it's on the blockchain it's not something you have to maintain or something that you have to sit and babysit but everything off chain you're backing off chain that's a babysitting job and you're signing up for years of work years of scaling and massive back-end team that will handle it for you so when you are building a round rpc node like this you have slow iterations it's difficult to move quickly it's difficult to test long time to go to market and when you have all of this for example you iterate slowly difficult to test you increase your failure rate so what is the solution you don't do this you don't connect straight to your pc node also this hurts your cross-chain capabilities because once you build around an rpc node and then you want to go to solana you can't it's impossible you need to start from scratch and then build another monster like this but now around another blushing and around a new type of architecture so what if there was what if there was a prepackaged solution which does all of this for you out of the shelf and what if you could just use it with a nice sdk that works in javascript and typescript and c-sharp you can use it in any game engine what if there was such a solution and that's of course what we at moralists are building where you get the back-end solution which is the morale server and mri sdk which is the the sdk but and it supports many languages and let me show to you how it works in one way you can think of it like firebase of crypto in the sense that you don't have to manage the back end we will soon have a self-hosted version so you can self-host it yourself if you want but if you don't want to self-host you can use it as firebase where you just get it up and running you create a dab then you connect your sdk on the front-end and you can just focus on building the end and that's the magic you have most of the stack already figured out for you and it is cross chain and it is evm and non-evm everything out of the box so in a way you can think of it as firebase of crypto although it's it's not one-to-one of course comparison but in a way you can think about it like this so building with morales is super simple let's say you want to build a poly polygon that you want to log in your user with any wallet and also on any chain even if they are not on polygon you just write morales.web2.authenticate and as soon as the user clicks login in their meta mask you have instantly a user profile in your morales database you instantly have a user session basically how we we solved this problem of how to create a web to user session based on web3 wallet login and this is many steps on the backend where you have to verify the signature you need to put the user into a database you need to create a session and as you can see also as soon as you as soon as your user is logged in you get all the assets all the transactions everything everything everything cross-chain in your database now the beautiful thing with this is that this database updates in real time so when your users do new transactions this database also gets new transactions in it and when the users are moving assets this database reflects that so this is very important because you can basically work with a database like you would in web 2 but it is reflecting the on-chain status of your users and that's very powerful because imagine how long time this would take you to build yourself to set up to connect to now to set up infrastructure to listen for changes to ensure that you don't have duplicates to ensure that there are no bikes that it works cross-chain evm non-avm it's years of work years and years of work now let's say that you want to read the database you want to get the transactions of your users very easy morales don't get transactions bam guessing the ethermatic balance get native balance get um irc 20 tokens one line of code and this is really our motto can we make as much as possible one line of code and it should be one line of code we're dealing with simple stuff relatively simple stuff here to get the transactions to get the native balance to get the nfcs but these simple things in reality are very difficult and this is where a lot of our motivation for creating morales came from because when we entered web 3 and we looked at big projects like open c or ether scan we thought whatever the guys are doing there at openc or etherscan it must be easy because it's not complicated they're just showing your nfcs and allowing you to trade nfcs in openc how difficult can it be or ether scan how difficult can it be to read from a node should be easy turns out they have massive backups massive teams massive massive work to maintain and scale it because the blushing cannot tell you many things without you building this tech stack around it and so our motivation here is to give the average developer who comes here and wants to build even if they don't know a lot about web web 3 or the developers that are in web 3 our goal here is to give the same tools the same capabilities the same power the same technology as openc has so that you also have it and we even teach you how to do it in our videos here you know i cloned opencm towers or uh or how to do it with your social network you can go subscribe to morality youtube channel and you will see a lot of this real world tutorials and this is so important because these things they should be simple so we can actually build more complex things on top if we all spend months just fetching the simple data from the blockchain which we do right now most developers like i told you spend 90 of their time doing the simplest things doing these simple things they are not simple but the result of it is quite simple but in on the back end it's massive it's massive and look you you've just written four lines of code to get the balances here and then one line of code to log in you remember from before so basically with five lines of code you've written something that could be a default dashboard we have all their assets yeah but you and you have the user login every it's basically like a copy of zapper zapperfy or um azirium so it's it's just five lines of code so this is true power that you're getting here now you can also do queries which means that you can have filters you can have conditional queries you can have aggregation so this is very important because you can run any mongodb query on this morales database because morale's database is just a wrapper around mongoose b so all the data you have you can run any query which of course you cannot do if you just have a node node that does not do any query you can also listen to on-chain events which means that if you have an on-chain event let's say in your smart contract you just enter the api and you can listen for it very quickly and all of the events will be entered into your database easily and you can watch them in real time you can create a subscription like this and get real-time alerts into your front-end or web hook whatever you want very easy it is unlimited power unlimited power also because it's by default cross chain so let's talk about indexing so indexing means that each time something happens on chain that you run some kind of calculation you run some kind of calculation you update some values and then you wait for the next thing to happen like for example with this volume example i gave you that something happens on chain you update the volume or something happens on chain and you update something else so this is very easy to do you just specify which smart contract you want and then you just dot subscribe and then in real time bam bam you can index and and and do it we have amazing docs i mean we put so much time into documentation because we know that this is the this is the most important thing for uh for devs to get started and we we ourselves have struggled a lot in web 3 with getting started getting into docs so we ensure that our docs are world-class so if you go to docs.morales.you can go through here and read about everything how to send assets how to initiate transactions how to log in users and finally how to send assets very easy morale is the transfer and you just specify whether it's nfc whether it's uh tokyo and whether it's whether it's native balance very easy to do so as you can see we basically covered what all the apps need here login user fast transactions initiate transactions real time alerts so guys we're gonna go to q a but there is more there there is more but wait there is there is more what is more likely sorry i hear someone came please mute i think it's android thanks with plugins basically this is uh infinitely extendable meaning that you can soon also create your own plugin as you know a morales database has the data about the on-chain about the users which means that you can plug in new technology here let's say you want to kyc your clients maybe you have a financial institution or something you you need kyc in your app you with one click you will be able to install a kyc plugin and then all your users will have a new table here a new column kyc and then yes now in each in each row so it's an example of the extensibility that is coming and this also means that when you build a moralist you know that it's future proof because for all new tech there's going to be a plug-in you want to have fiat in your application very easy morale is the plugins.fiat and you can you now accept fiat and sell crypto in your application you want to have a dex is one in the swap with one inch integration so all in all guys it's crosstalking by default both evm and non-evm uh and this is this is this explains it in a way and and also we have a lot of uh support for react for vue for react native for unity and this is all and more you can learn about if you go to slash morales.mage so morales mage and join our discord so you so we can teach you more there but morale is by default it is on all of these different platforms and i can show you for example our unic integration which we call the metaverse sdk so this means that with morales if you know simple c sharp and you can program in unity you can easily create xbox games and imagine you are in your living room and you just spent literally 10 minutes creating a game where you have wallet connect qr code you are in your living room you're sitting you're pulling up your phone on your tv you see wallet connect you just scan it with your world and now you run around with your nfc in your xbox game i mean it's mind-blowing of course you need to support web mobile uh they support all kinds of platform so uh morales is by default cross-platform meaning that of course it's web but also react natively support we support game engine and so on and so forth on that no guess i have some more slides but let's cut it a bit short here in terms of presentation and let's instead go into the q a and uh and we are going to discuss it uh i can actually take the questions uh myself here that i see technically uh so okay i see one question about centralized desantis so look soon you can self-host your morales instance that's important and also we have a very nice video on it uh where i explain it in depth because morales does not make your app centralized you know why because all the assets are on chain you can whenever you want you can build your own backend at the end of the day morality just makes it quicker for you but you have all the power always to go to come back to your own so let me actually open it up it's a great question it's a great question so let me show it to you so first and foremost all your assets are on chain so morales doesn't have any private keys and always in adapt you have on-chain park for example all your all your nfc smart contract assets and then you have the option part so here you will have a server you will have some kind of rpc connection what i just explained to you in this in this presentation you need to have your own uh backend connection you need to build this so this is by definition of chain now the question is do you want to spend months building this or do you want to have an off-the-shelf solution that does all of this for you and also soon you can self-host it which will ensure you can self-host it on your on your own machine so now you see that number one from an on-chip perspective it doesn't make your app centralized from an option perspective also doesn't make your app centralized and whenever you want let's say that your your that becomes big i mean first and foremost uh when you're thinking about your app if it has zero users you have zero issues with anything let's say that your that becomes big you have many users i mean at any point you can go back to recreating i mean if you want you can always go back to recreating this uh but when you are building from the beginning you got to be fast you got to try your things because what if your idea is bad nobody will even use it and you have spent months building this up and maintaining it and and creating a backing team you don't want to do that but also self-host if you want to self-host it will also be possible so that that's a good that's a good question thanks a lot for that uh let's see also how does maurice answer the scalability question for i mean that's our bread and butter the scalability question for blockchain it's also a big problem if you are to do this on your own to have your own back-end let me give some examples let's say you want to run this back-end for binance chain binachian spits out 2000 transactions each and every two seconds 2000 transactions you have to index them you have to put them into your database you have to make alerts in real time you need to send out notifications to your user and so on and so forth and then two seconds have passed you have another 2000 transactions so imagine the scale of this the same with solana so of course our bread and butter is to have the infrastructure to serve whatever blockchain we need to serve based on the developer demand so this is massive massive massive cos you can go to morales.org pricing and there you can you can see the cost if you want to use our our hosted solution and so you can self-host yourself as well uh let's see uh more questions it take you don't need to run any full node or anything our belief by the way is that you don't need to worry about any nodes because if when you are building a website you don't worry about the cpu imagine if if you built a website and you had to worry about is cpu intel or ecpu amd or arm or something else or something else or apple m1 chip you don't care about that it would be horrible if you had to care about which exact cpu does the machine have instead you have a unified cross cpu cross hardware web technologies that allow you to just focus on the end result but in crypto you build for specific node you build for example for ethereum node or for polygon node or for or for avalanche and while they are compatible with each other you have solano or ldron which are not compatible and of course it doesn't make sense that we as developers in the future will have to care about these differences because all apps at the end of the day need very similar things they need to do this no matter which blockchain no matter what architecture underneath so that's why ideally long term if this industry is to grow fast developers should not be even talking to nodes the only the only reason you should be talking to node is to upload a smart contract maybe and to maybe call a specific function a smart contract so that's important is there any way to interact with smart so exactly to interact with smart contracts you can use uh either you can go and you can get the web3 instance so you can get for example ethers and you can speak to it like this so morales does provide access to low-level tech like ethers.js so you can do it or you can also have the execute function which will do it for you here so execute function in morales will run smart contract function and so right now this is currently only for evm but and currently because it's only evm it's just a wrapper around ethers but of course as we are integrating more of solana and we have integrated a lot of solana already but the next step would be to fully integrate it so soon this execute function will also support solana for example so that's that's a big big important um reason why we do some high-level wrapping on top of the low-level libraries like e3.js because due to be cross-chain we have to create this layer on top i hope that makes sense uh do you support us yeah we support that's not yes how do you handle security part of user data well if you self-host you handle it yourself and of course we follow all industry standards to secure it and you can read more in the terms uh how that works how will morris allow communication between evm and non-vm so that's a good question when it comes to morales we are handling the off chain so we're pulling the data from evm non-avm and so on so forth the way it is currently is that you still need to redeploy your smart contract you need to create a version of your smart contract for non-avm but once you've done so and your users login your smart contracts get indexed we pull that all into a unified format so that's how it works and in the future there will also be bridges for this you know asset back and forth but currently morales is off chain it does all of the option work and we do have a roadmap to go also more towards on chain so you can also easily go between chains and you can transfer assets between chains as well so that's in our roadmap is not currently live but if we're thinking about the ideal world of webstreet development in 20 10 20 years of course it should be one line of code to send any asset to any blockchain from any other blockchain that's how it will be we're not there yet technically because even bridges are not that reliable we did see a lot of hacks recently as well there is one bridge i find a bit more interesting from celsius that is coming out i just read about it a few days ago but i mean we don't really have good bridge technology right now yes we do have bridge solutions but they need a bit more time for us to integrate them and and have a peace of mind does uh moralities have a we do have vdp vdp which is a vulnerability disclosure program yes we do have that and back bounty is coming soon as well it's a bit different uh let's see any way to mitigate users from griefing the platform to abuse api lookups for example the user can log in um to exhaust so yeah exactly you can set limits let's see where we have that rate limit here you can easily set it by writing this in your settings so you can rate limit how many uh requests anonymous users can do how many requests authenticated users can do and also what's the time window that's a good question uh which video tutorials do you recommend to do an nfc game in polygon blockchain i think you you can watch this nfc uh marketplace or just go here with three programming projects and you will see a lot here we have also i think we have some uh if you want to build the web 3 unity game we have this whole walk through about unity and you can watch this you know exceed me morales unity workshop uh where we show you how to log in with wallet connect and all of that but guys only two minutes left i'll give it back to the uh to the moderators thanks for great questions was fantastic questions and again fantastic speaking to you all if you have more questions go to morales.io slash mage morales.io mage like you know wizard and you you can join our discord there so join our discord and let's continue there awesome thank you so much for the super interesting workshop ivan um just echoing what evan said if you didn't have your question answered or if you have more questions definitely feel free to reach out to him on the global sponsor discord or on the morales discord um guys i'm sure he'd be happy just one final play if you know by the way if you like unity you like game engine we are actually looking for someone who can work with us and create tutorials so if you go to talent.morales.com so talent of moralization you can apply to game engine content creator and you you need to know c sharp you need to know unity game engine and yeah maybe we can even work together so yeah that's it for me guys thanks a lot have a good day thank you and for the rest of you i hope you have a great day as well uh we do have some more workshops and other event sessions today tomorrow and friday so hope to see you all there and with that being said thank you again 
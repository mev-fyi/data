um you can you can feel free to go there if that happens for some reason okay i'll look for a final thumbs up from the speakers and linda if i get all the thumbs up i need we can kick it off linda take it away cool thanks thanks everyone for attending this second ethereum dev onboarding session uh we had a great one a couple months ago so we figured we'd continue it um this session is going to be recorded so you can refer to it later and also please feel free to share it with others that you think could be useful for um the reason we put this together is we feel like it can be really overwhelming sometimes coming into the ethereum ecosystem and i'm not really knowing like which tools and resources to use also the space changes really quickly so we kind of want to be like some friendly faces and we have brought on some like really amazing devs today to talk about what tools and resources they use give some advice and do some q a so really excited about today um the structure is just going to be we're going to have austin just give a high level overview we're going to do some dev intros and then we'll have the speaker shoulder stack and then we'll feel free to put some questions in the chat if you have questions otherwise we're gonna bring up some pre-submitted questions and then uh just huge shout out to trent for organizing this he's been doing so much work behind the scenes making sure everything works properly so thank you trent for all that so um i'm just gonna have austin kick it off thanks for having me happy bowtie friday everybody uh i think that actually i'm gonna call an audible and kind of do the dev intros and the intro to tooling all all in one and we'll just dive right into to rikmu after this so i think we're at this and i keep saying this there's this inflection point i think with tooling in the ethereum space where uh some of the original tools kind of got the job done but they were kind of hard to use or didn't make sense to a new person and and there are uh you'll notice some tools that we present today there actually existed in a a tool to do somewhat similar things before but it only really got like 70 percent of the way and for someone to take on the challenge of basically having to start from zero but get it more to like 90 90 or 95 is is a heck of an undertaking and and these guys that are on this call today guys and gals uh they deserve uh basically a lot of credit for pushing it that extra distance and it and it's for you guys it's for us it's for the builders to be able to take those tools pick them up and run with them and and actually have a great experience the space is already so complicated that if you're dealing with headaches with your tools it just makes it just such such a hill to climb and and so a huge thanks to the guys and girls here that are helping out and a huge thanks to uh trent and linda for for having us giving us this platform i think that one one thing that that i would dig into to start with is sort of these are these are pretty opinionated stacks these are these are stacks from builders that have been building tools themselves and and they found themselves spinning their wheels or having problems with things and they said no we're going to do it this way and this is how it's going to go and i i think starting with rick moo that's a that's a great great great way to kick kick him into it but i think that like we we have to as builders as tool builders sort of think about the builder and and have them in mind and and also uh i think that it's it's it's easy to to only go the 70 and i really want to stress the fact that these guys that that took it to 90 really uh have created some great tools for you and they're going to present them today i'm really excited about this uh another thing that i kind of want to dive into a little bit is sort of the uh the the getting started like don't be afraid to dive in and get started and these tools will help you today there there's this it seems daunting when you start to get into it but really what we're going to find today is it's actually really really easy to build a decentralized application it's really really hard to build a good secure decentralized application but we want to give you the confidence and the groundwork to be able to just dive in and start building and that's kind of what this is all about it's about what are the tools in the space how how are how are they the best tools to be using and and how do i dive in and and get started with those uh one one last thing i will say is that you you might think you know everything also there's this there's this version of myself a couple years ago and i was building a decentralized oracle protocol and i was gonna get rich and i was gonna write a white paper and i was gonna kick everyone's ass and it just doesn't work that way like the the space is incredibly complicated and you have to understand that you don't know everything and and uh these guys and gals are here to help you kind of get over that hump both both both get up the hump but also get down and understand that there is like some serious complexity here but these tools are going to make it a lot easier for you okay i think that that is uh my my shield for for being careful about what you know and what you don't know uh these these presenters today we've got rick moo who created ethers.js web3.js did exist might be easier i don't know but he recreated it and there's a reason why and you'll see when we get into that and ethers kind of he'll take you through providers wallets uh the utilities that come with that how you interact with the contract it's kind of like a low-level scripting language right probably zero dependencies he probably rewrote all of them we'll see okay then we have patricio with hard hat again truffle existed but they rewrote they they built a new tool this compiler this this task runner and it's very extensible and and it gives you a ton of evm introspection and he'll dive into that and why it's so important and then we have kind of then then it kind of transitions to the dap building templates uh starting with ronin with with jolly roger and also his hard hat deploy it's kind of an extension of hard hat and it builds a lot of extra things and it shows how hard hat can be built upon as as you know we can add more tooling to that and also svelte we will see svelte come in here i think most of most of the guys on the call are react heavy but it's good to you know whoever's felt it dealt it and that'll that'll be ronin so then uh robin this is a fun one so robin created robin and his partner created a kind of a react hook generator library for each global for the hackathon so that shows that like some of these there's there's a lot of room for more tools to come in here and and new players to come in and he's i think you're funded by the norwegian government to create open source tooling around ethereum which is like so exciting for us that we we get like the norwegian government helping us build tools and then our tools can can also kind of help you build build your thing and then we have paul berg with create eath app i think the name says it all right i think we were all thinking it would be great to have a create eath app he's done a great job of taking create react app and plugging in all those artifacts that you have from existing like the die contract and ave and all these protocols that are that are super advanced he's plugged those artifacts in for you so you can do i want to create ethap i want to bring in ave i want to create you know something within react and when you get in there it's really fun and and this kind of plays to this developer experience thing he's commented things out and he's hid things within the react and as you start building you uncomment it and you have these magic moments of oh i get how this works and i get these tooling so excited to see paul uh present that and then i'll do my spiel on scaffold eath and kind of give give my hackathon stack also but really excited to have these folks here and get right into it i think we should just start with rick moo rikmu if you're ready uh let's let's let's kick it off with ethers.js oh cool hi hi um as a quick note the slides were very last minute so i was just oh i should figure to share my screen so i was pointed i should probably point out the features of ether's js overall um let's see if this works this new laptop so i'm still experimenting with sharing can people see my screen awesome uh so basically here's the quick over this is just from the docs by the way i think one of the biggest features of ethers is it has fairly substantial documentation um so some of the quick features um i just wanted to point out so first of all like like austin said very light on dependencies all dependencies are mit licensed so uh there's no worries about oh some random library along the line is being pulled in and now your stuff gets like gpl or whatever documentation it's complete it's tiny it's a bit bigger than this now but still about the same it's also modular um anyways i think i'll just move on to the actual slides like i said the slides are kind of last minute um oh by the way i'm richard um i think austin introduced me and all that good stuff already so share screen keynote um can the slides be seen yep we got it now once i click play let me know if they stopped working does that still work awesome perfect um so ethers.js um what is it so it's really a whole bunch of stuff um i was trying to go for the whole like here's all the things it is but i didn't have a chance to list everything or figure what else to include here um so by highlighting the things that's going to show off today i'm not quite sure what the target audience is really but hopefully this isn't too deep or too shallow but again there'll be questions at the end so feel free to ask so oh how do i make it go to the next the riddle um so one of the biggest issues people have with ethers when they first come to it from something like web 3 is that providers and signers are very very different things um people are used to web3 world where a provider is literally everything it has your private keys sitting in there it has the ability to look up the block number you can sign transactions send transactions so in ethers those are very separate things there's a provider which is read only oh by the way can you see my mouse if i wiggle my mouse so it's kind of me pointing no okay so there's no way for me to really point but i'm pointing at the under providers section um so the read only access there's no account access and some signers can return a or sorry some providers can can return a signer which do have an address they can sign transactions they can send transactions they can sign type data they do they do all those things that that you're used to doing within an account um but yes the abstraction is very very harsh in ethers and going back to what austin was talking about with the the opinionated thing um like in the future i expect this to be the case i do not want people having their their massive uh connected all the time to the internet guest node holding all their private keys just exposing to the internet if there's like some bug in the gossip protocols or whatever um so really i mean i just want to go over quickly because that's everyone complains about that when they first start they stop complaining soon they're after i'm not just because they get used to it or because like they start accepting us the way it should be or whether they just realize that i'm quite not budgetable on this aspect so um anyways people stop complaining so there's something there maybe hopefully um so onto a wallet a wallet is the simplest designer you can really have basically it's just a private key it sits there um so this is an instance of a signer signer is kind of like a interface that things things adhere to so you just create you can create a wallet pass in your private key optionally provide a provider if you give it a provider then you can do things like send transaction if you don't give it a provider it can still sign messages it can still sign transactions sign all those fun things you want to do calculate the address it just doesn't have a connection to the actual um blockchain and you can imagine this is why you want the difference between a signer and a provider because there are times where you have a computer like i have a chromebook i've removed the the antennas and all the pieces of circuitry that i could without damaging the computer um that actually connect the internet so it completely signs everything offline it has no way to even talk the aside world the bluetooth antenna has been clipped um actually i think i've removed the entire chip possibly through solder a few things that weren't essential um but anyways the important thing is that computers completely offline but it can still sign transactions and they show up on the screen like a qr code and so i can make sure that there's no one hacking or stealing information or looking at the private key on the computer so i mean in that case the wallet is completely disconnected and then you can use something like this actually probably then yeah anyways that's long story short i've got five minutes i think i don't know what i'm doing so i'm going to kind of go through this quicker um so jason rpc sign this is what people are thinking of usually when they think of a provider um it can this is like a geth note and so if you are running your own geth node for example you can get a signer out of it again i'm moving the mouse around you're not seeing it um so you can get a signer out of it then you can do all the things you're used to doing with it um but you don't for example if you connect to inferior it's still a jason rpc signer i'm sorry rpc signer let me did i already do anyways i'm going to move on because it looks like i maybe missed a slide but anyways um so yeah this is more what people are used to when they're thinking of web3 world as a json-rpc provider with a json rpc signer the nice thing is when you move away from that idea you can have a provider that's ether scan and you can have a signer that's a hardware wallet um you can kind of decouple those two things so you can keep your your private keys somewhere safe or just have no private key and and still behave like you have a signer-like object the default provider is kind of the thing i kind of really want to dive into i think this is one of the things that makes ethers the most useful um basically it's get connected do what you want to do now there's no need to install get sync a node install metamask or all those things a lot of things you want to do are simply i just want to read the blockchain uh so a default provider the way it works is it connects to multiple backends third-party backends like infira alchemy cloudflare pockets coming soon ether scan so it connects to all those back ends and whenever you query it whenever you ask for the current block number it'll actually pick at random two of those back ends and ask them if they agree you get that response back if they disagree it's going to pick a third one randomly and it's going to keep going until there's a consensus until somebody's until two of these things have agreed and the idea is hopefully as long as you can trust two of etherscan inferior alchemy cloudflare um that you'll get back honest answers it protects you from things being out of sync for example when inferior went down uh one of the things i wanted to point out that came to my mind just straight anyone who was using the default provider did not notice inferior's outage it just kept on trucking um because inferior may have been able to sync but whenever ether scan was asked and inferior was asked their answers would have been different and so it probably would have moved on to asking alchemy and alchemy would have given the same answer that etherscan did and so now you can start trucking forward and inferior being down simply didn't affect anything um so let's see contracts uh one other thing i want to point out about ethers that i think was unique at the time i think is becoming more common now is that ens is a first-class citizen anywhere you can use an address you can use an e s name so i use this all the time so for example if you use the takoyaki registrar which we released for east new york it's living at takoyaki.es when we update that because it still has not been updated for the ens change they made a while back it's been a while but once we do update it we're just going to change the takoyaki's um ens name and all the existing dapps will just continue on working there will be nothing to see there's no addresses to go around the world and like change because you know we made a mistake or some of our dependencies made a mistake or whatever we just need to change the the takoyaki.ethe where it points to that address and it keeps on going um otherwise a lot of these things are designed more for frameworks so frameworks can use them more easily i don't know if there's anything else on the slide people want to ask questions about feel free to there's events so you can create filters you can listen to events and it'll parse all the arguments out for you uh one other quick note is anywhere that takes a block tag can also take in a negative number for example you see here the query filter takes in negative 100 to latest that's simply saying within the last hundred blocks um i was not keeping track of time so i'm almost done though uh human readable abi is this kind of another big point i would want to uh bring up is a lot of dapps today when they have their their um api it's some massive json files sitting off on their disk somewhere and then when it's time to debug you never if you don't know the code you have to go looking up through the json what parameters does get value take or that sort of thing uh human readable api are meant to be like inlined right into your code so you kind of know what's going on with that specific object you have um basically it's readable you can look at this and know exactly what functions will exist on this meta class uh and one other quick note is this at 5000 you see next to set value you can set a recommended gas limit so if you use for example viper viper knows exactly how much gas a given function is going to take and will actually bake it in for you uh if you know the amount of gas this will save you that estimate gas call that round trip and improve your performance and just be a better ux in general it still works obviously with old school json apis and that's all i forgot uh questions if questions it sounds like maybe questions are going to the very end i will let austin or whoever is the embassy we have one question um in chat from garrett uh can you use default providers for test nets yes absolutely uh the one difference is if you use it on a test net is it doesn't use the quorum of two it just uses a quorum of one because it's a test net and it's not as critical if you want you can pass for the default provider it takes in a bunch of optional options if you want a test net that has a higher quorum you can dial that up as well cool thank you one one question that i'd like to ask or or even add to this is like what's what's the good quest a good uh ether's quest is it maybe building a script that creates a wallet that sends some funds like maybe shows the balance and send some funds let's let's maybe come up with a good little side quest of here here's the best way to get started with ethers yeah i mean that's a great option uh what i would recommend actually maybe the easiest thing to do is if you install the ethers cli uh so like npm install at ethers project cli um i'm not sure people are probably used to repple like the i don't know it stands for anymore but basically it's a you know it's like a command line where you get to just type in javascript commands um if you install that you can just literally type that and then you can do all the things you're talking about but just at the command line you can experiment you can see what happens if i do this um but if you were looking for like a small concise little project just to like what your appetite one thing that might be useful is a sweep script um oftentimes people publish their private key by accident you want a one line command that you hit and it will connect to that private key uh grab create the transaction that takes all the money less the gas fee that's the fee and send it to your address um i mean the same script is also useful by attackers when they see a private key and they want to steal the funds as quick as possible but i usually like to focus on the the the happy side which is you've just posted your demonic by accident to github and you've got about 15 seconds before some bot notices and steals it it'd be nice if you have that script ready to go that you can hopefully get that typed into your command line within the 10 seconds um as a quick like yeah for each exclamation point you add to the end of the command it doubles the gas exactly exactly well that's the other thing right for a sweep script you probably want to for example take a look at the current gas price and literally double it because you're going to lose everything soon maybe you don't mind spending the 20 to save that one ether um long story short published private keys well exactly the attacker is going to spend he'll spend the whole thing up to about a dollar he'll uh he or she uh but yes they'll spend everything right up to the they'll they're just happy to break even they will bury you for that uh so we have one more question uh after sending the transaction does ethers keep pulling the rpc nodes for transaction confirmation automatically every second only if you ask it for and so every second it will pull so the way pulling works in ethers um so if you're using a web socket provider obviously there's no polling but in the case of a polling provider which are actually most of them what it does is it pulls every six seconds for whether the block number has changed if the block number is changed then it worries about processing other events but if the block numbers have changed because block number is generally a much cheaper call to do so once you send a transaction you get back the transaction object it does no polling after that if you do i lost my slides but if you do a a wait on that transaction object that's when it's doing that polling looking for confirmations and you can also specify how many confirmations you want by default it's one and so if you do like a transaction.weight like an away transaction.wait it'll wait until there's one confirmation but you could do weight two if you want to make sure there's two confirmations or if you wanted a non-blocking weight you could wait for zero and that will return the transaction receipt if it's in the demand and just move right on forward if it's not combined and return null so you get blocking or non-blocking pulling if you want it awesome thank you so i think uh we can move to hard hat now awesome thanks everyone let me set up okay hi everyone uh so i'm patricio and i'm just gonna do a quick intro of carca first talking a bit about what hacker is and then just a small game of cow a hard hat project looks like and how you interact with it so for people who are new to ethereum development her had a it's probably very explained with an analogy from other stacks like if you're a web developer a herca takes the role or kind of takes the role of webpack or parcel during web development or if you're an android developer or java developer can look at it as if it were graded there are other tools for other stacks but there's always like a central tool which automates your workflow and lets you run things and that's what carca does so the features it has are quite a few hacker it's very flexible as a austin mentioned beforehand and it's still running there was a traffic which is like an alternative and the main difference between hard hat and truffle is that hard hat is designed to be flexible so you can connect almost every tool on the exterior ecosystem to hardhat and just use it like for example you could use web3 or you could use ethers it depends on you the hardhat doesn't force you like a choice also hardcap is used to automate repetitive tasks like deploying contracts verifying them on intercom or i know generating typescript typings for for your contracts it also compiles your code well of course it manages your dependencies like something very particular of cat and so traffic is that they are built on top of node.js so right now we don't have a package system for ethereum so we just use npm and hardcard takes a i have had ensures that it works with solidity so you just install your solidity dependencies with npm as if they were javascript and you can just import them from your contacts then it also automates running your tests and most importantly it has a testing blockchain so let's say that you are working on a website you will use webpack server or parcel or something like that just to serve your website and be able to test it here if you are like making a smart contract you need kind of the same but it's a blockchain so you need a testing blockchain to run your contacts on and this was i think this is pretty confusing for newcomers but you don't test your contracts on your local machine nor on my net you run them on your local testing network and harca and hachat's testing network that's called harca network especially focused on debugging so it has some special features that i'm going to show you but let's see how a hard cut project looks like uh is a little bit enough can you read you can make it a little larger yeah that's that's good yeah okay so as i mentioned carcass is built on top of node.js so a hardhat project is actually a node.js project and we don't have enough time to show how to initialize it but you can go to haircut.org tutorial tutorial and there you can read how to create the same project but as i mentioned it's just like a normal npm project it's just javascript you have your package json that includes hard hat and a bunch of things your node modules your contracts and your tests and your hardhat config where you set up your entire environment for example here i'm using the hard hat ethers plugin that automatically initialize ethers to work with hair cut and haircut waffle which is which adds a lot of you know handy functionality for testing uh once you have your and you can also set up things like the version of solidity you want and hacker will automatically download the right compiler you can also use multiple compilers at the same time but that's pretty much all you need to start working your contacts then you just place them on the context directory well just write your solidity code they say a bunch of interesting things here the main one is this library called slash console which as i told you this is an elaborate but an npm library so it's actually placed somewhere in my known modules but hardhat will take care of that you just require it at least as as if it were javascript and this server is very handy because it adds console low capabilities to solidity which without hard hat you don't have so the buying contract like this is much easier pretty much as if you were running a normal language and then to test your contracts you and this is very particular of ethereum you normally don't test your contracts in the same language that you write them people normally test them using python a javascript or python hashtag is a shortcut library a framework so you use javascript and they are just normal javascript tests so [Music] we use mocha here but you can use our test runners moca is a super popular testing framework for javascript here we are also using chai which is a utility to make tests easier and as we are using hard hat ethers you are gonna get an initialized instance of ethers with a bunch of extra functionality and then you just use ethers to interact with your contacts and check that everything goes as expected so here we get a contact factory called retail which is this contract and we deploy it and get a contact instance and then use an ethers contract which richard explained a few minutes ago to call the different functions and check that everything went as expected and that's pretty much it then there are a few maybe a caveat here when you see if there's a javascript with ethereum that can be confusing to newcomers but you can use numbers most of the time when dealing with ethereum amounts in javascript because they don't fit in a in a javascript negative number so you have to use big numbers which ethers has and this can get a bit different than you would expect because you don't use the typical numbers operators but then all you have to do to run this test is go right npx which is a launcher for node applications that already comes built in with nodes a hard hat test and it's going to run moca and here we can see that it is passed we can see our console logs from the smart contract being printed on our terminal which is super handy for the wagon because what has happened like behind the scenes is that her head first created this temporal testing blockchain called harca network it always always gets initialized with the same state so your tests are deterministic and you can be sure that they are always going to be run in the same way and it also prefills some accounts with a fake if so you don't have to care about gas paying gas for your contracts your contact deployments your transactions you can also test interactions that use it and then once the tests i run this temporal blockchain gets destroyed so if i run them again a new blockchain is created and destroyed so the last thing i want to show you because it's something pretty handy is that also hard hat creates a solid stack traces that are very handy for the wiring which is not common in ethereum like the ibm is a very constrained runtime environment so things like stack prices don't really exist and external tooling has to create recreate them for you so now if i rerun hashtag test the context are going to be recompiled and one of them is going to fail but here i have a combined javascript and solidity exception which includes the line where my contact failed that's super useful for the violin and then there's a there's lots of other things that you can do with haircut so i'll just show some useful links but most of them are in harcat.org so you can just get there and browse through the page but you can follow the tutorial which is gonna go a bit deeper into what i have just shown you can also take a look at the plugins there's a whole bunch of plugins for different things like automatically verifying your contacts on etherscan deploying contracts generating tax credit bindings for your contracts and then you can join our discord for support and that's pretty much it thanks for being here and let's continue with ronan uh so we had a question in chat um what are what are the advantages of using hard hat with type chain uh yeah so it's the main advantage to me is that while type chain is for the ones that don't know type chain is a tool that generates a typescript typings for your contracts so if you use half a type chain you can write your test and everything in thai street and that way you avoid silly mistakes like having typos in your tests that take time and are very frustrating and also you have you get great autocomplete on your editor and ide but that's it i really recommend using it and then with hard hat how is the blockchain network run is it ganache behind the scenes oh no okay yeah i got it no a hacker cuts is its own ganache alternative uh both ganache and carcade are based on ethereum csvm which are which is an implementation of the evm in typescript but on top of that both of them build lots of different things to complete the blockchain i think austin you had a question too yeah there's one in there about um estimating gas costs too did we cover that one uh can we estimate gas costs for a smart contract function on hard hat tests or in a plug-in in a plug-in sorry i don't i didn't get that part i think i think there's even actually a gas cost plug-in for hard hat that you can that will give you like a straight up like performance yeah so there is a gas reporter plugin you can take a look at all these planes in the website but a gas reporter tells you how much gas each test cost so instead of reporting the time that the test took which is not very interesting here it tells you okay these tests consume x number of guys got it okay i'd like to add three little quick things so first of all my question about getting started i think you answered basically you have slash tutorial go to the tutorial if you want to feel like you got started run through that tutorial uh the second thing i'd like to mention is this was previously biddler if you've heard of the tool biddler hard hat was previously uh biddler and then the third thing oh no i forgot it oh no i shouldn't i shouldn't have lists longer than two i guess oh main net forking uh you guys have recently launched main networking right i think you may have hinted at it there but that's a fun feature that maybe we should kind of just yeah sure so one pretty common thing uh when creating smart contacts is having to interact with other smart contacts like at the end of the day that's like the most powerful thing of ethereum like being able to compose with different protocols and testing those contracts that have to interact with other protocols can be pretty hard if you have to set up the entire environment locally with different protocols deploy all of them taking them into a realistic state so we launched a feature which was originally implemented by ganache that lets you fork mainnet so you get the state of mainnet at the given block and then run a hardhat network starting from there so you still have fake it fake everything but the initial state is the same as a main net block and you can do things like impersonating accounts uh like i know let's say that i'm in i want to test something on maker so i impersonate a maker contract and i can send transactions as if i were that contract and i know they perform an upgrade on a maker or something like that awesome thank you for that um so i think we have ronin up next i want to know how to pronounce wigawag too what how do you pronounce yours yes so yeah uh yeah we go ag um it doesn't funny story i don't know if you can find out by yourself and typing it but it's from where i live um i'm sorry where i born uh in brittany and it's it's a sound of the the servant of death that come his chariot makes this sound weak or why like and yeah that's funny and then you talk with me now like i can't get but yeah awesome awesome do you see my screen yep cool um so uh yeah so yeah i will be presenting jolly roger here with um also in some deploy that was mentioned the plugin that joey roger depends on that use are that and so for jolly roger is basically a template for atrm application that include everything to get you started uh it's one common uh to have the the environment setup and one command to deploy and all of it the goal was to for me as a accountant participant i over the time i had to fine-tune my development and that's basically the result and i decided to make it public forcing me to fine-tune all this little detail and so the goal of this template is also to be production-ready as much as it can and and be some fully decentralized um so when i say one command deployment this also means putting on ipfs uh it's powered by an impressive tech stack basically i mean it's relying on all these uh solution already built and those two have been mentioned already are that basically the best-in-class smart contract development of ironman um ethers are really useful like uh to do a lot of different things and with a lot of little tiny detail that matters like as rickmore already mentioned uh [Music] and are that deployed so yeah i will spend a bit more time on it but basically uh it adds some things to to our that it was originally it was its own framework but then whenever that came i mean builder came um it was used to reuse uh all the interesting things already there and what it had is uh i mean the main thing was a replicable deployment for tests so usually when you make a smart contract you will have to set it up and then if you make a test you will have to again set it up so with other deploy you do it once and this is your thing that you will deploy but it's also and then in the test you should say get contract and you pass the name of that deployment and so you you kind of make it easier uh to do that another feature that it has i think it's the only one uh that have that in the ecosystem it's odd contract replacement so similar to if you're familiar with webpack and what module replacement uh you can code your contracts uh i mean for me it was quite useful like i was developing a little game using smart contract and sometimes you are you are on the front end and you hit an issue oh i need to to be in that state and the good thing here is that you can just modify your contract it will auto reload and then you can reach that state by basically cheating and the way it works is that it doesn't even let require you to have to have different byte codes for mainnet when you want the mainnet one to not be a proxy based so basically basically because the way it works is that there is a proxy behind but it's only in development and so if you want to launch it on mainnet without a proxy for immutability purpose then you can do that as well it has exports of front-end development and an interesting thing that was added recently was the ability to share your deployment procedure like so while artworking like a making the forks the feature of that is very useful in in in most of the case actually but sometimes uh you will just want to set up for example you have you want setup you need swap in your this environment if you need to work with using other deploy they could share the deployment flow so you could just import the deployment and have it have it basically up to uh setup and so you can run the test against them it also has some uh proxy upgrade management as well included and there is more features as well um it is another tech stack that is that jolly roger depending on the graph this i think currently the best thing for easy access to smart contract you can obviously use logs and reading contract but for some lot for a lot of use case it doesn't scale very well and the graph because it's open source you can you can potentially ask users to run their own node if they want to and yeah as uh austin mentioned like george rogers veldt i mean i i think a lot of people have been interested in jolly roger asking for a react version and i'm actually would be really interested if someone uh who was interested in in doing that personally i like zvelt it has this feeling of you basically write plain html and it adds extra reactive uh things to it and you have a low overhead uh when when you deploy uh and so i'm sure of the time i'm trying to go a bit faster so basically the feature it has i cannot mention but it everything will reload in jolie roger so the contract the web frontend and the sub graph so if you change the the graph your subgraph change the code up it will automatically reload and you get um and the way subgraphs work then they will re-execute everything so next time you call the uh the graphql api you get different results so all of these give like a great developer experience for other for contract you have rdap or deployment management other deploy and it use typescript as well by default and one of the core of it uh that i need to document more is uh the web3 library called web3w uh this one and a lot of interesting things that you are faced when you uh write uh frontend development uh so like unhandling like connection of the wallet uh which wallet you can connect to etc there is some solution already out there i decided to to rewrite it uh because i wanted to be able to do all these little details so one of them is transaction caching so you can come back to your web app you will keep track of the transactions that were funding um keep them it will also detect if a transaction has been cancelled and you can even have like notifications that say oh that transaction has been cancelled so you see in metamask you can basically create a new transaction to cancel a previous one and and all of this with minimal code so this is the example of um making a purchase so let's say you have a contract um of course there is some other things that are set up behind the scene but at the end where if you want to button that your purchase that's the only code you write and when you click that button it will detect if you have meta mask installed if you have uh if you set up with different wallet it will show the option then when you click the option it will tell you okay now you need to to connect to it or and then you need to make the transaction and you see here the contract object is actually a netter's library contract but it's proxied so when the call is made the library will know that there is a transaction pending from from the user perspective and then when it's confirmed it will know automatically so there is no extra code to add to under these cases and as i say the whole app is production ready it's a progressive web app that reaches 100 score i mean i'm talking obviously of the the jolly roger basic template of use if you add some stuff this is not guaranteed and the current version of a 50 kb uncompressed uh first load for the javascript and the encompress is interesting for people who don't really know about ipfs all the gateways don't compress your html so it's important to look at the uncompressed uh value and yes i mean actually the span i think the time i spent the most on building this i mean to some extent was ipfs support uh because it actually turned out to be tricky in regard to progressive web app um so it has nice url no hash based url of course if you need them you can still use them but um and it works simultaneously on ipfs url so i mean maybe maybe many of you don't know but if you can see actually anything on the ethereum dot org website uh this doesn't work like if you go to the ips version some of the url broke and it's because it's actually quite tricky because uh it basically you need to detect at runtime the base path and do some some kind of work and i um so jolly ranger under this kind of thing another thing it by default it's sandbox local storage uh so because on the ipvs gateway every web app are basically sharing the same local storage so when i say sunbox it's not secure sandbox issues that they are different so obviously your malicious app could delete your local storage but if you use it just for basic stuff and not rely on it you don't have to worry about oh i make a new version or actually in that case you might want to sunbox in a different way but uh so it's just something that you can do with actually roger and all of these uh so all the basically the template come with a command that will do the contract deployment the subgraph upload the ipfs spinning uh all all in one go so there's something you know akaton you the the usually what happened is that you spend your last your submission time like spending a lot of time trying to figure out oh i need to do that does it work so this um allow you to have this setup very quickly and this is a way to get it uh it's yeah one command you can see on i guess we can send the link later and yeah i mean it's how it look maybe i can show i don't know how much time i have so yeah this is how it looks and so so that's what i was mentioning so when you call here you can set message of the on the contract and behind the scene he will detect uh okay that now i need to show this this model and then when you configure and also the ui is uh is dynamic so you will not wait for the transaction to come because you can pass data the data that you are expecting to be the result so you will be able to show it before the transaction goes through and if it fail you will be able to kind of detect that as well yeah so that's that's basically it great uh we had one question in chat um so is browser security thrown out with hosting on ipfs which which kind of security browser security uh one do you want to be more specific yeah uh i mean i i don't i'm not aware of anything except obviously the local storage uh aspect of it one um if you want to unmute and just expand on that verbally that would be good if you if you're able to if not just go ahead and type it in the chat oh no mike yeah go ahead write it and then we'll relay it i think one piece to hit on here with the ipfs stuff is when uniswap uh got shut down in some countries right when when there are certain countries that couldn't access uniswap anymore we had the maxis on twitter shouting about how it wasn't decentralized but when those apps are deployed to ipfs and anybody can just go to an ipfs endpoint and grab those from some distributed peer that kind of negates that that effect and i think that's probably one one little addition addition to add there um i don't know if one you're typing or not um otherwise austin did you have a question in the meantime your usual question of course of course well i so so no knowing uh sort of what the bread and butter is of jolly roger what what is a good kind of first challenge to get started how would you challenge maybe some of the listeners like go build this with jolly roger as as a kickoff and and just to uh kind of add to that one more just to lean into something here we you can tell when a tool is built by a tool maker that's using the tool and i think we see this here right there's a lot of these edge cases that he ran into that he had to build around or build new things for and you find that in our space there's there's a lot of like blind spots that when you start to build something more advanced you feel oh man all this tooling is missing so out there for all the tool builders uh get in on this too but back to that ronin what do you think is like the the best place to get started the best way like the best challenge you could give to i mean i have a yes i have a challenge maybe it's maybe it could be something i would like to see uh and it's something another project i've been working on uh which is uh erc721 so the nft sub graph so i deploy a subgraph that will list everything on my net every erc721 compliant so a cool thing to build with uh template will be basically at least the first step would be a dashboard where you see all the nft and you can search them and then the next level would be a marketplace fully running on ipfs uh looks like one clarified so local storage sandboxing is a browser security feature just wondering if there's a way to get that back when using ipfs actually yes actually now uh the most ipfs gateway now supports a domain and so the ash has a domain a subdomain and this solves the issue of ipfs gateway but most gateway support both so you can't rely on how from where the user is coming from but and yeah also it depends on how they access it if they have an ips node locally um but local storage anyway is not uh safe like uh i would not recommend it to use to use it anyway as a safe as a safe place great thank you for presenting and all the questions and answers um so i think robin is next hello do you hear me yep yeah okay i'll share my screen we got it oh nice so do you see notes or do you see a presentation now presentation okay yeah so this is symphony hard hardhat react so we are and we are building upon hardhat and ethers and hard hat deploy which ronan just presented so that kind of shows the ex accessibility or composability of the hardhat environment which is pretty cool um yeah so uh we created this plugin in the ethers uh hackathon uh it's online hacked on uh and then we just give a quick introduction of us so i'm robin from symphony in norway we are a small company we are researching the comp researching if composability in public services in norway is possible uh so we're trying to find out if we can like build on each other in public services instead of like integrations so uh and um we created this plugin to both using our own projects but also to meet the meet expectations from uh java and c-sharp developers uh which are uh who come new to the web2 space so they are used to uh working with like uh various on in the back ends or in front and working with backend they are used to working with statically typed uh libraries so we would we were like trying to give the same experience uh with this plugin so uh you've seen how this plugin is using hard and hard deploy and ethers so if you're if you're like using that and want to create a front-end i think this is uh something that you can make your iterations a little bit faster and a little bit easier so uh what is hardhatreact um so to start with we are just a small plug-in that you drop into your uh hardhat project uh so it requires all these other plugins also so this can be like your smart contract engine um with those you can build a full smart contract project but then many people want to like create a web client to interact with those smart contracts that you are making and then suddenly you have to consider so so when you're in a web client like how do i get the smart contracts i created in hardhat into the front-end uh how do i get the smart contract at this last address i just deployed that uh oh i need a browser provider should i connect to metamask and uh i know if i need some funds uh because we have a different account or how do i do that uh so uh and like what's i created a lot of solidity functions what what are their names so this tech stack help helps with uh all this like uh type chain uh which are type type smart contracts it's typescript smart contracts they help with all this but we just like help them and put it into the into react react from them so the backing process is pretty smooth uh we just wanted to make the front front-term process as quick as possible to trade so our goal was to like have one you can import import one contract use the function and assess the response so and uh so that's that's our goal and if you can make also the front end code more portable so you can like swap it between portrait projects like for example our uni swap button that is also pretty cool so uh how do we do it i said this uh this hard hat or backend runtime generates like you're creating solidity files you're generating uh apis uh which are uh which are like yeah uh and then you're generating uh typescript files which are uh for like or type chain files you call it which are the typed interfaces for your smart contracts you have deployments files uh those explain which where the contract now lives and you have also the haddad config where you set up your networking providers so we just take all of that and uh generate code uh to make a react context which you just can use in your front end so you don't have to you don't have to think so much about all this you can just add the plugin and this and then you get the context ready so uh so how do you how do you get started uh just like create a hardhat project so and if in the standard like um yeah and in standard hard art project uh you get this greeting solidify uh so uh you can start with that uh and and uh so you do that and you install the hard hat react uh plugin which is a plugin into hardhat so you just add that in and add it in the uh it's the tutorial online uh you can check the mpm website and then add that in and run mpx hardhat node watch which is kind of the same thing uh which uh just did it just starts up uh the hardhat environment like to know the blockchain which is your local development environment um so it starts up that and then the watch is from uh from ronin's hard hat deploy which watches every changes you do in your smart contract pipes and if you do a change it redeploys them to your uh your local development chain but and then we hook into that and uh also do the react generation when that happen so i think actually it's a gif yeah do you see the gif yep it's gone yeah uh so this is just uh very simple yeah just uh what you should are supposed to see uh so how so you generate you set up the sole or the smart contract project then you need to use it um use it in your front end so uh and that's we generated this uh react context file so just import that wrap all the components that needs access to your smart contracts uh into this and they're also there are there are some things going behind the scene here like how do you like loading providers like rickmore told about provider signer uh we can configure our hardhat product with different providers so and we help with uh like injecting that in correct way and helping you with handling providers and handling designers so it does all that it loads the contracts get getting you those typed uh interfaces into your typescript project um it's also does some things around handling provider change so yeah you wrapped your content up into this and now we can like use it in a component so let's say we are creating a uh a greater component from this recreated contract we just import the agree to context and we use that context and suddenly we have access to uh the greater factory which we can deploy our contract we have access to the instance where we can call the functions and as you also see here everything is typed so like you say it's a show there when we deploy the deploy the greeting it says oh it needs a greeting and that needs to be a string and when we uh and the result from the the instance.greet function it's like oh you're getting a string back and that's also nice if you like handling you're working with numbers because uh oh it's a big number and then ethers and type chain takes care of all that like oh it's a big number and you have these functions to convert it to a string or convert it to a number so you get all that nice stuff which is uh which helps you and it tells you if you are because it's typescript it tells you if you're wrong so and also yeah um so and there's also a lot i think i have to be quick now but it's also a lot about uh how we uh try to uh help you with uh getting a development provider and signer up into the frontend so we use web3 model which is a great another great library do we build upon to so that you can put in or support many wallets and you can also like shove in your hard hat provider as a http uh provider and it will also you can also like you see that you have you can inject we are added a configuration that like okay you can i i'm i know this is unsafe i want to inject my provider into the front-end app and then you have a browser wallet so you don't when you're working with this you don't have to sign all the transactions in your metamask like because you're testing out things so it can be nice it's also the priority it can also be used as a fallback uh kind of thing so if if if the user doesn't have energy model uh or a virtual model can't find anything it will like try the next one and push that in as provider so that's also nice for like uh reading if you don't have a signer you can just use a provider without designer and you can read the blockchain and those things uh yeah so as i said it's hooked on deploy uh hard at the player from roman which is a great library um and uh so it's that triggers can read when you edit your solid files it regenerates and then you can then you then you also then we also regenerate our react context and you get all the updates so if you like if you use the function in your front end and you change it in select the file and then uh the regenerate run it the front end will now tell you hey this function doesn't exist anymore so please change it so yeah uh check out the plugin it's in npm you find it on the hard hat or site also if you like we want to get up really quickly there's a boilerplate which you can use which i like it's a pre-configured hard hat environment so nothing special yeah and here's a little very sped-up movie of the whole thing it probably got the same thing yeah so that's me yeah thank you thank you that was super informative uh austin you have a question i i was just going to say kind of leaning into the fact that this was an eth global hackathon project and this was something that was built out of a need that you guys had any advice you would give to up and coming tool builders oh um toolbuilders uh i think uh like ronin and uh uh the hard guys will be so much better to answer that but uh yeah there's there's a lot of edge cases for everything so things take more time than you expect but i think that's my that's my uh yeah but if for a challenge like i just you challenge everyone and uh a fun challenge could be like if you start with the boy braid and just throw in your favorite contract like uni swap or anything else so maybe some will fail but you will just get this front-end interface and you can use it and try to create a react application and use all the functions and everything will be typed so you can just work in the front so try that i can i think it would be cool to see some price on that yeah and then trent also just posted uh some info on the next global hackathon those are really great events and some of the um like really prominent projects in the ethereum ecosystem actually came out of each global hackathon so make sure to check that out um and then next up we have paul hey everyone um can you hear me well yep yep okay cool um let me show my screen uh i think you have to turn off your screen sharing robin's got a hold of it oh sorry right um so i'm building create ethap and um if you know what create your react app is this is that but for ethereum um so you know i could stop there but that would be a very boring presentation so uh let me go on and let me show you like what like how is create ethap different to create react app and why uh you want to use this on on on ethereum um so i i basically combine react with ethers and d5 um if you don't know what defy is it stands for decentralized finance and um we are basically like i i'm allowing you to build apps on top of those d5 protocols um with one command and um i don't have slides but create app is very visual so uh let me show you the product that you get um after you run the script you get something like this and it looks basic but um in the source code there are a lot of of easter eggs that will guide you in your front-end app development process and as you can see here you like you've got some basic links that you can um read about ethereum react and and the graph um the graph being like this data indexing solution that is also plugged into um what you get with the boilerplate and we have this nice um default integration with with metamask that you can use and um you can disconnect and but of course when i do a demo it never works now i cannot disconnect but anyways normally i could disconnect and then connect again with metamask um so we have this by default and let me go to the source code um there are two things that i want to show you here first with this function um every time i i show somebody you know how you interact with a contract they're pretty confused about uh pokey so what is the contract how do i call it from and here richard's you know ethers is just great because i can do the get default provider uh trick that he showed before and i can get that provider and that's it i can now interact with with ethereum and i have these comments here to show you how to do your first contract call ever so in this case what i'm doing is that i'm querying a talking balance which is a pretty common um action that you do in ethereum you want to know how many tokens how many erc20 tokens somebody has and i'm console logging this so you can see it in the browser um when you open it and yeah let me see yeah you've got this transfers and there you go um oh actually this is something else um i i mistook that for for other feature but for that you have to um make this button show up sorry for that right and now we are going to see the on chain balance which is using uh computer units which have 18 decimals but this is something like 9.9 or something like that tokens and the other feature that you get um at the beginning is an integration with with a sub graph and all d5 protocols have a subgraph and this is a very useful um platform that indexes all ethereum events and make them available via this graphql api and graphql is just amazing and it's super slick to use super super easy and i have this react hook here that just logs in some token transfers and yeah you can start from here and build whatever you want many people have been using this for various uh reasons people build personal apps for their own social money token and even ens used this to power one of their ui apps so that was pretty fun to see finally um i wanted to show you two more features that are good with this um it's not just about like one default template um we actually have quite a few um defined templates that you can choose from and i don't have time to go into all of them but um if you want to say you know build a ui for ave or compound or unit swap um you can do the following command so you do yarn create ethep um your your name your app something like my of app right and you do dash dash template often and there you go now you have all the bat all the goodies that i showed you um in the source code plus the other contracts the apis and the addresses on mainnet so this is pretty handy and finally this is not just react um it's also available as a view vue.js alternative so if you were to do yarn create edab um and you'd use my view you do that framework then you'd have the same goodness but for view and yeah there's there's a lot of optionality that that you can choose from when you're building an app with with create ethab and yeah um my my last remark is that this is only for front-end development um uh if you if you want smart contract development there are many you know tools available for that and hard hat is is also my my preferred one so you can use that this is only for for front-end development so um i guess that was it happy to answer any questions if any very cool uh austin you have a question uh let's see so the the the fact that you bring in ave like that i'm assuming that not just the abi and the address is there but you probably get some really handy like function name completers like you can type you know whatever the function is dot and then start typing balance and it'll just auto complete balance of for you do you get some of that that magic with with create ethap uh no unfortunately to not but um i i think to get that unique touchscript this is only for with javascript for the moment so you get like a javascript app just like creator react app does um but what you also get with with all these defy templates is so the contract apis the addresses and you also get like the libraries the official libraries that are they you know or or unisoft um whatever they they they publish to mdm they're all combined so you can easily you know tap into that tool and and see what they offer you that's right it's not just a contract address and an api there's there's these libraries that have to come in and there's there's a fair amount of work that it takes to integrate within in each of these uh protocols and you've done that that's awesome i didn't realize you were over on the javascript side with me i thought you were on the typescript side the source code isn't touched here so i'm coding this with typescript but for the end user they only get javascript for now awesome uh and then last up is austin hey all right i think we got a little bit of time i'll probably speed run through mine also let me let me share a desktop and slide over here okay so this is let me just start it off with if you just google scaffold eath you'll land here and it'll take you to the repo but scaffold ethan is everything you need to get started building decentralized applications powered by smart contracts so i brought in hard hat uh ethers web three connect uh notify from block native the graph so many more things and my goal here was to just create something that you can grab out of the box and and basically prototype web 3 applications and what i mean by that is sort of play around with your smart contracts and your solidity at the same time you're playing around with your ui sort of wire up a function and then wire up the button to call that function and see how it works and it kind of helps you kind of inform how you write your solidity so let me let's see so basically yeah you you clone it down you cdn you yarn install uh then you yarn start and you get your react dev server uh you yarn chain and you get your hard hat node and then you yarn deploy and your contract is compiled the artifacts are uh injected into your front end and you get like a nice hot reload over here uh with with your contract and there's kind of some some scaffolding at first but then it teaches you through kind of uh how you would build out a ui how you would parse events how you would build those buttons in the front end and then eventually when you get kind of tired of using uh event listeners you can uh kind of upgrade to to the graph with within scaffolding let me just do a quick example here uh oh uh there we go i think i had some code there we go i'm gonna fake writing some code here just by undoing but i'm just adding a counter in here something really simple that you would do and i do this like on every demonstration but basically if i want to uh i do a lot of mentorship sessions so all if sideshield if if you are a great developer looking to get into ethereum uh check out each build for uh the the fundamentals and check out scaffolding for building an app and all of these other uh wonderful tools that we've seen here today but you can hit me up one on one for a one-on-one dev session also i'm open to doing one-on-one dev sessions if you're a good developer looking in to get into ethereum but here we go so so i'm going to just write a quick little counter here very very simple but it helps to show how uh you can iterate on this so so i've just added a counter variable and i've added a function to decrement the counter and and what this is going to do is we see this kind of auto adapt to that and then i can hit oh i don't have any gas okay i got to rewind a little bit so when you land on a scaffold eat app it's going to auto generate a burner wallet for you and you can take that burner wallet down to the faucet get some funds now i should be able to decrement my counter and what i want to show here is that you can kind of test your assumptions what's this going to do when i subtract 1 from 0 of a u and 8 that's going to give us 255 right and if i wanted to uh basically kind of test my assumption of what's the biggest number we could roll under into we could just change that to a 256 and run one line and now when i decrement that we get uh that number basically the largest number you can track with with 256 bits so so scaffolding lets you get into this mode where you're you're kind of like i don't know maybe i want an address owner and i don't know what i'm going to do with it yet but you kind of like write in your solidity you do this deployment and you can also have this thing watching but then in the in on this side you start to get uh some some interface with that contract so um the let's see builder example okay cool let's let's do let's just set the purpose to hello world so our contract is just some arbitrary string and we have some set purpose but i wanted to show off this to give the hard hat guys props there's a nice console log right there in my solidity so when i come over here and i write hello world and i hit send there we go look at this we've got a beautiful console log right there in our console that lets us know gives us feedback on what's going on and that's one of the super powers of having hard hat is you get that introspection into the evm and they they kind of tell you what's going on and if you can't figure out what the heck is going on why when i take five divided by two do i get that answer you can throw a console log in here and really get get some information about what's going on there okay let's see how we doing on we we were closing quickly uh so so scaffolding is meant to be kind of this hackathon stack i i found myself hacking at eath denver 2018 hacking hacking at all sorts of different hackathons the first you know good portion of the time was spent just setting up my environment and getting it ready so the point of scaffolding was to be like okay you can clone this thing and you can have all of these components that i found myself for instance this address display right it's got a nice little copy next to it this this wallet or how about this this balance here i can click this balance and switch between eth and uh usd or i can open up my wallet and type austingriffith.edu and i get that nice uh blocky preview right or oh there it goes or i i can whoa i can uh have my scanner set up so if i had a qr code or i could put in like a hundred dollars here and i can swap between usd or swap the view between usd and eath right all these little components that i found myself building at all these hackathons i've put into scaffold eath and then if we kind of dig into that a little bit further there's there's example ui too so you compile and you deploy your contract and then it injects it into a react app and within that react app there are let's see here we go we've we've talked about providers from from rickmoo and ethers we've got our main net provider getting enfs for us and then we have our local provider that's getting our contracts but then there's all these tasty hooks here that will help you get up to speed quicker so i have like a used balance right a use balance hook you just throw in the provider and the address and it's going to track that balance for you in your react state a little gotcha there is that balance is not going to be a float value that's one of the things that you have to get over at first that that balance is going to be a big number and you have to use format ethers to display that but that's going to save you some time because when you start doing math in javascript it's not fun but if you use the the big number library to do your math rickmob will will handle it a little bit better for you and then there's kind of read contracts we bring in web3 modal so you can connect your meta mask if you'd like there's that contract scaffolding there the hints the ui let's just dive into that example ui so here's a really cool hook just use contract reader right so given my contract name and the variable i want it's basically keeping this purpose tracked for me in my react state and i see it right there and then uh just typical like react tracking the state i've got this controlled component here and then a button that will that will uh give me that transaction and and set the purpose to hey hey hey uh this is a cool hook for tracking events there's use event listener you basically give it your contract name you give it the event you'd like to listen to and it's just going to keep an array of those objects for you and then you can just throw that into a list down here and you're going to get that list of events so i think i kind of hinted at it earlier but once you get tired of parsing those events there's always the sub graph and here here are the instructions for using that um i i try to take care of as much for you as i can i try to there's there's things like i include my infuria key and and shout out to to rickmoo uh when i talked to infuria about getting this kind of setup they called it the rikmu plan but basically my my inferior key is distributed with inferior with scaffold eath so when when you first get in it's going to do all those e s poles to mainnet it's going to use inferior but it'll it'll die on you quickly but i wanted to get you to the point where you have this kind of you've got your contract you're making changes you've got your front end you're poking at it you're learning how it's going to work and and kind of doing that shout out to robin doing that in symphony right like kind of doing that in parallel and and you learn a lot by doing that so first mentorship session we basically just jam through this i send them home to build a decentralized bank using mappings and learn some more of the primitive data types we come back and we deploy to a public network using hard hat um and then and then it gets like weirder right we start talking about building a multi-sig how does call data work uh once once you've got that down can we do contract contract interaction inheritance factories proxies all that stuff is kind of part of the curriculum and i'm kind of building it up so uh yeah hit hit up scaffold eth check it out uh always open to feedback always open to collaborators um thank you thank you thank you to trent and linda for giving us this platform and eth global this this has been awesome today to see all these tools from all these tool builders and hopefully uh get you the developer started and get you confident with with building decentralized applications i think it might be good to just kind of open it up to kind of like the last five minutes of just random questions or or anything else one one thing that i i would like to ask is typescript versus javascript it sounds like paul you use typescript to build your tools but your tools end up being in javascript i think a lot of the tools that we've seen today are using typescript am i a noob like dunk on me here is my using javascript is that is that uh the right way to go or not what do you guys think well um i think i can answer that um i think for like long-term projects especially when writing tests for contracts go for typescript because you don't want to end up like into false positives modes where your tests pass but because the variable is a string not a number right um but you know for all the short-term projects like hackathons just use javascript like there there's a huge ecosystem around this language you know a lot of tools give you this um just hack through uh the weekend and use that but for long-term projects just that is my my thinking and uh it's been working well for me i'm actually gonna jump in i'm gonna kind of go against what you just said um sorry about that i mean so don't don't get me wrong i hate typescript like it's absolutely terrible but it's a wonderful tool um it's a lot better now than it was when i first started using it i think basically for me once i've been using it for more than an hour once i've written anything for more than an hour it starts really paying off like that first that first like hour and a half in when you need to do like a refactor and you change that one variable name getting a list of the eight places where you forgot to change it like right away saves you so much time because otherwise you run it and it works fine for a while until two hours later when you find a hunk of code you didn't update um it certainly takes an extra like 10 minutes to set up and basically all i ever do is copy like the ts config from ethers into a new project and start from there um but especially for something like ethereum there's it's so easy to make a mistake that costs real world money even if it's just like test net money it's still real world enough that yeah anyways there's a ton [Music] i'm like i said i'm mixed right so i really really hate it but it is so useful that's where for me it's just like the learning curve was just a little bit too much and i kind of went up that a couple times and when i'm thinking of new developers getting into space i maybe don't want them going through that but if everyone dunked on me hard for typescript i was gonna switch anyways i'm kind of in the middle now one one shout out i don't think we've made yet is ethereum.org if if you want to get started go to ethereum.org there's a ton of tools ethereum.org developers there's a ton of tools there i see chris in the chat with with reach there's a lot of other tool builders and tools out there uh just keep keep your head up pay attention don't don't don't go into the dark and build something like i did for for for months and months and months without asking anybody because it's probably not going to hit right like develop in public show off your stuff get feedback put it in people's hands let us play with it that i think that's going to lead you to building a better product in the space uh two quick questions uh can i use scaffold eat locally from kev yep yeah this is all local uh on my machine right like you've got your local dev server you've got hard hat and then you're just deploying locally at first but then what you do is you change that default network in your hard hat config and kind of point point your contract deploying satellite up to your public network and you point your app satellite at at whatever network that is and deploy your apps you kind of deploy your contracts and deploy your apps to a public network eventually but at first it all works locally cool and then what's the best way for people to connect for dev sessions with you austin ah dm slide into the dms i'm at austin griffith on twitter and telegram and everything else awesome thank you so we're pretty much coming up at the time i really appreciate all the speakers for presenting today you should follow all of them on twitter um there's also the telegram group you can join if you want to connect with other devs maybe you can build something together at the upcoming global hackathon uh and this is recorded again so feel free to refer to later if you need to catch up on something else um yeah and then thank you trent so much for uh organizing this and uh really hope you guys uh build in the ethereum ecosystem and uh we'll also host another onboarding session in a few months too i'm sure so you can check that one out as well and try if you had other stuff yeah yeah just just to wrap really quick um the it's pretty clear that these sessions are really useful for people so we will continue doing them and seeing updates from the projects like we've seen present here just to get you know a consistently updated view of what the ecosystem is and where it's going um so probably starting in january we'll we'll be looking towards the next one and like linda mentioned earlier and i relayed in the chat uh one of the best ways as you saw with symphony to build something is at a hackathon so i would strongly encourage everybody to apply you can apply by yourself or bring a team um to the next ethon uh global hackathon that starts in january um mid-january i believe and the first round of applications closes on the 31st of december so um if you're new or you've been around for a little bit i highly recommend this one is we're partnering with ave so if you if you know ave or if you've heard of d5 this is a great way to dip your toes into both ethereum development and then learning about defy itself um and then the last thing i will say is that if you haven't heard of eth global um like i mentioned we run hackathons typically it was in the past we did in-person events but all of 2020 we've done um online events only and so we're continuing to do that um at least while the pandemic is still going on so we'd love to have you join us we also have a small ish but growing developer community uh in our discord so you can also check that out as well any final comments or shout outs that the presenters want to make um and then we can just wrap there thank you so much this is this has been really awesome i just want to say happy bow tie friday all the builders hearts hearts of course great thank you again everybody linda that was perfect everybody for sharing the stuff that they've built this is a really awesome experience just to sit back and watch everything happen we will see everybody on the internet on twitter maybe in the discord or telegram thanks everyone thank you everyone 
let's give it another 30 seconds here awesome looks like we're rolling here okay cool well uh thanks everybody uh for attending uh here on zoom here on on youtube the building on balancer v2 session it's being headed by jeff bennett over at balancer uh really thankful to have balancer as one of our key presenter sponsors for the event and as you know many events over the years with balancers so excited to see about the v2 except to learn a little bit more about how to build on top of it and i'll get out of the way so that's uh jeffy can just take it away okay thanks happy to be here uh so i know people at hackathons are at all different levels you have aspiring student developers and experienced devs who might be new to blockchain blockchain engineers who might be interfering with balancer so i'll start with kind of an overview of a bouncer is the architecture high level interfaces and then show you where to get started building so [Music] okay so and we launched a v2 a while ago now um and it's it's mature now it's past its uh um the emergency period where it's now immutable there's hovering around up to up to two billion dollars on it uh in uh tvl so um i'm really pleased at how smoothly it's all gone so uh and of course we you know we launched v1 year before and this is the the natural continuation uh v1 was more of a product um things were more fixed uh balancer v2 is a platform so it's an amm platform so you can you can actually build not only new pools but new types of tools so the design goals here were as i said like flexibility extensibility and gas efficiency because these were the the issues uh we had with v1 it was a little expensive to use and it was a little hard to extend or integrate with and especially the uh the our interface uh we that was redesigned with the ux team from the ground up and uh the v2 version is is much better from a user perspective simpler and a lot cheaper to use and we've gotten a lot of traction with integrators and other uh users so as a platform you know what what does this do for you so how does it make it easy to build on it and it handles so we have this uh the central concept is the vault and that is where all the tokens are stored and it handles not only the token storage but all the accounting and the main security features and it has all the infrastructure for for pool contracts but it doesn't constrain you there's just a very simple interface that you have to implement and then you can write basically arbitrary code uh arbitrary logic arbitrary tokenization we also have other features like asset managers where you can pull tokens out of the vault where the vault behaves as if they're still in there and arbitrary flash loan receivers so and i've updated this slide from the last uh time that we've made a lot of progress so we're fully deployed and fully supported on not only covenant mainnet but also polygon and recently arbitral so all the uh evm are the main evm compatible l2s um and we're continuously developing and so far we have these kinds of pools so on v1 we pretty much had one kind of pull uh the weighted pole and ours the v2 weighted pool is quite similar it's you know two to eight tokens fixed weights dynamic swap fees um we also have a a two token pool which is an oracle uh and and has dynamic actually all the the pools have dynamic swap these and we even have the ability to use what's called a delegate owner and if you have pools can have owners and if you uh assign it to the delegate order then governance can uh can use some do some permission operations such as set the swap fees we also have a stable pool which was uh it's just two to five tokens it has an oracle in it um and it has it's for hard pegged uh tokens so it has um one-to-one tokens that are supposed to be one to one and then metastables are special ones that have two token and they can be for soft peg tokens so with every provider uh and then we have uh recently so v1 a big success uh story of v1 was included bootstrap and pools we have those now on b2 in fact there's one running at the moment um the ui is being provided by partners at the moment we have a copper and prime dowel and copper is up at the moment and there is a a klima token lbp going out at the moment those have dynamic weights and swap fees um so they're basically are similar except uh only the owner the owner is the only lpa prevented and then coming soon we have other things under development uh mainly invest pools that are designed for investments so they have things like management fee along with dynamic fees and swap fees and we have other kinds of pools that that do capital efficiency um similar to asset managers in a more flexible manner and i'm going to start going through this a little faster than given the time here um this is one of the original graphics we use it's still valid so it just shows you the vault has all the token balances you can do a swap you can join and exit and do flashlights so everything goes through the vault and this is a major uh efficiency of v2 over v1 in v1 the pools are all separated you had to go through them and you had to have proxies and if you wanted to join or exit a pool it would take three or four token transfers and now it doesn't everything goes right from your your wallet right to the vault so yeah this is this is that example and you have things like we have internal balances so you can actually avoid token transfers altogether with a wallet basically inside the ball of your own personal wallet inside the ball um and that allows you to do swaps and joins and exits and things all inside the vault with no token transfers all right and then so the interface this is uh so for transitioning a little bit to how to build on on this uh part of what makes this simple is everything pretty much everything goes through the vault so swaps really you can do swaps and joins and exits those are the fundamental operations so we have liquidity pools and uh you can do a single swap with it with one pool and there's two kinds so either you i you have you know how much a you want and you're asking how much token b can you get for it or you know how much you want and you're asking how much does this cost this is the two fundamental kinds of swaps and you can do either a single swap with one pool or you can chain these together in in batches and then we also have query swaps so what that is is it's kind of a simulator and this is very powerful for uis and aggregators it does the exact same code as a real swap so you know it's doing the same processing it can't get out of sync it just reverts at the end with encoded data so that's a powerful feature that i think is underused navarre um and yeah all swaps are two token you know one balance goes up one balance goes down and we've also added things like native east swaps in joints so previously you had to wrap each you know separately and then join a pool with the head within it now you can do that all all uh in one interface and then joining and exiting is what is the way you add and remove liquidity and another innovation here is you can do any combination of pool tokens so in v1 you had you either had one token or all tokens proportionally and a lot of amms work like that for instance you could swap other alter tokens then you have to have exact proportions the exact amounts um so on balancer if you have a five token pool you can join with two of them and exit with three of them so that's maximum flexibility and these are the kind of things we have in development there's a lot of them so not only the investment pools i talked about earlier and the the capital efficient pools we have other third parties that are that are building that have already built uh uh custom pool types on balancer so that one being the yield curve pool of convergent we also have the element finance pools and if you go on our balancer.fi main page for the app you'll see at the bottom you can actually link to the element finance pools and that's a general model if you're a protocol and you make a special pool type that's how it will generally work you'll you'll you'll be included in the main list of pools but uh when people click on the pool it'll go to a custom interface which can have the branding and explanation of everything and a custom interface for that vendor so that that's that's uh an easy way or how building house might look like so all right and then uh this is a part of the architecture discussion here um this is how the current pool types and how they're organized so we've tried to make it as modular as possible and so that you could um you know if we factor out different functionalities in different areas of the tree here um for instance the the pool participation is is the token contract that's handled by the balance token at the very top the base pool has the token storage and scaling interface but not the actual implementation so and then the weights are implemented at the base weighted pool level so everything that has weights is is part of that and stable pools don't have weights right they have an amp factor so that way at the bottom you you can sort of pick and choose what you want to implement so a weighted a regular weighted pool has immutable weights and tokens it's just like on v1 liquidity bootstrapping pool has mutable weights but immutable tokens all right and then over here the displaypool2 tokens that's an example of how you can sort of pick and choose things uh in this case we had a two token it's a weighted pool but it has an oracle because normal weighted pools don't have oracles so we needed the price oracle the weighted math the oracle weighted math and then we also needed to pull in the governance in the token contract and and the swapping logic so that's how we constructed that so you may find um if you want to do something non-trivial make a new pool type it's not trivial you may have to uh copy some code because it won't be completely transparent especially if you want to change something high up like like the pool participation all right so concretely we have the monorepo that's where all the code is we've transitioned to we went back and forth with a few different ways uh of organizing the code we were trying to have a core and some sub repos we ended up doing a mono repo um that's just a lot uh simpler to manage and things don't get out of sync that way and that's but that is very complex uh we're using workspaces um there's a lot of them and it's under active development and there's so it's not really what you want to start with uh we have uh published npm packages and you can use those especially integrators and aggregators people that aren't doing the smart contract newer new smart contract development um you you can use those directly and we have a stable branch in addition to the regular master branch we now have a stable branch and that corresponds to those published npms so if you want to look at the source code uh you know when you import something you look at that stable branch and not and not master and so for people to build on rather than uh copy the monorepo we have a much simpler uh balancer example repo so this links to the npms as dependencies and it will run out of the box um there's uh we just literally just started did this this week so it's a work in progress but it does have um it does show how to and i'll go through it in more detail but it does show how to you know deploy the vault authorize or deploy a pool and run some simple operations so it can be you can do a swap you can you do a join do an exit and check balances and that it has some simple helpers and typescript models so it's in typescript so the idea is uh and it's it's also a template repo so um it's designed to be to be a fork and especially friendly way so this is what you would do you would fork uh instead of forking the monorepo you would you you might fork this uh balancer example repo and work off of that and as i explained if you want to do a completely new non-trivial pool type it's probably won't be enough to just import the npms you will likely have to um do something you'll likely have to copy uh some some code over from the monterey belt and we're going to have some uh we're going to make that easier uh over time but i can show that oh yeah this was let me show the well all right i guess i can do this i'll show the repo at the end then um so for ideas uh a lot of them are survived from the uh the last one uh we've just launched an arbitrary so really anything in arbitrary would be would be interesting there's lots of opportunity there it's new um something like uh even even one of the standard pools if you had some kind of logic on it because you can do a lot of uh you know you change ways you can stop with some of them um you can change the swap fees change the weights so that you could have something even off chain that that rebalances in a unique way with you know swapping to reduce impermanent loss is a lot of things you could do of course an arbitrage bot we have flash swaps we just saw some actual flash swaps um in with using internal balance um in the wild so it is possible to do that or some sort of relayer um really just surprise us you can do whatever you uh yeah we're just excited about uh you know what people can build and i also have a list of resources here which i i guess will be published at some point let me show you the um monorepo example repo so here it is it's it's we just published it today it's uh under you know github balancer labs balancer examples so this is uh built off an example we saw from marble drum and it has uh and this is just the beginning of it we're going to add a lot more to it but this is just kind of the uh you know first minimal um thing that has all the configuration because that's really the hard part uh having pulling in all the uh the dependencies so we have balancer balancer js which has a lot of the uh helpers uh to do it and so here's an example of um in liquidity provision so we have a couple scripts that you can run and i can actually do it here too when you're at the top of the there you do a yarn yarn build at the top level and then inside the examples here and then you can run the script and i'll go through the script just to show you that it works and this is similar to our of course we have the modern repo with all of its exhaustive tests um but we didn't want to publish all those those typescript things because they're very specific uh to our applications and we didn't want to have to dance there there goes so that it works it works out of the box so you should be able to just just uh fork or clone this and run these right out of the box uh with the instructions and read me but i can just go over this very simply um you know we have you set up the environment this um deploys i don't think i go through details here but this this deploys the vault and authorizer it mints um some tokens 100 tokens actually and it uh approves them to the vault and it uh gives them sends them to the trader so that you have some funds and then here and then you're deploying a way to pull factory all the pools are deployed from factories pointing at the vault so now it uh you set the parameters which is very simple and then here you uh from you create a pool from the factory you give it your name symbol tokens weights delegate owner um and then it deploys the pool and now you have a pool so given this pool um it's you can now join and you're joining on the vault because all you know join swaps and exits all happen on the vault given the pool id when you create a new pool you get an id and then you call the vault with that id um and a lot of the complicated parts of building on bouncer especially for uis is the encoding the arguments because it's so generic um that means you know we need to support any arbitrary logic that means that means that logic might require some data from the users so for a join you know it needs to know what are the token balances that you're joining with for instance and we don't know what what a new pool type might need it couldn't it could need anything so we have a generic uh user data uh bytes32 that we pass in or by a generic bytes uh user data argument that we pass in and i can have anything in it and it's up to the pool to decode that so that's a lot of the comp that's a lot of complexity and it's hard to do it on ether scan for instance um because of that so we have for that reason we have these encoders and this does it all for you um weighted pool encoder so you're saying we're going to join we're going to do an initial join when you create a pool the first time you join it uh you have to do a special initial initialization uh join and then after that anyone can join um in the case of liquidity boost driving pool you have to be the owner in the case of a regular weighted pool anybody can do that initial join but it just it has to be done that way uh first so and then uh you know we have these simple helper functions like get pool tokens so the vault is an object you know in typescript so it's it's very uh easy to follow here you you know get pull tokens print them out get you know pool balance of uh you know what's how much bpp does the trader have very simple straightforward code um this is a lot if you look at our tests you know this is enormously simpler than our tests and that's that's by design so here i've done a join and then here i do an exit and and this is all the encoding you make this structure and you call exit pool on the vault and then you look at the results and you do the it has some you know expect i guess this one doesn't so this this is joining and exiting there's another one i just put in that uh does it that shows how to do a swap so it has the same kind of beginning and then um again the call is just swap on the vault but it needs all these arguments that are structures so and so this shows you how to construct these um in javascript or typescript um and then this has um some expect this this is more like an actual test so it expects that the you know you do a swap in the balance is going to be increased by the amount you swapped in and the amount you swapped out is going to be going to be less than it was and it does a regular swap and then also a batch swap so here you know a batch swap is a chained set of swaps and you're you're you know you do the first step in the second step and then again it's just a simple batch swap call right on here so this this is the skeleton you know for and we're going to add to this a lot but that's how to interact how to deploy the vault deploy a pool and interact with that pool we also have um an example of how to say you're doing contract development so you say you want to do a new kind of pool and you can read the the detail docs in here but this this is a very simple example of how you might make your own pool type um in this case it is trivial enough it's basically a regular weighted pool that has a maximum of three tokens and we haven't really done much else to actually it's not even a wave pool it's just a pool that has three tokens um and it shows you the implementation here and part of that also is uh and some of the things you have to override and part of it is this also shows you how to do things from um inside a contract let me uh here with me just a second here in liquidity provision there's also this contract here liquidity provider so this this simulates if you have this is if you're like an aggregator and you're not making a new pool type but you're interacting with pools from a contract so the the scripts show you how to interact with it using javascript and this shows you how to interact with it from within a contract so um here we're saying initialize a pool from a pool id and and this is calling things on the vault and uh showing you how to construct these arguments it's very similar uh parallel really to the script code but it shows you how to do it inside a contract programmatically all right vault drawing pool um and you know it's very similar um and and this just has a join and an exit and we're going to add to this um you know as we go along so i think we're near near the end of the time i guess i have to open up questions or yeah we'll also share the the resources there are sdks also we have we have sdks for the sor we have a a great python sdk that lets you access everything through python and create pools and do swaps and all sorts of things so we have all those resources available and i guess we'll publish them somehow here awesome looks like we have some questions coming in the chat here uh jeff um we had first question we had from kevin um i think just wanted to go a little bit deeper into what the quarry batch swap is and how that can be helpful right that is it's it's a um it's a little bit of solidity magic it literally runs the same code um as the as this as the real swap would do so it's it's we have actually in that you can see in the code there's the query join query exit um and these functions are just they parallel the actual functions if you do a real batch swap it'll actually do the swap if you do a query batch swap it runs the same code it will actually do all the transfers it does everything all the way up to the very end it changes the balances in the vault you know and everything at the very end and then but instead of actually you know completing the transaction it reverts the transaction at the very end and it encodes the data in such a way that you can you can figure out what it did um and this this was cut there's if if you just look at the code in the mono repo um it'll show you uh it's it's basically all inline assembly that that does this magic and and there's links in there to where that was derived from but it's it's it's a wonderful thing for it's an unchained way and we also we have an sor that simulates it in javascript but this is an on-chain way you know in case your program needed to know what it would do you could use the that method and you would get the exact uh values that you need i hope that uh so for stable coins oh yes um well part of that's in development so we do have stable pools and we also have metastable pools and medicine so um so stable pools have um a get rate um and actually all of our pools have this get rate function and that lets them be used um as rate providers in our in our meta stable pools so one way to do a stable coin is have um your own stable coin in a meta-stable pool with um like our three pool or different stable uh difference table coin so there's just a lot here it's hard to answer uh we have we have the regular stable pool is one to one and then we have a metastable pool which has a rate provider uh which tells you the relationship so it's made for for for instance like dye and sea dye so very very they're not one to one but they're related and they're changing slowly like one is gradually increasing or one is gradually approaching the other and and that relationship is queryable on chain through some mechanism you know maybe and we have we also have adapters uh for that actually there's a repo um it has i think it's that has these examples uh let me find it of uh relayers that they have metastable rate providers so we have for instance an adapter for chain link um an adapter for compound tokens so yeah i'm not sure what if that answers but the question is there's a lot going on there we have different kinds of stable pools and we have uh even even more advanced ones that we're developing where we're concentrating liquidity of stable coins and and using them um you know to generate yield and so eventually you'll be able to use uh use another one let's see okay yeah maybe right maybe we can make some videos on stable coins i'm also not the staple coin expert expert there's people that are that worked on that more directly that it can probably explain that better but um okay different vaults i mean the point is that you don't that there is only one vault so the question is how difficult to extend vaults you can't extend the ball if if you mean literally the vault i mean the vault is um i suppose you could have another yeah you could always deploy another ball but that does there's not really a reason to do that um you know you know if you what you're what you're extending is the pools and the the pool types you can make a new type of pool that uses the same vault and it uses that way you have access to all the liquidity and the security and and you know governance control and everything that you have with the ball that's the advantage okay pool type so you're saying how difficult to make a new pool type and i addressed that a bit it's not it's not trivial um it depends what you're trying to do if you need new math for instance um so you know that would take a lot you probably would end up having to copy and a lot of the code from the repo into it if you're doing a very if you if you're using if you're just using a pool type uh like launching a pool from within something then you can just pull down the npms and use it no problem and maybe some very simple modifications um really really simple modifications might be able to be done by just extending one of the existing classes but if you want to do anything really really different you probably have to make a whole new you know if like if your math if you're using a different amm function so a different pricing algorithm you know different math you will definitely have to uh you know make another parallel structure sort of like we did with the weighted pool you know you might have to make a new pool type i guess you could look at the way to pull two tokens with an example because that's not as tied in to the inheritance tree as as most other things you'd make you put something on the side maybe you can borrow from some things you're going to end up having to copy a lot of code over from the modern repo so it's not trivial uh but you know certainly it can be done we've had people do it element finance did it um and you can look at their their pools a lot of those are and i think there's there's two or three other ones that are out or in development so we've already had several examples of people doing this um [Music] you know it's it's it's certainly easier than uh developing your own am from scratch that's that uh grants we have we have we we do have grants um ui level i mean you can also make all of our code is open source you can just make pull requests too um if it's a small thing or a bug fix uh you can just make a pull request um if it's um we also have a grants program uh so you can uh i guess that we it should all be on discord and uh or the website the the urls for that i think it's just grants.balancer.buy something like that um where you can do a proposal and apply for grants and yeah we have several in progress several several awarded uh and that's that's the area we're trying to grow along with so we're making major pushes here not only on the development end but also on specifically for developer docs like these sort of things to make make it easier to build on balance because you recognize that it is it is it's a complex thing it's kind of a trade-off you know that it's because it's comp it's it's very flexible and that leads to some irreducible complexity um and so we're trying to make that as easy as possible and certainly it's already been done and we're also uh trying to get more community uh involvement and decentralized generally and have more community involvement and have uh things like the grants programs um and you know we have the ballers uh and that's all expanding rapidly as well a lot on our plate and we're hiring awesome well i think that was all the questions i saw there um well yeah well jeff i mean first of all thank you so much for you yourself giving us the time and walking us through uh the new v2 um and also again big thank you to balancer for being a returning sponsor supporting youth online and being with us if anybody has any more questions after this or you're watching this afterwards on youtube uh you can of course grab the balancer team on their discord chat uh it's just a balancer channel there um for east online if you're attending so if you have any more questions feel free to grab the team there um and otherwise yeah thank you again and thanks everybody for attending hey thank you good luck with everyone 
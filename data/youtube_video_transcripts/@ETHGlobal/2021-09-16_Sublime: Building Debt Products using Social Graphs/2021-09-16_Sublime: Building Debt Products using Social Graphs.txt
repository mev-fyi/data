awesome well thank you everyone for joining us today thank you i think we're gonna wait for one minute we'll file in here give everyone a chance to join the session really excited to see what you have to present for us today while we're on the topic of logistics if you have any questions feel free to put them in the chat we will be getting a q a session afterwards we'll be getting to all the questions so if you have any burning questions or anything pops up during the presentation put it down in the chat of me at least you don't forget it and we will get to them afterwards i think we should be ready to begin here um thank you to everyone who just joined us uh we're here with tick from sublime and we're really excited to see what has been in store for us today uh i'll let you take it away i think you can do your uh do an intro for yourself a little bit better than i can but um what's up floor is all yours awesome yeah thanks thanks luke so uh hey guys i'm retik from sublime um so let me actually share my screen and i can start right away so my slides are visible right you're good uh good so uh i'll be uh doing the short workshop on sublime today and so we are actually a pretty new protocol uh we are about to launch our alpha in the next one to two weeks so i thought it would be a good way for me to also start talking about what sublime is how we're approaching the problem of under collateralization enchantment so what is sublime um sublime is a decentralized protocol that's trying to enable credit by collateralizing social capital so there's majorly two different ways in which people like to think about undercollateralization the main focus of our husband on this idea of credit scoring but credit scoring in general is pretty hard so it requires it's essentially a problem of capturing us or sort of curating as good data as you possibly can so uh in general credits going any kind of such data intensive problems requires thousands of different features so tala for example which is which is uh an alternative fintech form that does lending in africa latin america they actually try to source thousands of different features from people's mobile phones so they look for very simple feature such as your page your name your gender but they'll also look for a lot less intuitive features such as um how are you storing addresses on your contact books how are you how fast are you reading the terms of conditions or you know how many mistakes are making while filling out their forms so they go for really really minor data and the reason for this is because in general credit is a pretty hard problem so the way most uh such algorithms work is that they try to minimize their type 1 errors which is basically they try to filter out for as many people as possible so that they can lower the probability of default even if it means that you're giving away a bunch of good borrowers who would have repaid their own some time and to capture those borrowers that sort of fall past this first filter you need to increasingly increasingly look for better and better quality data so it's a tough job and it's also exclusionary in most cases so there isn't really a one size fits for all solution for credit scoring so like different jurisdictions have different kinds of credit scoring so the weights calculated in india is different from the way it's calculated in the u.s and even different segments of loans have different ways of calculating scores so if you're taking out a loan for a business the assessment process is going to be entirely different from the way it will happen for a personal loan for example um in fact 67 percent of the other population is not even covered by any kind of credit card bureau and this coverage this 33 percent coverage is actually by private private includes private credit bureaus so if you actually just look at public credit bureaus that number even falls lower but this does not mean that the the 67 percent of adults are not really borrowing money they just rely on different sources of income different sources of gaining access to credit in most cases it happens to be from their friends and family members or their circles of trust note that in this graph the the borrowed informally sector is actually kind of like the lower limit because it's easier to track any kind of formal borrowing whereas it's harder to talk any kind of informal body for example if you're going to shop at your local mom and pop store who knows you for a couple of years and you don't have money he'll probably that you buy anything as long as you promise that you've paid back over time so these are also examples of credit because it's happening on this idea of trust between you and the shopkeeper uh but these kind of transactions are very hard to actually track even for any person any participant taking part in a soviet so this kind of acts like the lower bound so the actual credit that happens in formulas a lot more so this idea of trust circles is something that we are trying to work on and sort of implement on a much larger scale so in our kind of trust circle what we're essentially doing is trying to bring in as many different kinds of stakeholders uh to allow them to start sort of delegating any kinds of credit that uh they're comfortable with amongst each other so the kind of stakeholders could be dows um they could be community members within those stars uh they could be normal consumers these could be off-chain retail borrowers or off-chain retail lenders uh these could also be institutions like market makers or trading firms that are just d5 native or it could be entirely certain aside entities uh the idea is that once you start having this trust network whenever there's a new loan request that someone has within this network it should be possible for us to find the most efficient part to actually to actually fulfill this loan request and notice that this does not require a direct link between the borrower and the lender it's possible for us to leverage the trust network itself uh to find the most capital efficient part even if there's no direct links so a national question that comes up is does every lender have to perform the risk assessment for every single borrower and the straightforward answer is no it's not really necessary you should actually just be delegating credit to borrowers that you fully trust so examples of someone that you would trust offline are your friends and family members right so you wouldn't really be asking for their income slips or their bank statements for the past six months to actually lend them small amounts of money so on chain uh the examples of such people could just be huge institutions that have a large amount of reputation attached to their names or it could just be thous or community members within dolls you're active whom you really really trust you just need to start delegating your trust to do you just need to start delegating credit to those kind of people and then the network the properties of the network itself essentially enable the propagation of credit so uh in our entire model we actually use collateral ratios as a proxy for trust so naturally if the collateral requirements are higher then that usually means that you trust a particular person lower also note that the collateral requirements don't necessarily have to be less than 100 you can start off at 200 and you can gradually keep on increasing it down as you get more and more uh comfortable with this particular borrower um so let me start off with some of the uh different aspects that we're dealing with when we come some of the different pillars that we're working with as far as sublime is concerned so the first is the idea of verification so what we want to do is essentially enable um every wallet address to essentially utilize any kind of reputation attached to the identities so that requires us to link up the digital identities with their wallet addresses so the way that we work with it the way that we actually solve this is that we have these special uh these special rules called verifiers which essentially uh create these links between addresses and any identity so for example the first identific the first verification that we support is verification by twitter uh in for this particular verification the admin or the team in this case is the one that's performing the verification so the sublime team is the one performing the verification and what we basically do is something that a lot of you must have come across usually so we essentially uh ask users to sign a particular message with their wallet address then we ask them to post it onto their twitter accounts which is then essentially uh cross-checked by us verified by us that the message is what we should expect it to be and then we just store this particular linkage on our smart contracts so now it's possible for us to also onboard other verifiers so for example this someone who wants to now act as a verifier for twitch streamers it's possible for us to essentially have them onboarded either through admin initially or through governance votes later on and once you have this verifier he's the one the other one who actually do the entire verification process so the way that it actually happens is by calling this particular function called register master address which essentially just stores this linkage of address to particular uh identifier and every single verifier has its own contractor is actually created a storage contract which is used to store all of these different mappings it's also possible for you to now for the verifier actually to now start linking uh secondary addresses once this primary address has been linked so what use case can we think of this just this verification module itself so you can imagine that there could be some specific debt products that should only be open to certain members so now let's say you are a member of an nfd dow and this nft dao has a bunch of community members and what it wants to do what it wants to do is raise that and use that debt to buy new nfts that are going to get added to their dock so what they would like to do is essentially just let some specific people to actually lend money into their particular capital race and in this case those specific people might just be the community members the existing community members of that town so they can essentially come on as a verifier on our protocol they can just verify those specific lenders that are already a part of the dow and then once they essentially uh supply capital into this pool it's possible for now to get them an ownership of any new nfps that are bought using this capital railways the second component is the idf savings account itself so the savings account feature allows users to park any idle liquidity within the protocol itself so what we do is that we have integration set up with different yield generating protocols which you call passive yield strategies so currently we have integrations with rv compound and wired and what this allows is that um so so essentially every user every pool or every credit line which are the two ways in which loans work all of them have a savings account attached to the name so any balance that is there on sublime smart contracts or any collateral that is logged for any of these different loans all of those can be not delegated to any of these different protocols or it can just be logged within our contracts if that's what you choose to do and it's possible for you to now keep on earning yield uh from within the protocol itself so uh and it's essentially possible for us to not even keep on adding newer strategies to uh the savings account itself so if you if you have any more strategies to also build it's possible for us to have that onboarded as a separate strategy uh so now we come to the first way in which loans work um so pools is the way in which so pools are one of the ways in which loans work on sublime with pools the idea is that there's a single borrower and there are multiple lenders who want to supply liquidity into this particular loan request uh for this particular method of raising capital the borrower has to verify themselves so they need to use one of the verifiers that was mentioned in the previous slides to be able to create loan requests via pools and it's possible for as i mentioned multiple lenders to satisfy a single loan so let's say if i want to raise 1 million dollars it's possible for you to just supply thousand dollars out of that one million dollar goal so uh here's sort of a brief overview of the entire life cycle of a pool pool based loan so there's a pool creation then every pool enters a collection period uh during which lenders can start supplying capital into this particular loan request uh once the collection period ends uh there's a loan withdrawal period or so it's a specific time within which the borrower has to withdraw whatever they've collected and once they've actually withdrawn the capital the loan goes active uh and during the active stage itself there can be a bunch of different things happen so uh the they said they have to continuously pay off their loans uh it's possible for them to ask for extensions on any repayments it's possible for lenders to use any sort of margin calls to force the borrower to put an extra collateral and once all of that happens once the loan period ends uh the pool goes into the closed stage so these uh sort of branches in some sense are some of the uh variations that can happen through this flow so for example during the collection period itself it's possible for the pool creator to cancel the loan request um if there is some case in which the borrower doesn't meet a repayment then the loan essentially goes into a defaulted stage and it's also possible for us to terminate any specific loan request uh if it comes to if it comes to attention that this is actually a malicious person so initially this role will also be handled by the admin but it's possible for uh this to be handed over to the handed over to the governance over time so one cool feature about pools is that um whenever a borrower creates a loan request and a lender supplies capital uh every lender gets erc20 tokens that represent their position within that specific pool so let's say if someone is borrowing one billion dollars and i supply thousands of dollars out of it i get a bunch of pool tokens that represent my thousand dollars worth of possession in the supreme request uh these pool tokens are also the reason why you can actually uh withdraw any kind of repayments that the borrower makes and it also allows for a bunch of different use cases as well so one of the uh one of these sort of interesting use cases is building structured debt products using these pool tokens so um let's say you as a lender um have uh lend capital to a bunch of different borrowers uh in this specific example maybe you've lent money to an institutional borrower a dow as well as some specific community member uh you receive pool tokens that represent your that represent your share in each of these different loan positions right what you can do is now you can sort of package all of these different pool tokens into a single erc token into a single erc20 pool token and that essentially becomes a collateralized obligation which means i mean collateralized obligations are uh essentially packaging a bunch of different loans together and sending that bul and selling that bundle to a third person and what this does is that it now allows the new owner of the cdo to sort of expose them to a much more wider range of risk as well as reward so the community member for example in this case with someone would be someone who might present a higher risk but at the same time it's also likely that they're also paying a higher interest rate and that could be countered by the fact that these an institutional borrower and there's also a dow that's borrowing from within this particular token so the probability of default is essentially getting mitigated to some extent uh so as i mentioned the pools themselves provide a huge amount of flexibility so these are some of the different parameters that have to be set while creating a particular pool so pool size for example is how much you want to borrow minimum borrow amount is for example what is the minimum amount that should be collected for the loan it was to go active then you can set the assets that you want so currently we support all erc20 assets so it's possible for you to set any collateral asset any borrow token asset uh equilateral ratio the number of payment repayments that should happen how long should each repayment interval be and what is the savings strategy so where should the collateral be deposited as long as it's locked for this particular loan um and but just because we have all of these options it's not necessary for you to use all of these so what you can potentially do is create a wrapper function which calls this create pool function and while calling this creator function you can some you can hard code some particular features so for example if you just want to create over collateralized tools you can you can create a wrapper function which the front-end users will be using and you hardcore the collateral ratio required to 200 and that calls this particular create pool function so these are some of the actions that the different stakeholders can take in a pool itself so they can create pools supply capital execute margin calls etc etc again um you can still just uh focus on the functions that you actually want to work with uh and create products just using those specific functions so credit lines is the second way in which loans work uh with credit lines the idea is that there is a single borrower and a single lender and more specifically in this case the borrower does not have to have themselves verified so it's possible for the borrower to remain anonymous in this case uh this is very interesting because now you can actually allow the borrower to remain anonymous on chain so what could happen is that you can now create identity proxies for this particular borrow for this particular border to gain access to capital so let's say uh there's some particular borrower let's call them borrower a that wants to keep the identity hidden but they also want to borrow some money what they can do is that they can approach a different borrower borrower b who's the person in the middle over here uh and ask them to delegate a credit line to them and what the borrower b cannot do is that they if if let's say the borrower b has no problem in revealing their identity publicly what they can do is now they can create a public pool uh by verifying themselves they can collect capital from a bunch of different lenders and now they can use this itself to delegate a credit line to this borrower a and if the terms of the entire process and if the terms of the pool and the credit line are entirely the same then the borrower b in this case the proxy he might not have to put in any extra capital from his own end it's just entirely happening from whatever collateral that the borrower is putting in that's getting used to collateralize the pool that borrower b is creating so these are some of the important steps that are taking place is this so there's a borrow request the lender accepts the request and then the borrower can start drawing capital uh from the lender note that the capital that is drawn from is from the lender savings account so what we do is that uh the lenders the lender's capital is essentially in the savings account right so it can be deployed over compound harvey by you and for example whenever the border comes in and requests to draw from this credit line we pull the lender's capital from all of these different protocols and have that supplied to the borrower to fulfill this borrow request again here's a bunch of different actions that the credit line uh creator can take but again you don't have to use all of them you can just focus on specific uh actions uh all of which have functions associated with them in our smart contracts and build products using that um so to make it easier for all of you to start building with sublime we've actually created an sdk which you can just install using npm is sublime sdk and yeah so uh you can just start importing sublime sdk from us um so this is how you could sort of potentially get started so you need to start creating a new instance using sublime sdk so these are a bunch of different contract addresses uh that we're actually using uh there's two mains objects uh that you could potentially use so the connector actually allows you to call all of these smart contract functions that we made up and we've also deployed a subgraph which indexes all of the different events that get called during any transactions you make with our smart contracts so those can be accessed by using the sub graph object so for example uh creating a pool in reality will require a couple of different steps so we use this particular uh heuristic called create2 which uses a couple of different function calls but by using our sdk you can just do it using a single create pool function call similarly for requesting a credit line so instead of creating instead of going through the entire process of making a web 3 call we've made it such that you can just use a single request credit line to lend a function uh to batch all of those different function calls together what we've also gone ahead and done is uh made it easier to handle any kinds of units so typically when you're actually interacting with smart contracts you'll have to do a couple of different base changes so some some different assets for example work in the basis of 10 days to six some work in the basis of 10 raised to 18. so we've handled all of that on our back end and you just need to put in numbers as you would normally would so 13.23 liters for example you just need to put in 13.23 if the equilateral ratio is 450 you just need to put in 450. so here's all of our resources um and i'm sure these slides will be shared with you guys so the contracts that we've used in this particular uh for this particular sdk are actually deployed on the govern test net so you can also go through our docs which is docs.sublime.finance and yeah so as i mentioned we are actually about to launch our private alpha over the coming week so do feel free to drop by our discord channel as well and our entire team is over there to help you out with anything you need thank you that was an incredible presentation really excited to see what people do with the sublime tech when it comes down to building their projects throughout the event uh if anyone has any questions now would be the time to ask um as the tick is right here let's do it right now this is a this is as good a time as any feel free to pop them in the chat or come off of mute turn on your camera and ask away one of the uh users in the chat says all the best of the launch i i'm really excited for you as well um definitely we'll find that from you know from our end when i give you guys the boost we can i'm sure it feels good to to actually get to launch date i know that's it's extremely stressful but um yeah the whole team has worked really really hard to make that happen so i think if uh if no one has any questions we can wrap up earlier if there's any last things that you you'd like to to go over if you have like a minute or two more than welcome to to use that to your advantage but um any plans b to b i think they saw one question there uh so it's actually possible for you to set up credit lines between uh so b to b in our case and for uh d5 in particular i'm just assuming it to be doused because um it's it's it could either be dowse between those or it could actually be from dash to institutions or institutions to institutions i guess and that's actually one of the use cases that is possible using sublime so uh there's a couple of institutions that we've spoken to by institutions i mean market making forms trading firms who usually do and end up sort of engaging and sort of boring and ending amongst each other and it's entirely possible for them to now do what do the do all of that using our smart contracts directly on chain so credit lines for example are anonymous right so a lot of the trading firms for example like to keep their uh capital movements anonymous um and with the credit lines it's possible for them to do so it's a really cool use case yeah i know um as anonymous as possible is incredibly important at that scale if anyone has any any further questions um feel free to pop them in the chat or uh you can end our stream a little bit early here actually no right on time what am i saying well thank you again for for joining us everybody um and thank you for the excellent presentation really excited to have sublime joining us here and i'm really proud of your launch tomorrow awesome yeah i'm really excited as well and looking forward to interacting with all of these participants over the next month so i was i took part in the ethanol and hackathon myself last year so it's super exciting to see that you know one of these sponsors that's why that's why we do it it's it's it's really incredible to watch teams you can even form out of these hackathons and come back and be part of them it's it's it's great to be part of the ecosystem in that way thank you thank you thank you again um all right we're going to be ending the stream here uh feel free to pop any more questions you have in discord in the sublime channel and follow up throughout the event with uh the rest of 
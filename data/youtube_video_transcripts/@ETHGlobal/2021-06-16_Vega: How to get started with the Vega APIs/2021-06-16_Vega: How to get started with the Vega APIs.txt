and we'll get to them either towards the end of the workshop or um throughout the workshop so if you'd like to connect with the video team after this workshop please join the discord channel the sponsor just the sponsor vega discord channel this is where you can find the team and they will be happy to support you and continue the onboarding over there without further ado let bill take it away and start the presentation hey thanks for the intro uh yeah hi guys um so i'm gonna walk you through um i'm gonna walk you through some examples of getting started with the apis on the vega test net today um it's gonna be a bit of a practical um presentation and um i'll just uh i'll just share my screen and get started on that um so i guess there's kind of an overview um in case people don't know i'll um talk a little bit about um a little bit about what vega is um and where you can find developer resources that you might want to use after this um if you're going to be doing things kind of independently so um vega is a scaling solution for derivatives um it works alongside uh other kind of layer 1 block chains it is its own chain as well uh based on tendermint um the tenement protocol for consensus um currently we bridge to ethereum um where we can use erc20 assets on there as collateral for creating markets and um for trading on the network and then the vega chain is responsible for managing the balances the profit loss of the traders managing the risk of the network and all of that um i'll give you we'll see a bit of this when we when we dig into and there are lots of resources on on the website uh with more detailed docs uh but by kind of building a custom blockchain we're able to optimize for a lot of things that make uh trading applications useful um in a decentralized environment which is quite different from if you just you just used a smart contract to try and achieve the same thing so um it's quite powerful and and the performance of of the uh the platform um and the network is is is sort of intended to be as comparable as possible with what you might find if you use decentralized exchange but for you know for derivatives and not spot which is quite a complex use case so we've got a bunch of different developer resources available you can check them out at docs.testnet.vegadex i said uh you can yeah join the discord and there are a bunch of different channels on there for people to collaborate and talk about things they're building and ask the team if they need any help um we have a couple of different sort of user-friendly apis built on top of the chain um just to kind of enhance that the experience from a developer point of view um there's a rest interface which we'll see today um in the little coding example that we'll go through there's uh graphql um and you can stream real time data as well um over websockets but we won't get into that it's a bit too much for the the half an hour but um come along and talk to us on discord if you're if you're interested and we can walk you through some of the more complex aspects of of it as well um and that's kind of it for the the intro there um that's just our twitter um and then i'll talk a bit about the prizes that um we've got in in this um uh through sponsoring through sponsoring this event so um there's uh gonna be a 4k uh usd prize pool to share um for anyone who built something on vega so this is kind of you know depending on how many people um that will determine the amount um but that's uh that's just for building you know what whatever whatever takes your fantasy um and then we've got some specific sort of challenges of things so we'd like to we would potentially like to see um to see people have a go at building and this is us thinking about um as a team what would what would be interesting what would really show off some of the unique aspects of vega um and so one of these is around yeah visualizing fees i mean this is on the the uh the uh eth global page but um i've just taken a screenshot here to talk through um uh you know so you can go there and read more but uh yeah visualizing fees and there are some ideas here about what you might might want to do um and you can we'll see how you can get the data up for this stuff in a minute and then um other things like um interacting with vega virus spreadsheet and some examples here for things that you might want to might want to show um doing that um but yeah then they have different prices so feel free to kind of check that out um and yeah without further ado we'll jump into kind of the practical side of things so i've got some code here which i've prepared which we'll use in a minute but before we do any of that um i want to kind of show you if if you haven't seen already how how you would run a local wallet um and the reason i do this is because when you're building applications you really need to be set up have a proper dev environment sub so to do that you would go to our github page here check out the go wallet repository there's a readme here and this is a binary that you run on your local machine uh creating and allows you to create some keys that you'll use to trade on the network so you can download the wallet from releases i've already got it so i won't do that um and once you've downloaded it you uh let's see you can run it in the in the command line um and uh what we've got here is for me already because i've created some keys i can remember this off the top of my head um i think it's called my key close so what we've got here is basically a public private key pair now this is for the this is for authentication against the vega network um um this is just on test net uh obviously i wouldn't be showing the private key if it wasn't so um and uh you can run a service using this binary on your local machine um which will uh allow uh you to sign transactions and trade on the vega console from your from your from your laptop um and you can write and then you can write scripts which you know which interface for this this is what we're going to do when we start building so uh i can use the console now to say i want to connect to a local wallet so this is going to connect to the wallet that i'm running and once i'm connected i'm pretty much good to go because i've already added a balance to my key earlier before this call in preparation so you can see here i've got some test die assets um so 99 000 so that would allow me to trade on any market that's settled in this test asset so the one we're gonna use is the rvdi market and you can see the balance here 9900 and just playing around in the console just to get a feel i can go uh and just take like a market order for one contract on here uh and you'll you can see that i have an open position on here now um and i'll close it because we don't need it at the moment but um just takes a second or two and all of that's happening on the vega blockchain um the assets live on ethereum um and it gets credited to my vega ident my vegan public key uh when i make a deposit to a smart contract on ethereum so um and you can request uh from our faucet like a deposit via here so we've built some tools that allow that allow you to just basically request more of these test assets so uh you can just click gets and get t die uh and it's gonna that's processing the deposit um in the real world you try you'd actually do a transfer from from your wallet um rather than it coming from a faucet but uh just to show you sort of how easily you credit that balance there and once we've got all of that set up um we can start thinking about building just sort of a a simple application to uh let me just go back so i said um a simple application that uses our apis um as a starting point so i'll just pull up the docs so docs dot fairground.vega direct so i said so fairground is our kind of official name for testnet and here you can see a bunch of information about the apis so grpc rest graphql and there's a bit on the wallet as well um and yeah i encourage you to kind of yeah dig into these in your own time um to look into them in more detail but there's a whole host of stuff here that you can look at um over rest and then graphql uh which is kind of more flexible um it can be used to stream real-time data kind of shows you here the object models that you can use to access to get things like positions and trades and all of that so um that's all this is all very detailed uh something that is worth looking at quickly is this graphql playground um so this is something that that we host that allows you to kind of test graphql query so i'll just show you that quickly um you could say let's see what do we want to do let me just grab the id so this is the id for the rfa die market um and you might so you can just fetch a market by id so you type markets uh i think it's id [Music] query markets id um and then you can select like the information that you want from the market and run your queries here um so that can be handy to to kind of debug and look at what's going on so we can build like more complex queries so we could add fees and i think fees fee factors so we can look at like what's the maker fee on this market and it's really flexible so there's that and then there's the rest docs and we're going to use the rest api today plus the local wallet which i started a minute ago um and so i'll pull up the code and this is a script that i've already prepared uh which works and i'm we're basically going to recreate this and i'm just going to show you show talk you through what it's doing at each step um so let's call uh let's open this trade too uh and we're going to build something here now which is just going to what it's basically going to do is it's going to use my local wallet and the balances that i sort of showed you before um it's going to and it's just going to send random trades at the rv dive market um so it's not very useful but what it does what will show you is how to plug everything together with the wallet with the rest api and actually build something that is able to trade on on the vega network um so we'll go through this one step at a time i'm going to copy them across um so it's easier for you to see so uh in order to do this we need to define a couple of things in our script um one is the market id for the market we're going to trade on so i've fetched that already uh beforehand from the api we we need our party id which is the public key on vega so this is like the identity which holds a balance so this holds the test die assets it's like an ethereum uh address or a similar to like a bitcoin address but it's uh this is uh relevant to the vega chain uh we need that we need to know the name of our wallet because this holds the private key for this party uh which we'll use which we'll use to sign transactions so that um we prove that we're authorized to trade with that uh 99 000 die and then just the password and some urls here uh for the wallet and for the test that to submit uh the transactions when we want to trade so we'll define these global variables um and then we'll have uh just a simple loop in the application uh which it's gonna do uh this is the trading move and this is just gonna loop and once a second it's gonna execute this function trade so i mean let's just see uh just to make sure that that's working yeah that's fine so this is the trading loop um and we'll do something a bit more useful in in there in there now so uh what i've already prepared here is this trade function um and i'll just paste it in and talk you through it line by line so this function generates a site so you need to say whether you want to buy or sell so the side is whether you're going to buy or sell and then generate a size of a trade so we're just using the random library in python to randomly either buy or sell if this number is greater than 0.5 so half the time it will buy half the time it will sell and we're generating a random size between one contract and five contracts um and then we fetch a token get token is not defined yet so uh that's not going to work until we define it and then we do some other stuff to submit the trade but again those functions are not defined so just to look at this um and see if it's doing that okay cool so it's randomly gonna sometimes it's gonna buy something it's gonna sell it's gonna do different amounts um once we've done that we can get do this get token step um and this is uh part of the authentication um that's required to submit trades so this is going to use the wallet um and i define get token in here now it's pretty straightforward um it sends a request to the wallet that's running on my local machine so wallet server which is localhost um and it gets a token and that token is is used to authenticate um and sign the request that gets broadcast to the blockchain so it's not so exciting to see that step but let's just do it just to prove that prove that that's working um and we can see that we are definitely fetching a token and it's different each time um and then we can move on to uh preparing the order so i'll grab the function for that um we're going to prepare an order um and here we're just passing the size and the side so buy this many contracts sell this many contracts um to our function um and then we're using these global variables for market id and party id to say on this market which is rvdi for this party um the one on my local wallet i i want to buy this many contracts or sell um and once we've done that we um send this to uh basically to the vega uh one of the vega nodes api nodes um and it generates us um basically a base64 encoded uh piece of data which is which can be broadcast to the blockchain so um and that's because under the hood vegas using like protobuffer files for the different objects and that's what this is doing so it's just allowing you to generate that binary data which is then sent to tendermint so it's not doing too much exciting but it's an important step and again let's just check that that works as we expect i'm actually going to get rid of the print token because it's like taking up too much space uh ah it's broken okay why [Music] um ah there you go let me just check something hold on one sec there was some issues on the test net which i wonder if it's impacting this let me just try something else okay yeah so that we're running um right now we're running some test net games and lots of people are lots more people than usual using test net so i've just swapped the url for the staging um for our staging network which is not under such so much load so um and it's working okay so we'll uh we'll do that um instead but so that's working now so and we can see it's generating this uh this binary data that we're going to broadcast to the blockchain now and then the final step is to uh to sign and send the order so at this stage we're now going to use the token from earlier and the order that we've prepared so the binary data um sign and broadcast to uh the vega chain and then that goes through consensus in the same way that a transaction on bitcoin or ethereum goes through consensus on those networks um and for that i need to copy across the sign and send function um and this is just building a request in the valid format to send to the wallet server and because we're signing this goes to the wallet server again because the wallet server holds the private key um you want to keep that on your local machine obviously because for the same reason you do with any other blockchain if someone were to get hold of it they would effectively be able to transact on your using your funds that are deposited to vega um obviously you wouldn't want that so um so yeah we keep that local and in here we're building the request with the uh the prepared order and the token um and we set uh this flag propagate true um and this means that what so we send this request to the wallet on our machine and then the wallet binary on our machine broadcast that to the to the nodes on the vega blockchain um and we'll get a status code back from that so then we can just check if we get a 200 and if we do we'll print the that we executed an order and if not we'll print the json so we can see what went wrong um and if all of that works then we'll be able to go back to the console um in a minute and we'll see one we'll run the scripts and we'll be able to see the trades coming through on the console so let's give it a go um python trade two okay well that looks good although i don't know why it's not doing another one let's see okay it's just a little bit slow okay so that's executing them and we can see on our wallet actually this is a good thing to look at so we can see that the wallet is actually sending these transactions as well so that all looks happy so it's outputting um sending transaction to vega node which perhaps you can see um see there let me try and zoom in case it's difficult to see so those trades look like they're going through and let's have a look on the console just to sanity check that that's actually doing something and again this but i don't know how how easy or difficult it is to see this um but we can see if i zoom in hopefully that is actually trading so here our exposure so our open volume is changing every second or so so minus 10 minus 14 minus 17 and it will average to zero because half of the time it buys and half the time it sells and yeah that's kind of it so um that's i think the full [Music] sort of walkthrough i'll just stop it and go back to the code quickly i don't know what the wallet was doing then and just pull that the full kind of codes code example up so there's a very simple example obviously of how you would how you would get started but yeah 50 50 lines or so of python there and this is there's a get repo with this code in on on our that's public on our github as well so have a look for that i think it's called hackathon something and yeah you can obviously build on this to build something that actually trades based on uh use you know external data or uh other information on the network um rather than just randomly but these are kind of the building blocks to to get going um so yeah i hope that was helpful and uh yeah see if there's any questions that in the chat i'll stop sharing cool thank you so much um i think let me check if there's anything coming up from youtube no i think we're good um thank you so much for this uh wonderful uh talk and i'm sure that was super informative for people and and how to get started with vega uh if well there's one question coming can you i guess the question is uh can you which which product i do you suggest is one of the question and how can i deposit talking tokens for open to open a position on mainnet i suppose yeah i mean i i'll take the second question first um just because uh yeah so this is only test that now so it's easier to answer so this is only test that now uh so i don't i don't think your question is quite quite right so like appropriate for where the stage we're at so what i was showing you there is using fake assets on roxton so yeah you definitely shouldn't be depositing any kind of real assets uh when we're on mainnet you would deposit um you know standard erc20s that exist on the ethereum mainnet but this is very much just like tesla at the moment that we were looking at and yeah you can do that through the console on the first question which product idea do you suggest um i i would recommend like have a look through the apis um and look look through them for inspiration uh by thinking about things that uh are unique to vega that would be the most interesting i think for us to see is things that are uh not currently possible with like say using us the apis of a centralized exchange um just try to be creative and uh yeah we you know anything that really showcases like the the potential that um that vega has is probably the most interesting um but you'll find yeah uh the most inspiration for that by looking through kind of the api docs and seeing what you can do with it yourself in your own time great well thank you for all this bill um i think uh that was great and thank you for everyone for joining us if you'd like to keep the conversation going please join the discord channel vega sponsor discord channel and that's where you can find a team that will help you and support you throughout the hackathon 
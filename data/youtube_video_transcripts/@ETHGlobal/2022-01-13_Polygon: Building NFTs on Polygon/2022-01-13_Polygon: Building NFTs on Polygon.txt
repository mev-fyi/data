is a polygon workshop the name of the workshop is polygon building nfts on polygon and we have shannon huh with polygon is going to present there'll be questions at the end and you can post questions in the chat and if we have enough time we can do questions just turn on your mic at the end um all right at that i'll let shanann take it away yeah thanks andrew appreciate it everyone welcome welcome uh thanks for joining the polygon build a build nfc's workshop um i'm sean on uh i uh demoed these daps and i built example apps for um polygon for all of you to uh just you know quickly fork and then you can make your rapid product iterations um so i'm going to kind of show you the general gist of like first delay of the land on how to deploy on polygon and why you should deploy your nfts on polygon really quickly and then we're going to dive into a few examples like how do you do it what happens how do you make something uh you know like that is you know custom and um essentially how do you like make all the other nfcs that other people are minting out there with all the random stats and uh rarity stats and whatever um or the entities that you like so now let's get started so the main motivation for doing things on polygon is the fact that everything is a lot faster a lot cheaper and maintains a certain like an acceptable level of decentralization and security all throughout it um nfts on mainnet typically cost around like 70 to 100 bucks to mint um if your gas fees are around the medium to high range uh which happens to you know like moderately uh you know commonly um and so you know that's the 70 to 100 bucks per nft minting uh is kind of a bad user experience you know like it shouldn't it shouldn't cost sky high or rather it shouldn't cost more than would your the price the floor price of your nft to go mentor nft um you know so that's not not particularly the best ui and so we're kind of um what polygon is more focused on is offering you a large kind of scale uh worth like a lot of different types of scaling solutions um for you to for you to experiment with today we'll be focusing on the proof of stake side chain um which is uh essentially just like you know how you would you would deploy daps and nfts just like how you would on base layer ethereum but uh you would do so uh deploying to the mumbai uh test net or the matic mainnet instead and all that all that includes is just a slight change in your either your hard hat or truffle config file um which we will talk about a little bit later um and yeah what that does is just allows you to deploy things on the polygon and once again the reason why you want to deploy things at polygon is because uh you know things your dab would be a lot faster like around 20 to 30 times faster than what they are right now um your transaction costs would be hundreds of times cheaper and uh we have a really great ecosystem supporting artists games um etc and so right so uh onto the ecosystem a little bit um we have support for openc so no need to worry about that uh we have also a lot of other nfc projects i've already deployed successfully and there's quite a lot of people in this ecosystem right now willing to support and continue to keep on track with you once again no new skills are needed all you need to know is just your solidity for your smart contracts uh your uh and the smart contract portion of doing any nft is um quite easy which i'll show you very soon um it's not as it's like you know at least to design a basic one you know you can you should iterate on it however you want but um you know uh the front-end javascripts you probably already also know already um from being like a web to developer if you don't that's all right there's plenty of online resources for you to learn javascript from and many ways to frankenstein things together so that makes sense um you also have uh yeah once again all you need is also just hard hat and truffle or truffle um i'm going to be demonstrating hard hat today if you're not familiar with hardhat don't worry um it's very intuitive to pick up and you can pick it up very easily via scaffolding um once again i'll be demonstrating that in like about five minutes um but there is uh austin who's also giving another scaffolding uh workshop tomorrow uh you should all tune into that he's like the he's the creator slash founder um of scaffolding uh great guy very very cool big shout out to him um so yeah definitely check that out and uh now i'm going to show you a bit about what we're going to go over today so we're going to go over um a thing called polygon academy and we're going to go over a few repos from here very very recently updated this is where you can find um essentially like a lot of um like actively maintained dap starter kits um that are here for you uh you know for you to fork from and then rapidly iterate on um especially because well you only have like two days to do this hackathon right so um get the boilerplate code out of the way and then you can you can start deploying your own chain and mts and just focus on the uh on the kind of important parts of it so um right so besides for this you'll also need uh to understand how to use a faucet it's extremely simple uh just paste in whatever address you're deploying your smart contract using um into this little wallet address uh box and then it will send you um like one uh test mumbai uh mumbai tokens are not worth real money main automatic tokens are worth real money if you want to get uh mainnet tokens and you know deploy on mainnet um also very very simple uh you can do it via this polygon bridge um but you can i think you can just deploy on test that and if you have a product that's working on the test net i think that's you'll be perfectly fine um so yeah and um just to and also uh polygon also has a blockchain explorer for both the mainnet and also mumbai um so this is just here to make sure that your contract actually exists on chain um and that you have deployed your contract correctly um so just you know these three resources i'm gonna send them in the chat um and then we're gonna move on to uh actually working on adapt so let me just reshare my screen here to my entire screen here we go all right cool we're still alive kicking so um first we're gonna do we're gonna do a really nice and quick uh just like a basic tutorial on on how do you deploy any smart contract and what do you really want to watch out for so um the first thing uh and a lot of the spoiler boilerplate code is also already written out for you um all of this is relating to which network are you deploying on so and there's also a lot of stuff down here about um you know like your local wallets if you're going to be deploying on localhost scaffold eth has like a whole like test environment on localhost that you can deploy on before going to test that so if you want to like save yourself some time feel free to switch this thing to localhost first before deploying anything to uh to to a testnet or to a mainnet um and of course you switch both this and this is this is located just in under packages um and hard hat hard hat is where you have all your smart contracts related things and you know react app is where you have your front end related things so you can change this to localhost and then you can also uh go into react app source and then uh app.jsx uh where you can also change this network to um localhost but um we're gonna be deploying a mumbai today so you know that'll be that'll be perfectly fine um and um so under here there's a thing called module.exports and if you're also working on truffle you'll also have this under migrations.js and what basically this says is okay which network are you gonna deploy on um do you want to deploy so you know here's network you're gonna deploy on localhost um probably the simplest one um you can also there's also a lot of others so uh you have rinkaby and kovan but we're gonna deploy today on mumbai matic mainnet is also here if you want to um and also uh depending on which uh data oracle you use just make sure to have that you know your data oracle uh for you know maybe randomizing your nft is um you know it's it's it's according to it's according to whichever um you know network you want to deploy on and uh by the way uh data oracles just help you um specifically in this example that i'm doing this helps me fetch a random number that i'm gonna use for some of my nfc's unique rarity stats um you know because there's no rarity without uh randomization um and also uh the account that you'll be deploying from you can straight up just deploy this from um your account mnemonic and um so scavenge already has a mnemonic function where you can if it doesn't detect an already existing like your account it will you can create one via yarn generates um but if you do already have one it will be stored inside this mnemonic txt file uh this is obviously special for each computer um and you'll have to run yarn generate every time um your yarn generate generates a yarn account which um is kind of like your your deployer account that is used to deploy your smart contract with um and yeah so so you'll have to fill that up with uh that and the contract itself up with um some tokens uh especially like specifically um chain link tokens because chain link requires a fee to use uh their various functions so you're gonna have to you're gonna have to do that um to uh call their uh get you know get randomness or get get random number uh function right here um that will output a random stats uh for your uh nfc for for rarity um and now uh to go over the smart contracts a little bit before i boot this thing up um we have so you first declare a solidity version and then you import the various libraries to do a very basic nft like technically all you need to do is import this um erc721.soul uh file and uh inherit it via the is is keyword right so your contract is the crc 721 um and um this and so one of the more basic things also to have is this constructor um and all you need is this uh you don't really need this chunk yeah you don't really need this chunk but what you do need is just constructor um you know like public uh and uh erc721 so this essentially just initializes your nft and uh it sets the nft uri so where where the nft is going to be located um to ipfs uh your your nfcs which are located in this um sorry let me just scroll down here and this artwork.json file is going to be uploaded to ipfs and whichever nfcs you have you can just upload them onto this artwork.json file um json files are relatively like self-explanatory they just have a like the name of your nfc your description and external url image um and various attributes you know you want to slap onto each nft um that you can all like just copy and paste over so uh yeah so you can just uh replace this with whatever you want and then and then you can you can have this on on ipfs uh once you once you once you run a yarn upload uh which i'll show you what it looks like slightly very very soon so right so then after we've run the constructor function um what what next well uh i was saying earlier that you need a data oracle to simulate rarity on your nfcs um so let's say like you know what we have for example um nfcs with uh this uh kind of token strength stat right like your nfcs are strong like from 100 to one right um and uh to determine the the strongness you'll need a random number to do that um and so what you would do is um you would uh have a get random number function and then your mint item function which is another basic part of minting an nfc uh this is literally just the like let's mint the nft um function and it takes in a specific you know it i mean when you fire this off it stores uh your nft's um you know like token id um along with the token uri so um you know so for every single time you fire this off um this token counter here would increase by one um so you would so this would this is just like a really simple like token counter function uh you can also copy and paste this um and it's just saying that we're using counters counters for a token counter and this token counter is a private variable that is linked to the token id so you know every single token has a token id which is marked by this unique token counter that says token one token two token three um and yeah this is uh and so the rest of this other stuff um the bytes uh key hash internal sorry uh the internal fee and the random results these are all locatable under chain link vrf docs which is the documentation that i'm using for generating random numbers in your smart contracts um for rare like making your nfts rare um and rare with a specific level of randomness um as you can see here this is very much copy and pastable right here is your thing and you also have a little constructor function here which essentially just sets up your uh your contract for using the um the the vrf consumer base contract you do need um your and here's a really thing to watch out for um data oracles have specific uh like chained addresses so what i mean by that you see this address for the vrf and sorry i should probably zoom in like that um you should so when you know you see this address for the vrf coordinator which is right here and this address for the link token which is right here these are chain unique so chain specific um you will need to replace this uh with the correct one for every chain that you go on once again of course these are located on the docks but i just want to point this out and essentially if you're um you know just copying and pasting or you know uh and getting rid of the boilerplate code to kind of make your just starting your custom nfc project um this is what you need to kind of be wary of same thing with this key hash right here um and the fee they're all uh these are these are all uh chain specific um and uh i promise you i'll get to your questions very soon um i'm almost done with this so um yeah so this also maps uh every token or sorry every uh nfc that you meant to a status for if it's for sale or not um we're minting one of ones um uh and if you minted it you can't mint a duplicate of it um for the allies for this example you can customize this however you want um and uh yeah the rest of this is uh yeah so this also has a tracker for the um token strength set which uses this random result that we got from the fulfilled randomness function uh this is from the chain link uh like docs as well um the fulfill randomness uh this is how you get a random number and then you take this random number and um you have a specific token strength for every uh token and every token is identified by their uri hash um basically whenever when you do upload these uh nfcs to ipfs they get these uh token hashes so they get these ipfs hashes and we're using these ipfs hashes as uh unique identifiers effectively for the tokens all right cool so uh i've walked you through the smart contract um a little bit about just how to deploy any dap on a polygon and the front end uh effectively uh you can modify various uh aspects of it under here um uh it's it's in a jsx file so uh feel free to change that there's also um yeah i don't think there's much in the css file but um yeah but you can uh you can continue continue doing that um but i will boot up the app to just show you that this works so what you need to do first is you need to boot up a yarn chain um you can see the into any folder or rather any folder with uh you know scaffolding installed um i and then you can do yarn chain yarn chain boots up your local blockchain development environment um and it's it's necessary if you wanted to play on localhost um the next thing that you need to do is you go into this little terminal prompt here um i cd into the folder and all of these instructions are also on the actual repo itself that uh i got it from under polygon academy uh which i linked earlier on in the chat um so you do a yarn yarn generate and then you do yarn account which creates a uh deployer account for you my deployer account already had some rigby in it so i copied this address and then i went over to the faucet to submit a transaction and then get myself some test tokens after which i um sorry after which i ran a yarn deploy and then that just deployed uh well i mean you have to sorry you have to run a uh yarn up uh yarn upload first and so what yarn upload does is it um uploads all of the nfts inside that um this artwork.json file onto ipfs so you do that first and then you do yarn deploy um which will deploy your smart contract um i'm just gonna run it again just you know for the sake of it um but it's it's probably going to say that it's reusing um oh shoot what happened it's probably going to say that it's reusing my contract at a certain address because i've already deployed this okay uh yeah okay i think i think it's uh it's doing its thing right now all right so we'll just we'll roll with that uh that's fine and then uh let me see here so your collectible deploy too right so then if we copy this contract address right and then we go on to openc verify um it is on openc uh it's just that no nothing has been done with this contract yet or nor have we sent anything to it um so that there's that um so then now i've done that now that i've done that and actually deployed my uh contract i can feel free to exit out of that actually i can um cd back into the folder so nfc [Music] example and i can do yarn start yarn start will uh start up a local uh locally hosted front end for me um it's uh yeah it's just it's just similar similar to what you would do on truffle with um npm run start but it's just that we're using we're using and you can also you can all message me via peep 6960 i'm also in the east global service so i'm pretty easy to identify um it's the same peep that's on the team so um yeah you can feel free to feel free to do that um let's see here um sublime text nice yes sublime we also i also use uh vs code i so i first started using sublime and then for some reason i'm you know stuck between the two and uh i guess i'm i'm shifting over i don't know um to the s code but i use both um is there something like a create react app command for polygon react template oh that's a good question i think you could um there might be a brownie um command like that for for polygon if there isn't um you can uh fork this starter kit this uses truffle but if you want a hard hat starter kit use this one so there's there's tons of that on polygon academy if you um if you don't have a brownie specific one can we work with brownies yes of course um what are your suggestions on how teams should address the perceived exclusivity factor uh on launching an mt project on ethereum rather than any other i mean i guess you can but this is east global and we are like in the ethereum ecosystem so you know launching ethereum projects are kind of kind of kind of our thing you know um but yeah uh you can totally do that um okay cool so so that that booted up our front end and yep your contracts your contracts here is available um and then you can just cd back into the folder uh empty marketplace sample wait cd wait what was the folder called again sorry nft market example oh sorry nfc market example and then we can do yarn let's try the yarn uploads maybe maybe that'll solve the issue of the front end gallery not showing up um but as you can see here the uh your collectable contract is down it's it's it's existing it is fully there um i have tested this out uh before and uh this was completely fine um so um maybe i messed up because um i tested this out before and i did yarn upload first and then the deploy next i did this on rinkaby um though so um yeah maybe oh man maybe i just messed up on that stuff um i needed to like upload my nfcs first before i get to momentum right so ah man rookie mistake sorry guys um so injecting assets into the front end maybe i just need to refresh no it's not gonna not gonna show up yet all right well um in that case i can try to do a yarn deploy again but i will i do assure you this has worked before um and i'll keep continuing answering questions while that well that uh well that happens looks like the faucet is dry from gurley uh yeah maybe that might be the case um i don't think that'll be a huge problem though because you're deploying on mumbai anyways but i know how much link token on polygon how much is a link token a polygon official oh man sorry man i don't i don't know the token price off my head um but i would i mean i would just still recommend um deploying on testnet first and uh the good the great news absolutely great news is blank tokens and um polygon tokens are both really cheap on on polygon so this probably shouldn't take more than 50 to 100 bucks worth of worth of matic um assuming that you're already on polygon uh but yeah this is it's going to be really really cheap um i'm not saying that 50 to 100 bucks i think that's pretty that's a lot of money but um you know uh it's not as expensive as like eth main at relatively speaking funding uh yeah um so oh yeah so in the wallet you can swap for uh gas tokens um yeah so so in the wallet you can't swap for gas tokens uh i'm waiting apparently waiting on information for meta mask all right i guess i'll uh keep on waiting for that oh there it is there's the signature finally um yeah so then you can swap for gas tokens here and that but you need um well you see you you need a token already from from polygon to swap for gas tokens um and i've never really had to swap for gas tokens because i just use matic um you know i you know i just loaded 100 bucks into polygon and that was all i've i've ever needed and all i'm going to ever need um for the rest of my life i've been doing workshops for a bit now um on the example dapps i've been building um then they haven't ran out already so it's it'll be perfectly fine um how does a random number from oracle's create nfc rarity well um your nft uh it's like uh it's it's something similar to like how avigachi's work um so your nf each of your nfcs can look different obviously but um they can also have like different combat stats if you want to implement some sort of like pokemon style combat into your nfc's game or whatever um you know uh yeah and uh and stuff like that um so so higher combat stat uh the better it will be um man that's so weird this is this is interesting um because this works oh you know what maybe i didn't switch the front end to polygon yeah maybe not oh i did that's so interesting hmm huh that's super weird all right um i guess i'll continue fixing that uh but this this repo is very much forkable and uh everything works uh like and if it doesn't obviously feel free to give me like file of the issue um on polygon academy but uh yeah i don't know for some reason this gallery is not showing up um and i've never never never had that before sorry guys um hey i'm gonna have to uh jump in shannon uh oh right yeah we got to go to the next the next um workshop stream but um that was awesome um shanann is experienced not only in polygon but in uh any global hackathons because he works with us too so anyway um remember these all of these workshops are are recorded and on the east global um youtube and shannon is in the discord and can be reached encourage you to just continue to reach out to him at his discord handle which he posted in the chat here 6960 um with that thank you very much shanann um see everyone in discord and have a good hackathon thanks for having me andrew thanks uh have a good time and even 
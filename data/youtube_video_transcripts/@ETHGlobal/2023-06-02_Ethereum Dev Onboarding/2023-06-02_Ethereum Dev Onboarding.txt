three years so all right I was looking back at the old videos it was more it was like a group of people we had like Rick moo and we had Trent like that would be a fun and maybe even talking about what's changed since then oh what looks like we're live all right we are live [Music] welcome yes um well I'll just wait uh just a couple minutes maybe like people coming in but um maybe uh you wanna oh yeah let's do it let's do a session um after this where yeah we can get a group of panelists and talk about how this has changed yeah that sounds good to me um cool so I will just maybe start right now because I see more people coming in um so welcome everyone to the ethereum developer onboarding session um I'm Linda and our instructor Mentor today is Austin Griffith who is just he's one of my favorite people in the entire ethereum ecosystem he's so passionate about uh about the space and it just helped onboard a lot of people into the ecosystem his uh passion is also very contagious so you'll be super excited after this call um and then he's also just built a lot of important Dev tooling as well so he's the perfect person to answer your questions uh the session's just going to cover kind of what are the latest tools and resources to be aware of how do you get started as a new developer building in the ecosystem and then we'll have q a at the end where you can just kind of ask any of your questions and we also got a bunch of pre-submitted questions as well that we'll cover um this is currently being live streamed by youth Global so thank you Kevin for helping us out with that um and then we'll have the recording of the video up on YouTube afterwards so you can reference it later share with anyone who couldn't make it I also want to just shout out to youth Global in general because if you're not aware of them they just hold the best hackathons in the ethereum ecosystem it's online and in person all over the world highly recommend attending one of them lots of really great companies have come out of Youth Global hackathons as well so they're really great um couple housekeeping rules so uh if you have any questions feel free to just paste in the chat and I'll be moderating and help get them answered um and then at the end when we have the Q a I will be promoting people to panelists if you just raise your hand where you can just kind of chat if you would rather um talk instead of typing in question um please know questions about price or speculation we're here to focus on building um so really appreciate if you could just keep that Focus so without further Ado going to kick it off to Austin to get us started what's up thank you Linda thank you eat Global thank you for having me uh yeah I think I don't really have like a particular like let's do this in this schedule I think it's more like let's let's intro let's talk about uh eat Dev let's talk about tooling let's talk about how to like get you the developer started tinkering and get you started in ethereum uh feel free to just like jump in too like if there's questions uh if you see something in the chat Linda hit me up or uh if anybody else has any questions just hit us up as we go uh yeah awesome I think I should just share my screen and get into it let's see right here right we were just talking about youth Global events so many awesome events make sure to get on and check this out uh I wish I was going to Waterloo coming up but I will miss Waterloo but I bet this will be an awesome one uh I saw like the original crypto kitties came out of like the first eat Global Waterloo which is I think 2017 East Waterloo 2017 and then I think they skipped 2018 and then I I was there in 2019 but oh man what a time what a time what a time that would have been back then back in the day okay so make sure you go to these events though and uh as a new Builder you're not trying to just like just like blow something out of the water yes like so many awesome companies did come from these hackathons but at first you're just trying to create something and build something and kind of you know Flex that muscle a little bit so when you you start picking out these hackathons and you start going to these hackathons uh try try not to be too focused on creating something completely unique that's going to blow away the world and think about something of how do how do I really like make sure I'm good at this and and kind of like practice and get good at shipping and trying things out and tinkering and that's kind of what we're going to talk about today is just like really how to on localhost get very confident with with eth Dev and that's that's what we're we're going to dive into here uh probably mostly I'm going to be using scaffoldeth and not even scaffold eth1 I think scaffold E2 will be where we will dive in and it's kind of fun to talk about you know since the last time we did this a year or two ago a lot of things have changed um one one big shift that's happened kind of underneath the tooling a little bit is wag me we see wagme being used a lot more relative to ether's JS or maybe right now you're using ether's JS and wag me but then there's VM that's coming out from wagme that kind of replaces some of this stuff and then wagney's pulling out ethers out of there so it really comes down to what you're working on I think wagme is going to be uh a front end hook Library so if you're thinking a lot about building apps you're probably going to use wag me a lot and it's w-a-g-m-i.sh uh just just to have this like these docs kind of in your in your pocket will be using these today also uh scaffold eat uses sort of wag me but then has its own set of hooks on top of that and and back in the day the original scaffold eat had a set of hooks that basically uh the like what wagme became was that set of hooks we we called it eth hooks back in the day so there was something similar to this but not as good and it's so awesome to have better and better developers coming in and making better and better tools so the next time we do this in 2024 uh we'll see all the cool crazy tools that have been created that make your life the developer easier when when you're starting to build an app so uh what I really want to do is talk about getting started a getting started point and and a way for you as a developer to get started and start tinkering and start testing your assumptions and start learning how to build and not just how but but what and why and and there's there's more to it right it's not just learning the syntax you're going to pick up the syntax really quick it's sort of like what can be built with this cool new thing and what kind of app do I what kind of app do I need to run in a trustless environment that censorship resistant there there's you know not that many things really need that so this special kind of network and this special kind of new new Tool is uh is still kind of finding its its place in the world so here we go let's just dive into scaffold eth2 uh what we're going to do is I have followed these instructions already ahead of time but if you want you can follow these at home also let me pay scaffold these two into the chat somewhere it's probably already did there we go oh you already got it thank you oh look at that look at that oh yeah and the eat Global and the wag me wow you're right don't worry I got links all right okay so uh it's it's a it's a repo that you clone down uh it uses yarn because it's going to have multiple packages it's going to have a smart contract editing package like hard hat or Foundry and then it's going to have some sort of front-end package and hooks like wag me and and react uh in this case we're using next.js uh rainbow kit wag me and typescript and it kind of this is this is kind of like a modern stack so uh what you what you do when you install it you do an install you do a urine chain and that brings up hard hat uh also if you're getting in are you a new Dev uh you've probably heard about Foundry also Foundry is a similar Suite to hard hat and Scaffolding 2 will also uh kind of Choose Your Own Adventure let you choose between the two but today we're just looking at hard hat uh they're they're both great I think if you're going to get really into smart contract development and testing you're probably eventually going going to be using Foundry so it works the same exact way here you you would uh just kind of do a yarn deploy and you deploy your contracts whether you're deploying them to hard hat or Foundry it'll be all the same here and then you yarn start and that brings up your your front end so you sort of have this front end that's serving up your smart contracts and you can Tinker with your smart contracts as you go so let's go ahead and just get in this Loop where we do this yarn deploy and I'm going to do a dash dash reset and that's going to give us just fresh contracts you don't need to do that at home just follow these instructions exactly the the same way and what you'll have is a a localhost app that comes up here and then you have your smart contract here and so there's the there's the next JS package and the hard hat package and if we get into our hard hat package we're going to find our contract okay and this is really the heart of of eth Dev is tinkering with this smart contract and tinkering with solidity and if you're a developer you're going to be able to dive in and figure this out uh very quickly but uh let's let's just like kind of add a few things here just to show this this loop I want to show so when you get in here and you go to debug contracts this page is going to show what you're editing it's going to show your smart contract so if we do like an address public and we make someone the boss and let's just grab this dude's address here oh that's actually ooh yeah okay that's an address that where this is the uh this address controls the edcon wallet that was deployed to edcon and the token that was there it's a burner wallet that I loaded into local storage and now that I have it here I'm just gonna have to use it on localhost but I recognize this account and I shouldn't be messing with it but here we are live and we're just going to so so we have this boss right this pink dude we're gonna make the the boss of our contract and we're going to go ahead and redeploy that so we're just tracking some arbitrary address but Watch What Happens over here the the front end Auto adapts to that it says oh you you've you know you started tracking this this new this new boss character and I can see it here and then and then maybe we want some a function that allows us to maybe update the boss right let's see AI should probably just take over there we go thank you so so there's a require statement and uh when you get into solidity you'll you'll discover this uh require statements are sort of like an assert it's checking that a certain condition is set and if so uh it continues and if not it reverts and everything rolls back everything's Atomic so if we did a couple swaps before this or something like that and then we get to this require it's going to undo those other actions everything either works or it fails so we have this require statement we're making sure that the person calling the contract the message dot sender is the boss and then we're letting them update the new boss so that means that someone else can't just come along and update the boss to someone else only the current boss can can update the boss and let's let's make sure that works let's go ahead and deploy okay so now we'll notice look at that we a new function showed up in our contract right so we have the boss here but now I can go hey let's make vitalik the boss and hit send oh no we don't have any money okay so one other thing we have to do is we have to go up here to the faucet and we have to grab some funds and that's just going to grab some local funds from the faucet now if we go here and we try to make vitalik the boss hooray okay and look at this it updates here too okay so let's go ahead and just go ahead and redeploy that whole thing uh and see that again okay so there's my account and then uh you can make a call to make anyone the boss basically just just by putting in an address and making some function that that allows you to update the boss um we went to the faucet let me let me show one other thing that's burner wallets as you start to Tinker around uh you you can of course connect your metamask up here it's using rainbow kit but on localhost sometimes you don't always want to connect your metamask you might want to just use a burner wallet and and that's what I'm using here and let me do this to help explain what a burner wallet is so I go to the same localhost address but you'll notice I've got this different address there's kind of like this green and yellow now let me close that and do that again just bring up localhost again there we go kind of a different character right so every time I'm doing this I'm actually getting a brand new account that I can use this is really handy for testing things for instance we have this sort of Boss character that we're keeping track of and only the boss can update the boss so let's try and test that and make sure it works the way we think it does right so we have this character over here this guy is kind of like the bad guy right and this guy's kind of like the boss so if we grab some funds from the faucet and as the bad guy we try to update the boss right let's try to set the boss to me this should fail it should tell us not the boss right we can't update this this address record because there's this specific rule in here that says you can only update this if you are the boss right and so we've kind of tested that you know this guy who's not the boss is not allowed to set it right but this guy over here uh could set it right we could even set this bad guy to the boss I don't know why but that's what we're going to do we're going to set we're going to make the bad guy to boss okay awesome now the bad guy's the boss right and now so this guy could make uh atg.ie the boss let's do it there we go in a really roundabout way we kind of made the bad guy the boss and then the bad guy made me the boss okay so we you can see here what we're doing here is we're using burner wallets to quickly make transactions we're tinkering with our contract we're writing small bits of solidity and then we're testing out how that solidity works and and there's a lot of stuff here that teaches you through different things here's how you make a string here's how you make a Boolean here's how you keep track of a number so it looks like there's some counter here let's go ahead and just deploy the stock contract and we can kind of Tinker with that some more then maybe we can get started tinkering or building something little and and kind of talk about what kinds of things you might build on ethereum I'm not seeing any questions yet looking good looking good okay so I redeployed this this is the stock contract I've gotten rid of all of our boss stuff I just wanted to show you that as you add stuff to your contract it's just going to show up over here and you can Tinker with things so how do you get started how do you really learn solidity and how do you get going the best way if you're if you're a technically minded person I think you're going to pick up the the syntax pretty quick the way I like to do it is go to solidity by example I don't know if we have that one in over here yet I'm going to beat Linda to it solidity by example has so many wonderful solidity examples that stay up to date and if we get way down in here I could make this a little bigger if we get way down in here there's there's all sorts of like defy stuff and hacks and uh you know very kind of edge case stuff you can really get into you can go down a lot of rabbit holes right here on this simple website but uh what I want you to do if you haven't really gotten in and learned solidity yet this is the the first place that you want to get in and this is just going to help you tinker and and what you do is you just kind of go let's let's go learn mappings first okay so let's say we're going to learn what a mapping is we we just grab this mapping and we kind of paste it into our contract shoot I'm just leaving the stock contract here I wanted to go through that but we're on a tangent we're looking at we're learning what a mapping is let's go for it okay so so you bring up scaffold eat you go to solidity by example and you pick out these topics uh this mapping topic is is the one that we picked out and we kind of just copy pasted it in and if I go ahead and deploy that what's that going to look like I need to stop saying reset that's that's kind of an extra added thing notice how if I hit deploy now without the reset it's just going to say oh we're going to reuse their contract that's that's what that reset does Okay so we've deployed this my map okay and all it is is a mapping from an address to a number and it's stored in this my map so uh let's see we could put in any address here you know what's the what's the value for atg okay it's zero What's the value for this guy it's it's going to be zero they're all zero right it's basically an empty mapping right now any given address will give you a number but since we haven't set any values yet basically they're all zero okay if if you're a programmer you probably know uh what you see here's a Constructor okay a Constructor is the kind of thing that's going to run when something gets created right so this is when the contract gets deployed this code will run let's get in here and let's just set the my map I don't even know uh let's set the my map for this dude since it's our character uh so and let's give him maybe like a hundred tokens right let's let's say these are tokens right maybe maybe instead of my map let's say balances okay and for any given address you have a number and then in the Constructor we're going to set the balances [Music] of this pink dude to a hundred okay let's go ahead and deploy that and we're testing our assumptions here we're just seeing that it does what we think it's going to do hopefully this deploys a new contract and it has this new balances uh mapping and if we paste in our address hopefully we have a hundred okay okay okay so it started sort of starting to work we're it's coming together we're learning what a mapping is uh what what is what is vitalix if we just go look at this again now that's a hard word to spell I don't know I don't know why I have such oh no that's like not even the right one oh that's smart someone has actually taken the wrong vitalik name uh let's see there we go there we go there we go that's him there we go and of course his mapping is still zero but my mapping uh is a hundred right so so I can't send this around I can't change this at all but now you can see how we're keeping track of a balance for someone uh and it's a hundred here what what would we need if we wanted to make it a decentralized currency the next thing we need is basically a function to transfer these balances around right move a balance from one address to another right well let's let's write it let's write a function transfer right what's it going to do it's probably going to have some recipient and some amount uh there's we're going to make sure that the message dot sender the person calling transfer has enough and we're going to subtract it from the balance and add it to the recipient's balance okay we technically didn't write any code there AI took care of it for us but now we have a token basically we have a mapping that keeps track of balances and we have a transfer function and it lets us move those balances around so now if I go here and I check my balance it should be a hundred but now there's a new write function down here there's a transfer function right all right now now we're getting into it here let's send vitalik uh 50 of these right boom okay so now if I check my balance it's 50 and if I check maybe like atg's balance it's going to be zero and if I check vitalik's balance it's 50. okay we have a decentralized currency this we're coming along uh very quickly we're learning how to build things on ethereum and all we need all we needed was uh this this example mapping from solidity by example and we kind of pasted it in and started tinkering around and now we have our own coin that I sent to vitalik I hope he's happy but don't worry this was on localhost so uh nothing nothing out public yet but we will get to it soon oh nice shout out for cookbook.dev cool okay I'm going to uh probably just trash this stuff let's let's get let's go look at this contract real quick just to see I meant to look at it earlier just to kind of show it off let's go ahead and redeploy with uh oh there's going to be something wrong there in the Constructor right we need to take that out okay cool let's go ahead and deploy that one more time make sure we get back to our normal contract there should just be just some of this stuff and usually you'll probably clear all this stuff out and uh attack kind of a brand new contract or pull most of this stuff out uh let's see there's we can receive some funds there's a withdrawal function okay there's a set greeting function I think this is the the meat of the the function here uh there's basically a greeting that we're keeping track of that some string and then there's some function that allows people to update this greeting and then I think there's some fun logic in here where if they pay some money we set their greeting to Premium okay let's go Tinker around that too so if I say hello world and I hit send our greeting updates and our counter updates but premium is still false okay so what if I say hello world and I pay a little money uh this is going to okay so this is going to take us down a little bit of a rabbit hole talking about eth versus way uh when when you're writing a contract and we had that hundred up here when we said uh you know it's on you at 256 equals a hundred that's actually a hundred way okay uh let's uh number this is some number right equals a hundred okay so this is a hundred way but if we wanted to express something in terms of a decimal let's say we wanted to say you know 100 point four five six or something like that right you can't do decimals in salinity there's no floating Point math and we want the evm to be a very simple machine so what happens here is we do this little trick we say uh we we think of things in ether so this is 100.456 ether which is actually equal to uh uh the number number two right this is equal to uh 100.456 times 10 to the power of 18 right that's what this ether is doing so I'm going to do this here I'm going to take a decimal and I'm going to multiply it times 10 to the 18 and you get this giant number but that's what um the evm is going to use so you're not going to use decimals you're going to use a decimal then multiply it by 10 to the 18. so a human a human wants to see it in decimal form but the machines the evm the simple evm wants to see it in a whole number so that's the the long-winded way to talk about how there's ether and there's way and this is in way and this is in ether and we can convert by multiple flying times 10 to the 18 and if I send in some decimal it's going to get mad at me it's going to say no you're doing it wrong so this is built for developers but once you developed your front end you're probably not going to have it set up where they have to hit this little button you will do this all for them but you the developer you need to do this because you need to remember what you're doing you need to remember that you're converting things to way here so there we go we'll convert that to away and when we set that to true we say hello world it shows up here let's maybe do Hello World 2 right and hit send oh but cool now we're premium because we paid a little bit of money along with it right so this was a this was a payable function which means it accepts some eth along with it and then down here we're looking if message.value is greater than zero we'll make it a premium greeting for some reason which is just kind of showing you how you the programmer you're really setting this up you're building the state you're building the functions you you can create whatever you want within a smart contract once you figure out how to write some solidity the next question is like what do you build and why and how right and I think that's when you want to start looking at speedrun ethereum so speedrun ethereum is a curriculum that will take you through oh man am I typing this right yeah it will take you through uh building the most important pieces and kind of building things that are going to teach you what people are building on ethereum and what's kind of popular and what is is actually useful in getting product Market fit even so just like we already talked about you want to use scaffold eth you want to copy and paste maybe I can make this a little bit bigger here there we go you want to use scaffoldeeth you want to copy and paste these solidity uh techniques so you'll go to solidity by example you bring down scaffold eat you'll do all of this tinkering that I'm showing here and then you're ready to start building okay and and build a few things yourself with scaffold Heath but then jump in here uh the first thing is just a simple nft example it it gets you uh exposed to an nft contract uh how nfts work I love this little Buffalo I have a little sticker here too I'm going to put it on the door of my office uh you'll you'll be able to learn how Collectibles work uh sending around burner wallets just a handful of Dev environment things you don't really write a whole lot of code in this one it's more just to get you used to the tools and kind of into General eat Dev and starting to build again you'll use hard hat for these uh we'll upgrade to Foundry eventually um kind of just a flavor kind of thing okay decentralized app this is this is the spot right here this is probably the most important challenge because it doesn't just teach you how to build this stuff but specifically something that ethereum is really good at and and they'll really lean into that the superpower is allowing you the developer to write the rules and you're writing the rules of a game that a bunch of adversarial actors can play where they don't have to trust each other they just have to trust the code that you've written and they can coordinate it allows them to coordinate together even though they don't trust each other because all they have to trust is your code and then you'll get down to a token vendor where you'll deploy an erc20 token you'll learn about the approve pattern you'll learn about how you can write a second contract that vends that sells your your token or even buys it back um the build Guild is something a kind of a side quest as you get through here the build Guild is more of a funding mechanism we're giving out small grants we're giving developer Ubi out we're identifying people as they come through the speed run and we're kind of you know helping them out making sure people get through but it's that's just kind of an extra thing okay now let's keep going dice game so uh as you're learning how to build things on ethereum uh eventually you may want to use randomness and getting a random number on chain is super tricky uh a public deterministic blockchain is very very hard to get a random number from that's not something that you can predict or or at least check on and and you'll learn that in this game basically there's a dice game and you can pay a little money and roll the dice and what you're going to do here in this challenge is you're going to build a second contract and the second contract looks in and figures out what the random number is going to be and it only pays to roll the dice if it's going to be a winning number so you can basically create your own attacker contract that attacks this dice game because it's using future block hash instead of some other better Randomness but also any better Randomness comes with its downsides there's some user experience issues if you're using for for instance chain links vrf really good source of Randomness but it's expensive and you have to wait for the value to come back you can to make a call to a Smart contract and it calls back later so this is really going to get you in the weeds with Randomness and really kind of expose to you why It's Tricky but also help you create you know games and other things that eventually can use good Randomness and then this is it this is the hyper structure I feel like this is uh whenever I explain ethereum to someone I feel like it really starts to click when I start talking about what a DEX is and how a DEX is basically this hyper structure you should definitely Google hyper structure uh Jacob from Zora has written this really good paper that talks about uh how to make a really good smart contract protocol and and some of these uh really important things uh you know it needs to be credibly neutral uh it needs to be free it needs to be unstoppable right and and we can get into like expansive fees and and some of these other things are are interesting and I think we're still kind of on the verge of even exploring and figuring this stuff out but a DEX is a hyper structure a well-built DEX basically allows people to swap between one token to another and from the other token and back uh but before this was created basically you had to go to an order book or you had to go to some Central service that would provide the swap for you once it's written into a smart contract and you just go talk to that smart contract it's there's no longer that centralized piece basically anywhere with an internet connection and a little bit of eth you can make that swap without having any kind of centralized Authority but there's more to it basically they built the smart contract anybody can get to it but they built it in a particular way that allows anybody to provide liquidity too so if we think of this like a vending machine at your school or whatever and it allows you to swap different candy bars right I can put in a Twix bar and I can get back uh Reese's Pieces now also if I am an you know an entrepreneurial type dude or whatever I could Supply some candy bars to this vending machine right so I could bring in a whole box of Twix bars and people can be swapping Twix to Reeses and what's going to happen is slowly I'm going to earn fees for providing that liquidity so these fees inside the decks this hyperstructure are expansive in a way that they reward the folks that provide the liquidity provide the expansion of the network by providing this liquidity I'm making swaps easier so I'm rewarded with this fee but I didn't write the smart contract I'm not in control of it actually no one's in control of it no one can shut it off I am sort of this disinterested third party that just provides liquidity and earns fees and there's other people that come in and swap between those things and then there's sort of this third person who sort of deployed the contract that doesn't control it and I think this sort of credibly neutral structure leads to some really really interesting systems and those are the kinds of things we're seeing deployed on ethereum right now and this Dex challenge is really going to get you into it and and really take you deep on how to build this how to calculate the price based on the reserves how to incentivize other folks to to provide these reserves so this this building of decks I think is a really eye-opening challenge then we get into things like State channels scalability signed messages uh even account abstraction right like as you start building a multi-sig instead of having an eoa an externally owned account uh in control of everything and your private key sort of signing all these messages what if you could have a smart contract wallet and that smart contract wallet could control all of your assets and then you can write the rules maybe a spending limit or maybe you need three different signatures or maybe it's a multi-sig for a family where there's two parents and four kids and the kids need to get at least one parent signature something along those lines right like you need three kids and one parent for this transaction to go through and it can never spend more than a thousand dollars a day right and and if everyone loses their keys maybe there's some some kind of social recovery here where Grandma can trigger a transaction that resets everything and gets everybody their keys back you'll you'll get into account abstraction and multi-cigs and all of that stuff uh here in the challenge then there's a nice fun one it's just building an SVG and ft this is totally a flex uh you really should not store heavy amounts of data on blockchain especially images but in this case we're going to draw images using a smart contract what you can do there are some really interesting stuff like the the width and the color of the thing is actually all on chain so you can like breed these nfts and the colors mix all on chain uh just just a fun game to play with but probably not like uh actually where things are going I don't think that we're going to be storing svgs on chain in any other way other than art and a flex I I don't know if that's the the best usage of of a blockchain but come here and learn it and check it out okay so uh to to recap so far basically uh scaffoldeth is a great place to get started uh tinkering use use scaffold eat and speed and solidity by example right use these two in combination solidity by example and scaffold eth to set up your local Dev environment to get confident on localhost to start tinkering with contracts and Building Things uh and then when you're ready you feel like okay I've got it I kind of got the language I solidity's not that hard I can figure this out uh then jump into the speed run and start running through each one of these challenges to really start kind of sharpening sharpening the the the skills then after you've gotten that far then it's time to start shipping and kind of like building interesting things again you're still not trying to make something like super unique and make a million dollars it's like everybody's first uh uh gut instinct mind to is to like okay I gotta build an app that's gotta make all this money and this is my goal and you try to build it and it doesn't work that way and you have there's so much that you have to learn that it just never works in that way maybe maybe it'll work that way for you but for me uh I had to quit trying to make something that makes money and start trying to make something that's interesting and that actually fits on ethereum you see a lot of hackathon projects that are like uh like Reddit on ethereum or you know a Blog on ethereum and that kind of doesn't work yet now we're seeing more scalability solutions and we're seeing that kind of become more applicable but really you kind of almost need to learn what you what kind of things you can build on ethereum before you start you know swinging for the fences and trying to make a company out of it and I think that like get get your your uh bearings learn how to write solidity go through the speed run and learn the kinds of things that people are starting to ship and then start getting in a habit of 10 tinkering and shipping Small Things yourself I have this thing I have this crazy mirror board that I call uh the the eat Dev Tech Tree and if I zoom way out let's see there's there's this this this is probably the the best picture to describe this thing that I've put together here is like Charlie all like crazy that's that's me putting this together kind of after you get through the speed run there's there's a lot of things that kind of happen uh before the speed run right you're learning arrays and gas Heath versus whey we just kind of talked about that uh payable functions you kind of learn the language and you learn how the language works if you're a coder you're going to figure that stuff out really quickly uh it's this next part that's sort of like this Tour of Duty of things that you need to build to really learn how to get get to be proficient and uh oh check out node Guardians too like once you get through the speed run node Guardians kind of is a fun uh gamified way to kind of go through another tech tree and uh their Tech Tree is a lot more pretty than mine but but this crazy thing uh I've kind of like laid out all these different kind of branches you can go down in terms of your your learning and and your building and then I've kind of uh even distilled this down into uh kind of this this tree here so do speed run ethereum get good at it and then I would say the next thing that you should do is build your own command line tool even though a lot of people have already built their own command line tool you need to build one for you build one that that you know goes out and looks at a specific token gets all the events figures out uh what your balance is but maybe finds the highest balance of that token or something like that uh write write a CLI that lets you uh dollar cost average uh from die to eth or something like that where every week or every day it buys a hundred dollars or ten dollars worth of dye and so over many months your script will kind of uh dollar cost average I don't know I don't really know anything about investing and stuff so I'm not maybe the best person to talk about that but it's you're building a tool and you're building a command line tool and this is going to get you exposed to kind of some of the lower level stuff so build your own command line tool just because it's going to prepare you for a lot of other things if you happen to build your own nft uh Mint or something like that eventually you're probably going to need to build your own indexer and if you've built your own CLI it's going to be really easy to build your own indexer so build your own command line tools even though everybody's already done it it's something for you to have as a tool and something to prepare you for a lot of the other challenges Austin is this mirror board public and if so yes yes let me yes oh man it really shouldn't be public but here it is it's so messy uh uh it's it's just like a lot of things that I think folks uh should build as they're getting to the point where they want to be in each Dev I I feel like you need to get all the way out here before you start writing your own thing and and trying to make something super unique just understand what what we've tried already and maybe even try things that have been tried and have failed right you'll notice I have a TCR here and a prediction market we've tried prediction markets multiple times and we've tried tcrs multiple times but there's something there and there's something interesting there and we just don't see enough of it so I want to see more people building these kinds of things and and innovating to maybe find something that actually could get some product Market fit uh you know token multi-sender learn how to verify messages a lot of these are the challenges that you've already done uh if you do kind of go down the CLI route uh it's getting you closer to running your own node usually I have my own node right here at home but I'm in my office so I don't have my node here but uh run your own uh node run uh you'll you'll run something like Geth or nethermine neither mind for your uh consensus layer and then you'll run something like prism or Lighthouse I can't remember the different execution layers but you'll run a pair of nodes together that basically are sort of eth1 and E2 together but we don't say it that way the execution layer and the consensus layer working together to to run your own node and you can actually query your own node for things like if you're writing the CLI and you're trying to find all the balances if you're asking inferior or Alchemy for the balance of each person it's going to be slow and it's going to be a network call if you're running your own node you have like this localhost box you can ask any of these questions to and it's going to be very very fast so as you start building your own indexer as you start building some of these cool command line tools it's really handy if you're running your own uh node at home and then on top of all of this if you start running a validator it's so cool being being a home staking validator is the thing that makes ethereum what it is it's like the the home validator is the thing that's really securing the network and I think that we need more and more of those and I I definitely uh uh celebrate those when when I find them then then it gets way farther out right we start getting into things like okay once you can get uh an oracle price feed uh then you can start lending and if you can start lending then you can start building leverage and all sorts of other things that we see in the D5 world uh if you have like a simple proposal system and you start whereas simple proposal system here it is if you have a simple proposal system this should probably be back farther oh I'm not even editing this should probably be back over here somewhere because I get into like moloch rage quit and other like multi-cigs and different Dows but just with a simple proposal system you can set it up so a group people can make decisions and and uh you know eventually check out compounds governor and and some of these other Dows and how they've implemented it uh Mev is really interesting if you get into once you have written a good Dex you can start learning uh what a sandwich attack is and you can sandwich attack that decks you'll notice that the Decks that we have for speedrun ethereum let's see if we can find it oh it's locked I can't go to the code right now but but technically all of these are open hold on challenges there we go there we go uh technically all of these challenges are like all open source and they're here I'm just going to paste them into the chat too so you have them but I wanted to look at the decks challenge specifically to look at the Smart contract um let's see because I want to show that it doesn't have oh darn it okay this is this is the you'll have to fill this in okay so the Decks that you learn how to build does not have slippage protection and you don't need to learn slippage protection yet but as soon as you put that Dex on a public network for real money people are going to start sandwich attacking all of your trades and so you need to kind of learn how sandwich attacks work learn how The mempool Works learn how front running works and then eventually like into Mev and you know nft flashbot rescues and some of that stuff these These are more advanced topics that you'll start to learn as you get farther farther out here and and ZK stuff right ZK is so hot right now learn do the circon starter kit do a circom with a start a smart contract build a game where there's a map and people are moving around on the map in zero knowledge so you can't actually see where the map is and who where people are there there's a lot of fun things there and and if you want to go the other route you want to get down into auditing there's so many good uh new like this this did not exist last year right auditing was still kind of very slow and I mean still it's still slow and expensive but it's getting better because of some of these folks that are launching uh initiatives like code Arena where people can go and they can uh partake they can help out they can help with an audit they can find even like gas efficiencies and they can get paid for it and someone else can also post uh a job and have you know their own smart contract get audited by a bunch of people so it's just a really good kind of community around learning and auditing and making audits more accessible I think immuneify is probably a starter spot there uh there's this really good like how do I let me send this to you how do I get started as a smart contract developer or as a smart contract auditor uh yeah a lot of links in here that you'll find and you can kind of dig around I have a lot of these links in other spots too if you kind of like go down a different Rabbit Hole you might find a different like there's the securium stuff lots of lots of fun stuff here oh shout out to uh evm from scratch also from Winter I think it's just evm from scratch.com uh let's see can I copy that link yes so lots of places to go after you start tinkering and getting into this I could do like a small deployment I don't know uh maybe we can even start tackling some questions and and leave that open yeah that's just one of the questions maybe that people have added um a really common one was around gas optimization Yep this is yeah so like we'd love to hear your thoughts on that so um I'm not great at gas optimization and there's there's weird things like um like in a for Loop uh let's see if we had uh I want to like just make a for Loop real quick that shows uh an inefficient way let's say we have this for Loop and we have some array and We're looping over the array uh I'll just say it out loud if you're looping over the array and in the for Loop you're checking the length of the array every time that's expensive and it's like not intuitive that what you need to do is create a memory variable that's the length of the array and you're checking that memory variable every time it's not intuitive that that's what you need to do but you just learn to do that by uh kind of seeing other people's solidity and tinkering with solidity and kind of just like learning how other people do it and paying attention on like crypto Twitter basically like half half of the little tweaks that I've learned about like gas optimization came from some random tweet from someone that I like checked out and then like went in here and started tinkering with we can we can see let's see if I go I want to see gas used real quick uh uh here we go if I say hello and I send this in we're going to see a transaction happen here so there's that's how much gas it used right use like 46 000 gas now what I can do is I can get in here and I can Tinker this and I can say okay what if we like don't update the counter so if we're not messing with the counter how what is our gas savings going to be and there's way better ways to do this but this is kind of like an obvious like trial and error type way now if I say hello uh it was actually more because it was already set but if I set it a second time yes it's going to be less there right it's almost 5 000 less and almost exactly five thousand lasts probably for not having to update this counter right so uh you you can Tinker with code and you can try to make your code um more efficient uh I don't have I'm not like a huge Optimizer so I don't have like a great answer on like where exactly I've learned all the little optimizations uh but start by making it work right like make it make the for loop loop through the thing correctly and do what you need to do and then you can find some of these optimizations later especially like if you um if you post up for an audit they're gonna go through a bunch of things for instance like if I have a variable here here here this variable being immutable notice how this immutable here on this owner so that means that that is going to get set once and it's never going to change again if if I take this immutable out it's going to cost more gas but if I'm only going to set this once I can make this immutable and it's going to get set like at it's going to get set right here and never change again and that's going to save a lot of gas and so if I didn't have this here and I'm not updating this owner as soon as I take this to an auditor he's going to be like yo or she's going to be like yo this immutable is not like you need to make this immutable so you can save a little gas so so there's making the contract do what you wanted to do and then they're shaving off a bunch of gas right and so I would say don't get hyper worried about shaving off gas yet what you need to do is learn how to build things and make things do what you want them to do but then understand that underneath the abstraction there's tons of little things you can do and you see people like drop all the way into assembly here just to save a hundred gas but if it's something that you know thousands and thousands and thousands of people are going to be using and they're going to be spending hundreds of dollars a day on gas those little little changes are are huge but for you you're probably not going to be writing the next open seat I hope you are that would be awesome if you were writing the the next big platform but right now you're just getting started and you're trying things out so don't get too hyper focused on gas I think that like also crypto Twitter has a little bit of a kink for gas uh optimization so like if if you're in the crypto Twitter bubble you're you almost get gas shamed a little bit don't don't worry about gas shaming right now just make the thing do what you need to do and understand that there is this whole world of optimizers they're trying to make things like so so so super efficient and it makes sense that like once you have this platform that thousands of people are going to use but right now you're just prototyping you're building a quick app make the app do what it needs to do uh with the caveat though and I think we talked about this earlier we're not building an app that stores an entire blog post on chain right that that like you just don't want to store all that stuff on chain so when you are thinking about this maybe not tiny little gas optimizations but think about the overall kind of landscape of your app and think about where things are stored if if you need someone's like name and address for some reason that should probably be first of all encrypted but second of all in ipfs and something that you load from ipfs and and something that's not stored directly in a contract the only things that you need to be stored directly in the contract are things that you need to look at to make like logic decisions like is this person like the only reason you would have the person's name on chain is if you wanted to like only drop tokens to someone who has the name Austin or something like that right you never really want to have a name String stored on chain you probably want to have that stored somewhere else and load it from somewhere else and and that's probably the more like gas optimization you should be thinking about right now only store what you need on chain but don't like hyper optimize yet at first just get good at building and then know that there are going to be these like hyper optimizations and little things you can do to your contract to make them more optimized but don't like go too deep on it yet you'll learn those things as you as you start to get into it and I think the the key is like just paying attention on crypto Twitter and watching what are what other optimizers are doing and what they're up to I I don't know how does that am I am I not giving enough credit to the optimizers I think we should give lots of Optimizer credit I think it's great but if you're getting started I don't think that should be like something you should be focused on right now don't let it stop you from building something right it's like I don't don't be afraid that if I if I build this thing and it's inefficient I'm gonna get dunked on so hard on Twitter that it's not worth it like that sucks but don't do that like don't worry about it build the thing and get out there and try it try to get users security is another thing right like yes security is super important right this is like an always on like as soon as you deploy your contract it's basically there forever for anyone to attack for the rest of time so you want to be pretty uh pretty sure that it's secure right so building a secure app is is really hard it's it's sort of like when we did that we built that thing and we said only the boss could do it right and we tested that like okay an account that's not the boss comes in here and it doesn't work and an account that is the boss comes in here and it does work and that's a good initial test but you probably want like a whole test suite and you want to check all those things uh before going to production but again this is another thing like optimizing first make your contract do what it needs to do like build the thing you you obviously want to have Security in mind as you're building this but build the thing to do the thing you need and then make all these tests and make sure it's secure and and of course like don't go to mainnet with something that you don't think is secure but also like we still need to be prototyping building and trying things don't don't be afraid to to try something I think that's that the key here is like make sure it's not like completely stopping you from building something like you yes you want to build something that's secure yes you want to build something that's gas optimized but don't let security and optimization get in the way of trying something maybe on a test net right there there are certain things where you don't want to try things if it's a contract with a million dollars on it on mainnet you need to be very very sure that that's correct right but if you're playing around with a new nft and it's a low limit nft and they cost 20 bucks a piece and you're only going to sell eight of them I say YOLO it and try it out not Financial advice but you should let's see what else do we have Beth's best faucets I think that I think Paradigm came out with a recent yeah really good faucet right where is that let's see the Paradigm faucet yeah the multi-paradigm multi-facet that's where I would start uh also if you just go to ethereum.org uh and ask for faucets I'll bet you there are a lot there let's see uh maybe I should do test Nets oh man oh yeah there we go and I bet there's some faucets here yep there's some faucets there yep so I would say Paradigm uh ethereum.org and then kind of like the third step is like ask a friend kind of thing yeah I have girly East if anyone wants to Garland sepolia loaded up and oh that's a that's an interesting talk um as you're deploying these things sometimes you'll need to deploy to a network because it already has like we talked about vrf earlier let's say You're Building A vrf an app that uses Randomness and you're using chain links vrf there's only certain test Nets where they have their testing infrastructure deployed so you may end up having to deploy to one test Net versus another uh we're trying to move people towards sepolia so if you can go to sepolia because Gorly is more like a validator network people people need the 32e to run an example validator so that that eth is hard to get whereas on sepolia it works different there's the eth is more readily available but it kind of sometimes depends on other infrastructure that you need in place this is an interesting one I don't know I don't know the answer to this like uh will will gas fees be ever become reasonable on on ethereum maintenance first of all that's a little bit subjective but I think that as we see other l2s I think even Metallica said like he tries to say like gas is not going to get any better even though it probably will he he says that like so we understand it like maybe ethereum is more like a settlement layer and these other layers higher up are going to have cheaper faster transactions uh uh so so I don't know if ethereum uh will be reasonable in terms of gas but I do know that it's a lot cheaper to deploy on uh optimism or arbitrum and you get all of the same security so maybe maybe this question is kind of like kind of not the right question and maybe it's more like which network should I be deploying to and that's a much cooler question because then you start thinking about well how much do I want my users to have to pay uh what how long do I want the block times to be what what kind of security concerns do I have then you're starting maybe asking the right network of you know do I need to deploy to mainnet ethereum or can I put this on polygon so those are those are answers that that's maybe a better question I don't I don't know I I'm a small brain Builder I don't know where the the world of ethereum will go in the next few years and what you know what gas fees will look like uh we had a couple questions in the chat um so how do you prioritize learning new tools yeah okay so I so I'm always focused on like I'm building I I want to make sure I'm shipping things I want to make sure that I'm like tinkering and shipping and Building Things so so I try to go explore things but then I come back to whatever works and every once in a while I explore something new like wag me and it changes the way I work or I explore something like how does GPT work and it changes how I work so I would say that like uh I would say like maybe like 80 20 right 80 of the time I'm using the tool that I know works and I'm focusing on getting the job done and getting you know shipping the thing and getting it out the door but then there's always like time to go try you know and there's not always time but I always try to make time to explore new tools explore new paradigms if you're if you if you're familiar with JavaScript you know that like a new library a new kind of thing comes out for JavaScript every day and there's so many different tools that it's impossible to keep up with so you can kind of extrapolate that I bet we'll see that with ethereum too or we already maybe see that with ethereum where there's already some many different tools that it's more like think about getting the thing shipped and work backwards from that a recent thing is is wag me though like we we were using uh ethers and I would say that the the documentation for me was really hard with ethers it was always hard to do something I would say like okay I need to go read from a contract I need to go read all the events from a contract I feel like I would spend 15 minutes trying to figure out how to do that in the ether's docks and if someone can come up with a better product where I can just grab a hook and say I want these events and base it in and I have the events then you know that that is definitely an innovation for me and I'm looking for a tool that'll do that so as I as I even have like hard things that happen within my good shipping stack I'm on I'm on the prowl for something that can replace that and make that process easier so shipping is is easier for me I don't know if that really answers the question but the the follow-up question for that was are you updating old projects based on ecosystem updates yeah for sure and okay so I think also there are certain tool Builders who build a tool that works and then they just like keep working on that same tool and they make it so complex and so thick and so much to it if you build a good tool that works well you should probably just have that tool ready to go and you should start focusing on maybe like the next iteration of the tool and I think I do that a lot where scaffoldeth worked really well but it started to slowly get old and scaffold E2 came out and it has like a more modern stack so so I'm definitely like trying to refresh old things like Speed Run ethereum uh uses old scaffold eth but we'll be carving that out and it'll use new scaffolding so when you come back through to takes the the Dex Challenge in a month you're probably going to see that it's using rainbow kit and some of the more up-to-date tools but if you dive in right now you're going to learn all the things you need to learn but it's using you know a six month old stack so you do need to kind of keep things up to date because things are moving so fast yes I wish I see it there I wish each bill let's go look at it real quick Heath builds a fun one I wish uh this is a love project of mine I loved building eth build uh but I have not updated it and it just is not something that I've applied a lot of oh that was probably a private key even I haven't really applied a bunch oh it's okay it's a small private key not anything important don't worry uh nope it's just a mint if you if you do that it takes you to a minute okay uh I have not updated this it was a love project I really enjoyed building it uh this is a great way to kind of visualize so in this case we're generating a private key and from that is a public address and you can kind of see like this is all it takes to create an account on ethereum and this is a really fun way to visualize how to maybe sign and recover some message right you can plug that private key in you could plug some message in and then that'll go across the network with a signature and then that will get verified on the other side if I say hello world let's see let's just do it oh man there there's my message there's my signature if I plug those in uh it goes across the network and I plug them in here it's going to recover to the address that signed it right and if anything changes there let's see uh sorry this is definitely a side quest with this here and it's the same but if anything changes that if I change that F to an E you'll notice the address is different now right but if I go back to the F then it it proves that sure enough this address signed this message and here's the signature and we can use cryptography to prove that so long-winded way of saying uh no I'm not updating each build but eth build is around for you to Tinker and maybe one day I'll get back in here and and give this a refresh but um I only have so much time and I'm focused mainly on dev onboarding education and building and I think that scaffolding 2 does that the best but there are some some of these other tools that I haven't uh really okay the ooh this is a long question holy moly does scaffold ether any other framework automate setting up a light client I don't think so yeah I don't think so I think running running a client like there are things like dap node yeah node that make running a client easier uh but uh I don't know of any thing that makes running a light client easier sorry that's probably not there's probably more to that that's a long question too we had another one what's the difference or limitations of testing on sepolio oh sure yeah so so you'll um I mean first of all when it's a test Network and there's not real money at stake you kind of don't get the real effect of a real Network um you could put a hundred dollars of sepolia in some private key and then you could share that private key on GitHub and your money is probably going to stay in there whereas if you had a hundred dollars on mainnet and you shared that private key it would disappear immediately so there's certain adversarial aspects that you don't have on a test network but also we we kind of alluded to this earlier is also the infrastructure around you uh when you deploy to mainnet you have you know uh all these different composable elements like dexes and vrf and uh uh automation like gelato you have all of these things running on a test net you may not have some of those things uh just diving into that vrf example again well let's just find out let's find out uh chain link think vrf what test net right what test net does chain link have vrf support for ah there you go sepolia it looks like sepolia and Gourley which is great that's awesome of them to do that and not have it on a single test Network because you can imagine that if it was just on Gourley and all these people are trying to build validators on Gourley and Gorly like testnet garley actually has Financial value uh it might be hard to get and so uh that could make your development harder so I think uh the limitations of sepolia or one of these newer test networks is that some of this other infrastructure isn't deployed yet and it's hard for you to test something in the wild until you actually go uh and and deploy it in the wild but also check this out there's this thing called mainnet forking uh art hat mainnet fork this is so cool you can basically how I've spun up this network here where it's a local host network instead I could say yarn fork and it's basically going to take mainnet and it's going to have me it's going to give me a local mainnet uh a network so so I could do things like let's grab a DEX that's already deployed to mainnet Let's fork mainnet and then let's give me uh the address that has all the liquidity and play around with it or something like that you can impersonate accounts you can steal money from other accounts all on your localhost so you can set things up but it's using mainnet uh as the structure so you can Fork main net and try things and that gives you a little bit more of that composability that you would get from from a public network or a bigger Network let's see any of these other ones and Austin we just have a few minutes left so if there's anything you feel like yeah yeah I think I think my main takeaway is uh you can go to speedrun ethereum and find all of this stuff uh if you go to the old scaffold eat scaffoldeeth2 is right down here I think my main takeaway is go go get started and start tinkering like kind of really work through this phase if you haven't yet where you're grabbing stuff from solidity by example and pasting it into scaffold Ethan tinkering learn the language start building things that are are bigger than just the Speed Run start showing them off on Twitter um and just keep learning and keep building and I think just get in a habit of shipping things and everything else will will fall into place cool thank you that's super helpful um and then we also had um yeah that was that was awesome and then you know a reminder this is recorded so you can reference it later um hit us up if you have any additional questions also um Sammy from um Atlas he offered to do office hours if you just want to reach out to him over Twitter so that was really nice of him um one thing that I just love about the ethereum community is people are just so open to helping each other out and connecting so um that's just never feel worried about asking people questions um anything else I thought I would just like real quick show that you can deploy uh this to a test net since we were talking about sepolia and gorley I figured I would maybe try to deploy this to sepolio so I'm going to use a punk wallet this is at Punk wallet.io it's built with scaffold Heath but it's basically just a wallet that you can have uh in your phone and I'm gonna send some sepolia to a deployer address so I did a yarn generate right here generate basically creates a local mnemonic for you you'll see some developers copy and pasting private Keys around in environment files you really don't want to ever touch that environment file or even show it off so this yarn generate kind of creates that that EnV file in the background and then I went and funded it with some sepolia so now I can do a yarn deploy but now we're going to add one extra thing where's the NAT dash dash Network sepolia okay so now instead of deploying our app to our local blockchain we're now deploying it out to a public network and then what we'll do once this goes I think we have like 15 second block times there it deployed if we go look at our app it's still uh on uh hard hat because we need to go edit one other thing and it's this scaffold eat config well man I'm way zoomed in let me zoom out a little bit okay we're going to the scaffold eat config file right here and this is where we update the chain for our front end and I'm going to change it to supolia simple wait wait can I just do like tab completion um nope wait yes chains Dot oh man the best part about typescript is it should just fold it fill that in yeah it did okay sepolia and then if I hit save the whole app that I've deployed now is on sepolia instead of localhost and now I'm going to connect in my meta mask right as soon as you go to a public network you can start connecting in your meta mask so now our app is live on sepolia and I can set the greeting hello world and I can actually send this uh on sepolio with a metamask uh thing there we go and the last thing I would do is I would do a yarn verse cell and I would put this out on versel it would take my next JS app and it would deploy it to versl and I could give you an a URL that you could go to so yarn generate and yarn deploy out to sepolia change that one file so our app points at sepolia and then do a yarn versus Cell and push your front end out to versel so then you can give someone a URL and you basically deployed your app there's obviously you probably don't want this UI for your end user you'll end up building some kind of pretty UI where they can do the same thing where they say hello world and they make a transaction but it just looks a lot prettier and and you can do that uh with your scaffold eat as you go but from the start you can just use this for now and and Tinker around but what I was showing where I was tinkering you're really just minutes away from going to a public network if you want to at any time you create that deploy account and you yarn deploy it to whatever Network you want and then you yarn for cell and that pushes out your front end and you'll you'll have a URL that you can share with with your friends so as you're getting started with with scaffoldeth with speedrun ethereum uh even though you're getting in this local local host loop it's really easy to deploy an app live and gives them a URL where they can go interact with your smart contracts so go check it out try it out speedrun ethereum go be an eat Dev yes hopefully this gets people excited to get started um thank you so much Austin you're the best thank you for having me in a year I'm sure a lot will have changed by then um cool well I think that's it for now thank you everyone for your questions and for attending okay bye bye thank you 
we've got sachin and terun who are going to give their presentation and we've got time for questions and answers at the end there you go okay cool thank you thank you heather for the intro uh i'm just gonna share my screen quickly and then you can see the screen hello yeah all good okay cool cool so thank you guys for joining in uh let me start off with my quick intro i am sachin thomar i am the cto and the co-founder of bike on me and with me i have tarun gupta who is a platform lead engineer at biconne so we are going to be you know presenting the session today so in today's session we'll cover you know a bit about bi economy what we are doing what problem we are solving and you know uh how how we are solving that problem and then we'll you know uh discuss about different use cases you know uh which what what pycony enables uh for the for for the tabs uh in in the web 3 space and then we'll also show you a live demo uh we'll you know integrate bike on me in a sample uh erc20 token transfer application and we'll show you how you know the by economy solution can be used in an application uh and then at the end taran will discuss some more use cases of pycon me and then we'll talk about some bounties we have uh and then we'll you know we would be open for the for any question and answers so uh let me start off with uh and to do bike on me what bike on me is so as you can see like we our vision statement is we are here to simplify the web 3 experiences so and and we are doing it uh with the blockchain transactions uh for the starting so what we have built is we have built a scalable relayer infrastructure uh that uh any dap can plug and play in their application uh in just you know very easy three simple steps and what it enables it it just improves the user experience on that application it just take the user experience to the next level and we'll see you know we'll talk about what friction points are there when a user use a application built on blockchain technology today and then we'll you know show uh showcase how we are solving those problems so you know one question that will come in anyone's mind is why should i use bicarbonate like what it does so let me start with discussing the problem statement here so let's say you know you are you know you are creating an application on web3 using blockchain so right now building a web 3 application is itself you know uh not not an easy you know way to build an application but even you know after building the application when you ship it to the market you know when it comes to use that application and the end user uses it still there is a lot of friction points today and you know what these developers do is of course you can't just ship a dab that is you know not easily usable by the by its end users so of course the developers would want to you know solve this user experience problem so what they do is they try to solve it in house and uh of course it will take some you know uh some time some development time so we have you know uh surveyed uh many applications uh in this space and we you know uh came to a conclusion that it would take up to three months of development time to build a solution uh you know that will solve these user experience problems and in terms of cost you know it could take around 40 000 uh dollars in uh in the development and of course the maintenance will be required and you know uk you could end up spending around four thousand dollar in monthly cost for the maintenance of this uh you know solution that solve the user experience and and also you know when you do that there are high risk involved because we have to you know uh consider the security point of view the scalability point of view and you know usually these are not the code competencies of the uh you know developers who are building the applications so uh if if we go you know uh down the stack of uh the stack of you know uh the software stack of these technologies when you build the application some of them are you know partially solved you know you have solutions for node provider server provider you have these wallets out there but when you see these unsolved components the transaction management the relay infrastructure and the gas optimization these are the areas that has that no one has actually you know covered properly and no one has put out a solution in a proper way that is easily usable by applications of course like most people have tried to solve these problem in their own way but you know there hasn't been any solution that is a complete solution that that can be easily used by other other dab developers so you know this is what we are doing uh we are providing this this solution in the form of an sdk and an api that is easily used by these tab developers and that is fast safe and cost effective we will you know explain what this fast safe and cost effective mean while i show you the demo uh and what are the advantages of using bike on me as uh previously mentioned like it would take a lot of time to develop that solution but we have already developed the solution so you just need to integrate that in less than two hours you can you know enable that solution in your application there is no maintenance needed because we are doing uh all the maintenance on our side you just you know focus on your core business and you know there are lower risk involved because we uh you know we take care about the security and scalability and you know there would be no oh moments you know if you are going live with the dap and there are you know those moments where you see okay i did not see this i did not think about the security or or you know you end up having a lot of traffic on your application but you would you are not able to manage that so those sort of things will be removed if used by economy and uh as i mentioned like previously we have surveyed those companies who previously were trying to you know build similar solution but only for themselves for example argent has a relayer infrastructure but that is only you know applicable to the argent application but what we are doing is we are building a generalized solution that is used by any blockchain application uh that you can think of uh be it in in the gaming space be it uh be it a word a wallet be it in the beta decks or any social you know network platform uh so our solution is pretty much generalized uh next you know why devs love spike on me uh and i have not written it uh on myself devs do love bike on me because we have been you know hearing feedback from these developers that like on me is really simple uh to use and you know this you we are doing uh what is actually needed in the space and that too providing the solution is in a very simple form uh so let's see what this simple simple solution means so you know when we were building this solution like like i am a developer myself uh i when i use a third party solution i don't want to spend more than a day in integrating this that solution so you know while building the solution we always kept in mind that this has to be very easy to integrate for the developers and it has to you know uh of course function properly uh and it has to properly solve this solve the problem which we are solved so we end up you know uh we ended up building this infrastructure and and these sdks and apis which are uh you know which using which you can access those infrastructure and you can see like here uh three lines of code are there uh and i'll show you these three lines of code only when i show you a demo that only these three lines of code can actually you know change the user experience on in your application and apart from uh you know uh let's see what features we provide uh gas less transaction is something which you provide so uh if a user uses an application that has integrated bike on me he does not have to pay for the gas fees you know that that sort of user experience we enable uh once you know uh we process your dash transaction we make sure that we optimize that transaction in terms of gas as much as possible so you don't have to overpay for the gas for your transactions we have a you know a dashboard for the developers uh where they can easily manage their application our solution is blockchain agnostic so we uh you know we kept in mind right from the day one that whatever we are building the the whole solution should be blockchain agnostic because uh you know we have we are seeing this multiple blockchains out there each one solving a different problem in a different way but we are agnostic to it for example we are live on helium main net we are live on matic network that is layered to blockchain we are live on xdi uh blockchain that's another layer to solution and we are looking you know to integrate uh our solution into more blockchains so that gives us like like more exposure there and we will talk about the layer to interoperability we have been hearing a lot of you know stuff about layer two recently so our solution is actually uh interoperable between layer one and layer two and you know tharon will uh discuss more about that uh later so you know this was uh about the developer experience let's talk about the end user experience let's say our developer has integrated by me what what will the end user get you know when they use the transaction so they gets to experience no stock transactions once once you do the transaction we take care we take the responsibility of getting that transaction included in the next block so you don't have to worry about it you get free transactions the gas is subsidized by either a third party or by the developer itself and recently we uh you know we are enabling another use case uh in which the dab developer don't have to pay on behalf of their user but the user itself can pay the gas fees but not in the native currency of that blockchain for example on ethereum you don't have to have ether uh to pay for the gas phase you can just you know pay in uh the erc20 token itself in you know which you are dealing with in that particular transaction so those sort of use cases also we are enabling as i mentioned gas optimized uh you know we make sure we optimize for gas as much as possible by applying various techniques and and the last thing is like you don't the end user don't need to you know uh think about accruing the ether for paying the transaction they don't need to think about uh you know where they can get to get this gas and you know they don't have to make financial decisions in each transaction like how much gas price should i put uh so that my transaction will be included so all those sort of you know friction points are removed if uh if a dap you know integrates pipe on me solution so the user onboarding becomes really easy you you know user gets to have a web to experience like field in in your web 3 application so those are the you know benefits for the end user and who is using pike on me today uh uh we have you know we started our beta in around 4th of may and then since then a lot of applications have come on boarded and uh for example curve is you know one of the big applications in the device space the curve is using bicarbonate to enable the gas less deposits of btc in you know two of the two of the btc pools on curve matic is actually a layer to blockchain matic is using bike only solution to enable that seamless experience on that layer 2 blockchain uh bad bit is you know a casino game on layer 2 that is using bike only and idle finance is the one sapien is there so you know almost uh around like more than 10 applications are using bike on me right now some of them are already on main net some are you know on their way to the main net and we are seeing like uh uh very exponential growth in the dap on boarding by economy so for let's take an example of uh curve finance so when curve finance you know integrated biconnect in two of the pools which you can see is when btc and sptc they were able to you know do uh more than 10 million in deposits and swap in those two pools in just uh in just a single month you know uh that's what you can achieve you know if you improve the user experience of these applications today and bike on me makes it really easy to enable these experiences and recently also you know uh integrated by economy in its governance voting uh and you know so you you should be able to uh do the voting without you know worrying about the gas in your wallet and for example when idle finance integrated bike on me it saw you know 40 percent increase in the number of users uh and you know 1.2 millions in in deposits uh on the on the idle platform uh in just two months and uh you know they have been hearing this uh feedback from the end user that the the experience is really seamless now they you you know as i mentioned earlier you get to have more users you you get to retain those users because as compared to other applications the experience is you know really superlative uh in the applications uh so yeah i mean that was a lot of chit chat let uh straight to the demo part where you know i can show you a simple application which i have built for this hackathon this sorry this workshop so here you can see this is just a erc20 token transfer and and mint application i've just named the token as by convey token here uh we don't have a token right now like this uh so you can see this is a test token i can show you the code just a second so this is the token code just a normal erc20 token i have taken the code from open zeplane just a regular transfer functionality main functionality and if you see the transfer function you know just a basic transfer so one thing you know to note here usually you have this message dot sender uh here in the transfer method uh but you know this is how opens airplane has written it this they have you know called a method but eventually uh the method is actually returning the message.sender only uh and you know let's let's try to do a transaction and let me show you uh in my metamask this is the user it does not have any ether and you know if i try to let's say this already has 300 bitcoin b tokens if i try to mint 10 more tokens uh of course like as usual it will ask for uh the gas payment uh from my wallet and of course i don't have gas so i have to you know reject this i just cannot mint the tokens unless i have the ethereum so that's the problem that's that those are the friction points uh you know you have in today's application and even even if i had ether in my wallet i would still need to worry about the gas prices like what gas price should i put so that my transaction quickly go through uh you know and that usually is result in uh high gas prices on the network also you know when people keep on selecting high gas prices so these are the these are the problem uh now let's come to the solution so talking about the solution uh it's it's a it's a two two step process so uh as as i mentioned you know you have this message dot sender dependency in your smart contract so let's uh you know uh understand first how how the meta transaction works so there is a application and here is the blockchain you initiate a transaction it directly you know calls a method on your smart contract and you pay the gas fees transaction is done but in case of meta transaction you know there is a third party every layer in between so you don't directly send the transaction to the blockchain you you send the transaction uh to a third party layer and that relay actually signs the transaction and sent to the blockchain so eventually when it lands on the smart contract the message dot sender would be the relayers address not the user address you know so that's why we need to get rid of this dot center dependency in your smart contract and for like uh removing that dependency is what we call enabling native meta transaction in your smart contract there could be multiple ways to do that but we have you know created a standard for that if you want to use that you know you can just quickly you would be quickly be able to enable those native meta transaction feature let me quickly show you this uh smart contract which we have so this is a meta transaction standard repository you can just go there go to source contracts this is the method which the main important method is execute meta transaction that has the capability to call any method in your smart contract and this method take care of the signature verification from the user and the replay protection you know strategy so so when i mean uh this is the main method and another method which we need to consider is this underscore message center so as we saw like in the token transfer we have used this method but instead of just returning message.sender we have implemented this logic which will take care to retain the ownership of the user when a user do a transaction via a relayer okay so you know when it comes to enable that all you need to do is inherit this basic better transaction smart contract so this basic meta transaction just take the signature uh just you know operate on personal sign signature and for eip712 type signature we have you know another uh smart contract that you can just inherit and replace all the message dot sender occurrences with this method which this which we have already done so this is all you have to do on the smart contract side let's come on the client side so on the client side uh you know i have this is a basic react application i have these you know on token transfer on to convent on for example while minting the token i'm just you know calling this mint method directly but when you enable native meta transaction uh you know using this way you know by inheriting those basic meta transaction here you need to call that execute meta transaction method and pass the mint method information in this function signature so that this method will first verify the user signature it will you know uh increment the unknowns for replay protection and then using the function signature it will actually call the actual function and then your you know transaction would be executed so to make it really easy for you to do client-side changes what we have done is we have created this gist for you you just you need to follow the instruction here uh you know you just add these dependencies in your code let me add these you initialize web3 i have already initialized my web3 here you know i'm just i'm just using the provider by the metamask window.ethereum and we have some helper methods you just copy paste these method and these method works for any application so you know just copy paste them i didn't copy perfect so one last step you know where so for example whenever you are calling this transfer method or maint method or any method directly all you need to do is you need to just call this execute meta transaction method now let me copy this and on to conventing here i am you know calling this mint method i just pasted this and let me verify all the variables are in proper uh order or not user address uh is in my selected address variable this function signature i need to get it from here so i just rename this variable to function signature and instead of calling the mint method what i do is i just encode this method into the function signature and pass it on to this method i have the contact object my contract address is in this variable so i change it to this and this is the chain id so this demo is on cover network so i've used 42 here and that's it like you have just enabled native meta transaction in your application let me copy this on the token transfer functionality also quickly just you know rename this equal to function signature and instead of calling the actual transfer method what i do is i do the encode api let's see how you know it has affected our ui so let me try to you know do the mint operation again i try to mean 10 tokens so here you can see instead of you know asking for the gas it is initially asking for the signature and then after the signature is done now it is asking for the actual transaction so you must be wondering what what what different you know we have done here because i still am not able to do the transaction and that's because we have not integrated integrated by conveyor what we have done is just enable the native meta transaction functionality in your application so you know but the best part is you see this transaction now this transaction can be submitted by anyone it doesn't have to be the user itself that's the thing we have enabled right now here and you know of course i don't have any ether so i have to reject this uh application now let's do the you know magic part where we integrate by economy and we we would be just you know able to mint those tokens without having gas in our wallet so for doing that let me head to the bike on me documentation you can refer here at docs.com.io in the getting started section um if you see there are two steps to integrate biconny first is you know you have to go to the dashboard you have to register an account and you know upload those smart contracts uh and uh uh selecting those methods on the smart contract which darwin will talk about you know uh he'll just give you a dashboard walkthrough after this so but i'll just i'll just log in with my account here i can see these tabs so i've already created this application i'll just go to this tab and if you see in the documentation it says and copy the api key generated for your dab so you know don't worry about how this is generated uh for now we'll just you know keep this next step is to integrate by economy sdk which we call maxer in the client side code so all you need to do is install by economy let me do that different shell so while it is integra while it is installing let me perform other steps so these are the three lines of code which i was talking about uh you know you just import bike on me in your application let me do that you initialize the bike from the object and i'll do that in my you know init function here where i'm initializing my application and just after i have initialized my provider objects and i have already defined the by economy object on top so i'll just remove this keyboard here bike on me constructor just need a web3 provider object so it could be any provider provided by a wallet if it's meta mask you know i have used metamask so i am just using windows ethereum i am just going to pass this provider object here and it needs a api key and this api key which i just showed you on the dashboard we for now we're just going to copy this and you know paste it here one you know last initialization yeah one step is now we have to initialize web3 object with by me object instead of the web3 provider which you were using before so i'll just you know use spike on me here i'll just save and uh this is the the like the last step the initialization step no business logic here you know once the bi economy object initializes it will emit uh you know this by calling me dot ready event and whatever initialization you want to do in your application just do it in that section so here you know i'm initializing my contract i'm getting the token symbol the token balance all these things i can move here in this section and that's it i mean that's all it says on the documentation nothing else let let let this install and now i mean i am hoping like we should be able to make those tokens uh without paying any gas fees my laptop is slow okay perfect this has been installed application is uh uh uh okay showing someone let me let me solve this application i'll just restart it this is some library error let's see starting the server okay let me let me install this okay i know i have use these dependencies but i did not install it let me do that is events should take a while so i mean while this is being installed let me recap you know what i have done so far i had this token uh you know i enabled the native meta transaction capability in this smart contract by inheriting this basic meta transaction and by you know replacing the message.gender by this underscore message center method which is available inside this contract uh and after that what i did is i go on i went on my client side i you know go to this list i followed these steps import these dependencies add those helper methods and instead of calling the actual method for example mint or transfer what i did is i called this execute meta transaction method uh onto convent here yeah and then just i just pass the function signature to this so okay the dependencies has been installed let me run the project now port it's taking some time the application has started it is initializing perfect you can see we have again i have these 300 bicon me tokens let me again check the gas if i have gas in my wallet no i don't and uh let me cross check this minting address also where i want to make this this is i just copy and i just paste here let me try to mint 100 more tokens i click mint uh it will ask for the signature just to you know verify that i have initiated this paint operation i sign this and this should be here we go and so you see the transaction happened it was relayed by bi economy relays and the suit you know it will confirm and this 300 should be should change to 400 because we are minting more tokens here uh it's on cover network so anytime yeah here we go you can see like the balance is updated and we can actually check the transaction on kovan ether scan explorer here you can see hundred tokens being minted to this address and one more important thing to you know uh see here the from address is not the same as the user address because this is uh the relay address the pi economy is really addressed who actually paid for the gas fees for this particular transaction but for the end user like he doesn't care who pay the gas fees as far as he's renting these tokens without you know paying any uh gas fees and uh so yeah i mean this is the demo i wanted to show you and uh you know after enabling native meta transaction we just you know imported bike on me we shall we just initialize bike on me and we just changed the provider object in the web3 object and we did not need to change anything else in our home so yeah i mean that's how easy it is to integrate bike on me and you could see like how drastically the user experience was improved in this particular application so let me come back to the presentation and i'll hand over to tarun now you know to discuss more use cases of my call me i'll stop sharing here you can take over you there okay uh looks like he he trapped he's just joining again no no worries i can i can continue i can continue so i mean we just saw this one use case of pi economy where we did those you know gas less transactions uh here is another use case uh you know of bicopy so this there is one application that is handling like like payroll uh for for the companies here you know you are trying to do some operation here so this this application is actually on layer one also and on layer two also so it needs to interact with the layer two also and layer one also but you know if you if you would have used a battery application uh you would you know need to change those rpc endpoints in your wallet you know to interact with a different blockchain every time but you know using bike on me use it you can actually get rid of those situations and as you can see here in this demo which i accidentally skipped so here the user is trying to initiate a transaction and if you see uh here it is ranked by test rink by network see here think by test network so it is on layer one but the transaction which user did using bike on me actually executed on layer 2 so you know being on layer 1 you were able to interact with the layer 2 which in this case is matic network and you can see this transaction on the layer 2. so this is you know the another use case of bike on me using which you can drastically improve the user experience uh on those applications that deal with 11 and later also and you know this is a link which you know matic matic network team has you know prepared a sort of documentation on how you can you know achieve this automatic network you can you know refer to that demo and talking let's summarize like how what we did so far so you know we just we initially enabled the native meta transaction in a smart contract by following our meta transaction standard we deployed the contract i you know i i i already deployed it but okay i think that thyron has shared his screen did you share the screen he seems to be muted i've just unmuted him yeah yeah okay okay okay so i mean you can carry on from here i was just talking about like i have explained the layer to uh interaction part you can you know carry on with this slide now yeah yeah okay uh yeah so yeah as you have clearly seen like how to integrate up economy and this is like the summary point so to summarize you know the first step you need to do is just you know enable native meta transaction your smartphone track by following maybe our standard and which is like a basic meta transaction dot uh sol uh file and then you can deploy it on any network uh if you are using bikonomy you need to check our documentation like what are the main networks we support on testnet as well as on mainnet and then uh you just you know upload the contracts address and let's api on by economy dashboard which i am going to show in the next section and then uh you can enable meta transactions on spec methods so in the previous example you can see the mint and transfer function should have enabled meta transaction on the dashboard before you know uh doing the integrating the max isdk in the client side so and then just simply change your web3 provider to biconomi provider with the api key provided by our dashboard and you're done so now i think uh i think we can go to uh documentation yep so so yeah this is the documentation and which is talk start by economy.io and you can see uh like more detailed information information of all the you know uh things we have shown in the demo as well as like in the ppt and everything is there as you have already seen like how max integrate uh maxa is integrated in the front end so i think only the dashboard part is left so let me give you a detailed overview like how to register your application on our dashboard so i have already created an account uh if you are new user you can just go to register now and you can register the application and after successful verification of the email you can you know you will be able to register your application so as i have already verified my email uh i'm going to register a new application so you can see and like you have multiple options uh for the test networks so we have like uh various drop step ring b uh co one and various layer two networks as well like xdia and matic and for the mainnet xs definitely you need to contact us so let me do it on kugan i guess my internet is slow so yeah so my dap has been created and if you go inside the dap you have multiple options here one is like you can see api key which is basically uh you know as the single most important thing uh we need to know like you are a authenticated uh dap on our platform and you have one more thing is api whitelist token which is which simply means when you generate this token you can whitelist various contract addresses so let's say you want to only whitelist certain contract addresses for which you want to enable meta transactions you can do it via simple api and that api is being mentioned in the documentation and then you have the section configurations in which you can just you know restrict uh various to means website urls uh through which you uh want to you know relay your transaction so you have a dab registered on any domain you can just white list here and and now uh you can see this action sections in which we have provided uh this meta transaction limit uh basically to you know stop abuse for the gas fee you are sponsoring for your users so we are providing uh meta transaction limits on various levels so the first thing is like dap limit so dap limit simply means uh let's say you have a dap and you want to sponsor only certain number of meta transactions on this dap or maybe certain uh you know amount of dollars worth of uh for for this application you can easily uh you know on this limit from here so if you go to address limit section you can see uh type like uh you can apply a limit on each amount of ether number of meta transactions so let's say you want to restrict 10 meter transaction for this dap for a duration of like for every day so you can just save this limit yeah so you can see like the that limit is being enabled and now your this dab will only you know have 10 meter transactions provided by economy uh you can also have user limit user limit simply means uh like you know uh enabling limit on per user level it means like uh you know to sponsor certain amount of ether number of transactions to particular address so yeah this is like a user limit you can also like see uh here like you can you know uh do this with this only per user level and then you have this api limit api limit simply uh specifies like uh what are the methods of your contract that you want to apply uh limits on so let's say you have transfer or mint method and uh you just want to apply you know just like point to each only for uh you know this method so you can just specify that also here and then you can add smart contract so i'm going to show you smart how to add smart contract so here there is two sections one is smart contact and other is smart contract wallet so we also provide uh you know support for uh gnosis so if you have already created your proxy contract using gnosis and you want to enable meta transactions through that you can do it via economy and just upload the nss uh api here and uh but but for the sake of this demo just uh upload i think normal contract address in its api so i'm uploading it this is the address and this is the api and you can see the you know smart contract is being populated here and the time type as sc and then you can you know see this dab api section where you can manage your contract methods so if you go inside it there is no currently api is registered you can go here and here you can see this uh your contract is populated with its methods and to enable meta transactions we need to you know select the method like to which we want to enable meta transaction so as such sachin explained uh if you are you know integrating that basic matter transaction dot sol file you need to uh you know choose execute meta transactions uh because it takes like function signature and the address but but uh let's say you have any custom implementation of yours of the basic meta transaction you need to you know support uh this uh like native meta transaction on that particular method for now we will just include this execute native meta transaction and we can name anything here and uh we need to you know take this box like on this method we just add here my head is really so yeah uh see that the method is registered like execute uh meta transaction and we have this api id as uh let's say you want to you know uh use bi economy infrastructure through mobile app and you don't you know have any client side application in the browser you can also use this uh api provided uh by bi economy and in which uh if you want to enable meta transaction you can just pass this api id and you can refer this in the documentation so yeah uh that's pretty much it uh for the dashboard and then i think let's come to bounties now yes okay just just before that i also want to show you something uh so yeah in the documentation if you are like a complete beginner and you know you don't really know like how to make a dap and how to integrate native matter transactions you can follow this tutorial native meta transactions so in this you have like complete uh tutorial like how to build your first app and then enable meta transaction and then integrate by economy so you can also refer that yeah and then in the epa section you can see we have various apis to you know getting the status of the limits uh wide listing api and and directly you can interact with the native meta transaction api so yeah yep that's it awesome awesome thank you thank you for showcasing the the documentation in the dashboard uh let me you know move on to the bounties quickly and then we can you know wrap the presentation and we can open the session for q and a i closed my browser accidentally let me open that workshop so you know we have uh four bounties available in this hackathon and they are you know worth four thousand dollar uh prices so we have you know uh divided it into uh four four different bounties uh which i'll explain uh just a minute cool yeah so as i mentioned four thousand dollar worth of bounties to be awarded to four teams and uh you know let's go one by one with the bounties first one is layer to exit so we have you know we have been seeing this problem recently with the layer two getting uh you know traction recently but this layer to exit problem you know uh is there where you cannot quickly exit from layer two to layer one uh so what we want from the from this hackathon from the from the hackers is to you know come up with a solution that provides uh you know instant player to exit and you know or one way of doing that you know doing this is by maintaining a pool of tokens on both layer 1 and layer 2 and you know by making a bridge between layer 1 and layer 2 and let's say you know someone exits from layer 2 so they transfer those tokens to you and you know you get to have those token in your pool and on the layer one you you know instantly uh you know release those tokens on on the corresponding token only one and you could charge maybe you know some some uh transaction fees for enabling the instant exits and what we want uh developers to do is integrate bicon me in the whole experience and make the whole experience cashless uh whether you are going from layer one to layer two or layer two to layer one so this is like uh the the biggest bounty we have kept like fifteen hundred dollar price for that second uh bounty is uh regarding you know uh so so i i mentioned previously like we are enabling those ways in which the end user itself can pay the gas fees in erc20 tokens and as long as they are stable tokens that's perfect to accept the fees in stable token but when it comes to accepting the fees in non-stable tokens there is a risk you know of uh because because th that actual token must be might be volatile and you know the price of that might go up and down so we what we need from uh you guys is to find a solution that if not you know remove completely but minimize the risk or volatility of uh you know uh of the situation where relay accept the payment in the erc20 token as gas uh and the the user gets to have this seamless experience though they don't have to you know pay the gas facing either but at the same time we also need to you know remove the minimize that risk of accepting those payments so that's the solution you know we want from you guys uh third is spike on me explorer so this would be a pretty cool you know ui explorer to build uh that could track all bike on me transactions because because eventually you know all the transactions are public on ethereum blockchain so you just make a you know a a nice ui to track all those transactions to show some you know uh the the gas usage data for for for a particular transaction or for a particular smart contract address by you know showcasing it a proper uh or maybe a graphical user interface or a pie chart or something like that so you know a very nice user in the the bi economy explorer yeah where you can track all the transactions related by economy and all the gas usage and uh you know all all the events that might be emitted in those transactions fourth we have kept an open track any you know awesome idea you can come up with be it in d5 gaming or i mean recently nft space has been you know gaining a lot of traction so maybe you can come up with a nice uh you know idea using bi economy uh showcasing a use case with an empty space so anything you know you can come up with uh in this particular track uh yeah i mean that that that's it regarding the bounties and you could uh check our documentation for any technical help you can check out our medium page for all the articles we have published and you can actually reach out to us on the telegram uh on the discord also we are almost active all the time because we are a distributed team uh you know around the world uh and uh we we also have uh you know business hours uh i think every saturday uh information regarding which you know will be uploaded on our website uh so you can book those office office hours with us every saturday and ask questions uh if you have any doubt regarding integration so yeah that's it from our side thank you and uh we are open to any questions now great thanks guys uh if anyone's on the zoom call who wants to ask a question just go ahead and unmute yourself it seems um could you um hello uh is there any possible chance you could use this to um airdrop nfts gasless to people then yeah yeah you know as long as those nfts support uh they have support of this native meta transaction you know you could just airdrop those to anyone and that person should could be should be able to transfer those nfts without having cash in their wallet using bike on me so yeah that would be a pretty practical use case so so i i think i have a question in the chat business hours pdt uh yeah uh i think the business hours are in during the daytime pdt times yeah i think the exact time i think we'll we need to update uh you can check out our telegram or you know we'll update it on the website also any questions from youtube stream the questions and and by like while anyone ask any questions uh like i can iterate over here that the solution which we have made is very general in nature you know uh so you could apply this solution to any blockchain transaction so it's not specific to any particular uh particular type of tap or or anything like that you know any blockchain transaction can be made cashless using pycon me as long as you know you follow the the certain standards and steps uh so that's why you know you we are actually hoping for some pretty cool use cases from this hackathon because the solution is very generic apply it to any field and you know come up with some unique solutions great thank you guys that was an excellent workshop i know a lot of people are going to be excited to use dichotomy free thumbnail thank you heather for arranging this session and it was great great presenting here thanks awesome thanks guys thank you goodbye 
cool perfect all right guys thank you so much for coming I really appreciate you guys taking the time um really excited to be here today this is kind of my hometown I lived in San Francisco for five years now I live in Santa Cruz so right up the freeway um really excited to talk to you guys today about uh building on ethereum and uh real briefly my name is Kevin Jones I actually work full-time for nginx as a technical evangelist I've been there for a while about seven years um now I'm focused on advocacy for scaffold eath which is this awesome tool kit that I'm going to be showing you guys today I'm a member of the build Guild and uh yeah scaffold youth is just this awesome toolkit that's going to allow you to build on top of ethereum quickly and easily I also have a non-profit that I founded and I also help out with a solidity class for growick so if you're learning solidity it's a good kind of option to get started and we actually utilize uh some of all of scaffoldeth and a lot of the tooling that I'm going to talk about today and then I'm also a photographer filmmaker so you'll see me running around photos after this I'm shooting the event so if you want a photo come grab me this is all my contact info by the way on Twitter I'm known as crypto Mastery underscore and again if you want to just find me and we'll chat about stuff later today scaffoldee's is again it's this awesome toolkit if you want to get started building on ethereum it's really the kind of de facto way to have everything up and running in a localized development environment these are what you need to get started really to be able to check out the repository obviously it's in git open source you need to node.js you need to have at least version 16 or above I would recommend just getting the newest version which is 18 and then you need to have yarn package manager uh scaffold youth utilizes yarn because yarn will install all the dependencies for you and it will also has all the scripts written for you so that you don't have to remember all the hard hat commands and react commands and different different things that you would do you can just use Simple yarn commands that are already written for you right and so when you check out scaffoldeth you're going to get a copy of hard hat running locally on your local machine which is like ethereum virtual machine set up and ready to go and then we also deploy react for you on localhost 3000 and obviously everything I'm going to be showing you today is in solidity okay um what does it look like from the developer standpoint so obviously you need to clone the repo you do the yarn install that's going to install all of your dependencies for you you do a yarn chain that's going to spin up your evm and on a local host and then it's going to yarn start is going to spin up react for you and then you just do a yarn deploy and then it takes a copy of your smart contract and it pushes it to the blockchain that you're running and you have this kind of like play ether that's available in hard hat to start testing your assumptions on your application right uh if you're looking to kind of test your skills I would recommend you guys check out speedrun ethereum it's this awesome tool built by Austin Griffith and the build Guild that allows you to kind of go through these challenges and kind of test your abilities uh and when you're done you actually when you're done with the fourth challenge you actually get invited to the build Guild um and I'm going to talk about that in a little bit if you need help along the way I'm going to be here obviously also Austin Griffith is around so if you find him he is like a wealth of knowledge and amazing he's the creator of scaffold eth but this is a good resource it has the telegram Channel it has the GitHub it has the readme it has pretty much everything you you need in one contact card and you can save this to your phone so uh don't don't get lost the telegram channel is awesome there's about 2 000 developers in it that are building on scaffoldeeth uh so I'm I'm more of a fan of actually uh you know doing and showing how this works uh in real time so uh again if you do a search on Google the first thing for scaffolding is going to come up is going to be the GitHub repository and all of the steps that I kind of went out went through earlier and I'm going to go through right now are available here and then it kind of guides you through of like how you edit your smart contract how you can edit your react application um and then there's also some resources of how you could learn solidity if you're just getting started learning solidity and then it actually guides you to speedrun ethereum where you can join the build Guild so this is some really good documentation and the link to the telegram chat is also down here in the bottom and there's a great docs page as well so there's a lot of cool Integrations that we've done uh with like the graph which is a really cool implementation of the graph that runs in Docker so if you're looking to get a graph Bounty this is a great idea because you can just run your sub graph locally we also have tenderly support like you can actually authenticate your smart contract through them or etherscan and so this is a really good resource as well if you get lost and you just want to kind of read the documentation if you're getting started uh you know developing on ethereum and you're learning solidity solidity by example is a really good spot because you can actually go there and kind of copy and paste Snippets from various examples into your smart contract and kind of see how those work with scaffoldeth and again this is what speed run ethereum looks like so you can connect your wallet here and you can connect to metamask and then it will basically you can go through these quests and you can submit your your work as you do it and it guides you through and like the first one that you do is you deploy a simple nft then you deploy a staking app then a token vendor then a dice game and you kind of have to hack the dice game it teaches you a little bit about Game Theory on ethereum and then you get invited to the build Guild so that's my show for the build Guild which I highly recommend you guys do that path because there's a lot of cool stuff going in in the build uh so far the build Guild has uh streamed over 200 ether to developers that are building in the ecosystem and doing things for scaffold eth and there's about 584 builders in the system and there's over 500 builds of scaffolding that allow you to do different things so an example would be is if you go to the GitHub repo and you come up here to the top you can actually do a search for whatever build you're looking for and so like let's say you wanted to do an nft there's like tons of nft examples there's like a simple nft there's a SVG Workshop that you can do there's a chain link nft a buyer mint nft where you can mint based off the buyer's interest in an nft so there's really cool examples for like different standards that are already written for you right and so that's a really good starting point for a hackathon because you don't have to do all that work and kind of uh you know you know do all the different things and create the plugins and grab open Zeppelin contracts they're already there and ready to go you can just check out that repository and then do a yarn install all on your setup as a starting point and that's a perfectly viable starting point for the hackathons as well okay so let's actually get into demo here so I'm using tmux which is just a terminal multiplexer if you're not familiar it's really cool because it just allows you to have different windows open but you can also just do this in in different terminal Windows you kind of always have like three windows open with scaffold eth I've gone ahead and I've checked out the repository here and I've also gone ahead and I did the yarn install and installed all the dependencies that that takes about a minute for you to get up and running but after you get up and running you're good to go and then you can spin up your chain so we do a yarn chain and that's going to spin up a copy of hard hat localized ethereum virtual machine and then I'm going to come over to the second window which is in the same directory and I'm going to do a yarn start right so yarn start is actually going to spin up react and it's going to run it on localhost 3000 that takes about a minute to start up so we'll just kind of let that sit uh and then on the last window is where you'll do your deploy okay so if you do a yarn deploy it's going to take a copy of your smart contract and it's going to push it to your hard hat deploy it for you it's going to tell you like the transaction hash it's going to tell you or the transaction ID and it's going to tell you the um uh where it was deployed what the contract address is and it also you'll see that you're starting to see these console logs that are available on hard hat so the the the smart contract comes with it already has hard hat console enabled which I'll show in a sec and so you can print some stuff here and use that as kind of like a debugger right for your for your contract and then it also tells you how long it took we can see react started and we see some read calls that were made that the contract that we have and first let's take a look at the Smart contract and I'm going to blow that up in Adam um any text editor works if you're using vs code it will automatically I think spin up a copy of hard hat and it will automatically spin up react for you in the terminal window which is kind of useful but that can be a little caveat just you need to know it does that because you might try to open up another terminal and do that but that last terminal you'll probably use to do your deploys okay so this is kind of what the structure of uh scaffolding looks like there's this packages folder and that's pretty much where you're primarily going to be working with scaffoldee there's specifically a hard hat folder and then inside there there's a contract folder right and then we have a copy of the your con your contract which is just kind of like the hello world starting contract we can see here that we're defining what version of solidity to use we can we have a license obviously and then we are importing the hard hat console so that we have that console Support over here in this terminal and then uh you have the ability to do more Imports which we're going to get to in a second and then we this this is a real basic smart contract it's emitting well first it's setting up an event that keeps track of the address of the sender of the the transaction and it also keeps track of a variable called purpose and then we have that that kind of hello hello World building Unstoppable apps variable that we set we have an empty Constructor we're going to get to that in a little bit as well and then we have just this function that allows us to update that purpose right so um and then we have just come these are like default so that the smart contract can accept eth and that there's a fallback function in case that you call it contract with some ether and don't don't call a function it will actually like allow it to store that that value right so that money doesn't get lost but really this is kind of what we're going to be looking at is really the set purpose and then the the actual function here so let's look at what it looks like when you first get into scaffold eat you'll you'll see that there's these tabs here in the app home is kind of where you'll build your your project this is where you'll actually start to write like react code and you can think of it as like an application or adapt that's inside of scaffold eth right and So eventually when you launch to production or mainnet you're going to probably abstract some of this stuff and that just kind of makes it easy because you can build your app here and then it just kind of guides you like shows you where the contracts are it shows you about variables stuff like that but what's the really cool stuff about scaffold eth is it has the debug contracts Tab and what this does is it's basically taking your contracts ABI and it's automatically building a UI for you to start testing your assumptions right so we can actually come here if we want to interact with our contract we can come here and say ethsf like this and we can try to send a transaction it's going to tell me that I don't have any gas right I need to pay gas to be able to change the state of that variable so up here on the right hand corner you'll see that there's this funds from the faucet button you can just quickly grab some funds from hard hat and it's going going to inject those into your burner wallet that's another cool thing about scaffoldeth is it comes with this burner wallet supports so if you open up another Tab and go to localhost 3000 again you'll see that we still have access to that wallet right because that's inside of this browser session but if I come over here and say new incognito window and go to localhost 3000 then I'm going to get a new blocky blocky dude right here right we have this kind of like purple guy and he doesn't have any funds but then I also have this kind of green blocky dude that is my Prime like my my what I want to use is like my permanent kind of burner account we could connect metamask if we wanted to right but it's really easy just to use the burner wallet because you don't have to worry about like nonce errors with metamask on a local environment and then we can also do things here like we can export the private key if we wanted to we can import a private key we can also just send a q cart QR code so if we want to send some funds on like a test net which we're going to get to in a sec we can change that to a test net or we can also grab the address and then we can come here to this uh kind of like other wallet which has the all the hard hat funds which has about 10 000 eighth and we can send some funds here so let's grab I don't know like a thousand dollars in ether and we just did that transaction and now we'll see that our burner wallet updated with some funds from hard hat so it's really easy just you're up and running and ready to start start testing so now if I actually have some funds in my wallet I can change that state right I can pay the gas and do a transaction but that's not like a super kind of interesting smart contract so we can kind of see what it would look to to start developing some stuff so let's go back to here and we already have this function and it's payable which is cool because we can actually like accept some funds there we don't have a requirement there we'll get to that but the first thing you might find out with um with solidity or building dapps is you want to have like some kind of access control and so let's let's just set up like a kind of a hacky Access Control let's let's define an owner and let's grab this public key from this burner wallet that we have right we've got access to the burner wallet and let's save that and then we can redeploy so if you do a yarn deploy again it's going to see that we have changes to our smart contract and by the way if you want to force your deploy you can do a yarn deploy Dash reset and it will force a new instance of your smart contract and you can keep doing this over and over again and you'll keep getting new instances of your smart contract so we can see here we'll get a new one and so that really allows you to just reset the the smart contract and start testing you know your assumptions and so now we'll see that we have a new variable that we'd have defined and now what we can do is say okay well let's say we want to only allow the owner to set this purpose so we could say something like this require message.sender which is the global variable that says um who is actually signing the transaction will make sure that it's equal to owner or we say uh you are not the owner like this boom right I don't know what I'm doing there all right safe and then we'll redeploy again right and so now if I come over here to this kind of like uh purple blocky guy I've got some funds in my faucet right or got some funds from the faucet and I want to come in here and say yo what's up like this and hit send it's going to tell me you are not the owner right so I've been able to kind of set up like Access Control really basic access control but that's actually not the proper way to do access control so we can actually do it a little different we can actually uh let's let's get rid of the require statement and let's get rid of this address and let's instead do like inheritance of an open zeppen ownable contract so if you don't open zapline it opens up one is like the de facto standard for doing different implementations or or standards and one of those is ownable so it has like all that functionality in there for you so we can say your contract is and inherit that ownable like this and then what we can do is because it's uh it's set up um we're inheriting all of the the functions that are inside of this smart contract then we can actually get access to the modifier which is a part of ownable that is only owner so we can actually grab that modifier save that there and then redeploy and so now we've kind of done the same thing but we've utilized open Zeppelin's ownable contract and we'll see here now that we have like a new function called renounce ownership which is if you want to like pull out ownership from a contract and make it live forever with no owner and then we have like the transfer ownership function as well and we have that address so um we we probably don't want well first of all you'll notice that the owner does not match what I think you would want because you don't have access to this account this is just some kind of random account this is actually coming from hard hat so hard hat utilizes the very first account as the deployer account and we can take a look at what that looks like inside of the deploy script so right below here we have the deploy script and we can see here this is how we're doing we're actually deploying our contract and we're setting up the the settings for that and you can see right here as we're defining the deployer which is getting uh from hard hat all the named accounts and it uses the first one and then we can say that it's actually using that deployer and then we can also see that we could pass arguments as well so like say let's say you wanted to name your contract like I don't say it's a cat's nft or something like that you might be able to pass an argument in here like this and you could pass that in the Constructor uh we're not going to do that right now but it's good to know that is if you want to pass a variable to the Constructor you can do that there but what I want to show you here is that you get we get a copy of your contract here so const your contract and then we deploy the contract and we have access to it now in inside of uh JavaScript and so you'll see here there's a there's automatically a thing that's kind of already written for you here I'm just going to copy and paste that that allows us to call that transfer ownership function so let's go grab that address here and then let's uh sorry let's paste that in here so we're going to do we're going to do the normal deploy it's going to use that hard hat account but then it's going to call the transfer ownership function right so we're going to do a deploy reset boom there we go and so now we see that we have access to the smart contract again we have access control but again that's it's kind of like not a really interesting thing because why would we want to have a function that only the owner could call so I'd rather show you like kind of how you can start using the smart contract as a bank right um so let's let's do something like that let's let's uh open up the smart contract let's close the deploy script uh and let's let's instead let's set a variable so we'll take about take away the only owner modifier and instead we'll Define a price variable so we'll do a UNS public and we'll call it price and we'll set it to uh whatever ether we want so we'll do .001 ether like this and what this is going to do is it's just going to create a variable that has the value and by the way like I have my ID set up so it tells me like the calculation of what how much ether is to how much weigh so um and I'll get to that in a second but you can you could write way here or you could write ether um we're going to do ether because it's easier right to read so um and then what we can do is instead do a require statement here that says all right let's require that the message value of the smart contract is equal to the price otherwise we're going to say um you are broke something like that uh and save that and then deploy that and so now we already had this and it's important that if you're going to do that with a function you need to make sure it's payable but it was already payable so we know now it that we can accept some value on this purpose so if I come over here now and I want to change this to uh SF like this and I try to hit send it's going to tell tell me that I haven't you know send any money so now I can come here and I can do 0.001 ether right here click the little green button and what this green button does is it just calculates the amount of way that I need to send in the transaction so it just multiplies it by 10 to the 18th power and so anytime you're deploying on or making transactions you do it in way so obviously you wouldn't want your user to have to type out way so you would do that kind of calculation inside of your application using ethersjs there's support for that and then now if we hit send it's going to allow us to do that right and so now we see that the smart contract actually has some value right uh it's got a dollar 65 but at this point the it's kind of black hole it's stuck in the contract because we have no way to really get the funds out right so the next feasible thing would be that you would actually write a withdrawal function so we can do that we can say function withdraw like this and we can make it public and we can so we can do like set a Boolean called success and otherwise we will not and then we can do so again message.sender is the person that's calling the smart the the transaction right calling that that function and we can do what's called a call and we can send uh set the value as the balance of the the smart contract so it's address dot this dot balance I believe and then I think we need to do this I'm gone boom okay but we don't want anyone to be able to access all the funds right we're on the smart contract we want to make some kind of function and variable so we could actually hear we can use that only owner like this right and save that but you see what we're doing is we're getting in this kind of mode where we're making changes of our smart contract inside of uh your your solidity code you're coming over here you're deploying your your subcontra or your smart contract and then you're kind of like testing your assumptions right and so now we'll see we have this withdraw function so if I come over here and I'm I'm this kind of like purple blocky dude and I'm using this dap and I'm like okay yo what's up I'm going to send some value and we can just copy this from here to here and send cool I've I've changed the the purpose to yo what's up and then I'm like oh I want to grab all those funds so I can try to say send and it's going to tell me that you're not the owner right because we have the access control set up but if I come over here it's got funds in there I can hit that withdraw button and I was able to withdraw those funds because I own this this public and private key pair and I was able to call that smart contract okay um I want to show briefly like kind of like uh the react code a little bit as well because um I think it's it's very useful uh real quickly what I also want to say is like you all the stuff that we're doing here is like localhost right um at some point you probably want to deploy your application to maybe a test net especially if you're like you're in the hackathon and you want to do it to like polygon right you might want to deploy it to polygons so right now we're using uh the hard hat accounts right you wouldn't want to use that if you're deploying to a test net because the the public key or the private key could be compromised so you would actually want to do what's called yarn run generate on here and what that's going to do is it's going to spin up or it's going to create a mnemonic and it's going to store that in the root of your application here you can see I have a couple of them here and so these are the root mnemonics I'm not going to click on them because there's there's actually like the mnemonic the password and then you can run yarn account like this and you can basically get a QR code for your account so it takes your public address creates a QR account and then it also goes out and checks the balances um of different different chains that you're on right so what I always do is another cool uh tool that is actually built by the build Guild and Austin Griffith is called a punk wallet so I just always have a punk wallet on my phone and then it's got a little scan feature so I can say allow and what I can do is right now I can send just by scanning this oh I gotta redo it again and I just have this pre-loaded with some like testnet ether I also have some like polygon Mumbai stuff on here as well and so now I have access to that and I could send some ether to it right and then I have a deployer account that is generated and I'm able to deploy my account and then if you want to deploy like I could deploy this right now to uh well actually let me let me send some eth for for it first so we'll go to go early and we'll go I'll send uh let's see here let's do I don't know 0.01 eth hit send all right looks like it's going so I was able to send some funds from my wallet we should be able to see that gorilla has some balance oh not yet try it again no it's not working it's pending so it might take a second but then we can do what's called a yarn deploy again but we can choose the network so we can do Dash test Network go early like this and just with that one command let's see if it actually succeeds it's going to try to send the transaction and we are deploying our contract it looks like it worked I think it's thinking O'Reilly's a little slow today usually it's a lot faster while that's doing that I also want to show real quick in the UI you might want to take your react app and update it to a test net as well so inside this app GSX file and then inside views so app.js actually is that kind of main component for scaffold eth and if we scroll down there's just this one section where we can change the default Network to go early like this save it and then we can refresh our app and so now we should if it's successfully deployed which it's not I'm not sure why it's not deploying live demos sometimes they don't work yeah I'm not sure why it's not not working it could be that I'm not oh there it goes finally went so I deployed the smart contract to go early and now I have a copy of this smart contract and I've refreshed my app and my app is also ongoerly so now I could actually connect my metamask let's do it let's switch to go early and switch the network so now I have a bunch of gwarly eth right let's do it here let's set the purpose to uh scaffold is awesome actually let's use scaffold eth like that and let's make sure we send some value boom send and then the The Next Step I'm running out of time but the next step would be that you would maybe want to ship your app to um some other like hosting service because right now we're running locally and you can do that uh directly through here as well you can do what's called yarn build which is going to take a copy of your react app and it's going to build it and make it optimized and then you can do a you can do a yarn uh sorry CD projects ethereum scaffolding then you can do a yarn um so I'd like right now you can do a yarn surge which will put it on a surge endpoint if you're not familiar with a surge it's kind of like a simple like static hosting service or you could also do it to ipfs with yarn ipfs so you have kind of some options of how you want to deploy your app but this takes a while to do so unfortunately it's not going to finish in time um but yeah that scaffold Ethan in a nutshell I do have a couple minutes I have one minute for questions so I would love to see if you guys have any questions about it got to be one question come on what yeah so there is a so under the docs uh there's a tenderly kind of like walk through there's like a video and it tells you how to verify untenderly um basically it's you have to like create this kind of script inside of your deployment script um and I think you have to do past like an API key I believe uh as well so that the instructions are here but it's really the only really thing is that you're you're um like authenticating your smart contract through uh tenderly uh at least I think that's the only current integration yeah you can also do with etherscan as well so there's either ether screen ether stands a little bit easier because you can just do yarn verify and then pass the the network here that you're using and then you also think you have to update well you should update your hard hat config also with your API key for etherscan as well um yeah that's a good question any other questions no awesome thank you guys so much for coming and I'll be around so if you need anything let me know good awesome gmgm everyone yeah uh so I'm David I'm a product manager from Ave companies uh where I work on our social products including lens protocol uh and want to talk to you all today to go a bit under the hood um first into why we felt it was needed to build lens and the problem length is kind of trying to solve uh why blockchain is really the only solution we have a little bit about the lens architecture and then closing out with the lens API which is one of the best ways to build with lens and to build this new class of web 3 apps we call the experience layer fancy marketing term so the problem statement web 2 social media is fundamentally broken let's think about the login flow for for the average app when you sign into Facebook you're authenticating to Facebook they're then kind of looking up your data in the database taking it and rendering an experience that data is centralized it is not portable Facebook has no incentive to make it portable it is their monetary stream all they really want to do is make sure they're getting more data they can then use to monetize further and Snapchat has the same experience and Linkedin is the same experience and YouTube has the same experience and Tick Tock has the same experience as does rip Twitter and the difference of what we're going for uh with web3 is we want to kind of make it where you own your content you bring it to an application so that it is fully portable and that really makes networks beholden to the users as opposed to users being beholden to the network in web3 in a lens application which is fundamentally different you are not just authenticating with the application but you are bringing the identifier so that it can find your data so you can bring it your data I sign into an application by bringing it data and then it only then can it render experience the data is in this kind of more public area which means it is forkable I can switch experiences at will experience can specialize to different types of users we've already started to see this in the lens ecosystem there are apps that specialize in for creators people who create content and there are apps that are specialized for people who are trying to curate content in their apps that are specialized people trying to consume content and because it is a chart a shared database that is user owned it is not the same company it is not the same development team building all of those which causes for better experiences for everyone So In Sum web3 social is about bringing power back to the user so we're going to lower the barrier for developers by making it really easy to build social apps and tools on a composable decentralized social graph and the key thing is developer you get to focused on the user experience and not customer acquisition the name lens is named after this plant like the lens Claris it fertilizes the soil allowing other plants to grow alongside it lens apps want all of the apps in the ecosystem to do well because data generated on one app is available to another to a different application as long as you're in the lens ecosystem everybody wins it is a collaborative game not a zero-sum game for creators you get to own the links between yourself and your community and you are able to move anywhere with ease pick the Creator tool that you want and distribute to your users at the platform they're using not just the one where your creator tool lives so how are we actually building this well we're on a blockchain we are live on polygon today uh we have a profile nft the profile nft is minted and it has a Publications array that you get to post to we'll come back to posts in a quick minute that profile nft has this thing called a follow logic that emits follow nfts so you get a Follow nft by following me davidev.lens and it gets dynamically updated with posts you can always see the latest thing that I have published the follow nft includes built-in governance and delegation so I can set up many votes for my community maybe if you want to see me talk more about lens maybe you want to hear me give more hot takes about blockchain I get to pull my followers for what they want to do token IDs are based on the order of following Bradley in the audience was my first follower Christina my audience was my 10th follower and that has built in value if it if I pop off and they can be able to trade that in the future posts comments and mirrors uh they are they're part of my profile nft they are part of who I am as I move around with my profile so does my content come with me um and they have this awesome thing called a collect function which allows them to be instantly monetized I can set the rules for how collect nfts are minted from a publication and that gives me a way to determine my own as a Creator determine my own monetization logic one of the key things and design principles of lens is we are as agnostic as possible to give as much power to developers nowhere in any of this did I specify where you need to store your data we let you pick if you want ipfs for example shout out to the sponsor IR weave or you can even go centralized links with S3 um we also don't enforce any particular encryption scheme you as the developer or the user can pick privacy you want or you can leave things fully public the option is up to you we are just providing a minimal spec to help organize the blockchain data into a social graph and so far in our private beta the community has really loved the land verse lensverse we have over 90 000 profiles they have a closer connectiveness than most of the major social networks and we are seeing this concept of collect really take off as creators like to experiment with brand new you know the collection of user generated content and micro purchases and there are tons of different people you can follow from major content creators like g-money to Dows like index Cooperative to blockchains themselves like polygon now over to the lens API which is the fastest way to build your own social application or in or use lens data at all now to make it clear lens is entirely on chain anyone can access the data as they see fit for your node directly throughout a service like Alchemy or querying something like the graph however we all for our own API with the lens API you don't need to worry about indexing querying reorgs or fetching data that's all done for you you don't have to worry about pre-filling contract data or validating it or using weird with Sig methods our real goal is to offer something that is easy to approach for development it looks and feels like a web 2 graphql API it is simple to interact with the protocol and there is really not a huge learning curve you can just focus on the stuff you want to build in fact some of the easiest things you can do to build is use a follow-on lens button very similar to the kind of ones we have for existing social today or a sign in with lens button this wraps signing with ethereum so you're still getting validation that the user owns the address but Additionally the lens API will return all of the data it has on that user their lens data their ens their co-ops their proof of humanity or World coin status and more and plenty of people are using this today here's eth Global on their home page has a link to their lens profile as well as a way to follow them through the lens API and it's a great way to see content such as this talk and many of the others for ethsf so what's next and where are we going on the middleware layer we're going to be adding more and more data providers to allow you as devs to build holistic experiences um we already said ens proof and proof of humanity a world coin we have many more coming out if there's a protocol you want please stop by the table we really want to build it to help give you guys a powerful development tool for experiences we have this really awesome concept called dispatcher and relay which allow applications to pay for gas on behalf of the users um it allows seamless onboarding for the masses and already we have done four and a half million transactions since we released this feature in June making the lens API one of the largest evm gasless relays additionally we have plenty of teams that are working to extend the lens contracts to support multi-chain as well as off-chain data to be read on polygon using really powerful protocols such as layer 0 and chain link ccip and D Bridge you'll be able to read data from multiple chains onto polygon so you'll have the ability to say you can only comment on my post if you hold a board ape you can only follow me if you hold more than 15 sdkave and the real desire is we are trying to power this thing that we call the experience layer this next generation of applications the lens API is stitching together data from lens live peer proof of humanity ens World coin pull-up xmtp push and Ave itself in order to provide a data layer for U devs to pick and choose what applications regardless of chain to put into the experience that you craft because at the end of the day we have experiences there are tons of different applications here but they all want to have different uis for Ave you can go to app.ave.com zapper rainbow instant app coinbase for lens there are a ton live today lens friends lens the lens tube favor orb um Leinster there are plenty of different uis that are all using the same contracts under the hood and for us this is kind of the evolution of experiences that we think is going to be coming to web3 things started out with singular app single Source you can see that on the uniswap application right the only thing I can do is interact with the UNIF system of contracts and it's only on a singular chain there's more current experiences like the Ave UI which add in a few apps together you for example the repay with collateral function stitches in Power Swap to allow for a slightly better experience but it's still fundamentally single chain uh here is a screenshot from one of the lens applications lenster it is stitching together data from multiple applications across multiple chains there's ens on mainenet lens on polygon World coin on polygon pop on gnosis chain and many more just in this one frame that's not even the entire screen and we really think that this is the future of web3 applications additionally we are we are upgrading our API to continuously provide powerful features to allow you to create web to Native feeling experiences the first thing is we believe that gas is an application cost AWS bills are part of a business cost for an application and gas is the web 3 equivalent we believe that you should be building it into your business model and therefore our contracts offer metadata as well as permit as well as this concept called dispatcher and many of the lens apps have opted into this ux again 4.4 and a half million gasless transactions through our API representing an overwhelming majority of lens usage and it's not costing a lot we also have this thing called the optimistic UI or the optimistic API something we just released that causes users and apps not to know there's a blockchain running in the background apps are given an optimistic assumption that certain write calls succeed if I follow you on lens on a lens app using the lens lens optimistic API then any app reading from the optimistic API will assume the follow succeeds and upgrade regardless of hard refreshing the session or otherwise this allows zero wait time to reflect State changes to users and gives an incredible feeling of responsiveness and we we're going to be expanding this to many more calls than the lens system and hope that other developers use this on their contracts or their their sdks lastly unified queries apis that return data from multiple applications across multiple chains we've already integrated this into our profile function with a singular call you can get lens Co-op ens worldcoin pohsibil.org data and more in a singular call those contracts are on multiple different chains including off-chain data and that is something that we want to expand on more for developers you guys deserve contextual contextual data regardless of where the source chain is we hope to continue building on that path so that is what I have to talk about today uh happy to have plenty of time for questions awesome [Applause] any any questions uh if you want to get a lens profile you can stop by the booth we are still in closed beta but we have tons of awesome uh tons of spots left and want to make sure that anyone building today can get one so the question is so the first question is where where the contracts deployed are we only on polygon or will we go multi-chain so the lens contracts are open source they're evm they can they can go anywhere we have a deployment that we run on polygon we also have two test Nets uh both on polygon Mumbai uh one with zero permissions on it and one that mirrors mainnet we are happy on polygon uh it is a chain that is scalable enough to handle the load of lens um it is a massive massive number of transactions and polygon is shown to be able to hold our scalability uh we look forward to continue building there about Red Racks or great matters yeah so we uh yep so we have a Creator program where you can email creators at lens.xyz uh for Creator grants and we have uh developer grants at ecosystem at lens.xyz uh we want to help make sure that you help build uh awesome tools as part of this ecosystem so the question was about closed beta closed beta for now just means uh the actual minting of profiles is limited uh for a variety of reasons but basically that means that once you have a lens profile you can use any of the lens applications in the ecosystem on mainnet however no and and so we really until until the uh the mint the mint block is removed uh we you you'll present you're presumably in closed beta as well uh the devs are working their best to do things to relieve it um we are hoping to end it uh sometime early in the next year yeah so the lens contracts themselves are and I'll go to kind of the so I think that shows it out yeah so the lens contracts themselves are built on polygon and there are ways in which you can extend them we call them modules collect module follow module and reference module these are ways for developers to hook in their own contracts into the lens system lens does not itself specify any bridges for receiving or sending cross-chain data you can plug in any Bridge you want this follows the same design pattern we used in a hobby V3 so we know that there are active teams building uh building Integrations with layer zero there are teams building Integrations with chain link ccip another one of these brick messaging Bridge of protocols as well as D bridge and Stargate so lens is agnostic to the bridging solution used their teams use the application developer can pick which one you trust foreign I think for us the roadmap is more you know we're trying to be this kind of you know we are the we want to be the Social account the the account structure that is used we're just here to kind of provide a minimal structure to allow for anyone to build social graph powered applications this could be as simple as including like a little bit more contextual data when you sign in so oh here's a cover photo a profile image I know what people follow so I can maybe give better recommendations I can see my positions or my friends positions or people's who I follow those positions in a defy app for an nft project it might be able to I can recommend what you might want to Mint or what you might want to buy in a Marketplace based on what you follow we're here to kind of provide information and again because foreign protocol is intentionally incomplete it requires other things to be plugged into it and so we're for maximum integration um as I mentioned I think just this week uh we announced integration with xmtp to allow end-to-end encrypted direct messages between lens profiles uh again showing kind of the extensibility of the project awesome I think I'm at time uh xmtb will be getting built into the API um so the API kind of sits on top of it's it's not any contract right it just is a series of indexers and plugs into various different protocols so at some point xmtp will be built into the API to allow applications to easily pull conversations and other relevant information based on an authenticated user I believe folks from developer Dow have built a sub graph that you can query we also do recommend that you use you know the API is open there's no key there's no nothing to query it no account needed it is able to kind of stay up to date much faster than a traditional subgraph to allow you to get real-time information from the from from the social graph itself yeah so the question is about other web 3 social options um I would say that lens is one of the few true web 3 social protocols that exist we are directly on chain we are directly interoperable with other protocols some people have taken the approach of building your own blockchain or keeping your data off chain entirely we believe that by being on Chain by being truly interoperable by staying committed to web 3 principles um that's kind of the the ethos behind lens and I don't think we've seen others build in that kind of mindset being fully decentralized on chain yeah yeah so we have an integration with ens where through the lens.xyz ens name you can query any data about our various data about a lens profile so I'm David EV dot lens if I want I can query using ens's off-chain resolver uh davidov.davidv.lens.xyz and I will pull up my profile picture on lens my cover photo my avatar my name location other various data that I have put into my lens profile can be queried via ens if you want an alternative to the API or if you're already using ens resolvers in your project foreign and then there's also in the lens API itself there's an integration that will look up the profile holding a um holding a lens profile and let you know what its ens is if reverse resolution is set or what other names resolve to it uh to set reverse resolution I would I would talk to the uh ens team uh you can find that out uh in their documentation uh there's a simple contract call you can do on chain there's a registry yeah so the bounties we have uh there's a bounty for integrating the uh the lens API either sign with lens follow with lens um the really simple integration uh let me see if I can find that example um and then there are larger prizes for those that build the best kind of social application uh the best use case with lens um yes the easiest way to be eligible rise is just very simply integrate either sign up with lens which is a wrapper of signing with ethereum uh or follow-on lens button uh we even have visual examples and simple HTML links uh I have to go back and look I don't know what's up my head awesome well we'll be over at the booth uh over by the the hedges by the main stage uh and happy hacking everyone [Applause] what's up um come on everyone hello hello everyone thanks for coming all right so I'm going to talk about uh basic and advanced Seaport techniques if you guys aren't aware Seaport is a base protocol that openc has developed and it's our Marketplace that can transfer transfer and handle nfts and erc20s um so let's get started so the way Seaport works is you have an order an order has two main components to it an offer and a consideration an offer is what you are offering and a consideration is what you expect to receive back uh for that order there are two other components one is called The Zone and one is called a conduit so a Zone can be an external contract that basically gives an approval or disapproval if an order is valid or not and that can be used several ways we will go in at the toward the end of the presentation and then a conduit is who are who you're giving your token approvals to uh to help uh transfer and manage your your tokens and the approvals and the reason that um the conduit is nice to have separate than the seaport contract itself is that Seaport can be upgraded or changed or moved to other address and then the conduit can still be used for the approvals so you don't have to reapprove um the conduit if the seaport contract has changed the seaport contract would just use the same conduit two other components of a Seaport order versus the salt which is kind of like a Randomness Factor but lately what we've been doing is we've been including our four byte domain hash so openc.io if you kazak hash it and take the first four bytes we've been um prepending that to the salt and that helps kind of um with order attribution and finding out who is uh fulfilling or creating the order and then um the counter is an account level thing every order you create will be set to your current counter and if you increment your counter it's a way to kind of bulk cancel all the orders that are below that counter so here's a diagram of how Seaport kind of works under the hood it's a little bit complicated but it goes over at the very top um the things we've kind of gone over already which is the offer and consideration and the zone and the conduit key which is a way to reference uh the conduit is standardized but the conduit Keys like which version of a conduit you're using not version but which um uh like kind of operator that has created the conduit so all those go into the order and then when you have an order you can do several things with it you can fulfill the order you can do a match order which we'll go into which is kind of like an advanced kind of matching you can validate the order on chain and what that does is you can pay some gas up front to validate it on chain and then if someone fulfills that order later um the the gas cost to fulfill is actually cheaper and then you could cancel an order which renders it invalid when uh when you fulfill their match an order it goes into this left part of the diagram which is just kind of a series of contracts that help combine and and set up the order for for the Fulfillment uh and then as as kind of the last part uh the the order is verified and you know the time the signature the order status are all verified before um the tokens can be transferred so if you've ever gone to the seaport repository um we have a set of optimized contracts and then a set of reference contracts so if you're kind of trying to learn what's going on uh it's nice to go to the reference contracts and see uh to read the code and it's it's quite digestible the optimized contracts use a lot more kind of inline assembly and kind of little tricks to help uh reduce the kind of gas usage of the contracts so uh creating orders so if you've ever created an order on openc um you sign something like this and this is kind of what we went over it's all the components of what an order looks like it starts with um the message and the offer the offer which in this case uh it's a nft and the ID of it is id31 and then the consideration is the first consideration item is the one that goes to the owner of nft so that's what they're getting paid and then the second one is the open C Marketplace fee if there was a Creator fee here the third component of the consideration item would be the Creator fee payment and then you have the start time end time um Zone Zone hash salt and conduit key and the counter which you kind of went over so um validating order on chain is pretty cool because as I mentioned it makes it cheaper to fulfill later uh it also emits an event called order validated on chain so this is something you can do with like contracts if you have a contract that automatically wants to list the nft on Seaport you can do this and then other people can understand that the order has been kind of like made available to be fulfilled and then there's eip-e127 so that was eip712 which is kind of manually signing in order uh which you've probably seen like with metamask it pops up and you sign it yourself that's with the eoa if you have a contract that's signing an order there's this eip1271 which is a standard interface that provides is valid signature and that's how like a contract can create an order on seaboard and yep that allows like um smart and multi-sig wallets too to create um if you did order validated that's on chain you pay a little bit of gas but if you sent it to the openc API that would be off chain and it wouldn't cost any guess and then canceling an order um if you validate it on chain you can cancel it even if you created the order off chain in most cases you still want to cancel it Unchained because if someone found that order or got it later they could you know kind of execute it as they as they want and then the other option is incrementing the counter which is the account level kind of nonce all right fulfilling orders so the very kind of basic way to fulfill an order is fulfill order fulfiller is the caller and it takes all the offer items and matches them with consideration items um so this is a very standard way to fulfill an order the other type of fulfillment is a fulfilled basic order and what this does is it puts certain constraints on what a basic order is in this case it's orders that have like a single offer item and have consideration items and they're all in erc20 or native but what this does is allow us to use the call data in the method signature um and access that more so that it costs less gas to use for batch fulfillment there's fulfill available orders and you supply an amount of orders and you supply the max amount you want to fill this is helpful if you know you're for example you're putting in 10 floor orders and you say you know I'd like up to five of these then if certain ones are taken during the processing then you can still kind of allow the transaction to go through and uh with the fulfill available orders you supply a fulfillment array which optimizes for fewer transfers which also helps on the gas usage um one kind of advanced method that's available on the contract is match orders and it's not used very often but what you can do in this case is uh Mev Searcher who finds orders that have that they can match together if there's remaining amount after what you can do is create a consideration item to pay yourself the leftover kind of amounts at the end of the at the end of the order if you didn't do that the amount would just stay what the the person who offered it and they would only be charged the amount that they were the order was matched okay and then we'll talk a little bit about zones um zones are really cool because it kind of allows for pre or post-order kind of validation or ratification so some ideas of zones is like a dynamic nft metadiz Zone and what that could be is like you know as an experimental concept if you had an nft that had metadata that if it changes it changes the value of the um of the nft itself then you might want to cancel the orders that are out for the for the nfts so if you had a Zone that had a kind of a registry of of knowing when and now if these metadata changed then when Seaport calls out to the zone to ask if the order is valid then it could deny kind of the the parameters of the order based on uh what the contract with the Zone itself kind of knows um a compromised nft registry is another interesting way of creating a Zone because the Zone because it has control to say whether an order is valid or not if you had a Zone that had a registry or a Merkle root of of understanding um which nfts may or may not be compromised then it could if it was marked as compromised then it could deny the order and not allow people to transact for it on the on the marketplace for front running resistance um this is another cool idea for a zone so if you take a Zone and you do uh kind of a commit reveal where you tell the Zone okay like I I'm interested in this in the seaport order I want to kind of like reserve it then the Zone would make sure that only that caller would then maybe in some time frame 10 or 15 minutes only they could um complete the order and then after that period it could be open again kind of to the public but that'd be a cool way to kind of create um a more kind of a secure way to use like the public mempool but not allow people to get the their nfts kind of snatched in the process and then another Cool Zone would be like uh oracle-based price validation so if you could find an oracle that has uh like nft floor prices or um the price of nft based on its Rarity then the Zone could enforce that if the value is too low um it could deny the order being fulfilled and sometimes that helps in the case where nft is stolen and it's listed for much lower than floor just to kind of get rid of it this could help protect in those kinds of situations so um a little bit of alpha it's working on Seaport V2 and one of the concepts in there that that we're working on now is a um is a uh an order type that's a contract so this allows us to do kind of more advanced contracts um that can handle orders uh right now as we kind of went over in order either has to be signed by an eoa or a contract and in Seaport V2 we're exploring ideas how we can make contracts more powerful to kind of create orders on the Fly based on different parameters and and custom logic that and contract itself could hold so yeah yeah here's some helpful links the seaport repository um the discussions page is a great place where a lot of people have asked questions and while you guys are here if you can't find me you can post questions in there and we'll we'll try to get to them and and help you kind of uh answer any problems or questions you may have Seaport JS is also a great kind of accessory utility Library um has a lot of helpers you know if you're working a node or JavaScript it has a lot of things already built out like driving order hashes and things that can be helpful utilities and um and yeah there's a Seaport order validator as well it's a on-chain contract that you can call out to that can do that does like almost 50 to 60 kind of on-chain validations for balances and approvals um that recommend kind of checking out it's pretty cool so yeah thanks for attending uh I'd love to open them up for any questions if you guys have any about Seaport or building on it and uh yeah thanks yeah um you could build a Zone that's kind of like a pass-through that you could check multiple zones at the end of the day is just uh Seaport when it's executing the order if it's if it's a restricted order uh which means that it calls out to the Zone there's a full order and restricted order type and if it's restricted it calls out to the zone that zone could do calls to other contracts or zones and then come back with one final call um the only caveat is like today on openc you have to use kind of like the zone that that we have just as like a security thing we don't allow like anyone to use any Zone but um during like these hackathons we love to see people like building zones and like there's always like the the option of like adding that to some kind of you know possibility in the future that you could use it on openc itself too choice yeah um yeah the seaport repository should have um so the current Zone that's used on openc I believe it's called like Global possible and the reason it was developed was when Seaport was released in the summer you know it was brand new contract and just in case something happened we wanted a way to pause the whole Marketplace and Seaport itself doesn't there's no owner so we wouldn't be able to pause that but if if they were all going they're all going through this Zone then we can pause the zone and that kind of effectively halts Seaboard so that's currently the Zone that's being used um and it should be in the repository so you can see kind of an example of how and there's a little bit of documentation about zones in the docs folder too okay thanks any other questions yeah so I'll be around um this weekend I'll try to wearing a Seaport shirt now I'll try to wear like an open t-shirt tomorrow um but if you guys are building on seatboard or doing anything with orders I would love to talk and um help answer any questions or yes um we are a sponsor of the hackathon I don't think we have any prize levels um for this weekend uh but um yeah any questions cool well all right thank you everyone appreciate it oh wow if you guys would like you can scan it and get one actually kind of want one too yeah best part yeah they said there's a hundred on this one so I think everyone yeah okay I'll refresh it all right looks like someone has claimed it but y'all stick around if anyone has any questions feel free to come ask sweet like the uh V2 stuff is really interesting like with the smart contract stuff you could go crazy right yeah it's uh yeah A Whole New World of ways you could kind of creative pools or other types of yeah because I was thinking like this is basically like the thing that sort of kind of goes like suitable right thank you all right GM everyone uh my name is flywheel I'm here to talk to you today about world coin World ID and proof of personhood so just before we get into personhood I'm gonna give a little bit of an introduction to worldcoin in case you haven't heard of us uh here's a famous orb so uh today we're gonna talk about um world ID so World ID is a privacy per serving proof of personhood protocol what that means is it enables you to prove someone is a human doing something only once and without revealing any personal information so uh the way we started is uh crypto so obviously awesome that's where we're all here uh but the value is being captured only by around two percent of the population so what we wanted to do is bring it to um more people uh in in the world so we started with this premise of what would have happened if Bitcoin started by giving one uh coin to each person uh of course this is no longer possible with Bitcoin but we um uh we thought it would be possible with a new token so that's why we created a worldcoin token with a limited supply of 10 billion tokens where every person gets a share of uh this new token for free just for the fact of being a person uh and then until Supply runs out of course uh the problem we immediately realize is how do you make sure each person only claims their part once and this is where if someone's able to game the system or abuse it or any type of fraud then the whole premise falls down and um we realize this is a very um existing concept called civil attacks and uh this is a concept that's present in a multitude of applications from social um governance and we'll talk about a few more in a bit so we wanted to create a way where we could solve for the Civil attacks in a way that was uh private inclusive and scalable so we went through all the uh obvious uh options you know email kyc uh and then uh we got into Biometrics all of these options we realized weren't enough for either one of these um um constraints or or goals that we had in mind so um you know kyc is not really private uh it's not inclusive a lot of people don't have passports or for for other form of ID uh so we got into Biometrics and the problem with Biometrics is fingerprint there's not enough information in the fingerprint to distinguish a billion people or much more so that that was um something we couldn't work with and of course DNA is uh logistically too complex and not very private so that's why we decided to go with the iris and we created this little device called the orb uh what the what the orb does is it takes a takes a picture of your iris uh computes uh something called an iris code on device uh destroys the pictures and then with that Iris code is able to check that you're a unique person not previously registered so there's no need for contact information kyc passport uh and any other type of personal information so this is already quite private but we realize it may not be enough especially uh you know if you have a single identifier that's tied to your person then whatever you do with this identifier will be forever uh tied to you so uh we went a little bit deeper and with something called zero knowledge proofs uh we we embedded this as a core part of the protocol so with this zero knowledge proves what you're able to do is say I'm a real person and I have never done whatever action it is before and you can do this in a completely privately preserving way in a way that if uh today I use it to claim worldcoin tokens and tomorrow I use it to um mint an nft those are completely uh separate actions unable to be traced together um and this is what the Worldcom protocol is all about uh and um so so World ID is uh privacy first decentralized identity protocol that is based on this concept of a person and is completely open and self-custodial um so anyone can can make use of it the way it works is it looks something like this imagine you have this um cool application called mesha where you can get fifty dollars of whatever airdrop you're doing and you want to make sure a person only claims it once so you would uh add the the world ID widget that looks something like this very similar to a captcha uh it's just uh very um intuitive for for users uh they would uh they would get a QR code you would scan it with your welcome app and the app would generate the zero knowledge proof that you verified that you're a unique person and you're only doing this once uh so now I'm gonna get into a little bit of the technical details uh the protocol is a little bit complex uh an account of the zero knowledge stuff but um we've abstracted most of this complexity to make it easy to to build on top of it so um from a user's perspective first the user goes to a North uh the orb does this check I mentioned uh and then issues a world ID the the user um uh in the background what's happening is the the world coin app is generating a random secret and it's showing the public part of that secret to the ORF in a QR code the orb then takes a picture computes the iris code checks that it hasn't seen it before and if you're a unique person it'll insert the public key into this list of verified identities which lives on chain currently on polygon and we're working on uh bringing it multi-chain um so uh at this point uh your you you this public identity that gets inserted on chain it's a random um a random number it has nothing to do with you uh nothing it's not connected um to your Biometrics and when you use it it's uh it's never gonna be obvious which person in the set of users actually uh made whatever action it is that you're doing um so this is the flow for how an application can interact with the protocol so um there's essentially two pieces the application needs to integrate uh the front-end Widget the the capture box I showed so that the user can actually interact with the protocol with their wallcoin app and generate that zero knowledge proof uh the the reason the user needs to do this through the world coin app is because the secret is stored in the user's device is completely self-custodial and the app needs to generate the zero knowledge proof the other piece is the world coin Apple gen will will generate the zero knowledge proof give it back to your application and now your application needs to verify that the zero knowledge proof is actually valid so to do that uh the application needs to call rsmr our contract with the proof and say like is this user actually verified or not um as an alternative if you're not building something that's on chain we have an API that abstracts all of this and you can simply do a traditional rest API request then we'll call the smart contract for you the other important piece to keep in mind is aside from the serial knowledge proof the welcome app will give you something called another fire hash so what's cool about this nullifier hash is it's essentially a unique user identifier with the the um asterisk that you'll get a different nullifier hash for each application that's how we ensure privacy so if I if I claim um the My mesh airdrop and I get user id1 if I then go and and mint an nft with uh another project I'll get user id2 so there's never a way to trace users together but you as developers building an application can always use this ID to ensure a unique person is doing something only once so um if your application requires that someone only does an action once you need to store this nullifier and compare it whenever a user is executing whatever action is it is that you need um so all of this complexity can be very easily abstracted so uh you integrate the the widget uh is uh quite simple well I'll show the code in a second um when the user scans it they'll see something like this in the world coin app is as simple as clicking verify and that will generate the zero knowledge proof um to to load the widget you simply install this npm package load it um as it's shown there as you see you'll need to provide two things one is the action ID the other one is the signal the action ID you get from the Welcome developer portal is quite simple developer.walkin.org there's links everywhere I'll I'll share all the links in a slide in a sec and the signal is this additional security measure that you can make part of the of the zero knowledge proof uh to prevent tampering with the proof so for instance let's say you want to do an airdrop and you want to make sure that uh you cannot tamper with the proof so that another person receives the airdrop if if I set the wallet address of the recipient as the signal and then I'm a malicious user who intercepts your serial knowledge proof and change it to my address the proof will become invalid so not all applications require this signal it depends on your use case and it can be any arbitrary string the protection is giving you is that it hasn't been changed it it's basically an authentication by the user who's generating signal knowledge proof and then once once you receive it you'll receive um uh this proof along with the nullifier hash and you can easily verify it by just calling our API very simple um post request or uh calling our smart contract um there's a bunch of use cases enabled by civil resistance uh here's only a few we have some other uh ideas in in our docs if uh if you're looking for inspiration um but you know there's a lot of possibilities for civil resistance uh so here uh you can go into id.walcom.org uh you'll find there all the documentation for all the libraries uh API uh protocol details um if your particularly curious about the the zero knowledge part and the math there's some details on that too um you can also uh join us on Discord uh we'll be very active during the weekend in both the world the worldcoin Discord and it Global Discord so if you have any questions if uh you get stuck somewhere feel free to Ping us there um we do want to give a huge shout out to these open source projects that make the protocol possible so semaphore is a implementation of zero knowledge circuit so it it's what powers World ID and won't let us bring this layer of privacy to to the protocol um hovel um we use for uh the the worldcoin token and wallet connect which is a power is a connection between the world Coin App and the application so when when you actually are building on this you'll see the QR code and all of that it won't look like while I connect but under the hood it's using wallet connect um and then uh where where we are right now is uh we launched uh this protocol this Alpha Protocol about um six seven months ago uh we've been iterating it's uh very low-key uh we we've now built uh different applications Integrations you can see um uh World coin and lens integration if you have a lens profile you can actually get it verified with your role ID you'll get a very nice batch in Leinster uh and we'll know that your profile belongs to an actual person we have a pull-up integration so make sure that you know a person's only claiming a pop-up once it's pretty cool to prevent uh farming of pull-ups and things like that and we are now working on making the protocol multi-chain as I mentioned it's currently on polygon if you're using the protocol on staging or testing mode it'll be on Mumbai so it shows uh whether to use production or staging depending on whether you're building on on Main Poly on mainnet or Mumbai if you're building outside of the polygon ecosystem you can use the API um for now um the other thing I forgot to mention is um if uh you wanna you wanna test um your applications I'd recommend going to simulate.worldcoin.org uh it's it will basically let you generate any number of random identities on the staging Network and let you uh verify them as if you've gone to an ore because obviously if you test in production uh if you come to an or sign up and then test in production you're only going to be able to do it once so um yeah don't I try to use staging um so uh just to summarize World ID is a product a protocol that solves for civil resistance at scale uh private open source open protocol completely self-custody for the user uh and very easy to use and implement if you have uh any questions here's the main resource link that you should take a look at here you'll find all the documentation and other information around this particular hackathon information about the prices um anything relevant for for this hackathon you can find here the other thing worth mentioning is for those of you building and submitting a project for the world coin track be very short to look at the details for a qualifying submission in particular uh the project needs to be integrated both on the front end and either the back end or the smart contract so be sure to do both the the reason we do that is if you only integrate this in the front end there's not really giving you any any protection at all it needs to be verified in a in a trusted environment otherwise it's uh it's uh it loses the value uh and finally uh we're hiring all around so if you're interested come uh talk to us or welcome.org you can find all of our um open positions there uh and that's it uh do we have any questions yes so sure sure answer is yes uh the protocol will incorporate being able to tie arbitrary data to your to this concept of a person and then being able to issue either full assertions or partial assertions you know the the the typical example of um I'm over 18 or I uh I'm a citizen of ex-country foreign yes so um the the we are actually very close to open sourcing all of the hardware around the orb uh the ORF has a bunch of security features to prevent tampering um the in essence the orb has a secure Enclave that has a private key if uh if there's tampering uh the the queue will get uh destroyed um yeah uh we we can get into more details uh offline if you want yes so that that's very much that uh something that um we are we're working on you have to you have to physically go to a North to get verified um we can say is one on on one hand we're exploring options uh other options to let you get uh a measure of civil resistance that won't be as complete as going to a North and then as a developer uh you can choose to rely on something less um effective the the other thing is um we we have a model where um we distribute this uh across the globe in a way that is not operated by us it's operated by entrepreneurs and you know um people that believe in the project and they they uh they get a benefit from um operating the orbs and but there's a whole bidding process to ensure optimal uh allocation and right now with about 20 or something of these we've signed up like 700 000 people across the globe over 20 countries so I'm confident we we can get the number up quickly yes sure um so I've full disclaimer I'm not fully aware of uh all the details uh of polygon ID as of uh late um however uh World ID today uh is focused on just providing this proof of personhood signal so it's International resistance uh you get uh this um very high Assurance of a unique person uh because of the Biometrics uh the polygon ID on the other hand is a more abstract concept around uh identity and attaching other types of signals yep yeah so this this uh public attributes that I'm talking about they're not part of the protocol yet um the way we're thinking about it is there's going to be some sort of commitment to those attributes public on chain and then the actual data will live somewhere else up to the up to the developer and the user so it could be self-custodial on your device it can be in a decentralized network like ceramic it can be on a private database that's going to be agnostic to to the protocol the protocol will care about the commitment to ensure certain properties around it any final questions I'm sorry can you repeat ah yeah uh so that is very much ongoing research as well uh in terms of how your Irish changes over time um for many for well for many reasons we we um for for different reasons we currently don't allow children under 18 years old to enroll uh and um uh yeah what um it's it's ongoing research yeah so you you can um the the best place to go for answers is Discord because uh we're we're always going to be there even even if we're not here so either welcome uh welcome Discord Discord GG slash World coin or if Global just look for the sponsor worldcoin Channel um and we have a booth here we'll be around for for uh as much as we can and you can uh just uh confine us all right thank you everyone foreign foreign oh all right we good okay hey can you guys hear me hey GM everybody um we're gonna make this pretty fun I'm gonna give you a brief overview of optimism so like everything that we're about um where obviously we're scaling ethereum but we're not just scaling ethereum's Tech we're scaling its values as well so unfortunately I can't edit the notes on the side so it's going to be this view um but hope everyone's having a nice day so before beginning I just want to talk a little bit about incentive structures like what are we doing here what is crypto right uh we live in a world of Perpetual personal incentives that are pretty individualistic it's passed down to us from society you know go to this college get this job do this thing retire 401K all that stuff and a lot of times these are harmful right like the environment's not doing great there's a lot of selfish motives in the world um but what crypto allows us to do very interestingly is reprogram some of these incentives that we've been taught our whole lives so there is a mysticism found in blockchains that we don't find in any other technology the superpower lies in the ability to reprogram incentive models that have been passed down um throughout Society right like so enter ethereum ethereum lets you program money money lets you program incentives and incentives lets you program novel social structures what this means is now anyone can program incentives right you don't have to be a king to make a new governance system you don't have to be chairman of the FED to make a new monetary policy you can be in the basement and do this um you don't have to be a Hollywood artist to get exposure for your artwork and get royalties and get paid well right so this also lines in with this idea of the unbundling of everything that I think we're seeing in societies currently so this is a great example of it in the form of the media right People magazine this was like the dominant thing back in the day of everyone would read People magazine this was a thing and then came the Kardashians the Kardashians like took over People magazine people were now following this family and I was like whoa okay great and then came Tick Tock influencers I was like whoa anyone can now create content and be seen and it's this idea of like the unbundling right like now any individual who has a mission who has like a unique thing they want to express in the world can't express in it can express it through crypto the similar thing can happen within Banks right you have like these large institutions that are doing certain things now some people who are friends in a basement can program structures that end up having billions of dollars in tvl um that people use for banking right it's like goes along the way of unbundling everything so I think we all know that like ethereum is the best city in the world right like everyone wants to be on ethereum everyone wants to go there spend time um but it can get crowded like when there's a lot of people in one spot you got traffic jams you know you get like a lot of fuss um how do we fix that enter optimism right so just like how big cities need skyscrapers and Subways to operate properly ethereum needs optimism right we are kind of providing the skyscrapers and the transport layer and everything for ethereum to scale in a way and make that City that I was mentioning here more livable but we don't just scale ethereum stuck we actually scale its values as well right like how do we do that through this thing called retroactive public goods funding so if you look at the fees that ethereum generates just today it generated five million dollars five million like that's a lot right um but where is this money going it's mainly it used to go to minors now it's going like validators Etc it's going to specific like people in a way but it's not necessarily going to the community as much as maybe we would like so with optimism this is optimism sequencer Revenue um you know just where I mean we're just starting out uh average of about thirty thousand dollars a day imagine what this can be as ethereum scales and as L2 scale for the future like this this will not just continue growing up in that trajectory right this is just the beginning a hundred percent of these fees that are generated daily go back towards the community goes back towards public goods so we've pioneered this model called retroactive public goods funding where we essentially like if you want to create a public good you want to do something for free you want to create educational content for the world you can do so and know that you'll get retroactively funded by optimism um one of the things is I think we live in a society that we're like if you want to do good you kind of have to be a financial murder like you want to go help the world you're going to have to be like Oh I'm not going to get paid as much as a banker or as an NBA superstar we think that's wrong I think I think we stand a chance doing what we do in this space to reprogram that model to reprogram that incentive um and we aim to do that by removing the opportunity cost of doing things that benefit the greater good through rpgf so now who decides where these fees go right like there's all these fees are going to get bigger we're going to scale more who decides it well around I think may we had our airdrop and we started our governance Collective so the governance system which has two houses gets to decide where these public goods profit where that Network Revenue showed earlier goes essentially so who gets retroactively funded for it right this is a little meme so you know initially just like profit motive solves everything donation funding okay that helps quadratic funding a bit better retroactive public good funding like let's go right so this is a real world example of this um let's say right now like you know I I want to plant trees like that's I want to my contribution to humanity is I want to go and plant trees now I walk over I see a VC I'm like hey VC can you give me five thousand dollars to plant some trees like you know it's for the good of the world the VC looks at me in the face and laughs at me right he's like why would I do that like you're not I'm there's no return on investment for me like why why would I do that that's the pessimistic world of today the optimistic world of tomorrow and today because we've already done this um is same thing now I want five thousand dollars to plant my trees I go to a VC and I say if I do a good job with this the optimism Collective is going to retroactively fund me for this now a VC is looking at this and being like that's an interesting model like yes I'll bet on you right like every investment of venture capitalist makes for example is like an investment in a person like oh maybe they'll succeed here they have a clear sign of an outcome where if they succeed they might get attractively funded so that's a real world example of like what rpgf can become and of course it's not just limited to planting trees like everything from building infrastructure to educational content to pretty much everything that's a open source public group so you know we fund public goods through network activity so as people use optimism as you deploy an optimism or do anything on our Network it goes to feed these fees then goes to this plot of retroactive funding then governance votes on where that funding goes so what's happening with the network like why would why do you why would you want to use our Network right like what what do you want to do um and what can optimism provide to you so for that um the state of Roll-Ups today so up and to the right obviously like everyone's heard of roll ups now it's it's growing a lot of folks are using roll ups right like I think we hit almost six wow six billion dollars in tvl across all l2s on ethereum so there's a lot of traction and obviously there's a lot of fees that are being generated as I explained before but you know it's cheap but maybe it's not cheap enough there'll still be some Ulta ones in the world that are like ah you know we're cheaper than you and all that um second is like there's a little more decentralization needed right with a sequencer with clients Etc and lastly like some people might ask like what else like what else can a roll-up do um except for just scaling this and making it cheaper and faster and all of that so to address the first one we do a little fee reduction so we actually live in a world where we're planning on roll-up fees going to zero and we're going to achieve that through protodank shorting so it's called eip4844 and Liam who's over there and Proto Lambda and a bunch of Mophie and a bunch of people from the op Labs client team have been working on this and trying to do this for everybody because eip4844 actually benefits every single roll up out there um we we strongly believe that a rising tide lifts all boats so the AP 4844 and a quick explanation of that um which I'm going to try to do the best I don't have my notes on here so um is a toilet metaphor right so how can you think about what eip4844 is or EIP 4844 so let's say you're like in line for at a crowded festival at a like and you're going to the Ben's bathroom right the toilet only has stalls so regardless if you're like peeing or pooping um you have to use the stall right obviously a number one takes less time than number two so it's not hyper efficient for everyone to be doing using the same stall um you can solve this pollution you can solve this problem by adding a urinal and essentially urinals are only used by people who need to pee at least I hope so um now the demand now the toilet has two separate lines you can go to right so what does this example actually mean well in this case the toilet is ethereum the toilet stalls are blocks poops or transactions p is data p and a stall is call data and urinals are blobs so and the lines are the fee market so the upgrade is eip4844 it's just essentially making it more efficient right like not having everyone go to the same line but have certain people go to lines that are more efficient for them so that was a Twitter thread written by Ray Sue if um it's pretty good at analogy there so okay and second thing we're doing so this is about multi-client architecture we are launching Bedrock soon which essentially is like a pragmatic way for us to start decentralizing um what Bedrock encompasses is theoretically optimal call data submission consensus and execution client separation a microscopic client difference only 500 lines of code faster faster peer-to-peer networking and all of this is basically intended with our idea to not just become evm equivalent which we already are but to become ethereum equivalent at the very core this also allows us to easily plug in eip4844 when it's ready which should be soon as well it also has smarter sync sequencing and state submission so Bedrock is coming out soon and if you ever want to like read up more on it we have multiple articles multiple Twitter threads that explain a bunch as always our code is always open source we build everything openly so um you can access that lastly I think this is something I'm very very stoked about is the idea of the op stack so the optimism code base has been forked multiple times um there's been a bunch of rollups that are actually like been using our code base and you know we're open source we're very much ready for that that's something that we will always be um but we realized when people forked our code base they started doing interesting things with it like they would mess around with da layers they'd add something else and it would be this like new custom solution using the original like stock that was forked so we took a long hard look at that and we're like okay like what if we make that easier like what if we make it even easier for someone to do that and then came the birth of the op stack so I think one way to think about it and this tweet kind of explains it is you can basically deploy a roll-up however you wish with fully customizable features right like you want to I don't know you want a ZK roll up that uses like Celestia for a data availability layer you can go and do that you want extra throughput you want to use another DNA layer you can go and do that um it's very we're making it as easy to deploy a rollup as plugging in apis in web2 so you wanted like bits and pieces you want to do Bitcoin roll up like whatever it is you can actually experiment and that's where the op stack enables you to do it's like we're fully making it very very easy to run multiple experiments on the future of Roll-Ups and whatever you want to create with that comes the idea of the super chain so let's say like you know op stock is there we have a bunch of different op chains people are building crazy sorts of Roll-Ups and now you want to connect them now you're like okay like I want all this to feed into one larger thing luckily because the way the op stack is structured because everyone's using the same stack is it's you can actually have a ton of composability so because this idea of shared sequencing where you have all these off chains they all use like the shared sequencing model you can basically connect all these options together into what we call the super chain um where this becomes interesting is basically the idea that the hardest thing right now to kind of deploy a roll up or anything in the space is you can do the tech you can deploy your own chain you can play on roll up but then you have to do business development right like you have to like try to get an Ave on board or you have to get like all these staffs on board and that takes a lot of time and that takes a lot of effort and a lot of times people just want to build cool stuff so you know how do you build cool stuff without having to worry about the whole like oh no like how do I do this negotiation how do I do this partnership the super chain kind of enables that because you can create this off chain however you want it's connected to all the other up chains it's connected to optimism mainnet um you want to do something that's on optimism mainnet you can make it really easy for like messages to pass through um and basically like interact with stuff that are on other chains so it literally makes you allows you to make really cool stuff that you've always wanted to do not have to worry too much about liquidity because everything's connected but that is a super chain and it's a work in progress I think when Bedrock is released this is going to be easier to actually use we do have one example of an opt-in of sorts that's already come out by the folks at lattice it was called opcraft it's essentially a full voxel game that's its own blockchain and it was built on Bedrock so literally like an entire game that's it's on blockchain it could have you know if you were to hack on it you can make like an amm that's like in a cave somewhere or something so that's just like one example I think the op stack and the super chain kind of enables multiple Avenues and we've kind of have released this thing um and we'll see what can get built on it but it's allowing for full composability it's allowing people to run extra experiments and connecting all of them together into one larger super chain so I think this is a question that comes around a lot as well it's like what is our path to decentralization so our path to decentralization larger sorry um you know 2023 we want to create a fault proof which proves L2 Bedrock blocks we also want to have a we want work towards decentralized sequencer selection fiop um then deploy bonded sequencer using single client fall proof with instant upgrade Keys sequencer auctions these are Works in progress like it's not I wouldn't say it's like hyper finalized but these are ways that we are currently might be thinking about it and then by 2024 deploy bonded sequencer using multi-client fall proof without instant upgrade keys and then we reach a world where we're a bit more decentralized and can look towards the future so to kind of summarize a few things here like what we're really aiming for is solving the blockchain trying dilemma and optimism is getting closer and closer towards being in that middle spot right there this is our ecosystem at this point um lots more lots more protocols being added every day and I think when we look at what I just mentioned with the op chains and the super chain at large will have a lot of different things as well um you know but like you want to bitcoin CK roll up different da layer like all of these things are possible and we're excited to see what you guys will build thank you I'm happy to take any questions right now yeah yeah so um we did a rpgf round we did a first one and don't remember the exact list but you know solidity um Aragon ether scan there's a bunch like a bunch of like public open source things that helped ethereum because like we're doing public goods to help both optimism and ethereum um yeah those are those in round one but cool yeah sorry um I can't quite speak on that right now but like yeah um currently it is a governance token that is use the power there is again like you know you have the network fees that I showed you back here um ethereum does like 5 million a day you know Roll-Ups are going to scale larger and larger the fees for our rollups are increasing pretty much every day um average of like 40K a day I think right now and the governance token basically helps allocate where this funding because all this all this fee Revenue goes in this pot of rpgf the token helps like decide where that funding goes retroactively for so long uh that's an interesting question I think are there get coin folks here we should have a conversation yeah I'll I'll keep you in the loop but yeah that'll be awesome do you guys have any uh crazy like off chain ideas like what's like what's like the craziest thing you can think of foreign I'm gonna leave it here for a little bit just in case you know it's gonna let these questions marinate a bit um yeah anything yeah sorry yeah great great question so I think a few things um I believe Nitro might have changed this but for the long for a really long time we were we were the only ebm equivalent roll up so you know we had the ovm before um and we were like okay like let's move this a little bit let's be as equivalent to ethereum as possible so we move towards evm equivalents which for any adopt developer just makes it a lot easier to deploy on optimism it's just like literally chain ID switching um so that's one I think the other thing is also the public goods funding route where you know all of our Network reviews will go back towards our community um the bet there is if you have a community where you continuously invest in its public infrastructure you'll basically have a place that's easier to build in that just has more structure has more Bedrock foundations that can supercharge the power like the apps of the future um that that's one of the main differences I'd say let's see yeah also like one one other thing that is different is because of Bedrock that's going to basically like surcharge a lot of these differences a lot more um because we allow for multiple clients that unlocks a whole series of use cases like you can have a ZK client on Bedrock basically as well yeah um I think we'll have to see yeah it's it's all really fresh right now does that come out yet okay I see yeah Liam's our CEO um yeah basically like what's the deal with uh ZK evm um I think I think the whole idea with like the op stack is that all these things are pretty plug and play um like if you want to have a ZK fell proof um whether that's with evm or whether that's with mips or risk or some other um Isa like it's kind of whatever you want there's multiple projects building these things like there's the Hermes one there's Scrolls there's risk zero doing it for risk um ZK Sync has like their own kind of custom thing like all these from my standpoint eventually these are going to be like solved it might take a few years until they get like a really performant one that anyone can run but um if it's not open source I think the community will like reject it so it'll have to be open source and the whole idea that we have from our approach is like this bill focus on the Community First focusing the governance focus on the funding distribution and then plug in the the proof system later um so from our standpoint uh we're not we basically think like whichever one of these ZK approaches wins as the one that we'll we'll use and we're probably going to start like finding ones that we want to like even start funding or supporting uh to start you know competing to be one of the options that people can use for their proof system so yeah I think it's kind of it's kind of weird historically like how we've ended up in this world where there's like optimistic Roll-Ups and DK Roll-Ups it's like this competitive thing in this L2 industry because fundamentally we're just building core infrastructure to scale ethereum and I think that it's like I think it's a mistake to kind of think of these things as competitive right now um over the long term it'll just detect not the whole point like this technology is going to commoditize and the interesting thing to do with the community on top um and what kind of Worlds you build with your own chain infrastructure which by the way is very interesting why Cosmos uh you know the Cosmos app chain thesis I think is very like worth revisiting um and I think there's probably a world where like on ethereum we start seeing way more app chains emerge so I would I'd also look into that as like if you're a hacker trying to figure out what to work on like you don't necessarily have to go into the app layer like there's still like a ton of stuff to work on lower lower down yeah I know it's always a long-winded answer um how will users get onto L2 so I think one big category is um the really obvious one which is like people that could not use ethereum that want to use ethereum but can't afford it that class of people I think they've either like just left or they went to like polygon or they maybe they went to binance Smart chain um and maybe they are using you know some application there but it's not like they're gonna like just like stay there that's like their favorite place in the world they're gonna like all the time shop around for where's the ecosystem going to the Future and so um I think that category of people will likely you know once it's clear like hey there's an alternative from these like less potentialized from these um from these centralized chains to use ethereum again then I think they might begin to flock over to optimism because they see this is like a better way to still have the sense of security and centralization and ethereum Community alignment that they want and so they'll maybe flock back in but you're thinking more with the technology um I think that's like again kind of all like at this point like the stand standard Playbook right every exchange should have a deposit and a withdrawal flow any on-ramp off ramp all over the world at some at this point there's all these companies they should just have an optimism integration um on our side you know there's like a whole Partnerships team just going all over the place like making sure we have all those Integrations um but I think a lot of those are just like existing crypto users the more interesting thing is you know if we actually have the ability to say hey ethereum is cheap and uh it and it works the way you thought it did it's like less than a penny for anything then all of a sudden now ethereum the the product of ethereum which is what we're trying to effectively scale with optimism uh we'll be in the next next bull market particularly will be like super cheap and so any of those people that like went to ethereum and churned they can actually now like actually stick around and so it it could just be the net new audiences that come in the next bull market um and then what that is is a big open question but I think that's that's probably the more important one is where will the net users come from that's a good question um I think the answer so the question is how much money should you store on L1 versus on L2 um I think I would think of these as like tiers of uh temperature of your money like if your money is really cold like you're never going to touch it you just want it and you're like you want Ava USD you still want to keep it in one place like you know it's your savings account with your money under your mattress kind of situation then like probably you want to keep it on L1 because it's like nothing's going to change it's just a net kind of ossified almost system you're just like okay that's like you know with Bitcoin right it's like knocking the chain so you keep your money there you can feel pretty safe at night um on the l2s you want to probably have more of your money that you're going to use regularly right like it's more of a checking account it's more of a you know maybe once a week once a month you kind of use this money for some reason either you're uh leveraging something you're saving something you're spending it you're sending it then you know L2 should should kind of occupy more of the actual human usage so it might also divide up the users to be more like you have Bots and users and humans on L2 and then you have like large institutions and like uh you know Hardware Wallets on L1 that might be what happens but it's hard to tell um yeah there's a there's a few um one interesting one is four four four four which is kind of a history expiry basically it's more like it's more like the lack of a necessity for uh clients to store long-term history because for example right now if you're like the guest team or if you're our team also every time you up every time like there's some Evolution to ethereum that changes the way it works like you're not like upgrading your software deleting a bunch of the old code you have to like add new code and also maintain all the old codes so the guest team has to maintain all of the code from every previous hard fork and it all has to work perfectly um and that's an enormous amount of technical debt so 444 removes a huge amount of technical debt and the reason why that's important for l2s is that on l2s you are reusing the client software at least that's what we're doing and that's what arbitrim now is doing too um so you want that stuff to be minimal and simple and have the minimum possible technical debt um so that's a big one um another one is beamsync I don't know the number but beamsync is really interesting because it makes your uh well there's a lot of folks all of a sudden beams things really interesting because it enables you to um sync a node from a as a lazy from a lazy loading perspective so instead of like syncing lock by block or syncing with like merkelproofs or syncing um uh sort of like through many many proofs you sync uh as you execute so like you wanna you wanna run a transaction and your evm Trace reads gets to a point where it's like hey I don't have this data it'll then find other nodes that have the data and then sync it and the reason why that's important is that the way a fault proof works is that it's the exact same process where like you execute the code and all of a sudden you don't have the data so you need to get a Merkel proof to show that the data exists in some State Route so it makes the fault proof execution code look identical to the execution code period so again like it lowers the diff even more for writing an L2 which is against the whole philosophy that we have with the design um I want to mention one more um well one wonders really fast shout out I think is also a good hackathon kind of thing to think about is that eventually the evm is going to ossify and you're going to have kind of L2 evm right and so evm can be l2s can be an experimental ground for uh creating your own like version of the evm so you can imagine a world where there's like an optimism with account abstraction and you can experiment with a kind of abstraction on an L2 because you can actually get the whole ecosystem of the technology around the EIP like the developer tooling the Geth changes the solidity changes and so on the wallet changes all working on a mainnet production roll up before it's on L1 so you know L2 evm and like the evolution of the EIP process in general is also like a really important category for people to think about is there another Workshop sorry okay oh it's polygon all right go polygon all right thanks everyone right are you guys doing today good that was not excited at like whatsoever how are you guys doing today all right a little bit better all right I can work with that so thank you all for coming to my workshop we're gonna be talking about on-chain verified credentials with polygon ID um a little bit about me hi I'm Rahat I'm the lead developer relations engineer over at polygon previously been front-end engineer solid engineer I've done some Anonymous work for various nft rugs I never said that out loud um Indie hacker web 3 Enthusiast done some like failed startups in the past so I can tell you everything that went wrong I cannot tell you how to succeed a few places you can find me on Twitter LinkedIn GitHub Etc uh Brian now we're gonna play a game um this image is a claim the claim is that I am a pixelated Punk can you verify that these two images are the same yes or no yes am I am I a pixelated Punk that's not the answer I was looking for yes okay cool so congratulations you just participated in an IRL version of polygon ID what what what the hell was that right what does that actually mean before we get into that a little bit of an introduction onto what polygon ID actually is so it's a blockchain native identity system with programmable privacy that empowers people enables creation of trusted interactions with web3 Services I just read a definition for you so that doesn't actually explain anything to you right um but what it does is it provides you a way of having Universal identity that you can take with you throughout your web 3 Journey right you verify something um at some point from some type of issuer an issuer could be some government facility a DMV issuing you a license someone giving you some credentials saying that you graduated from some college and you as a person are carry around that credential and at some point someone needs to verify that this credential exists right so that's kind of like the flow that I want you to remember as we go through this so this is called the triangle of trust so in this case um the the case that I showed you before here with the game that we played uh the triangle of a trust exists this way there's an issuer called pixel portraits shout out to pixel portraits if you want a NFC of yourself like that they do this um pixel portraits issued me an nft it is an image of my likeness as a pixelated Punk right the ID holder is me I am holding this nft and I asked all of you to compare this ID this um you know nft to myself and let me know if you think it actually is me or not right so the way that this is done through polygon ID is you have your issuer you that issuer issues some sort of claim can be like I said it can be some type of date of birth credential it can be something like a um you know diploma it can be are you the owner of X item or whatever it is that issuer gives you that credential and you never have to verify that you actually have that credential ever again because now you have different verifiers who just look at that credential and have some sort of trust with that issuer saying okay I know this issuer if this issuer says that this is no the actual um thing I believe it and that is done through ack proof so let's talk about what exactly we're going to be building for today so many social media platforms require you to be 13 years or older to use them Instagram I think Twitter requires that I don't know I don't know how it's enforced or if it is enforced but what we're going to do is we're going to leverage polygon ID to issue a soul bound nft based on a specific age credential so we're going to issue ourselves a claim so we're not going to use some like third party claim we're not going to like you know verify our age or anything we're just going to issue it to ourselves and that is that claim is going to contain our date of birth we're going to create a smart contract that mints a soul bound nft as long as our age is over 13. and there's gonna be a front end where anyone with a polygon ID wallet can claim this nft so all this is contingent upon you folks downloading the polygon ID Wallet app which is available on the App Store as well as Google Play Store there will be resources and links to download all of that when you start hacking it on yourselves but demo and code time so the first thing I wanted to show you was this polygon ID platform so I mentioned that we're going to be issuing the claims to ourselves so we're not going to go through some you know third-party issuer and have them like check our ID or do anything we're just going to do it ourselves just for the sake of this specific Workshop so this uh platform here uh again links will be sent out in Discord I will also tweet them out and this platform here is on the test net right now so what you can do once you've gone on to the platform is create a schema so I'm just going to create a sample schema here we're going to call it MI 13. or older and the attribute name will say is a kyc age credential you can name it whatever you want and there are specific data types that are supported right now through these issue issuing claims you can have a Boolean yes or no you can have a date so in this case we're going to be using a date or you can have a number so these are like different things you can think about when you're trying to issue specific claims so we're just going to use the date because I'm going to be looking at a birthday so if you want to put in the description this will be birth date or whatever um for each of these claims you can add an expiration date if you want to I'm not going to add one so I'm going to uncheck this but now you can either save your schema or save and offer the claim so we're going to go ahead and save and offer the claim so this claim has now been created now inside of this attribute for my kyc age credential I can select a date um I'm not going to use my real birthday but that's let's say I was born I need to be at least 13 right okay we'll just say 1990 February 7th okay I'm not going to put in an expiration date so this claim is just going to exist forever hit generate claim offer and this claim is going to be generated and now we have this link copy this link head over to it and you'll see that you received a claim offer from Rahat Rahat is me I am the person who issued this claim right so now you would download your polygon ID Wallet app you would scan this QR code and then within your polygon ID app you're going to have a specific credential that says you are this specific age right so this is again a test net version of you issuing yourself a claim to test out your um your polygon doubts cool so now that's the first part this is a claim so this is kind of like the same thing as pixel portraits giving me an nft of you know my pick my my punk right rather than a punk and now I'm getting a QR code with a claim that says I am whatever however old I am cool so now let's look at some smart contracts so all of these contracts are going to be shared and available for you to go through afterwards so I'll drop them into Discord as well as on Twitter so you'll be able to take a look at these but to get this set up to actually start using polygon ID with your smart contracts there's a couple things you need to do you're going to have a couple interfaces libraries and verifiers you don't have to write any of this code you can simply copy and paste from the repositories that are going to be shared with you but just like a quick thing if you just go through these you'll see that these are what's actually powering the ZK proofs and verifiers that are going to be looking at your credential and comparing them within the DAP um all of these again are boilerplate code that you can just copy and paste where we're going to actually focus on and create our own code is going to be in this ERC 721 verifier so you'll see from line 8 through 10 that I imported all of those libraries eventually what I'm hoping to do maybe later on is create like an npm package so you can just install and import those rather than copy and pasting them but that's as we're iterating and building that's what you got to do for now um so for this nft drop I have imported a couple things from open Zeppelin first is going to be the ER 7 erc721 URI storage just to make it easy to set the URI I'm importing counters for the um ID of the nft itself strings which is a really cool utility that I'm going to use to convert numbers of strings which I'll show you in a bit base64 which is going to be helpful for actually creating on-chain nfts so everything that we do here is going to be completely on chain no storage will be used off-chin so let's take a look at the contract itself it's an ERC 721 verifier you can call it whatever you want but it inherits everything from the erc721 URI storage as well as the zkp verifier there's a couple of variables here this is really just keeping track of the addresses that have already minted and making sure that people only mint once I'm using strings which I imported from open Zeppelin for unsigned integers which basically gives all of my unsigned integers the power to become strings um counters which will be for my token IDs Constructor is just going to deploy the erc721 but now we get into the cool part before proof submit this is just some boilerplate code but what before proof submit is going to do is going to check that the challenge input of the proof is equal to the message that's sender so we want to make sure the person who is actually trying to generate this proof that is trying to perform this action is the person who owns this specific proof so that's what this is taken care of after proof submit is where the actual magic happens uh we first check to make sure that this proof has not been submitted before they've only done it once and then inside of this if statement we actually execute the token mint so I'm just incrementing um the token mint right away uh the token ID right away the token ID from counter generally starts at zero I just like starting at one so I increment it I get the current token ID and then I call Safe mint with message.sender as well as the new Item ID and then I set the token URI using the item ID and this get token URI function that I'm going to show you in a bit here next part this is what makes this token a sold out token this before token transfer is going to override the erc721 before token transfer and prevent you from ever actually being able to transfer this token because your age is your own age and not someone else's do not verify your age for someone else that is a frowned upon action two more functions here um generating the SVG for the token as well as getting the actual token URI so I'll just go through this real quick for generating the SVG we just have this large SVG code that is going to be encoded and returned as a string and converted to a data image URL all it is is just like a black square that says you are over 18 I mean over 13. um and I'm using the base64 encode to encode all of that together finally the actual get token URI which is going to take your metadata so this is the metadata that would appear on your nft so right now I'm just giving it a name description in the image the name is just going to be 13 check I'm sorry I'm really bad at naming things and the actual token ID so this is why I brought in the strings package it gives you this like a nice little tostring utility um description verified credential of age over 13 and then the image which is just going to be this generate SVG for token which returns a string cool so this is this part here is nothing specific to polygon ID this is simply for minting and on chain uh Soul bound nft um nothing special going on there cool so now we've got this ERC 721 kind of written off for us there's two scripts in here that are going to be super super important first of all deploying your contract making sure you deploy it nothing nothing special here I'm just taking my um you know um contract deploying it on safaricon the next part is going to be this set request over here so this is another thing that you'll be able to copy and paste most of this is boilerplate code but there's a couple key things that you can change depending on your use case so the first thing is going to be your the address where your contract was actually deployed so this is my address that I deployed earlier and the actual query that you want to do and you want to check for so the query that I want to check for here is to make sure that the person who supplies their date of birth that this date of birth is less than um or before uh January 1st 2009 I think I did the math correctly that should make you 13. um but if it's not just pretend it is um and you can take a look at this link here which will show you the ZK query language which is going to help you actually set up this query but this operator here with the number two I believe it means less than so it's going to check if like you're less than your date of birth is less than this so you have your issuer that gave you that credential this query is what's going to check that credential and make sure that you're 13 or older so we've got that so you run both of those scripts great everything is now on the on the blockchain let's take a look at a front end that actually implements this have a little code sandbox here cool Wi-Fi all right so this is a very basic react application that I forked from my friend Steph who did a version of this in Bogota but here what we're going to do is claim our soul bound token on polygon Mumbai all you have to do is make sure you have your polygon ID wallet that you issued yourself a claim that has your date of birth then you scans so rather than me taking out my phone and doing this here and you not being able to see it I'm going to show you a video of me doing this earlier this is like okay come on Wi-Fi right so this is my polygon ID wallet uh I've opened it up I already have my claims I scan the QR code it generates a proof request so I hit continue it's going through creating the cryptographic proof and it wants to connect to a wallet so I'm going to connect it to my metamask wallet and through metamask I am just going to make sure that I connect to the actual website once I'm connected to the actual website it's going to fully generate the proof to make and do that check after it does that check the last thing it needs to do is actually mint the nft so we're going to go back to madamask which will just pop up and now actually approve the transaction to Mint the nft so I hit go ahead and confirm that transaction to Mint and once that has been minted pay some gas confirm and it'll finish up the process here so you'll see over here on my polygon scan link about seven hours ago I successfully minted this nft it was a success and this is the nft on openc right now so on openc test Nets you can check out 13 check number one um verify 13 or older uh you cannot transfer this to anyone else this is only available in the wallet this was that this was mentioned in but now what do I do with this right I have this specific nft now I've with a proof that I am 13 years of age or older great it's wonderful so now I can do really cool things with it token gated access to social apps built on lens you had you know the whole problem that I mentioned before with Instagram with Twitter do you want to keep sending them your date of birth over and over again on every single platform that you're you know on you're sharing your data across all of these platforms at times if they need to do some deeper you know verification maybe you're asked for an ID like why what is the need to go into all of that and share with them that data using this specific nft they don't need to know your date of birth they know that this was issued by polygon ID through an issuer that they trust in this case it was just us but if it was done through an issuer they trust then they know that they don't need access to your information they know that you own this nft you get access to the platform you never have to share your actual age with social media platforms ever again just a verification of the fact that you're old enough so you're only sharing information that they need to know and nothing more than that and you own your data and you're not actually going forward and sharing all of it so I wanted to make sure you have some additional resources this is you know a new thing A New Concept to kind of like learn these will also be put into the Discord um so first definitely check out Steph's original polygon ID Workshop from Bogota she's here and you can definitely dive a little bit deeper into that as well there are two GitHub repos from Steph and one of our teammates many both of those go into using this with erc20 tokens as well as another example with nfts Manny's um GitHub also lists like some like potential error messages common things that you might run into while you're going through and building all of this so definitely take a look at that and the last thing will be the polygon ID docs and tutorials that you definitely want to go through so while going through this I remember I forgot to actually go over one thing so we're going to go back to the front end just so you're aware of that what that one thing is very vital thing for you to actually do this uh so let's go back where's Arc okay so how did I actually make this QR code work I never told you that part so um in this uh react application we're just using this QR code generator to generate a proof request which is just going to be a Json object with a bunch of information um it's going to be a bunch of it again it's going to be boilerplate code once you go to this link over here it'll tell you exactly what you need to fill out some of it is going to be information from the claim that you issued so you have to make sure you have that in there properly as well as the actual deployed contract address which I added up here and uses a variable down here but all of this information needs to be put into your QR code so you take this Json put it into your QR code and that's what's that's how this is generated you scan that with your polygon um ID wallet um it reads all of this information including the contract address as well as the type of credential that it needs to verify and that's what's going to kick off the whole process for doing the nft mint so all of that is going to be available on this link over here on the polygon ID GitHub which will go through the query language on how to create this specific query um throughout the weekend myself and Steph will also be here so we'll be able to help you with any further questions that you may have as well um but again these are some of the resources I will send them in the Discord um after this so that you have them and you don't have to take a picture um and like retype it or whatever I'll also send these slides recording of this will also be available if you did enjoy this Workshop please let us know we're at zero X polygon devs I'm also at Rahat codes and um there's a couple minutes left for questions anyone has yes yeah I mean ultimately the um security of your wallet is up to you um so that this is does not solve for that specific problem um there are cool things in the works like account abstraction and things like that that'll hopefully help with things like that so that might be a good way to combine polygon ID with like an account abstraction project yep um so right now um this is all on testnet on mainnet there is an implementation with the polygon down um and through the polygon down there's verification for like age credentials and things like that so that is possible um so as we have as we roll out and put this into um you know mainnet we'll be able to give you more information on that well yeah so in in this specific case I created claims myself um just like to do the test but um the claims would have to be coming from trusted issuers right so whoever is doing the verification has to trust this issuer so um if you're trying to go on to like a social media platform they might have specific issuers that they work with so they might say get yourself verified through this and if they say that you're good you're good right um so that kind of like falls into that triangle of trust yep yeah um so a lot of them will have to be um centralized just because of the nature of like what they're verifying like if they're verifying like your passport ID for like you know proof of personhood or verification of date of birth um that all exists on centralized servers so it has to be from a centralized um kind of like source of truth but um what we're doing here is like taking that verification and allowing you to kind of control where it goes and only share the information with like specific platforms that need it about Eastern walls um I would so the polygon ID wallet is really just for the holding your claims but the actual like transactions and everything that happens would happen in any wallet you choose so in the demo I showed it went to my metamask wallet um so that side of things the actual transactions will be with whatever wallet you have the polygon and D wallet is really for holding your claims cool question here yeah something like that would definitely be a really good use case yeah a collection one question so that it allows yeah um I don't know the specifics around that but um I think that's a very good thing to be working on um I don't know like the road map for like how verifiers will work in the future yeah cool any other questions no they just need to trust that the issuer will do their job correctly yeah I mean um so I mean the example I showed here was like doing some like on chain verification um with that nft but you could you know bring in something like ens like this is a person verified to have some EMS credential or whatever um and bring that as like a claim um so that as we kind of like build out the um issuer side of things um these are different use cases you could potentially bring in cool well um thank you all for coming out today um we'll be around for any further questions we also have like exclusive hoodies since you stayed all the way till the end if you want to grab some yeah we have them outside I lied and everywhere thank you how are we doing with time did you say we're a bit behind okay sure all right we'll kick this off cool well welcome everybody uh this is the scale uh Workshop and uh today I'll be speaking uh John Frost um I'm the solutions engineer um I run the validators uh help with the DAP integration and partner Integrations part of this presentation is also going to be with Sawyer who's over there to the left um he's part of the scale team he's a software engineer and in the room we've also got some scale team members so maybe you guys can put your hands up and I'm gonna quickly go around so I've got Jack we've got Jace Nicole Fabio I'm sorry if someone's behind that lad because I can't see you there's Connor and yeah so that if you guys have any questions uh by all means come out come to speak to any of the team members or go to the the booth as well um straight after this we actually have a lightning talk from well actually no 30 minutes after this we've got a lightning talk from Jack so I don't want to steal his Thunder on scale and its overview but essentially scale is the proof of stake decentralized infrastructure platform that is evm compatible there's a lot of key features um like zero gas fees it's very modular it's very flexible um and so forth but the agenda we're deciding upon what we're going to discuss today and I just wanted to Showcase a couple of things the title is how to leverage scale tools to build zero gas fee dapps what I wanted to do is just showcase how easy it is to Mint and Deploy nfts on the scale chain so just do a deploy and mint after that I'll showcase how you can actually put it up to the file storage we've got a GUI for that and just uploading the ones that I've minted and I've got some traits metaports that is essentially going from scale change to scale chain which is very new just released and the second part um is Sawyer where he'll talk about the S fuel station the skull chain UI dashboard which is also very new and we'll follow that up with q a so let's get to the good stuff as well uh we've got plenty of prizes here and if you're going to impress anyone you've got Jace and Connor who are the judges Jace loves coffee Connor espresso martini uh prizes we've got five thousand so that is for one dap um then we've got 8 000 for metaverse gaming nft prizes 2000 for partner so that can be the graph connects any of our partners in our ecosystem and then we've got five thousand uh for the prize pool which will be evenly divided among the teams but I just wanted to highlight some important links as you guys kind of like go through hacking and it's uh specifically on obviously scale we've got the hackathonscale.network that includes like the documentation some endpoints as fuel and fire storage uh scale space um that is essentially like developer docs that's just kind of our general website uh the blog and you've also got Discord where you can just reach out to us you've got GitHub so that's the scale Network so that's just the public groupers with a lot of readmies and then you've also got our stats page which is a lot of statistics and metrics um that keep going up which is awesome so let's kind of Kick this off so this is the demo that I wanted to Showcase today I'm going to close this presentation down and just showcase two things here so on the left we've got block Scout which is a block Explorer and on the right hand side we've got the repo that I actually created for this event and you guys can use it if you want to um the intended uses I've kind of written here is for this event um I'm sure we can use you can use it for other events but the project setup there's some requirements here you can clone the scale demo just npm packages setting the environment variables there creating a private key s fuel compiled deploy and then you're essentially just going to do the minting so it's a five-step process easy to get up and running for you so instead of making you guys watch me download all these packages and whatnot I've already kind of gone ahead and updated my EnV you can see here that I've already done the deployment of the address right here and just below it what I'm going to do is essentially just mince some tokens so what we'll do is I'll just run this and you can see and on the I'll bring up the Explorer on the left side and essentially you can see look at these transactions are coming through right here and what I've done is used MTM multi-transaction mode and essentially minted these um and you can see them in the block Explorer so that's the creation so I'm just going to refresh this and then essentially what it's doing here is you can actually see it's a refresh it again and then you can see there'll be essentially there's 31 here and um let me open this up a little bit more and it'll be on the blocks and then you essentially see the 100 that's there so you can see I just minted 100 tokens that's how easy it is and how fast it is to essentially deploy and mint some tokens on the actual minting I actually created some special traits you can add whatever you guys want to those um you know essentially use your own and one awesome thing that not many people know about scale and I've got it on the shirt here too is our file storage so you can upload any asset you want to the actual scale chain yourself this is um you know a simple kind of overview of file storage um and how it's you know decentralized um and you know it tells you about the space that you've got and it walks you through the the npm install but just on the right hand side you can see like how you can upload files delete files create directories and so forth so I did go ahead before and this is the GUI that we just released as well so you can go here you can essentially upload um files here and what I did is one of the nfts I minted is you just select it here and you can actually see this one there and then this is just essentially the traits and whatnot so I brought that up before and you can actually see hey that's the color that's the stamina and so forth so that was the second part of um where you know the second part of the uh talk and then I'm going into the third part which is the scale chain to scale chain and this is the metaport again this is something fresh and new that we've just released this is our staging uh chain staging environment as you can see staging V3 right here we've got the dog chain which is essentially the origin chain and then the cat chain which is the receiver essentially cloned there and you can like click on these you've got the Explorer you've got all the RPC All That Jazz you can see mtms enabled up here um and I'll go back here it's going to be exactly the same for the cat the receiver and you guys can go here um so metaport.demoscale nodes and you guys can play around with this we've got a lot of cool stuff on the left hand side here sandbox so that essentially just opens up the widget for you to play around with all this is is just an interface whereby you know your application and you can implement the the widget which I'll show you in a second onto your application but you've got different colors different you know whatever color you prefer there this one I'm keeping on the nft theme you can see ERC 721 1155 there but it didn't actually highlight these so this is skill chain to scale chain I'll click on these so you can just play around with these you can go to the sandbox at the top you can do the wrapped um eth there but yeah going back here for example I am going to move from dog chain to catch chain and you know you can do it back as well um but you can see there's the collection I've got seven um of uh out of 100 there if I do you know for example two I want to move it all that you what you can see on the right hand side is the widget so this automatically fills um the chains in here and then also the metals you can see this is token id1 token ID 2 token ID3 and the amount see I just put in two it automatically does two and then I just do the transfer and I sign for this confirm and then what we can do is I'll refresh this and what you can see it there right there so you can see two that was the token ID one so you can see that's transferred to scale chain and the awesome thing is here you can see the post incoming messages here and you can see the two and then one and if you want to you could just send it back um and essentially do the same process there but if you guys just want to play around with it use the sandbox and so forth lastly um I just wanted to highlight the repo for the metaport that you guys can use and um this is the hackathon scale.network that you guys can use here Jace did a great job of just updating this recently it just talks about deploying on scale using file storage and you just put in your endpoint there and your wallet and you can get S Fuel and reserve some space and Sawyer I don't want to steal your thunder this is essentially moving over to you with the S fuel station and I wanted to lastly just show you some awesome stats that we've got that's just refreshing here you can see the anyone can go to this it's not as if it's internal you can see the total transaction count the total gas fees and you know that's going back to their initial point where you know scal is gas gas free so um yeah to just recap you know what we did was we essentially deployed we minted some nfts we moved those nfts to file storage you could see it in the GUI and then you know we you saw the metaport where I was just moving the nfts between two different chains so I'll end it there on my half and then Sawyer will take it away with the rest of the community tools foreign a at the end and I'm going to invite Conor up to help with that as well all right everybody uh I am Sawyer uh as John mentioned I am part of uh the solutions engineering team with scale and I'm going to follow up on the amazing uh kind of technical pieces available to the scale Network and talk a little bit more about the tooling that's available and how you can use it to make amazing zero gas feed apps on scale so to start off user experience is key right so blockchain everybody knows whether you're a user or developer it's really complicated still a lot of people are doing amazing things to simplify that but ultimately sorry guys I just put the head on accident simple onboarding is a common trait in web 2. not so much for web3 anybody ever asked their parent or their grandmother to use metamask it's not so simple uh additionally web 2 whether it's you know the twitters or you know different you know gmails and stuff like that generally they're free to use right or at least they have a freemium option and lastly they use just common things to onboard whether it's email or text right you get your codes through things that everybody has or at least most people in the world have them web3 on the other hand most blockchains require constant payment just for usage right gas fees and and all sorts of things there just you're constantly getting chipped away out additionally well we have this bleeding ice technology crypto wallets are not really friendly to the average user and so what I'm going to talk about kind of throughout the rest of this is one of the the key components of scale which is uh not just the Tooling in general but more specifically s fuel so s fuel is as many of the scale people know one of the things I love because I've worked on it quite a bit and you can actually see that top left picture is the S fuel station that John alluded to earlier and it's kind of the precursor to S fuel so s fuel is uh not gas it's actually stands for scale fuel and it effectively represents the ability for any user to transact on any scale chain entirely for free they don't have to pay money and that's a really really big statement following that up with skills infinite scalability you effectively have the ability for any user anywhere in the world to use a scale chain entirely for free at any time as long as the service is there in the running scale that being said getting started with scale right is kind of similar to many other blockchains except we have some way cooler Tools in my opinion because I built a lot of them the file storage UI I did not build but the S fuel station and the scale chain UI I did build the original versions and I'm very proud of them and I'm going to talk a little bit about them here in Greater detail so the ice fuel station and I have a little video here we're gonna hopefully make this work maybe there we go okay it's running so you can see metamask or rainbow kit is popping up and I'm automatically connected just like that my wallet's connected I click fuel wallet which is that little black box my address is in the field and we should see a spinning wheel in a second there might be a little delay there we go and now I'm changing the theme because I love dark mode because I'm a developer but if there's light mode or if you like light mode it's there for you and at about there we go we can actually see I know it's a little bit small apologize but um what those that little green text on the bottom was was the list of chains that you actually just got filled up on with s fuel uh it was crypto blades uh scale Community chain uh the clips on Ft Hub Europa liquidity Hub and the Razer Network and so what this basically means is as a user right instead of having to go to coinbase or go through a Fiat on-ramp or binance whatever it may be purchase ethereum or some other token transfer it out to a wall and then get started with D5 or nft marketplaces you can just go to the S fuel station connect your wallet fill up and go start using one of these dapps that does not require you to effectively be blocked by a paywall because scale basically removes that that blocker right it's a community Tool uh which is really amazing it takes about three clicks fully open source and overall it's just kind of that first step in a really smooth onboarding experience to the scale Network that's kind of the user experience side now on the other side here sorry there we go is the scale chain UI right so clean user experience really important for a blockchain but on the flip side I'm a developer building on most blockchains is really really difficult most of the tools are either lacking in documentation they're Half Baked they don't work whatever it may be I won't lie scale chain UI is a little bit Half Baked I'm the one that built it it's currently undergoing an entire face lift which I'll show you some mock-ups in a second but um I'm going to use a couple analogies here to kind of explain why this tool is so important to the scale ecosystem uh scale chains you can have a lot of them you can technically have an infinite amount of them and they can all connect together and the cool part is they're actually effectively dap chains right so technically every company in the world could have their own scale chain if everybody want to use skill which would be awesome that being said not everybody is technically minded in blockchain or in scale technology right this second to be able to get going right away the scale chain UI takes all this complexity and basically abstracts a way for the scale chain owner or for the user that's in charge of setting up the chain for the company or for the Dapper for the project it does this by basically taking all the amazing smart contracts built by the core engineering team at scale and putting a nice GUI on top of them I've basically alluded it to web 3 Ops so for any of the engineers here devops I'm I hate devops not a fan uh it's basically the the devops for web3 uh it's kind of taking all that functionality of administering something and putting it right in your hands that being said the pictures are small on purpose it's really ugly I'm not a front-end developer but where it's going is somewhere more along the lines of this which still a little bit small but one of the product designers at scale was uh amazing helped kind of redesign this we took feedback from a whole slew of community members and over the course of the next couple months we're actually going to be basically rebuilding the entire thing from the ground up we're going to get more community members involved and what we're going to effectively do is build the best administrative kind of tool available so that anybody regardless of technical ability can come to the scale Network use this tool with their new CL chain that they just got spun up and Deploy on scale and a couple more pictures uh you guys can see multi-sig wallet multi-sig's really good for security right there will be a hole currently there is an abstraction for it but like I said not that pretty that's much nicer and then scale chain manager things like multi-transaction mode that uh John showed off earlier you can actually toggle that on and off doing it requires touching a smart contract in this case connect mask click a button so things like that can just be you know abstracted away much simpler and uh lastly just want to say thank you everybody it's a pleasure to speak and uh like I said these are you know Community tools that I'm showing off uh if you're a developer here this weekend and you're not really sure what to build instead of building a Dap try building a tool for the scale Network because there's plenty of stuff left to build thank you [Applause] all right uh I think it's q a time now uh so if anybody's got questions please feel free any machine learning application uh that is a good question for Connor anybody else absolutely so kind of a loaded question but uh to simplify uh effectively what scale is is a whole slew of evm compatible blockchains that are run entirely by their own set of validators there's not one validator that is run by the core team everything is run by external parties additionally what's really cool is the scale Network actually has smart contracts on the ethereum mainnet those smart contracts actually control which scale chains are effectively using which nodes and it automatically handles the security and the rotation and and things like that um and so that's kind of the scale Network in a nutshell it's infinitely scalable because ultimately with the external validator set as more validators come on right you can basically keep adding blockchains and because every blockchain is effectively its own blockchain it's not necessarily contingent on the throughput capability of another chain so let's say you know your buddy has a has an app that's doing 10 million transactions a day but you're only doing 500 your transaction not getting slowed down by by his chain because you're on your completely on separate chain so that's why you know infinitely scalable just keep adding chains if we need to uh kind of two sets of security pieces here I'll do my best to explain I'm definitely not the expert here but uh there is a huge chunk of security tied into uh the ethereum mainnet contracts from my understanding here uh additionally there's uh some amazing engineering uh stuff going on under the hood with the BLS encryption and kind of the scale consensus model with the external validators that uh effectively is another layer of security so the the side chains effectively have one layer of security but then the ethereum mainnet effectively acts as kind of an overarching model as well in case something did happen it's kind of the best way I can explain it uh level to support all those nodes or pool security model that ends up bouncing back or changes spun out and grows or tokens are deposited in the network with which so I guess like the question here is our games like not as many years so how do you guys handle starting and being able to make it because like it's uh you know yeah it is linear so if the network is running out of capacity and possible or going to change and incentivizes down there is a set of four nodes it creates more capacity we have more chance the networking program is changed phenomenal you know and that's why it happens some degree yeah what sort of computer power do you need for money labels could you use scale on an iot Network the specs I would need to look we've got it all written down if you're interested in me you know becoming a validator speak to the man directly in front of you and myself Hardware requirements that you're but yeah um so you mentioned there's no gasps there be a possibility than something and volume down we can do radiating and you know and feed us attacks for example like when I divided by demonstration like I did it in like different blocks like you can if you like you know you can definitely change that it's up to you in terms of like the rating 50 dollars we don't want users to be basically the that was part of the reason for the S fuel station design is the way the smart contracts behind that are running is they actually limit how much s fuel can be given to any one user so on top of the built-in rate limiting and security of the network they basically built a whole set of abstractions for the developer as well to try to basically limit the amount of s fuel a user has at any given time ultimately it's I mean you know it's technology someone might be able to get around it if they try hard enough but the way uh correct so a lot of a lot of different security measures everything kind of stacked together makes it a pretty pretty secure system anybody else yeah the benefit of becoming a validator and so right now the network is you welcome yeah so the validators are paid on in skl so that is different as fuel so essentially what I do is like a you know dap word you know work you know we're trying to have this self-serving model as well uh in the future but essentially what happens is you would pay validators scale chain which is essentially made up of 16 nodes in that situation and that would pay the validators so pretty much your briefing for computational resources so instead of paying as you go as as right now we're both having execute a smart contract you're paying and that gets paid to the validator you're actually free paying for scale chain you're aggregating all that instead of Action level it's happening at a rental level from the developer earlier awesome questions yes anything else all right then oh yeah go ahead uh I don't think it's you need less nodes you need less resources right so uh the cool part about the scale Network as a whole right now is uh recently there's uh The Hub model has been introduced The Hub model is basically a shared dap chain so instead of you know you only need five percent of a scale chain you have a whole scale chain we're wasting 95 of those resources as a whole you can take five percent of a shared chain which is a hub so right now there's four hubs planned uh the Europa Hub which is live which is liquidity Hub uh the Calypso nft Hub which the chain is live and it's kind of been moving and pieces are coming together uh the nebula gaming Hub which is on the way in the scale Community Hub and so let's say you build a Dap this weekend you want to deploy it and you fit into one of the three kind of areas or you're a bit more General but you don't really need all those resources you can say hey I want to go on a hub and you have your your sliver of the resources awesome uh well there's nothing else uh thank you everybody so much and uh all the scale members and myself will be here all weekend and please come up if you have any questions [Applause] 
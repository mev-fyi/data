hey everybody welcome to the textile introduction to the file coin bridge workshop uh here we have carson from textile and he's gonna be running it for you guys if you guys have any questions just shoot them into the chat and then we have someone from textile who's going to be answering those questions live for you okay carson um you can go ahead and get started cool all right thanks a lot for uh having me we this is our second hackfest uh event um always a pretty good time when youth global is involved so uh pretty happy to be here um i'm going to try to blast through this pretty quick um it's something that we're our whole team is pretty excited about um and i'm gonna try and do something i've never done bef well i've done it before but it usually fails so let's see if it goes smoothly this time i'm gonna try and do a live coding session uh towards the end of this so let's let's see how that goes anyway uh i'm carson and i'm from the team at textile uh we've been around the d-web space for a good couple years now um we've worked on uh you know projects you may have heard of like our threads db peer to peer database our buckets blob stores a bunch of privacy tools but these days are pretty heavily focused on onboarding data to the file coin network and in particular doing a lot of a lot more cross data sourcing and stuff like that so today i'm pretty excited to introduce you to some new tech that we've been developing kind of uh kind of in stealth mode for a little while um that's really designed around bringing filecoin to other blockchains just bringing them together and bridging those systems so uh as i mentioned it's time permitting i'm going to try and do a live coding demo and we'll hopefully build a real working app just to show you kind of how easy and awesome this uh this stuff is so you know usual introductory slides you know for quite a few years now a lot of apps built on blockchains have this sort of data storage dilemma that they have to deal with right you can't store the data on chain because you know it's millions of dollars for your average large app gigabytes um size storage so you end up having to think about storing things off chain and off chain data can end up being pretty fragile and often ends up being a centralized point of failure for your application um so how did how do we deal with this right and a lot of developers uh use ipfs that sort of emerge as a de facto solution for a lot of blockchain storage things so this takes advantage of content addressing to allow for sort of permanent immutable references to stuff off chain that you can stick on chain and this is kind of turns out to be a pretty awesome superpower because this content addressable storage makes is is a perfect fit for you know immutable blockchains here's this thing it looks like this and it's stored somewhere else but i'm going to keep a reference to it here on chain um but like the http protocols of today ipfs is really about data transfer and access so you still need someone to actually serve that content just like you still need someone to serve up a website um so the solution for this is a lot of people use things like pinning services or they just get their users to pin their own content or things like that so keeping it available on the network and with the advent of things like brave and other browsers embedding ipfs nodes in the browser for really popular content this is actually turning out to be pretty viable option um so you know the more popular bit of content is the more folks provide it to the network the more likely it'll stick around but it turns out my spongebob fan art nft images are not quite as popular as i had initially anticipated um and so if i want to keep those around i need some way to ensure that my images are going to be available over the longer term and so i can i can turn to pending services if i want um but this kind of relies on me trusting someone to to take care of things for me so enter filecoin uh filecoin builds on the content addressing of ipl ipfs but it adds longer term data persistence using actual cryptoeconomic incentives so clients can propose deals with miners miners promise to store the data and they're penalized if they don't and they're rewarded if they do um and so we're actually now about to cross something like seven exabytes of storage capacity for filecoin so you know you can actually imagine like a future where apps or smart contracts on any blockchain actually use filecoin to solve this persistence thing in a permissionless decentralized and incentivized way so cool that's a great uh problem solved but we're not quite there yet so the process of storing verifying and unsealing this is kind of like how you prove that the data is on uh it's stored on file coin is pretty computationally intensive uh and expensive and it can take a while because it's a pretty complicated and expensive and intensive thing to do makes sense so the other and the other end of it is miners that are proving this data on file coin are businesses um and so they want to optimize the types of deals that they're accepting right they generally don't want lots of little bits of data they want to store large data to fill up their their storage quotas and i'm just seeing andrew's corrected me we're actually over nine exabytes of data so my numbers are old um so enter bridges that's what i'm going to talk about today uh bridges are shaping up and designed to be this powerful open source protocol or concept for providing permissionless storage to filecoin and the filecoin uh approvable storage blockchain to blockchain users and applications in their native token okay so this is kind of a pretty cool thing where you can imagine building an app that needs off-chain storage and you don't want to have to you know have your users hold filecoin or something like that you want them to be able to store data using your native app token so let's just do that um so from a high level way bridges work is there's basically a native on-chain component which are smart contracts that provide mediated access to a network of off-chain storage providers and these providers can handle things like compiling batching and deal making with the filecoin network and the way that they do that is not necessarily specifically specified but we can if there's questions i can tell you how that happens um and then along the way the data is actually cached in a highly available ipfs layer so while the deal and sealing and all the expensive file coin stuff is happening um you still get access to your data so that's what what that means is apps that are using the system are um and users and developers they get the sort of like fast on-chain content addressable data that they already have while the slower provable incentivized storage is making its way onto the file cloud chain and then the providers also provide can provide things like indexing and you know cid mapping and all sorts of uh powerful features um so the best part about this is uh this magical bridge to the file coin network it's already real it really does work um it's already running on near test net and so i'm going to show you just how magical this is in a sec um but even better still we're building the same magical bridge for the ethereum and polygon ecosystems and so uh between you and me we're going to make this available for the hack fs uh hackers if you want to start pushing data directly from your ethereum or polygon dapps and pushing it off to fileclin get in touch in our discord channel tweet at me you know send pigeons whatever you want we'll get you sorted and you can start playing around with this system um so if you're interested in being one of the first to test this out yeah do do get in touch um okay so i'm going to do a demo uh i don't usually do this but i'm gonna try and do it live obviously i've also you know martha stewart myself and i got like pre-baked stuff ready to pull out of the oven if uh if time starts to get tight um but we'll see this might work if it does you'll be super impressed and if it doesn't uh you'll still be impressed because i tried right so there we go so it's demo time all right so i might end up not looking directly at you as we do this but i'm going to pull this off screen and i'm going to start making something so what we're going to do hopefully everybody can see that okay um and what we're going to do is make a create a basic create react app okay so i'm in my little uh workshop hack fs folder here and right now i have the completed one in case everything goes terribly wrong i can just open that folder but for now what i'm going to do is i'm going to npx create react app let's call it bridge demo without the complete i'm gonna use npm and i'm going to do it in typescript because that's the right thing to do okay uh type safety is something we all need to keep in mind so while that's happening um i'm going to talk a little bit about what's going to go on so um we really only need two extra packages while we're doing this so we're going to need the near api js sdk because we're going to be communicating with the near blockchain and we're going to need textiles near storage sdk um at textile slash near storage and i've pinned it to two specific versions just so that i know that this thing is actually going to work but in general you should just be safe with the latest versions of most things um so we're going to install those things and then that's pretty much all we need everything else is going to be sort of like default react type stuff and default react type interactions so if you are familiar with react nothing else should be particularly wild or crazy so i'm just going to bring us up to the top see the bridge demo here and we're in there we got all the normal react stuff i'm going to move this over so everybody can see that a bit better there we go um okay and so i'm going to npm install near api js and the version is that one and i'm also going to install the textiles near storage sdk and we do uh for some reason our version is much bigger than the new api version probably because i'm pretty crazy with the semver stuff okay so there we go we've installed the things we need and i'm going to use vs code to edit here because that's also the right thing to do um if you want to do something different that's okay too so here we go we've got our little app window open here um and let's we're gonna just we're gonna dig right in um so first i'm going to do the pretty much the only thing you really need is that big enough for everybody um yeah i can make it a little bit bigger maybe okay good okay cool so yeah so we really only need a few extra imports to make this this app us you know uh a d a d app so i'm gonna copy and paste that so we've got a couple of things the connect method and some types from near api js and uh we're just going to import init from textile near storage and you know i'm going to go i'm going to i'm going to keep it you know fast and loose with the different quote types you'll just have to uh bear with me on that one okay so that that's that's pretty much all we need to import to make this magical thing happen and then we've got a couple of boilerplate uh you type things to just get the app up and going um so these can go right under our imports so normally if you're doing a near app you might have like a config like a local config thing yeah that's a good a good thing to mention andrew we're doing this all in here um uh anyway normally you'd have a config i'm just gonna hard code it here to keep things moving quickly and this is the uh contract that we're going to interact with on the near test net called filecoin bridge very very clever name um and this bit here is pretty much just standard near that stuff so we're just going to initialize a connection by connecting uh by using the near connect method or a function where it's going to return us an object and we're going to use a local key store in browser key storage just to keep things simple so this is sort of like mirrors near has a pretty nice default in browser wallet so we'll do that we'll get a reference to the wallet and then all we're going to do is initialize our our file coin storage sdk by passing in the account that we want to interact with and the contract id you can actually leave that out and use the default if you want and uh then we've got a connection to the api and everything else is pretty much just going to involve wiring all of these things up so this is an async thing so now what i'm going to do is i'm going to init connection here and then i'm going to just set up my app um and uh because i'm getting my options in here i'm just gonna pass these into my app now typescript is going to complain because my app is not expecting these objects um so we'll go and fix that and pass in the props so that we can start doing stuff with it um so i don't know first thing first we don't need tests we're going to just do it right okay so no to test required um maybe i'm also going to just change the uh change the css a little bit to like simplify things um so we will just leave that we don't need any logos everybody be so impressed with our app that they'll just instantly recognize it um we got that and maybe and then i happen to know that i'm gonna want this later so i always just do things correctly the first time as i'm going along um i recommend it if you can do that it's the best way to do it um but just kidding uh so next step we're going to um we're going to jump into app.t s t s x and we're just going to clear it all out pretty much and don't need any special thing there we'll call this um our demo app perhaps um and now we just got to add a some imports so we're going to import wallet connection from near api js and we're going to import these are just for type this is just for typescript actually storage uh we'll define some props oops uh api is going to be api and wallet is going to be a wallet connection so basically we just need two components right we need the thing from textile and the thing from near that's pretty much it and then in our app here we're just going to grab references to the wallet from the api okay uh and then because we have it i'm going to use it while it but if our wallet is signed in we will display something intelligent like a little div paragraph which is the wallet account id and uh you know you can imagine some similar types of interactions with like you know if you're using ether's gis or something like that to interact with the ethereum stuff um anyway so there we go uh we got some csx css that's working so i think we can just let's see if this just works we're just gonna start the app yeah type script makes this all a little bit more serious looking but at the end of the day it's just just types but i probably wouldn't be able to pull this off without that type checking okay so here's our app it's running here now i actually have already logged in so here's our demo app and it's displaying my account id called init.testnet because we are in it here people um and so that's pretty cool if you're following along at home you may not not have already logged in so yours might just say like undefined or nothing um just blank so that's okay too um okay so now we might as well make it so we can log in and out and so here's where i'm going to fast forward a little bit um and just in here create a new component which i'll call connect and uh i'm just gonna like copy and paste a bunch of stuff and again typescript makes this look more complicated than it really is but basically we're just getting some references to uh the our wallet and textile the near storage sdk provides a like helper function to log into accounts same deal on the um if you're working with something like um ethers.js it'll be a similar setup and so all this is is a form a div that if you're signed in displays a sign out button and if you're not display the sign in button that's pretty much it so we'll jump back into app um i'm moving super fast so that you think what i'm doing is fancy um but it's really pretty pretty straightforward i also should mention that um a more fleshed out version of this demo app is available on our github and i'll provide a link for that later so for folks who want to kind of play around with it afterwards you can totally do that so i'm going to just uh create a reference to our i'm actually just going to connect um or add this connect component to our main app and connect it to our wallet and i've just hit control or command s and now we have our demo app it's updated over here and i can sign out and i can sign in so there we go and i can allow that sort of thing to happen and the app will um dump me back in and so that's like a near app pretty much done now everything is up to us to you know like hook up all of the actual um uh like actual file coin interactions um and so that's pretty sweet you know that's like one component and we're done uh for connecting to near so now what i'm gonna do is i'm gonna do the same thing one component to connect to the bridge system so i'm going to call this component deposit dot t s x and what i'm going to do is create a really simple another form um yeah here we go technically five minutes left well that's cool probably going to go a little bit over but trust me it'll be worth it people so i'm going to create another component or a component called deposit and this allows me to deposit funds into the smart contract to open up a storage session to the filecoin network all right and so again i'm going to add this import deposit from it and i'm gonna stick it in here oops um and again we need a reference to the api so we'll just do that and boom and boom okay cool so our app is updated um and what this will allow me to do is to deposit some funds into this uh on-chain component that opens up a storage session so it's gonna request a quarter near i'm gonna say sure why not carson said i should do this so i should just do it um and then uh we'll just it dumps us back here if i click release now oops um oh i don't have a oh i've used a account with not enough balance anyway that's okay let's see how that works um you should probably have enough mirror in your wallet to actually do all of these interactions but anyway um so it'll actually say that i have some deposit remaining because my session's not over storage sessions last by default for 10 minutes so you can basically like upload files to filecoin um yeah everybody send me yeah everybody send me a bunch in here don't do that that's that's not advice please don't actually do that um anyway so there we go now we're interacting with the on chain component and i think we're pretty much out of time which is a bummer because i didn't show you how to upload um some actual data so i'm going to just like sneakily do that um yeah this is my classic scam as andrew said i'm just going to sneakily add one more component here called upload and see if i can just do it in like one minute i'm not gonna explain this uh until after i see it working so let's see import upload from okay cool so that kind of did work and uh so let's see if this is gonna work because now my wallet's out of uh funds now i'm gonna pick a gif here something oh my computer is frozen thank you andrew is explaining what's going on here it's going to be impressive right here we go i'm going to upload this i'm going to send it to filecoin let's see if my storage session okay cool all right so here's the ipfs cid that i got there if i click ok uh just pops it down here now just to show you that it's actually on ipfs ipfs.io slash idea slash this cid omg it's there um so that's pretty cool so it's available on ipfs but that's not that impressive so what you can also do is click the status button and i've just got it wired up to tell me it's batching right now so basically what's happened is it's fired this off to a storage provider the provider is going to batch that up with other smaller small files because that's a pretty tiny gif and then it's eventually going to compile a deal and send it off to filecoin and send it off by an auction to get it on the main chain um so that's pretty cool that's what you need to do uh to sit now i can just sit back and relax and wait for file coin reporting to tell me that my thing is on chain um and we're working on some upgrades to this to provide indexing via the graph and a bunch of other really awesome stuff but as andrew is mentioning in the chat here i can just carry on using this cid as is as if it's on ipfs because it is right now um and then it'll eventually also be on filecoin and i can i can upload other things here um and if our session had enough time eventually when i click release here it would uh give me back my funds and uh then we would be done so yeah there you go we'll jump back down to our original presentation i'll finish up here just tell everybody that if you like that um thank you very much we're hiring come join us and build more cool stuff on filecoin um if you're hacking um you know come hack with us build some build some cool things andrew's posting links to the demo uh or a more fleshed out version of this demo um in the chat there and you're good to go get in touch if you want to get on the ethereum bandwagon as well thank you thanks so much carson for this really great workshop um and thank you to um your company for sponsoring hackfest um if you guys want to continue talking to carson about this uh you can see check him out on our discord um and yeah that's pretty much it uh thank you guys so much for coming thank you for hosting and have a great day bye everybody thanks everybody 
foreign [Applause] [Music] side of blockchain applications uh and I'm going to you know talk about like how you can build you know very simplified tabs and uh that improves the uh you know user experience for your end users uh through you know different products or will get into it like the fee abstraction mechanisms or it can be like easy onboarding and you know even on the security side of things uh so for that we have a ultimate toolkit called bichonomy SDK so I'll talk a bit about it in the beginning and then what I'm going to do is I'll be doing a workshop uh which is you know like uh from going from a regular adapt to uh you know adapt that is using by Konami SDK uh using like you know some of the features like uh cashless or forward so uh we have been into this space for like three years and we initially started with uh you know realizing the usability problems in the space uh so for example uh first thing was like gasless transaction so that was the first product and we have been you know continuously building for Builders so that you can build like better applications or your users can have you know better experiences when they come to your platform and uh you know there are like a lot of adapts and they have like you know come to us and told us that you know it improved like x amount of uh you know interaction or in terms of user onboarding when they integrate the solutions of economy so uh I'll get into the products or even like maybe we can chat later uh so uh so enter in blockchain you know if it has to go on like next rapid growth cycle uh there are there are three things right like one is scalability one is usability and another is interoperability uh in terms of scalability we have made a very good progress uh but there are not many dabs which are you know like actually usable so there is still a lot of friction in terms of uh number of user interactions right and uh on the interoperability side as well uh you know there are like uh multiple chains which are siled and then you need to like uh Bridge your uh funds from one scene to another to do something on another chain so uh this is a typical use case where you know user wants to like uh for example I have some funds or some coin on let's say uh Avalanche and I want to go and buy an nft on polygon so I need to go through this entire process like like connecting the wallet and changing the RPC I need to if it's like completely new chain to my metamask or with your wallet then I need to like find out the details and uh first transaction I'm going to do is to get some native tokens because every interaction is like this you know checkpoint or where you're basically like it's a highway and you're paying taxes right like when we talk about cash and you need to manage uh you know the lot of other complexities as well in terms of you know failing transactions or bumping up the gas price uh whichever wallet you are on and that's just your one of the actions which uh could be like you know 10 action uh thing right like that you want to do as a user so you go and sign approve a transaction and then uh once you have the token that you want uh but that's still on like uh the chain uh which is let's say we started with Avalanche or polygon and then you need to bridge it to BNB and then you know change the RPC again then you need to have the native token for that chain and uh then let's say you are buying an nft uh so you do that transaction and then you take it to get some position so it's a very you know messed up you and it takes like about 10 to 15 minutes so bicar me SDK you can build like one click experiences that is cross chain and even on a particular chain uh within like seconds so uh I just want to play a video I think that speaks better uh let me know if you guys can hear the sound foreign so so far we have gotten into why of it right uh all right uh so now I'll come to you know what is uh bichonomy SDK so it's basically you know smart contact wallets plus the infrastructure to you know enable all of these fun click experiences which I just talked about and uh it you know heavily like uh utilizes account abstraction that is uh eip4337 and then there are like other mechanisms because it's a smart contact wallet right so you can go wild with it like with signature verifications uh different kinds of like fee abstractions so that is the idea like uh so first of all account abstraction means that you know your account and signer is different so you park your ads somewhere else and in order to like initiate transactions uh there is a key signing key which you can rotate and you can have like multiple uh party competition a lot of things and uh what I mean by gas abstraction is that you know that's the thing which I talked about like you need you do not need to hold native assets someone can sponsor gas fees on behalf of uh you right like uh in Native tokens or even in like yeah C20 tokens or if a dab does not match to sponsor then they can make the user pay within using the assets that they're holding in the smart account and in terms of chain abstraction like once you integrate as a Dap let's say I'm on five different chains you do not need to you know make users change RPC and everything so uh that's the idea and I'll get you know more into more details like you know in terms of architecture so it's basically like I said there is a relayer there's a bundler service for account abstraction there is indexer service there is a backend node and uh you know there are several packages within the SDK so you can use all of them at once or you know some just some of them and uh some of the features that you know are exported out is uh one of that is social login so you can have like MPC support and social logins for you know completely uh new or not crypto Savvy users uh and just you know give them the eoa address or a signer uh because uh basically a smart contract wallet or this uh you know whole layer 0 which we have built on it just needs a signer right so as long as you have a signer on top of that there is a smart contact wallet which gets pinned up and this signer will be the controller of the smart account or smart contract wallet and whenever you want to initiate the transaction it's always just a signature verification so your end user just signs the message but the fee abstraction happens like within the smart contract wallet and then there is a relayer or a bundler to poke your wallet because uh you know contract accounts cannot like initiate transaction on themselves so uh multiple things like you which you may be already you know aware about like custom signatures schemes and there is is also something called concept of modules where basically you can you know enable a certain module in your smart contact wallet and say that you know for example in nose is safe so the idea comes from safe itself where uh you can have like daily spend limit module or you can have social recovery modules session Keys Etc so using this the transaction can go through uh you know certain level of different uh access control and that skips your original signers so that's the idea I'll just quickly script through it because I want to get into the workshop mainly uh so this is this just talks about like free abstraction like gases transactions and uh the you know amount of fees that you are going to pay by estimating yourself on like you know metamask and then bumping up going through that whole process uh the relay is to this job like bumping up and choosing the optimum gas price uh even in case of like gasless or any other case as well where user is paying uh so let's uh get into the workshop so what I've basically done is uh let me just open this app and uh so there is a version which is uh you know very simple boilerplate there are other demos which I'll link in uh in the references at the end of the session uh but basically what this does is uh once I can yeah so I have so here it's uh first demonstrating the connection from externally own account it could be like metamask or any other wallet and uh there is a smart contract which basically you know uh so lets you allow uh let's see like set a purpose so it's just a string which you set light can be like you know capture a flag kind of a thing uh but in order to do that uh because I wanted to Showcase some batching actions as well because there are like multiple clicks right uh so in the uh you know current world uh so that is like uh you know I deployed a test token as well so we are going to be playing with these two contracts uh so this uh basically when you want to like set a purpose uh or this string on a state of the contract you need to pay at least like one token uh or you can pay more as well so that's the idea but because you are paying this it's just a polling mechanism right like so contact will pull so you need to give approval first and then uh this code is set so I'll open the app uh here I'm logging in with my metamask so this is the address I have somatic and I have some test tokens as well so first I'll approve the tokens so this is just this is my first transaction uh you set the gas price then you will wait for it to get confirmed yep so once this is done uh let's say so one purpose is like checking out the documentation so this is just pretty basic stuff right like so I did two transactions I uh had I needed to have like native tokens and Magic so I'm doing everything on Mumbai right now uh now we will start you know modifying this dap by going through biconomy documentation so let me get into it our two of the transactions got confirmed so we can check like a different code okay this one is failed uh so this is the you know uh like main entry for the dogs and uh where what I'm going to use is uh there is there are like several packages so I'm going to use social login and uh also showcase like some sort of fee abstraction where we'll be using the gasless Flow by account abstraction P Masters so you can uh the payments that I'm I'm going to be using is a very fine paymaster so basically as a Dap You uh you know register on a dashboard called paymaster as a service where you basically uh can white list your contracts that okay these are the methods uh which you know I want to sponsor or these contracts right and then there can be like other levels of checks as well as conditional gasless so as a Dap you'll need API key so we'll get into that uh first I'll like you know just start and start doing the changes here uh I have already added some states oops so here there is you know login section which I have left out and there is a initialize wallet so currently I'm initializing or in the you know the demo before that I just initialized with my EO account and we'll be making changes here so instead of this we'll be using like a smart contract wallet and have that context in our application to you know keep using smart contact wallet for the transactions and uh to give you the overview of this so basically I had like these two methods right which we just invoke one is approve and one is like uh submit this purpose but we'll be like batching it into just one transaction and instead of paying for gas fees someone else will sponsor it and there can be like other ways as well where you can get a fee code from the reeler which is plugged in with the SDK right so in that case user base and you can also show in the UI that okay these are the options like x amount of usdc Y more to usdt uh whichever tokens relay supports so that is part of like other demos as well so I shortly linked the video over there so coming back here uh basically we'll be like changing the you know way uh login happens so I'm going to start with the social login uh you know package from the SDK let me just comment out a few more things all right so yeah first we need to import uh you know some packages from bikrami SDK but first I'll start with social login so for that you import web3 auth or so I'll just do yarn at and for like rest of the things I'm just going to keep following the documentation so you get an idea like which thing goes where foreign so this package gives you like all the types used within the SDK and the main entry point or the package which is going to be used mostly the smart account so uh we'll go with the social login by the time I'll also install other things okay so it says that you need to initialize the wallet so I'll come here I'll remove this stuff not getting the eoa provider and since we are on Mumbai I'll just change the chain ID so after this we'll set the context all right and here in login we need to show wallet so if there is no login context then if there is no provider then basically I want to uh you know pop up the model for showing the wallet so this is basically tells you that you know what is the EU that you want to select whether it is going to be like social login or is it going to be metamask also because you can set up on top of metamask as well so this is my login contacts dot show wallet so I've done this part now the next thing is uh let me make sure I installed all the packages should be in my node modules already so now I'll go to this references section and we will you know install Smart account package and then you know write the wallet connection so coming back here uh after you know here we can like you know lock the eoi address like what is it is going to be generated using like social login or itcoin can be like your EO address as well uh now I will just you know like set the so we'll follow this connect wallet for uh you know uh get like creating an instance of a smart account and then initializing it and if you notice this wallet provider now becomes the uh provider which is coming from web3 auth so for the options I think it's easier to copy from here so what we're doing here is we are creating an instance of a smart account and I'm passing the wallet provider which we got from uh you know our current login context and then these are the options uh like by default you know SDK backend node value is the default values like in terms of supported Network IDs but you can change these values and for the network config if you want to use gaseous transaction through the paymaster dashboard then you need to like provide a Dap API key so the dashboard looks you know somewhat like this you go to adapt and you copy the API key currently we are only supporting testnet for gaseous transactions and for when user you know pays any rc20 tokens you can also do one like multiple main Nets so now we have an instance of smart account and you know you can log the address of the smart content wallet like going to be my address and let me just set it to something all right so we have set a wallet provider and smart account address now you can also go and uh you know since there is like if you want to also check like what are the transactions so far on the smart contact wallet or if you need to like you know get the balances you can use the balances endpoint which will you know fetch the balance from the SDK so this gives you uh you can also get like USD value across all the supported chains which you have passed or you can also get like token amounts right so if you need to show uh to the user in some form of widget right because once you go from like eoa to using a smart contact wallet that becomes your primary identity right uh so all the funds like you can query like which nfts are there which tokens are there and once this is done uh so we are ready to you know do the transactions uh basically so what I'm going to do here is uh let me comment out some stuff here as well so I'll shortly get into the demo of uh you know this working and when you initialize smart account uh you know if you are using like webpack greater than 5 then you uh you know might run into some issues so we have added uh you know proper like documentation uh to like you know make your way through it so I have done with the log out and uh so yeah now we are not going to need these things anymore so I'll just start implementing in uh this uh here where we'll do like you know batching of both of these transactions so let me copy what we are doing before for a proof now we don't need the your address anymore and we'll create uh transaction array so basically we are following you know batching transaction docs from here I use the API key which is like you know shared across the apps on test net but you can spin one using the dashboard backend as well and uh so once I've done this I also need to set up like some watches so basically like once you get the transaction hash you do not need to like go to any external service like block net you to you know see what happened with the transaction on my Smart contact wallet so you will get the uh you know all the you can attach The Listener basically using the emitter which is the Smart account class itself in the SDK so that goes in the login section once these stuff has been done so you get the events like you know transaction hash has been generated and you also get the event when it gets mined or even when relay resubmits the transaction and you know the hash gets changed right so you get all the updates and then you can even get the receipt and show to the user directly what happened uh and this has to be you know created before you send any transactions so that it starts listening like what's happening on this now coming back to my implementation so I just want to create like an array so basically whatever you want to batch you can just keep adding the transactions right like I'm just doing very simple stuff but it could be like let's say uh you're doing a swap and then for that swap you will require approval once you get that uh you know two tokens from the setup then you want to let's say provide liquidity on some liquidity pool and then you get an nft then you want to stake that nft or you know move that liquidity to some other change so all of this can be like combined as a batch transaction uh now I'll copy my second interaction which is uh setting this purpose so I'll just take I'm till this point let's push this okay so now we are ready to dispatch this transaction through the relayer so let's say response and all of these apis are available on Smart account instance so what I'm going to do is I want to send a batch of transaction and that has to be gasless like there are other methods so if you notice here and even if you uh you know go to the documentation you get uh let's say send transaction is there but you can like let's say prepare a refund transaction batch which basically creates a transaction payload in which the user itself will refund and no one is sponsoring for the gas fees so for this we are going to go with this here and the array which I just created is going to be part of it and let me comment out some other stuff which is just like my it will show my eoi account and my smart contract Wallet account as well all right and let me just take place so that everything is consistent so now this demo gets updated and uh we can do several transactions uh maybe using social login or even like using my metamask cool foreign let's choose social login so I need to open my Gmail so it is uh you know constructing the private key using the Fab 3. Network and now this is my eoi address which has been you know just spin up like this as a public private keypad which I'm going to use for signing and this is my smart contract wallet address which is you know created by bichonomy SDK and these wallets are uh you know counterfection wallet address so it does not need to be deployed so if you check on Mumbai Explorer uh it's just an account right so you can send funds to it uh it's a contract for me because I've already done some transactions but if it's a new user uh it's just an account you can send you know assets if it was up so it is supposed to pay like to the relay within the same transaction uh otherwise uh like it just create it just gets created as a first uh you know section of the batch which will uh you know go through so uh here you know it's just one click so where basically this guy needs to have some tokens which we use for like you know previous interaction and uh then you just do like one click so maybe I can do from other ways as well like you know let me connect my metamask so here my eoi becomes this guy it already has some tokens and my smart contact wallet address also changes which has been you know spinned up on top of this you can do this in like you know browser extensions as well uh you know a lot of uh like tooling like matama snaps provided so you can show in a widget uh kind of a view now uh let me check if or we can just send some tokens let me just check quickly cool so I already have some Ethan tokens and uh minimum amount is one so this is my fee token and this is the contract we are going to interact with uh directly right now let's come here and uh maybe let's say something like start integration so in this case uh this guy just needs to you know sign a message and then the transaction will go through on this smart account it will go through the account abstraction entry point and it will utilize the paymaster which is you know associated with this dap API key which we just added in the smart account config and as you can see uh why I wrote those listeners is that uh you know it is subscribing on the transaction ID we received from the reeler and you get all the updates so we get that you know this transaction hash uh got mined so let's check this on Mumbai cool so I paid uh two eth India tokens before that I did approval of two tokens and I also managed to change the state on the contract so the set purpose is there and now we go back to the contract uh the state changes and everything is just one click and someone is sponsored for your gas fees so you can do for this for your end users or they can also pay uh in erc20 tokens uh using the account abstraction flow as well and using like you know there are some methods in the wallet itself which allows you to do that and anyone can uh if you go through the docs you can also plug in like your custom pay master in the gases section so that's possible as well if you guys are you know building uh these kind of like custom contracts so that was it for the demo for my site uh and yeah I have just added some resources or links uh so there are other examples what we did is that one of the products is hyphen which is a cross Chain Bridge so we focus that and uh you know added the biconomy SDK support to it so you can you know go here play with it toggle and do gases transactions or the transaction where user pays in whichever tokens they are let's say providing liquidity in right so so that's the thing all right cool yeah cool I think I'll open to questions for two minutes uh and if you guys are hacking just have fun and you know check out the prizes using SDK you can like you know apply for biconomy track or ethereum Foundation track and you know build and have fun 
all right and we're live um hey everyone uh welcome i appreciate all of you for joining me here today um you know with jordan and kevin um we're here to kind of do the polywrap workshop and without further ado i'm super excited for this workshop so i'm going to hand it over to uh to jordan and kevin hey everyone hey everyone let me go ahead and share my screen and then uh kevin's gonna take us through a quick presentation and uh then we'll talk about a quick demo and yeah hey guys um thanks for having us it's global uh i'm kevin i'm the developer relations engineer at polywrap and also here is jordan one of the original developers on the projects um and we're polywrap we're building next generation sdks for web3 so the issue that we're trying to solve is the issue called the integration problem so what's that today when we're trying to integrate different protocol business logic we're using javascript sdks and the problem with that is that javascript is insecure so when you're using javascript it just takes one malicious dependency in your dependencies dependency tree to really cause a lot of harm to your users of your application or the application itself uh javascript sdks today when it comes to web3 protocols are not composable they're all built in their own way and it's just very hard to really compose the logic together finally they're incompatible with enterprise gaming metaverse and iot because these type of applications use other type of languages besides javascript so a javascript sdk wouldn't be able to execute in this type of environment and so at polywrap we think that web3 deserves a better solution and that solutions polarop and our whole mission here is to be a containerization protocol that brings web3 anywhere and everywhere because we because today web3 is stuck in the browser um a lot of dabs are in the browser and we want to have it in you know enterprise backends and just on your phone and everywhere else and so polywraps is the next generation sdk it's uh very secure because underneath the polywrapper is using web assembly uh web assembly modules are allocated their own virtual memory and they're not allowed to really interact with other memory outside of it unless you really let them they're hyper composable poly wraps are based on interfaces that we define across all different polywrappers and so it's easy to compose the logic together and uh finally it's compatible with different use cases so um because uh the logic is written in webassembly it's able to compile down to assembly and execute in you know javascript or other type of language back-ends and so with the polywrap experience uh the first step is to write your polywrap sdk or polywrapper you would then wrap it into the polywrapper and then in step two you would deploy it to decentralized hosting like a desensitized decentralized storage like ipfs um and then as adapt developer you can just install the polywrap client and at that point you're able to fetch business logic from ipfs and execute it into your application um on any platform whether it's iot mobile or laptop or whatever and all of this uh comes together in the polywrap hub this is our ui that we have to uh do like a web3 and aggregator it's able to bring all the all the polywrappers together in a marketplace type of app where you can search different polywrappers for example if you were to click the uni swap protocol here you can go and go ahead and do like queries and fetches right into the application and test them out as if you were using for example postman in web 2 development and here's just the ui to show you that screen where you can put together a graphql query and do fetches and also connect your wallet to do mutation type of queries and so our first large case study was with union swap so we were funded by the uni grants team to create the union swap version 2 polywrapper and what we did with this is that we forked the uniswap interface we took out all their install javascript sdk and we replaced it with the polywrapper um to showcase this and we were able to uh fetch unislav's business logic from ipfs uh through the polywrapper and able to execute you know swap functions right into the application without the javascript sdk so this is powerful because this use case shows that um in the future we'll extend support for this and be able to execute unit swap in enterprise applications like paypal or robinhood yeah and um one of the other benefits here is that it now becomes much easier to integrate uniswap than with the javascript sdk and so when we show you the demo we can actually show you just how easy it is to integrate now and just an overview of our dao we started with a development shop called d-org and today the the dao is a lot more decentralized but we're so for example we have chainsafe working on one of our potential future uh polka dot integrations to consider it done as working on the hub and so on we have 19 launch partners today and what these launch partners do is that they help with our documentation and code and their get exclusive access to early access to products like the hub and we chose these launch partners because they all have their unique needs and and uh polywrap solves for those unique needs finally we got one million dollars in funding in december of last year and i'll hand it over to jordan he's going to show you a workshop awesome thanks so much kevin um yeah so now we can get to actually seeing it in action so like kevin had told you all before um we had created a fork of the uniswap interface to show um our polywrapper working with for the unisop protocol and so here you know we can see an example of this um all of the logic being executed here is being done through the wrapper um you know executing in webassembly and the user interface for this is very simple um here we are using the polyrep client to send a query we're sending it to the end point which is the ens uri which i'll show you up here it's it's v2.uniswap.web3pi.eth and then lastly we're sending a besttradexact in to figure out what the resulting output will be if we give it you know 0.01 eth and so upon sending this query you know the client is going to fetch the webassembly run it in the app and and you know give us the result back so yeah very very easy user interface it looks just like a web 2 api hence why we used to call the project web3 api but we recently renamed to polywrap and so just to show you kind of what's going on under the covers here this domain on ens is pointing us to ipfs and so this is the content hash of the package and if we go over and we move zoom out of the way and we click on this tab here we can see that this is what your package looks like we have the mutation and query webassembly files in graphql a mutation is used for writing operations and a query is used for reading operations and we use graphql because it's a very well known interface definition language and it also gives us nice properties like separating reads and writes if you look at the size of these packages they're very small this is actually about the size of the javascript package for um uniswap so no um size bloat there um and yeah you know we're able to do things like you know go ahead and execute a swap if we'd like and so for the sake of this workshop um showing you this code base is a bit much because the uniswap app is very large and it does lots of things but what we did was we created a workshop for you all to check out this workshop um has two different sections so if you read down here in the readme um the first section is for creating a custom dap using the uniswap polywrapper and the second section is for um creating your own polywrapper using uniswap so a good way to think of this is that this is for a user-facing ui and this is for including uniswap in your own custom sdk and so if we check out these different sections we can actually jump through how this works um here for creating the custom app and i'll actually show you this running we have some steps like you know getting some prerequisites running the installation all this fun stuff and then we can actually start the application so over here i actually have the application running for you um and it is the completed form of the app so this is something i should tell you about in the master branch this is an incomplete application so this is the start of the tutorial and in the completed branch this is where the app is already done so everything's already working and so all of these steps shown down here uh basically leads you through setting up the application so that it can fully function and so this first step is when you fetch the token output amounts this is when you type in a number here it'll go ahead and fetch the output amount so that's what that's doing in order to do so it looks something like this you do client.query you give it the ens uri and then you do pair output amount um and we can actually see this in the source code because it may look a little prettier um if we go to the dap folder and we go to source web through api and then fetch swap output amount this is what that looks like so we have a client we send a query and we get the result so that's simple enough and you know the rest of the tutorial will take you through doing the other pieces of functionality like being able to approve your erc20 tokens here you know we're calling a contract view method to see if the allowance is um you know enough for our swap if it's not enough we go ahead and we ask for approval so we do mutation approve on the the uniswap api or the uniswap wrapper and then the last step is actually doing a swap mutation and so this is what executing a swap looks like on the client and the end result is that you will have a custom application running uniswap and you can actually go ahead and do things like create a swap and so i'm going to go ahead and fire this off purchase some uni um and so while we wait for that to complete we can check out the other side of the um of the workshop which is creating your own wrapper and so this is if you'd like to include uniswap in a new polywrapper why might you want to do this maybe you want to make a wrapper that you know swaps things on uniswap and it stakes them elsewhere or maybe you want to create a defy aggregator of sorts you know this is why you'd want to include uniswap and so here let me just show you the code actually so let me go ahead and close this as you can see we have a dap folder and a wrapper folder inside of our wrapper folder we have mutation and query as you might expect starting with the query if we look at the schema this is a function that we have defined called fetch token total supply so this is just a helper function that we've created and as you can see up in the top here we're actually importing sorry this is blocking for me we're actually importing the query type chain id and token amount from the uniswap polywrapper so this is an example of how you can actually import types from other polywrappers into your own and these will actually get generated into your code and so if we look at what this code looks like it's very simple all we have to do is define our function for fetch token total supply and as you can see our input types our input types have gotten generated for us so this is our generated folder which does a lot of heavy lifting for us and then we can simply call uh uni underscore query fetch token data so this is going to be another query to the to the uniswap wrapper and then the last part is once we get the token data we can get its total supply and so we call fetch token total supply and we return that amount and so that's really quick and easy um and then the last thing here that i'll show you is the mutation we had to find a simple swap function and implementing it looks something like this we go ahead and we fetch some token data for the input and the output tokens and then we perform a swap on the uniswap mutation module and if we want to see all this actually working we can actually run some tests so if you look through the instructions it'll teach you how to go ahead and build and deploy your wrapper and then you can run a simple test like this and what this will do is it's going to send a test query to the wrapper it's going to take a second because it's going to first try your your local and then it's going to try the remote to be able to resolve the packages and then if we just give this a second it'll go ahead and run the function let's also while we're waiting we can go ahead and check this out we can go ahead and see that our swap of .01 ether has succeeded and so we uh we were successfully able to buy some uni through our example application and i'm not sure why this is halting oh cool all right so we were able to actually fetch the token supply using our custom function and the cool thing to note here is that the cli that we just used to send this query had no clue about our custom wrapper but what it did was it went ahead and fetched it from our local deployment because we deployed it to our local ipfs node and it went ahead and called this function um so this is kind of showing you like the powerful nature of being able to integrate web3 on demand so it's kind of like streaming web3 into your applications which is pretty cool um i'm going to stop there because i think that we should leave a little time for questions and i i think that the last thing i want to show is that we have other demos so if you go to github polywrap demos you know you can find a whole bunch here there's a whole bunch of different demos here and then also we do have a defy sdk which i think is a very cool wrapper to look at so the defy wrapper if that still exists yes so this is a in development wrapper that one of our contributors niraj is building and it aims to be an aggregator for um for d5 protocols so it's a really cool example of how easy it is to compose protocols together using polywrap and so yeah that's uh kind of the last thing i want to show would love to see if anyone has any questions all right i'm just going to go ahead and read through the chat um does it work with v32 great question kevin we actually got a grant from the uniswap dial to build a v3 wrapper when we started building the v21 v3 wasn't launched yet and so the timings didn't really work out too well in our favor so we'll have the v3 wrapper built soon and yeah we've we've been starting on that um right now so oh cool and it looks like kevin no already answered that um this is the most kevin's i've seen amazing a lot of kevin love um yeah kevin do you know if there's any other questions that i miss here or that we should answer um i didn't see any but if you guys have any questions feel free to unmute or ask or ask them the chat yeah definitely open a chat and um one of the other things i'll go ahead and share here is um let's go ahead and share our website quickly because um polywrap is kind of innovating at a different layer of the stack we're innovating at the sdk layer and so this actually gives us a whole bunch of benefits that we didn't previously have in web3 so just kind of reading through these you know it allows you to build an sdk once and and use it everywhere so for example we no longer have to build language specific sdks for things like let's say ipfs or ethereum where we have kind of like six different implementations of those sdks for you know python and java and go and rust and javascript and so with polywrap you know theoretically in the future we can just have one instance of those which would be very easy to maintain which would be nice it's more user friendly so since we use a graphql syntax for doing everything its interface looks just like a web 2 api and so any web2 developer can ideally come into polywrap and start using web3 using polywrap it's more secure because they're all sandboxed inside of webassembly so if you had some malicious code that wanted to try and access your private key or anything like that it wouldn't be able to access it because it's trapped inside of the web assembly it's executing in like it's its own module you know like it can't break out of itself it is more scalable because we fetch and download these wrappers on demand so you can theoretically have an infinite number of integrations in your app without loading the size of your app so this is really great for aggregators today in web3 when we build aggregators a lot of the times we end up re-centralizing things by building central servers to do the aggregation for us um you know this is how apps like let's say zapper or zurion oftentimes do their their integrations as well as they you know use things like smart contracts to be able to do this um on the fly but with polywrap all that can you know be be done within the polywrap ecosystem um easily you know creating scalable modules that can you know be fetched and then also uh can use extendable interfaces to be able to fetch other implementations on demand so that that's another really cool feature um it is more composable because we're using graphql and so you can easily combine these together instead of having to stitch together a custom javascript sdk with another custom javascript sdk you can simply just you know list a series of graphql queries and you can combine your wrappers together and then lastly they're upgradable so this is really really big for things like smart contract protocols because oftentimes when we make changes on chain to a smart contract protocol we have to upgrade an sdk as well as they you know use things like smart contracts oh it looks like somebody's unmuted and there's a little echo i will probably wrap all that down the polygraph ecosystem um okay i'm just gonna keep talking but there's a little echo if you don't mind uh meeting you'll be fetched and then also uh and then uh yeah so so the other piece here with upgradeable is if you upgrade an on-chain contract um at the same time as upgrading the contract on chain you can also upgrade the wrapper um you know either by changing the ens domains uh content hash or changing uh some other pointer let's say if you're using some other domain name system and um what this allows you to do is not have to rebuild your apps not have to rebuild your nodes and then relaunch everything you can just go ahead and automatically be upgraded to the latest wrapper and it'll be compliant with the contracts and so one of the things we're building in the future is an on-chain registry so this is similar to npmjs.com or crates.io we're actually going to be building out a custom package repository for these polywrappers where you can publish to them and uh the github links yes that's a great question um and so you know with the polywrap registry you'll be able to publish your wrappers publish new versions um and then also will have verification for these versions and so if you tried to let's say publish a patch upgrade you know going from 1.1.2 to 1.1.3 um you uh we we can actually run verification to make sure that you're not introducing any breaking changes and so this is really big for backwards compatibility and for making sure you don't break downstream dependence like applications and so that's um another really exciting part of the ecosystem that we're going to be launching in the near future so yeah i think i've completely exhausted all of the things that i'd like to talk about this is pretty straightforward nice work thank you so much um and yeah like please feel free to ask any questions we're here to talk feel free to jump into our discord um kevin is is there anything that you'd like to maybe close on or or talk a bit more about yeah um just want to end it by saying like this is a very easy to start up with with our cli it's similar to how you would start maybe like a create react app um so take a look at our documentation and ask us any questions but in general you can start up an application that you know like i started application that has a poly a very basic poly wrap already and you can start playing around with that but um the best way to learn and ask questions i think is going to be start to start building with polywrap and also joining our discord and uh just introducing yourself what you're building and asking questions in our help channel amazing um yeah do you wanna do you wanna close it off yeah sure thing uh yeah thanks guys for the really great presentation uh-hum and i just wanna wanna let everyone know if you have any further questions uh be sure to go to the um you know the sponsor channels or honestly just kind of like ask uh you know you know kevin and jordan are both really really active um you know on discord so uh you know or maybe some other colleagues would be also really inclined to um answer your questions um and with that i want to give kevin and jordan another really big shout out for the wonderful wonderful um presentation today and uh thanks everyone thank you 
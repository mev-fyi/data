hey guys welcome to the building structured financial products with the element sdk workshop um we have charles and paul here from our sponsors element finance um and they're gonna be running today's workshop for you guys if you guys have any questions just throw them in the chat and then they'll try to get to them at the end in a q a go ahead guys thank you i'm just going to share my screen quickly welcome everyone okay all right so paul and i are really excited to talk to you all about how you can build structured products with the element finance sdk um our agenda for today will be giving a brief introduction of element finance and and what we do we'll start off with an introduction with the element sdk as well as talk a bit about the motivation behind it then paul is going to walk you through actually setting it up we'll talk a bit about the examples we currently have within our sdk and then we're going to do an actual video walkthrough of a specific example which is finding the spot price and minting and lastly we're going to have a little breakdown of the various product ideas that we have listed in our prize page for anyone wanting to build on top of element during the hackathon as well as give a review of the prizes we're gonna be allocating at the end of the hackathon and finally we have a really great teaser um we've been building heads down since our test that went out got tons of feedback from our community and we've made a lot of changes and we're really excited to give you the first teaser there so to kick things off what is element finance well element finance is bringing high fixed yield income to the dfi market it's a fixed yield protocol where users can purchase the ethbtc usdc and die initially at a discount without having to be locked into a term so this allows the exchange of discounted assets and the base asset whether that's btc or cc at any time since element's core principles are to be an open self-sustaining community governed protocol we're having a really big focus on interoperability so as such we've built an sdk for developers to use when interacting with and building on top of the element smart contracts i'm going to pass it off to paul to give a brief overview of the protocol architecture and then teach you how to set up the sdk hi everyone my name is paul i'm working on smart contracts development and so the diagram you see before you is sort of the core of the element protocol basically what is what happens is that a user deposits into the system and it creates a an interest token and a principle to confront it so the primary points of interaction for a standard user will be this user proxy which is a component which is specifically designed to hold erc20 allowances securely and has got specific security protocols in place so that if you are developing a smart contract or a front end you can feel comfortable putting a unlimited allowance on this because it's specifically designed for it the other contract is this trench slash principle contract there will be multiple iterations of this so it's indexed by the expiration time and the underlying asset so these two things will be the primary places that you'll interact with the contracts if if you're building on top of us building extensions to the protocol you might also be interested in this um urine asset proxy this is the component this is the part of the system which can be replaced to add another type of yield bearing asset such as a like a compound vault or an audi vault basically all you have to do is implement some internal methods which manage deposits and withdrawals and price lookups and you'll be able to run the entire system on top of that with generally pretty minor uh very very small almost no headaches the the system as a whole um the way it works is it takes in tokens into the contract of the user proxy locks them into urine and then waits about three months and then splits up whatever is left in accordance with the with the yield principle split all right so let's talk a little bit about the sdk so we've built on top of hard hat like many projects have i think some of you will be really familiar with this but for those of you who aren't uh it's a node-based project which allows you to interact with the ethereum blockchain and smart contracts effectively so to be able to actually use it you'll need npm and node.js we specifically use typescript so you will also need typescript but it should be automatically installed by npm install the steps to be able to to finally run your code include loading some contracts from our github generating interfaces and then building actual type chain artifacts and compiled byte code from the loaded contracts the sdk since it interacts with ethereum has a few things that it needs to actually be able to know to be able to load data from the blockchain uh the first is you need to be able to connect to some rpc endpoints for most developers this is alchemy or infuria but you get extra crypto cyberpunk points if you connect your own local full node additionally if you want to be able to actually send transactions to the blockchain as you might know you'll need a private key and some ether if you're building on our test net uh we're more than happy to provide you with as much gorilla e as you wish once you have the private key and the rpc input you want to connect to you can follow the instructions in our readme to be able to put these into the environment and our scripts will be able to handle it from there okay so we've built some examples for you and these will be able to show you how to use the code in the sdk and provide some really basic standard functionality you know you'll be able to use the code in here tear it apart and build basically anything that is possible on the element protocol so the first is the contract addresses example this one simply goes to our deployment repo pulls down all of our contract addresses and gives them to you in a format you could interact with in typescript the pool id example this locates the balancer pool id balancer v2 is a bit unique because you don't just need the address of whatever pool you're interacting with you also need a special identifier which is um some data packed into the address format so this script will just get that for you the spot price is something that i think has some of the best examples in this in the sdk examples simply because i think it it's something you can use a lot in front end development or bot development firstly it shows you how to load all of the data you need from the blockchain about the spot about the prices and the pool balances and secondly it shows you how to use our typescript methods to actually emulate the bonding curve logic and that's really important because if your application your bot your website is constantly querying the blockchain to figure out how much a trade will be resulting in it'll be really slow so you really want to be able to use our uh our trade estimators that are in spot price next we have swap swap it does what it says on the tin it swaps tokens on our balancer pools they're actually multiple methods for swapping so if your application needs to swap multiple things at once um you might not want to follow this specific guide this is for swapping one application or one one token at a time so if you have a multiple a multi-swap and you can't find exactly how to do that on the balance or sdk feel free to hit us up in discard because we're more than happy to help the final is mint mint is one of the primary interaction points this script shows you how to take one unit of an underlying say one usdc and turn it into a principle on a yield token for a tranche so next uh we have a little video recording of me actually using the sdk video recording of course to prevent any uh demo day grim lens that always seemed to pop up okay so the way we want to run our our code is through hard hat so you can see that we are invoking the typescript script npx hard hat run examples spot price and in the above the console you can see the code for spot price which as you can see what it does is roughly it calls this get reserves method to load the reserves from the balancer pool and then we'll parse them out so that you can see the ilp token supplied the reserves the expiration time stamp and some other data like the spot price as you might notice if you're looking at the outputs of our sdk the pt price plus the yt price is actually much greater than one it's about one point it's about 1.39 which means that there's a 39 percent hard unfortunately this is probably only going to happen on the test net because that's a really big r so let's see how you can mint some tokens to to capitalize on that so if we run this mint script what will happen is that you go in and you approve you approve the user proxy address which again this doesn't necessarily have to be every time but you will need to do it once for each asset and then as you can see in the console this is to be expected it's not actually an error this is the result of the of the blockchain call which sets an approve and as you can see in the events this is a an approve and if you decode that uh the data you'll see that it's actually the right amount as well after you've approved the user proxy [Music] you can call into the mint with proc with proxy functionality and that'll make the call to the blockchain for you with your specified gas price and so you can see that you also get an output which contains all of the information about your transaction on the blockchain this one has a lot more events that are a lot harder to decode so if you're looking at this output and you feel uh a little bit overwhelmed that's very normal and we're more than happy to help you decode it or figure out what other data you might need from return from your mint and at the end of this process we now have taken one usdc and we've turned it into a principal token and a yield token which together are worth approximately 1.39 usdc so a nice 39 heart awesome thanks paul so i'm sure you're all wondering what can you build on top of melon during the hack money hackathon so in general the dfi ecosystem has been powering this new generation of interest rate markets and we believe element as the forefront of this new movement so a really great thing about being our first hackathon is that everyone here can be amongst the first developers to build with element there are many possible products and strategies that we can further introduce to improve capital efficiency to all types of users whether that's casual and new users people who are interested in just generating passive income or for the experienced d5 users who want to maximize all possible ways to generate more apy so the products built over the course of the hackathon and on top of element in general may vary from facilitating just a better user experience to things such as one-click transactions bundling up certain actions into one or more complex structure products that use elements primitives so in our prize page description we listed a few inspiration ideas and these are one-click solutions so like i mentioned before bundling up certain actions that the element protocol provides and offering in a one-click solution i'll get into an example in a bit the next is yield ladders and perpetual redemptions so yield ladders basically allow the rolling over of fixed rate interest terms so that a user can continuously be involved in fixed rate interest after the let's say three to six month period ends they can automatically be rolled over into the next one the next one is just asset exposure flexibility and what that means is you can build products on top of element that are alternatives to collateralized lending so you never have to put up your asset as collateral in order to borrow and then get exposure to yield that's one we're really excited about and i'll get into more details about that shortly but the last one we're interested in seeing is arbitrage and yield token compounding bots and before i move on i just want to define what yield token compounding is it's very similar to interest rate leverage but basically it means that you're continuously selling the principal tokens in order to multiply your yield exposure without having to borrow additional assets so in terms of the one-click solution ideas we have we believe that element creates this ultimate flexibility for how users can manage and put their principal tokens and yield tokens to work so some of the possible one-click solutions that we were thinking are bundling up the mint and provide liquidity actions into one atomic transaction providing a nice ui for it as well as securing fixed yield and providing liquidity so those actions are both easy to do in a one-click transaction the more kind of challenging ones would be minting and selling principal tokens continuously very similar to what i just described earlier with yield token compounding and then the last one would be a product that just does one cycle of yield token compounding and possibly using a flash loan to reduce the high input requirements of capital on many users that can't afford it in terms of the yield ladders and perpetual redemptions so for passive defy users a yield ladder that automatically redeems principal tokens and rolls them over into a new term essentially allowing for automating of compounding making the overall experience less more worry-less for participants and easier for the passive income user who doesn't necessarily want to check a platform every couple days to just check up on their assets so these yield ladders could range from monthly rollovers quarterly rollovers or biennial biannual ones depending on the current available terms within the element platform as for asset exposure flexibility so the element protocol like mentioned before has a huge amount of flexibility in improving capital efficiency for users so a really cool alternative to create during the hackathon would be to use an alternative to a lending protocol where a user maintains exposure to the asset of their choice while taking on a yield position of another asset so an example that we like to explain is if a user wants to maintain exposure to eth because they love it so much but they also want to earn the yield from a stable coin they can simply sell eat for die deposit to mint principal tokens of dye sell those principal tokens back for each to keep that exposure to eat but at the same time you're keeping that exposure to the yield token of dye and you're still holding your precious eve so it's a really cool process we're more than happy to talk about a discord more and provide you with more resources but we are very excited about this one and lastly so users can trade to increase their exposure on element to variable interest if the fixed rate discounts are too low and that arbitrage opportunities present themselves if the discount is smaller than the going rate of the premium of yield tokens in the market so two ideas include a product that allows users to select how many layers of tokyo token compounding they would like to perform all in one bash transaction the second one is an arbitrage product that would scan for the current discount rate and premium rate of principal and yield tokens and if the total amount would be greater than one the arbitrage bot would automatically be executed so essentially this means that anyone can mint immediately and sell for a profit so now that we've gone over all the potential product ideas that can be built on top of element i wanted to give a brief overview of our prizes offering so element's going to be awarding a total of 8 000 in usdc prizes the best product built using the element sdk will be awarded 4000 usdc and then the next prize is a prize pool so this will be shared across anyone who builds on element whether it's the products we mentioned in the earlier slides or if it's a new novel approach that you and your team have created on your own so those will that pool will be split for 4000 ustc as well so now to end off the presentation i wanted to give a very early sneak peek of all the work we've been putting in over the past couple weeks the first one is a plot product spread a product split sorry about that um where it's called element save so this is the simplest way to grow your crypto and it's targeting the more casual and passive income users to grow your crypto assets at a fixed rate with just principal tokens so basically the principal tokens are on sale discounted versions of regular popular crypto assets that let you buy and hold for a set period of time and then redeem for the full value at the mature time and then once that's been matured and you redeem you can go ahead and choose a new term to continuously work on so the cool idea we mentioned earlier would be to have an automated way to keep rolling those over the next sneak peak is the element platform redesign so we've cleaned up the platform and combined a few different tabs we used to have separate tabs for the principal tokens and yield tokens and now we have earn and trade along with the portfolio where you can manage all your positions whether it's principal tokens yield tokens staking and whatnot so the earn page is dedicated to people who want to earn further on their already fixed rate by trading principal tokens and yield tokens for separate ones so it also provides a custom amm that ensures liquidity in the market and the additionally you can actually provide liquidity to earn further apy as well as earn trading fees the next tab is the buy and sell so it allows you to buy and sell unrealized yield it also comes with the liquid markets as well and liquidity providing possibilities as well as earning the same fees as i mentioned before the last teaser is a sneak peek of the new website we've combined all these products i mentioned into a nice portal if once the website goes live you'll be able to scroll down and see the details of each page explaining the different functionalities and offerings they provide as well as of course our docs and community links and on a final note we are very excited to say that the element protocol mainnet launch is coming on june 30th this means that you will be initially starting to work on your product on testnet in the first part of the hackathon but midway through will be going on mainnet so you'll actually be able to create the first products created on top of the element protocol and that concludes our presentation thank you very much for joining and i think we can open up for q a now does anyone have any questions i can't see the youtube live stream or anything so there are no questions on youtube okay all right well in that case we are available on discord for the the coming weeks if you have any questions or you want to share your product updates and whatnot we'll have someone dedicated to the channel each day for for your questions and we're really excited to see what everyone wants to build all right since we're not seeing any questions in the chat um we'll wrap it up here thank you uh charles and paul for running this great workshop and thank you to element finance for sponsoring hack money this year um yeah we really appreciate it i hope you guys had a good workshop bye thank you 
foreign good anytime yeah all right hi everybody oh come on in if you want um yeah I'm gonna kick this off it's 4 30 now and if people are joining later that's okay um I'm gonna uh talk to you about cello so thank you for joining I appreciate you folks being here looking forward to seeing what kind of ideas you have and if you if you need any help look for people with bright yellow shirts we are in the uh one of the main Halls um so yeah I want to talk about seller today uh cello is a a blockchain protocol I can't move this uh blockchain protocol that is um built for what we believe is prosperity for all the blockchain started um with a focus on mobile user experience so trying to help people reach people through their mobile devices it being the most common computer that people have access to and first off I just want to say who I am my name is Eric nakagawa I'm actually from San Francisco and I'm happy to be here in Tokyo and looking forward to meeting each of you I lead the developer relations team for the solo foundation and I have here Anna and a bunch of folks at our booth who are here to help out throughout this whole thing so we'll be here with you as long as we can we've got Anna harp Hall Daniel and viral so I talk about what Salon do some demos they will talk through bounties because I think uh you folks are going to want to know how to maximize your chances for winning a bounty from Cello from the seller prizes so like I said before cello uh is kind of built with a with a focus on Prosperity for all uh we actually launched the project back on Earth day which is coming up by the way next week back in 2020 and we when solo started we didn't have the word regenerative Finance what we had kind of focused on was social impact climate and things like that but now with the word regenerative Finance uh it's allowed us to have a better kind of better a better word or term to use to kind of describe the work that we do and the way that we look at the work that we do on cello is to focus on more than just the financial impact we also want to figure out a way to have a have an additional change um that in many cases can be climate it can be helping your community and some of the projects that have been built on cello uh focus on refi and actually put some of the early kind of leaders in some of the um in the space Have Been Around the concept of universal basic income is a project on solo that I love called impact Market which helps to distribute money to people all around the world through a Ubi kind of concept another one that recently joins solo it's a project you should take a look at it's called good dollar good dollar is also another project um that helps to distribute money to people where they need it and actually one of the projects here if you're looking at bounties uh superfluid launched on seller to support good dollar um so support good dollars migration to Sello and so if you're looking for bodies to stack uh take a look at Super fluid they are launched on mainnet not on testnet right now but if you folks need some help come come find us we can help you get set up with solo you don't need a lot of tokens to deploy your contracts other things that you know sell has helped um focus on is also been natural cap natural Capital backed currencies and that means things like land and trees and like tokenizing that and this is very common nowadays but just remember two years ago nobody was really talking about this and we're happy to be a part of and like have so many more people um uh joining this community with us other things that actually attracted me the most to cello was this concept of community currencies I'm from Hawaii I live in San Francisco but I'm from Hawaii and the concept of the value of land being given to the people to do something with it I think has been really um really powerful and I've actually benefited from some some people that have locked away land for native Hawaiians um also kind of creating the creating money without debt or uh nurturing a community um nurturing the community of people that are building these things that are either climate focused or social social empire focused we also want a prize which is cool I'll be on a crypty award last year I'm very happy um to be recognized so what is cello cell is L1 so if you're thinking like how does this help me if you're building a if you're writing solidity this weekend and you're going to be deploying your contracts you can deploy to solo zvm compatible and allows you to very a lot of tooling that we'll get into that can help you to deploy your contracts we also have a bunch of core contracts that can help you out there are several stable coins that are over collateralized stable coins that can be used to as a core part of your if you're building like a D5 thing you can support cusd which is a USD type stablecoin c Euro serial so they have some support for Brazilian users out there and then as I mentioned before cello was launched with a focus on mobile and what we mean by that is everybody here has a phone I'm pretty sure of it but how many people have you met with a phone that don't have a crypto wallet it's actually very common so one of the one of the cool features that Sello had built from the beginning has been a concept of being able to send money to a phone number and the way that it works is very straightforward if the if the phone number um you do a lookup and if that phone number has a wallet address you just send to that wallet address if it doesn't have a wallet address you can set up an escrow so that when that phone number is attached to a wallet it can then release those funds and so it's a great way to onboard a lot of people so again I don't know I'd love to hear some of your ideas kind of areas of focus but if you're trying to build for Global south or any sort of like emerging market or you're looking for ways to help onboard new people into the space not just people that have been in you know crypto space for a long time or they still call it crypto like me um but into the web 3 space then take a look at some of those tools and one of those tools would be called Otis which is a way to private like securely prevent people from kind of just like attacking the service to figure out who's in your address book um and account uh social connect which is phone number support and then we've also started adding um support for things like GitHub and other social accounts that just help you to send money on cello without needing a wallet address um if you look at you know how many people are using solo there are these numbers a little bit outdated over a million uh unique wallets um and seeing where people are based uh it's quite a large number of people again spread um in Latin America across Europe in in parts of Asia um and we're really proud of the number of people that are using solo uh in addition to the people that are using it um using it there's a lot of companies that also support this so um cello has over 200 members of a Alliance for Prosperity which is a commitment for organizations to support um reaching seller's goal of prosperity for all um from uh from I think within the first month of launch cello introduced the concept of um uh carbon offsets so from the beginning we've had a bunch of offsets in place and it's offset a large number of CO2 there are actually some new proposals coming out that will actually increase the amount that goes towards offsetting through um through both validator Awards um opting in as well as increasing the amount of the amount that's being burnt towards uh the offset fund uh there's over a thousand projects built on solo um again these numbers are very round it sounds big but there's a lot of real people building projects on cello and I mentioned projects like like good dollar impact Market there's a lot of you know games there's a lot of you know all sorts of projects um and again these numbers are about outdated but over 200 million transactions on solo I think last time I saw it was like around 250. so a ton of people um uh throughout the world uh here's just a kind of a quick glimpse of users across over 150 countries so when you're building on cello You're Building to potentially help people in all these different countries all over the world and we're really excited to see what you can build so as I mentioned before cello is L1 it's proof of stake and what that means is nowadays it's a little bit different um but it means there's there's very fast finality so if you make a transaction it gets settled very very quickly and it can be useful for people that are building financial services and they want to make sure that um uh when something is completed it's it's completed and and submitted on chain I'd mentioned the optimization for mobile first development in addition to the phone number mapping um we also have some mobile ZK type support for lightweight mobile clients I don't know if you can really work on that in a hackathon to be honest but something to think about when you're trying to build out your your plan your growth plan for your your project if you do decide to turn it into um something bigger one cool feature that I like about solo is again when you're starting with uh somebody who doesn't have a wallet and um they they only have a phone number and they then associate their mobile phone with a their mobile number with their wallet and tie that together how do they transact right like how do you start from no no tokens or no gas how do you pay for gas one of the things that solo does offer is being able to pay for gas with some of the Staples so you can pay with cusd cro and the cello the main seller token and the reason that this is I think really cool is again you could say you know onboard some person give them you know take their number deposit I don't know a penny and then have enough gas to like transact as much as you need in that short amount of time until they actually either bring in some funds or do something of value on the Chain um so that ping ping with uh erc20 tokens is a great benefit and um that number that number of tokens that are supported can expand in fact good dollar right now is looking to include their token as a method for paying for gas and the reason I think that's exciting is that could help to onboard tons of more people just with good dollar to pay to pay for their tokens it's not here yet it's it's a governance proposal that's coming together and very exciting we also have a bunch of regen or refi type building blocks so toucan um recently announced uh retirement of carbon and uh that's pretty cool I've never actually done that until recently I've heard about the concept of carbon but it never actually did something with it I mean even still today I can't even how what does it look like is it in my you know it's hard to touch and reach but like if you can do something on chain like that um and this interests you take a look at Toucan who's deployed on um on mainnet and available to you to build uh this weekend uh the community is decentralized and just like every project I mean it seems obvious but um there's a lot of community proposals that um actually I think someone here uh Juan from the community is actually here he's a volunteer uh has been helping to create a Dao to focus on Latin America so people that are trying to start things in um in Latin America can can go directly to the people that know their um the things that the problems are trying to solve and allows them to propose um to those groups we have also a bunch of crosstain interoperability um out here there's hyperlane hyperlane is another project you can consider as if you're trying to stock your bounties um they you know if you're building for hyperlane include cello they are one of the they support itself kind of early on and they're built um some of the team from uh from from Cello uh started that company and uh it's a very very friendly space um I mentioned the stable coins and then transaction fees are very low um it's proof of stake so it's extremely low and really use I think good for um just doing either a high volume of transactions or not impacting the the user so you're not like spending a lot of you're not having to second guess um how much you're going to spend on these transactions we have a bunch of Primitives I know this is very hard to see um which projects are supported on solo but some of the ones that I'm most excited about is our recent work around chain link is still not on on launched yet but working on that I mentioned impact Market um there's full metamask support so you can just swap in the chain quite easily if you're looking for a mobile wallet take a look at valora valora and then also Opera again there's tons of little icons that if you zoom in I'm sure you've heard of of these projects and protocols there are several uh uh amms like like sushi swap we have uh uniswap as well and uh I mentioned some of the other projects like good dollar and others like that so there's a lot um and I think you have all the tools you need to build in addition to the the tooling that's there there's also a lot of projects um or companies helping to kind of again commit to the alliance for Prosperity I mentioned 200 of them some of them include Mercy Corps T-Mobile runs validators on cello um uh Grammy Foundation impact market now runs a validator so a lot of great projects um helping to secure the network in addition to building on top of solo um and then as you think about you know the refine what that means um think about like building your smart contracts with some purpose Beyond of course as a hackathon but can it do more than you know just accrue value can it actually have a um have an impact beyond that um there are also as it upon launch I said mentioned that a portion of the um uh the reserve was going to offset carbon and right now I think the amount's like 0.5 percent with some of the new changes that are coming it's going to be much larger I'm excited about that and if you're building into the refi space consider um building your project and pitching it to a climate Collective which is um a fund that actually invests in climate projects um again I mentioned on-chain carbon assets if you go to cellorreserve.org you can see the full list of where all the where that's all going um and you can you can you know you can double check in terms of actually building this weekend uh you can launch on inferior uh if you're a sports fellow there's also quick note I think they might be a sponsor and then lava if you're looking for a more decentralized um endpoint infrastructure in terms of refi or tools to use take a look at Tucan I mentioned impact market and one of my new favorites called spirals which actually takes um in uh uh staking rewards and actually just redirects them for you to a bunch of climate protocol or climate options for cross chain messaging they don't like you saying that calling everything a bridge take a look at hyperlane there's also Albridge portal and XLR support and then oracle's chain link coming soon we also have Redstone pith and band and some others and uh superfood I mentioned super fluid and for wallets if you're building I would be building using metamask it's so easy but if you're trying to get into multi-cigs of course include safe at safe.sello.org deployed by the the safe team and then finally when you're when you're troubleshooting your transactions ether scans on solo but we call it celloscan because everything has its own name so I use that for troubleshooting your smartphone contracts on both testnet and mainnet and then same thing for explorer.sell.org that's the that's the um the alternative blockchain Explorer so what I want to do is just show a quick project I know you folks can't really build until eight so you got a couple more hours but if you're looking to just prototype and build something really quickly um I wanted to demonstrate uh sell so what we call cello uh it's actually called eth Global Tokyo you can scan this QR code if you're looking for a starter project and this is just this is just it running what you'll get when you start it up is going to be a simple startup page with a video explainer a storage service protocol running I think on both mainnet and testnet and this is really simple it just takes numbers um and the reason that we pulled this together was um scaffold eat is here and solo uh composer which this project is built on is based off of scaffolding we just added a bunch of changes to make it a little bit easier so if you're trying to build for react we got you if you're trying to build react native both Expo or non-expo you can use that if you want to use flutter because some people prefer building in flutter you can use that um and then we also have angular support too so uh yeah here's a just a quick just a quick example the reason that we we wanted to give you folks this is you don't have much time and anything we can do to kind of help out is great we also embedded in this um we have it we expose a subgraph just to help with iterating through the responses um and it's very simple so this is our it's already a published subgraph on graph uh on the graph and of course demos don't work ever um in real life but trust me these images are there and you can use this to to uh kind of jump start your project if you're going to be kind of doing nfts or something like that or if you're going to be publishing data in some sort of fashion that may need a way to iterate kind of quickly through that data without parsing it yourself take a look at the the subgraph support and then this is a little bit out there but Masa Finance recently launched on cello and we've introduced um just a quick look up for let me just kind of this will not work uh I think I own this one so it's just a way to to quickly look up um similar to like ens Masa masa.finance take a look at that and again these are just some some example projects there's more that we've included in the repo so there's a couple branches if you want to take a look at spirals implementation we have that as well we didn't want to include it here because it was still kind of you know these things are um they might be not ready for production per se but enough for a hackathon for sure and then going back to my slides real quick um so yeah I wanted to show you folks this and then I wanted to show you solo composer so if you're thinking that project seems a little bit too basic uh you can use solo composer and what solo composer can do is just like with um just like with um scaffold.eth you can quickly spin up a like a Bare Bones project just want to run through this real quick second so you can run this uh I'm sure it'll work for you it may not work for me but you just run a command line and you can just quickly choose let me scroll down quickly choose like what you want to build so you got react react native flutter and angular and we built this to speed up time this can get you started in like five seconds I'm sure you don't need that much time you can use two projects for um accessing the solo Network either react Solo or rainbow kit um and then hard hat or or truffle support and it can come with a kind of a basic sub graph again it depends what you're trying to build but we're just trying to help you folks speed up the time to to launch your project and make sure you folks don't get kind of caught caught up with stuff because it's based off of scaffoldeth uh they can help you out but you know we are happy to to answer any questions you folks might have and another fun thing actually is I wanted to show you this um oops I wanted to show you folks this project um this one is funny so someone in the community actually built uh built a Chachi BT based off of our docs and so you can quickly ask it like you know um which libraries support currency fee currency support is paying gas with erc20 tokens so you can um just ask it let's see if this demo works oh my gosh of course um uh anyway so you can ask questions about um how many validators are on solo you know demos work oh here we go it actually came back okay great so it tells you any sort of information you might come up with you can ask us we're happy to help you out but here I just have a quick question just ask the solo GPT project the link is here in the presentation and then I think we can also include it in our notes on the on the uh hackathon information page um so let's talk about bounties sorry for taking so long but we're here so we have five different prizes we're gonna be giving out uh climate refi Focus as I mentioned earlier payments D5 or any sort of any utilization of stable coins you'll be good there public goods and sort of community type efforts if you're trying to build something that's more doubt focused um consider the dowel nft gaming section and finally Wild Card we're just going to choose the best project comes through if you're looking for ideas for um the the climate refi Bounty take a look at um uh topics like natural Capital tokens if you're building an oracle if you want to add incentives if you want to add liquidity for natural Capital tokens taking regenerative Finance or anything that asks that offers stability for payments it could be lending front ends use cases for cross-border payments uh cross chain lending protocols using super fluid will count here specifically and then low liquidity asset pricing auctions and then finally using mental stable so I mentioned cusd cereal crl for public goods we are looking for projects that either have educational elements to it some sort of content production either from the community or from your team increasing awareness about cello that's more obviously helping benefit get the word out about Sello and then for Dao's most of these are going to be dull focused but you know ways to kind of like create the concept of like more fractional dials more education some of these May overlap and you can apply for both if the if it if you think your idea fits the concept of dissolvable dials like what happens when our job is done and we're able to move on what does that look like um and then in the concept of nfts more Dynamic type nfts were interested in seeing those especially if there's a refi component especially with refi having a change in our planet it should be able to reflect that on an nft some sort of carbon nft mechanism play to earn but with an offset component some sort of carbon offset and the final Wild Card we're going to look for things that are more experimental maybe more researchy so like offline transactions anything that deals with privacy see take a look at plumo which is our project that helps to create a lightweight client mobile client ZK uh ZK mobile client a we've been looking for ways to see like someone in the community build a wasm like client um some sort of better way to kind of estimate gas so like uh gas estimation is generally hard but something that could be better than what we currently have on chain would be nice and then some sort of method for in the community like voting on proposals things like that and as I mentioned before when solo started we aimed for mobile the mobile use case and the challenge with Mobile use case is you're dealing with people who might not be technology literate or you know number literate and so can you design a browser that can work for folks that you know aren't you know aren't uh familiar with with English kind of designs and layouts and then finally again these are more researchy but like referral Rewards or cashback programs um for the specific criteria that's actually not that complicated for us um we're just looking at your project matches one of the solo bounties um if you have a question come and see us if you are stacking your projects here's a couple here that we're happy to talk to you about so super fluid hyperlane as I mentioned safe um you know Swap and and graph sub graphs um uh the main technical criteria is I'm expecting really cool projects but like you got to deploy your contract to test that or mainnet and demonstrate it to somebody on our team there's about five of us so you um you should definitely have an opportunity to find someone to demonstrate and that's pretty much it so um we wish you all the best of luck we will be hanging out both physically here and for folks who are working remotely or if they're not here right now they're watching the stream we'll be in the solo sponsor Discord Channel and um that's it cool I I think I have a little bit of time for Q a if anybody has specific questions and if we run out of time I think we only have like three minutes um happy to have a conversation outside or away from the next speaker any questions no okay cool all right thank you very much everybody [Applause] thank you very much oh it's ready to go oh good all right guys uh if I could have you guys have a seat here thank you so much all right thank you guys so much for coming uh my name is Kevin Jones um I am also AKA shutterblock.eth you may see me running around taking photos I'm also a photographer for the event uh so I do a little bit of both um and I'm also a developer advocate for scaffoldeth um that's why we guys are here today we're talking about scaffoldeeth I don't actually have any slides uh this is all going to be like live demo and we're going to go through and actually do a live demo uh and show how it works this is all my contact information if you guys want to save my contact info uh but everything we're going to do is going to be live demo and if if you're looking to get started with scaffold Heath uh can you guys see that okay yeah okay uh if you do a Google search for scaffoldeth you're gonna get one of the first links that's going to come up is going to be the docs or the actual GitHub repo repo um so everything you really need is in those two pages um if you actually go to the GitHub repo it's going to have a readme that's going to walk you through how to get up up and running we're going to do that in real time and we're going to kind of build a Dap and show kind of what the process looks like uh here as you go um so let's go ahead and just kind of dive right into it I'm using uh tmux which is basically a terminal multiplexer it's just going to have allow me to have multiple windows open at the same time you pretty much always need like three windows open to get started with scaffoldeth and that's because you're running hard hat in a chain window and you're running uh your your front end so in react and then that third window is kind of where you're doing like your deploys and your other command line stuff okay so I've already gone ahead and basically checked out the repository so we're good to go I've also gone ahead and I did a yarn install because that takes a little while to do that's actually going to go out and get all the dependencies and install everything you need to get up and running uh once you're there then the next thing all you need to do is just do yarn chain so yarn chain is going to spin up a copy of hard hat uh hard hard hat is this kind of like virtualized uh ethereum virtual machine that you're running locally and it's going to come with all of these kind of like play uh accounts that have some play ether in there and so we can start kind of uh taking that ether and kind of testing our assumptions of our smart contract right um so you're always going to kind of keep that first window open that that window is where you're gonna uh just kind of see your console output for a hard hat uh in the next window you're going to do a yarn start okay so sorry so yarn uh what there's going on there we go you're in start okay so yarn start is gonna spin up a copy of uh react uh so another core component of scaffold ether's react so that's going to take a second to get to kind of get up and running uh but once you get up this is exactly what you're going to see it's going to spin up on Port 3000 a copy of scaffold eat and you can kind of think of scaffoldeth as this kind of like UI in this like front end that's kind of already like plugged up for you with your smart contract so it actually comes scaffolding comes with a smart contract but if we go here to this the the second tab which is the debug contracts which is kind of like the sweet sauce of scaffold eth you'll see here that it's not loading and that's because we haven't done a deploy yet so we got to go back to here and like I said we're always going to have these two windows open our back end which is hard hat and our front end you can see that we got some console output from hard hat and we can see that react started up successfully so all we need to do is come down here to this next window and do a yarn deploy okay so I can do yarn deploy and it's gonna do exactly that it's gonna deploy my smart contract it's going to tell me the uh the address uh for the for the account and then it's also going to show me how much gas and how much time it took right so uh we're up and running and now we should have a copy of our smart contract here which we do so what do we got here it's a very basic smart contract uh it's got a purpose so it's got one variable and then it's got a function already written for us that's going to allow us to update that right and one of the cool things about scaffoldeeth is it comes with what's called burner wallets okay so if you're building a Dap like you know you're you're going to have to uh you know hook up some kind of like provider and then do all that stuff this is kind of already done for you inside of scaffolding inside of the browser so if we look up here in the corner we get a copy of a private key and a public key that's in the browser and we have the address and we could actually like go to it if it was a on a mainnet and then we could also just grab some funds so we can take some funds from hard hat into Matt basically add them to our adapt we're up and running and then we can start interacting and and interact with our debt um so sorry all right so um we we see here we have a we have a purpose okay and it's just a variable and then we have an ability to update that purpose so if I come over here and just say like Foo like this and hit send it's going to allow us to change that state Okay so we've spun up our our dap we've interacted we've got some gas from from hard hat and we've made some changes into that smart contract we could also come over here and get a new copy of the contract by doing a yarn deploy Dash reset so dash dash reset and that's going to force a new copy of the contract and then it's going to revert the state so you can almost think of it like the deploy as this kind of way just to kind of reset your smart contract and then kind of test your assumptions as you start building which is exactly what we're going to do next right so let's let's load up our smart contract here so let's go code and let's load that up uh the first time that you you load here you're gonna uh if you're using vs code it's going to ask you to trust the uh contract basically or basically trust the repository which I recommend you do and it's gonna if you have highlighting for solidity it's going to show you exactly what your uh smart contract is going to look like here and when we look at the project for scaffoldeeth there's this packages folder okay and inside that packages folder there's essentially like two main places we're going to spend majority of your time one is the hard hat folder and that's going to be inside the contracts folder and the deploy deploy folder which we're going to get to in a second and then you can find your contract so this is a copy of the the kind of hello world smart contract and we can see here's the purpose that we have and then we have like an empty Constructor and then we have this function that allows us to update that purpose okay so it's a real basic smart contract it's almost like a hello world right and then we have below that we have the react app as well so if you go under uh hard hat there's also the react react app which we're going to go into a little bit but we're not going to touch that too much in this demo but really majority of time you're going to spend probably is here in the contracts folder so we could hard code a change like this like hard code uh awesome apps or something like that if I can type today like that save it and then we could do a redeploy and then uh you will see that it was successful and then we can see that that change is reflected in our front end so we could do some start doing some changes um so one of the first things that you learn when you're uh you know writing a Dap is you probably want to have some kind of like Access Control uh so let's let's do something here let's take a uh let's create a new variable okay so we're going to make it an address variable we're going to make it public and we're going to call it boss okay and we're going to basically grab our uh burner wallet which is right here inside the browser again we're not using metamask or anything like that and then we're just going to basically paste that in here and then save it and then redeploy uh let's do that oh sorry let me close these out these are going to get in the way the whole time okay so let's go reset okay so now we are going to have a new variable so we see that the the UI is automatically transformed we see we have a new variable it's called the boss and it matches what our burner wallet is so what you're going to want to do then at this point let's say you wanted to create uh some kind of function that only that particular boss could call right let's do that here let's create a require statement so the next thing you'll learn is you can do like a require and you can do message dot sender so when you're uh with ethereum you have access to a solidity you have access to the variables for who's calling that function and so messages that sender is anyone who's going to assign a transaction for that function right so we're going to require that the message that sender is equal to the boss otherwise uh not the boss something like that and sorry that and then let's close it off save that and redeploy so you can see what we're doing we're kind of automatically been able to get up our instance start making some changes to our smart contract and start start testing our assumptions so let's let's try to test that so now what I want to do is I'm going to bring up an incognito window okay I'm going to go to localhost 3000 same same dap and we're going to go to it and then we're going to try to make a change on this kind of like new user account we have so here we have this kind of like purple blocky guy and then here we have this kind of like green blocky blocky guy and so if I get some funds from the faucet and I try to make a change uh to Foo like this and then hit send it's going to tell me not the boss so we've been able to kind of implement some access control on the smart contract okay so that's actually not the proper way to do access control there's a much easier way and so what you can do is uh you can utilize what's called uh ownable which is an open Zeppelin uh contract so we're going to do that instead so let's let's kind of revert what we did let's let's get rid of this here and let's also get rid of this hard-coded address here like this and let's save and instead you'll notice up here there's like a commented out section where allows us to import another smart contract so with solidity you can import a smart contract so in this case we're going to import the open Zeppelin ownable smart contract and when you do that you can then inherit that smart contract in here as an inherited wood like this so we're going to import it inherit it and then we get access to essentially all of the functions we get access to the modifiers the variables that are defined when that particular smart contract is deployed so let's save that okay and then let's go ahead and redeploy so so scaffold ethos is kind of like like I said continuous loop where you're kind of testing some things deploying your changes going back to your UI and then kind of like testing your assumptions so we get to this point and then what what's different here anyone notice we don't have the boss variable anymore because we got rid of that but we have this new owner variable okay so owner is should be the owner of the smart contract right um but we would expect maybe that it's going to match our burner wallet but it does not it's it's a random private key or public key that's there that is the very first account uh that comes from hard hat so because we're using hard hat to deploy our smart contract the very first contract or account is the deployer okay so what we need to do now is we need to actually uh adjust the hard hat deployment configuration script so if you look inside the Hard Hat folder right below that there's a deploy script right so we can go here and we can actually start making some changes to our deploy script so we want to have access to the smart contracts so we don't want it just to be this random hard hat config we want to use the burner wallet so if you go to this uh this file it's going to show you exactly how the smart contract is being deployed and it's going to show you what the parameters are and then what you'll notice here there's a section that's already kind of like grayed out that you can just kind of copy from that allows us to get a copy of the deployed smart contract so we're going to do that next so we're gonna we're gonna take we're going to create a variable called your contract and we're going to use ethers to get that contract that's here with the deployer which is again it's the very first account of hard hat and then you'll also notice that I I mentioned it earlier a bit but when you inherit a smart contract you get access to all of the functions and you get access to the modifiers and the variables and so you'll notice that our smart contract debug contracts tab has automatically adjusted again to add some new functions and the most important one that we're going to be using today is the transfer ownership one and that's going to allow us to transfer the ownership of the smart contract basically out of the hard hat deployer account so let's let's call that so we can just come in here and basically we can grab this which also is just kind of already written for us and we can paste it right below and then this will this allows us to use that variable call the transfer ownership and then input whatever private or public key that we want to here so we can grab this here right this is our burner wallet we can paste it here and we can hit save and then we can go ahead and redeploy again so now uh during the deploy not only did it deploy uh the smart contract but it should have also transferred it so let's see if it did it did so now the owner is going to match our uh our account here so we've kind of are starting to build our smart contract um so we're gonna uh kind of close out the deploy script because we're kind of good with that right now but I do want to show like uh how you would uh use that ownable smart contract earlier we did the require statement but ownable also has the uh only owner modifier so we actually need to add that if we're going to do anything that's access controlled here so we can put it as a modifier basically all a modifier is is it's another function that gets called before that existing function is called is executed so it always checks to to make sure that only the owner could call this function we're not going to use that yet so let's go ahead and close that because we it's not really too interesting to have a function that only you can call on your smart contract you want to make it publicly available and publicly open right that's the whole purpose so instead let's kind of build something else let's let's do another require statement here but this time let's also require instead of we're checking the message sender let's require that there's a value passed right so let's do message dot uh value um is equal equal to a price otherwise not enough something like that and so now we need to set that that that price right so you went public price equals so we can just type in here like exactly what we want so we're going to do .01 ether like this and then we're going to go ahead and redeploy okay so uh now we we again we have our our uh contracts modified we have this new price variable which is interesting and then now if we want to call this purpose to like Foo like this and hit send it's going to say we don't haven't sent enough money right we need to send some value so what we can do is grab this kind of like amount that we want to send and you would think you could just like put it in like this right and send that but we have to deal in way instead of uh decimals right so what's cool about scaffold these that has this little green button you can just click that and it's going to do the math for you so it's going to multiply that times 10 to the 18th power and it's going to give us what we need in way and then we can hit send and oh I don't have enough gas so here's here's where we can say all right well maybe that little 20 bucks that we got from the faucet was not enough so we can grab our address we can come down here to the corner to this little like other wallet and it's just Unlimited Supply of ease basically we have like almost ten thousand each so we can paste our address here and we can get like a thousand bucks and hit send or if we wanted to we could also do it in uh eth as well right so you have this kind of ability to just grab as much money as you need and then get going so now let's hit send there we go so now what's cool is our smart contract is acting as a bank we've actually established this uh cool like vending machine right in our smart contract so I could actually come over here to this like kind of incognito guy I could come over here get some funds James also send a thousand dollars over here and I could say I am cool or something like that and 0.001 oh not enough send and then anyone can use it right we have this kind of like cool vending machine but what's the problem there's no that we can't get the money out how are we going to get the money out so let's figure out what we need to do to do that right we need to create a withdrawal function okay so let's write that real quick so um we're just gonna do like a function called uh withdraw like this and we're going to make it public but this time we're going to use the modifier and we only want the owner to be able to call it right so now we can uh do a um uh so we'll set a Boolean called success otherwise we won't set that and then we'll do a message dot sender so whoever's calling this function we will do a call and we will pass the value as the entire balance basically of the contract so we'll do address of this smart contract and we will take the balance like this and then we need to close this off did I type that right hopefully we did let's save that make sure it works deploy cool so we get this word error but for the most part it's going to work at this point um so let's get take a look at our adapt so now if we kind of come over here and we make a change to it say Foo like this and hit send we're able to put the money in there and if we come over here to the Incognito account uh so let's do that and then we kind of try to try to get that those funds from here we have the withdrawal function it's going to tell me no I'm not the owner right so I can't I don't have access to to withdraw that but if I come over here and I hit send then boom I'm able to withdraw those funds and those went from the smart contract into my wallet Okay now what's interesting is we could actually just make one small minor change with the smart contract and uh just to show what's interesting is we can take we have that variable that's price right we're setting the price up here above we could do something like this where we could say price equal uh price times 100 I don't know divided by or sorry at times 101 divided by 100 something like that yeah see that and then let's redeploy that change okay so now if we uh come over here and we make our change we say uh what's up and hit send what do we see that happens now the price is uh it's got a curve right we've got this cool uh not only is it able to accept value and you can anyone can interact with it but it's also on a price curve and we can start doing some really interesting things with our smart contract okay um so at this point um I do want to kind of show a little bit more uh let's see here so um if you if you kind of are just getting started uh with smart contracts or writing smart contracts uh scaffoldeth is just a good solution because like I said it comes with kind of all the stuff you need a really quick show is if you guys are interested in kind of like testing your ability and kind of going through the process of like building different kinds of apps I would recommend checking out speedrun ethereum speedrun ethereum is cool because you can just connect your wallet and you can kind of go through various challenges uh you need to unlock this real quick let's see so um it's it's got a obviously a web 3 type of experience where you can check in with your meta mask I don't know why it's not working right now make sure I'm on the right yeah one second here okay connect wallet metamask all right there we go uh it's got this cool experience where you can actually go through and do different challenges right so like the very first challenges you build an nft deploy an nft then you do a decentralized staking app a token vendor and then eventually you actually get invited to What's called the build Guild or the build uh the Bittle Gill is a collection of developers myself and there's some other build guilders here that are trying to like help the ecosystem and bring It Forward by providing value uh as enhancing scaffold eth or just doing things in the environment to help support ethereum and uh the cool thing is if you actually become a part of the build Guild you can uh do some work for the build Guild and you can be incentivized to do that and actually get streamed eth if you become a core contributor or someone that's involved in the build Guild so since the build Guild has been out there's been over 353 eth that has been streamed to other developers and we have about 700 other builders or or people that have interacted with with the build Guild and about 700 different builds of scaffold eath so it's a really cool way for if you guys are trying to get involved in a community to kind of do that so that's my real quick shell on if you're getting started those are kind of great next steps for you guys even after the hackathon but if you're building a hackathon project building on scaffold youth because it's going to be a huge Head Start for you and another thing too is if you go to scaffoldeth and you go to the the core GitHub repository there's two things there's one there's a scaffoldeth examples directory which has a bunch of starting points for like ERC 721 1155 you name it you can just come over here and just do a search so let's say I want to search like 721 it's got an example of what that would look like or um you could just do like nft and then there's some like nft examples in here as well so check out that and you can you can essentially Fork that specific version and then you have a starting point for your project so that you don't have to reinvent the wheel and it really really gives you a leg up on getting started with the hackathon so that's my my recommendation now there's another there's another couple things I always get asked like okay well what if I like next.js versus react or what if I like typescript uh versus JavaScript there is a new version of scaffoldeth so it's called se2 and I'd recommend checking it out um it's it's a special GitHub repository you can come down here and do a search for it it's se-2 so it's in a test so it's still being tested it's not the the full-on replacement for scaffold eth so it doesn't have a lot of the forks that you would find with the original version but it is a little faster and if you feel more comfortable with next.js and with typescript that might be something that you guys can try out if you're competing the hackathon I would recommend though to probably use the very first version of scaffoldeth just because it's a little more vetted um and you know it's got more starting points right for you I want to show you what scaffolding 2 looks like real quick so I've actually I'm gonna have to just shut down this one real quick so let me do that and then I've got a copy of here so I'm going to do the same thing I have se2 already checked out I'm going to do a yarn chain and this this so again this is if you're using just separate Windows second window I'm going to do a yarn start right and then in the next window I'm going to do yarn deploy okay so contracts deployed looks like it's up and running let's take a look boom we'll go 3000 same port there we go so looks completely different so uh pretty much all the demo that I did is not going to make sense but it's got the same Concepts right it's got the burner wallet right you can do the same thing you can press a button to grab funds from the faucet um you can you just have the debug contract folder uh or tab I should say where you can actually test your read and write functions you can see your variables listed you can see the contract and how much balance it has and then there's an example UI as well which is a little bit more enhanced and it's built again on next.js so uh depending on like I said how comfortable you are uh with dealing with maybe some caveats of se2 this would be an option for you guys as well so leave that up to you guys you guys can decide so that's awesome all right so we got five minutes for questions so I know there's gonna be some questions so let's let's tackle those yes yes heat content I hate all yeah and I know you didn't want to go into it you didn't want to go into it but I'm wondering is there like some kind of demo you can show on how somebody like me can get started with like the front end using scaffolding yeah yeah it definitely is a little bit of uh so you know basically the question was uh for people that are more into like writing smart contracts and more interested in the back ends and not necessarily front-end developers where do you get started uh so some of the challenges have some uh the scaffolding speedrun ethereum challenges have some level of stuff you do with the UI but let me just give a real quick run through of it so you can kind of have a start so here in react app we we have the react app folder and then we have the SRC folder uh and then inside of there there is basically the uh see the not the components folder but the views uh uh and yeah so uh app.app.jsx is kind of like scaffold eat app right so you can think of this as kind of everything that's already written for you all the variables that are defined all the functions uh all the the hooks and stuff like that are already loaded for you and so a lot of the the magic sauce that you see is is what you see here inside of the views folder is where your home jsx files so let me go back to scaffold well I don't have the other one loaded but uh you saw earlier there was some tabs right the very first tab is kind of where you would build your app so you would focus on doing stuff inside of that kind of like home folder and then the debug contracts is like for that so home.jsx is that kind of first tab that just has some kind of like examples for you and it just kind of gets you up and running oh it's getting dark in here uh and then there's an example UI area which is probably what I would recommend for you because that's going to give you some examples of how you interact with uh you know signing a transaction or sending a transaction or getting some kind of value from the smart contract or you know reading a value you so example UI and then um there is also some stuff in hints but really example UI is probably what you're looking for as kind of that that help that hand holding this gives you some examples as you go through here and you can see what they look like yeah yeah thank you yeah no worries all right what do we got what else just to add to that question because I know in the scaffold eth organization there's some very work in progress repositories for like extracting out some of you guys like the hooks and components that are being used in scaffold youth like what's the kind of I haven't read anything about it in terms of like what the long-term goal is whether or not that is something for kind of someone with the same profile of like making it really easy to have a address input or like all these other things that I've I think I've seen being actively developed on the yeah I mean I don't know what the goals are awesome ones come up here not the theory on the under the bus there yeah okay so we use but when you're talking about that accuracy there's a there's a two but it's still in its Gap repeat we need to make it into so you can just install just the address if you want so there are oh sorry yeah yeah tldr scaffold E2 has good address input and we're using wagney wag me yeah yeah I like Keith hooks all right cool what are the questions oh uh which libraries are we using for skeletons it's probably scaffolds uh next year yes for next yes okay yeah right for for like CSS and killing them and there also is a nexjs build of scaffold youth one so you can use that um if you just go in here there's an xgs typescript build it works pretty well so that if you don't want to use that scaffold D2 you still want to use scaffold that might be another option as well awesome thank you guys so much for coming and if you guys have problems let me know [Applause] oh yes get some swag get some stickers I don't even have these you guys got to get this yeah thank you yes hello okay hello everybody hello my name is I work with the ethereum foundation on a account abstraction so uh I'll start by saying what is account abstraction what we abstract and why so before talking about account abstraction let's think what is an account ethereum account first of all of course is an address uh where we put tokens nfts uh whatever this is our account obviously we have an Authentication which is is a private key ecdsa private key this account can execute stuff like send transactions send if send tokens whatever and it pays for gas it pays for guys using its own ethereum balance and all of these is defined by the ethereum protocol which means every node on the system knows it know how to do it and do it exactly the same like any other node so what we abstract what we try to abstract okay basically almost everything the account itself will become a contract so we have the contract address um the Authentication in order to abstract it to extract it out of the system is the method call it's a method called on the account we call it we will hear it several times in this talk it's called validate user up the execution can be abstract to whatever you like okay we provide sample execute method or execute batch method you can add more if you like and the Gas payment we also suck that we have a paymaster contract which again once it validates the request it accepts to pay for this transaction and the cute thing about all of this is this this is all done without any change to the core protocol it is live on uh test Nets on mainnets today so what can we do with it okay this is a very short a summary of what we can do authentication with a normal account you have exactly one way to authenticate that is sign a transaction by a single signer and if you want multiple you have problems or you have a MPC or something fixed but with account abstraction you can do a wide range of authentication methods you can choose different signatures and I gave you as an example two edge cases one of them is a simple gaming system where you want the browser to sign each transaction as long as it to this limited contract account so you want very easy signing for gaming account can support that On The Other Extreme you have a corporate account in which different roles have different access some are multi-signed some allowed only to transfer if some have limits some allowed only to vote I don't know whatever so you can have account of any of these and by the way when I'm saying use cases these are use cases that can use account abstraction we don't support any of these you as developers are here to try and find use cases that you can do all of this stuff payment again it's not the account can pay for itself this is the default but there can be a paymaster and the use cases for paymaster again are endless I gave you two highlights as an example one of them is onboarding paymaster let's say someone have a dab has adapt and he wants to sponsor the Sam request all requests I don't know of its users it's possible you can have a pay master that will accept under some condition it can decide what the conditions are and accept this requests and these requests are approved by the paymaster another example very common very thoughtful example is a token paymaster a paymaster that will pay the transaction the transaction is a native token in it but the paymaster will make sure the user has enough balance we'll convert these user's tokens into the native token and pay for the transaction so from the user's point of view he's paying with tokens but again it's not a system it's a specific pay master that decide if and how to do it other use cases you can do is a we think of are in a recovery mechanism the first and foremost actually most people don't talk about it at all is change your key think about that with normal a private key once you have an address it is impossible to be changed even if you think it might have been leaked you're screwed you either replace it completely or go and hope that no one will ever use it with account abstraction account can support change key you know every normal web tool application have changed password and as if you are even such that your private key that your account address was a credentials were compromised replace it with something new uh other more complex recovery mechanism like social recovery can also be created like you trust friends to replace your account or do a Deadman recovery or other examples we have a full talk about half an hour full hour of examples of use cases like I described here and more so you can look there this is a by the way it's a QR code of the presentation you have everything um now I'll try to drive and explain the components we have with account abstraction the first component of course is an account an account is a contract that performs the logic of validation and execution we'll see it in work the second component we call it an entry point users don't see the entry points at all developers know about his existence this is the this is where the magic happens this is the on-chain contract that performs all the validation and it is trusted by the contracts uh the next component again it's a contract is the paymaster as I said a paymaster is a contract that accepts to pay the gas fees of some transactions uh on the second row we have user operation actually I'm saying in this talk transaction interchangeably with user operation we call our account abstracted transaction we we name them a user operation so a user operation is equivalent of transaction you filled all the data in it some more data than normal transaction you sign it using your account signature whatever signature system it uses and you submit it the next component we have we call a bundler as we said we didn't change the ethereum network we didn't change the protocol there are still nodes to run the system but in order to put user operations on the network we had to add another off-chain component we call a bundler you can think of a bundler as a node we actually believe that in a production Network it will be run adjacent to a node it's a functionality of a node to put user operations on chain lastly the last component like in any ethereum decentralized network there is a mempool again it's a main pool of user operation not a mempool of a transaction and it is important to understand the system but usually and not interact directly by users or Developers now let's look at the flow how a user operation is executed the big component here this is a my wallet this is an off chain it's a think of metamask or a soul wallet or any other wallet that they implements account obstruction and the wallet creates a user operation it has many fields as I said like normal transaction and several fuel new fields we'll see later but like paymaster and the signature depending on my account a the user operation is sent into the mempool like normal transaction but this is a user operation mempool the bundlers are looking probing this a mempool and they pick up the user operations they want to put into the next bundle the next block they want to sorry bundlers as I said are off chain think of node it's a node it's a node with a special functionality of being a for supporting user operation supporting account obstruction anything you ask Alex for you to use ethereum do you need to be a node okay the same answer whenever because as I said user operation is a transaction a bundler is equivalent it's a little different but it's equivalent to a node so you don't have to be there has to be nodes in the system or there has to be bundlers in the system to support it now so the bundler picked up user operations and just like a node if you think about it a node takes a set of transactions validates that the balance is correct the signature is correct and the nonce is correct and then create a transaction the bundle does just the same it validates a transaction but the way it does the validation is a bit more complex this is the simulation phase it calls a method in our entry point which calls the validation function the validation of the account and the validation of the paymaster if both these methods say okay this is a valid transaction that means the signature is okay it means the nonce is okay it means that it has it will pay for the transaction someone will pay for it the entry point will validate it it's a call on the entry point it knows that this is a user operation is valid so the next phase after validating actually each of these user operation it will go into the execution phase where it creates a transaction we call it it's a method called handle Ops it gets an array of user operations and it creates a transaction with it and put it on chain what this transaction will do it first repeat the validation of each user operation because we don't trust nobody to do anything of chain we call the validation all the validation repeat exact same validation we did the bundle did previously off chain and if they all succeed we continue to the execution phase we call the execute method of the account whatever it written there and then you can see that for a paymaster we also call what we call a post op a post operation so that a paymaster has a method called before and after the transaction the method before first validate and then it can do other stuff like you know reduce the user's tokens to make sure that it will be used and at the post op it will refund whatever the access that was not in use the account execution of course executes a transaction so this flow is done for each user operation yes the message sender is the bundler of the a entire transaction but for each user operation the execute is an execute method of the account so if the account execute token dot transfer because I want to transfer Tokens The Token says me the account contract as a sender the transaction.origin will be the bundler the msg.sender will be the account yes the account the account is wrapped there are two gotchas okay I'll get them in a moment okay this is one of them yes it's deprecated with the count of structure it becomes even more useless there is no good reason all the good reason to use the X origin are actually wrong if you think you're protecting yourself by somehow using TX origin you're wrong because it doesn't protect you so the way so if you want to block account obstruction or a contract a account then use it go ahead but if you want to protect yourself against replay against bots again you are not uh yes use message dot sender okay the transaction itself is paid by the bundler because it is the one who put the transaction on chain but the logic of validate user Opus we will see in a moment that the account is supposed to pay for itself so the account pays the bundler yes the bundler pays the node and as I said a bundler and a node the distinguish is a blurred and they're usually the same entity so yes it pays for itself for the execution and gets an extra by the account itself that pays for the transaction no if you think about the incentive model of ethereum how why do transactions get included why do a transaction cannot be uh censored because there are nodes out there that eventually will take out of the mempool transaction the same is true for bundlers these are bundlers are not ours that we Define the spec we create a reference there are already five implementations of bundlers we are working on the code that they will work with the mempool yes it is still work in progress but the usable as they are today so again eoa against user operation as I said account itself with a counter press it's a contract instead of ecdsa it is secured by its own code to do the validation uh a wallet with normal accounts can do a single operation which is approved approve everything because you sign whatever it is with account abstraction you have custom UI you have custom logic in the account itself to do whatever you like mempool mechanism generally it is the same it is different object accounts and the block Builder is equivalent to bundler and a its verification is a little bit more complex because it does a view call but otherwise it does just the same now I go linked a little into the contract itself the only method an account has to implement is validate user up yes of course you need to do some execution but it is not we as a the as we write the ERC 4337 we Define the interface the concrete interface between actually the entry point and the accounts how they call the accounts so we Define that an account has to have this validate user of method this method received the user version itself it receives the hash of the user operation that can calculate it but we already need it so we pass it to the account itself and someone asked about payment missing funds the account has to pay its sender which is will always be the entry point it will receive the amount it needs to pay how much is already missing we maintain a balance deposit within the entry point if you have enough or if there is a playmaster you will get zero for these missing funds otherwise you have to pay at least this amount to cover your user operation this is that this is the code of the base account it's a the base contract you don't have to use it but I think we think it's very easy to use it it templates some of several everything you need to do so we of course require the call is from entry point you will get graved and some will steal your money if you don't do it uh we call this stop method we'll see in a moment to validate the signature it will validate the nodes if needed and pay prefund is pay this amount if it is not zero back to my owner so validate signature is a the method I need pack validation data is a helper method needed for use cases like gaming if anyone want uh are we not going deeply into that but you can have you can Define that a validation is valid for a specific range of time like if you have a game and you want that your transaction will be valid only for half an hour from now there is a way for a wallet to convey that information back to the entry point it is not allowed to use directly the timestamp of codes but it it can return it using this method um so this is as I said this is the base account we have and we also have a simple account which is a concrete implementation that uses it and tries to emulate an eoa as much as possible it uses simple signature it uses the same signature using a ethereum signed message so that you can even use metamask sign message to sign it so this is the actual code of validate signature it takes the user operation hash it adds the ethereum signed message prefix this is an open Zeppelin a helper it does easy recover if it is the wrong sender it fails otherwise succeeds a little note about this method it can result revert is also a way to say okay I failed we did add a different mechanism to report a signature failure because we do want to be able to do the equivalent of each call you want to be able to take a transaction and call your Deno like you call the node you call it call you to make sure that transaction succeeds you want to be able to do the same with the to estimate or simulate the user operation before the user signs it and there is no way for us to tell that uh the account itself that it doesn't need to sign that we give it a transaction with wrong signature the hand doesn't know it is called the it's very important in our system it doesn't know it is called off chain or unchain it behaves exactly the same so what we say is that if the signature is wrong it simply return an error it is the it is the entry point to decide which knows this is a simulation okay I return it even though it's a signature failure or is it a real execution I will revert this transaction because it's a wrong signature a these are the basic execution methods these are actually very simple again they require from entry point so that only the entry point can call it it can be entry point of owner because we make a wallet also callable directly by its owner without account subtraction and there is an execute batch we created which get an array of destinations array of a function and someone might say okay why don't you pass value here I said you're completely right you are free to take this simple account add a different execution method and use it the this is not part of the framework this is a sample a sample account you can add as many functions as you like to the account and okay this is a the implementation of a base pay master just like an account we have a template method of a validate a paymaster and a post-op okay these These are the contracts now the contrast can't walk alone each contract has to have a wallet that works with with the normal EOS you have exactly one account type so every wallet with work with that just one account type which is eoi with account abstraction we have different account in each account need a wallet and by wallet I mean the desktop probably Chrome extension or whatever and the account is what is the contract so each account need a contract so sorry each account contract needs a wallet to work with yeah so to help a hackers we created a project boilerplate a Chrome extension we call trampoline which can help you a create a new account um it is inspired by Tallyho and a metamask but it is written from scratch and uh So within this framework you can replace the account contract and you can replace the ux that works with it this is a ux that works with the standard [Music] a simple account so the basic component with an account API that gives a high level JavaScript apis we need in order to work with the account and it also we also provide three uh ux react components onboarding is a weeks that will pop up when you create the account like if you want to collect some information from the user or nothing if you if you are silent you don't need to collect anything transaction is the ux that will pop up whenever you send a transaction and of course sign when you create a signature now a simple account is to implement several things in order to support a contract the first is the the init code because very important part of an account is to be able to deploy itself so uh it is this a account API that knows it's a account implementation and know how to create the Constructor so it creates the contracts The Constructor signature now in order to create a transaction it meets first to get the nuns the next nuns it will be used again this is not some standardized it is the account to implement this method underneath and we need to encode the actual transaction once it creates a user operation with this method we need to sign it um again there's an onboarding which is an asynchronous ux that have a method to call if it needs to collect data in order to send a transaction and then the transaction itself can modify the transaction just before it received okay it is called just after uh send transaction is called by the application the application calls and transaction this provider receives this transaction uh now this looks like a transaction but we convert it and create out of it a user operation that will look like a city come from the account and it submitted a into the blockchain so let's see how it looks here okay first of all in order to install it I'll need to disable my metamask enabled developer extensions and where am I okay I'm here in the trampoline project I should do yarn start I already started it so I can do it and inside this trampoline project I've load this unpacked uh the I love the build folder it's a Chrome extension the Chrome extension is built as a framework it's innocent extensions so this is the framework that I want to create an account this is the first customizable page as I said this is the onboarding page you can put whatever you like here you can see this is the onboarding I can open it in a add if I want to collect more information the output of this is a context and this context is passed to the account to create this sample doesn't need any no it creates a private key it creates a private key and a address and pass it back to the account no out of this account I can see its address and it is not deployed I don't have a sample here with a paymaster so what I will do is I will send a little if so it can be deployed you can see how much it's a it's a it's a Max limit how much it needs to be deployed it doesn't switch all right I will send some if to it okay I hope girly will get it fast now okay good for the demo okay now I have some if in my account I can deploy it here but instead of deploying I want to send the first transaction I'm open a I open etherscan this is a a pre-deployed standard greater sample and I'll be losing this application I want to call this a set greeting I will connect sscan to my account it says metamask sorry for that and this is a extension pop-up connection request we will accept it and then we can send and I can put some message in again this is a this is again this is the stab sign-in account we can remove it completely or put if we want to collect more information now I see again the transaction data that I want to approve I could escape the framework can be said so you will not show this transaction I would say I didn't pay just a second okay it means it is a little more expensive than what I passed it great for sample sorry already out of time yes okay they tell me we are out of time I want to show you some transaction let's so a we didn't build it alone we have a lot of Partners who worked with us a stock app Alchemy and others build the bundlers zero Dev candidates all wallet already build an effort spot build some sdks and tools you can use a trampoline you can those sdks if you want more resources you have them here if you didn't copy the QR code before this is the bigger one so you can use we will be here outside if you want to ask more care questions and thank you foreign hello hi there okay so uh I'm Jason and I'm from airstack uh and we have uh depasion sarbish two of my co-founders uh so today we're going to tell you a workshop on how to build uh more data aware applications using air Stacks technology we're going to make this uh very Hands-On uh demo show um show the apis show you how to how to work with them if you have any questions on the way raise your hand and so overview airstack so we provide web3 data apis that enable developers to easily integrate blockchain data transactions token balances on-chain off-chain activities into your applications and the idea is that you can just rather than having to run a lot of infrastructure on your own you can just query our apis and integrate directly into your systems or into your front end um the agenda we have today is I'm going to do a a quick show of the uh the cheat codes the AI um And Then Depeche is going to show you how to use the apis uh the way um writing basically how they're how they're formed what's in the apis and be able to uh use the full functionality of them so we'll go through after the AI review how to get your API key the rate limits that we currently have uh the docs for developers uh headers what's in the apis how to create queries with nested queries pagination how to run queries directly through your API key uh how to run scripts if you want to if you want to add let's say you know hundreds or thousands of addresses at the same time and get responses and then we'll conclude by showing everyone just review of the ideas and bounties uh using airstack any questions before I get started okay um so let me depech how do I get to a browser cool all right so if you go to airstack.xyz um is our internet working let's start with that there we go um let me make sure the Wi-Fi is off first ah there we go there we go okay so if you go to airstack XYZ uh connect with C should we turn the lights down a little yeah better okay so if you go to air stack uh XYZ uh it's app app.airstock.xyz you'll see the home page is if you want to learn basically start with other people's queries you can see there's a community shared query so after you create a query you can publish to the community you don't have to so by default your queries are public you can save them to your own account but if you're proud of your work and you want to share with others you can just click the publish button afterwards and share your query publicly for other people so for instance here's a query that sarvesh did earlier today so it's the collection stats for Moon birds and I'm going to run this query and so I can if I wanted to I can just you know forecast query and use it or edit it so you don't have to start from scratch if you want to start with a community query um and then uh just to show you I'm going to sign the best you want to sign in real quick I just want to show the AI so I just want to show everyone the the cheat codes real quick um if you're on the query Explorer page uh you can use our AI engine to create a natural language query um it's uh we're running gpt4 we've been training for the last four weeks or so on the our graphql which depech can go into in detail but you can write a natural language query on the air stack system so I can write for instance show me all nfts currently held by metallic Dot eth and the images of the nfts and the AI will generate the query for you it is about 98 accurate on anything that we have in API for and it's about zero percent accurate on things we don't have an API for so if you ask it um you know what tokens is Obama holding it's probably going to come back with nothing but if you ask it uh let's say to give you information about any uh nft collection any token any ethereum wallet any ens it'll get it right um and so here's the query and uh it is there's the response and then you can see in the response here there's also images resized in the it's the internet but usually we can hover over and see the image as well there you go so this is one of vitalik's nfts um so this is the the AI system is intended as a way for you to get started very easily so you if you're not comfortable with graphql you can just you know use the AI assistant or even if you are comfortable with graphql you can start with the query through the AI and then edit it and can add other dimensions to it um but let's back up a little bit and Depeche will show everyone the Nitty Gritty details of the apis uh what's in them and as a developer how to make use of them sound good any questions before we roll into it I talk very fast you can slow me down if you want all right go ahead thank you Jason sure so let's see you know what is possible with this apis and how as a developer can make use of this resources available so as a developer you know this is the starting point where you have to come to app Dot abstract.xyz ah the different functionalities are already you know you already know Jason already talked about it so here we you can see there is API docs so once you clicked here you will be taken to the Doc Page is it better here so here you can see uh first of all you know I would like to encourage everyone to join this telegram group we have a developer chat so if you have any questions related to air stack you know that's a best place to contact us and we will make sure that we reply to each and every messages let's jump in so this is a quick start so the UI which you saw here right the Explorer so this is our graphql client but in case you want to use any other client even that you can use it so but we recommend everyone to use app.stag.xyz in case you want to use Apollo Studio or any graph iql clients you can just use this API endpoints this API dot stack.xyz slash graphql gql is the endpoint where you can hit the queries currently if you are not logged in you have not created any uh account so current the rate limit is 50 request per five minutes but if you log in you will get uh once you log in you will get a header key authorization key that you can use it with every queries so there you will get the rate limit of 50 request per minute okay and if you want any higher rate limit then definitely you can reach out to us and we will provide that currently uh one information like you know currently we have ethereum synced that can be used for development as uh in the hackathon and currently we are syncing polygon uh it's still syncing but we have made sure that we have the live uh transactions available so that hackers can use the live transactions and work on create some apps on top of it uh any transaction that happens uh it will appear in Aztec apis in less than a minute so it is pretty fast like a minute is also a very high thing but it it should be in some seconds itself all right moving ahead uh I will give you a walkthrough of the apis that is available and I will describe you you know what this apis are capable of so before uh going to this apis I would like to you know give you a walkthrough on how our schemas are built there is a certain pattern which we follow and there is also a nested queries how we can get multiple information of of multiple information in single query so let me give you a quick walk through here so here you can see uh all the queries are listed one common pattern you will see everywhere is this input so this is where you know we provide the input we have four basically four Fields one is blockchain on which blockchain you want to query currently here we can see ethereum but after some time we will get polygon as well then there is cursor the cursor is more related to pagination so if you want so current we have a limit of 50 records in one query but you can get more data using pagination so this is where uh a cursor is used so it's just a string you can just add it and you can get some other page then we have filters the format here is we have and or if you if you want to query something you know which is give me something some uh token whose address is exactly equal to given address then this is where we use equality and if you want to use multiple addresses you can just provide an array so we use this in comp in operator and similarly we will have more operators like you know depending upon the use case let me go to stats here you can see uh that is greater than less than in all these are the comparator comparators so you can use this as well so this is the format which we have in our schemas any question here all right I will move forward now in this document you can see we have various apis so let me you know give you a very high level walkthrough one by one so token API so token API is uh uh if you want to get information about any token high level information for example name symbol decimal total Supply this is the API which you are going to use it uh here you can see uh there are more details uh but you know the major in majority you know you will need name symbol decimals so this is something I can show you uh I can just run this query so here you can see you know I have provided the address on ethereum and I got this name symbol decimal total Supply transfer block can last transfer time stamp so yeah token related information you can get it from token apis in addition to uh uh tokens if you want so tokens can be like erc20 721 1155 if you want more details about 721 and 1155 this is where we have the token and nft apis here you can get some uh option data as well for example uh metadata generally they are kept on ipfs also also the images generally you will find the images on ipfs so you you can query all this data through our apis uh one more thing we provide is the images the nft images you can get it in a four version so we resize the images and provide it provide you in the four sizes to give you an example here uh let me take first this example this is a very interesting example so I will just spend some more time here let me explain this query so I'm I'm trying to get uh token nft its name its symbol then I'm trying to get its metadata its attribute type than images these are the four dimensions predefined Dimensions available in addition to that we are also trying to get nft sale transactions so this is a nested query this is example of nested query so the NFC nft sale transaction is something you know you can have a different uh query itself but in here in this example you can see like you know within a one query you can just uh query a lot of information related to that token nft uh one more interesting thing I would like to highlight here so here I'm querying based uh acquiring the uh and trying to fetch token nft based on this criteria that is I'm saying give me a token nft for this collection where it's metadata's trade type is equal to background and its value is orange so here is a best example how you can query an nft based on its traits values as well let me run this no I think Internet is slow trust me guys apis are fast ah got it uh so here you can see uh we have the metadata information trade type its value we have the images extra small large medium original then we have here you can see uh sale transactions you know what was the uh at what price it was sold so these are the information which you can extract from token nfts API then token balances so here you can query you know uh what are the different balances a particular wallet holds so you can get erc20 balance you can get you know what are the different token nfts they have or particular wallet have and what are the token transfers so this is a very straightforward API I can just run one of the example here I think we already have seen this one I will just copy paste it I will run it here you can see you know we are getting very detailed information like you know what's the token type what's their name and uh how much amount they hold so this is this is this is how you can use token balance API then we have domain API so this is more like you know you can run the queries using very user friendly names instead of address uh to give an example ens is one of the projects so Enis is one of the project which we have indexed uh we will be indexing more so all the apis which we have this they can also work with ens and here I can get more information related to ens project like you know what was the payment token used at what price it was bought you know when it is expiring what's the name what's the primary in its name all this information we can get from uh domains API then we have a wallet API so this is a very powerful API you know here you can get a comprehensive data you know just provide a specific address and it will give you you know mere information example uh what's their other social about their different social profiles what's the token balance was that what were the token transfers uh nft sale transactions all this information you can get it I will give you uh one example here this is a very nice example so here we can see uh here we are providing an identity key so here it is like you know when we provide an input we can provide either address ens name in we can also provide a social profiles name or ID for example if you have forecaster you can provide for custom name or for cluster ID and then our apis will just take this name it will resolve you know you know what are the addresses uh that name has and then it will give all the data it will go and fetch the data and provide you the information memory sorry can you filter between the camera sorry I did not get it this for the transfers January today um yeah on block number yeah how do you filter for time range oh you want to know like uh if you can use an example you can use an example but like how do you filter that for the time range let's say January to April or something uh I see so you have to basically convert the block range into Unix timestamp but you have to figure out the block number by yourself I guess so unique Samsung or something yeah so if you uh if you uh if your question is like that like you know I want to get a token balance between a particular uh time range or or historical value right yes yeah so that is something you know we will be enabling that that is the balance snapshot where you can uh query any valid historical balance so uh it will be possible for you to provide the block range like start block number and N block number and what was the you know balance between this range or uh even it can work with block timestamp so it will be like you know you don't have to know you know what's the block number of a given timestamp everything will be taken care of it so this is the API which is under development uh and we will have this API very soon so that will be possible this is uh we call that call call it as uh historic balance or balance snapshot here thank you time right right all right moving ahead social API using social API you can query the data of social apps for example forecaster we are also indexing lens that you will get it after some time so the details which you can get it from the social API is like you know what are their profile names IDs and what are the different connected addresses or Associated addresses with that so this is what social API is uh token transfers so this is uh quite straightforward like you know any trans any token transfer you can just query it uh what was what was the token which was transferred between the addresses then we have nft sale transaction So currently uh if you want to know you know if a token was sold in a particular Marketplace for example openc or variable this is the API which you can get the data from So currently we have indexed openc and variable and here you can get uh uh you can get you know what was the payment amount uh what was the fees paid for that transfer and what was the royalty fees uh what was the platform fees and we also converted into USD and USD value and just provide all this information uh all this data uh using this apis uh then there are stats related API so basically you can you can just get the information like you know what's the highest sale price what's the lowest sale price what's the average sale price of a particular collection and this stats you can get it daily basis weekly basis monthly early and lifetime and to just give you a high level detail like daily starts like everything is in UTC timestamp and daily starts from 0 am like midnight and ends at 11 59 PM similarly for the weekly it starts on Monday and ends at 11 59 pm on Sunday and monthly you can just understand that this is the first calendar date and calendar date so this information is also available we also have information related to data related to Marketplace stats so you can also query you know so what the uh what's the highest price lowest price on open C or on variable so this this this API works at the marketplace uh uh level so you can get this Marketplace data as well uh all the stats similarly we have nft stats so at the token um other token nft level you can also get the similar stats uh coming back to uh this identity API this is very powerful uh so all the queries which we saw wherever you see you know where we have the owner address you can query uh you can make a query based on either ens address ens name or if you have forecaster ID for customer name you can just provide this and all the apis would work all right uh let me uh take one more example suppose you want to query uh on multiple chains so you have to query some information from the ethereum chain as well as polygon chain using one Epic even that is possible uh So currently this is not deployed on the production so you can't see this but this is something we will push it uh very soon so you can see the query here right like I'm trying to get token balance of italic I'm providing his ens name on ethereum and the second query is in the same same we have this aliases where we have ethereum and polygon as a labels and here you can see we have changed the blockchain to polygon and if I will run this you can see this ethereum and polygon this is how you will get the data and the token balances you can see this is the blockchain and different tokens and its amount similarly for the polygon if you will see we will get the similar data so using one query itself you can get data of the multiple blockchain so whenever we will enable more blockchains you will get all this data there now coming to do we have time three minutes three minutes sorry anyone essentially can find us afterwards the specialty right outside and walk you through and also come to our table good I have a question guys uh hello uh I would ask a question um are you centralized servers yes yeah so I can't run my indexer on my own computer not right now and do you plan to centralize it in the future okay thank you all right oh so there was one example you know which we wanted to uh you know I will just take just one minute and I will just say say you know how you can quickly do this so uh what you need to do is uh you just sign in after signing in you go to profile setting go to view API key uh this is where you will get the API keys so this is something we need to pass this in the header uh against the key authorization and this is where your apis would work with a good rate limit uh and very quickly here this is an example this is a node.js code so I can so this link is available like it's a GitHub repository it is available in the GitHub repository you can just have a look there so this is a query where we are running uh we are trying to get all the nfts of a particular of multiple owners uh and there is some page relation pagination logic as well if you will just run it yeah here here you get all the response all right I will just uh all right so thank you everyone if you have any more questions uh Depeche and sarvesh will be outside and at our table we also have uh bounties that are available um it's linked to uh from the youth Global prizes page uh as well as uh if anyone asks just comments we'll send you a notion page that has information we also have suggested ideas and uh projects to work on if you're looking for inspiration all right any questions real quick all right thank you everyone appreciate it thank you hello hello GM Tokyo everyone my name is tomiwa and I work at safe and I'm going to talk today about make how to make a group wallet for buying things with friends using smart contract accounts and safe core account abstraction SDK so a while back me and a couple of my friends we went on a ski trip together and the trip itself was fun we went skiing we had some great food we had to stayed in a nice Airbnb but there's one part of the trip that I really didn't like and I found super annoying anybody know what it is whenever you want to go on a trip with a bunch of friends what is the most annoying part of the trip splitting bills exactly so this is a screenshot that I message tags group chat that we had of trying to organize the payments in the bills hey pay me this for the food don't forget to pay me back for the tickets Airbnb why would you pay you back and I was part of the problem too about a week after the trip a friend messaged me saying hey you still haven't paid me back and so let's figure out why it's splitting the bills so hard so let's say for example me what's your name bankless Brazil Juan John John and what's your name saki me John and Saki want to go on a ski trip to Mount Fuji together in beautiful Tokyo what do we have to do tickets what else do we have to figure out Logistics food where we're gonna stay right so just the three of us we're only going on a trip together we have a lot of payments we need to figure out so maybe I say I'm gonna pay for food John you're going to pay for housing maybe what's your name again masaki you're going to pay for the tickets right so I pay so you pay me back for this and I pay you back for this and it's just a huge mess and this is why we have these kind of text iMessage group chats where we're just trying to figure stuff out now what if we could just basically create a group wallet right where you know I forget all this stuff we just create a shared bank account where we all send our money into and then one of us can say hey I'm gonna pay for the I'm gonna take money out of our shared account and pay for the food or you can pay for the housing you pay for the tickets and then we just basically create something like a group wallet and another name for group wallet is called a multi-sig exactly and this is a very simple concept but you can actually think about it has very powerful implications so one example of this is you could do the same thing instead of maybe using to pay for a trip to Fuji you buy the US Constitution sounds crazy right but then a group of people used exactly the same concept um to Constitution Dao they raised 42 million dollars in seven days that's six million a day let's take it a step even further what if you created a group wallet for Investments and what if this group wallet had 10 trillion dollars assets under management what am I talking about BlackRock so a lot of people don't think about it but BlackRock is a 10 trillion dollar investment company that actually has that basically functions exactly like a group wallet here's another fun example for you guys what if this group wallet at 800 800 billion dollars 125 million people contributed to it and it had 700 signers anybody know what kind of what I'm talking about Finn do you know Japan Japan is basically a group wallet it's a multi-sig right you have the parliament it's about 700 designers population 120 million people you take money out of the account to pay for pensions student loans military or self-defense Force things like this so with this very powerful concept you can basically create things all the way from paying for an Airbnb trip to basically running an entire country so how does it work at a fundamental level let's make it simpler again back to the group wallet example so the first thing we need to do is create a group wallet then propose a transaction and transaction can literally be anything which is I want to pay for food I want to pay for military anything you want to do you can propose a transaction someone confirms it so for example I say hey John I want to pay for the tickets for the to Mount Fuji then you say yes I approve this transaction it gets executed and the money gets sent out so we're going to talk about how to do that using the safe core account abstraction SDK so so we're going to start first of all start off with the protocol kit which and the beauty of the protocol kit is that who here has does not understand solidity very well okay okay so the beauty of the Pearl pocket it allows you to basically deploy smart contracts and even interact with smart contracts without having to write any solidity code as long as you understand typescript you can basically write not write smart contracts but interact with smart contracts auth kit on ramp kit off kit for authenticating we'll get to these later but focus on the protocol kit for now and then yeah so these are all the docs I'll have some slides up later on you can link to the QR code so the first thing is sometimes you know one of the things that holds a lot of people back is hey I'm looking for a design I'm looking for a front-end developer you can just clone this repo that we have which is a super super simple UI kit that you can basically just use to like add in additional features so that basically takes care of the UI for you so you can focus on the functionality so the first thing you want to do is install some skits so the protocol kit API kit for basically interacting with our API service and then the SDK types if you're using typescript which I recommend also super important if you're going to use ethers 5.7.2 6.0 came out which is still not compatible with a lot of stuff I see you're not in your head yeah so this is one of those things that if you don't know it's a very hard bug to fix so make sure you use a 5.7.2 then you want to basically start using um the regular packages so this is actually outdated we're not using safe service client anymore this just changed like literally a couple days ago so it's API kit not safe service client and it's gonna be protocol kit not core SDK the next thing you want to know is um configure the blockchain network so one super cool thing about safe is that if you want to basically support polygon and gnosis chain and by the way a little bit of alpha you probably should because then you can basically get two Bounty prizes all you have to do to get it qualify for additional Bounty prize is one thing RPC URL all the rest of your code can be the same you can support multiple chains with just that simple thing um this slide says 12 plus networks we're actually on more chains as well but from from UI perspective these are the chains we support but if you go to the safe deployments repo and you can find that linked as well we can support I think almost 100 chains so if you guys are trying to like you know get a lot of money win a lot of bounty prizes you can easily Stack Up by deploying on Save because we support so many different chains cello as well we support cello as well all the all the different chains that if I'm compatible we support most of them so then you import your packages this part is pretty self-explanatory the next thing you want to do now is basically um get the eth adapter so the beauty of safe is that you don't like do a lot of connections yourself all you have if you already have metamask installed this one line of code will basically take care of everything and it'll figure out the chain the network you're on things like this all right so then first thing we want to do is basically create the wallet so like I mentioned earlier on you want to get access to basically whoever's currently logged in your metamask you basically can get the eth adapter from that and then you want to basically then just deploy the save and so as you can see here once you've gotten the eth adapter deploying is safe is just literally to one line of code say Factory without deploy safe and then you have your safe deployed and then another like little Pro tip I'll give you guys for when you're debugging your code is put lots of console.log statements so for example like one thing I was trying to do is I have the block Explorer the transaction service and then the safe app so this way like if you're trying to figure out like making sure it's actually deployed you have like basically three different sources of Truth you can check to make sure that it was actually deployed so if you're in the deployed safe yeah so then you can check it on on the safe app or then etherscan all right so then back to the example so now we've created our wallet um but now we need to talk we propose a transaction but the problem with this is that a lot of this interaction currently right now still requires you to like be very familiar with blockchain web3 Technologies but like what if you wanted to create something super simple like so simple your mom could use it what if you wanted to create okay proposed okay I got a Galler had so proposing transaction as well so like I mentioned earlier on you have to propose hey I want to send money out of this you have to confirm that yes I want to confirm this transaction and then you want to have someone execute the transaction on the blockchain and then so the pro and the beauty of this is that none of this stuff actually happens on chain until you actually execute the blockchain so you don't need any gas fees anybody can just basically create a transaction sign it I'm basically using the following steps get the transaction hash you can sign it afterwards and then you confirm the transaction so basically to verify that and this is also like a two-factor this is like a kind of a way of having two-fact authentication right because even if my private Keys get hacked the money could still save because then your privacies are safe your private keys are safe so you can swap owners things like this so it's basically convenience and security so you can confirm the transaction using the safe API kit to get all the pending transactions and then you can basically execute the transaction on the blockchain and like I said again when you're writing your code I really recommend you use lots of console.log statements so make it a lot easier to debug things and then yeah so then you can also get the list of pending transactions to see what you want to confirm or deny and then again you can always basically verify things on safe on our transaction service or on etherscan as well so now let's go back to the analogy I mentioned earlier on right so with this simple technology like I said you can do things like buy the US Constitution literally by the Constitution and run a country but then what it's still but again this still requires you to understand private keys to understand you know all these kinds of like Hive gas all these kind of stuff but what the goal should aim for is that we want to basically create an app and the challenge I have for all of you hackers here today is can you make an app they could just basically take a phone give it to your mom and be like Mom use it is that possible right now not really but now with safe account attraction SDK it's possible and I'll tell you how so like I mentioned earlier maybe again we want to go to Mount Fuji maybe instead of majuki reward with majuki's Mom so me mijuki is my you your mom and your dad want to go right so hey Mom we're gonna do a group all in okay okay but then this uh okay um so you ask your mom create mom wallet right okay so do you have a metamask you have seed face what's that do you have a Google account perfect you can use the auth kit okay next we need to send some money do you have a gas do you have a matter should you have East you have BNB no what's that okay do you have a credit card perfect use the unwrap kit okay now it's time to pay for the executed transaction you know what gas fees are right what are gas fees okay don't worry about that we used a lot of relay kit so every single thing that your moment or you would have to learn to use a web3 app has been abstracted away if you can use a bank account if you can use a WhatsApp account if you can use a Facebook account you can use a web free blockchain so it's like web to ux with web3 tech so let's dive into a bit more detail on how that works so now we're going to talk about the auth kit for authenticating ourselves on ramkit and then we talk about the relay kit and I think the beauty of this too is that a lot of time people think safe is just for multi-six you can even use a save for like a one of one and so for example like you could have a safe and so why would you do a one-on-one with the safe if you're if your private kicks get compromised you can just swap private keys without moving all of your assets out so let's start with the auth kit right so again maybe your mom doesn't have he doesn't even know what a seed phrase is he doesn't know what a metamask is but she has a Google account or she has an email address log in with the auth kit and again it's very few lines of code you can basically customize the modal use the open login adapter and they can just basically initialize and then once you're initialized with web3 off you can basically just sign transactions using using the provider and the current signer okay now which next part is basically on ramping so again a huge problem with you know crypto is how do you get people on on ramped well most of us already have credit cards so with stripe and using the um the on-ramp kit you can basically just use stripe to basically have easy on-ramping it does it's only available in us but um yeah so yeah so then you can basically use the online and again and then this one's even easier because a lot of the work has been taken care of by like the stripe iframe modal so it's all literally just two lines of code really knit and open and boom just like that you can unramp people with a credit card and then finally the gasless transaction speed so again another huge problem people have is gas fees right so you know how like even even if okay now I've unramped with the credit card and I bought usdc now I need to have manage I need to have polygon I need to have eth well now with the sponsor transaction you don't have to do this so you can basically just say that anybody who wants to interact with my blockchain I put maybe through usdc or five usdc and I say all the transaction fees have been covered so you don't have to worry about this and then so this is kind of an idea of what it would look like so basically here you can basically see the steps involved so basically just defining the trend and the beauty of this too is that when you look at the code actually everything that you would do to create a regular transaction is gonna be the same for relaying the only difference is the operation.call um I forget where that line of code yeah right here operation type dot call everything else is going to be the exact same as you were passing for a regular transaction and you probably won't increase the gas limit as well because it's going to be a little bit more complex but besides that like if you can execute a regular transaction you can do a sponsored transaction as well and this is kind of just like a little bit more detail on like what kind of like what what um what data you're encoding in the execution transaction call and this is an example of what it looks like and again so the really cool part about this here is you see account three executed this transaction but they literally had zero marriage in their bank account but you can still see here the contract um was the gelato Network relayer basically moves from our um multi-sig to our destination address ew yes and so with all of that I'll get taken care of on-remk taking care of we like it taken care of we now have a mom wallet get a trending hashtag and then so that kind of concludes the bulk of the talk and then so now we can have lots of time for like questions answers things like this a couple things I want to give you guys um so these are some developer docs if you guys want to scan that real quick boom um all right who wants some Alpha no one all right oh you want Alpha okay I'll give you guys some Alpha um so yeah so first thing is lots of bounties and I think the super cool thing about building on safe and why I think all of you should build on safe is that in terms of bounty stacking and like sponsor stacking saver is probably one of the best tools for that right like if you build on safe you can build on almost anything else so for example with gnosis chain um you're actually giving two thousand dollars for building on safe so if you build on safe and you build on those automatically getting 2 000 additional bounties polygon as well we support polygon mainnet and we partially support um polygon I mean we support polygon Mumbai as well too so that's another bounce you can get ethereum Foundation you can get that as well and also we're deployed on cello as well too so you can also get cello bounties so if you're trying to like you know get some bounties build on safe um so yeah another cool thing about safe is that we have um sponsored transactions on those chain as well too and actually if you download the safe space all the like RPC URL transaction Services already there for you so if you build something on safe and you actually want to get users and stuff you can actually get their gas fees covered and yes another super cool thing is super fluid so we're also doing a wave pool with super fluid so again like talking about like just stacking more and more and more and more bounties we're doing a wave pool with super fluid so you can like build something here with super fluid and then and save use it at e-tokyo and then after Tokyo submit it again for the wave pool also we're hiring so if anybody's looking for jobs you know apply for jobs it's safe great place to work and that concludes my presentation [Applause] questions yes John yep so there's a couple ways we help with account abstraction so I so like the way the way we Define account abstraction is that basically abstracting the differences between the web between the web 3 ecosystem so we help because again like you don't have to worry about gas fees and actually with the relay kit you can use your lotto or you can basically like try to implement 4337 and I think with 1.4.0 and I think Richard probably can confirm this we can also support 4337 without the box too now and it's to put on girly testnet yep so there's two ways um you pay it yourself so like in the previous example I had a balance up there so like for example I could say I'm gonna like cover like three dollars worth of gas fees for anybody that interacts with my with my smart contract or it could be sponsored by like the chain right so like again a lot of these blockchains like the same reason people are doing bounties they're trying to incentivize people to use their chain so like just like read it with noses chain noses change is basically covering the cost of all transactions on the noses chain Network so for example for me I would put like yeah in your way so I would like to deposit like three dollars into the safe the gelato like bank account like a credit basically and then you prepaid exactly rights like uh right exit rights yes so I asked the question again the distinction between an abstracted account and a doubt right yeah um and so like so like giving exit rights to a dow in this account abstraction yeah the layer on top of that right um if I understand your question correctly you as an individual can have an account abstraction and your dog could also like an account extracted wallet and the Dow could also have an account protected wallet so a dollar like two separate Concepts the dial uses a wallet and the wallet can be account abstracted like in like the safe that's I guess what I'm struggling with is like let me say how do you do rage red so the Zodiac so zodiac has like modules that you can add on to this so you can Google like gnosis zodiac will show up and you can basically add zodiac modules onto your safe to add your functionality um there is like it's still in like an experimental stage so there are some modules that like it's not really ready for production use but you can like try them out and I think if you use like 1.4.0 which is on girly now you can support 4237 you have to add your mod add the modules yeah by any module I have got the model user operation yeah this is I think you'd either have to whitelist it or I can maybe show you an exclude example afterwards and I can show what I'm talking about any other questions okay I guess that's the presentation thank you very much [Applause] all right can everyone hear me okay okay good I'm sorry I'm late um on my schedule I had this at 7 30 and I was right around the corner I actually polishing up some of this stuff so um we have a lot to cover and what we're going to be going over today is going to be split up into two separate parts we're going to start off with an introduction to lens and then we're going to actually build a mobile app from scratch and I mean from scratch like literally from zero to one so that should be fun and we're supposed to do this in 30 minutes so we'll see um my name is natter I am the the director of developer relations at Ave companies including lens protocol most of my focus has been on lens protocol so far I am kind of diving a little bit more into some of the stuff that we're going to be releasing soon with the go uh token mainnet as well as a lot of the new stuff that's tied in with Ave but today I'm here to talk about lens I've been a developer for about 11 years and I've been in developer education for about seven or eight years and I've been in blockchain for about two years I'm also the founder of developer now if you've ever heard of that so first I want to kind of give an overview of what lens is and then we're going to talk about more of the technical stuff around how it works so when we look at our documentation we say that lens is a composable and decentralized social graph but I think that when the average person kind of reads that it doesn't maybe resonate that much with them but when we're talking to developers they often like to describe it as a protocol and a suite of tools and apis for easily building social Ops or integrating social features into existing apps I'll go back to that slide because it looks like someone's taking a picture of that but um that's kind of a better description to me because it kind of gives more of an overview of what you can actually do with it and we're going to dive a little a little bit more into like exactly what that means as well so when we think about social applications these are features that you might consider being part of a social application you create a profile that profile allows you to kind of attach information about yourself and then you start creating content and all that content is kind of attached to that profile and then you might also follow other people and see the content that they're creating often that content is curated and presented to you in some sort of recommendation algorithm and you can also subscribe to other people's feed of content as well by following them and so on and so forth now when we think of a social application we might think of Twitter or Instagram or things like that but there are actually social features built into all types of applications that we use on a day-to-day basis so things like GitHub or actually social applications because you follow other people and you see a feed of all the the actions that they're doing you could even consider things like stack Overflow uh you know I'm speaking to developer focused types of applications but um really when we look at the number of people online today I think it's like 4.85 billion people are using social applications today so the really interesting thing to me about lens was that we're building a ux that is approachable by hopefully the average person whether or not they're crypto native and therefore we kind of are really broadening the scope of the type of user that might be able to be onboarded into web 3 via this mechanism that might not be that interested in maybe Financial use cases and then if we go a step further which is also something that we're kind of working towards like abstracting away even the wallet addresses and like all of the complexity around externally owned accounts and stuff down the road what ends up happening is like through some of the design decisions that the lens team has made things like gasless transactions and also Timeless transactions um getting the average person to kind of use this type of application is a lot easier because they don't need to have tokens you don't have to tell them to go to coinbase to sign up and transfer their money into coinbase or some you know centralized exchange and then buy some token and then like transfer that token to the right Network and then download this browser wallet and then send those tokens to the wallet and then go to some other like exchange and swap the tokens and then pay for the transactions now like we might put up with this honestly because we're like crypto people and we love this but the average person this is a very very bad experience you know and I think like when we talk about this meme of onboarding the next billion people it's not going to happen if we're asking those people to do that we need instead really really simple applications that have a good ux and we need to kind of have use cases that make sense to them and then once they get onboarded into these applications they might then be introduced to things like wallets and stuff and then we can kind of start talking about other use cases that are more like native to us that are really interesting so that's kind of why I'm excited about this as a use case and lens isn't an actual application it's just a protocol for people to build applications so we see that we have developers building all sorts of applications so lens tube for example is an application that came online and it's cool because when a new application comes online you sign up uh one time but then you go to these new apps and you automatically have all the followers that you've built over time across all the applications so when lens tube came online I had all the followers that I had built up from using linster and then you had things like butterfly and orb and Ooh La La and all these different applications and it's cool because like every time a new application is launched it gives you a new way to to kind of express yourself and create content and new and interesting innovative ways so you might resonate with a new type of application that comes online or you might not but when something does happen to come online that you do resonate with you don't have to build up your following again from the ground up you automatically have that built-in user base and depending on the application and that content might also be displayed across other applications as well so even if you're only creating on Oola you might have that content be made visible on other applications as well which is really cool so let's talk about how lens works at the very core of lens is a set of smart contracts that's deployed to polygon but the real power around what uh lens has been able to do has more to do with the infrastructure and the design decisions around the API in my opinion so you know interacting with a smart contract again isn't that good of a user experience but if you can obstruct away the gas and you can abstract away the signing of the transactions then you now have a user experience that's on par with something like Twitter and then if you start adding the features that are enabled only by decentralized Technologies like blockchains you can then offer a better user experience than and and maybe a better value proposition than what's possible with traditional infrastructure and I think that that is the true like unlock with this this sort of infrastructure because I don't think that web 2 social is that terrible like there's a lot of amazing things that we've been able to do so far but I think that we're not going to kind of win the average person over into these sorts of applications unless we can provide an equal or better user experience and maybe even like a better value proposition in general so in order to kind of make that happen our API essentially uh subsidizes the gas for transactions and our new infrastructure that we're rolling out is going to make this even faster better and cheaper because in the past this wasn't really possible because when you transacted a couple of years ago on ethereum it was a couple of dollars per transaction or even 50 cents or 25 cents and let's say even one cent that's still too expensive to treat like we treat traditional infrastructure because when we think of an application like Instagram when we use Instagram we obviously are not going to pay for any type of database update but that doesn't mean that Instagram isn't actually having a cost per user transaction or interaction it's just so freaking inexpensive that they're obviously not going to offload that cost to the user we're getting to a point now though with decentralized networks not only like l1s and l2s but really other things like are we even bundler and things like that that you can start kind of of considering treating these types of infrastructures like traditional infrastructure and kind of subsidizing that because if we can kind of get to the point where we're not asking people to pay for using our app then then we've unlocked a large number of people in the world that might not have been able to use our apps before um and then the the idea of a soundless transaction means you're kind of authorizing our API to perform certain actions on your behalf that are non-financial so these would be things like posting a comment or posting a picture or things like that where you're not having to kind of put your financial like self at risk instead you kind of are saying I'm going to make this trade-off and I'm going to authorize this API to to kind of uh post and think things like that on my behalf and I can revoke that at any time and then you end up again with a higher quality user experience so those are kind of some of the things that that are really really compelling that enable a good ux and then the other big Focus for us is the developer experience that I'll talk about now so the DX includes a bunch of work Beyond just the API we have a couple of really interesting things that have been launched really just in the last few months one of them is the react hooks SDK so the react hooks SDK of shocks away the graphql API so you don't have to kind of write out these long graphql queries you don't have to deal with things like authentication you don't have to manage your tokens all sorts of things are kind of obstructed Away by the SDK and it's really nice because in the past if you wanted to do some type of query it needed at least 25 or 30 lines of code and you had to set up a graphql client with the hooks SDK you can now do that in like as little as two lines of code so here we're kind of importing a recommendation algorithm called use explore profiles and then we're kind of pulling the data out of that query and and we're just able to do whatever we want with it so the react hook react hooks SDK we have the react native lens UI kit and the react native lens UI kit allows you to create UI components that have abstracted away like certain types of functionality and just a couple lines of code as well we've seen a lot of people win hackathons with the react native lens UI kit because they're able to quickly build like a mobile app in just a few lines of code and then we also have our new widgets which allow you to kind of do Integrations with lens in just two lines of code as well so the the widgets kind of look like this in in practice like this is an actual like these are some of the designs that that you'll end up seeing if you use them and they have a very similar API as well you just import it and then you render that each component takes up to 30 or 40 different props but by default you don't have to pass any props in you can just render a component like this and you automatically get like something at default which is good enough to get started building we also have our graphql API which if you kind of have ever tried to build an application on top of a smart contract you realize that you're very limited on the types of queries that you can get there you obviously at that point uh often will build an indexer but building an indexer is like a non-trivial task especially for like just a prototype or a hackathon or even for a new developer so we have essentially built our own index here where we index all of the different data that's coming off of the events and then we also are offering up like dozens and dozens of different queries so when you think of a database a database is optimized for querying you can say give me the last 10 people that signed up that have the last name that starts with d that live in Maryland that blah blah blah you can't hit a smart contract with that type of query but you can hit a database with that you can also hit our API with those types of queries we have all types of arguments and and things like that that you can do filtering and sorting and things like that we also recently released a bigquery API or bigquery table actually a set of bigquery tables we have like 50 different tables that are available to query with bigquery and this opens the door to a lot of cool things around analytics dashboards and machine learning and we're already seeing people build some really cool AI stuff with the bigquery API um we also have um a kind of a standard now with xmtp for DMS on lens so you can tap into the 100 x thousand users on lens using X and TP with just a few lines of code xmtp is a really great protocol as well um and then kind of the Integrations that you might build with lens widgets would be following lens sign in with lens share to lens profile view publication view things like that but uh but these are more like if I want to maybe open the door to more distribution for my app but it's not necessarily a social app but I want to kind of like allow people to share the lens you can do that pretty easily now so one of the really interesting things that lens enables that isn't really possible through traditional social media or really anything else that I know of is extensibility around the actual features of the protocol itself so you can actually build unique and custom functionality into lens as a developer this would almost be like if you were using Twitter and you were like oh man it'll be so freaking cool if you could do this thing on Twitter but obviously you're not going to send a pull request to Twitter and they're not going to merge it right you can actually do that with lens you can create a custom module you can then essentially submit it to our uh you know repository and get it merged and you can start using it but everyone else in the world can start using it as well and now you've added a new feature to lens and then um this is just a couple of examples of what that might look like so these are displaying some custom modules that are available that enable you to kind of set settings around your sharing of content and this is kind of an optional view that you can opt into depending on the app so this is linster you click a button when you're about to share something and you now have all these options you can say I want to you know set a limited number of collect for this publication and only for a certain time and I might maybe want to split revenue for anything that gets generated through this with this number of people and blah blah blah these are all custom functionality that's kind of built into a module and then another big component of lens is composibility now this isn't really specific to lens this is more of like a web three I would say you know component but it's especially I think exemplified with like what you can do with lens because with traditional application development you're building out the client and you're building up the server you have to kind of come up with a front-end team and a back-end team you need devops and all this stuff on the back end but with lens you only need to worry about the front end because we're building out and we're managing the back end we're updating the API we're adding features and we're improving it on a daily basis and you can worry about building the front end and what ends up on being unlocked with this is that we have teams of one and I will like not call out the app itself but it's one of the more successful apps on lens it's a single developer developer they were able to do this because they can only spend their time on one thing which is building a high quality mobile app um and yeah that's kind of that's kind of one of the general ideas that you don't have to kind of build anything on the back end you're just kind of focusing on the front end and beyond that you can also inherit a user base that isn't kind of something you have to boot bootstrap from the ground up if you are a developer building a new app you might in the past have to start from zero but now if you launch an app into the lens ecosystem you have a built-in user base of 100x thousand people which once we release once we remove the permission access it will be even more than that and then there's this idea also I'll kind of call out for composibility almost for users and a good example of what that looks like is that if you are someone that is building up your following on one network and then for instance when Tick Tock came out you had to kind of start from scratch with uh with this type of protocol your followers essentially are following you around with you to every new app that that comes online so we'll talk now about the tech stack a little bit so if you want to actually build a production ready app like what would you need to use for lens you can choose either the lens API in a graphql client or one of the lens sdks the the sdks are just now coming to maturation in the past they were kind of like developer preview beta types of situations but now they are um you know basically stable so version one of the actual lens react hooks SDK was just really kind of like pushed out a few days ago we haven't really announced that it's uh now like officially V1 or production ready but um yeah you can choose between one one of the other there and then when you upload a new publication to lens you need to store your metadata somewhere so most of the time people are using either bundler with rweave or they're using ipfs we're seeing more and more people kind of though leaning towards bundler bundler is a protocol in rweave that enables permanence and immutability whereas ipfs is more about immutability but not really perm minutes unless you use something like filecoin which is really a little bit more complicated I think and then you might also just use some of the same sdks that you've used in the past so wag me hooks ethers rainbow kit all that stuff you'll still be using all that stuff as well and then on the front end it doesn't really matter you can build with react native you can build with react you can build with Native iOS native Android whatever you want to build with and most of the applications are starting to implement uh DMS so xmtp would probably be the way to go there because you can already tap into all the other uh users using xmtp on other apps so this would almost be like if you sent a DM on Twitter and you responded on Telegram and then you responded again on Instagram but it's all into a single inbox and a lot of people like really like that and there's even an app called Converse that is only for DMS on xncp allowing you to kind of pick up all the conversations from all the lens apps um so we only have a few more minutes so I'm going to run through these major Concepts and and then I'm going to actually start building the app from scratch so we can finish this up but I'll call out a couple of the main Concepts one is a profile this is the main object and lens and this is like when you sign up everything that you do afterwards gets attached to this profile so when you create a publication when you comment on someone else's publication anything that you do gets attached to this profile and the TR the profile is transferable because it's essentially an nft so if you want to move it to another wallet if you want to burn it if you want to sell it you have full control over that and Publications are creating content three main types posts comments and mirrors a mirror is kind of like a retweet a post in a comment is probably self-explanatory and these are posted directly to the profile and the content UI points the content URI points to a decentralized storage protocol typically like again rweaver ipfs wherever you store that metadata and you can even add gated conditions to these Publications too which is pretty cool so people are building only fans and those sorts of things but they're also building like um gated things for like a dow or a token or whatever on-chain interaction that might be there uh collects are oops let me go back sorry um collects are really interesting actually because like in uh in lens and okay let's say in Twitter you have a like a comment and a retweet and lens you have a light uh comment a mirror and you have a collect and a collect is when you take a piece of content that someone's put out there and you meant that into a digital asset which is essentially like an NFC and this is where you can add a lot of really interesting custom functionality so a good example of like what people are doing with this Beyond just you know whatever you might already assume like with nfts and stuff is that you're able to support people and at scale this is actually a lot of money for a lot of people but it also enables everyone to kind of participate so when you think of digital Collectibles you might think of a thousand dollars or ten thousand dollars but on lens since we have hundreds of or tens of thousands of people over a hundred thousand people using it then you only need a few thousand people to collect at a small amount to make a large amount of impact so two good examples of this we had a an artist a few days ago drop a song that they had written years ago that they had kind of forgotten about and they said hey I just wanted to kind of throw out this this song I'd created a while ago if you want to support me you can collect this for like a dollar or two dollars and he had like I think three or four thousand dollars worth of collects from that drop that he just threw out there on there we also saw a developer who was quitting their job to go Focus full-time on lens just post a tweet or uh whatever a post on lens that said hey I'm quitting my job I'm gonna go work full time on on this lens front end you can collect this to support me for two dollars and he had I think around thirty thousand dollars of Revenue that came in through that publication that uh you know obviously since it's a on chain transaction goes directly into his wallet and it took him five seconds to write that so you can do stuff like that and when you think of the scale that we're kind of gonna eventually see millions of people possibly tens of millions of people using this stuff 50 cents 25 cents a dollar types of collects will actually add up to a lot of money and this just isn't possible on traditional social media so what I want to do now is show you how to build a app from scratch and we only have a couple of minutes so we're going to do this in just a couple of minutes so this is a mobile app that is built using Expo which is a react native framework and I want to build out a simple social media application so I'm going to start by importing a feed of profiles oh yeah that's not showing is it I'm going to mirror my screen sorry about that all right can everyone see that now okay so we're starting off with a basic mobile app with nothing there this is literally what you get when you scaffold a new Expo project and this is where I was so this is the app what I want to do is start building out our mobile app so I'm going to first import from lens protocol this profiles component and this is just going to start us off with a feed of profiles now when you log into Twitter you get a feed of Publications and when you click on someone's profile you get their profile details we're building out a similar type of view but we're starting with the pro the list of profiles for us to view first um so I'm going to go ahead and just add a potting top of like 70 units and I'm going to save that and I'm going to see if my network connection is working okay okay I don't know if my network is no it's working good Okay cool so this is what we have now and and like two lines of code we've started off with just a single component this is rendering a list of profiles and what we can do is we can extend this component with all types of different props so we can style this component we can attach click handlers to follow and on press and we're about to do that as well but um you know this isn't that interesting instead we might want to click on a profile view the profile details and go even further than that so what I want to do is start off with um some navigation so instead of just rendering the profiles component I want to import a navigator and I want to render that Navigator and instead of just rendering the profiles component I'm now rendering a navigator that's rendering the profiles component it's kind of the same view that we had before but now we have the profile header we can click on a component and navigate to the details of that so what I want to click on is a user and I'm going to navigate to that user details so to do that I'm going to create a new file called uh view profile or we'll call that profile view whatever and this is uh importing this profile of you so we imported the profiles component plural now we want to import a singular profile this is going to render an individual user's profile with this component we can pass in the profile ID the handle or the wallet address and this is going to render out everything for a profile that we'll need and this takes in a few dozen different props that we'd like to pass in for us though we're only going to pass in the profile and a function that will handle an on comment press meaning we want to view the comments of the Publications details that we're about to see so I'm going to go ahead and save that and then we need to go ahead and import that here and then we're going to add another screen to our navigation that we're going to call profile view and now what we want to do is click on a profile and then boom we're now navigating to that profile and we see that we have all the profile details and we have something nice that kind of gets us started off I don't like the the way this looks though I'm a big fan of Dark theme so I'm going to go ahead and import Dark theme from the navigation but I'm also going to import a component from lens called the lens provider and this allows us to pass in global configuration to a lens application and all we need to do is wrap our main component there and that can also import the theme component and then I can now set the theme as theme.dark and now we have a dark a nice Dark theme and if I click on a profile then we see the darkness I want to now view comments though because I see that there's like let's see here 100 or a thousand comments whatever there so the last thing we're going to do before wrapping this up is we're going to have a comments View and we are going to render a feed component from the lens UI kit and this renders either a feed of profiles or a feed of Publications in this case we're rendering a feed of Publications and to set up the query and everything correctly we're passing in two props one for the query itself and uh the other for an another on comment press so we can have a recursive um view of the different public different comments and I'm over on time so I'm wrapping this up now um I will go ahead and render this and then we'll be done so profile view comment from comments View we click on comments and now we're viewing the comments if they load there we go so um that's kind of it as far as my presentation is concerned I had maybe one other thing I was going to go over but I think we're done on time and so yeah that's kind of it so we're going to be hanging out at the lens Booth the rest of the week we have swag for anyone that's building on lens or that's active on lens we have bounties that are set up for lens and for Ave so we have a lot of ideas that we'd like to share for anyone that is looking for something to build you can go to the lens Twitter or the lens uh lens lens on lens or lens on Twitter and kind of see a thread that we publish that gives a lot of ideas for developers on what they want to build and if you have any questions like come talk to us and then also one last thing I'll throw out we also have a grants program so if you want to build something beyond the hackathon we have up to fifteen thousand dollars initially available for developers that want to get started building on lens and need a little bit of money to kind of like take it all the way there so that's it thank you [Applause] everyone my name is Jess I am the developing and hey guys I'm Miguel Martinez thanks for coming I'm contract developer at other companies we have been involved in the development of the goal and yeah we are here for that yeah um so today we're going to be talking about go a decentralized multicultural stable coordinator to the RV protocol um we're going to be looking at an overview how it works and then my girl's going to go into some live coding oh I'm sorry um so yeah firstly to look at how why we built go um we should touch on stable coins so stable coins are so important to the E5 ecosystem um they offer a fast efficient and borderless way to transfer stable value on the blockchain so um currently despite the demand there is still a lack of decentralized stable coins so this moves along to what is go so go is a decentralized multicultural stable coin transferred and native to the Army protocol it's very wordy so um what does this mean um go does not have a single point of control so go as uh controlled by the Army governance and the protocol community um so go leverages the existing RV governance framework to provide transparency and verifiability so it means that everything is on chain you can see the changes that happen so this can be with interest rates and facilitators and more so the multicolateral side of things um we normally well typically assets can be sorry minting stable coins can buy a single asset backed walls so uh go and said is backed by various types of Supply cholesterol assets so this creates flexibility for a user so it means that a user can just mint based on their entire portfolio um and go as native to the Army protocol it um one building it was clear that there was a lot of functionality in the existing system so things like liquidations and supplying so it kind of works very well like just fitting natively as a new asset um so how does go work go is an erc20 token designed to maintain a stable rate Peg to the US dollar so this is you can still Supply collateral you can borrow go and then repay go debt so yeah as you can see from the diagram this is what happens in the protocol so um some of the stability mechanisms that happen with go uh the the RV protocol will always value the one go at the equivalent value of one USD so sorry this is better and then flash minting this is this provides the same functionality as the current flashlight mechanism in the RO protocol and it's very important as it helps to facilitate Arbitrage which is a very important stability mechanism and so go also introduces the concept of facilitators um so facilitator is a protocol or an entity that can trust us see mint and burn go tokens um are we governance and the community must approve facilitators so this is linked to the decentralization as I mentioned before and they set the limits for example the upper limit of go that can be minted um and it has been proposed to the other community that when goes launched on the ethereum mainnet that uh the rav3 ethereum pool and a flash mental facilitator will be the first facilitators to go yeah so I got in Integrations so the question is how do you integrate or how to interact with the other protocol and go well there is a plenty of things there are plenty of ways sorry to interact with that if you are a smart contract developer you can make use of all the npm packets available and there are both there are two or three for the other protocol um itself but there is also one for go you can install it in your repository it doesn't matter if you are using a Harvard or Foundry and you can install it and you will get the benefit of all the contracts there in case you are building a front end you can use all the npm packets available as well there is a JavaScript SDK that is very useful and it comes with very handy functions to interact with the protocol also with with Goal you can submit transactions also fetch make use of the functions to fetch data and it's also pretty useful when you need to transfer transform or manage the units of the of the assets and in case of data analytics and you wanna fetch all the data not only the live data but you are also interested on historical data you can use a subgraph there is one for Abe and also one for go so yeah there is also very useful so here we have some simple examples of how you can use the JavaScript SDK to interact with go and also with the other protocol so as just mentioned the other protocol works as a facilitator within the go token which means that the other facilitator will be able to Mint goal and in order to do that users needs to provide some collateral to the to the to the protocol and after that they will be able to meet more mint go from there so they will effectively borrowing go against their collateral so the first thing that they need to do is First Supply some collateral to his position so their position sorry so in this case we are making use of the the deposit function of the JavaScript SDK we need to pass all the parameters needed like for example the other certification the address of the reserve that we're gonna deposit into the protocol in this case we can say that we are supplying a die also the amount and also the on behalf of the on behalf of is a particular let's say a special variable that allows that allowed us to set the the the user that is gonna be benefit from the from the action so in case you are interacting in your own behalf you need to pass there your own address so once we once we deposit some assets uh we can just borrow some gold and in a similar way we just need to pass the appropriate parameters there like the address of the user the on the health of also the address of the goal reserve and it's important to note as well that the interest rate model interest rate mode should be viable offer the interest rate of God is going to be fixed and controlled by the other governance implementation wise the the goal Reserve is using a variable the token so we need to set there the variable rate mode and yeah in case you need to replace one of the Dead you always can call the replay function that allows you to increase your health Factor by repaying some of paying back some of your soldier debt in a similar way you just need to pass the appropriate parameters there and it will work so this uh it's very useful if you need to integrate and go and you are building your front-end for that but in case you wanna make it work from the contract side you also you will need to write uh solidity wiper code so that's what I'm going to do now I'm going to try to do a little live demonstration of how you can build a little code to interact with the other protocol and go so yeah let's try it out okay hey hey okay so yeah I created this repository which is called ghost table can go shop I will post the the link in the Discord channel so you guys can have access to it in this Workshop we are going through all the steps to um learn how to write a small contract uh solidity smart contract to interact with the ghost table coin and also the other protocol so we're gonna use a Foundry project so if we run this First Command we will scuffle the the project where um we are going to set up all the um configuration needed and also uh we all have also the project directories there what I am going to do here is just to I'm going to create a test file um I'm going to create a test per use case we are going through two use cases here the first one is gonna be minting go based on the collateral that the user deposited in the other protocol and the second one will be becoming a facilitator so you can mean goal to a friend or someone else so and yeah I took the liberty to set up the project already so we can save a little bit of time so if you follow the steps uh here that are explaining the getting started you will get reached to a point where you will have this solidity contract with two functions sorry yeah so as I said there's gonna be two test cases one for becoming a facilitator and another one for mintingo so before the test cases um I made some configurations and some initializations here in the contract first I initialize some contracts that we will need and the die token the go token and also the pull contract for those that don't know the pull contract is the main point of introduction in the other protocol um so yeah this contract contains all the core logic and user facing functions so if you need to perform some any kind of action in the protocol you will need to directly call to this uh to this to this contract I also initialized uh a Neo eoa account I call it we right and I also top up that account with some die and doing that here we will run this test in a fork Network so we are going to use the deployment of go in The Godly Network so we are here specifying that we are using that Network and also specifying the block height and there is one only last thing that we are gonna do before the test we are getting taking the control of the gold token so more on this later but this will allow us to allow us to perform some special entities that are usually controlled by the other governance so yeah first we are gonna mean some goal so as we said before the user needs to provide some collateral in order to Mint go and and effectively effectively borrowing off from from the other pool so what we need to do here is uh call The Supply function of the pool and gonna check the the function in the full interface so we can see what are the parameters that are needed to to be passed so we need to pass the asset the amount of and the referral code let's do that so pull dot Supply we are supplying dye right let's Supply 100 tokens with adding decimals and yeah the on behalf of we are acting on our own behalf and the referral code will be zero it doesn't matter at all before supplying we always need to approve the transaction so approve the funds so the other pool is able to pull funds from our account right so let's do that as well die dot approve approve and we are approving the address of the pool and we are proving 100 die tokens nice and now it's time to mention go yeah let's go so we will borrow from the pool let's find the function so we need to provide the asset the amount and the in the interest rate mode the asset is going to be well the amount let's borrow or mint Tango tokens the interest rate mode is going to be variable so two in this case the referral code 0 and we are acting on our own behalf again and at this point we will have we will hold 10 go tokens and yeah we can just send these go tokens to our friend so the others of our friend can be this one for example um since go is just a regular esc20 we can make use of the regular functions obviously 20 tokens that we all know so let's transfer let's transfer one to our friend yes and then go tokens nice let's try it out so we are gonna run this test boom is working it passed yeah nice so uh yeah let's do the other one so this is just a way to highlight how easy is to interact with the with the token on the other protocol is a cc as uh taking the contracts the functions the parameters that needs to be passed and there is plenty of documentation in there in the contracts as well and also in the developer docs so yeah it's just a matter to uh carefully carefully review the parameters and how you are interacting the Second Use case is a little bit different different in this case we are not maybe interacting as a user we are more like uh some kind of entity so we are becoming a facilitator and we are going to meet uh go as I said before we took control of the gold token to add a new facilitator into the system but is usually the abidal in charge of this kind of actions so the other governance is going to decide in the future who is going to become a facilitator the first facilitators are the Ave protocol and also there is going to be a flash meter module but yeah I'm sure there are more facilitators will arise in the near future and there is actually some discussions in the governor's foreign around that so we are becoming a facilitator ourselves so let's call the oscillator function here oops yeah so we need to pass here the others of the facilitator so the address that is gonna be allowed to meet go and here we need to pass the facilitator extract config facilitator here we need to pass the bucket capacity which is the credit line that if not this facility facilitator will have let's say that we want to be able to mend 1 million gold tokens why not the Bucket Level at the moment is going to be zero the level represents the amount of gold tokens that have been minted already and we need to provide also a label is Tokyo um yeah so at this point we are already a facilitator in the system and we will we will be able to go to our friend again so our friend can be this one so go document friend and I don't mind it can be 10 code tokens or whatever let's try it out oh it's working nice so as you can see it's very easy to start out with with just a simple Foundry scaffold and some uh set up some initializations in the in the project and so on so I hopefully you guys can find this helpful so you can quickly create your own um application installed dashboards and projects in general for the hack this hackathon and also in in the future so that's pretty much all guys and we are looking forward to see how you and what you guys are building in this hackathon whether it be as you come up with and we are around and there is a rules for Avion lens and feel free to come to talk with us to see what is going on on the other protocol the other companies or just to chat about the refund news of the crypto ecosystem thanks for coming we also have um every like a lot of ideas on the youth Global page um so have a look at there we're really interested in payments and account abstraction um but yeah thank you very much for coming and yeah please come and get some swag and yeah let's go foreign 
we're due for a pretty good session today uh and i hope everyone's having some good fun building on their projects so far i know it's a long hackathon but it also yields pretty cool results uh we got a lot of cool sponsors here we're joined by one of them this morning um and i think we should be ready to go i would like to give a shout out to everyone joining us in the room tomorrow this morning again and shout out to the chain stack team um here joined by our friends eugene and antonio who probably gave you guys a better introduction of what they do than i can and i'll give them the floor after this but we will be taking questions in the zoom chat below so feel free to post those throughout the performance and we'll get to them right after the session's over antonio and eugene the floor is yours i'd love to hear more about your project uh take it away uh thanks for the introduction luke um thank you for your time guys thanks for joining us today um i'm eugene i'm co-founder and cto at chistek and antonio is our developer advocate uh we're very happy to join this amazing event uh hackmany uh for meet global and we're gonna talk a little bit about blockchain infrastructure today and antonio will show a really really cool hands-on demo on on bridging between different networks on evm based on chains so let me briefly share my screen and talk uh a little bit about chainstep what we do why we're here so our company is working on the blockchain infrastructure which is a pretty foundational layer for every developer on blockchain and most of you for sure they use some node apis whether it's a node that you run yourself or you use some servers like uh infuria alchemy chain stack there are there there are many other services that provide this sort of infrastructure today um so we are one of the top vendors in the space um and we are happy to share a little bit more of on what we do and how we would like to support the x system so uh a little bit of uh background on why we exist and why people use chain stack today and why they find it valuable first of all there is uh still not a lot of expertise on blockchain infrastructure like how to run nodes um like where to find engineers who can run nodes and who can maintain them who can upgrade them um so basically most of the time if you run a multi-chain uh dap a multi-chain project you need to have a small team or large team depending on the size and number of chains you spot of protocol focused engineers that could deal with different chains and nodes and they are all different and they all have different issues and challenges in terms of the operations it's also quite complex and costly to set up nodes as well especially from scratch because they tend to sync for quite a long time if you need for your app like archive data for instance is a nightmare for anyone who wants to run an old because you need to run an archive node uh which would sync best case scenario a few weeks worst case scenario a few months for different chains and they grow up to 20 plus terabytes of size so it's literally impossible to run this stuff at home so uh it's sometimes super costly in terms of money and time to set up notes and uh also maintain them right and and keep them secure so that nobody will um uh break into your server with your computer that is running the note and and do some nasty stuff there also what's important is that the more protocols you want to support the more challenges you have in terms of maintenance and operations because there are always things happening like hard forks on the networks and softworks and some incidents that uh the trigger knows to be down for like eight hours uh for some change that we know very well as well so it takes time to learn all these things and to uh understand how to operate in this uh kind of uncertain environment where you don't exactly know what's going to happen to your nodes tomorrow so um these are all the challenges that uh that we think uh that make it uh useful to um to build a platform that we've built a few years ago and still operating and growing today to basically provide easy to use and and reliable and robust uh api infrastructure for uh developers of all sizes um so basically what what uh managed blockchain services that we build help with basically to reduce the complexity and challenges involved in uh working with all this all these chains um that are sometimes quite uncertain and you need to be an expert in in each of these chains to run nodes for them uh it's really easy to go from testing to production uh with with such service because you basically just plug in the api endpoint and then it just works right so you don't need to care about like okay i now need to add more like rps capacity to my nodes i need to set up load balancing etc so you just you just go and and just switch to another endpoint if if it's more convenient for you so it's basically no time to start and to to scale uh your operations with uh managed blockchain services uh you also get all these uh things that uh that i mentioned on the last slide is challenges like you get scalability out of the box you get reliability um usually close to 100 because all the all the vendors including us they uh tend to provide amazing service because it's infrastructure and core infrastructure should be super reliable so everybody's focusing to provide like 100 uptime because uh when you run infrastructure you want to be sure that your customers sleep well at night and they have peace of mind uh so it's it's definitely a must for any uh managed blockchain service provider um and basically you don't need people to run operate nodes you don't need to have special like low-level blockchain expertise uh on the operations side to basically have your apps up and running so you just focus on the business logic of your app um so chain stack is a as a multi-cloud multi-uh chain platform that allows you to manage all your uh projects for all your protocols on all the pro on all the chains that adjust um on the left of the screen like starting from ethereum uh through startnet that we just launched last week to some of the non-evm chains like uh solana and tezus and we're adding a new chain every two months roughly so um we love chains that get adoption and get traction so uh that's that's how we basically choose the chains to support because we want to support builders that are coming in into this ecosystems and and grow together with uh with us uh what's quite unique about our platform is that we provide a variety of options for deployment so we provide uh hosting for different nodes and different types of nodes also in different clouds so we support four uh hosting providers today in six different regions we just launched tokyo by a great demand from our asia-pacific customers last week also so uh we also adding uh new clouds and regions uh from time to time whenever we see big demands in certain in certain clouds or regions so you also can run like shared and dedicated nodes in our platform so basically uh you can either like scale your projects by by api calls or if you're a super heavy user we have some customers that do like five thousand ten thousand rps uh alone uh they usually use dedicated nodes which are um just um allocated for their use and there is no cap on the number of requests that you're gonna use you just basically start a node like you you would start a vm in any cloud and you can just use the the node um as as your back end right for for your blockchain app um so last but not least i think it's important to mention that the chain stack is very inclusive platform we want to support builders of all sizes so these are some of our our customers that you see on the screen and you can see large projects like like the graph and layer 0 and chain link and a few others and also smaller projects and we also love to support builders who are just starting so we have a very um affordable developer plan which starts from zero dollars basically so you get zero dollars uh for three million uh full node calls on any protocol that you want uh per month so uh we love to support uh builders who are just starting uh we are totally freemium platforms we can just start using it right away without without paying anything and then as you see the demand for for your dap or for your application you can just uh scale with us and it's very elastic pricing that we've got so you basically just pay for what you get uh basically you pay per per calls or you pay per hours the node is running if it's a dedicated node so it's very very flexible uh pricing you don't need to commit to anything you don't need to prepay for anything out of the box uh you you just can you can just scale with the uh with the platform as much as you want so it's very transparent pricing as well which is important for any uh developers um in the building as well uh what's uh worth mentioning as well we support uh crypto payment on the platform so if you want to pay for your plan or for your node in in crypto you are welcome to do that we support like bitcoin ethereum and and a couple of stable coins there as well uh so it's it's pretty easy for uh anybody to um to onboard to the platform uh with crypto in particular as well so i think that's all for now uh from my side i would like to uh get give the screen to antonio who will uh do a small demo of the platform as well as kick off his very cool demo of bridge on the evm chain cool so let me share my screen and [Music] yeah i guess everybody can see it now so uh basically what we're going to do is try to uh build an ibm uh bridge uh i think it's a it's a pretty cool project to build if you are starting but you are not like a super newbie to to blockchain development because it's you can build it very simple but at the same time it's not super complex to build and you can be and you can learn a few things so the first one is to create a couple of erc20 tokens uh and deploy them in multiple chains and then you can also you'll learn how to listen to events using web sockets which is pretty cool and then how to send transactions from from a backend which is something that normally we do using metamask or any other wallet so we will show how to do it from a bargain uh basically this uh this bridge that we are going to to show you is a simplified version and how it works is the the users send tokens from from a front end that we have built to a wallet that belongs to the to the bridge itself and then we have a back-end process running that is listening to to these transactions on the on the token contracts and when it uh when it sees that there is a transfer to the to the bridge wallet it means new tokens on the other side of the bridge and when we are reaching back we are doing the same but backwards we instead of maintaining new tokens we're destroying those tokens in in this side of the bridge and we are just sending the tokens back to the user uh so i have a video of it working but instead of doing that i think it's best to just jump into the code and try to work through how to do it so the first thing that we need is actually access to two blockchains and two nodes and that of course i'm going to use chainstack and as you mentioned you can create your account for free and you have access and you can have up to 3 million requests per month so this is our console once you have once you're logged in and i have created a project here that is vm bridge and i already have one of the blockchain nodes which is ethereum robsten and i'm going to create another one for the destination of the bridge which is going to be harmony and yeah it's pretty simple to use just select the the blockchain and the network and as you mentioned we have said notes and dedicated nodes and then for our provider you can deploy it in different locations for certain nodes of harmony we have north engineer and frankfurt here so let me give it a name test note and and it starts uh deploying it takes like 90 seconds to two minutes something like that uh while it's being created let me show you how you can uh see some metrics of your notes uh so for example this one as you can see here there are some metrics like uh calls from hours from our server getting the block number and things like that and the responses and here you have the graph with uh yeah with the number of requests that you have you can filter like that and here you have your access endpoints for both https and websocket and your if you want to access with user and password uh i will delete this node later so yeah going back to to our project [Music] let me see if it's created already it's not okay so let me guide you through the code so this is what we are going to build uh it's a very basic uh application uh we just have an input here to enter the amount of tokens that that you want to send to the other to the other blockchain and it's from ethereum drops into harmony or from harmony to to refilling and basically the code of this application is divided like in three parts we have uh the first part is the erc20 token contracts so we will have uh tokens in both sides one have one in ethereum drops them one in uh harmony testnet then we will have the code for the front end which is this one and i created a bgs application because i like you and then we have a back-end process which is the one that keeps listening to the events in both chains and basically create new tokens on the other side or burns them and do a transaction to the original wallet so let me see if this one is created already yeah yes so yeah as i mentioned right now we have zero transactions here and we have our endpoints so yeah let's jump into the code so here are the two uh erc20 token contracts uh on the left side we have uh the one for ethereum which is a standard erc20 token uh we are just importing here from open separating and the only thing that we are passing is a name symbol and the initial supply uh when we deploy this contract we will actually mint all the tokens and send them to the person that is actually deploying the contract and then the difference with the one on the other side uh which i have called b chainstactorals before destination is that we have this modifier here it's called only bridge and basically this this modifier prevents that no one can mint or burn tokens and the only one that can do it is the the bridge so when we deploy this contract we are actually setting the the address of our bridge here in this state variable and if someone tries to call the mint or the boring tokens or reborn function it will go through this modifier and if it's not the bridge we just fail with this error message uh to the brightest contract that this is this is our hearthout project so it's a standard uh contrary script to deploy uh we just have to use this get control factory got the contact name and then put the the the name of the name the the symbol and the supply that we want to meet at the beginning and to deploy the the other one we have to pass the bridge wallet address in the deploy and i'm passing this with environment variables and by the way i didn't mention at the beginning but all this code is part of an article that we have the uh published model and i'm sure we will ser the github repo underneath the article and all the stuff so uh i know i'm going a little bit fast and it's not a very step-by-step uh tutorial but uh it's just just to show you how you can create the bridge and in a few steps so now that we have deployed it let's say that we have deployed these two contracts uh the web application is a standard vgs app and the only thing that we are doing here is uh we have this button to connect to to metamask and we are the only thing that we are doing when we click here is uh getting this amount from the from the input and sending a transaction from from the user's wallet to the to the bridge and basically we're doing that with had this method here this same tokens method and as i'm saying we're just passing this amount to to refer and then just doing a transfer and we are calling the the wallet address which we are loading from our environment variable as well and yeah the only thing we do is send these tokens from from the user to the to the bridge and in the other page we are doing exactly the same from the tokens to bridge and that's basically the important part of this bridge is having this back-end process that is monitoring both uh both token contracts and it's basically listening for transfer events and for that we are we are connecting to to the context via the websocket endpoints and basically this is uh this is the the piece of code i call it an event watcher and what it does is it connects to to both the the c20 token contract in ethereum and in harmony and basically it waits for transference here's one and here's the other one and when we receive a transfer from in the ethereum site we go and make new tokens for for the same user in harmony and we send a transaction when we receive a transfer in the harmony side we destroy those tokens we burn them and we send the same amount from the from the bridge wallet address back to the user [Music] so i think i can show you how it works so this is our back-end process is running is that in the background is connected via our sockets to both contacts using our nodes and here let's say let's see how many tokens i have in harmony well that's very small so let me show you here so we have and 125 hundred uh destination changed dollars so let's send like three hundred four hundred so we connect to robsten here and here we have a ton of them so we are sending 400 and once we sign the transaction you will see that things start happening here okay so it might take a few moments because it's ethereum so let's see what happens and yeah just a reminder that all this code is in is in github it's public and we have by step-by-step tutorial in in our blog which i can go ahead and show you it's here so and this is full step-by-step uh explaining everything so yeah make sure to check it out if you have any questions or you can just send us a message in discord or you can reach me on twitter if you want okay so things have happened here basically we have received tokens from the ethereum part of the bridge and we have maintained new ones on the other side and you can see the transaction that it has been generated in the harmony explorer because we are sending from from ethereum to harmony and as you can see we have created 400 new ones so if we switch to harmony we should have 400 more tokens there we go now we have uh 126 000 so yeah that worked so if we want to send tokens back let's let's say i want to send 500 back to a ethelium and this will be faster because this is harmony so there it goes um basically what we're doing here is like we're actually sending three transactions so the first one is we are approving that the bridge will burn those tokens from the user wallet the second one is actually burning those tokens and the third one is sending a transfer from the rich wallet address in ethereum to the user's word address and all that's all that just happened here and we have the transaction here in our scan so here we have the details is 500 chain stack dollars and yeah if you connect here again we should have a 500 more yeah that's a very big number but those 500 are back here so yeah that's basically it and uh yeah as i said all this code is in a github repo that is public and it's linked in the in the article that we have so here are all the step by step how to set up environment variables uh how to create your your notes in in chain stack and basically everything you you need to know and yeah also i want to mention that that we have a feature request page in 10 stack so if you want to support do you want us to support a new protocol you want a new api you want to i don't know whatever the the the projects one or they need they can submit it here and we keep reviewing this every now and then and so we make decisions of the product based on this so yeah submit things to us and that's basically it and stop sharing guys i assume we have some time for questions so if anyone has anything to ask antonio myself will be very happy to cover anything related to what we just spoke about let's see right on everybody um well thank you eugene thank you antonio for such an incredible presentation it was great working through that with you guys i highly recommend i i'm i personally think of questions a lot after we we walk away from conversations so i highly recommend hitting them up in discord they are very active on discord and can help you at every step of the way um and like i said we are very glad to have everybody in the room today and very glad they were able to join us for the past hour um i guess if there are no further questions and come on if you want to come off and mute one last question and get it in before we're gone i'm more than welcome to do that but if there are no further questions i would recommend let's transfer the discord keep the conversations going and we will see you in our next session thanks guys 
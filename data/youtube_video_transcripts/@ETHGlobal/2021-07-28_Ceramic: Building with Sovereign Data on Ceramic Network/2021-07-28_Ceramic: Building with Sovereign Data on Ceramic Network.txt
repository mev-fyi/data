all righty hi everybody uh welcome to the building with the sovereign data on ceramic network workshop uh here we have joel from our sponsor ceramic and he's gonna be running this workshop for you guys if you guys have any questions and duration of the workshop just throw them in the chat and if they're relevant to what he's talking about at that present moment i'll present them to him but for the most part they'll be saved for the end uh joel you can go ahead and get started cool thank you nisha all right so um hi everyone i'm joel uh co-founder of dreambox labs and creator of ceramic and so today i'm gonna give you kind of a brief overview of like what ceramic is and kind of what you can use it for and then i'm going to show you a kind of demo of like how you can interact with ceramic um [Music] yeah so ceramic is essentially a decentralized network for user generated content um so you can think of it as like any data that your users generate as they interact with your decentralized application it can be stored and kind of tracked and be verifiably audited by by other people in in the network so let me see if i can change slides um yeah so the basic building block of ceramic is uh a data stream and so stream uh has a state uh so you can think of it as like an object that you can mutate over time and this object has a cryptographic access control so it's controlled by some public key and so we use something called decentralized identifiers the ids to control access and who can read and write of these data streams the the network is is completely peer-to-peer and and local first you can actually when you write data you only update your stream and so there's like no global consensus on data rather you can kind of track and verify the pieces of data that's like relevant to your application and you can store kind of any type of data and you can create data models inside of ceramic so the streams represent some kind of json data and you can put json schemas to kind of define what the data is allowed to look like [Music] yeah and some some things that this can be used for i mean the main kind of thing is like this becomes kind of like a sovereign network where users are in full control over their data and ultimately that like they're part of of the social graph and kind of like a global user table and so obvious things you can use this for is like aggregating identity information and ultimately like reputation information you can put store other kind of public uh data in there like nft content like mutable nfd content so like you can have content that's like changeable by uh the owner of an nft um and of course like you can you know use this as like a social infrastructure you can store comments or votes or other kind of signaling information useful in um and like governance tools and stuff like that and one nice aspect of this is like the data stored in ceramic becomes kind of like open source so it's not tied into like one particular application rather the data can be shared across multiple applications um and you can also like link multiple blockchain accounts to the same data so you can have like a filecoin address that links to your dad or an ethereum address uh or both or and then like link that to like potentially accounts and other blockchains or like multiple accounts in the same blockchain [Music] and so one of the main things we've been focusing on with ceramic is making it easy to store user data and make that like store and making it possible for developers to store uh user data in in a semantically meaningful way uh and so the system we built for this is called idx and it each user has their own nidx it's like a framework on top of ceramic so in idx each user has their own data store and the data store is basically a mapping from definition to record so the definition kind of semantically describes the data and the record stores the data so in this example we have a developer it created a basic profile definition and this definition also includes a schema that's a json schema that defines the structure of the data and then when a user comes to the application they create a record and store their profile in this basic profile definition and in the record they have like the name and like some other information and then of course like when different users come to the same application they get the same definition id but they get their own record id and their own record so the neat thing now is like once some some developers created this this data object here in this example a basic profile you can come and build an application and see like oh this basic profile seems super useful and i want to pull that into my application and then basically you can leverage the network effect of like existing applications that have come before you um all right so i'm going to jump right into the demo and so let me change my screen share actually okay so here i have a browser and in this browser i have loaded uh used a playground that we have so this playground is connected to the ceramic clay test network and you can access this using this url you can find it if you go to ceramic studio github and basically what this demo does is it uses an authentication system we have called 380 connect which allows you to authenticate using your ethereum wallet or other blockchain wallets and then start writing and reading data from idx so in this example we'll connect with a meta mask and then start interacting with data just in the developer console uh so you're going to kind of get a sense of what's possible so i'm going to click here and connect wallets now 380 connect pops up and asks for permission so you're going to click continue here and if everything goes right it should ask for a signature and so what happens here it like loads the existing profile [Music] uh from the ceramic network um hopefully everything should work all right uh [Music] i don't know why this is spending let's try this so [Music] this usually doesn't take this long [Music] yeah basically what it's doing uh right now is basically checking if this user has already a three bucks profile so if people have created uh identities on three bucks before um they will get migrated uh all right so if this is taking longer than expected i'm going to show how you can also use ceramic from your cli uh so we have a cli script which you can install with like npm install ceramic network okay it looks like this is making progress um so yeah so now i'm like authenticating with 380 connect and it asked me to sign a message with metamask i'm going to sign this and uh now i should shortly be like connected here um all right so now uh we see here a message in the console connected with this the id and so we see here the three and like this is basically the identifier i have on on the ceramic network uh so now we can start interact interacting with ceramic um so the first thing i'm going to do is just to create a data stream so i'm going to start creating a simple thing this one i think have something prepared here and yeah i'm just going to create a tile document so tile is a data stream in ceramic that's just a simple json object and pre-loaded in this console here i have this tile document class i also have this an instance of ceramic so i call the create function here pass ceramic and i pass a first kind of state of of my data stream so now if i execute this this will now i have like this stream instance that i have on s1 and i can do s1 dot content and i will see that i have this object and now the interesting thing here is i can also do [Music] s1 dot i id and i'm going to do two string on this so now i have a unique identifier for this stream and so the cool thing here is this stream id will remain the same even if i make an update to the stream so i'm going to go ahead and make an update here so i'm going to do awaits s1 dot updates and i have something prepared here as well so now i'm just going to change from hello world to hello updated worlds and now if i do s1.content again i get this new content here updated world but i still have kind of the same id here and now this this that this stream has been created i can actually uh load this from any ceramic node on the network so i'm just going to go here to my console and [Music] start the ceramic daemon on the clay tested um so now this basically spins up an ipfs node and connects to the ethereum network and starts kind of the the the ceramic node and you can see that now it's it's running here and now i'm gonna just execute command here so i'm gonna do ceramic show and then paste this so now this will load this data stream from the ceramic network if everything was loaded or right here yeah and so now you can see that i loaded the updated version of data here and see hello updated world and neat thing we can do also here is we can actually inspect the data structure here so enter or kind of look at the internals of of the data stream in ceramic so i can sew ceramic states and i'm going to look at this and so the the underlying data structure of a ceramic stream is is an append only list that is built in ipfs and ethereum so here we can see that uh in the log here we have like the the first object and the second object so the first object is what we created first and then there's a new object that points back to the previous object and that's kind of how we do like keep track and and create like an audit log of of changes all right so i'm going to jump back into here and i'm going to show you that you can actually enforce the data to take certain shapes in ceramic so first i'm just going to create a schema and so i prepared this already here we have a json schema that basically forces a json object to have a title and a message and so i'm just going to store that in the schema variable then i'm going to um create a new uh stream uh that puts the schema or like creates a stream in ceramic with the schema so i create a new tile document create pass ceramic and i pass the state which is now the json schema here and i create this object and now same thing here schema stream and i can look at the content and i get the kind of json schema content and so now i want to create a stream that uses this um [Music] schema as kind of like a way to enforce the content so in order to do that first need to [Music] check the command current commit id of [Music] of the schema stream and so a commit id is similar to the stream id which we looked at before but it refers to like a specific version so in this case uh the version that has not been updated um so i can in ceramic i can refer to like specific versions of a data stream or the latest version all right so i'm going to use that and now create a post so i'm going to post one [Music] and let's see um all right so i'm just going to type wait tile document create and like pass in ceramic and i used to title and now so this is the content so first we pass ceramics and we pass the content but now i can also pass some additional metadata so i'm going to pass a schema and i'm going to make that schema into the commit id we got from both uh so i'm going to add that there and now i'm going to try to create this post one ah it didn't work and so why didn't it work validation error data must have the required property message so now we can see that if i try to create a scheme or a stream a tile document and so i'm like using this schema it won't actually allow me to create it unless i also have this message property that we can see is required up here so let me try again and uh i'm gonna add a message see everything i think i need to change this variable name all right so now i created this and let's look at it post 2 dot content and we can see the content here that we expecting but also we can do post 2 every every stream in ceramic has metadata so i can do metadata dot uh schema and now i see the schema is actually the same schemas as we got here which which can be expected we can also inspect the the controller and the controller is the the id that or like the user identity that's allowed to make updates so here we can see did three and this uh this string here and which is the same as the one up here and since xb yeah so yeah it's the same one this is the one we're currently authenticated with so um yeah so this is kind of like the how we interact with the lower levels of ceramic but we can also start looking at um [Music] idx so idx as i mentioned is like this framework on top of ceramic which allows you to kind of interact with with user data more directly so for example i can try to load a profile so i'm going to check actually if this did we got here above is has a profile so i'm going to do get and basic profile and i'm going to pass the id here we got here um [Music] it's annoying no art school we're going to try to type that and it loads so obviously it's like not optimal or like not like you might ask like why do i need to like notice the id or like how do i find that um well and that might not be totally obvious and and it's also like yeah you might not know the did beforehand so like how do you deal with that well so one thing you might know from beforehand is the ethereum account or like the theorem address of uh of a user so instead of passing the did here and now we can see that resolve to like your profile uh so basic profile is like a standard definition that's included in ceramic or in idx i mean so here we instead let's try to pass the ethereum address and we need to specify that it's on ethereum mainnet so eip1551 which is the way it represents minutes and this string actually needs to be lowercase uh this is some quirk that we're currently uh fixing but yeah so let's try this and now let's try to load the profile for my ethereum address rather than my did and if this works we should get the same profile yep so uh you got the same profile and similarly you can use idx to do like idx dot set and like update the basic profile um and yeah so that's basically it i'm not going to go through everything in detail and so the basic profile is like one example of a definition uh but you can of course create your own data models in idx that has your own definitions and has like enforces different types of data structures on there um cool and so that's that's it for the demo i'm going to jump back into kind of the last slides of the presentation um cool so um [Music] right so now that we've kind of seen how we can interact with these primitives and like get basic uh data from like an ethereum address this also kind of works with uh other types of blockchain addresses as well why do we need this and like what can we do with it so one thing that's like really cool with idx and like ceramic in general it's like we can start building applications that specify their data models and the data models kind of live uh are kind of open source so we can start reusing each other's data models so if there's application one i can pull that data into a new application and we can start like looking at data that's available in network and see kind of what makes sense for us to use in in our in our application and with ceramics since we have these data streams that are cryptographically signed and also like anchored into the ethereum blockchain um we get this audit log of that kind of guarantees data integrity um we can also start like linking data together where i can point to to other data and we can start creating this graph of data and like essentially like build a social graph or maybe like a web of trust between different individuals without enforcing like any specific way of building trust we could start building trust in kind of human uh very kind of diverse set of ways um and i kind of already mentioned this kind of these silos data data doesn't really live now within any organization or any nation boundaries the data becomes like this global commons um and we can start like creating these shared data models as i mentioned um and yeah the other cool thing is like when we have these shared data models my application and your application does not have our own network effects we actually share network effects which is like super synergistic once we start like building applications and finally like users have sovereignty over their data so they ultimately control uh what goes in there and like how it change uh changes and is being updated um to get started with building ins with ceramic i recommend going to the developer documentation so we have that on developer ceramic.network and developers.idx.xyc we also have some examples here um for for like code and like for some tutorials uh we also have a kind of basic profile app that you can use to um kind of get a sense of like what an uh ceramic application might feel and look like just self-id which is just like a simple way to create and update the profile uh and yeah uh you can get in touch with us um on discord it's probably best we also have a twitter um and yeah that's that's essentially it so i would like to open it up for questions and i'm going to stop sharing um right hey jen uh i can read your questions or if you want to ask it out loud feel free to do so as well yeah hi yeah so my questions about if i were to adopt ceramic for my decentralized application do i need like a node in the background to publish the user information user streams yeah so um the ceramic network is built out of nodes right so and in the network you each each node kind of decides um which data streams type in so if you're building an application right now the easiest way to do that is um is to run your own node and then like uh make your front end talk to that node um in theory like we also have like the whole system is actually built in typescript so you could run a ceramic node in the browser but that's kind of very tricky to get right so right now i recommend like using the ceramic http client and then connecting that to a node that runs uh on like some kind of infrastructure gotcha is there any concern that if my server goes down like the information will be lost yeah so the best way to like mitigate it from that is is to um so you can you can configure like backup options with with onenote but the best way to mitigate like data loss in the ceramic network in general is to actually pin the data streams on like multiple nodes and so again a stream and ceramic can be replicated on any number of individual or independent nodes all right is there any other questions okay if not then um thank you so much joel for running this really informative workshop and thank you ceramic for sponsoring hack fest this year i want to encourage you guys to keep this conversation going and the ceramic discord there's a channel called sponsor ceramic that you guys can talk to droll in and yeah thank you guys so much for coming to this workshop and thank you again joel okay bye have a great day everybody 
stand by their trench should be one second okay stream is up cool all right we'll just kick it right off welcome everybody to week zero workshops hopefully you're here for hack offensive and if you're not well I guess you can stay you're gonna learn something anyways I'm gonna say this since what everybody's tired of it but if you are here for hack efest you have to make sure that you've staked 30 died before the event starts on Monday this is a way we use to ensure that the people who were supporting and giving attention to or actually committed they're gonna participate fully in the event so you still got a couple of days to do it but I would definitely encourage people do that as fast as they can otherwise might forget it you might procrastinate I don't know but do the discs as you can and will make sure everybody is properly set up for the event alright so we are here for this intro to file Queen getting started with file coin Andrew Hill is going to be leading it he is the CEO and co-founder of textile which is a company that works specifically with ipfs lib p2p and makes it easier to connect and extend these technologies for developers so he's been working on that for a bit now and we're very excited to have his expertise here specifically it's part of hacker fess textile is also a sponsor which is a great thing they're they're making a heck of as possible for everybody here before I hand it over to him to start we're gonna play a quick game which is I just made this up whoever we're gonna compete with shirt colors I'm wearing a black shirt and Andrew from youth global is wearing a not black shirt so what's the see who's winning I see one two turn on your videos let's see how many we can get one two three four five six seven I see seven eight it might be split pretty even between black and colored all right I'm gonna call it it's a tie you're lucky Andrew okay we'll keep this going throughout but all right Andrew he'll take it away tell us a little bit about yourself and then we can get into it well thank you very much and thanks everybody for coming I think it's gonna be a really good workshop if you're new to the file point project and just trying to start building things we're gonna kind of go pretty far and short amount of time yeah so I'm Andrew I'm one of the guys at textile there's a I think maybe maybe all four on the call or following along Carson farmer Aaron C Tula sander and Ignacio are also probably on the chat and but Carson and Aaron will be primarily helping out answer questions live if you if you run into problems we're really interested in trying to fix the way data works on the Internet we have a lot of ideas about what's broken there and we have some ideas about what it would take to fix and we've always seen the ipfs protocol and now file coin making some of those ideas possible and making it possible to think about the Internet in totally new ways and so I'm excited to share kind of some of those early steps with you and and have you all try your own ideas and try to build things over the next month and so at textile we're just super excited for the next month of like helping you build things and see how far you can get and see what works and see what doesn't and so today I'm gonna break the day up into kind of two big parts or one smaller part and then the bigger part small part I'm just gonna pull up some slides and kind of give a lay of the land let you know what I'm going to be talking about and some that we're gonna throw around in the workshop and so if you haven't ever used file coin before this will be good it should or you you haven't followed the file coin project much until the hackathon this should be good because it should just let you know some of the couple of key terms that you're gonna see come up a lot and be able to reference them again and again and then the second part of the works of the presentation I'm gonna move to the workshop and for that will be really hands-on and so in the in the hack efest chat channel on slack I shared a few notes about what will be necessary there but one key one is if you want to do any of the parts we're gonna be running some things locally that take docker deck desktop so well I'm giving the presentation if you really want to take part in the hands-on it might be if don't if you haven't already it might be worthwhile to go and download that and install it on your computer and then we're gonna run some things and it's gonna be you're gonna get pretty far on using file coin and trying some cool things and so with that I mean let me just jump in and like I said just start asking questions like crazy you can do them over on slack or here on Jim where we like and we'll we'll get you answers so let me let me just start sharing with you some some things thumbs up Trent on that showing okay perfect cool so I already told you who I am you can find me on Twitter - I'm always sans - the things over there but so what we build developer tools at textile and so just to explain kind of the what we work on and how what I'm going to show you today kind of fits in that mix and actually give you ideas about how to then extend and move out into other things I'll just give you kind of the four four main pieces of what we work on really quick and then I'll dive into the file coin and power gate specifically so so the first thing that we work on or sort the first technology that we work on is thread DB and so this is a MongoDB like database that you can use for building your application it's written in go there's a JavaScript implementation but on top of the database there's also a networking protocol that rides on ipfs and lib p2p to allow you to have multi-user databases so you can think of it as a peer-to-peer database built on ipfs that you can run in your applications the second thing that we build is called buckets so after we started building threads we realized that one of the very next things that people will want to do is actually put larger files binary files into their into their dynamic data sets and so when you use a database it's not very often that you put the raw files in there right you reference raw files elsewhere and so buckets is actually was actually our solution to letting people build applications that needed to put data onto ipfs that was mapped to some dynamic data set they've become a bit more than that actually and so the best way to think about them is just dynamic folder persistence and synchronization over IP FS and all of like a little demo that later because it links the file coin in a really cool way but you can create buckets which are just data sets on ipfs folders on ipfs and you can push them to remote nodes or synchronize them with collaborators so you can use the command line tool to do that or there's a JavaScript library to build on top of that the next piece is the power gate and so the power gate is what we'll talk about today and so the power gate is meant to be a developer API to help you deploy file coin and ipfs nodes specifically to build applications on top of so this isn't really for miners this isn't for you to necessarily earn money today or when main net launch is storing other people's data this is for you to make requests to store data and then manage what happens after you have a bunch of deals out there on the network and how you want to move data off often on the network and also it gives you some really cool helpful tools on top so high availability availability fast retrieval data using the IP FS network with cold storage on five coin has a deal agent to handle a lot of other things so we'll get into all that and then finally the hub and so this is our hosted environment where you can access pieces of all of this stuff and so this is really cool for say if you're building a browser or a mobile application where you're creating data on ipfs or you're creating deals on file coin but that user session may go away so really want to get a lot of those updates off of that device and so the hub gives you places where you can push things and have them persisted on ipfs or soon create deals with file coin and I won't get into that today we're planning on giving another workshop next week where we might touch on some of that stuff and how you can use it but also just has a cell phone slack if you want to get some pointers there and of course our Doc's are pretty comprehensive on all of those things and we'll give you a pretty good sense of what's going on there so just docs textile dot IO um so for today obviously building with textile is the point of it all and so let's get into that and this is the piece that I mentioned that I really should want to cover some of the basics I was really excited to get a text this morning that my mom said she was accepted to the hackathon that's serious she's probably on this call hi mom and she had texted my sister to ask how she could start building with JavaScript and so I realized I better put at least this intro section in here that explains some of the terms but hopefully some of the rest of you will get something out of this too and so the first idea is that the network is made up of miners so understand that when you're creating deals in the workshop later today you are creating deals with miners miners are running on the network and they're committing space to the network saying I have this much space space that I want to commit to the network and then store users data or clients data in and so after a miner has committed some space or storage to the network somebody can come along and say hey can I store something and that's a gigabyte in in that space and so the storage is another big piece of what we're talking about obviously file coin is for you to store data on the network with miners when you when you want to store data on the network you create what are generally called deals and so deals are negotiated between the miners and the person or client or app that's trying to store data and so you say okay I want to create a deal for this one gigabyte of data that I want to store and the miner will give you some terms to the deal about how much they want to charge for that storage and you're gonna come to come to an agreement about how long they're willing to guarantee that it will be stored and and other parameters of storing it and that's all contained in kind of what we call the deal and and then once you have a deal you canned and you've gone through what's called sealing and getting basically getting this all completed so that the miner is actually storing your data you can then retrieve the data back out of the network and so retrieval is the next big thing and so when you have the information about a deal and you know the miner that's storing it you can go back to them and say hey I want to I want to retrieve that data back out of you and so again you can get your data back another thing that we throw around a lot that may not be clear to you is that the network is actually made up of different implementations this is a strategy to make sure that there's not sort of like one code base one source of failure on the network and so you may see that file coin there is a library called go file coin and that's one of the first implementations of file coin there's another really popular one called Lotus and that's a newer newer implementation of the file coin spec and so the key thing here is that they both essentially do the same thing they both promise to do the same thing on the network because they abide by a rule set called the spec or the file coin specification and so you could run either of these nodes as a miner or as a or as a client and join the same network and talk the same language but they're behind the scenes they're just a different implementation of that and so if you're if you if you're if you write code sometimes they'll be in different code bases or the hub different strategies or maybe be more efficient and one component of what they do or than the other and so we'll see these sort of continued to evolve together as sort of a set of different implementations there's you know for example there's a rust implementation and but they'll all be working on the same network and so for today's workshop part we're gonna be really working with the Lotus implementation because when we started building the power gate we found that the Lotus implementation had some of the api's that we really needed to just make that work quickly and so we went to that one but ideally over time the power gate work that we've done would actually be able to ride on any of these because they would all implement or they'd all exposed the same api's that you can run on top of but we'll be using the Lotus implementation so just know in your head the Lotus implementation is just an implementation of the file coins Beckett speaks flatline and so then that gets to the power gate which is what we'll get into and the power gate is it isn't a file coin spec it isn't a file coin technology directly what it does is it rides on top of the Lotus implementation and packages all the logic for you to connect a lotus node and ipfs node and a bunch of really useful api's and services and so if you wanted to run a Lotus Notes so you could connect to the network and make a lot of deals you can do that you can just go to the Lotus documentation and and start learning how to do that but what we saw was that there was a bunch of things that you'll start to recreate again and again and anybody who's trying to do that will start recreating those again and again one of them is that you'll want data that not only is stored in file point but you want it on some sort of caching layer where it will be available without you having to go back to the network for example and so the power gate has this multi-tiered caching system that will handle a lot of that for you that's done in ipfs so that you can have data that's immediately network available but persisted on file coin it also has I mentioned before I think the deal agent so that it will help you create deals and do long term monitoring and renewal and all these things and I'll get more into that but so the power gate sort of packages these things together and helps you talk to the quaint Network just to be efficient for building applications or integrating file point into systems and then sort of the last thing that's where the last sort of term the that gets thrown around a lot are these networks these different networks that people talk about and so obviously there's name net and so that maintenance what everybody is building for towards right now right so maintenance when file coin launches and becomes real and people actually start using real file coin to pay for storage and miners start mining real file coin we're not there yet we're in the test net phase and so test net is a is a soar sort of more Wild West network where code is pushed pretty quickly to start getting new features and getting further along in the implementation spec miners are joining and they're figuring out how to commit more data to it and how to seal deals and all that good stuff so main that doesn't really exist test net is out there right now and you can connect to it and start working with it there's two other networks that you might see reference one is the dev net which the protocol labs team has been working on to create sort of a go-to faster version of the test net for app developers so it wouldn't be quite as full of kind of miners testing and miners figuring out how to seal and get get things on the test net it would be a more committed for the half developer side and then the one we're going to use today is something that we've been working on which is just called the local net and local net is really great for cases where you want to be using the api's of the file coin network you want to be testing what it's like what the full flow of data is on the network you want so so good examples that would be like building continuous integration or giving a workshop where you don't necessarily want to wait for the network to do the full work of taking your data finding a miner getting it sealed so with the local net is going to do is it spins up a fake network a completely fake and isolated file coin network completely on your machine so it's fast its lightweight it doesn't need to sync to an external network but it's ephemeral so Yul's that you create there once you close it down once you close your laptop it it will they'll go away there's no real file coin here it's really meant for just building on quickly and you'll see how quick that is in the workshop there are a bunch of resources obviously put out by everybody working on hack FS so you can find more about a lot of the pieces that I just mentioned there so I definitely recommend going and um and browsing around that so let's get into more on the power gate specifically because that's what we'll be using to to build within the workshop today and so I already mentioned some of the pieces here that the power gate is an API driven solution for you to build applications on top of file coin it's meant to give you low latency high up high throughput data over the ipfs protocol or but but backed by persistent long term storage on file coin supposed to give you familiar interfaces for reading and writing data it comes packed with you know a full API salute like solution so you can integrate it into your system and we'll see all that in action so I don't need to go too much into it right now but some features of it when you run a power gate and you'll see this it will it will help you manage both a lotus note and ipfs data so you can move data across the two it has this deal agent which will simplify kind of how you have to think about creating repairing renewing storage deals on the network and then it does stateful long-term management with that deal agent and and it also is so if you're building a system where you have different roles in the system or if you have many users in your system and you want them each to have their own address as a way for you to easily break out the API so that every say user in your system could have their own address on the network and have their own set of files stored and deals that are being managed for them a little bit more of that because we'll get into that in the workshop and so just kind of like plant this in your brain before we get there the the power gate sort of it wraps a lot of the Lotus api's and it connects the ipfs instance and most of that work that it's doing is exposed through a system called the ffs and that's the API we're going to really focus on in the workshop ffs is the file point file system that's just what we we call this section of the API and that's where every when you're running the power gate you can generate one or many ffs instances we call them and an ffs ffs' instance is what you could map to your users or systems that each need their own sort of siloed off space and so in ffs instance has a token you would only speak to your instance with your token and then and every FS instance has its own address for its own balance it can actually have multiple addresses if you need but you can just think of it as like has one address to start and it will do a lot of the work for you and you start creating deals I'm gonna skip this little launch thing because we're all gonna see that in just a second a bit about the multi-tiered storage in the power gate just like if you were building a computer system where you had data that you were trying to store in different sort of levels of availability you might have your data stored in memory if you needed to be fast and hot and you might have it stored on disk if you don't mind it being slower or colder and so we mapped that same idea to using file coin for cold storage and ipfs for hot storage and you can move your data across those two layers of storage as your app needs and you can do that all over the API the whole thing I mentioned is API driven and so will play a lot with the CLI today which just is actually using the API that you'll stand up but you can use that with the JavaScript library as well or there's a go client as well or it's just gr PC so you could write your own clients for this too and and yeah very extensible we'll get into this too lots of different things you can do once you're running the CLI I think I already covered all of this stuff yeah feeling good there that's the key command that we're gonna go to and you're gonna see that a second there's a lot of these top-level things that you can do if you're an admin of a power gate it also will create some indices that will track say like the reputation of miners on the network and that will help you create deals more efficiently we're not going to get into a lot of that today but we can answer questions about that for sure and just as you start hacking over the next week's I think we'll put out more and more resources there okay I already actually I got ahead of myself here okay the next thing that we will come back to is we'll go through in the workshop portion as well but it's worth pointing out now is that when you're using an ffs ffs' instance to store data you do that by taking your data and you attach a storage configuration to the data and that's just a little jason definition of how you want that data to be handled by the power gate and when you every ffs instance has a default one so you don't have to specify it it will just use the default but you can override that or you can change your default and that will determine how the power gate stores it on in the hot storage or stores it in the cold storage or automatically moves the data between the two and so we'll see that in action but here's a quick preview of what that looks like and we'll kind of go through what some of these different flags will let you do some of them are obvious so rep factor is the replication factor so when you store data the power gate wills will create deals on the network for you and with the with the rep factor you could say change it to three and it will create deals with three different miners simultaneously or a fourth - so you can have replication on the network and the power gate will just do everything and it's in its ability to to get your data stored in a way that complies with what you've set for the configuration here so you set a configuration and then you can kind of leave it and the power gate will will do the work so oh the other really cool thing that's worth pointing out is for those of you that are building on ipfs as well the power gate really helps you bridge foul coin and ipfs in some neat ways so one for example is with data retrieval and so if you go to the to a power gate and you say hey I want to get my data back out and the power gate realizes that it only has it in cold storage only has it in file coin it doesn't have to go straight to file coin and make a new retrieval deal and pull that data out using this add timeout setting you can say actually go to the ipfs network first and see if the data already exists on the network before you go like see if anybody on the network is just providing this data before you go back to cold storage to pull it out and so and here with the timeout you're just saying wait 30 seconds to see if the network responds with this data before you go and create a deal on file coin to get it back into the network and that's really neat because you can start to imagine building very hybrid systems where you have ipfs peers users potentially serving their own data or serving data of interest to them that augments and helps keep data alive on the network in the hot layer but even if it's even if it ever becomes not available in the hot layer the power gate can automatically go back to cold storage file coin get it back out put it back on the network layer so your data is available there's a bunch of work that we still need to do about integrating this with external IP FS system so for example pinning services letting you point power gates you're running to pinning services and then I think power gates sorry pinning services themselves might start running power gate like services for their users so lots of cool things possible there and then also the idea of allowing the power gate to help help you manage multiple nodes in multiple areas and help you decide when to move data from file coin onto the network and where there's a lot of possibility expand and build on things there so what can you build with power we're going to come back to all of these two at the kind of like midway point of the workshop so a lot of these examples exist for you to go check out now once you're running your power gate though you'll be ready to run these things so one is a really cool sort of basic power gate pinning service running in the browser and definitely worth checking out and Vasa built this really quickly really impressive how quick he put this together and he's available on Twitter and I think he's on the file coin slack if you want to ping him and ask any questions about this work we'll take a look at it briefly later in the workshop as well and then another one is a community member or somebody who's in the hackathon maybe maybe on the call today I'm not sure had some really cool ideas about building building services for musicians that would data backed in file coin and so he has a really cool blog post where he talks about thinking about architecting apps on top of power gate and using file coin and also definitely worth checking out the next one is one that Aaron from my team put together and this is the tutorial that we'll go into at the end of the workshop but it just shows essentially how to use an authentication system in this case using github authentication to map users to ffs instances so that you can let github user store data on file coin really simple idea a very basic tutorial basic set up easily something that you could clone and keep building and extending on and then probably I mean definitely the most advanced use of the power gate is the slate project and a bunch of this slate team are on the file coin slack and are really open to questions and if you're not sure what to build and you just want to go see them so some things running or figure out if you can contribute to things this project is like wide open and super cool and it's basically your own personal pinning service that you run on your desktop and we'll take a look at this briefly at the end of the workshop as well lots of teams building on the power gate already so definitely some good resources and knowledge out there I think I made this slide already like a month ago so there's a lot more people building on it now and so with that let's start building and so hopefully by now and anybody who showed up late hearted sorry too sorry to have to surprise you hopefully by now you have your docker desktop going because that's gonna be the first critical thing we're going to get into so with the slides kind of over the first thing that we're gonna do in the workshop is just figure out how to run a power gate and we're gonna use we're gonna use some docker compose recipes basically if you haven't used docker before docker compose lets you sort of store your how you want to start up docker or set up docker images and then how you want to connect them together and so in this workshop will use a docker compose that we ship with the power gate that will let you sort of with a single line spin up a power gate a lotus node and ipfs and we're going to use the variant of it that uses that local net so actually it's also spinning of sort of a fake network of miners all on your computer using the docker desk desktop app so like I said hopefully you've made it through the installation flow of docker desktop and if you saw my note in the email ideally you would have already at least run the command once just so that you kind of primed a bump but it's okay if not some things just might take a little bit longer on your and don't worry if you get behind I'll try to go slow so the first thing that we're gonna do is actually just run make sure you have docker running make sure you have docker running and so on Mac for example I have this little whale in my in my taskbar that just lets me know that docker is running on my computer you can see it's still starting up I'm not sure you can see that on my screen share that high but it it's got the little containers bouncing on its back and once that's done it started up and that means I'm ready to go that's more or less everything I need to start using power gate and the CLI for the rest of the workshop well get into the JavaScript stuff too which has its own dependencies but for now that's all we need so with the docker prod sorry with the power gate project we pump out these releases we've just been improving some of them right before the workshop which is always safe and so you can just click on this link oh gosh I'm sorry this this is my script for the workshop if you didn't catch it in the slack or maybe you're just following along in the video and you didn't catch this you can just go here this is the URL for this document itself so just the tiny URL hack FS - pal and that's going to be the script for the rest of the workshop and so you can cut and paste a lot of things you can get links I'm talking about if you just open that up in your browser so ya go there and maybe if maybe a Carson or Aaron what do you want them to just make sure we share that in this lack that would be awesome so okay so I'm running docker I'm already down here now and so the very next thing I want to do is just go in and download the latest release of the power gate and so with every release of the power gate we we generate a few different artifacts a few different things that you can download the first one we're going to use today is just this docker artifact so the very first line when you go to that releases page we're gonna go ahead and download that when you download it so I'm gonna be working a lot in my downloads folder so you'll see I should have just downloaded it here you can go ahead you can follow these if you're feeling good about it too just on a unarchive bat on your computer you can also just use your computer's built-in one if you have that so I just unarchive that by clicking on it that's what most of mine does if if not you can run these two commands to get that folder powder there so now I have a folder let me actually just do that in the long the other way just so you see so this is actually going to be the wrong number now because we already did another release so make sure that number just matches what you downloaded so here mine is 13 for example so if I unarchive that you can see a bunch of things happen and then I can CD into the folder that it created when I own archived it again it's 13 not 12 and if I look if I do the LS to list the files in that folder you'll see it's downloaded a bunch of things the two main things that we're going to touch right now that are well the two things that will touch that are worth kind of paying attention to at this point are the makefile and localnet and so this is that docker recipe that I mentioned before so this docker compose localnet contains all the information for spinning up power gate lotus api's and ipfs all on your docker desktop the makefile that's just so you can run make commands in terminal make commands will let you will basically are prepackaged commands that will do a bunch of things for you and so we'll use that to run to run our power gate so I'm already way down here okay yeah I guess let me go into the sidebar here so like I mentioned in my in my slides the different the different networks that you can join today we're gonna be using local net not not test net the power gate ships with the ability to run test net that's all in here that's the main docker compose and sorry I'm just gonna look at this I don't remember yeah right so if I were just to run make up I think it would it would run the whole system and connect to test net you don't want to do that today during today's workshop because if you connect a test net and it's the first time your lotus node has done that it's going to go through the whole process of syncing to the chain which can take a long time so be aware of that you will want to do that to run your perhaps on the real test net at some point during the hackathon but for today don't worry about that and when you're just developing things quickly and as you're trying to figure out what you're building the local net might be a really good resource for you because you can kind of work off of test net and get all the api's know another caveat when you're running local net you can run it in two ways one is you can run it in the default way and the second is you can run it with what are called big sectors and so one of the reasons that the local net runs so fast is because it uses really really small sector sizes and so the fake miners don't have to do a lot of work and create a lot of space on your in your docker system to store files for you it uses these really small sector sizes and so if you run the local net in the default mode you're limited to only storing really small files actually you can only store around 700 byte files this is great if you're just testing api's so like if you're building something and you want to deploy CI continuous integration you want to test against the file point api's this would work great for you if you want to do something like today's workshop you want something more realistic and so for that we're going to use big sectors so you can supply a flag to tell local net to run with big sectors and big sectors will let you it'll it will operate a little slower but it will let you store one megabyte to like I think it's like 400 megabyte files so really realistic for what you're trying to build an app to do and so to do that we just need to give it this flag so if we're back in the terminal make sure you're in the right folder where this make file exists and where this docker compose exists and we're gonna run this command and you'll see this is doing kind of two things at once the first is we're gonna set this variable this environmental variable big sectors equal true and when the localnet goes to start it's gonna pick that up and realize that it oh you actually want those big sectors so you have some more space you can work with and then the second thing is going to do is it's going to run the make command to fire up localnet and when it what I mean by fire up local as it's gonna make your doctor desktop run all these things for you so I'm just gonna go ahead and run that it prints out something right there which is kind of useful which is the actual command it's running when you do make localnet it's just this is a convenience it's actually running a docker composed command and so right there I see the docker compose command that it ran and and I I put that in the script right here so if you wanted to skip the make file you could actually run this and get the exact same thing and this is how you would start changing how you run it so you could change parameters about number of miners you run in the fake network or or other other other things about the speed so as you get kind of more advanced on how you might use localnet just be aware here's a good template for how you start that up and then you can start kind of parameterizing and changing what you want to do okay so it moved really fast here I don't know if you saw like by the time I wanted to show you that it already moved way past so we kind of walk through the log here and you should see this if you ran that already we see some logs from our ipfs node we see some logs from our power gate and then we see some logs from Lotus and already we see a hope we see an error okay that's not a big deal we don't worry about that right now okay we see a bunch of we see a bunch of warning and info this stuff is all this stuff is all normal don't don't this means that we're running actually so you're just getting feedback from your from your local net that it's running so that means now you have essentially the holes I mentioned the spec that all the tests all the implementations of file coin implement the spec essentially have a network that is running this spec all on your local calling your local docker setup and so that means that we can start firing things at the API we can do whatever we want okay so with that running the next thing you're gonna want to do is actually just open up a new tab we can all leave that running for now and just open up a new tab and we'll keep moving for it because the next thing we want to do is install the power gate CLI so there's there's kind of like the easy way and the harder way to install the CLI if you are if your experience writing go or just want to get into the more technical things going on here you can actually clone the power gate repo and build the CLI right from the go code and there's some nice reasons to do that but for today we're gonna just go the easy route and the easy route is to download the pre-built binaries for the CLI and so right here I have another link for you it's gonna take you back to that exact same place for the latest releases but this time we're going to download the release of the CLI that we want so depending on what flavor of operating system and platform you have windows or whichever linux variant or the darwin build which is for mac users and so for me I'm on Mac so I'm just going to go ahead and download that and I should be able to see when that's complete here locally I should be able to unarchive that and get a folder full of good stuff so you can just go through those steps on on Mac I can just double click it or you can go you can do it through the command line so let me let me just move into that folder which is called so this is the folder that I just unarchive from the thing I download it and it has a few things in here has the license and the readme so an MIT license plus the readme from the repo in case you get lost and then it has this is the CLI itself and this is just a helpful install script and so if you run the install script it's going to try to move the CLI to one of your path one of your binary paths so that you can actually execute it from the command line no matter where you are you could also just execute it in this folder so if you get lost and you don't or installs a problem you can always just stay right here and keep running it but it's kind of limiting so we're gonna install it to our path so I'll just make sure I don't have a bow already installed that would be messing this up but to run the install script I just do this so I just do dash forward slash install before I do that let me just show you what's inside of there it's just a bunch of logic about okay it's gonna try to move that POW binary into one of these two places and if it fails it'll give me a it'll give me an error and tell me what happened so it's just a convenience you can do that manually too but you see so for me it moved POW to user local bin now you should be able to run anything in the POW commands no matter where you are in your computer for me I'm on Mac so one of the problems that happens here is we haven't started signing these binaries yet and then with Mac with Apple you need to sign these with your Apple certificates and all that we just haven't done that yet so you're all gonna hit the same problem likely that I'm gonna hit right now so the first the first command you should run is just the help command so if I run help you see that's the error okay that's totally expected and so if you're on Mac let me just show you how to fix that right now don't move to trash just hit cancel to start and then you're going to go into system preferences just your normal system preferences and then you're gonna go into security and privacy and you'll see that there's been this there's basically this warning here that POW was blocked because it's not from it identify identify developer that's just because we haven't signed it yet but you can just tell it to go ahead and allow it anyway for now so if you click allow anyway you may ask for your password it may not but now it should be okay so if I get out of there and I try to do help again it's gonna be a different warning this time and it's just gonna say are you are you doubly certain you want to do it and if you want to do the workshop you you'll have to be certain hey buddy you could skip this and sit back on the workshop for now but go ahead and hit open and now you can run that it'll never happen again until you go and install it again you might have go through that process again but now if I hit help I can get I can figure out what all these commands are so so there's a I mentioned this on in the in the presentation that there are a bunch of helpful commands here for you to use a kind of the top level of the power gay API you can do things like you could there's a minors index so you can figure out who all the minors on the network are you can look at their reputation you can track sort of the top-level wallet for the power gate but we're gonna skip a lot of those today part of the reason we're gonna skip them it's like when you're running power gate on the test net the information it collects about miners on the network is really pretty interesting and useful when you're running it on local net those are a bunch of fake miners that you're just running locally so it's not good and actually I think the default is just one minor so it's not going to be very interesting actually when you're just on local net so just be aware they all work but less interesting than when you're running on test net so we're going to jump right into this ffs thing I keep mentioning the file coin file file system and I kind of think the best way to show you what this thing is and what it does is if we all just start using it and so we can do that by just creating an ffs so there's not I mentioned that there's every power gate has one or many ffs is so every time you want to use one you have to you have to just create it and so you can figure this out whenever you're lost by just hitting the help commands and reading what's possible so in the ffs command there's a bunch of different things you can do but the first thing we want to do is is use the create command so we'll do POW FS create and if you're successful you should get a little output there with your ffs ID and the token for that ID this token is going to be important for two parts of the workshop one that we're gonna do in just a minute here and then later on you're gonna want to use it again I and so I think best if you have just a notepad or or a text editor or a code editor just copy this and put it someplace because we're going to come back to it and and it's tricky to get get back to easy so make sure you copy that someplace so I'm going to do that myself here cool got that and then okay so when you're using the ffs that token is what is going to tell the power gate which ffs you're talking to every time and ensure that you have the rights to talk to that one because you have the token and so you can you can basically you can basically run any ffs command so sorry let's do I'm not actually gonna run this because it doesn't make sense yet but if I wanted to run the push command I could supply my token with the token flag whenever I run these commands it gets a bit tedious because you're gonna have to keep copying and pasting and whatever that token so instead we can just set it as an environmental variable while we're working and this happens per terminal session on Mac so I'm just gonna do it that way which is set it for this session that I'm in right here and then I'll just keep working in every command of the FS is going to use that token but this is why you need it twice because later we're gonna use a different session a different terminal session and so you'll want to enter it again so okay so what you're gonna do is this command here export POW to again from the script basically you're just going to copy the first part of that and then you're going to grab your token which was spit out of your create command and you're gonna add that as the second part so export POW Chokin so when you do this it just means that it just means that that's a variable now that can be referenced and used by scripts so I have mine set there and I can start doing things with it but it means that the rest of these CLI commands are going to be able to find it and no that's the token I'm talking to so with that set I can go and look at the list and I know we're running a bit a bit long here so are not long yet but we will be running long so I'm gonna move pretty quickly through this stuff because it's all it's all pretty straightforward to copy/paste and get through but like I mentioned every ffs has a set of addresses so if you want to see the address is associated with your FS you can run the list you can create new ones you can see that's the one I have run out of mine remember this isn't a global address in this case it's just in my local net so you won't find it out on the test net you'll just find it locally if again if you ran the power gate against the test net this would be a real address on the test net okay let's store a file because I think that this flow is pretty important to get and for those of you that have to leave don't worry all this was recorded but I'm just gonna stay long and just keep going that's okay with Trent and everybody like let's just do a lot of this stuff and then you can come back and reference it later but so let's all grab a file to store I grabbed one from Wikipedia here and I'm just gonna download it to the folder I'm currently in so now I have this now this I have this epaulet footprint this was so specific it's a boot print image and I'm just going to download it to my folder so I run this w get command if for some reason you don't have W get on your computer you can also just go to this URL and download it into the folder that you're in okay now I want to store this file on file coin so the way this happens using power gate is actually a multi-step process the first is the power gate expects data to be available over its ipfs node when it goes to start storia and so if that data is guaranteed on the network that that node is connected to so in this case by default it's going to be connecting to the global DHT so call any IDF su when you start building your apps you could change that but global IP FS if it's data that for sure is out there you could probably this step but this is actually really helpful for like this boot print for example and you're pretty cold ipfs snowed you're running in docker you maybe want to add it and this add step is just gonna cash it temporarily on that in the power gate so that it can then start creating deals around it this add to so it's not pin too hot it's not permanently store on hot it's just cashing it there so if you run this command now remember this is scoped to that token that you set as the environmental variable so this is add this is basically adding it and using your FS account or instance and you should see that it's successfully has added it and now we want to push it to be stored and when you push it it's gonna push this file plus the configuration I mentioned before that's associated with every file this first round we're just gonna we're just going to use the default configuration that comes with the power gate and every ffs instance and so we're gonna push this file and we're gonna call this watch flag so we can sort of see the progress of the storage happen live so if we all since we all downloaded this same image this is kind of nice for the tutorial they all have the same CID so if you're not familiar with ipfs the CID is essentially the fingerprint of this file universally unique for only this file but because we're all using the same file we should all arrive at the same CID if your output here is different for any strange reason use your output here don't don't use the one that I'll use in the tutorial but I don't I don't have I don't see any reason why I should be different so because of that you can see that this one that I just got when I added too hot matches exactly what I wrote earlier in the tutorial so now the rest of my commands are going to be referencing that CID files in the power gate and storage and the power gate is referenced by CID all the time and so okay so I'm gonna push this CID to be stored and I'm gonna watch it so I'll just be that command hit enter and you can see this is this will hang your your terminal print so you're not you won't do anything else for a minute and you can just watch this status sort of unfold now if you ran the local net in the default setting I mentioned this happens really fast but you're limited to size storage so this would just tick forward we're running it with the big sector so it's gonna be a little bit slower or something like a minute to go through the sort of flow of scoring that file on the network and have the miners do all the work kind of behind it if you do this on the real test net it's going to take much longer than that and so this is really important when we get into the using the API using the JavaScript Lion client that you that you make all this stuff happen asynchronously and let your you users leave and do whatever they need to do when this is done once this is done you can actually always go back here to and and if you want you you should be able to parse through through here and start seeing different logs about what's happening on top of just the info things pumping out okay so we'll wait for that for a minute well that's happening let me show you I'll show you something ahead in the tutorial that I think is really pretty cool which is so if you want to build applications using the power gate it will you basically can run this system wherever you want you can use the whole API suite but something else that we're working on at textile is that technology that I mentioned before called buckets we're working on integrating that with power gates so if you don't need the full power get API you just want to be storing folders and and persisting them to file coin this could be a really good resource for you so okay I'm still in that folder with the image so this is a little side story I'm just going to show you I'm just gonna tell you so I'm still in that folder with the image I downloaded I think I just saw success came through but I'm gonna stick on my little side story here Sweden want to do it later let me just let me just me just make a file here with an index.html okay so with textile hub and buckets we can basically create a bucket which will move all of this to ipfs and push it to a remote a remote node so I can I can do all this we'll have a tutorial on this next week I hope which you can get way more into it and we should have a video from Monday where I do a lot of this and our Doc's have a lot of it too so don't worry this is just gonna be a quick kind of show-and-tell but I can create a I can create a bucket in our command line you can just do short for bucket with which is buck but I can just create a bucket in this folder and I'm just going to call this live demo Oh No let's see and I can choose to encrypt it or not I'm just gonna leave that wide open so that when I push it to ipfs people can see what's inside of it I don't have to do that I'm going to put it in my default thread and buckets are like supposed to be big protocol Interop so when you create a bucket that bucket will have HTTP address it'll have an IP FS hash it will have an IP NS address and now I'm going to show you what happens when you want to get it onto file point as well but so I've created the bucket now I want to push it to a remote node by default it's the remote node that we make available on the hub so I'm just gonna do a bucket push there's a really cool blog post about how it does dipping and sinking and all that definitely worth reading if you're interested in that but it's detected that these are all new files so I'm going to go ahead and push them now the next pieces of what I show you are not in the public version yet this is all just preview but it should be there soon so you should be able to play with it and not too long but basically I've and you'll see this is not our production URL but you can always print out the links so these links would be on the hub domain if if this was production but here I just we have it on our little staging gateway so I can go to this bucket URL now and this is just an IP FS this is just a folder on idea so you could actually view this on any ipfs gateway it's pretty cool it also has the IP NS address and you can see that index dot HTML that I just created in the terminal now pushed off their remote ok so that all that's all cool that's been around there that's been on there for quite a while but what I want to show you now is is moving this to file point so if I take this bucket that's already then pushed already exists and I run the archive command it's going to ask if I want to push this to the test net of course all super experimental so proceed with caution but you'll see that it's cute to be stored on test net so now it means my archive are sorry my bucket is on ipfs but it's also moving it to file point and there should be a deal created and you can basically okay let me pull up what that command is I forgot already just skipping forward here status W oh I forgot the archive and you can see basically that's the whole log of everything that's happened on the remote power gate pier that's doing everything to move this bucket from hot storage on ipfs to cold storage and it's doing this parallel to multiple miners on the network and this is all test net so some of these will fail some of this isn't some of these miners aren't fully functional yet but it's ok it's just a test and start playing with it and you could watch this sort of unfold over time and eventually that deal will exist in that bucket will have been archived on file coin and you'll be able to go check all the live file coin stats things and see your bucket out there existing so we'll have more on this soon but it is like kind of the it is kind of a nice easy way for you to get into phile coin and n merge falcomon power gate but her sorry merge file coin with ipfs but this is all just a subset of what power gate can do kind of more powerfully and so let's get back to the main tutorial now so right so I started that little tutorial or that little side sidebar there while I was waiting for this to come through and say it was successful and so hopefully yours has also and so if it's successful we can also look at the log for that CID and this will actually look really familiar to what you just saw with buckets if I hit log I'll actually remain in the log so I can watch this over time if it changes and so you can see everything that's happened already with that CID that boot print that we pushed to the network and you can just read through this and see how it it create a deal a deal for it with the with your mocked minor and then yeah you want to get out just hit ctrl C if you're not familiar with that so like I mentioned many times now that every deal is every every storage request is paired with a CID config and that config file determines what would all happen right here during this during all this process and so we can look at what the config was for the file that we already have stored by running this info command with the CID and so if you run that it will just print out the config and here it knows it was the default storage config and it will give you all the different parameters that have have determined how the power gate is storing that file like I mentioned before this is that add timeout flag allow unfreeze just says basically if you make a request for the file to pull it back out at the power gate and that file doesn't exactly doesn't exist in the hot layer in hots local hot storage and the power gate determines that it should go to cold storage to get it allow unfreeze just tells it to do that just to go and make the payment to retrieve that data without any sort of intervention and that's important because retrieving data cost file coins so if you set that to false power gate will not go and try to pull it out of cold storage automatically a bunch of cool parameters around cold storage you can filter by country's trusted miner or so you can exclude Myers if you had problems with them or and then you can set things like replication how long you want to be storing the data the max price you're willing to pay whether the power gates should automatically renew storage if your deal is coming up to expiration and all combined this lets you do some really kind of powerful things and repair this one's kind of less important during test net or during this period but as we move closer to main net repair is just the idea that you could store replication store this file replication say you have three copies and one of the miners is slashed because they stopped storing it this will just tell the power gate if it detects an event like that to automatically create a new third deal for you okay so let's let's run that log command against our file again so it's the one we ran like two ago which keeps you kind of locked in here and it'll just it subscribes to the stream of changes for that for that file we will run this log and this is where you're going to need that token a second time so in a second terminal you're gonna you're gonna export that token again so I have in one terminal I have my log sitting there waiting and watching and listening for log changes and in the first terminal or in a new terminal I'm gonna I'm gonna start some new commands and so I want to use the same ffs instance so I'm just gonna set this value again so I don't have to keep resetting it if for some reason you've lost your token and you want to just move quickly you don't have to leave this open for the rest to toriel you can close this and keep using the same terminal and just log again when you want to see changes but for me I want to keep that open so we can flip back and forth so okay so I'm ready in my second terminal and I can verify that I'm ready and using that same FS instance by I could pull up the log I can run any command here against that same CID and it should know about it and be able to do things with it so yeah I'm ready to go and now I want to basically change how the power gate storing that file and so to do that I'm gonna create a new CID config so all you have to do is create a file locally so I don't have anything in the folder I'm in but you can just create a file so you can run touch so that would create an empty file if you run the touch command or if you're using if you have a file editor or whatever just create a file called CID config Jason in this in whatever folder you're in so now I have that folder or sorry that file and I'm just gonna use a really simple editor to open that up you see there's nothing in it and all I'm gonna do is copy this config string into there and the only things that I yeah sorry the only thing I've changed about the about this config versus the default config is a disabled hot and so what this should tell power gate to do is to stop serving it on ipfs so if I go ahead and save that I can now push it to the power gate so basically when you push a new config you're gonna push the same CID and you're gonna tell it here's my new config file and so the power gate will take that it'll look at what the differences are and then it will do everything in its power to start storing it in a way that complies with what you're telling it in the new config look what did I do oh you know what I think my line break there is wrong yeah of course I have it right here you expect that error because basically the power gates warning me like oh that's already stored there are you certain you're doing what you mean to be doing which is to override something that's already stored not stored again so all you have to do is give it a flag that the override flag which just confirms that's what you mean let me see something [Music] what did I do wrong maybe I have not set my environmental variable I'm gonna just try it over here did I get my C IDs messed up I'm just trying to figure this okay maybe we just try again I wonder hmm I wonder what happened there let me just try just try adding it again okay that's good all right I think I think I must have copied something wrong here in my setup oh I'll get that fixed and we're running along anyway so I'm pretty okay with that but basically what was supposed to happen if I didn't get that wrong so I'll get that fixed and share it with the chat channel but basically what was supposed to happen was once you push that update at CIT convict this log will start spitting out the changes that are happening as they happen and so you would see it removed from the hot storage and then what I was going to do as sort of the final step is you had to change too you have to change two flags the next time you push something so I would set the I the hot layer back to enabled which is true but to ensure that the power gate can automatically pull it back out of the cold storage I would set allow unfreeze to true as well and so the final step of this piece was that I was going to I was going to sorry I think I'm getting healthier on what I was just doing wrong okay maybe okay cool all right we're just gonna do it again so if I do this okay cool we're gonna use this instanceid when we push the new config sorry about that that was a copy-paste error in my in my instruction so I'll update this I'll update this workflow right after the call so basically when you do this push this push command when you're pushing the new config you need to use the address that comes back from the cid config so i'll update all that but we are running a bit long so I'm just gonna kind of move past that but come back to this section when you're right after the call and we'll update that so basically starting with the create a cid config i'll update all those instructions so that you can just copy paste them and you'll see basically you push a new version or move from hot you'll push a new third version that will take it back out of cold storage and make it available on the network again cool so the last thing that we can do here in the in the little CLI demo is we can just pull the data back out and so that's really simple I just asked ffs can I get this CID back out and I add I just wrote it to a new local file so if I if I look in here there should be evidence of a moon landing and if I go ahead and just open that you can see there it is and that's the same file just with a different name as the original one that would be put in at the beginning of the workshop so that's kind of been the full that's sort of been the full lifecycle of the file so okay so I already did this part which is to show you okay that's the full suite of api's uh just to just to comment everything you just learned in the CLI you can do exactly from from the API and that includes with the JavaScript library and so I already showed you this which is which is a narrow set of those api's that we make available over buckets and more on that coming next week but for now I wanted to actually jump in and just wrap this up maybe the next ten minutes or so just show you a little bit of what's possible with with the JavaScript client so okay okay cool sorry hi I see what the problem was - the other thing let me explain this really quick because I think it's pretty it's pretty instructive basically when I when I create this CID config don't copy/paste this thing into it the reason this thing doesn't work is because it was mapped to a totally different file here it has it has the wrong address you need to use the one that is created in your power gate instance and so I'll update these instructions for you but obviously I did this once through and then created this as I was doing it and so obviously it doesn't it doesn't match to what you're gonna get so I'll fix that all that before you but um okay so let's look at the JavaScript stuff because I think that's what a lot of you are going to want to build on and so the first link here is for the client Docs and these are these are pretty pretty fleshed out like you're gonna get a lot of instruction in here about how to use the JavaScript client library against this power gate a P I and you'll see if you go to the very first link in the right menu the ffs into index you'll start seeing a bunch of these commands which are exactly the ones that you've already run today and so this should be mapping pretty clearly for you how you could then just go and start building stuff with this but since I'm already running my own power gay instance here my daugher desktop I can already start seeing things people I've built on their own that use these api's locally and so one of them is another one from Vasa I showed this in my slides really quickly this is the example of a personal pinning service that uses meta mask and so I don't sure so if I just log in with meta mask OOP I don't know what happened there well go play with this one maybe hmm go play with this one last time I went in you basically log in with meta masking it will that will create an FS instance for you which then will let you start basically storing file pulse and all that good stuff so the next thing that's the next thing that's super cool is the slate app that I mentioned before and so slate is that is a real full client based on file coin but it uses the power gate to enable some slick little slick little interactions and it gives a really nice interface on top of it but now that you're running your power gate instance already you could actually you can fire this up and so in the instructions that I gave or right in there a readme you can actually just copy this directly and so wherever you are you can clone that repo if you have github installed and you can you can see basically I'm going to clone it I mean a CD into that project so I'm gonna change my directory into that project I'm gonna run npm install which is going to get all the dependencies local and then it's gonna run the development version of this and so let me leave that for a second well it's running and we'll come back to it and i'll show you what happens there and so then the final thing is i was going to do a little bit more of a hands-on with node starter app which is the JavaScript app my plan here was more or less to walk through a tutorial that Aaron wrote but I think this is probably a good stopping point and I've probably like overloaded everybody with things for now but this tutorial is is really well-written good job Aaron and so basically there's I think this would be chapter two for you which is move over here and start building something you have your power gate instant you can you can basically skip full in some tutorial or you can skip all the sections about running your power gate and you can just run these these different commands and edit your app and this is the app that I mentioned that will give you hub authentication and every user who authenticates to the app it will create a new ffs instance and then and then the next step for you would be to allow them to upload files and add files to the target instance so I think I'm gonna leave it there let me just show you know this is taking a little bit long do we looks like now let's wait a second I think I think it's almost ready so there we go so this is the slate client running on my local power gate instance gotta wait for it to compile cool so like I mentioned this is running against the power you instance so if you just follow those steps this is running against your bar gauges since running locally you could connect this to test net in the future but if you want to start storing files you can play around with this I'll just store a file real quick just picture of the mountain go ahead and make the storage deal and you'll see that this is the exact same thing that you saw in the terminal earlier it will move through the process of of creating that deal on the network that's proposing a storage deal eventually it will come around and be success and there's a bunch of other amazing stuff here so definitely if you want some inspiration poke around at that or just to like see how it's using some of the api's go for that but otherwise I think I'm just gonna leave it with that today and just kind of invite you to do chapter 2 which you start building with the JavaScript client and we'll we'll take all your questions async on slack for that stuff over the next few days besides I guess it would be cheating if you started back on early so probably good spot to stop but we can take questions for a little bit longer here live if it's helpful or we can call it a day night afternoon lunch time whatever people's time zones are yeah let's open up for questions if anybody wants to ask anything feel free to just like give me a wave and we'll unmute you we're just right in the chat if you can't you don't have access to microphones yeah all righty I want mute you you want to go to the master yeah it's karate like karate karate it's all right you'll see me again so thanks again for having me I really appreciate all the worth the textiles done to smooth the on-ramp for us and I just had one last question it's really straightforward one I noticed she fired up that file going gooey and so did you clone a repo to get that and then push it to my own local for instance is that what I have to do so my power data since locally that's you were talking about the slate what I kept referring to actually thank you then next thing I know you had a front end and I was like wow yeah I moved through that one pretty quick so basically I clone there it's in the it's in the tutorial the workshop instructions towards the end there's it gives a link to the slate repo and since you already have the power gate running you just need to do the three lines which are to clone the repo CD into the repo installer e both fourth line actually which is to run the project and it will and you basically copy paste at those four lines as one dropped him in my terminal ran all that left kept on talking and it was firing up and then I went to the URL oh yeah it's configured to talk to my local instance yeah so I see a question from Jay Thomas Jay rush which is a short sentences for what buckets verses a threat is so threads are really meant to be a database and typically when you are using a database you don't you don't often put the large binary files in there to move them around it's really for the metadata and for things that you want to query and build in this indexes on top of buckets are really a wrap around moving raw data around and so buckets are built on UNIX FS which means that you you can create buckets that are directories folders on your desktop and all the things inside of them will become hashes on ipfs but the root of that bucket becomes a lot more it actually because it gets anchored in a thread so that a thread behind-the-scenes is going to synchronize that across peers it allows you to push that bucket to remote peers to persist it on the ipfs network and it allows you to edit what's in that folder easily and synchronize those edits across peers that are are collaborating on that bucket and so if you look at the way that the hugs bucket gateway works I can change files in a bucket but the gateway URL stays the same and so it doesn't so it sort of makes it easy to manage those changing hashes that are happening on ipfs a lot so if I have one folder with say three or four thousand files would there be one thread and one bucket and then I can and I'm just continually adding new files to that folder so would that be one thread in one bucket yep it really depends on the data model that's optimal kind of a mix between optimal for your application and your and the thread how threads work but more or less you can actually have multiple buckets in a thread like when you start using buckets it's not really you don't have to start thinking about threads right away it sort of is working behind the scenes but behind the scenes is a thread which you can think of as a database and inside of a database depending on what kind of databases you're familiar with you might have tables or you might have collections so inside of a thread you can have many collections when you create a bucket it creates a new collection so you could have many buckets that are these collections in the same thread doesn't matter but so your a bucket you could just keep adding the same files to that same bucket which would just behind the scenes be changing what is being tracked in that collection okay thank you anybody else can unmute you it's a little nice to hear different voices sure interest started talking let's see can you see that chat enter maybe if you want to just read that the next one I see there so maybe a little bit more context there are you talking about anything I covered today or buckets specifically or something with threads encryption of buckets well I saw sander was on the chat and he's kind of the mastermind of what's happening with encryption and buckets so sander if you don't mind actually giving a good excellent explanation there would be awesome me I mean I knew you sander I think y'all could go ahead and yeah hey everyone I was just typing in the chat there so yeah so encryption in the buckets so one particular any given bucket uses a its own encryption key and that key is actually stored in the bucket schema which is defined by the collection model like andrew is describing it Billy ur a thread can have any different any number of schemas and the buckets Marvel actually just defines its internally it just creates a collection schema and part of that schema has a spot for the key the encryption key so actually when you use the hub buck command it just it just works as you'd expect normally um if you're using an encrypted bucket because the encryption happens on on the daemon side and you can run buckets locally if you want to and then your key wouldn't be shared with anyone and then also built into buckets there's just a client-side encrypt decrypt command it's kind of like key base so you can do the encryption on files and then that's password-based encryption so you just fare that kind of on a back channel if you wanted to but the whole purpose of bucket encryption is to opt-in skate you know the links and the actual data to make up the UNIX FS directory so what we do is kind of a custom UNIX FS implementation where you sort of encrypt as you will walk the the node and then you decrypt as you back it out so I can I can actually pay some or details on the type of encryption that's used if the streaming based encryption I can paste that in the chat yeah once you put that in um the the slack channels for like FS okay we see Rama you got some questions you want to ask those [Music] yeah all right maybe maybe we'll stick with text yeah yeah I have there so just for people watching that video brahma asked if there's a concept of authorization or role to access thread or buckets so that only auth people get access so right now it's pretty it's pretty basic in threads it's it's basically threads are designed so that there can be plug-and-play ACLs on threads that will do more complicated access control but right now it's all or none so anybody that you're sharing that thread with could also be partaking in the access control is just something in our our backlog that were will be implementing soon and then buckets are more or less the same but you can have you can share the output of buckets with people they can't write to them and similarly you can have encrypted buckets that nobody can read except for people that you share the keys with or the password with like Xander was saying awesome any other questions yeah Carson mentioned in the chat that we'll have something specifically dedicated to threads and buckets next week those aren't scheduled yet but we'll be sure to get them on that on the calendar and send some invites out as soon as we're sure when they're gonna be Andrew did you have anything else you want to wrap with or do you think we're I think we're good I think the only thing to mention is that I'll fix that the command that I messed up in the script so I'll fix that command and push it and I'll just mention on the chat in a few minutes that that when that's fixed and then at the end of my script I also have a couple resources that if you were falling along definitely take a look at a bunch of links and then also some opportunities if you're already building a product that already has users and you want to figure out how to integrate this stuff there we're offering some hosted services that sort of like the full power gate stack for those kind of teams that want to are concerned about scaling but for users that are just trying to build hacks the best way is just to run this stuff you saw how easy it was but we're here to help either way that you need and and we'll be giving some more workshops so hopefully a lot more content - I'll see ya we're really looking forward to everything so yeah I will give my spiel once again which is if you haven't staked already please stake as soon as you can this is how we're going to make sure you're engaged with the heck FS event after Monday we'll start removing people who aren't stake just because we won't have like really focused we know people are gonna be hacking for 30 days and we want people who are committed to the event so make sure to stake as soon as you can and it is in a DM or any of the channels with issues you have I know there were some hiccups that people were having there are two events tomorrow in the morning there's a ipfs and centralized messaging workshop similar to this we're gonna be having a Jacob Hyun from the file Queen team going through that recommend checking that out if you're interested in learning more and then in the evening more open-ended session where Wan will be going through the hundred hackathon ideas spreadsheet that we were spreading around earlier open-ended session come hang out chat we're just gonna be figuring out some crazy ideas seeing what's possible hopefully you get some inspiration from that event tomorrow night I think I covered everything of course I miss kickoff on Monday make sure to block out your schedule it's going to be good 12 p.m. Eastern and these will all be sending out all these calendar invites as well so awesome I think that's it we can wrap here let's give a golf clap for Andrew we're talking for an hour and a half good job and we will see you tomorrow and or in the slack thank you 
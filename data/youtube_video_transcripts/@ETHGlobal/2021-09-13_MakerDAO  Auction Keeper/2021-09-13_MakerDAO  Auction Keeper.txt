joining us today's session is with pierchu from the make it out team and he'll be taking us through his workshop session auction keepers and with that i will pass it over to petru to introduce himself and kick the session off thank you very much um hello everyone i'm petru i'm part of the mechador ecosystem specifically the sustainable ecosystem scaling core unit can you hear me yes i think you are and yeah we'll i'll talk to you guys about uh the options in maker protocol specifically the options in the upgraded uh version which is liquidations 2.0 and with that i'll share my screen let me start so i believe you should see my screen now so let's get started so uh pretty much gonna be all about liquidation 2.0 and then the an auction keeper reference implementation that you guys could check learn from and you know use that for your own hacks that you want to build your own tools and so on right so today is pretty much going to be a a good introduction to liquidations how they work and then that i hope will be a foundation for you guys to you know start tinkering and building with the the available interfaces that the maker protocol uh provides to you so yeah uh quick recap liquidations overview of the design choices the smart contracts uh lifecycle for liquidation and then of course okay the most interesting feature that chris putnam has brought which is uh collateral flash lensing and in the end will be um option demo keeper walkthrough so before we start uh to give you a quick recap how conditions happen to make a protocol they start with a user creating a vault um what that means is the user usually deposits a collateral asset the ethereum or any other assets accepted by the maker governance and they borrow dive from from that position right from that from their assets so um if the collector price drops then that vault can be susceptible to the liquidation because the vault has some certain parameters that have given the user to follow such as quantization ratio for example right because uh die in essence is always has to be backed by more than uh what is powered by the users in the end so um if the quantization ratio is below what is set in the system then the vault is pretty much uh open for liquidations right so when that happens as in this example right here for example then um keepers uh would act on that act on on the vault and call certain functions to basically take out all the collateral from from the vault and sell it on the market which would need to cover the debt that the user has generated pretty much right and if the debt has generated is being paid back then some of that dye can um some of that collateral can be given back to the vault and that's it right and all this is done essentially to make sure that the system is always sufficiently collateralized and the system is not intended to be in debt right and yeah pretty much pretty much that's the idea so moving on now looking at the considerations for this liquidations 2.0 upgrade why we call it 2.0 because previously we had a initial version that has been released when the multi collection diet has been released last year in 2019 and this year and this new feature has many more improvements from the previous one and one of them is definitely the single block composibility which it allows you to interact with different other contracts on the ethereum ecosystem in one block transaction right so in essence what what happens there is [Music] um you could definitely uh take the collateral from the auction and sell it on the default market and pay back the debt while you don't have to put any capital uh yourself into this process so you just pay for the gas and that's it right and besides that of course now you're allowed to do partial bids just as when you do typical normal um limit orders for example on any text right and so on and yeah and the other aspects are just to really incentivize the more of a healthy keeper ecosystem with all these new features that are added to really you know have a some sort of a win-win situation from for the users themselves for the keepers but also for the protocol as it intends to always be uh resilient and have no depth at all so this liquidation system it essentially contains a new type of options which is a dodge auction style which means that when the auction starts the price of the collateral is always uh starts at a higher price and then over a period of time that price decreases deterministically and and yet previously uh liquidations in megaperkle were an english style option so that means that the price will start at zero and then you it will just wait for bits to you know to put the price on the option and so on and this one is is reversed um with in the intention to protect the product as much as possible to um make sure that the tip is paid and uh there's no bad debt pretty much so uh a quick example of that let's say there's some system bad debt at around 60 000 the liquidations is kicked off um and the stocking price of the asset is at 240 um for example compared to what the current market price is uh on the exchanges uh white is 240 because besides uh pulling the data from the oracles uh the uh liquidation system also adds a buffer on top of that price um as to instead to buy not just twice but start the higher price auction and then slowly decrease it over time and see what opportunities arise over there so with that when the price starts to drop there at some point would be a market participant that will find the opportunity perfect for them so they will act on that opportunity and um buy the collateral get to die or buy their different wallet or use the single block composibility feature and just you know act on that trade and buy the ether and you know pay back the diet to the pork so if in this case alice just buys 50 000 diet org of the collateral and they're still left something that's diet and as the time the price of the collagen still drops and when it drops to another certain price that is very variable to some actors the leftover collection is bought for the remaining uh for example ten thousand died and for example in the case where for example there's no option participants in the system and the price still keeps dropping then it will not drop to zero because there's a maximum duration uh as well for this option in in seconds of course and after this maximum duration is uh overdue then uh there this option needs to be reset again by uh some keepers out there so when it's reset it basically loops back to the top price and again it's dropping waiting for some opportunity to be initiated so moving forward so as i mentioned the most interesting feature that i believe you guys would be very interested in is the zero capital requirements for developing the skippers or working with the keepers with regular supernova and this is all facilitated through this amazing interesting uh exchange but khalid pattern that has been developed at the foundation which allows you to basically uh connect to any uh d5 ecosystem out there and um you know take advantage of the arbitrage uh market opportunities out there to to sell the collateral uh in exchange for die pay by protocol and in return if the arbitrage is profitable of course you make a a change yourself as well so that's definitely uh pretty cool so uh going forward now looking at the liquidation superior module and its exact contracts it pretty much involves three types of contracts one is called dog one is called clipper one is called abacus these contracts pretty much uh are the necessary interfaces that you need to interact when developing for the auction keeper so dog is mostly a um a country that's part of the core system of the protocol just one contract deploy that essentially sets up the global parameters for other liquidations in the system and then there are the next contracts which is clipper and abacos they are essentially deployed for each collateral asset that is onboarded onto the protocol um just to inform you uh make a protocol when it accepts intellectual assets into its system it generally deploys a set of contract interfaces that are acting like adapters that you know are acting as a deposit contract for the assets and you have also other supporting contracts such as oracle module contracts that you know provide the price fee data for the asset and in this case the liquidation contracts which are clipper and abacus um yeah so now i'm moving forward to clipper clipper acts as a country that essentially receives the collateral from the vault and is having it ready for anyone to take that collateral and auction it pretty much right clipper is the option in contract let's say and abacos is the price feeding contract uh that clipper reads the price of the assets of the collateral that is auctioning for pretty much so uh like i said uh the dog here pretty much contains the global parameters of the whole liquidation system in the protocol and you will say user when as a user is a keeper or as a bot uh you you know you scan these vaults and they see if if some of them are underwater uh those bots they call the dog that bark function and this function here it generally um it you know it confiscates right away the the fault it takes off the collateral from the vault and this is the to the clipper it updates the depth in the system that this much that needs to be recovered and then it you know it initiates the option by calling as well the clipper kick contract for example here and then all the events are are fired as well and you know the option is active and now all the keeper bots out there would act on that and again moving forward the clipper stall contract it is basically responsible for the optioning of the the collateral and recovery of the diet debt and the main function that you have to all be aware of is the clipper that take function where um this match happens when actually a keeper calls the clipper contract to perform a an option and abacus is just a price feeding contract that uh it has many uh price functions in it and these price functions are you know just calculating how are defining how the price is decreasing it's just decreasing the linear format or more for stair-stepping exponential decrease and so on right and these decrease functions are determined usually when the collateral is on boarded and that decision is made by the governance in the maker dial right so to move on now to the uh liquidation life cycle just to start again the vaults become under collateralized default collection is confiscated by doug bark uh doug barton sends confiscate collateral to a creeper contract and then clipper contract now starts accepting bids and is gradual for for die to cover the debt and that can be done with the users who have their own die right or that can be done with the flash landing atomic arbitrage opportunities uh through the exchange kali pattern and when for example uh the bit is you know the clipper accepts the bit and covers all the depth and of course the option is closed and if there's any remaining collateral uh in the clipper contract then that remaining clutch will be sent back to the vault where the user can withdraw so um you know there definitely there's ways to how how to monitor the options uh when you want to build your applications one way is of course you look at the events that are fired once those functions are called be it kick or take for example where we do when the option needs to be reset right you could listen to this event also you could just uh look at the array of the active options uh being [Music] ready for for optioning right and this area pretty much just holds the id of the of the option which in essence is just it then leads to uh the cell the struct um here where you have all the necessary information about this specific option right the amount of die that needs to be recovered the amount of collateral to sell what's the address of the vault that has been you know liquidated uh when the option has started uh what's the starting price of the um collateral asset and so on right so here we get all the necessary information that would then fetch in your application to to build uh your keeper bot and of course uh regarding the auction status you just you know call a get status function and check on the status of the of the option and this will just return you if it needs to be reset or not and if it needs to be reset you just call another function called redo and that resets the option so it can start again from a high starting price and wait for any bits available out there a cool feature that is implemented by the governance is to incentivize keepers to to redo options for example or start auctions by calling dog bark when they do that they usually are being paid a small fee and die to you know be active and actually partake in in the auctioning process so for example here when you uh call redo function you just provide the id of the option but then you also provide an address any address you want beat your code wallet hot wallet or even keep your wallet uh here and then you'll receive a small portion of die uh for for calling redo right so again to give you a perspective now of how that specific uh single atomic arbitrage opportunity happens that happens through the exchange kali pattern and which is just a simple extra contract that is implementing an interface from the clipper contract that then it uses to actually act on um in the difficult system so um looking at this diagram here of course we have the dog contract which essentially starts the options for each specific actual asset then there's a clipper counter for that specific collection asset which in turn has the clipper take function which in the end can also lead to the exchange calling pattern contract which if you as a user want to use that feature or not right so um this pattern pretty much takes a clipper call interface which you then can build uh on top and integrate with every other defy exchange up there uh for your own uh liquidity purposes right to to to do this uh atomic swap uh arbitrage and at this reaper right here at uh make a dao exchange kalis you'll see some examples already uh in production that you could get inspired and build um but the most important part is definitely just this function interface right here which is called paper call and yeah that's that's the steps to go so how this actually works uh when you call clip or take from the clipper contract uh here of course uh that means that you bid on the auction you you take the collateral right so when you take the collateral of course you have to provide the uh option id the amount of collateral you want to buy from there because as it was mentioned before it's a partial bit so you can say okay i want to just take you know a fraction of the available collateral and you know sell it for a diffraction of diet and just pay a bit of debt to back to the system right and if if that is profitable to me as a keeper i will do that right because if i for example take i don't there's faults that have millions of die right or hundreds of millions of dies so if you want to sell the whole collateral then probably there will not be so many arbitrage opportunities but if i take for something one each and sell it for diet then there might be some arbitrage opportunity which for me as a keeper it's my own incentive to to act on my own profitability rather than uh care about the status of the maker protocol right but in essence indirectly you're also helping the broker because you're paying back the debt and also you're making cash yourself uh opportunities uh from from integrating the uh atomic arbitrage opportunity here uh from the liquidation supernode so what that happens you provide all this information but then you also provide a call data into the function as well which kind of you know uh addresses the which uh exchange kali you want to use which exchange you want to connect do you want to sell your um collateral that you want to take from the clipper to uni swap or sushi swap or any other uh defy exchange out there and you know you provide all this data in the clipper call uh to to actually act on that um exchange through the exchange kali contract um yeah and pretty much that's the you know the the gist out of it um we at the maker foundation we have built a simple auction demo keeper uh which implements these uh it's a reference implementation written in javascript which is not as efficient and effective as you might think but it does the job but it was used definitely as just a reference implementation so uh this auction that we keep right here pretty much listens to kicked options from the protocol it fetches all the active option data it uses this data then to later look for opportunities that differ markets such as for example unit swap and then it tries to execute a profitable trade on these uh markets through the exchange kali pattern the atomic swap opportunity right so one of the most important functions in in the skipper is definitely this which is just you know it uses the clipper take function and there you just provide all the necessary information um um to act on that trade right and then as a last parameter there you can add the flash data which is pretty much the call data that you then add to the exchange quality contract that then acts on on that trade through the unit swap exchange for example or another that you choose yourself so a cool example here it was done in the spring uh um some rap bitcoin vault has been liquidated and through this auction demo keeper uh we have um you know uh taken on the opportunity to sell some of the bitcoin on unit swap and then we we got in total uh 211 die which from that 100 has been paid back to the system and as a profit uh husband you as a keeper received 21 die in your wallet because you acted on this arbitrage with the auction terminal keeper um this is a auction keeper uh operation diagram which is also available on the github page right here uh github maker dial auction demo keeper uh which you could look and get inspired if you need to or to understand how the keeper works it's just it is essentially uh the steps how it works right so of course you as a user you initialize your wallet you set up your wallet in the keeper which now works as a keystore file then once you start the keeper it starts fetching and decoding all necessary active options in the system and if there's any active options then it goes to the process of you know reading through the auction list reading out the amount of collections available in the auction that needs to be sold then besides that it checks automatically if there's any opportunities in the different markets out there to sell that collateral and if there's an opportunity then you know if it notifies it prints out the arbitrage opportunity in the console log then it builds up the call data to be used for that flash loan with the exchange kali contract and then the actual transaction happens and when a transaction happens of course it's in one single transaction that does this atomic swap withdrawals opportunity and if you're not if you're successful if you pay enough gas or if you're not racing with some other keeper pod out there right you you are successful and you can earn uh hefty arbitrage opportunities out there by you know writing the keeper and of course if style gets successful then it goes back into the loop and it goes repeats the process for the next auction the next option and next option until there's no more options available in the system so yeah in essence this is it um i could type it maybe uh to with the in the repo here but uh i believe it's pretty straightforward it's a javascript implementation uh there's not many files in this uh keeper bot generally um and you could easily check yourself but if you have extra time let me try to show you so in essence um all the good stuff is happening in the keeper.js right here and all the other files are just supporting uh um modules that helps facilitate the operation of the keeper but in essence it's all happening here it's all written in javascript so it's pretty easy to to run uh there's some basic function that just sets up the wallet of course um and when this is started this started with the with the run function right here which sets up the wallet and everything and then it it's a for loop that runs through all the collateral assets added to the json file in the config where it then you know starts initiating all the contracts the clipper contracts and so on um for each gradual asset and then start listening on them and seeing pulling and fetching all the data and that's available there uh to act on these options right so and then later um opportunity check is called and this is the kind of the main function that it acts actually on on the information that's out there and the opportunities then it calls the actual send transaction function too [Music] and yeah and the rest is just supporting functions uh to help you run the keeper beat a wallet.js which is a module that sets up your wallet um we're looking at the exchange kali uh javascript implementations for example when you need to look for opportunities in your swap exchange then you know you provide the the amount of collateral you want to sell and then you look for opportunities in the uh news of to see if there's any you know profiting opportunities that you could take on then you could act and sell on on the market and yeah um besides that we have a transact module that is a defined module that helps build the transactions in the keeper so this module pretty much takes the um the build transactions there are signs and then they're sent and there's some strategies to make sure if the transaction is failing then it fails right away before you even spend any gas and and so on right so here you could look at and get inspired and maybe improve it further or fork it and you know pretty much play with it and see like where can you go and of course you can you can play with it not necessarily on on minute because you might just lose gas if you uh you know do some field transactions you could easily play with the coven uh interface as well uh on the covent deployment of the maker protocol um [Music] and uh yeah do do as you please pretty much and as a last resource i can send you to if you are want to look for all the contracts available for mega protocol you could easily find it at docs.maker dial here and then the contract addresses is pretty much here at changelogmaker.com you'll find all the addresses for mainnet for for example for for coven as well and here you will find um you know other card interfaces for the proposal that you would you know look into call functions and so on so with these resources you're more than ready to you know to to play with uh into the liquidations system and building your keepers or you know doing the atomic swap arbitrage opportunities out there yeah and with that i think i'm i'm good thanks so much petru that was um a really great session and a lot of information for 30 minutes and there are a couple questions in the chat if you want to take like two minutes to just address some of them uh do you need me to read them out or um would you like to read them out and then answer i can look in the chat and read them myself yeah great all right so the first question i see here um so the exchange click contract will have pairs of two your c20 tokens only right with one being died so the platform can be an nft too um [Music] regarding nfts uh so the way microprotocol works it needs to build adapters for each gradual asset that it implements into the system right uh and then not just that if you know for that gradual asset you also need uh the liquidations for it and so on right so how would you liquidate an nft you have to probably first of all build a specific adapter for it that the nft can be deposited which then make your system recognizes it and besides that you need also an oracle for it right which determines the price feed data of that nfd and then if its price drops and then i guess it could have how do you create this nft right so there is a lot of um in between let's say middleware that needs to be built specifically to handle all these edge cases so that make a protocol could actually end up accepting you know nfts what i can say is that this is actually being worked on by the engineering teams and the maker in the maker dao so go a look go have a look at forum.makerdao.com and see what you can find uh with the exchange kali contract um it it essence it it has this job to just uh take the collateral asset from the option be if any asset that the system has right any accepted assets and send it that send that collateral asset to a a an exchange in the d5 ecosystem be it unisop or social swap or anything which is sold for die right if you don't have a direct uh sale for die you can you know indirectly sell it for you can create that in your exchange contract right you can sell it for you know for tether for usdc which then you sell it for die and then you get a diet and sell it put it back into the make a protocol and you pay back the debt right uh i hope this answers your question um so excessively contract pretty much uh takes any collateral asset from the option right and then it sends it to the default exchange you define and then you also define how you want to sell that collateral right the the yeah the channels how you want to direct the collateral assets for diet right and then in the end what the what option the auction uh system requires is that you pay back diet but how you get the diet right through the exchange contract it's your creativity and your imagination right i hope that answers the question so next question so for creating an auction keeper for multi-platform diet do we have possibility to join the collateral in a pool of different year 620 tokens like balancer and things um [Music] i don't quite understand the question to be honest so for creating an auction keeper from the diet do we have a possibility to join the collateral in a pool of different ufc 20 tokens thanks well i can tell you that you know like i said earlier uh the auction the clipper contract it just if it gives you the the collateral then it needs to receive diet back in one block right to cover uh the debt for that collateral that you borrowed right so this only has to be done in one block pretty much you know one transaction so again um if you manage through your exchange kali interface to you know do flash landing or whatever you might be creative with right uh you could definitely do that but all the requirements are that the [Music] the collateral is given to you in one block and in return you have to give back die uh covering um that collateral right and if you can make an arbitrage opportunity there and make some profits it's your gain for sure is there a window in which i can reclaim before option my collateral that has been claimed to prefer auction all right the time window i believe you say right so if there's a time window in which you can reclaim before option that your collateral has been claimed and prepared for auction well yeah i mean you could just look at the oracle price feed data because there's a one hour delay uh in make a protocol um of the price feed data in the vault so before that actually is taken for auction you just uh quickly go yourself and pay die back to your faults so you're not being liquidated right because you just check your colonization ratio and see if that's at the risky level i yeah i hope i answer your question um then a question from bayou uh what happens when the price of the electrons decline so quickly and there is no liquidation fast enough to liquidate the vault thank you so this is a very uh let's say a black swan event kind of scenario um if this happens uh the current implementation of the liquidation process has a circuit breaker contract that essentially um will you know disable liquidations uh for for the protocol uh if the you know the market price of that gradual asset drops below the accepted range accepted the drop percentage right so that's the current implementation um the protocol engineering team is working now as well in a upgrade to the initiation process to oversee this patch fix that there is now with the circuit breaker uh implementation but essentially uh what happens in the price tag of this declines quickly is that the liquidations are pretty much disabled but this circuit breaker while you know there's this flash crash while the flash crash is done then it's you know reinstated and then we check what happens in the market okay so next question is also which are the different option markets possible to flash loan um well essentially all the ones that you can do these exchanges in one block transaction right so just to think of some it's definitely in a swap and you have sushi swap you have oasis dex which is awesome exchange built by maker foundation you could probably check into balance there as well do those swaps right um and so on so all you can do uh with one in one block uh everything is possible and of course you still have to you know implement those interfaces for the exchanges that you want to interact with and have them implemented in the exchange quality pattern which you'll then have that connected to the equation 2.0 process i hope that helps so next question can you provide a review of a simple implementation for those not familiar with defy um [Music] so definitely yeah you could go check which i think liquidations.makerdao.com have a link here right here so this is a web interface that you know showcases you uh how you could you know interact with the liquidations in the program if there's any good issues you'll have basically you know an interface telling you okay this is the amount of crutches being sold and you can buy as much as for one die if you want you can give one die to the protocol and you get something back in return and also of course we have the the keeper pod which is the option double keeper um that you could look uh more on a technical level you know if you're interested and see how that works which is here at the github uh four slash make it out for slash auction demo keeper thank you thank you guys yeah thanks so much yeah that was a lot of questions thanks for getting through all of those and um yeah pedro will be joining the uh spawn to make it out channel so you'll be able to connect with him there as well if you have any questions and maybe he'll even share the link to his slides for everyone to use as a reference as well definitely definitely yeah just uh let's get in touch okay thanks so much and thanks everyone for joining thank you all enjoy 
analytics we have eric hairs going to give a about a half hour workshop and demo you should feel free to answer get put questions in the zoom chat and we'll try to fit them in during the um the presentation um and then as we get to the end of the half hour we can also try to do some questions then but with that i will um let eric share his screen and we will start the workshop okay um hopefully uh you guys can see my screen okay here um and if you can uh we'll go ahead and get started so um okay so we're good cool perfect so um this is a little workshop we wanted to do like a hands-on demo of uh uniswapper which is our our package for interacting with the unismolap platform those of you who are familiar with r um you may know it's like a pretty commonly used statistical and data science type programming language um we do a lot of our work in our um i just want to talk really briefly about us actually so i'm the chief data scientist at omni analytics group and we're basically a boutique uh data science consultancy and we specialize in machine learning database statistical analysis ai um all kinds of statistics related stuff um and we've been really involved in helping crypto projects utilize their data optimize their dapps increase adoption and we've already collaborated and partnered with a lot of top crypto projects uh the ethereum foundation of a git coin numerai etc um and of course uni swap that's what this is about so okay so um this is basically going to be a workshop there's not that many slides for it i'm going to go through some code where basically you're going to see how you can use the package that we built uh in order to make trades you know do a little analysis of the data on unislop um and check out some of your own metrics as far as the swaps that you've done and the performance of those swaps over time so i just wanted to call out two links because those of you who want to follow along and kind of try this especially if you have already installed even if you don't you can kind of reference these links just to get some information so the first one is our github um if you go to our on analytics group github you'll see uniswapper is available as a package there so you can install it it has the instructions actually the workshop that i'm going to do that i'm going to show you is largely based on the readme so you'll notice a lot of the same code and that was done quite intentionally because i wanted this to be as accessible to people as possible so you can you know refer to that read me to see a lot of the code that we're uh that we're going through this workshop if you want a little bit more detail if you're interested in it we've also published a blog on our crypto omnianalytics.io page um basically we cover the material of this workshop and we also have some videos that we recorded so if you want to refer back to some of these you know you're more than welcome to do so okay all right so let's go ahead and get started so i'm going to exit out of here and we're going to work in our studio so i'm going to kind of go through what we need to go through here um so basically this is an r script that i have created and hopefully you can see the code okay if anyone has trouble seeing it please just you know post in the chat and i can increase the size etc but what we're going to do basically is we're going to go through loading unit swappers setting up a virtual environment uh and then basically making some trades and and you can see here's the script we're going to try to get through as much as possible here so um i want to call out because we had this question from some people who use our um right now enos walker is not on cran so if you're used to installing our packages from cran where you use install.packages uh keep in mind you have to use uh dev tools or a similar package to install directly from our github so uh you can do that with this line of code right here i've already installed it so i'm just gonna go ahead and load it one intentional uh way that we kind of set up uni swapper is that we actually um depend on the uniswap python package underneath and so what's kind of nice is this reticulate package uh it it allows us effectively to integrate with with uh the python code that uh underlies unit swap python so we can re utilize a lot of those functions but expose them into our r script and our r code so basically what i'm going to do is i'm installing a particular version of python it doesn't have to be 387 but i'm installing that version and we're creating a virtual environment for uniswapper and then we're installing that package into that virtual environment so um that might take a little longer some of my installs are cached so um and then we're just gonna say we're gonna use that virtual environment uh and then we're gonna pull the web3 um function effectively from that package so what we've basically done here is we bootstrap the python environment that's necessary sort of to underline uh the code and the functions in swapper okay i'm going to tell the r session that i want to use that virtual environment okay so you'll want to do that basically every time you interact with the package you obviously only have to install the virtual environment once but once you actually get it installed you want to tell your r session to use that environment for the python calls underneath uh then what you can do is basically just like you can in unison python you can set like your infuria node or your other provider in this case i'm using this one for testing um just to show you some of the trading that we can do using the package and then finally this is sort of the last like bootstrap setup step that we need to do um what we need to do is we basically need to initialize a new uniswap session with this function and you just basically need to pass in your infuria node which gets passed in by default so i'm not providing that uh and then you need to pass in your address and your private key and basically once you do that um that will initialize the session and i'm connected and basically i'm now ready to start interacting with the platform so that's kind of the you know the boring infrastructure stuff that we need to get out of the way up front but that's how i now initialize my new session and how we continue okay so let's move on to what can we actually do with this package so um basically the first thing i'm going to show you are kind of the lowest level function so one of the lowest level things we can do is we can do things like check an ethereum balance for a wallet address we can check a token balance um for specific tokens uh you know so for instance i'm going to just pull i think uni and die uh and i'm just hard coding here the number of decimals basically to make the computations all scale by that factor um and once i've done that basically i'm checking this wallet address and i can see okay it's got a balance of 11.2268 over here i have in the interface you can see i have that pulled up on the unit swap that does check out that's what my current balance is so um so let's go ahead and continue um we can also say let's check the specific like balance for a particular token on that so in this case we're basically saying like and for that particular token what's our balance on the platform and so in ethereum and in the token that you select based on the address that you pass in okay so that's just like the really lowest level stuff but now let's actually um do some stuff that might be useful for trading so um there's a bunch of functions that kind of fit i guess a similar type of mnemonic you could say which is like your check e to token ethics it's a lot to parse it first but we try to break it down in the readme because there's a lot of ways you might want to go with this so basically this first function would say like how much uni would you get for 0.5 each when you swap e for uni so i'm saying like let's fix a value of 0.5 how much uni would you get for that when you swap uni for each and you get that value and then how much each would you need to get two uni tokens when you stop eat for uni uh that's kind of the reverse operation there and it gives you a value so these utility functions are sort of like if you want to get a number for what you want to do to make your trade so uh this one you could say like how much eat would you get for two uni tokens when you saw uni for each so these are all sort of like reverse uh kind of you know in parallel to one another but they're all computations that you might want to do with specific tokens you know in order to assess what you can do when you're about to make your trades okay so now let's actually make a trade so i'm going to fix a value of 0.5 ethereum and i'm going to say i want to swap that for uni token so once again remember that i was defining the addresses up here so that's how we're kind of reusing these variables a bit so we're basically saying we're swapping one for another uh this much and it's under this uh uniswap session effectively the wallet address that i already defined so when you do that you get your transaction hash um you're not going to see it immediately but i'll show you like momentarily that trade will take place on the platform and we'll oh and it's already done so you see i just have a 0.5 lower than i had before that trade already took place just from basically being in the r session and letting it run like that so that's probably like the most basic trading function that's available but there's some other ones that might be useful to you um like for instance instead of fixing the value of ethereum that you might want to swap maybe you want you know to specifically get like a certain number of tokens so as much heath required uh to get a certain number of tokens and if you do that then um you know that trade will work too eventually we'll see that balance update over here um you can do something like swap as many uni tokens required to get 0.5 each so in this case that trade in a way is sort of like the inverse of the first trade that we made right um and i think yeah that trade hasn't gone through but you can queue them up so that one goes through there's my transaction hash um no problems and basically like if there's any unexpected behavior so for some reason the trade doesn't go through or if something some parameter of the trade is incorrect you'll get that message in the console but effectively those should end up going through you can see the balance has changed um and they'll uh take effect pretty much right away okay so those are a little bit like i would call them the lowest level functionality that the package provides i mean it lets you sort of check balances make trades but you know you can imagine that that's pretty useful if you have a routine as far as uh you know you know if you're working in r and you have some sort of routine and maybe some thresholds or some sort of heuristic that you might want to use to make a trade because these are all like really simple calls and you know derivatives that these are all pretty simple to make as function calls you can kind of encode this into your script into your routines maybe like when a condition is met in the market that um you know whatever that condition might be you initialize the trade and you can do that with our package to make it all pretty seamless and automatic okay cool so now i want to get into some of the slightly higher level stuff that the package provides and this i think goes a little bit to the uh like the data science world that you know that we come from because even though you know the ability to make trades and to you know do some of these utility functions that we're providing are useful one of the big motivations for us in producing this package was both to kind of allow you to pull data both um you know a user level like how are you performing when you make these swaps how is your performance changed over time you know allow you to correlate it to market conditions and also looking at uniswap as a platform and how their growth is evident like sort of in this in this data so we provide several utility functions actually and i wanted to just highlight a few of them for you so the first one we call it factory stats v2 uh effectively what that is is it's stats uh on all pairs generated by the unit swap factory and it gets completely aggregated so this is like raw data but we've aggregated it down so you know it tells you immediately like 54 000 pairs it tells you the total liquidity and ethereum the total volume in lithium in ethereum um the total number of transactions and you can think of that like that's the most aggregate view of how much uh volume and how basically like the uh engagement with the platform so that could be useful just from a user of uniswap or maybe you know the government and the people involved in the governance and the administration of unit swap as far as like how are these growth metrics changing as a function of time that's kind of like an aggregate view but we wanted to also break it down a little bit for you so we made it really easy to just get basically a historical view of it so this is a little hard to see in my console and i'll show you how to export data momentarily so it's a little easier to see but basically you can see there's like volume uh and and what this is basically broken down to is by day and i think this is in unix time so just a little bit of date parsing needed um you know we could certainly do that within the function as well but basically it's the same statistics that we just saw for the most part but broken down by day so it's like a historical uh view of how these metrics are changing as a function of time you know so really easy one function call to get that and then you can produce all kinds of visualizations and kind of summaries of that data to assess the changing um basically the growth of the platform by the way not to bury the lead but we do a little bit about of that later um later in this uh script you'll see that we actually have kind of turned some of these into like visualization so you don't have to just parse the raw data if you don't want to but we wanted to make sure it's easy and accessible for everyone to do it okay so you notice those functions took no parameters um that's intentional because we also have a version of these functions where effectively you can do the statistics or the historical statistics for a specific token across like all the pairs that token is included in so in this case like passing in uh the uni token uh now you get trade volume derived e total liquidity trade volume transaction count all these statistics that are pertaining specifically to that token and you can pass in any of the other tokens same kind of deal there so basically like an aggregate metric and then specific tokens if you want to and likewise you'll notice that throughout this there's kind of a common theme that if we provide the aggregate version we also provide the historical data so this version basically it will fetch the data and give you like a daily breakdown of all those metrics for your specific token that you're interested in same thing as up here but at the per token level okay we also provide uh a basically what we call token pair map which is basically like for a specific token get all stats for get the stats for all pairs where the token is either base or a quote so if you look at that you can see the statistics are just a little bit different here um but basically what we have i'll go kind of the beginning of this data frame you basically have like an id the block number when this pair was created and then you get a bunch of like parallel statistics so reserve zero reserve one for the pair uh the ethereum reserve the usd reserve and then basically the token um that you're interested in so token zero the first token in the pair these are all uni swap because i passed in uh right here the unit swap uh address but then here for token one you can see these are all the ones that uni saw has a pair with and then the statistics of for those different pairs so you can see like we're sort of going from like a really aggregate view to like a more broken down view depending on you know which of the data and the statistics are most relevant to you in that regard um and just to kind of emphasize on that you can actually also like take one of these pairs take one of the addresses for it and then get some more broken down pair stats here so in this case this is the uni and die pair and you can see it's like an aggregate view of the statistics for that pair so uh quite a lot going on here but you see the prices of the token the total supply the volume of each the usd volume liquidity provider count all kinds of statistics specifically for that pair um and i mentioned moments ago you know when you start to see parastats uh and when you start to see like an aggregate view of the statistics you can expect that we've also provided you with a more broken down view so this one takes i think a little bit longer because we actually allow you to get hourly statistics for the pair and you see it doesn't take too long but there's some data to fetch there and now basically this is basically all the stats you saw previously but broken down by hour and so quite a lot of data in there um but you can imagine because we're breaking it down so heavily if you're interested in training some kind of machine learning model perhaps a time series uh you know the data is here really easy to access for any specific pair and you can do that and that's you know the world of ours is is pretty broad in terms of the capabilities of it and we wanted to make sure it's as easy as possible for people in the community both in the unisoft community and our community to operate on this data this is just a slightly aggregated version of the above kind of to prove that you know we we have sort of some options for what we do here but we can also get daily statistics for a specific pair if you know you want to go kind of in between that level of granularity that we were just saying okay um just really quick to show a couple more uh we have functions where you can easily get the mints the burns and the swaps uh the transactions of those type for a specific pair so uh mints and burns you know those ones are pretty quick i think swaps is i believe gonna be pretty large right it'll but it doesn't take too long it'll just fetch it in batches of 1000 um and then once it's done it'll return a data frame so you see like pretty much all of the functions that we're witnessing here are returning our data frame so we can do what we want with it and i think it's probably something like 15 000 rows here it'll fetch returns that data frame um and then we get our results back so okay so that was kind of a quick overview you know these were all just specific examples of tokens and pairs but it's totally general so you can pass in the address that you're interested in um but i want to show you one other kind of cool thing here which is that we provided like a data export function that makes it really easy just to get like a csv export out of it so let's say you generate like the historical data for in this case the uni token um we've stored it as a variable so it's 411 observations of nine variables you can just specify a path uh and you can say export data and just to illustrate like if i go over here uh on my desktop there's my uniswapper export that was just created so available for me you know if you want to open it in an excel sheet you want to share it with someone else really easy to export any of these data sets outside of our environment okay cool so we've got about looks like about eight minutes left um let me check the chat just see if anyone has any questions um okay so i see someone said how can i use this library with react.js so that's a really good question so the way you would want to tend to do it like we if we're building some kind of like front end like a javascript front end to an application we would tend to use what's called shiny which is an r specific like tool kind of for building a framework where you can turn this into an application if you want to use something like react js the key is that r makes it really easy to expose any of these functions as like rest endpoints so what i would say is it's a little outside the scope of the package but if you look at an r package called plumber um plumber basically allows you to take any of these functions and make them like rest compatible end points and then i'm assuming the react.js application that you build can interface with those endpoints with get requests post requests and and basically you could then deploy this as some kind of react.js application with r underlying the analysis that's what i'd recommend and if someone else has another suggestion definitely feel free to post it in the chat so um so we're using the back end basically that the python uh package the pit package for unislop is using so um basically we deliberately did that because we want to make sure that it's entirely compatible and also because you know there's so much good work done there that that you don't don't want to reinvent the wheel exactly to compute this so um so we're kind of making the calls directly to the python package that is already available in order to do this okay we've got a few more minutes so i just want to show you kind of this last part here and then i'll look if there's any more questions so the previous uh functionality was a little bit about like pulling data and exporting data but we also provided some utilities for exploring data which think of it like we produce some visualizations and statistics on top of the raw data um so let me just give you some examples here we have this function called viz uni swap stats history two basically we prefixed with viz if you're expected to get a visualization out of it um you can see this is in in this case basically what we're seeing here is for a particular token we're seeing the daily volume the liquidity and the transaction count plotted as time series and you can kind of see basically the growth over time really easily you know all the raw data is available so you could produce these plots yourself with the code and the data we provide but um we figured why not make it even easier just to quickly assess the growth um so that's like the growth in a particular token we also have the growth for a particular pair so uh we it's a pretty simple little view here but um let me bring it up here i don't know why that's kind of so small there but basically it's the number of pairs with uh with your selected token as token zero and token one so you can see for a particular token how often is it being used in a particular pair as a function of time really easily okay um and then we also have statistics on the pairs themselves so in this case and maybe i'll just make this a little bigger here let it re-render um in this case it's like the number of daily transactions the daily volume of the particular tokens in your pair union die in this case volume liquidity and liquidity for each of the two tokens in the pair uh time series graphs function at time just like before um and then we also have the liquidity token distribution for a particular pair so it fetches that data what it'll do is it'll re-render and should produce us a histogram so you can effectively see like you know how many holders that the count of holders for each of the different values of the liquidity the token distribution effectively so um gives you a quick look at that okay there's a couple more actually it's really just one more but it has uh several features of the visualization so um there's another feature we added was like what if you want to look a little bit assess the performance of your own swaps and so what we did is like you can pass in certain addresses um and you can basically fetch the swap records of those addresses and then that data like it tells you basically like how much was swapped for what when was that done um you know details of that transaction and then what you can do is there's these visualizations you can produce and let me go ahead and do that and let me make it a little bigger here just expand that window a little bit and let this plot re-render so basically what you can see the cumulative number of swaps over time that were made um the cumulative usd amount swapped over time uh the total number of swaps of each pair and you can see there's a lot of pairs in this case the count of each uh and basically for each token the total number of swaps where that token was involved in the swap so it's like a sort of a global view of a particular you know person and their trading patterns and how that's changed over time and and how successful those swaps have been cool so that about wraps up there's actually like several more functions i'm not covering there's just a lot of um features the readme kind of covers all of them so if you're interested in more please check out the kit hovering me but that kind of gives you an overview pretty quick setup using the python reticulate back end utility and trading functions for actually making the trades data pulling functions you know for pulling data on token statistics pair statistics and then some visualization functions for actually exploring that data so um we really hope but you know it's a valuable contribution to the community we want you you know unicef to be accessible to people who have our experience and likewise we want people who have our experience to have a little bit of i guess you know confidence that they can pick up a new platform and if they want to integrate some of these functionalities and trading functions into their scripts and routines this just should make it a lot easier for them to do so and more accessible to the community as a whole so that's about all i had um let me check in the chat um good question so this question says where is the actual raw data stored on your servers or local to my machine and the answer is local to your machine so um basically like if you're familiar with r um what happens is you have like the notion of a global environment this is my global environment so for example when i pulled that swap data just now i have in memory a storage of like 92 observations of 17 variables that data is living in memory on my machine and so everything's local to your machine nothing stored on a server once you pull the data into the session cool okay yeah if there's any other questions happy to take them um you're welcome yep uh otherwise yeah i i hope you enjoyed and please do let me know if you have any questions or feedback on the package as a whole cool all right i don't know um eric if you got the one question [Music] uh i i might have missed that do you use the graph as back end i'm i'm deflecting a bit because i need to double check uh what a python package uses the back end i believe the answer is that it does but i can't say it with 100 certainty so what we're basically doing is we're going to the unison python package with reticulate to basically use the same routines they're doing and so i want to just double check what exactly they're using as the back end there um but now and i tried to motivate like why we did that a little bit which is mostly because we wanted them to be really consistent with one another you know like if features that are being done there like are effectively available to uni swapper and are you know by nature of the dependencies awesome any other questions now's your chance or you can probably reach eric in the um in the unicode omni analytics discord channel but if that's it all right thank you eric that was awesome reminding everyone this is recorded so you can refer back to it on the um global youtube probably be up in about a half hour um and with that i'd like to thank eric from omnianalytics and wish everyone a good rest of your day thank you so much bye 
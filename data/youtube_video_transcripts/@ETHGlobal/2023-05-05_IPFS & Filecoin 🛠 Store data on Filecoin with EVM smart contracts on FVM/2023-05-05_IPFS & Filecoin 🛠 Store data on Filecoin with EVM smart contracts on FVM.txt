foreign [Music] on the ground outside so nice to see all of you here um my name is Sarah nice to meet all of you if we have not met at the booth yet um I need deaf experience for Falcon Virtual Machine as part of protocol labs and I'm here to talk about the Falcon Virtual Machine and how that can help you with programmatic storage for your smart contracts so yeah let's get into it cool um just to get a show of hands before I start um how many of you are familiar with falcon okay great and those familiar with ipfs and Falcon Virtual Machine okay I guess I'm here for a reason great um and then okay one last question just because I always am interested to know this um how many of you think ipfs and are not clear on how ipfs and ballcoin are different anyone or everyone super clear cool okay I will talk about it briefly because I really honestly I joined protocol apps and then it took me like two months to realize that ipfs and Falcon are not the same thing um so if anyone thinks that I'm here to help to clarify and so that will help you to build easier for your projects cool so um oh yes and if you are interested to watch us uh me and my other colleague to talk and experiment and code live every single Thursday um you can follow us on Twitch we try out different Integrations and sometimes we fail and sometimes we succeed but yeah you if you want to watch a train wreck you can always join that cool all right so um I kind of get started to set the context um for the Falcon master plan so if you're thinking what is popcorn virtual machine which it seems like some of you are new to um that's great because we initially started um we've been around for about seven years when we started it was a decentralized network and so that's falcoin as its own so the difference here between Falcon and ipfs uh Juan Benny our CEO actually founded ipfs at the beginning and that was a peer-to-peer Network which means that when you store stuff you're not paying anyone um your that also means that your data if your node is not being maintained could disappear over time so we then decided to come up with the Falcon Network which is a blockchain whereas ipf is not a blockchain where you can store data and incentivize storage providers to store your data for the amount of time that you want it to be stored for so that is falcoin and that's how it's different from ipfs these two are used together a lot so you we will usually store on filecoin and then we would pin it to ipfs so that you get quicker retrievals as opposed to on the filecoin network you will need to then unseal your data cryptographically and that takes some time and also takes a lot of power which you can do eventually when you want to retrieve back your whole set of data but we recommend that you use ipfs for faster retrievals so these are how the two work together and then and then we moved on to step two where we started onboarding a lot of the data um outside of the committed capacity that we had on the Falcon Network so I think today we are at I think it's like 30 expabytes which is just a lot a lot of data and so I think someone came by the booth and asked me how much data would it take to crash the Falcon network uh the answer was kind of not enough um it's honestly kind of hard to crash but we have a lot of space right now and so you can always upload data to that and now we're at step three where we thought you know we have a bunch of data how do we then emulate what web2 has as an AWS server for example where you have data and then you have computation on top of that and you can run it as a full server so that's what we really want to bring with the Falcon Virtual Machine um and I'll talk a little bit about how we can enable you to write logic around the storage itself it relates to what VPS uh not VPS yeah I wouldn't say it's first I wouldn't say it's private yeah it's pretty open yeah cool so um so I clarified a little bit of that earlier on and to be clear fvm is a layer one and then layer 2 is where all of you are at for the hackathon so I I know it's two days uh we've been in hackathons we've seen and Mentor a lot I know it's a rush so I want to get right into it and do a demo as well so you can see what you want to use in the next few hours and tomorrow as well so Layer Two is where a lot of the solutions and projects are going to be building on top of what you'll be doing essentially with the Fem is you will be building um you would be building your smart contracts um so we are fully sorry let me take a step back um what the fvm allows you to do fundamentally without us talking about the ethereum compatibility first is that it allows you to write logic around the stored data on the network so every single piece of data that stored is part of a storage deal and every storage deal has like some metadata with it so it'll tell you like what size of file is in there how long is it being stored for etc etc what the fbm does is it computes over that metadata so it allows you to move around your data without actually having to open up the whole piece which takes more time and costs you more money so it should be pretty cheap for you to be able to move your data around so that's fundamentally what it does right so now why I say we are here today is so this over here is the fvm on top of a falcon node so every single node in Falcon Network can run an instance of the fvm you can also run multiple instances of it on a note and then on top of that we have two three classes of actors that run on top of the fvm we have the first class which is built-in actors and these are think of actors like smart contracts these are built into the Falcon Network you aren't able to touch them these are system actors that we have built for you to function with the protocol and then you have the second class which is user-defined wasm actors which are we consider fvm native so this will we run modern time under the hood this will allow you to use different Frameworks that you're more familiar with like go webassemblies or on sorry assembly script so we have these sdks as well but then for the ethereum community we're like that's a really really big community and we should be able to provide tooling for them as well so we've created foreign runtimes um and we also have built it in a way that we are VM agnostic so today we are evm compatible in the future we also have the infrastructure to allow us to be compatible with other VMS so Solana is something that we're looking at next we need to tie them a polygon story a little bit more I will answer any polygon questions later on um but yes as of now we are fully ethereum compatible so any tooling that you're familiar with like hard hat Foundry truffle you can use with the EVR with the fevm and so you wouldn't actually see the fvm a lot of it is on the back end all you'll see is your solidity code and your contracts and you just need to understand how our contracts work and how you import that into your set yeah so pretty pretty easy to use the clear definition here is that you will eventually deploy to the filecoin network and not to the ethereum network or to the polygon Network for example which I know for some of you is is a choice for you to make but I just want to make it very clear that you'll be deploying to the Falcon network if you choose to use the fevm that could change in the future and we're hoping to to bring some more interoperability but as of now it will be to develop a network cool so we'll get right into it on how to use fvm in your project um there are two main ways that I think you can use as part as part of the hackathon today so the first way would be the client contract the client contract is a solidity contract that we've written it basically allows you to store data programmatically onto the Falcon network using solidity so I'll run through a demo and show you how you can use it these are some of the tools that we're using hard hat metamask the hyperspace testnet which is a test net that we own as a stable test net and it it emulates on me net so if you've used it there and it works it should work fine on the mainnet as well we have a specially created filecoin.so Library by our partners on decks and so what that allows you to do is that you can use a solidity command solidity methods to then interact with the filecoin protocol setup that you'll need if you want to build it out later on npm node.js hard hat and then I think the new component here is connecting your wallet to the hyperspace testnet and getting some test fill to use as part of your project um so yeah we'll go through the demo what we'll do for the demo is one I'll show you how to connect your wallet it's super easy um we'll get some funds from the faucet and then we'll deploy the contract we will then prepare the data and um just for you those of you who are new to the Falcon Network any piece of data that gets stored there has to be converted to a new format called a car file it is basically like a deck and it will yeah it will be a new kind of format that you need to use in order to store that piece of data I can explain more specifics in it as we get into the demo but if you're just using it as part of the hackathon you don't have to get too deep into it but I'll take you through step by step and then we will emit the storage deal proposal and then we'll check the transaction on the Block Explorer to ensure that it has been deployed cool so we will get into them the demo itself so I'm just going to use a Bare Bones terminal here I hope that's okay with everyone there is a really easy tutorial to um that will bring you through this hold on so if you have come by the booth we have a QR code there it brings you to the hackathon cheat sheet and in the cheat sheet itself it will bring you to a hard hat starter kit that is the main Flagship starter kit that will get all of you started on what you need to build um I will show you and once you get to the hard hat starter kit it's actually pretty easy to get it going um we have most of the steps in there it's super easy to follow um so yeah I'm just going to show this to you first and then walk you through it and we'll try it out on the terminal so this is the hard hat kit um it takes you step by step really quickly to show you how to clone it get you know what you need to then up save your private key I will be using a test private key if you steal my private key you'll just get a bunch of test fill which is fine but don't do it because I need it for demos and then I'll show we'll test it out to show you how you can get your address and I'm going to talk a little bit about what an address means when you look at it as a ox address versus a file coin address and how we've actually had an address manager that helps to convert that and then we'll deploy the basic deal client contract itself and I can talk a little bit more about these examples but the rest of the contracts in the repo are actually more example contracts more than anything else just to prove that you can mint an erc20 token and so on um and then we'll interact with the contract to then deploy a dummy jpeg and then we will see the proposal get emitted and check whether that transaction has gone through okay and one step before we do the heart we get right into the terminal itself um I'm gonna show you how you can connect your wallet so where is my browser cool all right so easy hit the chain list.org um search include um make sure to search include test Nets key in hyperspace I have already connected my wallet but then it yep here you go so then it should pop out over here and if you click at the metal mask it will get it connected to your meta mask so once you have it connected I'm gonna let y'all take a photo here once you have it connected you can head over to the full set and all these resources again are in the hackathon cheat sheet that I will share the QR code for later on and you can always hit by the booth and get the QR code if you haven't had time to get it cool so all you have to do is see as I mentioned all you ever see is your ethereum tooling you just copy your metamask address it's an ox address not a falcon address and you will answer a very complex set of questions over here you know honestly these tests are getting harder and harder um okay honest it's okay they just want to make demos harder for all of us wait is that a wait what's that is it a camera no okay sorry uh we can deploy contracts cannot answer oh there's a they're up black and white okay that's all right okay cool teamwork teamwork we got it um and then you send and typically it takes about 30 seconds to an uh to a minute um the reason for that is that our hyperspace test net which simulate our main net runs in these things called a blocks and so every single ad Box about 30 seconds for a new block to come in so that's usually the wait time that you will take I would say give or take another 30 seconds so we usually wait up to a minute um but of course I already have some tests still in there but just to manage expectations so yeah every single time you press send you'll get about five test fill if you want to run a miner and you want a lot of test fill uh you can always DM me on slack and we'll get you a whole bunch so you don't have to keep answering those questions um to get your test filled cool so that will get your wallet set up so then after that we can hit straight into the terminal to get it deployed so you'll head over here um very easily you would just clone the whole repo yep done pretty quickly and then as I mentioned you would export your private key please please do not use your real private key or you know deploy it if it's your real private key here and then I have my private key copied out over here but again I mentioned this is not a real account so nothing for you there if you want to hack it um okay so then now we have my private key in there so let's test it out let's see if we'll get our address so yarn get a dress cool so we do have my address over here and this will be the address that you saw from the metamask account but then over here you also see an F4 address what that actually means is um so very ethereum compatible and we want you to see the ox address but in the filecoin network we have an address manager that converts it to an F4 address so if you see an FL address and orx address they are the same thing with a lot of our tooling we've made sure that you can key in your Ox address or your F4 address and you'll get the vice versa version of it so it should be pretty easy to use it don't get confused whichever one your you prefer to work with just use that cool so now we make sure that the address is there what we're going to do is we're going to deploy all the contracts in here so as I mentioned earlier on we have a few test contracts in there so if you head over to the contracts folder we have a few examples for you we have basic solidity examples which is just a simple coin just making sure that you can do it erc20 we have a quick start on our documentation page that will show you how to Mint an erc20 token on remix so super easy to use you can just follow steps over here I'm not going to go through that um but yeah you can then run you can mend your token so if you if you want to Mint it as part of your project you are able to do that as well um where was I right and then the other one which is I would say pretty interesting is the Dual here Falcon API examples um I have one example over here so if you want to see how you can import the Falcon solidity Library you could just use this contract to just check if it works but honestly it doesn't really do much we also have a deal with water contract which is an off-chain version of the client contract which is the main recommended flow of how you can store data so this deal rewarded contract over here is actually an initial way that we thought we could store data what we do is that we put money we put a bounty into an escrow and then we incentivize a bounty hunter to come and pick up your data and then do the usual more manual method of running a note and proposing it to a storage provider on the network getting the deal ID for you and returning you the deal ID to then unlock the boundary within the smart contract it's a bit of a roundabout way that was the initial way but we can see you working for certain use cases so for example if you have a designated storage provider that you want to work with or you have a dial and you want to designate 1 person to be in charge of making sure that these storage deals go through you could use this method as well although obviously not a streamlined but is an option for you um so that will be over there and then what I'm going to demo is the deal client so this is the Dual client contract um this is this will allow you to basically um be able to take any jpeg or any piece of data from your from whatever your dab takes data in from and then be able to deal with the whole deal proposal process for you and return you a deal ID that should all be accomplished within anywhere 15 minutes to a half an hour and you should get your deal ID back again because it's decentralized we are working off a network of storage providers that can choose when they want to accept so it is dependent on them on how quickly they accept but we have incentives incentives for them to accept it much quicker on the main net on the test net however you'll get it really quickly in like five to ten minutes because we have dummy miners over there that will accept your deal regardless yep if you want to run a local net yeah I have a few options for that I can show you how to do it um if you run it locally you will basically run your own Miner and then your own note and you run it within your own environment so yes it will be much faster because you can just accept your own deal but oh um for the hackathon you can run it on your local net yeah you could you could do that if you want to yeah yeah we have a Docker image that we just created two days ago that lets you run a load it's actually in the cheat sheet you could spin up the Lotus image and a minor yourself yeah so should be pretty easy for you um so before I get into the deal um client I'm just going to explain really briefly on what happens so we're gonna prepare the data first um I have some dummy data that I prepared over here um again these resources are all in the cheat sheet but we'll usually go to the data Depot first as I mentioned in my step-by-step we are going to we are going to prepare the data so while we prepare the data I'm going to spend some it takes about a minute so I'm going to deploy all the contracts first so I'm just going to go yarn hard hat deploy it's going to deploy all the different contracts in there so we'll let it run in the background in the meantime we're going to prepare this so let's say you want to upload a new file it's actually really easy you could just head over here whatever files that I have um cool yeah we'll just use the FM logo so if you hit it if you put this in over here I think because I uploaded it previously okay I guess I'll upload a photo myself right and so yeah I actually oh it's actually upload it so now I have three files that I've uploaded and for every single file that I have over here there's actually a really easy interface for you to um have and these will be more useful like you will see why you need all these fields later on um these different fields are parameters that you have to include in your dual proposal to then emit your storage deal proposal to the network for your storage providers to accept so we make it much easier for you usually we have a CLI you can also use the CLI method if you prefer I just find this a lot easier to read and explain yeah so you have full ID your file name um you have a usually have a PC ID I think that's still being computed so I'm just going to use one that exists right now um yeah you have a PC ID a payload CID um these are all fields that you need to key in and we have a really easy way for you to see what you need to include so we've written it over here so if I copy this and I add it to a file how do I make this larger oh my God cool um so yeah this is the template that we have for you so all the fields that you saw earlier on you can just input them based on what you have like the con the contract address that you've deployed which is deploying now in the background and I will include that in a second and then you have like the pcid peace size um start Epoch and Epoch as I mentioned appbox are like the blocks that run um tip over here I would recommend that you set an Epoch that's about 5 000 Xbox ahead of the current apple and you can check the current Epoch based on our blog Explorers so we have a really good blog Explorer Explorer over here called Phil Fox we have about seven block explorers in total that support fvm um and Phil Fox is one of them and also one of the most used um so you can always go here and see for that make sure you're on the hyperspace Network you're not the main net Network um that you're actually looking at the right ad box and then you can see what block hi is at I would suggest your start Epoch and end up are about 5 000 a hit so I would usually put like two five eight nine seven one and then my end I thought would be another 5 000 on top of that which would be sorry maybe that's not great but 270 right around there so you can use a box because if you put it too soon you're gonna miss the time when you're actually missing your deal and you're gonna miss the airport and your deal proposal will not go through if you put it too far ahead you're just gonna wait forever until the epoch is hit and your deal proposal goes through uh goes through so that is the most recommended 30 seconds yeah so yeah let's check if our contracts have deployed okay we're down to the last one which is great that would be the deal clients the ones that is deployed I will have the contract addressed and then I can input it into the into the template I just showed you and that would be the hard head task that we want to run in the terminal so once I have the contract address I'll input it in there I will input all the other fields from the jpeg file that I uploaded and then I can copy and paste that wholehearted task and key in here under my terminal and run it and once I run it I should have the deal proposal successfully emitted and then we're not going to wait here because then there'll be the end on my top but I'll take about 15 minutes for your deal ID to come through it and I'll show you how you can use the blog Explorer to then find your dual ID based on the proposal that you admitted okay cool um it has now deployed so as I mentioned I'm going to take this okay so I have I have one that I filled out earlier on um it's going to increase the font size cool so I'm going to change out this contract address over here and I have already fill in all the other fields um which is you know just take a while so prepared it in advance so I have the wholehearted task over here and then I head back to my terminal and I just need to drop this in over here and it's making a deal proposal um the last time it did it I think it took me like 30 seconds or so 30 to 40. but while we're waiting for that to happen I'm gonna show you that to how you can check whether your contract has been deployed so you can always take all the contract addresses that that have been deployed over here so I'm just going to copy the Dual client and I'm just going to search on the Block Explorer and yeah it should show you pretty instantly that your deal is already submitted successfully to the network yep and if you're actually doing this on minet uh we definitely suggest that you verify any contract that you deploy um really important to do verification over there and I think Phil Fox and one other Explorer which is Barracks has now implemented contract verifiers um in as part of their blog Explorer so that should be pretty easy for you cool so while we wait for this I'm going to talk through briefly the next option um I know we're almost at time but I just want to erase this other thing so um I'm gonna bear in mind that if you use this method you probably have to you what you will do is to import the entire dual client into part of your stack and run it as part of your debt um if you prefer to not have to deal with a whole lot of that and you just want to use a storage helper which deals with a lot of the Dual proposal filling in all the blanks preparing the data etc etc you can just use Lighthouse Lighthouse is one of our partners and they've built a storage helper on top of fvm um the cool thing about Lighthouse is that they also provide the additional option of access control so they have a really easy to use SDK that also provides encryption for the data that you want to submit so depending on the project that you're trying to build if you need access control you can also use Lighthouse storage this is also in the cheat sheet so would be easy for you to um click on hooray okay so event emitter proposal IDs out there right now floating in hyperspace how you would check whether your deal ID has come in or not is you would head to the block Explorer again you will head over to deal list and this piece is not I I admit it's not the most intuitive but it's a stop Gap solution for now and it will work you would just need to key in your address and then constantly check because I actually submitted a deal earlier on but then constantly check whether your duid has come in or not so I usually refresh it after about 15 minutes just to see my uid has come in based on my address and then I'd be able to refer to that dual ID as part of my depth yeah again not the most intuitive we are working right now on improving improving um the workflow and being able to automatically notify the client once your dual ID has come in but as of now not available just yet okay so that was mostly the demo um I have very little time left I'm gonna try to just cover um how you can use fvm um if you are wondering sounds cool I mean what can I do with fvm and storage we have a really long list of ideas at rfs.fvm.dev um you can look through those those are all storage focused Solutions with fvm that you can build also once again we have ten thousand dollars for our prize there are a few key categories over here programmable storage markets so anything that will improve the data economy um in this case meaning file coin so if you're thinking of Perpetual storage is really interesting to us so how do you get storage deals to keep renewing and if they have any issue with them automatically repair them on the back end if you're interested in that data dial is a very cool topic that is agnostic to filecoin Alone um but we think it can be used in a much larger way you know what dowels are um and now you think of data dial so if you have a very important data set that you want to gather a dial around like for example for decentralized science we see a lot of cool projects that are actually building already on fvm which I'm just going to show you guys one because I thought this was really really cool um but yeah this team Bureau they actually built a decentralized science app on fvm it's a data dial basically and then everyone just uploads their scientific papers and then the dial will help them is incent their members are incentivized to help to review these papers and then post their reviews um in the dial and everything the reviews and the papers themselves are stored on the filecoin so just just seating some ideas over here um and compute over data also a really big piece um fvm can be used to orchestrate all these jobs for off-chain computation we have a very efficient and good compute over data framework called Pacquiao my teammate Irina she's around at the booth um she's over there commissar but yeah talk to her if you want to figure out how you can use fvm and compute over data um the cool thing is that you know again with decentralized science you could then take the large data sets and do computation of chain and then return the result to your debt so yeah we kind of want to see more of that and then lastly infline tooling so if you want to build any cool tools that will help do if you want to figure out how to automatically send a deal ID back to the client and fix my demo um I'm mostly welcome that I will award your price if you can do it but yeah some tooling ideas as well and then we have a wall cut category so anything cool that you can come up with please surprise us yeah and then lastly I do want to touch on that if you're building beyond the hackathon and you want to keep building we actually have a lot in uh we have all these Integrations that are already launched in the past month with fvm that are compatible with fvm so we have containers for setup we have cross chain messaging and cross chain token bridging we have oracles with teller um access control I just mentioned with Lighthouse and Medusa as well we have some D5 Solutions on liquid staking and Sushi swap is coming in really really soon as a DEX we also have Network analytics apis if you want to use it as part of your project decentralized compute and these are all resources that you can find in the hackathon cheat sheet they are not only on mainnet they are also on hyperspace and I have the contract addresses on there and the cheat sheet so if you want to use them um just hit in there and use it as well but yeah I just want to let you guys know that you know there are many other Integrations that you can build your project out with yep and as a judge and with my other judges um these are the things that we're looking for we're looking for storing files with the fbm client contract that we just showed storing files with a storage helper like Lighthouse it could be either or and then making sure that your project is deployed to hyperspace testnet we do want to make sure that you're using storage well or at least as part of your debt and not just deploying your contract with no storage components or nothing to do with fvm or Falcon onto the hyperspace test net um just want to put it out there so that you don't waste your time deploying the hyperspace but that's what we're looking out for and any Innovative and creative uses of storage QR code this is at the booth as well um the hackathon cheat sheet is in there as well as our docs the rvest fvm.dev and upcoming hackathons and grants that you can access so yeah that was a lot um I am around for questions but I want to take out the next talk so thank you everyone foreign 
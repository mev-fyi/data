security business hello everyone um oh is it on now cool uh hello everyone thanks for coming and it's my art to be here thanks for having me I'm Andy I'm an engineer from constant and at constant we are like the security company so today we'll be talking about like how we at constem helps secure like the past person and future and just share some stories interesting stories we had um from from our experience so who are we um we are security company we try to secure the future of web3 and as a security company we are very lucky we can get involved with different kind of clients a lot of them are top projects in within this industry and we are also a global team so we work remotely like all of our co-works are from different places around the world I think it's probably the same for a lot of like blockchain companies uh unless we're probably one of the earlier smart contract auditing firms and we're also trying to continuously improving ourselves and that's what we're trying to share today so as all wisdom said the best defense is a good offense uh as a as a product developer or as a product or as a protocol company like you want to the way you want to get your user is you must make sure your user can trust your product or your protocols so you need to make sure your security is of the highest gender so like user will be able to you know if comfortable interacting with your protocol or your product and to do that that's what we're trying to serve we provide audit Services that's our core service so we usually do audit for smart contracts um it includes like for instance like nft device and a lot of things and today's Instagram conference so a lot of them will be in solidity a cyber smart contract we also help um like all the things since like um like the layer one blockchain itself for instance these are some of the other we did for the East Point Zero clients and also we also help like wallet or like Key Management things as well aside from that we not only do audit for like ethereum we also help like Solana like we did like the their system contract Audits and also a lot of their one alert tools like we also helped Boba to do their optimistic Rob um audit as well and we also usually treat our client as a friend as a friend we help so we try to increase our impact not just from auditing there are times like client would come to us that they are not sure what's the best way to implement scenes and that's how we can help us we we were able to look at other protocols around how other people do so we can for instance help them figure out like what's the best algorithm to do so there's a there's a my personal experience one day we have a client the controls they're trying to write a staking smart contract so as people probably know what's taking usually it's like you will put it you'll provide your liquidity and then whenever there's a reward like you get certain reward depending on your portions of liquidity and at that time the client when the cult come to us we're immediately like oh this looks a bit weird because the way they're sharing the reward was like they run a for Loop they just run through all the stakers that were just heard and they give them the reward so it's a it's like immediately we're like oh this would have some gas issue and that's the time we're helping them we're trying to help them like oh so we see a lot of other defies how they use this like if people was developing in D5 they know it's usually using like reward pressure algorithm and that's what we share with them we tell them like hey literally there's a Vlogs telling how you do this algorithm and there's even sample codes um and if the client eventually update their algorithm and then we were able to finish our audit another interesting story is from like we have a Optimist group of clients so not sure if you're familiar with there too or not but whenever you're bridging scenes from there one to layer to alert to the layer one um you have like different kind of messages that have to be relayed from either from there one to their tool or vice versa however usually the protocol team would help to do that but it is super expensive as you can imagine like all the transactions I mean they're there too but sometimes if they want to bridge things back to layer one those messages are those transactions they're they're helping you to relate back to layer one and that's how to panic SV for that so we are discussing like how we can solve this and we also try to provide some solution potential Solutions because I think currently there is no perfect answer for this yet um yeah so that's another interesting stories we had from we are helping out or like friends and clients so as a security firm we're very lucky we have able to like look at so many different kinds of things and we're able to you know get enough and also we have to keep all sort of alerted with different kind of um hack or exploit During the period and so we are able to learn a lot of things from the past so one of the one of the really like epic things we had we participated before was the makerdale black Thursday not sure if anyone here was was was in that was still in this industry in that time it was a few years ago it was like I think three years ago 2020 March um so what happened at that day was like there was there was a time like Israel I think it was a bear Market but it started to get up and then all of a sudden it started in the day like dropped around like 40 percent in the price and that itself it doesn't break since yet but then the problem was like I think nowadays all the guests are super super expensive if you're interacting with like ethereum right now but during that past years the Gatsby was actually pretty cheap like five due was like the no more and 10 U.S already like oh that's expensive I think nowadays if you're interacting it's like oh 10 that's freaking this freaking trip um so it was like opposite situation compared to now so what happened that there was a price drop so fast on the market so everybody is trying to either like run away from exchange or they're trying to do whatever things they think it's better for them to hatch the risk so there's a lot of transaction happening on the ethereum at that single day so what happens like the gas price suddenly goes up from a very low level and then when the price goes up it start to break since that's off chain who it was like people wasn't imagining so the first thing that started to have an issue was the oracles and Oracle was kind of like the like the backbone or the infrastructure of D5 if people would know so because you need the Oracle to provide the price on chain otherwise the smart contract on Chen wouldn't know how to get those things so what happened at that time was like the the gas price goes so far the Oracle wasn't able to to send their transactions to the chain to update the price so the price keep saying like the old level and then all of a sudden when the price when the Oracle transactions eventually get in the price drops so fast it started to break all the healthy threshold for the maker down they have a lot of collaterals and they use collaterals to Mint their diet and so when when it dropped their health is threshold those collaterals would be sent into an auction for sale skills like you're lacking money you need you need more money to cover your your die and so that's so that's how it started because Oracle price couldn't get in and then when they got in boom like a lot of things just started break and once those auctions go into there there's another thing starting to break the same way because of the gas price um so record did provide some software for the users to run and then so they can automatically beat those auctions for to to buy those collaterals or a little liquidated but the problem is like low software also have the gas gas price issue like let's set a let's set a gas limit that's not high enough for them to get through this kind of situations so those bidding transaction wouldn't pass through as well during the auctions and until one attacker realized this and so the only thing he did is he just encouraged his his gas price and he do a very like weird bit it's just like his spine is with zero die and it started went through and a few attackers also realized this and then all of them start to attack in this way because all the other people who's using the original McDonald software they just couldn't went through their bit so only low speed there's spine with zero that I went through and all the ethereum from from the McDonald's called collatorio it's just been kind of stolen but although they're just following your protocol um so that was what happened during the maker down black Thursday and it was around like I think 8 million of last for the protocol itself it wasn't it doesn't look that bad compared to a lot of current hacks but it was a very huge one during that period of time specifically like it was before a device armor or just around the device armor um so to solve this uh eventually there's a community group called The Dive backstop Syndicate they're trying to sort of you know come here and try to resolve this problem um so so they come up with a solution which is they mint more maker tokens look their governance token so they mean their governance token and to do option for their governance token to try to compensate those collaterals however just in case if that doesn't work because they said a very huge limit I think it was like 50k unless you're buying 50k of those tokens then you can't really participate so in case those wouldn't work out for employable like the retail users to participate in this this kind of options there's a group called Syndicate and then it provides a Syndicate contract and so during that time what constant helped was like they had this we joined this this group of community people and then they have this contract and we immediately audited it so I think the heck was happening on the 24th if I remember correctly and then this contract was audited just one week in within a week so it was a very fast reaction I mean the thing still still happened the heck is still like the loss is lost but I think all the other process especially this is from a community it went through like pretty fast compare yeah so that was the first one well to talk about and the second one one of the another historical event we we used to help was like the the voltage Finance so we didn't really help directly on the voltage Finance hack um so this hack it was a it was a compound related hack um so I think if you're having you have ever been developing solidity contract you would be know about re-entrancy issues so this is a hack due to re-entrancy but the problem and how they did is like this is the voltage Finance it's a fork of the compound but it was fine in compound because the compound never interact with I would say like weird erc20 tokens because there are some kind of ERC I mean they're not really erc20 they are following ERC probably another protocol but then uh they they have a hook back functions so whenever they're receiving the tokens or they're sending the tokens so this allows those kind of protocols allows the tokens to be re-entrant during to other protocols but in the in the compound they have a government process so they do a due diligence for all the integrated tokens to put on your pools where you know a lot of fork wouldn't do the same they would probably Fork the code and then they just put it and then just start to run it so that was the main issue here so this team like they Fork the they forged the compound code but they didn't follow or they might not know like they actually have other security operational process to help me to get some of their risk um so without knowing that they come up with this kind of hack because they allows integration with those kind of more on standard tokens and so in this case what we have was like we we had a lot of our clients that's working on compound Fork as well so we when we realize this we immediately I think well during that period there are more than this I think there are another few hacks with the same issue so we immediately alerted like the people or the teams where we know they're using the compound Fork as well and we we help like at least two of them to avoid this problem from happening on their protocol although another another probably third thing was fine yeah so that was how we sort of help out on our past clients and how some of the you know tasks exploit and we try to learn from them however we're we're living in the prison world and we have to as a security firm we have to continuously improve ourselves to be able to catch up with the newest things and to catch up with the news hackers they always come up with new ways to you know to attack so to do this within our company we're doing a monthly hack hack run up so we have Engineers every month we actually will try to try to look at what happened during the past months how many like how many dollars were lost and we try to understand and learn like those things how those hack happens and how can we prevent it from happening again uh so one very interesting one is like DeForest uh it is again re-entrancy attack but this time a little different is a view re-entrancy attack so a typical re-entrancy attack you have a state change and before you have you finish in other transactions you go back to the function again that's that's how you start the attacking but in here the view re-entrants the attack you know usually a view function is solidity you won't be able to mutate the state so what it does is it's actually calling another function that will change the the view the result of the view function and then when you're integrating with this protocol if you're calling the view function you will have you'll get the wrong value and that's how they attack it and usually it happens for like um for those functions that's providing the price for liquidity poor tokens so for instance if you're integrating with curve and you want to know like how the curve LP tokens price would be you might call your one of their functions to get the price of LP token but these functions could be gained in their re-entrancy way because as you can imagine how you calculated the LP price it will be like you have a pool with two tokens so you'll be like how many tokens of token a is in the pool and how many tokens of token piece in the pool and times their market price divided by the the total balance or total supply of your LP tokens that's how you will calculate like how each LP token would would have its own value or what the price it is and during the reentrancy for instance if you are let's say withdrawing a liquidity then when you're restoring liquidity first you will burn the lp token because you are sending an LP token back to trying to get your original token from the pool so you will burn the lp token this part is probably fine it's probably hard to re-entrence but then when you're ever they're sending back the the original token then this part could potentially trigger the reentrancy when they send back they can trigger the reentrancy then in this part you have three variables one is like the token a token B and an LP token the token B is still not changed yet so you will have a wrong formula in here if it's re-entranced and you can re-entrance the integrated protocol where it would get the Run value so you will be calculating the round value of your LP token then then everything could be wrong depending on how you integrated with it um so that's one very interesting attack that we've seen although like this this specific vulnerability has probably been announced like an Iranian year on other on curve and but depending on the protocol they might not be aware of it uh another very interesting takeaway we get from this kind of monthly hack run up is uh we realize sometimes the hacker or the attacker might not have an exit plane so they are very smart they come up with a plan to attack you but they didn't come up with a plan how do they withdraw those money out to real life so I think like one one time we see a hack and the hacker are actually using their own ens that's probably linked to their Twitter account so so I think after two or three days like the guy was arrested after that just because like it didn't really it didn't really do too much effort on that part and also like a lot of tokens like a version like usdt like they can immediately Blacklist or your address if you didn't try to you know mix it up for to another address fast enough so that's another interesting takeaway we get from our monthly hack rung up uh beside of that we also have a strawberry trade which in Japanese we kind of call it like shugil so we try to log ourselves for a week in probably yeah I mean in real life it's been Hotel it wouldn't really be in the temple but we try to log our travel in a hotel and for that way we're just discussing about like what are some for instance like awesome some potential hacks for some kind of new ecosystems or for new kinds of architectures what are some of the weakness and this or sometimes we just discuss like what are some new tools so for instance I think for the next one we'll probably be discussing about how we can use jgbt to do our audit potentially uh so we give a lot of it generate a lot of our talks or our papers from this and so for instance like we had like two like last years for the last two years we discussed about like what kind of potential hacks could be happening on Bridges because actually a lot of bridges nowadays are still pretty centralized not sure if people are aware of this and and even even not centralized like they're still like how Bridge handles we are usually they didn't really handle it very well so we realized this after we do the research another thing last year we did was like we we're reviewing all the raw systems and usually people when they come to Raw up they're single it's a layer two it should be very decentralized but then because of their sequencer are usually still nowadays I think it's improving but it's still centralized sequencer and they don't have a very decentralized way for them to ex exit from the layer two if they're indeed have some issue for the sequencer so that was another server another research we're trying to do and then we had also have a short paper for that as well so these are the things we do try to keep up self up to date aside from that we also tried usually when people come to us you feel like we are a third party we are a bit farther a distant away from you guys but there are times we try to actually be more you know like integrated to your your protocols for instance like in Clinton which is a blockchain uh itself not sure if people know that uh I think it's from Korea so it's probably more popular there and we actually tried to stick and try to join our governance so we try to be part of them and we also run our own validation notes for them uh to secure the network and this helped us as well so we learn more knowledge and that's how we can get more deals and get more deals we learn more mods and we can use it as a good cycle to improve ourselves so that's our missions is to secure the future of web 3. so we not only try to do those things we also help train new talents because in the future it will be a new generation that's working on the blocking space or even the AI with production space perhaps so we have engineering helping this for instance like we before we work with like the D5 talent I think it's a it's a program that's trying to train like new Engineers working on D5 platforms so we try to we have like a bi-weekly call with them trying to share of some of our knowledge and try to share like some of potential career paths with them we also have an engineer currently teaching in like a university in Taiwan so he have a he have a I'm not sure it's a blockchain or D5 course but you have a course there it's a full semester course and I look at their agenda it's pretty deep I think it's from like from 101 block blockchain 101 to all the way to like very very complex D5 contracts yeah so that's how we're trying to help in this industry and so so far our product has our service has been helping to secure before launch that's why we do all that so we help to ensure your quality before you're deploying your contract or although like a lot of clients deploy their contract and then after a while they come to us that's another story but usually our security we usually help before you deploy but we are also trying to see how can we actually continuously helping our people to help it to help secure them further on because it's an ongoing game it's not since that you finish after deployment so we have a subsidiary called Trend proof and they're trying to provide sort of like a guarantee like apple care for so whenever you have an audit and we're happy with your quality then we can potentially give you this kind of guarantee which in the future if some exploit does happen and we didn't catch it during our audit then we will be able to refund you into a certain degree and also we will provide a continuous monitoring service that's where we will be able to alert them like hey I think this is weird you probably want to take action to pause your contract or to do certain actions Within probably like an hour um to try to try to Medicaid the the loss of your of your exploit so yeah so that's what we are trying to do in the future and continuously improving this um so that's pretty much it thank you everyone any questions [Applause] oh uh it was called D5 talents but I think it was a bit weird like a bit years ago yeah we had other colors but that's on like the university inside the universe so it's probably not online I think not yet it will provide I tried like it will provide certain insight but all it's still a lot first like it has a lot of false positive and it sometimes doesn't really fully understand it as well so I wouldn't say yes right now but given the current status I think yeah probably after years it will and we need to figure out how we're gonna survive what in your mind is the most ingenious hack you've seen ah that's a good question the most ingenious one well still the one around one of the reason why it's not really ingenious I think it's not like they use certain things that's super brilliant but um one hack I used to see like they just find one line of bug I mean a lot of hack is like that actually so I found that that's very interesting because they have to spend so many effort on actually looking at their contracts and they don't know they don't even know which one would have issues right so uh I probably don't want to name the exploit itself but then I used to see one and then it's really just one issue that's because of the mapping so when you're mapping then usually you wouldn't map like a zero key right you wouldn't have like a dictionary zero equals blah blah blah but somehow like during the deployment during your previous deployment they they accidentally deploy the value to that mapping slot although in in the later deployment I never use that so people forgot about it but then the hacker realized that and then used that as a hack to to get a fee yeah so that one was very interesting and then even even worse was like the everybody can copy the hack so that a lot done like there's a transaction there and then people just copy past their transaction probably change their address and then just and the next hack happened and boom boom so it's a original it was one attacker and then it becomes a public attack on the world yeah cool I guess if no more questions and that's it thanks everyone thank you oh if yeah before you all leave because you came uh we do have some swag and it's like super super scarce like Bitcoin scarce like swag so um we have like 10 plushies we have ten probably eight t-shirts sorry uh and some tote bags um y'all can come and pick something and and sorry if we can't give you what you want um the one's a Flushing very rare dinosaurs yeah can I get one rare awesome the t-shirts are really good by the way like they're like legit like NICE T-Shirts you want to teach her yeah nobody wants a tote bag this is actually like a really nice as well you want a bag yeah there's nobody else nobody else we still have T-shirts and t-shirts they're very large though you know small medium anybody else and look my friend there you go perfect thank you sir all right nobody wants t-shirts okay this turned up anybody hi guys thanks for coming I'm Krill I one of the core developers at the open ziggable project ecosystem and we are building a Next Generation stable coin with optional privacy so he's gonna we're gonna talk about that so we believe that ziki Bob that Financial privacy is first of all of course very important for everyone use cases not only in crypto but in webto world and as in webto world is really a norm for people to think that their financial privacy is somehow preserved within Banks and other institutions in crypto it usually becomes a big problem since the crypto blockchains and are basically public ledgers and all information about public transactions are freely available for everyone on chain to see and when it comes to sensitive financial information so there is no really a simple mechanism for achieving privacy in this financial activities within everyday usage of stable coins so at ziki Bob we are trying to fix this problem by introducing this optional privacy for a stablecoin so we are basically right now building three important projects within our cable package system so Bob itself is a multi-chain multicolateral stable token with optionally privacy implemented via the zikibo protocol which is a VR powered by CK snarks which allows this private micro payments between users and one of the recent projects which also started working with is called pop CDP which is basically a protocol which will allow users to not only generate Bob by locking the stable collateral but also use some of their volatile on chain assets to Mint this Bob using the CDP model so just a few words about the Bob's table coin so the first typical question that is asked about the stablecoin which you probably didn't heard about is related to the how does the stable coin preserve its price and keeps it back so here we decided to follow the simplest possible approach first of all with just starting by baking each bulb with a similar amount of usdc so for now Bob each freely available and circulating Bob is backed one to one with usdc and all Circle itin supplies 100 backed with on-chain stable coins yeah and to further Harden the pack we are also using this concept of very tight concentrated ranges of liquidity on uni swap V3 and similar liquidity protocols yeah for hardening in the back and keeping this one-to-one ratio between other stable coins we also introduced this headless mm called Bob swap which is currently integrated to one inch aggregator and Pathfinder and we're also looking into integrating it into other amm aggregator Frameworks in the nearest Future and basically Bob swap allows you to swap between other waitlisted stable coins into Bob and from Bob with fixed trade which is in zero slippage and almost zero fees and one of the also other cool features it supports is called Idol asset compounding so whenever somebody logs some usdc or usdt in the Bob swap contract this can be automatically Auto compilated to the some of the Blue Chips painted markets like compound or other to earn some additional and notable yield for the protocol Revenue so which is also a cool feature to have and just to conclude about the Bob Part just to throw some numbers so the current market cap of Bob is about 50 million USD with achieving about 8 to 10 million dollars of trading volume daily we have more than 400 4600 active holders of Bob token and the overall collateralized circulating Supply available freely on the market is around 7 million and the Bob itself is deployed on multiple chains we are looking forward to deployment on other chains as well but right now we are present at polygon optimism and arbitrum roll ups ethereum magnet and BNB chain so yes as I said before we also started working recently on this module for collateralized step positions which is soon going to be available on one of the present networks and this way users will be able to generate new Bob on the market using their uniform P3 or Quicks for V3 LP positions with pop or other token players as collateral and this way it's gonna increase the capital efficiency and allow for more collaborations for us in the future so now jumping into the coolest part the ziki Bob so the ziki Bob is a privacy optional privacy layer for Bob token the way it works is by using the zero knowledge proofs people using zkbop are able to confirm the particular validity of the particular operation and transaction without actually repealing the concrete details sensitive details of the of their deposit private transfer or withdrawal such as the amount of their operation the destination addresses and so they confirm this validity of this operation by using and calculating the zero knowledge proof snark proof within their application UI and this way only the actual sender and the receiver of each particular operation has the ability to actually access and decrypt the operation metadata and to actually know what happens inside of this operation then to limit further privacy leakages and to simplify the use case the way how this protocol is used by the users all transactions are sent through the elected 3 layer so that users don't actually need to buy for the to pay for gas in gas tokens and instead they can use the same token for payment fees to the relayer as the as engine which is the Bob stablecoin so here's a small snippet from the UI so basically as I said the UI allows you to make a deposit inside your privacy application from your public wallet on polygon or other available networks then you are able to perform transfers to other participants within the C keyboard pool and finally once you for example receive the salary you are able to withdraw them back to your public wallet to continue your divide Journey so right now we are looking for collaboration in multiple major use cases so the biggest one we are currently focusing on is related to everything somehow connected to payroll activities invoicing payments processing so basically a lot of organizations and crypto and Beyond a lot of dials are already paying their salaries in stable coins which is a convenient choice of currency for payment of salaries and paying them and keeping them on chain is a very beneficial use case but usually this all happens uh publicly on publicly available blockchains which is make which makes it very inconvenient for everyone involved so for those it makes a inconvenient to disclose everyone's salary to everyone for people receiving the salary they can they can be scary for receive uh salary on publicly available address so that everyone on the blockchain can see how much they receive how much they spend and how they spend it so it makes a perfect fit for the Privacy application connected to stable coins to gonna try to integrate with all those who are paying salaries in stable coins yeah and we are also focusing on other use cases as well such which might include something related to vendor purchases Anonymous donation fundraising grinding programs and the connection to the threadfy world and its use cases like on and off boarding between stable coins and traditional banking processing of bank deposit remittances and so on so and as I said with the example of salaries for example how it all works so we have our employer Carl let's say who wants to pay for his people and employee privately so he has usdc let's say he's able to go to UNI swap or one inch UI to swap his USD to bulb at nearly One to One Rate then deposit this whole amount to the ziki bug application and then when the day of the salary came he's able to within one transaction to pay for all of his employees using the CK addresses and then once the employees receive their salary they are able to freely withdraw on their Bob back to the public wallet and so nobody really knows how much each employee receives and what he does further with his money so right now the ziki Bob application is available only on polygon and optimism that the Bob token is present on multiple uh chains as well and as well as people are using other chains as well so for further kind of simplify the uix for our users we also made this cool integration with li-fi so you have access to the widget of Levi within our application which actually allows you to perform quick efficient and fast swaps cross chain between other your available assets and Bob so that you can use it for deposits or when you have withdrawn Bob you can swap it back to other assets on any other available chain quickly within the our UI so now a few words about compliance and our approach to to this topic so first of all we believe that compliance topic is becoming more and more important every day for every crypto project and especially it's true when it comes when we are talking about privacy related applications we have seen a lot of and the events in the past years which were related to the to the Privacy Solutions and the lack of sufficient compliance Solutions so we also believe that no actually a single compliance solution exists that can fit and close all the use cases and eliminate all the questions from all the all of the Regulators so we believe that the the best approach we can choose here is to combine multiple compliance approaches which every on its own make life of malicious actors a bit harder while still preserving the decent amount of Simplicity and the robustness of the user experience in within our application so what we are doing on the compliance side within our publication we are passively screening the deposit and withdrawal addresses so that no malicious actors related to known exploits hacks or other types of listed on chain activities are able to perform operations within our privacy protocol we also allow our will soon start to allow our users to generate a cryptographically verified statement of their account which includes the history of their transactions for last month last three months or so so that they're able to generate the report and to prove to the requesting party which could be a centralized exchange the banking um banking institutions or government authorities what they actually did in the pool where did they receive their money from and how they did it they spent it and so this way they're able to prove the source of funds the the way how they spend it without disclosing it publicly to to the whole blockchain but instead to just disclose them to a particular requesting party they were also imposing different limits on the amount of activity certain actors can perform within the pool so we have a strict limit on the amount of daily activities you can make on the deposit and withdrawal side we have the limit on the total pool size uh all of this makes life really harder for the hackers and the exploiters who are able who want to and deposit and operate on large amount of money but at the same time it doesn't really makes life harder for typical users of our application who just receives the salary or perform day-to-day transactions we also did a cool integration with the binance and know your CAD kyc provider which is basically allows you to Mint to your address to pass the kyc on binance then to connect it to the kyc enabled solvent nft token issue that on your wallet and this our application will check the existence of the Soul bound nft on your account and if at present it will can lift or significantly increase the available usage limits for for the application yeah so and one of the latest feature we have added to the ziki Bob and the one we are asking our hikers to use throughout this hackathon is called direct deposits so basically it's a solution for simple and fast private payment integration within different parking products so its main goal is to minimize the kind of the required effort and quadrant for when it comes to integrating privacy features to open source wallets third-party decentralized application different protocols difficed applications and so on and so the coolest part of that is that huh even though the all all of the previous Decay Bob operations such as deposits transfers and withdrawals they require users to actively participate in the generation of the snark proof within their UI which makes makes it nearly impossible to integrate such a workflow within partner products in case of direct deposits no actually the case no proofs generation is required for the user and instead so Random another third byte is responsible for generation of those snark proofs so the way it works is pretty simple so we have this potential just a few ideas who can integrate interact deposit so it could be text protocols the nation fundraising platforms different cross chain breaches and protocols maybe open source wallets we want to simplify the life of the users maybe something some tooling related to payroll and invoice processing which is located on chain and so all of these protocols implemented in some form of smart contracts can easily interact with the escrow smart contract for our Target deposit processing logic basically by specifying the destination CK address of the users they want to send their money to specifying the desired amount then after some time normally it takes 10 to 15 minutes the relayer which is relayer hosted by us will be will be able to process those pre-submitted direct deposits in batches generate the necessary snack proofs for them in a trustless manner so that no one is really able manipulate the data in the direct deposits after it has been submitted and once this transaction from the relayer is eventually submitted to the full contract and confirmed users of the ziki Bob are the the receivers of those direct deposites are able to access the funds right away in the same way as they do by simple interacting by the simple interaction within our ckbop UI so users can continue to transfer them inside the pool to other participants or we throw them back to the public Xerox address so now a few words about our hackathon bound to what we are asking you to do is to help us to bring the financial privacy and to find the important Everyday Use cases which lacks this financial privacy for stablecoin transfers and to connect ziki Bob with any existing on-chain activities where it might matter and so we are asking you to do so by integrating the ziki Bob Derrick deposit feature with any existing or your customly built protocol project or any other application of your choice so just again a few ideas what where can we start we can build an integration with the open source wallet for making deposits into privacy pool easier and more available for public usage you can integrate it as a and endpoint and at the different protocols related to Bridges swaps and the aggregators you can do something with the purchasing of fundraising and donation from multiple users or you can build something around the payroll tooling and of course this list is not limited by only our ideas you can suggest and discuss any idea you have in mind right now or later at our both both as well so we have a total Bounty of ten thousand Bob for this hackathon for the per 5K for the Post first place to get for the second price and the remaining 3K will be evenly distributed among all successful notable submissions so basically all projects which successfully will be able to integrate the keyboard Target deposits in their projects will qualify and receive a guaranteed balance you within this from this price pool of 3000. yeah and during the judging process we'll definitely take a look at about creativity novelty and the implementation quality of your solution how the ziki bubble integration is actually crucial and integral to the overall application and how your solution aligns with the Pope and ziki system values of unchain compliant privacy yeah and I think we have a few minutes for a short live demonstration of how interactive as it works so we're going to log in into the ziki Bob UI right now so I have created previously a couple of days ago test SDK account so we're gonna wait until everything is loaded so what we see here is that I have a ZK account I have connected a public metamask address to it on which I have right now 5.9 Bob tokens I have a ZK account with a total balance of 14 Bob if I go to the history yeah I will see that this balance of 14 is obtained usually so a couple of days ago I made a deposit of Aid Bob then someone transferred to more Bob to my receiving address to my receiving ZK address and finally I made a direct deposit to this address um to this account as well so in order to just do one more generic deposit to our account we're gonna need to send two transactions so just for the possibles of this demo the simplest way we're gonna do it is through polygon scan UI so this concrete deployment is on polygon so the first transaction is we need to actually approve the tokens the Bob tokens for usage into the direct deposit contract so that's a quite typical flow for any the pre-application so we're going to send an approval transaction so it's good and then in order to send the direct deposit from the polygon scan UI without generation any snack proof we're gonna create a new receiving CK address in our account tab we're gonna go to the second track deposit smart contract and here we're gonna find the direct deposit function for making such deposit so we're gonna pass then address we want to make our deposit into then we're gonna choose the amount let's say we want to deposit three Bob tokens so the Bob has 18 decimals so we're gonna also type 18 zeros and the fee for depositing is 0.1 Bob so we're gonna add that here as well so that the receiver will actually receive free Bob and then we also have a third parameter of fallback user which is a basically alternative receiver for this particular deposit in case it cannot be made through due to some compliance issue with the with the sender similar problems so since we are sending the deposit to ourselves we're gonna just copy the same address we're using in our metamask here I'm going to send this transaction so we're going to see that from our account 3.1 Bob will be eventually deducted during this transaction so yeah and once the transaction that's where it till it's displayed so yeah we have successfully submitted a direct deposit from our address to the CK Bob direct deposit smart contract so now we're gonna have to wait for 10 to 15 minutes for a layer to pick up this transaction to put that in a page generate a necessary snack proof and submitted to the main Z cable pool and after that we're gonna see the one more in Kevin transfer or free Bob with this direct deposit label on our account and the total balance of our account would be increased to 17 Bob so yeah that's pretty much how it works yeah so for feel free to access to subscribe to our Twitter read the dogs about ckbop on our website we have a cool page for specifically for this hackathon regarding direct deposits come to our booth for any questions for any if Global and yeah thank you very much for your attention I think we have five minutes for questions here if you have any if you have any questions so please raise your hands are gonna bring their mic oh yeah so how um volume dependent is the Privacy protection so like if there's not that many people doing deposits and withdrawals is it easy to track like linked together the transactions yeah so of course this there is a well-known concept of anonymity pool so and it works differently in different protocols since in our protocols there are not only deposits and withdrawals on some fixed amounts but you can also kinda after you make the deposit split it in multiple withdrawals so make transfers then within the pool so actually the funds become really dispersed over time pretty fast and so if you even with within like hundreds of users it really becomes nearly impossible to tell what really happens and how are they connected so yeah basically I think even existing anonymity set for the Ziggy pop is already quite enough for for the majority of people so if you're gonna go into the contract open the token transfers here we'll see that a lot of stuff going on here and there is actually no any way to tell how this depositors and withdrawals are connected with each other how they can exchange it the money within the pool so it kind of becomes quite untrivial to to the reverse engineer sorry so is there a way to withdraw a fund on on chain Yeah so basically once you have this balance within the zika account and you want to withdraw to your public address you're gonna just select the withdraw tab I mean without uh without the UI is there a way to call that on solidity or yeah so it's uh not possible to call it directly on solidity since in order to withdraw the user must generate the snark proof so the solidity on its own cannot and generate the snack proof so right now the only option is to use the UI for generating these proofs so we have like a more low level for like this awesome Library which is responsible for this proof generation necessary SDK so maybe we're going to build some widgets which are going to help to integrate this into some other external uis in some time in the future but yeah anyway so there is this low level Library which is responsible for proof generation and this is probably going to be the only way the person is able to initiate and submit their withdrawal nothing quickly is the both swap deployed on any Testament in now any tests like Glory or separia I think no unfortunately but probably we can deploy it no problem so yeah it's deployed on polygon optimism and all other networks yeah integrated with one inch but yeah if you wanted to to happen on Gurley or cipolla yeah we can definitely do that no problem not right now but yeah maybe within this hackathon yeah I'll try my best yeah how strict is the deposit screening like would a wallet freshly funded from tornado be be um sanctioned well I think you can try I'm not sure it will be immediately flagged but so we are using the trm for now is our screening provider so it's we kind of do not screen ourselves so we don't don't uh not 100 sure what uh the quality policies within theorem how this score factoring uh depends on the different sources on the amounts and how you like and the different timings but uh I think it obviously marks very obvious use cases when someone launders hundreds of millions of dollars yeah definitely gonna Mark those definitely not gonna Mark you know casual wallets of simple users who are like transferring you know value of below one thousand but what happens in the middle it's really hard to tell usually and yeah it all depends on how this trm provider behaves and they do not actively disclose what are their politics and how they calculate these score factors what was the name of the the people sort of in charge of the sanctioning again and trm Labs theorem trm oh okay yeah thanks for stopping by thanks a lot audio thank you hello yo uh I'm York welcome to permissionless interoperability and warp routes I'm from a project called hyperlan we're a interoperability protocol focused on modular security and bringing interoperability to all chains so we're very chain agnostic we're hoping to kind of support whatever chain you guys want to be working on in this hackathon you can stack some bounties it's my colleague Nam uh we're going to hopefully do a live demo for you guys at the end here uh fingers crossed but yeah first let's hop into what is permissionless interoperability and what are warp routes um and why why should you care so just as a definition to start with interoperability in our eyes is composability amongst apps that are on different infrastructure so whether that's like adapt that's on an L2 composing with adapt that's on an L1 or a Cosmos app chain with a Dap on ethereum or you know something more exotic uh that's that's what we Define as interoperability and if you look at the DAP ecosystem in the past couple years what you'll find is that the infrastructure that daps are choosing to deploy on is kind of increasingly Divergent as people start to realize the benefits of different trade-offs throughout the uh kind of layers of the blockchain stack um they're choosing like more and more diverse uh trade-offs so you know we have uh kind of the the hot stuff right now is like uh you know data availability layers like having this infrastructure layer that's optimized for this specific task um you know there's also a lot of people thinking about app chains and kind of the different economics that you can capture as a dap developer by kind of controlling the entire blockchain stack um so these are just a few examples but uh should be abundantly clear by now that like this is only going to become increasingly diverse um so the ethereum ecosystems Focus mostly on kind of the roll-up side of things uh they've kind of committed the past couple years to that uh scaling strategy but um it's by no means kind of like uh I think a final destination um they still want to work on these other things plasma sharding Etc um and we're seeing daps to adopt these new roll-up architectures in the ethereum ecosystem um so arbitrum optimism kind of the two canonical examples of like big roll-up ecosystems there's a bunch of D5 happening on both chains um and the challenge for Gap developers is the developer interfaces uh for interoperability between like all these different layers is super fragmented so uh each one of these Roll-Ups like let's say arbitrary and optimism they all have a custom like uh Bridge implementation and so if you want your dap to be interoperable between like arbitrum optimism and ethereum you got to implement like three different interfaces depending on what you're trying to do the action like you have to use at different pathway so like deposits and withdrawals or one pathway and then there's like separate Pathways for bridging wrapped assets um or doing like arbitrary message passing or arbitrary contract calls on these other chains like all these generally you have to like use some different pathway maybe like the canonical Bridge doesn't provide this or it doesn't provide it at a latency that you're happy with um and so yeah this is like super hard as adapt developer to actually like take advantage of all these new things so typically what we're seeing is people are just choosing a roll up they're like oh I think arbitrum's winning so like I'm just going to be an arbitrary dap um but there's no reason that uh they should have to take on that risk of making that choice so early on in their uh product development um these are just a couple examples of like uh uh things that get unlocked once we start getting like real interoperability between heterogeneous blockchain architectures that uh at the infrastructure layer provide different uh capabilities or features so I'm going to move quickly through this um yeah I'm gonna also just move quickly through his but okay so hyper lands uh kind of one of hyperlane's core ideas or insights is that uh in order to provide this like modular interoperability layer that developers can use across all these different infrastructure layers we need to separate the uh transport layer and the application layer and so at the application layer we can have a consistent interface that developers can use across all of these different infrastructure layers and depending on the kind of pair that developers are having communication move between the transport layer might look slightly different but all of that is going to be kind of abstracted away from the application interface that like dap developers need to understand and this allows app developers to basically no longer have to think about like maintaining multiple implementations of their protocol for different chains for different Roll-Ups [Music] um and uh furthermore like uh that developers should be able to express their preferences for security and kind of the trade-offs that they want to make in their application so if you look at kind of like the canonical roll-up Bridges like we just talked about arbitrum optimism you know we have a very specific fraud proof mechanism that implies some you know security constraints some latency but it's this like Omnibus model that all applications on that roll up need to opt into um and that might not make sense for your application or it it might only make sense for like one type of action that happens in your application but otherwise you know you maybe don't need all that security or you'd prefer the the lower latency like faster finality settlement pathway so we want to allow dap developers somehow to express their preference for these trade-offs in the interface and as stronger verification mechanisms become available from kind of the r d side of the the ecosystem like a bunch of people are working on you know ZK Lake clients all this like signature aggregation stuff as those become available the DAP developer can just change a very simple configuration without changing any of their implementation to say hey I'm gonna now apply this new security module to this these set of actions that are happening between these set of chains um and that's just like a configuration layer in their smart contract instead of like a whole new implementation that they need to do to now like go and verify some new uh security models like messaging format um yeah and the final the final kind of like core idea that we're excited about at hyperlane is extending this capability and this uh developer interface and and like modular security Paradigm to any chain that you guys want to be on so uh we have a feature that we've been like working super hard on recently that we call like permissionless deployment and it's this idea that uh someone who's like maybe spinning up their own roll up let's say they're using like the op stack or something uh they should be able to just bring hyperlane there independently from our organization and so like we've basically built out the the tooling for developers to deploy our protocol to their chains and this just way more scalable than what we've seen with like the existing Bridge bridging and messaging providers where you have to kind of go and like Lobby them and like they have to take on some amount of risk to operate on your chain and maybe there's like not enough economic incentive for them to do that um yeah so uh this is hopefully what we're gonna live demo today uh in a moment uh or you went through that cool so Switching gears a little bit the application that we're gonna try and deploy today across a few different chains is called a warp route um a warp route is basically like this collection of contracts that allows you to Route tokens between chains um there's a few different flavors of our warbrad implementation so we have like the native flavor which allows you to wrap native assets um like let's say eth and in like a single transaction route them to some other chain the collateral flavors for like existing tokens and then synthetic is for how to represent those collateral tokens uh on chains where they're being worked to um so a warp route is like some collection of of these set of Primitives and I'm not gonna go super in depth here but you should definitely check out our docs um I think the basic premise is like we yeah I don't I don't even really want to get into the kind of how hyperlane protocol Works in this Workshop because I think it's like less interesting for the hackathon context but um yeah there's a bunch of stuff going on here um you can imagine Bob being like a recipient application and uh the idea is Bob can specify his security preferences for like what types of warped assets he wants to accept into his application um so where to whereas today we have like let's say Wormhole usdc that's like bridged everywhere that has some kind of like Global Security model that everyone is basically opting into if they're like using wormhole you can actually like have different uh I guess like you can almost look at them as like tranches of uh uh a warped asset that is like using some specific uh risk tolerance or security model to verify that like those assets have indeed been uh kind of locked up and collateralized on some other chain if that's the instantiation um cool so yeah we've basically like built a bunch of off-the-shelf tools for you guys to play with this like warp route primitive so the idea is like you don't even have to necessarily write your own contracts you can deploy one of these web routes between any chain that you want to deploy hyperlane to um and that'll allow you to just like import liquidity it's like a big use case that a lot of new chains um are really struggling with right now because uh in order to like launch a new chain you need to establish some reason for people to like come to your chain and that usually implies like having some economic activity and so you need to bootstrap that somehow um and an easy way to do that is just like importing liquidity from some existing chain you kind of like can leverage existing Network effects um but if there's no token Bridge operating to your new chain you can't do that so the combination of like being able to deploy hyperline to your chain and like having this nice warp route primitive allows you to like spin up a chain which can like solve this kind of cold start bootstrapping problem um cool so yeah we have a bunch of different tools here for what I just described I think Nam is gonna try and demonstrate us deploying hyperlane to a test net and then deploy a warp route between that test net and and maybe some public testnet this up cool all right so like York said we'll be doing a live demo of what it's like to deploy a hyperlink to your own chain so let's set the context here let's say right like you create your own roll up and you're just like oh it's all great but like obviously now you have to convince right like developers and users to come your own roll up um and right like traditional world like you maybe have to convince I don't know like coinbase or binance to ultimately list your token for people to actually be able to like move economic value to your roll up right oh to your own chain what like I'm just using roll up as a a specific instance of that and so now with hyperlane you can basically deploy interoperability to your chain and connect it to any other chain that is connected to hyperlane and so that's what we're going to be doing so right so on our docs here in our guide we have this kind of like uh five-step process of um deploying hyperlane so the first steps is just generating keys so I guess that doesn't even count as a step the second point is to basically deploy contracts and so we have a hyperlendor plug repo which I've kind of cloned here already and basically all you have to do is you have to add your chain right so basically in chains.json oops actually this is the wrong one here and I see in Chains you just kind of add you know and like change the formation all of this really like the name the chain ID and then an RPC URL so in this case we're going to be deploying to a coinbase's new chain call um called base right and obviously if your coinbase you know I guess you have your own exchange but again if you have right like deploy your enroll up here today it's gonna be very hard to convince anybody to deploy anything on your chain um so he's going to do it ourselves so all you have to do is basically add your chain here um like York said you can have we have modular security and so like in this case what we'll be doing is we'll just deploy like a one out of one kind of like multi-sig ISM as we call it to basically validate uh messages going from your chain to all the other chains um but actually you get to reuse the security that we already have existing on existing like kind of default chains as we call them so for us we should just be deploying between let's say base and support you and so then all you have to do is uh I guess I can just copy and paste that here so basically you add your chain you can configure the security at the default security from your chain and all you have to do is like run the script right and um I'm not going to like deploy this because it's like a bunch of transactions going to take a little bit too long but at the end of this deployment you basically get kind of these addresses so in here you get basically all the artifacts of the addresses that got deployed on both base and sympolia and so that's kind of just the contracts and then the two remaining steps are basically to run the validator which basically validates state from your chain in this case base to all the other chains right so that's the first step so all you have to basically do is uh kind of run we have darker images or you can just build it from source as we did here and you basically say like hey like what's the origin chain name that um I want to validate on uh where do I want to write my signatures to so in this case I'm just writing it to a local folder and then basically the config file that you got from the contract deploy and so basically once you run that that uh that validator will now observe the contract on your own chain and basically anytime there's a new message it will kind of like a test to that new message The Next Step then is after running a validator is to run a relay and so basically relayer is a permissionless role that basically sends that uses the signatures from the validator to ultimately pass them on to the destination chain mailbox contract right and that mailbox contract basically then uses the security module that is specified to validate hey does this actually happen on the origin chain and then process the message and so basically we have relayers that run basically from like one chain to another so in this case you can see here I think this is from base to sepolia so we'll just run that right here and then equivalently we have another relayer that runs from sepolia to base and so that's basically all the kind of like off-che infrastructure that you would have to run and now we're connected uh we can kind of like easily uh there's a test script uh that can run right now that basically just sends two messages one from basis apolia and one some sepolio to base um and then we should see those being uh delivered in one second if all goes well what's happening at the Smart contract player but um just to provide some color there like when your contract wants to interact with the contract another thing you need to send describing describing that interaction and that message needs to be authenticated uh such that someone can actually know that it was your contract that dispatched this action rather than you know some malicious attacker and so we have uh a few different security models that you can select off the shelf to like perform that authentication one is this uh like multi-sig validator setup where basically there's validators on the source chain that are signing commitments to the messages that have been dispatched from that chain such that those signatures can be used on the destination chain as an attestation that hey this message was dispatched on this Source chain um eventually the idea is to have uh kind of like permissionless Economic Security model where anyone can be a validator if they're putting up enough stake and provide security to this type of authentication system but yeah what's Happening Here is the message is being committed to on let's say uh sapolia and then the validator that nam's running on his machine is signing uh commitment um and then the relayer that he's running on his machine is taking that signature and passing it to the destination chain contracts um which is like one of these warp route contracts that's basically verifying like we saw in the multi-sig ism config that he had up earlier it's verifying that we've reached a threshold of the specified validators that have like attested to uh the fact that this message was like committed to on the source chain um but yeah definitely for more details uh check out our docs on kind of all the different types of security configurations cool so basically now that we've kind of verified that we can send messages back and forth right like we've kind of connected this new chain it didn't have hyperlane before to all the other chains that have hyperlane and so now that you have kind of this base messaging layer on um kind of setup you can build applications on top of that right and like York said I think a very common application is effectively a token Bridge right so let's say again if you're a new chain like one of the first things you probably want is like you want a stable coin right and so why don't we just kind of like create a warp route of let's say like something like usdc that exists on sepolia to like your new chain which in this case is base and so we once again have a guide for that right so under warp routes here you again just go off hyperlane deploy and you just run a different script the script base is configured with this warbra config so let's say in this case I guess we call it warp tokens now right so that's basically say like on the base uh chain um which I guess it's like the collateral chain we basically say like hey we want to collateralize this token which in this case I think it's just a link token because there's a good faucet on it on sepolia and basically you want to say like hey we want to create synthetics synthetic versions of that token on let's say a data chain in this case our base token I see how that name it can be a little confusing in this particular instance right but basically we allow Now to create a warp route between sepolia and bass and so then all we have to do is uh what's it called uh deploy War routes right with basically our private key to kind of deploy the contracts and I think that's what happened uh above here so again I'm not going to run through it because the transactions take I think a couple minutes um and the cool thing is that like once you've kind of deployed this warp route right which is basically just a set of smart contracts on both chains we actually have a like out of the box UI that you can use to kind of let your users now leverage this work brow to kind of have these like synthetic tokens and so all you have to do is basically take the output of your warprout deployment and basically add that to uh this like template repo that we have that you can clone again all you have to do is add your chain information in here and you add the token information from the warbroad deployment and I can do like in this case I can just like kind of run it locally right here but also like super easily deploys reversal or any other like next.js Hoster and so basically then here on localhost um it will basically fetch kind of the warp route information and then after a little bit will show you right like the kind of the chain options for your warp route you can see the token that you can kind of Warp um you can say hey I want to send this much the recipient you can just say it to yourself and then basically send it to base and again this is all out of the box right I didn't have to change any code it will prompt me to approve my link token to the warpl contract on sepolia and once the approval happens and if the Wi-Fi is good enough uh ultimately it will if you guys saw the uh layer zero like gorley youth Market uh drama a couple weeks ago um this is like a tool where you can create those type of markets between any chains assets super easily so if you guys want to like in this hackathon go mess with someone else's test net uh you could maybe do that cool all right then we saw basically the second transaction right is to actually ultimately send the tokens over to uh to base and so that uh I guess just confirmed on sepulia so like previously again like valders will basically attest to that transfer on sepulia um create signatures and then the relayer that I'm running uh right here will um yeah basically observe that message and will ultimately process it on base and so I think what we can do actually is just to take the uh do you want to open it in the Explorer yes so we can basically take the this is the token address on base right so we can just go to base I think which is a base ether screen I forget what it is uh what was it I just had it uh I think they're called base scan all right um and then you can find put in the token address right so that's basically like you know you can already see here it's like shows up as a chain link even though I'm pretty sure chain link doesn't have it deployed the token on base and then under I think that tokens transfers you can see here like 25 seconds ago we just minted ourselves 0.001 changing token on base um and then I think in the UI yeah like you can kind of see the same thing and then like if we wanted to write like we can send it back from base back to sepulia again um and yeah you can imagine what the kind of outcome of that is um I'm totally out of time so if you have any more questions um feel free to Jump by our booth today uh we have three uh bounties one is for the best use of permissionless interoperability so basically right like you can deploy to many of the networks that are represented here today as well and kind of like no I would love to see kind of some cool use cases between let's say like yeah a new chain and like an existing chain uh second Bounty is for best use of the warp routes right so I can bring your token to some new chain and I can do something useful for that and then the third is like we said we have this kind of modular security approach where developers can choose different trade-offs and we would love for developers to kind of build some kind of like alternative models like an optimistic one or like maybe one based on succinct like kind of like a ZK like clients but like yeah because we believe that the story hasn't been kind of finished telling yet about what security models they're out there for crotch interoperability we would love for hackers to kind of like uh play around with that um I think that's it thank you foreign [Applause] yeah maybe we want to let people for a second hello hello everyone huge audience today it's really great really appreciate it uh hello everybody on the live stream and uh that's tuning in later on my name is Jeff Wentworth I'm co-founder of a company called Curve grid and this is a 30 minute dap so what we're going to do for the next 30 minutes is basically walk through building a sample dap and we're going to show you how it's possible to do that um faster and easier than it might be if you build everything from scratch um so basically what we're going to do today is is not only talk about building adapt but also some of the challenges that that you encounter building adap and then talk about some let's say bonuses that that you know might might help you more broadly in your adap building experience so first of all as I mentioned my name is Jeff co-founder of curve grid um we're actually based here in Tokyo Japan um we have been in business since 2017 for six years and mostly we we tend to be in the background a little bit so our our customers tend to be blockchain companies or developers that are building um different kind of dapps on evm blockchains and really for the first time at this youth Global hackathon uh we're looking to connect with more individual developers in a much broader audience so you can see us here in the red coveralls we're here to help we have 10 people at the at each Global Tokyo and um uh you know if you have any questions about building adapt in general not just our product but anything technical related design related or just about Tokyo and Japan we're here to help um so creating a Dap uh and and in fact whether this is a some sort of production dap or a hackathon like uh like this weekend there's a whole series of steps that you have to go through including planning the back end the front end the smart contract we're going to talk about all of that and then we're going to talk about some of the other ways that we're here to help you so first I want to talk a little bit about multivass multibass is multi blockchain as a service so um our whole theory is that this will this is and will be a multi-chain World um but blockchain is difficult to build on and so what we're really all about is helping you get to Market faster um more easily and ultimately doing it with with fewer developer resources yeah um I talked a little bit about curve grid the fact that we're based here in Tokyo Japan we have a number of different solutions as well that that can help you so in addition to multi-core multivass we also have a multibass proof bridge and spreadsheet uh the latter two are actually former eth Global hackathon projects that we turned into into products and we also have nft bot which is Shopify minting app for minting nfts on uh on Shopify so what is adapt we're going to go back to First principles or Basics and again whether you're building uh the next uh um uh you know decks or or nft Marketplace uh or or you're just hacking on something for the weekend this is what a typical dap looks like right front and back end connecting to a node provider smart contract um on the blockchain in the mix there as well you have a wallet whether that's uh non-custodial or custodial wallet you've got a database where multibass sits in this stack and makes things easier is typically between your dap front end and back end and your smart contracts and the idea is that you're actually having to build Less on the front end or back end and uh less of kind of the the core infrastructure we take care of a lot of that for you and so that's that's what multivass provides so we put together a sampled app that you can use as a as a base for your work this weekend or you know even even going forward and our dap is a nft Sprite maker you're going to see it in a moment um you know again if if you're thinking about putting together an application uh the first thing you want to do of course is ideate get your team together and then plan build and submit so throughout the next several Pages we have a QR code at the top and you can you can find this sampled app repo there we also on our on our website curvegrid.com have a uh blog post that we've put up with a complete walkthrough of this tutorial as well as other resources to help you help you get started uh in in building adapt so the planning phase is typically user stories design user flow you decide on your stack front-end and back end and smart contract um uh uh you know and then uh for the nft Sprite maker um this is all about one of the key things that we want to do here was allow people to free mint and you'll see what I mean with that in a moment um on on the front end this could either be used by end users or admins we can talk about that a little bit more and for the smart contract we started with the open Zeppelin wizard nft smart contract uh and and built it from there so here's our sample dap I'm actually going to go switch to it here you can see it's just running on localhost so it's called Sprite right and basically what it allows you to do is draw some sort of you know fun picture here and then connect your wallet we're going to do connect wallets come on internet there we go enter my password there we go connect my wallet okay I pulled up the wallet address and what we've done here is we're actually allowing uh we're we're actually with a custodial wallet paying the gas fees for the user to Mint so when I click mint here it's going to send the transaction to the blockchain and it'll show up a minute later once it's mined and there we can go we can see the Sprite and the token ID and the owner and and the time that it was last transferred at we could see some of our past Sprites if you want to try this out you can click on any of this past Sprites to load it back into the canvas and then you know continue drawing so this is Sprite right our sample and if our sample dap for for basically writing Sprites that we're going to be uh you know demonstrating a few different things here so what are some of the challenges you have when when um building adapt well the first is interacting with a smart contract right how do you how do you interact with the smart contract the second uh is around in this in this example uh uh is minting the nfts and again the whole point of the sample dap is we want to Mint the nfts um uh for free for the user right so that they don't have to to spend gas to do it and then the third challenge is listing them into nfts and the fourth one is managing the smart contract so here's the structure of our sample dap and I want to um you don't want to point out that on the left you can see we have our uh you know a screenshot of the DAP uh as I had shown in the the kind of typical dap structure before we have a front end and a back end the front end is written in HTML CSS and typescript the back ends written in go the front end is actually using uh two different techniques to get data from the blockchain so first of all the color palette is actually being pulled from the smart contract itself the second is that we're using something called an event query to actually pull the the table here the list of uh of uh of uh uh Sprites of past Sprites and those are all going through multibass to the blockchain and then on the back end the front end is also of course talking to the back end we have our multibass go SDK that's talking to our HSM transaction manager txm to actually mint for free the um the Sprites so you know what does like what does multibass do for you basically how would you set it up in a typical environment well you would typically have both a development and a production environment and the key differentiators here the key differences here are in your development environment you would have developers with administrative rights maybe your whole team of say 50 or 60 people that might be making frequent updates to the environment and then in your production environment you're going to have your operations team with very limited access and updates for example controlled via CI CD so keep this in mind as we continue to go to go through so how do you get set up on this on the sampled app um first again you you clone the repo you sign up for multibass you set up your project and then you understand multibask middleware so signing up for multibass is super easy what you do is you go to our website and you click on get started and that will take you through a sign up process there's no credit card or anything needed just your email address and and name and and you're away um and as I mentioned we have a whole blog post an eth Global Tokyo developer package if you go to resources and blog that basically walks you through all the steps that you need to get to get started in addition for that we have extensive documentation uh including articles and an interactive uh rest API reference as well so you'll be well well supported Okay so I've got my smart contract written I've got this cool like Sprite smart contract written and uh and now I want to interact with it uh how do I do that well um you know there's different tools that one can one can use but in multibass we've basically built that all into one um all into one package so what I'm going to do here is I'm going to show you the multibass web UI and this would typically be used by developers during the development stage and then the operations team during the ongoing production stage to essentially um uh manage and interact with multibass itself so when you when you log in you're going to come to the core contracts page what you can see here is an interactive uh web UI that allows you to um uh to do a few different things first of all you get all of the static State variables at the top you can see the output here here's the color codes that I mentioned before that are coming from the smart contract we have the total Supply we have the symbol the name then we have all of our events from the smart contract and then we have all of our methods or smart contract functions basically what we can do here is is use this in a way to interact with the interact with the smart contract so for example in this function here get Sprite image URI if I come in here and I type in xero get method I'm actually going to get the data back from the smart contract one of the Nifty Things we've done here is we've embedded all of the image data directly into the smart our contract itself so the smart contract is actually rendering the SVG file directly so if I paste this data URI in here I get my beautiful Green Field with with the sun shining um but you could see I think how how sort of easy it is to really interact with your smart smart contract this way uh using the multibask UI the second way is via the rest API and again in addition to our documentation we also have integrated rest API functionality built right into the multibass UI here so you can see how how easy it is to really interact with um uh with the smart contract this way in addition we've got multiple sdks right now for in in beta for go and for typescript and again those are are linked from the tutorial page so you don't need to build you know you don't need to build everything uh from Custom with the uh with the rest API the other thing that the final uh feature that I want to point out is that when you are interacting via the rest API we have full role-based access control with both users permissions course domains and a full audit log and that allows you to build either a front end or a back end directly on top of multibass so okay great um I'm interacting with the smart contract via the the web UI or via um the SDK or the rest API now I actually want to uh to build a little bit more Automation in there uh and what I actually want to do what we've what you saw earlier was we're actually paying the gas fees on behalf of the users that are are minting the nft and we do this using something called HSM which uh is basically a custodial wallet or you know quasi-hard Hardware security module that allows you to programmatically sign transactions and sign messages on the blockchain and submit them to the blockchain at the moment we primarily support Azure key Vault uh it's a cheap and cheerful um uh basically a third-party custodial service provided by Microsoft Azure wallet service and in that tutorial we have very easy steps to basically sign up for an Azure account and then we have a Powershell script that uh in one shot allows you to to set up a key vault you then load it into multibass fund the HSM and you can interact with it via the um uh the rest API or or even the web UI very easily so I come back into multibus here I go to HSM and configuration what I can see here is my HSM configuration right this would have been this is coming from again uh would have been loaded in from Azure key Vault when I set that up and then I also have my transaction manager so I come into my HSM txm I can see all of my past transactions this was the one that I most recently minted and if I click into here I can see all of the transaction details including all the decoded function parameters and event parameters that were emitted from here so this is a very easy way that you know either if you're working on something that is not publicly released yet and you and and so you know you don't want to confirm all of the data on etherscan or if you're iterating rapidly um you know you can very very easily use the um the web UI again to manage manage this so that's the HSM next how do I list the the uh the minted nfts so there's a few different strategies for this in general the first is you can iterate using smart contract functions through all of the um uh you know all the nfts one of the challenges there especially if I'm using something like the ERC 721 enumerable smart contract is it's very gas heavy the second way is uh events right and really this is the correct way you know in general to be um uh interacting with um a smart contracts uh uh from adapt off blockchain uh off of the blockchain the idea here is that essentially um the smart contract is going to be emitting event logs and you're reading those and then um uh using that that data to essentially drive your front end or your back end the challenge with that of course is that the smart the blockchain is eventually consistent and it's very very complicated to typically deal with this from scratch so you know often what you'd be using is a piece of technology called a chain indexer we actually have a chain indexer built into multibass so if I come back to the the multibass UI here I can go back to my contracts I can take a look at Sprite right here and I can see all of my events and in fact if I just copy and paste this Sprite right there we go I can see come on there we go I can basically get a a really uh a decoded Json view of all of my event details including again the transaction that initiated it the parameters that were were in the transaction the the decoded um uh uh event parameters time that it was triggered at and this isn't coming from uh it is coming from the blockchain but it's via our intelligent cache which handles things like chain reorgs nodes restarting um uh you know everything everything like that we have one additional feature built on top of that which is called event queries and essentially this is a way to aggregate this time series data and um uh uh report on it very very easily so again even though the DAP itself Sprite right is being driven programmatically this whole table uh is is being driven by an event query we can also go and take a look at that in the multibass UI if you come in here you can see very very it's very very easy to basically Define your event queries um you know either through this interactive Builder or just via Json that is events next we have managing the smart contract I'm not going to demonstrate this in real time but essentially we also have a built-in gnosis multi-sig functionality that's that's built into multibass so what that allows you to do is essentially you can set up a multi-sig wallet either linked to an existing one deploy it to the blockchain and then if you set for example that multi-sig wallet to be the owner of your dap when you come into multibass either again programmatically or through our web UI and you say do safe mint if you select as your signer here that multi-sig wallet multibus will automatically wrap your transaction in a multi-sig transaction and either allow you to sign it via metamask or via your HSM and submit it to the blockchain so we've basically taken all of the complexity out of you know away from dealing with uh with multi-sig wallets and multi-sig transactions bonus time this is the first bonus so our spreadsheet plug-in as I mentioned this was a hack money 2020 finalist project that we then over the subsequent months turned into a full full-fledged solution so what's the lowest common denominator for enter for for building any kind of application I would argue that it's a spreadsheet like there's something like 9 000 smart contract developers in the world something like a 9 million uh um developers in general 25 million actually sorry nine nine thousand smart contract developers 25 million developers but there's a billion spreadsheet users so what we actually have is we have a publicly available it's available on the um uh on the uh Google Docs or Google workspace store we have the multibass for Google Sheets uh plug-in and this allows you to essentially when you set your multibass and when you install it and set your multibass deployment ID and API key you can come in here and then real time you can actually query uh multibass and essentially the blockchain in turn so if you do Sprites query Sprites uh basically this is going to go out and call my event query and pull all of my blockchain data in real time into here and you can say token ID 0 through 7 if I come back to Sprite right and let's say I load in my my smiley face here and uh put a little uh pink hat on top and then go mint again it's driving my HSM to Mint that to the blockchain I come back to uh here and it's a spreadsheet so I actually have to to do something a little funky and delete this there we go put it back in because it's Google Sheets but what you should see in a second is I've got my token ID 8 that was just minted so this is another option and it's it's great for both debugging as well as let's say um you know your if you're a company your Finance team or you want to do any kind of reporting very quick reporting on your smart contracts we can do things like we can call any arbitrary uh on-chain function and of course you can use your uh uh you can use aliases as well which is another you know I think key uh key thing that helps you go a lot faster with multibass so we're going to do let's say uh balance of this address here and it's a spreadsheet so I can just use all of my uh standard spreadsheet semantics and you can see that this owner this this address here has not a balance of nine on my ERC 721 smart contract that's bonus number one bonus number two is nft pot so um multibass is our main product but also uh last year we released an um Shopify nft minting app that allows you to easily create mint and sell nfts on Shopify either through lazy minting uh or also through importing existing nfts and it's super easy to integrate into your Shopify store shopify's logged me out but uh so I'm not going to show that to you right now but basically just add this into your store and um yeah you can you can immediately be building a building store that that allows you to sell uh sell nfts so that's another option for this weekend actually if you if you are less into code and more into e-commerce we're happy to have you uh happy to have you build on uh nft pod as well super bonuses we've actually prepared a smart uh a public GitHub repository it's going to go live a little bit later tonight but if you're interested in it come come talk to uh come talk to our team with all of the uh or not I shouldn't say all many of the other sponsor smart contracts pre-loaded with an easy script to essentially uh get you up and running in multibass um regardless we what you'll see in this in the sample tutorial repo is we've got a um uh we have a hard hat and truffle plus a hard Hut and truffle plugins for very easily loading your smart contracts into uh into basically multibass at the same time that you deploy them on the blockchain so I'm actually going to show you that now in real time so I have all of my minted Sprites here and I can see on multibass I also have for example a total supply of nine and here's all the Sprites that I minted I'm going to flip over to my terminal and I'm going to go yarn whoops yarn deploy Sprite right testing so standard you know yarn or npm script with hard hat and with the multibass plug-in it's basically going to go and redeploy the smart contract and relink it to multivass and when I come back in here you see that all of my old Sprites are gone because it's new contract version and I'm just left with uh um uh uh you know my um what I had pre-set up okay great so in closing um we would love for you to use multibass we'd love for you to try it out this weekend uh we've been working with different companies for many years helping them get their daps to Market much much faster um but even if you don't use multibus we're based here in Tokyo we've got a big team we're a little bit visible with our red coveralls on so it should be pretty easy to find us we're happy to chat about multibass we're happy to chat about dap development in general we've got Engineers designers marketing business folks as well so we're happy to help with any technical questions or any questions about Japan and and Tokyo and um I should mention our prizes so uh we're our total prizes are two thousand dollars we have a thousand dollars for first place second uh place is 700 and third place is 300 and for anyone that that just uh um that incorporates multibass in some way into your um uh into your project this weekend uh we're going to issue an nft that may be redeemed for physical uh merch later on again through Shopify so uh we would love love for you to participate and join us so again QR code for the repos there our blog post has uh more details on on the tutorial and um thank you [Applause] yeah so as we're using the API do we actually have to like necessarily plug the wallet to some Azure key Vault and then like I have that specific Plugin or can we just like fund any normal Walnut and then hey at our riskal pair and perils though you can fund any normal wallet you absolutely don't have to use uh um you absolutely don't have to use Azure key Vault that's only if you want to use the HSM functionality so it works really well with uh uh metamask or any other web3 wallet as well so for example if I come over here and I go to the multi-token smart contract and I click deploy and um I let's say I you know just plug some values in here and I hit deploy I'll get a metamask pop-up asking me to deploy the smart contract and I'll confirm that and there we go smart contracts deployed and I can see the deployment transaction here and I can start interacting with it right away so yeah absolutely not a requirement to use that thank you so much all right any other questions I think we do have a couple minutes left actually so yes please so do you have uh event web hook s are coming web hooks are actually absolutely coming um something that might help you out there in the SDK is it allows you to um uh to basically do polling uh for now um and again with our event queries where you know you're not waiting on the uh uh the blockchain node you're not you're not spending any uh let's say credits with node blockchain node providers yeah it's it's it's super easy often requested features coming soon any other questions okay well thank you very much Happy hacking [Applause] thank you I just want to check if the internet is working first let's go yeah hopefully it is okay which should I start [Music] hello hello everybody so am I Audible audible all right so we're gonna talk the list and do the most number of code developments we can so if you have a laptop just open it because uh it's gonna be a lot of fun hopefully by the end of this particular Workshop you should be able to deploy a sub graph and understand what the graph does which is basically indexing blockchain data so what is basically indexing indexing means getting information which is already existing in the in in the database in a more skewed format so that you can get it for your own like you know needs for example there is so much data that exists in the world right but you just need data that is required for your particular application for example when you see an ethereum block you should be able to see there is so much data that exist in one particular ethereum block there is make a DOT transaction in one particular ethereum block there is uni swap transaction in what one particular ethereum block there is uh are we transaction and let's say you are a uni swap developer and you just need information about uniswap how do you get that that's what is indexing so basically indexing information is that all the blockchain has all the data but you just need information for your own needs and for that you need to create a middleware such as sub graphs so that the smart contract which has all the data can get the information that is required to your UI using a middleware and that middleware is called a subgraph so in tldr a subgraph is basically a middleware which gets the information that exists on the blockchain for your own needs and that's about it so basically this ethereum blockchain is converted to such simple databases which can be queried via graphql apis that's what is the graph in in one word we can also say the graph is actually Google of web3 in Google we have web to data there is so much web to data that exists but Google if we just search it Tokyo Tokyo it will only give me things that are related to eat Tokyo and the reason behind that is there is so much web data but we just need information for our own needs and that's where Google indexes all the web web to data to give you what you need in the graph as well there is so much web3 data the blockchain data is basically open source you can do whatever you want with it you can actually get in whatever information you need but there is so much data you just need information let's say of all the arbitrary Arbitrage position that is between pancake Swap and uni swap for that you just need to have your concentrated information on for that you will be creating your own sub graphs so uh there are two ways to do it the first way is you create your own indexer burn the whole dap and that's how you create it that's normally the web three-way but not the correct way all right there are better ways to actually get the information to your UI and that is by using this middleware known as a graph by creating a sub graph so that you can get that information for your own needs so that's about it I'll stop talking and let's go together all right I'll start from the very Basics we'll first of all deploy a smart contract and then we will create a sub graph out of that smart contract then I will do a transaction on that particular smart contract so that at the end you can see that that subgraph has indexed that particular smart contract and you can get the information you need for your smart contract all right let's do it let's go to remix.com if you have a laptop right now just open it up and at the end if you're able to create a subgraph with me we have some exciting Rewards which are different from bounties so first of all I just create a subgraph let's say an ERC 721 which is mintable okay we create this remix subgraph this smart contract all right we have this smart contract everybody has seen this ERC 721 nft basic mintable smart contract I have not created it I've just gone to remix and just you know taken the uh the code template so the smart contract is with us now what we do is just deploy it let me check the time knot on ethereum minute otherwise the workshop is very expensive for me okay I'm on Gurley uh and I deploy this smart contract inject web3 deploy the smart contract send transaction oh uh can somebody send me some girly eat send transaction come on network is busy oh my God okay let's do it on sipolia which is the new test net it's a live demo Anything Can Happen by the way I wanted to make announcement right after the end that sepulia is now on the graph but now you know I'll be deploying a smart contract on sefolia and then doing a subgraph on that so the big news is that the graph is now integrated with sepolia chain and you can deploy your smart contracts in sepolia and we are going to do it right now so let's just do it this is sepolia testnet hopefully this works if this does not then I am texting ethereum Foundation that we need to talk so okay so the smart contract is being deployed by then what we do is we on the go on the graph Studio we go on the graph Studio and uh basically just log in with our metamask once we have done that I'll create a new subgraph and I'll name it Iris who's sitting right there my colleague from the graph and use cipolia testnet create a subgraph so Iris sub graph which is the iris nft is uh is is having this kind of a UI which is a studious UI right and if you are new to the graph the first thing you have to do is have the libraries installed globally so npm install.g graph protocol slash graph CLI this is this particular thing that you have to deploy once you have that you will be on Terminal and if you do just graph you should be able to see all this if you have this that means you have all the global libraries that are required okay I hope the transaction is done and we have ours smart contract and we need to actually like verify this particular smart contract okay so I flattened the file first of all this is the Smart contract I flatten the file a little bit not little bit totally flatten the file and verify see single file 0.18 I hope I'm not very speeding up if you are coding with me just to be able to code along and then I just deploy I'm not a robot verify okay so nice smart contract is verified now I can just go here and be able to check I'm also gonna tell you specifically why I verified my particular smart contract so basically with the graph we created tools so that you don't have to like write a subgraph from scratch most of the things most of the events are already catered upon and you just have to make changes so that your UI needs are fulfilled all right so we have just a small tldr we had uh we had a nft called as Iris that we deployed right and then we deployed it on the sepolia network and we actually verified that particular smart contract and it's verified now and we also logged into the subgraph studio so that now we can do the next things right we go on the terminal now and I create a mkdir known as Iris nft you're getting very famous today Iris yeah I need some money after this okay Iris nft so we are inside now I'll do graph init dash dash index events so that all the events that exist in a ERC 721 721 open zaplin Smart contract which is events all the events that exist which is transfer approve and approve for all all these events are actually indexed by the by the sub graph so basically sub graphs index events and in all the smart contracts we have events so that we can show that to the front end but there is no way to actually show that so you create a subgraph so that the events can be indexed right so in a ERC 721 we have three events transfer approve approved for all and all these events will be indexed by the subgraph by just this magical command Dash Dash from index Dash from contract and then I paste the contract address which is this one that should be okay wait graph in it um foreign this is it this should be able to so this is a evm chain sepolia is a evm chain by the way the graph is also on Cosmos near uh and other places but we'll this is sipoli as a evm chain so we'll just deploy it there this is sub graph studio and the slug name is Iris again this is sepolia so we'll choose sipolia and this is the Smart contract so you see fetching ABI so basically I've verified my particular smart contract so that the graph command could fetch all the events from the ABI because I verified it right it could not fetch the start block so I'll just take the Smart Start block from here this is the start block contract name is contract and this should be able to just generate a subgraph for us so an ERC 721 has three events right and those three events will have one sub graph so that we can index all the activities happening on the iris nft how many of you have been able to reach till here okay nobody wow I like it no problem you have a lot of time we can always talk after this Workshop as well but this can be a great introduction to this amazing piece of infrastructure which is going to be the Google of web3 we go inside yes okay so you see the sub graph is already created and I'll go in a little depth to explain you what are the parts of a subgraph right there is first of all a yaml file which actually defines what's inside uh the graph what is inside the sub graph what that means is that a subgraph has three things the first is you need to define the network where you are deploying it right which is sepolia if it is on Godly this would be Godly if it was on a polygon it would be Matic if it was on no system it would be no sustain so on and so forth so first of all you need to define the network the second thing is you need to define the address you are actually the smart contract address that you're actually indexing then the start block and then there is this mapping file right which will always come up in that there are these entities this is the most interesting part of the sub graph what are these entities are the schemas basically you see here they're already created by the subgraph by that graph init index event file so basically when you have a smart contract it has events approve approved for all transfer I showed you that and according to that it created schemas for us so that we can you know basically query these so when when I actually go on this this particular smart contract and hit transfer that means I have done an event right and that needs to be indexed so that I uh so that you know at the end the dashboard of your UI can show that this Iris nft id1 was transferred from my address to some other address in your nft good place for example right so basically you create these schemas so that you can tell that okay An approved function was done a transfer function was done that will be required for your UI so the first thing is you always Define the schema right here are the schemas with all the things that you want and the second thing is the events right you are actually indexing events and then converting them to schemas so basically what happens in ethereum is that you get events right and those events give you data that data needs to be put in such a way that it can be queried so basically these events have raw data and the mapping file converts those raw datas to schemas right and that's about a subgraph you define a sub graph in yml file then you have these mapping files so that these events which have the raw data can convert the data into schemas which are such good looking so in the mapping.ts file you actually Define in typescript that how do you want to convert the the data from the event which is raw data to these schemas that's it so mapping.ts file is the major file where you Define logic that's it so this is all about it we have everything that's required and now we will ah the schema is defined by like it's by default but if you want let's say just a uni swap position so I'll just delete everything and just have an LP position with ID transaction from transaction 2 and stuff like that so whatever you want to query you just Define in schema and according to that you set the mapping.ts file which is the logic for the event so that the schema can be created that's it great question by the way so this is about it now we will deploy this subgraph and see the magic of how do you index information in such good formats we do the graph auth this is my key don't use it guys if you do then you are really bad people so the I do the auth then I do code gen and graph build okay everything works and at the end I just deploy this sub graph in the studio 0.0.1 so you see it took 20 minutes for a person to have a smart contract have information via graphql apis so the subgraph is deployed and I can just go on the playground which I cannot see right now okay it's deployed and just refresh Maybe yeah you can see that the sub graph is deployed I can go on the playground and check it's empty right this is cool I can just go to transfers and I can still see uh let's say from idn2 and it's still empty wow so much work and nothing done why because we have not done any transactions guys come on you're not paying attention let's do a transaction and then I'll show you that the that that indexing happens in a second if you don't use a sub graph you'll have to create a whole indexer have an event being you know tracked every time and pay 100K to AWS by the way AWS office just around that corner so don't tell them ah so this is it I'll just I'll do I'll just save mint and rsnft for myself is that okay Iris okay uh so I just go here and two and do one and just do a safe mint so I've transferred one nft into my particular account and now uh the transaction once it is successful you can you'll be able to see that the sub graph is able to catch that event get all the information from to ID and whatever you need and be able to serve you is the transaction successful not yet we need a layer two test Nets too I guess who's building one okay the transaction is successful and it took 31 seconds and now you just go here boom you see the information right so as soon as the transaction is successful you see the indexing happening and now you have this amazing graphql API over here and you want to query anything around you know let's say Iris nft or let's say you have board API club nft right and you want to know that who is the top most holder right you want to know who owns this particular ID nft and at what point in time he bought it at what point in time scram he bought it you can get everything just by indexing that particular smart contract so this is the power of creating a subgraph at the end you need a subgraph as a middleware between your smart contract and your UI so that you can put in all the information from the smart contract to your UI so that's the missing piece in creating a full stack decentralized application this is about it guys this is about it why do you need the graph because there are 15 million blocks in ethereum and if you want to create your own indexer you'll have to scan every particular block and get the information who uses the graph everybody who has good brains and good devs so that means uni swap has a info.uniswap page right you all might have seen that all of you are who are billionaires because of crypto has seen it so who has seen it okay just uh Marcus Maybe so yeah so you see this particular info.uniswap page right and all the information here is just smart contracts interacting so you are a user you go to UNI swap you interact you USD to usdc swap and that swap is a smart contract event that's tracked by us uni swap sub graph and you get the information here see this is a uni swap sub graph I'll just expand it a little bit if I can but yeah this is a api.thegrab.uniswap so basically uni swap has created a subgraph so that they can get in all the information from their uni swap smart contract into this UI page so basically as I was telling you the tldr is if you have a smart contract and you want to create a application which is used by humans not junkie developers you need to create a UI and for that there is a middleware known as sub graphs so that you can use it right so this is about it we also have sub streams coming by next month right but you can still use it basically uh indexing events for really fast scenes like polygon and ZK sync right now coming it's like a one second block and you need to index everything and if you have let's say 10 000 transactions in every block then it's it becomes a little tough to scale it and with the current subgraph infrastructure that's why we have substreams with subgraphs you can only index events with sub streams you can also index every granular data for example you can index addresses so basically you can give your Degen score to a particular address by all the interactions it has done on the blockchain all the transfers it has done on blockchain everything there is something known as on chain reputation which is becoming very big right now and you need to compute and addresses on-chin reputation based on what it has done and for that you can use substreams it is already coming along it is a different stack but I just wanted to introduce use this because we have bounties right good good bounties this 1800 bucks can get you some good meals in Shibuya crossing right I went there yesterday good good place so if you create a new subgraph you can get 1800 bucks 1400 bucks or thousand bucks based on your ah capacity and how you developed it or what you can do is be a little more intelligent like me yeah so and create use the existing subgraph for dashboards for example I'll give you an introduction to that as well for example there is so I have a repo in which I have Crea you know named all the top sub graphs right this is the repo erc721 lens protocol sub graph so if you are using lens and you want to just you know use something for your dashboard for a simple hack let's say you want to find out which lens address is the biggest camera or something like that you can just use the lens protocol sub graph and use it for uh you know creating good dashboards one good example would be in eth India somebody created a Arbitrage bot for all the uni swap sub graphs so basically what he did is uni swap is deployed on three chains and let's say usdc eth prize on polygon is more than it's it is on ethereum so we just queries the sub graph and it shows it on the dashboard that there's the Arbitrage opportunity there is arbitrage opportunity right these kind of innovating things you can do just by using a subgraph already created by unisarp team or misari team and do your own thing so this is about it this is how you create a subgraph and index information for your UI that's about it and this is about me if you have any questions I'll be here for three days if I'm not you know going out and drinking Saka so you can find me here and by the way this was the last thing that I introduced the first a news that the graph now indexes sipolia test net because graph test net costs girly test net costs a lot of money this is about it thank you anybody has a sub graph already yay awesome so I'm a good presenter right I'm just kidding I'm just kidding I'm just kidding yes sorry I'm having a honey to drink Saka Maybe tell you something yeah sorry I don't know what they built on the graph stuff okay yeah okay they said their strength is the information across the project but not only one project but over the project so basically thank you foreign cool uh Hey folks I'm Warren I work at notice uh with uh Dow I guess that uh that is the steward of gnosis chain uh The Talk today is you know talking kind of briefly just about um building on gnosis chain uh what notice chain is but then the bulk of it is going to be uh about Hashi which is a new uh you know Bridge Oracle aggregator um so we'll kind of talk about what that is and why it exists uh for the bulk of the top today but just quickly uh kind of talking about notice chain kind of why it exists um nurses chain is a as a kind of community run chain uh formerly known as xdi we kind of aim to have this environment that very closely mirrors the uh mainnet ethereum environment in terms of both the beacon chain and the uh execution layer um big differences uh essentially the the price for participation so running a validator on gnosis chain uh requires a one gno deposit which is a few hundred dollars as opposed to the 32 eth uh tens of thousands of dollars deposit to run a validator on mainnet ethereum so really it's intended to kind of open up at home staking to a much much larger audience of users uh on a kind of really low end Hardware with very low stakes and and as a result we've we've had a really incredible response from the community more than a hundred thousand validators up and running um it's it's tooling compatible with with everything that you already use to write uh smart contracts for uh ethereum mainnet and the price of transactions is super super low uh the the native token on the network is die or kind of dive bridged over to notice chain so xdi and yeah 100K gas is is a fraction of a cent um this is uh really really great for kind of testing things in production but also for kind of high uh High throughput applications where you want to have yeah your users to be able to kind of participate in in in some interesting thing on chain that that isn't necessarily uh uh I don't know financially dependent or isn't isn't uh financially worthwhile necessarily to to run on uh on mainnet so we've seen a lot of really interesting uh things like games deployed on chain games deploy two nurses chain because they can kind of Leverage uh on-chain mechanics without costing uh users ridiculous amounts of uh of money just to kind of participate um so we uh just a couple of links here for for uh kind of playing with nurses chain you can find the docks at uh docs.niciouschain.com uh faucets for both mainnet and for their chiado testnet at nosys foster.com and then the RPC endpoints for interacting with mainnet with notice change mainnet and for uh notice chains chiado testnet um yeah so I guess what what I'd like to do is just encourage folks if you're if you're building something uh here at the hackathon then explore notice change is an option uh for a kind of deployment Target if if you are doing something particularly if you're doing something that would benefit from really low-cost transactions uh and a really stable execution environment we have a whole bunch of prizes for applications built on and deployed to nurses chain and we'll talk about them at the end I'm going to switch gears now switch topics and jump into uh Hashi which is this hash Oracle aggregator um so how she's a protocol for cross chain communication based on this kind of additive security so multiple inputs multiple oracles at its core it's a hash Oracle aggregator and what I mean by that is it allows you to have this kind of Rio which is the acronym that I'm trying on I don't know if it'll if it'll stick but it's akin to a raid if you've ever set up a kind of big storage devices of redundant array of hash oracles the idea here is to um to distribute trust for Bridges kind of on the mechanism level not put all of your systems trust into one Bridge article and the reason for that um is that Bridges have been responsible for this outrageous amount of loss over the last couple of years more than two billion dollars in 2022 was lost because of bridge exploits uh the top four of uh five items on the react.news leaderboard Bridge related hacks um and I think what this really set up to illustrate is that no Bridge implementation no Bridge mechanism is is kind of a hundred percent secure there are always there's always a tax surface and there's always potential for bridge mechanisms to fall over to to kind of break and to uh in doing so break any systems that are dependent on them and so how she is uh the system that essentially allows you to not have to trust one Bridge mechanism but rather to distribute trust over a number of different Bridges and require that they agree or require the threshold of them agree in order to kind of propagate any state change so the design principles here uh we wanted to kind of have standardization at that the kind of lowest possible level the hash for any kind of data or estate change that you're wanting to propagate make it really modular and agnostic to the underlying mechanisms um and then yeah this idea of this rijo redundant array of independent hash oracles analogous to arrayed it prioritizes security over latency so it moves kind of as fast as whatever your slowest Oracle is in uh in your kind of threshold of oracles and then uh prioritize this kind of robustness and security of a execution costs so it's it's slower and more expensive uh than a every other Bridge mechanism because it requires redundancy but in doing so you gain a much better security model or much better security assumptions essentially what you're relying on is that an exploiter cannot uh break multiple mechanisms in parallel and convince them all to create the same kind of false output so even if you are able to break multiple in parallel it's going to be really really difficult kind of near impossible to have them report the same false outcome is uh is the kind of assumption here with something like Hashi um the goals uh diversification on the cross chain protocol implementations so we want Integrations with kind of multiple different uh header oracles uh what I mean by this is is kind of like client like uh Bridges where you're bringing the the heter Oracle right the header block header from one chain over to another chain so that you can then do things like storage proofs on them and then also Integrations with multiple message passage passing mechanisms and this is one reason that we're careful to call it a hash Oracle rather than something like a header Oracle because it's really agnostic to what type of information is being passed or what type of information is being aggregated we're just we're aggregating hashes and that can be a hash that is a block header it can be a hash of some message it could be a hash of some outcome out in the real world you can kind of use this in in any number of different ways you're just basically creating this mechanism for multiple different Oracles to agree or to require multiple different Oracles to agree on a given hash for a given ID in some given context um and what we want to do is allow users to choose what combinations and what thresholds of of these combinations uh their system requires uh in order to kind of build custom trust assumptions for their system um it's a bit of a messy architectural overview here I think I have a mouse goes so cool um so this is kind of drawing a kind of hypothetical example of a token Bridge so we have this uh token bridge over here on the left side where you would kind of deposit tokens in um a little bit out of date actually we'd have a message dispatcher uh contract here that the token Bridge would then call to dispatch a message and that would relay it out then to various different Bridge mechanisms all of these Bridge mechanisms are effectively black boxes they they do whatever they do to kind of move information from one network to the other and then over on the destination Network you have adapters to each of these Bridge mechanisms that are then going to kind of feed into Hashi or Hashi will actually query each of these Bridge mechanisms to have them report their canonical hash for a given idea in a given context and then there's a few extra layers here to to enforce specific thresholds and specific sets of adapters and then eventually a message executor plugging into the other side of the token bridge where a token would be minted for for kind of end users this is a bunch of redundancy and so we we probably see this being used more by uh there's a way to kind of create the canonical instance of your token and and then probably leveraging networks like connects network uh the kind of liquidity layers on top of this bridge for relatively lower value and really lower value transfers across chain and the Hashi setup as your way to kind of secure that canonical mint and Bone functions for your tokens on either side so I think it um yeah it it definitely benefits from these kind of faster execution layers uh added on top of it um so main main components here are main things that we're we've built in them that we're looking for for others to build uh very interested in in applications like token Bridges governance Bridges nft bridges kind of built on top of this uh very interested in hash oracles so like mechanisms for passing messages or passing block headers from one chain to another chain uh very interested in um in Oracle adapters so if for any existing oracles that are out there adapters for plugging Hashi into those and interested in things like uh message dispatching contracts message executing contracts and and any other novel uh um use cases that you can come up with um I guess we kind of covered that so we can skip over um and yeah just links here to a couple of resources uh the repos at github.com forward slash gnosis forward slash Hashi I can drop this into I can just drop the whole presentation into uh their their Discord server somewhere so you can track it down there um and if you want to find out more about uh notices chain in general then we've got a bunch of links here as well um if we've got time I think we do have a bit of time I can I can happily answer any questions now but we can also just go and poke through the uh the code and and get a bit of a better feel for how the whole thing works if you guys like and I can kind of let you drive it a little bit from there oh I should talk about prizes really quickly for gnosis chain um so there's there's a handful of prizes here um for just applications built on top of notice chain um the the top three applications built on and kind of deployed on noses chain uh we'll get prizes as well as best project built uh using Hashi or kind of utilizing Hashi in some way and best project uh utilizing uh safe in some way um but yeah let's can I play with some code I guess does anyone have any questions no yeah I I looked at succincts um telepathy uh ZK bridge and there um they uh can provide the state route like on ethereum and uh you can't access that from a smart contract on L1 right like you you only have the block hash but um is is it I don't know how um so so when Hashi is being used and aggregating aggregating these values is is the assumption that like if the ZK Bridge isn't working or someone passed a false proof that the block hash then therefore would would be different or like what what values in the block headers can you compare or is there a way that the amb can also pass the state route from L1 yeah that's a that's a great question so I think that's there's probably two two questions bundled in there is like what what are the other mechanisms that might uh pass that you might use for redundancy in this uh and then the other kind of question that feels like it's bundled in there is like how do you get from uh blockheader to actually proving some data and so the first the first question there um yes you can do uh use the A and B for uh passing blockheaders we built this really crude little uh header reporter contract here which um is essentially going to allow anyone to report a block header uh if it's within the the range that you can actually get the block headers which is like 256 blocks into the past um and it's going to push that over the bridge um via the amb is kind of uh required a pass message function so we can kind of coerce the A and B into sending block headers over the bridge for us and then once you have a header we also have the ability to thanks to Laurent about here the ability to um kind of recursively prove historic blockadas so if you want to kind of go back in time further you can prove the kind of previous block header because it's encoded into the the current block header and you can kind of do that as far back as you like it's pretty inefficient to go really far back in history but it works uh if you know if you want to go just a few hops back then it's a it's a probably easier route than kind of coercing the bridge to to kind of pass another header in terms of how you actually extract States from uh from a block header there's a handful of uh protocols for doing this Axiom is one that has built a system for doing ZK proofs on a block header to to be able to then validate that some states exists in the uh in the block that this block header was uh was uh produced from and so yeah I think the Assumption here with um with the header Oracle aggregation is that it's going to work in tandem with some way of of proving say something like uh uh Axiom um we can also Imagine a system here where you might have kind of multiple iterations through Hashi to ultimately kind of get uh to some states so you might have um Hashi pass say the the heter oracles via various different mechanism uh I'm sorry how should you passed the uh the block headers via various different mechanisms have those mechanisms agree on what the block headers are and then have another set of Oracle mechanisms that are going to be queried for the state at a given block height or with the the state that is approvable from a given uh block header and so uh that you take this kind of second iteration through for each of those oracles based on the um the header that was reported in the in the kind of previous iteration um and so yeah we're very interested in kind of any any additional mechanisms for doing those kind of state proofs or event proofs based on on blockheaders I think the the two systems that I'm aware of for doing this uh Axiom and I think there's another one called uh dandruff and yeah I'm sure there's many many more out there but those are the two that we've uh that have kind of been flagged uh already as ones that we probably want to have Integrations with could could you open up this uh okay if if you go back to um the header reporter yeah and the utils header storage yeah yeah um yeah why it's not uh let me click into it that way but let's go down to here so head of storage would be on the destination chain and this is just where we're going to uh pass in the headers that we've reported uh from uh from the origin chain right and so okay what what contract is on the origin chain uh On the Origin chain will be this uh header reporter here right right which uses the header storage you know calls store block header which only stores the block hash yes okay so only the block hash and then oh okay yeah I mean as long as I can use Axiom to make a state proof using a block hash is that um how am I mixing it up all right all right yeah yeah so we're using sorry you're you're totally right so on the on the origin chain yeah yeah we're calling head of storage uh stone block era which is let's listen up separately uh which is yeah can I store that the block header on the uh On the Origin chain and then allow uh because it's in storage allow mechanisms like this uh header reporter to query it from uh uh storage and then relay it over there okay yeah I'll look look more more into Axiom but if if the block hash is enough because I I just looked at telepathy and they're just providing the state route uh yeah um yeah yeah yeah cool okay thanks yeah yeah uh so are you guys just um thinking about this as a uh more like an infrastructure tool that we can just check the headers rather than like a messaging uh like relayer I I think we see it as both uh so it's it should be able to aggregate really anything that can be represented as a hash uh if it kind of maps to this um this essentially mapping of un256 um 256 to uh batch 32 then it should be able to kind of aggregate it we have uh built adapters for execution layer head oracles execution layer like clients and uh and then also adapters for sending messages so we have uh down here this Yahoo contract is our message dispatcher so this is the the endpoint that you would use on the origin chain if you wanted to send kind of an arbitrary message across uh across chains and then on the other side the cro contract is our message executor that would be the thing that ultimately calls out to whatever your your system is or your contract is if you wanted to execute arbitrary calls and what chain is it deployed on right now uh it's not deployed in production anywhere it's it's very much still a moving Target very much still uh in development and so you guys are kind of getting your hands on it really early which is great hopefully uh folks here can help shape what it looks like cool I think uh if there's no more questions we can probably wrap it up here I think we've had a pretty decent little Dive In yeah all right thanks everyone [Applause] all right uh hey I'm gonna start okay awesome hey guys hi everybody uh my name is Fabio I'm one of the core devs at push protocol and today we're going to be talking about what push protocol is what problem it's solving how it's solving and by the end we're going to see different ways of how you can integrate push-up protocol into your mobile app into your dab into your smart contract or into your wallet so the first thing is everything starts with a notification right so for example whenever we receive a new email we always receive a notification alerting us that we have a new email or whenever someone makes a transfer money to our bank account we always receive a notification so notification has been proven over the years that it definitely increases user experience but also increases user engagement in your community the thing is before push there was no way for protocols to reach out to the users right so protocols they expect users to go back to the protocols themselves and fetch the information for example when will my ens domain expire well I have to check it it's not something that I know by heart and with with a solution like push protocol we can notify you for example one week before you lose your ens or we can notify you before you lose the money on Avi before your your collateral you lose your collateral or you can notify whenever a new streams or super fluid starts so the solution that the problem that we have currently in the the web3 ecosystem is first of all for dolls as of now dowels they have no way to reach out to users to alert them that that there is a new governance proposal right so for example myself I'm part of multiple dials how do I know there's a new governance proposal right I have to go to Discord I have to go to Twitter and be very active to see that there are new proposals for user experience it would be way better if I receive on my phone the notification alerting hey new proposal 0x ABC is has started do you want to vote then you click on notification then you can get redirected to snapshot or any other application to cast your vote fortify the same thing for user experience we better to receive a notification before you actually lose the money right I think we all agree on this and for nft marketplaces is way better ux when you receive a notification whenever someone places a bit on your nft I have an nft I want to sell it whenever someone places a bit I want to get alerted I don't want to give my email I don't want to give any other information and I don't want to go to the protocol myself to flattered information so the solution that push protocol is building it is first it is a open communication layer that means that anyone can simply go to the network and fetch the notifications in the chat messages it's all open um everything is encrypted the other chat methods are encrypted notifications they can be encrypted and not encrypted but the but the end is the communication the the layer is open anyone can simply fetch all the chats or notifications the notifications they are completely dynamic in two ways first of all how you're going to trigger the notification it is completely up to the developer do you want to trigger notification manually you can go do you want to trigger a notification using smart contracts please go ahead um do you have sub graphs and then you want to notify your users using subgraphs you can do you want to notify users on your server you can and lastly the the dynamic notifications there are also the notifications they're also dynamic in a sense that um the notification itself they can contain any arbitrary payloads it can contain governance proposal it can contain a YouTube video I can receive a notification with the YouTube video it can contain any random text you can contact pretty much anything there's no restriction of what the notification should should look like and the notifications there Emoji chain where in ethereum you're on polygon buying a smart chain with more chains um soon and also non-evm chains very soon it is gasless so for sending notifications you there is no fee involved nor for receiving the notifications and lastly for me that's the most important it is the platform agnostic delivery part the means is the user doesn't need to go to the push protocol interfaces to fetch the notifications or to fetch the chat messages push protocol is an infrastructure protocol we build this SDK sort of apis we have these nodes but anyone can import the SDK and have the exact same look and feel that we have in our website or a mobile app in their own wallets in their own app so in the end users don't need to know that pushpara call exists where just this infrastructure protocol doesn't send notifications tests and chat messages but how the users are gonna see the messages in a chat message any front-end can simply import the SDK and provide this experience to their community so pushu have sent over 30 million notifications so far we have 85 000 different users that have opt-in to receive the notifications and have had over 500 different use cases of notifications and we have notifications that go from D5 dials nft metaverse infrastructure social media and services and I think the difference so we see that we have a lot of use cases for notifications that what I'd like to point out is the notifications that are completely pick and choose so for example let's say that I'm a very active user on lens I just go to the lens I just opting to receive notifications from lens and I will only receive notifications from lens nothing else if at any given moment I want to stop receiving notifications from lens I just opt out I sign a message then unlock to receive notifications anymore for lens so the end user has 100 control of what the user wants to get notified and if the user can always opt out and there's no fees involved into subscribing to this so as I said we started push protocol started as a hackathon project in This Global like just a normal project and we have to be building for almost three years already and we started with notifications but now we have chat and the thing about chat is that chat has been built on top of this notification layer and why does it matter why is it important so first of all the experience that we have in web 2 messaging system we're bringing this into app3 that means that that whenever I receive a chat message on my phone on the protocol I will always receive a notification so for example whenever someone messages me on push protocol I receive a push notification on my phone saying John dot is has sent you a message then select I have this like very similar user experience that we have on telegram for example we also receive a lot of notifications on telegram so we're replicating this into push and of course in the future we're going to be able to fine tune the notifications so probably I just want to receive a notification for that user but not for that other user so then we can fine-tune this but the goal is the end user will always have the control of what they want to get notified and here the left we have on our website and here is the mobile app and the idea is the website and the mobile app has been built using our own sdks and the idea for this is just showcase that you can have the same UI in your own protocol of course we provide the UI but that is just that you can build exactly this in your own UI users don't need to go to push to fetch all the messages or the notifications so with chat wallet wallet chat I mean the applications are endless we're just an infrastructure protocol and how the how this system are going to be used it's completely up to the Developers here in the middle we see that we have group chat so a couple months back we announced group chat and token get a group chat what that means is now we have a web tree native way for people to communicate so for example I can create a group chat for my doll I can create a token gated group chat so that means is only people that are allowed to join this group is if they hold a certain amount of my governance token let's say and I can create a public group or a private group so imagine I have my doll I have my token and then I create a group where I say okay all the chat messages for this group it's public so anyone can see all the chat messages but only if you hold a certain amount of my governance token you can send messages so you can see like how nice this can be for dolls for online communities so we're building this framework for better and more transparent communication so we don't rely on their current chat systems that we have in web 2. and of course we have sdks for both notifications for both chats and also for groups as well we announced yesterday something very nice which calls push video so um is any form of communication that we have built on top of pushchat so the push chats be on top of notifications and if you're a stop of a push-up build on top of push chat so we're building this communication like Roblox that will be on top of each other and push video is literally wallet wallet FaceTime I have a wallet my friend has a wallet so we can call each other so here's me calling madur he's a guy that worked for us um so little yeah so we're gonna announce the the SDK for push video probably by next week enter idea now protocols or uh websites or mobile apps can now provide this service which is wallet wallet video calls as of now it's wallet wallets very very soon we're going to announce group video call so I cannot just like create a group I can call all my friends instead of calling their phone numbers I'm going to call their wallet addresses and then we can just FaceTime everybody here I have two videos so here on the left is um just showcase how to log into the mobile application but as I said you don't need the mobile app to to to interact with the protocol and here on the right the video is outdated we changed a lot the UI but here on the right we can see how we can start the video call it changed so much already I should have updated the video but see like we also receive notifications whenever someone calls you receive a push notification say for example.eth is calling you like on my phone and then I can click on the notification then I can start the video call in here on the left is how the notifications look like and also how the chat looks like on the phone see here in the end we saw all the notifications and then all the chat here cool I can go for some code demos how to integrate push before I go that um does anyone has any questions so far about push otherwise I just go into the code and then we can do the Q a in the end foreign staging app so what does the app looks like you as an user let's say I want to start receiving notifications from push so how does it work so we have our app here on mainnet let me just close everything cool so on push protocol we have a concept of channels and the channels is exactly like a YouTube channel so me as a user I can subscribe to channels to receive notifications right so for example there is this shapeshift governance Channel I can just come here opt-in all I have to do is end user just sign a message and then that's it whenever there is a new governance proposal for a shape shift I'll start receiving notification and the symbol for Lance snapshot maker dial wrecked so the user can completely go and pick and choose what notifications they want to get notified notifications they can come here on your inbox as we can see here they can come here on the browser extension as well see or on your phone let's send a notification on our test net because I have a Channel created here so the first step is if you want to send a notification the first thing that I have to do is you have to authenticate yourself into the protocol so you can send on notifications for this you have to take around 15 worth of push tokens into the protocol to prove that you actually uh a alleged person that won't notify their users but I have a channel here called it demo Channel so let's send a notification so the notification there are three types A broadcast notification targeted notification are subsets broadcast means notify everyone who has subscribed to my channel Target means notify one wallet and subset means notify an array of wallets in this example let's just notify everybody and on here on the right is I have just this wallet that I have opt-in to this channel here on the right so let's set a notification which means hey and my notification message I'll call it notification message then I can add an image to the notification and now can also add a call to action link which is whenever the user clicks on your notification they can get redirected anywhere but for now let's call this um send just this notification all I have to do just to sign this payload it is free no money involved and then I have received one notification here if I come here to my inbox notifications here if I come to the browser extension notifications here and if I open my phone my notifications here if there is any wallet that integrates push the notification will be everywhere so notifications dispatched to everybody we can send also the same notification here code all the code here is deployed already it's on GitHub in our push product or GitHub so for standard modifications we have this rest API SDK send notification all I need is the push protocol SDK and the ethers library because we need to sign messages so I just import the private key from the wallet that created the channel so I created a Channel with this wallet here so there are two things I can get my the private key for this wallet or we can do other things that I do recommend for staging it's findable for production I would add a delegate here which means another wallet that can send notification on your behalf I can add my other wallet here and then use the private key from this other wallet so you don't use your private key for your main wallet but since this is staging fake money there is no problem at all the channel address here is going to be these address here the address from that created the channel and the receiver I'll be notifying this address here which is this guy here just double check 0x fd6 and this looks about great this is my notification title and this is my notification body I'll change it to this because why not and this then I'm just calling the SDK and all these properties here on SDK on the documentation itself and I'm adding a call to action link whenever I click on the notification I'll be redirected to YouTube and that's it so if I come back here so let me just run this I send my notification so if I come here oh I have this huge payload here see it's very fresh here the notifications here and if I click on the notification I go to YouTube and also here and also all my phone or any pro on the front end we also provide react components because the idea a lot of protocols ask us like hey I want for my users to see my the notifications on my own tab I don't want the users to install anything from push and that's the end goal so and for this we provide react components for this so for you all you have to do is to import this so have this react component here which is called notification item and you can install it from push Pro called UI UI web you just pass the notification array that you get from here by calling the SDK you call the SDK you get a notification array then you pass the notification array down to the components that we provide so if I run this how does it look like see all the notifications that we saw they are also displayed here the exact same notification so if I click here also go to YouTube nothing changed see the idea is just to it's a platform agnostic anyone can display the notifications and chat messages and also have this button here called opting to channel because for an end user to receive the notifications the user have to opting to give consent to receive notifications from that protocol otherwise the notifications go to the spam box and what we say is users can go to the push protocol dab and opt-in to receive notifications like I can come come here I can come here and opt in to receive here or you can import you can use our SDK to You'll create a simple button then when you click you can opt in here on your dap itself so let's say your user is filling a form like on your dab and then they say hey do you want to get get notifications about this on your own app then you can display this opting button here when the user signs in the user clicks cites a message under the hoods push protocol but the user doesn't need to know the push Pro push protocol exists we have chat as well so here house chat looks like see so we also have video call here and and from the SDK itself you can also send messages V SDK using our rest API SDK so for this everything is detailed in our docs so let me just where the docs are if you go to docs.push.org that's good docstoppush.org here we have developer Docs and if if you're a developer there are two things if you want to send notifications you click here then you can send notifications from a smart contracts manually using the DAP using the SDK using the the scaffold solution that we provide using subgraphs or you can even customize your notification right you can add bold text italic bought in italic add URL and if you want to integrate chat you have here push chat for web tree integrating push chat so here we have some um yeah some explanation about the chat SDK but most of the explanation should be here on push SDK SDK packages rest API chat here's the documentation for chat where we explain how to send chat messages and this code here at opt-in copy and paste and I paste it here so if I go to push chat source chat send message this one this is how I send a message using the SDK and we're gonna change this a lot but for now that's it so first of all I get my user information from the protocol itself I decrypt my private key because whenever you log into pushchat we generate a new encryption keys for the user we don't sign any Crypt messages using their wallet on private key because we don't want to touch it so we generate the all encryption keys that are encrypted using our main ethereum wallet or a polygon wallet or ethereum uh binance smart chain wallet once you have the decrypted kit then you can just send a message so if I come back here and I run this message has been sent and I send a message to this guy here 0 f D6 which should be this guy here zero xfd6 which is nice so if I come here to chat and open here what did I say understand hello Tokyo hello 2K is here let me just change this to to this yeah it looks about rate let me send this yeah I receive a notification and the message is here that's pretty much an overview um all the different ways how to integrate push everything in the documentation we have been working a lot on documentation to make super easy for Developers and then yeah I think that's it any questions so far first of all thanks so much for the attention and yeah um hi thank you for your presentation I was wondering for the chat app is there a way for me to contextualize it so if I have like a inbox with like 10 different wallets that I'm talking to how do I know who I'm talking to like if I'm just browsing through it can I like rename it and be like oh that's the guy that minted the same nft or how do I yeah so we have these features just not not exposed on the SDK but we can add certificate tags like of course because when you're talking like you're talking to Xerox ABCDEFG and like I don't know the wallet addresses for all my friends so then you can display we display ens names so if they have EMS we're gonna see like peter.eath and we have a feature then we can rename this you can add like my friends or friend one then you can rename this just my disposing the SDK yet okay okay so the priority is always ens first and if there's no ens then it's the wallet address yes okay it will be like um ens fresn wallet address actually the first one would be like the the name that you set it like friend one if there's no friend one then we'll play an S then if there is no ens we display the raw address okay and then uh not on the SDK yet okay yeah with the group chats um I don't know whether I missed an example of that but can you leave a group chat um and still get notifications for everything else so do you have to get notifications from all of the group chat as well as all the other notifications yeah yeah so forever you must as when you leave the group chat then you stop receiving the group chat messages then you can no longer read the messages I don't know if that's your question like if I leave my group then that's it but you can't pause the notifications for a sub like a group chat or a single person or um I'm sorry you know you can't pause or um silence the notifications that's actually a good question yeah um not yet not yet um yeah that's a very good question um not yet thank you so if you're planning for the Dao in a group so do you need to have the push token or you have you you can get your own token or some another token right so um no push looking at all like if I ever owned down with your own token or let's say you have a doll that's stupid gated by NFC you can all do this so when you create a group on the process creating a group there is a section called token gated then you can pass the address of the erc21 or or your C20 then you pass there and the number of the tokens there then you can get the group and then you select with if it's a public group that means all the message content is public or if it's an encrypted group then only the group members can read the messages okay and you can connect your group to the Discord group too right I mean you cannot affect like on this group chat you cannot fetch messages from Discord uh what I mean don't Discord you can link to this like hey guys let's try to move this but there's no link between Discord and this group chat okay or try to build oh no not on alternative to Discord but like you would want to give another solution for online community to interact like a more web generated way which is open source Community owned and that's the idea we want to provide an alternative and of course it's up to the community to decide what's best for them but we just want to provide an alternative and question what we currently have like hey I think we can do things differently which is open source Community owned and and in the end is the up to the community to decide what's best okay okay thank you so much protocol to receive the notifications so when user want to uh receive this notification so just user have to install this Pro Up application or Google accession right um I think that's the easiest like to install the Boost Mobile app then you receive actually push notifications on your phone that's what I personally use for my personal notifications okay I just like open like start my day see more notifications my web 3 notifications that's what I personally use which is easier but currently I would say yes okay okay thank you that's not the ultimate solution but that's all we currently have okay thank you any more questions yeah I think that's it guys thanks a lot hey 
I need to get some sort of like token to send to people who actually do it when I say yeah we could do it reward in some way because nobody ever does well folks have you put on your video you might get a token you have some socks there you go a tenth of a sock offend anyone it has a sock who put that video there you go that's yeah yeah that's no joke oh yeah we got one more I got tempted by a tenth of the sock there we go it'll be in the mail just keep it on for very small pebble you know I meant a physical kind of a sock not a not a digital one well I think we're good Hayden if you can multitask we can you can retweet the live stream yeah yeah sure so cool yeah so first of all thanks so much for being a part of this Hayden Noah you know we're excited to have you know swap as part of pack money and started be doing this is I think probably our last final events of hack money before judging so we've come to the end it's been an exciting four weeks you know you your team has been super helpful in the channels and just everywhere helping people haven't build on top of you know up so I know I'm excited to see what people have built I assume you guys are as well but in the meantime it will do a little bit of chatting about you know how we got to you to swab p1 some updates about v2 which as everybody should hopefully know launched on main net very very recently in the last week which is amazing just in time for people to bring their hack money projects to Maine that too so perfect timing there and yeah just kind of get an idea of the story what's up with me too and of course an opportunity for you guys in the audience have around the world to ask some questions to the team as well so that out of the way we will start with a couple questions for Hayden and then we'll jump into some v2 stuff and know I would love to get your opinion on that so um hey Danna I'd love to know kind of how you got into aetherium in the first place and maybe what you were working on beforehand I know it's an interesting story I think it'd be cool to everybody else - here - yeah before working on you know swap I was a mechanical engineer so I graduated in 2016 I may 2016 from engineering school and then I spent a year working as a mechanical engineer doing like thermodynamics basically like tracking heat flow and car designs of working at Siemens I got laid off after about a year and I was now at the time I was starting to get a little bit into crypto I had a friend Karl flourish who at the time was working at consensus and then he moved up to the etherium foundation I mean so he was kind of delving really deep into etherium and would you know talk to me about it and was kind of trying to get me interested I didn't really care that much until the price went from like $5 to like a hundred dollars in like a few months and then I was like okay maybe it's interesting but you know it timed out nicely where I got laid off and I had a call with Karl and he was basically like congratulations you're now an aetherium developer I was like I don't really know how to develop that well but I guess I'll try it out because I didn't know what else to do so I you know I spent a few months experimenting with solidity you know learning how to write token contracts but you know I wasn't really sure like you know what I don't I started to feel like I needed like a bigger project to learn on and so you know I Karl actually once again he kind of pointed me towards this blog post from Vitalik which was talking about automated market making and you know a different way to kind of make a you know a trading platform or in an exchange and that ended up being kind of like the earliest version of you know swap and I spent a few months kind of building out you know just basically kind of trying to learn solidity and I you know built out an initial proof of concept that turned out pretty well and once I had that kind of I started to go to a lot of a cerium events and meet more people and I you know heard about other projects in the space like Bank or another you know bank or was kind of at least in doing some similar things and you know I did get some ideas from there no kind of going from just like this thing that could swap between two tokens it's like a thing that could like hot between and go anything to anything and you know I kind of just continued working on it I'm still pretty much unemployed for this entire time living at home for for a good portion of it I'm occasionally doing a little contracting work but I you know just kept working on the smart contracts and a interface for it and I kind of eventually built out like a good enough proof of concept where you know I met some people that the Syrian foundation on my bed metallic in basically spring 2018 29:20 1820 1928 een and he kind of recommended I apply for an etherium Foundation grant so I did that they got a theorem foundation grant and I kind of paid contract you know contractors to build out a front end and and do design work and I kind of you know finished up the smart contracts and you know paid smart contract auditors and formal verifiers to kind of make sure that they were secure to the extent that we could be at the time and then that kind of like turned into you know slop which is pretty cool very cool and and yeah I mean obviously like I think most people on this call will be aware of like the kind of explosion that you know slob kind of it almost became like a mind where my felt like where it was like there were all these other things and all of a sudden was just unistall and everybody just used you know slop I mean it became very popular very very fast like what do you think led to that like was it kind of any specific design choices you made or like was it that like you know it was like significantly better in every way or just a specific way like what do you think led to it just like you know taking off like like a rocket ship yeah I think it definitely wasn't something I was expecting or anticipating when I was working on you as well the kind of the scale of what I was expecting to be relative to all these projects that had done these like huge icy hose and the like a lot more established I wasn't necessarily expecting it to kind of compete in the same way the kind of design choices behind it were like you know how do we know some of it was very UX focused like you know this kind of this feeling where you just like you know you you all the only thing you need to interact with is a smart contract and so it's just like I put in this token I got out this other touken it feels almost like a vending machine there was like that kind of design improvement compared to like at the time it was coming out you know ether Delta was I think still like the most popular trading platform which was a lot kind of more complicated to use and then kind of some of the other design choices it was like how do we make a trading platform that's kind of mimics the underlying properties of aetherium itself something I noticed about a lot of projects being built on aetherium when I was working on you know swap was like you know they kind of made sack various sacrifices at various different points on sort of some of the underlying properties that I cared about most for etherium like if you know something built on it like etherium is very censorship resistant but a lot of projects built on top of it aren't and so the idea of the unistall but like can we make something that's as decentralized as aetherium itself and that's hard to like it's kind of as unstoppable and as trust list of the theory myself I think that that kind of resonated with a lot of people and you know there was just like it felt like a little bit different from a lot of other projects and I think that got a lot of initial excite excitement and I think another thing is just like the fact that you can sort of trade anything for anything on aetherium and like you don't need a professional market makers like for like the order book model you always need like professional market makers to make sure that this will quiddity for like any token but for that further sort of like longer tale of tokens it's hard to scale professional market making they're having sort of like automated liquidity provision you can just like lock up your tokens in a smart contract and then there's like liquidity for that stuff in forever like a fairly powerful thing yeah very interesting yeah so I mean so you've got v1 v1 is doing very very well you know there's a lot of growth loss people are using it when did you start to realize maybe this needed to have a v2 basically as soon as it like what's doing an absurd amount of volume and try to have an absurd amount of traction just like this scale of like resources that had been put into it like thinking about building eunice walk I mean it was literally just me working on my own for like most of the time for v1 and you know you thought you heard the story I told at the beginning like I wasn't that does an engineer I wasn't you know I it was like the first version of it and it's kind of hard to get something perfect on the first time I wouldn't say v2 is perfect either I think yeah we're already starting to think about a b3 we can get into the you know that's the flavor but um the point is it like when this thing started doing you know a million dollars a day in trading I was like okay we have to do it we kept it we have to work no this this thing clearly has proved itself as like a concept but you know I was very sure that it wasn't like in its ideal engineered state and so you know I definitely thought it was worth kind of continuing dough to either write on and improve caught it cool so yes so now you're like thinking about improving it you know what was sort of like the first thing you knew that like you know in v1 I was I was either maybe really worried about this or like it's something that I wish I'd built in the first version what was sort of like kind of the initial feature that you thought would be a perfect candidate for v2 I think that the first one we decided on was probably the arbitrary pairs you know allowing any RC 20 to be paired against any other it was definitely like the most requested thing a lot of people would bring up you know they wanted to you know denominating stable claims or or kind of have to like very like know like like common to things that were like highly correlated they wanted to you know be a liquidity provider on that and not have as much Christ risk and they couldn't because everything was kind of forced to be denominated in the east and I think is a great pair and I think it will probably always be like the most common one or one of the most common ones but kind of you know adding and sort of this broader you know options was it was probably like the first you know thing and I was very resistant to the idea early on but just because it was like I'm more complicated like routing thing that occurs yeah I'll sweet so maybe we'll let no edge open do these ones too so feel free I would kind of get an answer from both you guys for these kind of open questions and ideally pick different features so that you can talk about more of you two features so maybe starting with with Noah for this one you know what is for you the most exciting feature of v2 that you think is going to have the biggest impact interesting I don't know that's a good question I think something that I'm kind of I was actually very hesitant about adding one particular feature which is flash swaps so we were really close to the end of the contract life cycles we were getting them formally verified they were kind of in our minds frozen you know in in in they were you know they were they've been stable for quite a while and then I think Dan Robinson who's one of our investors and and kind of you know brainstorm errs when it comes to these kinds of things had this idea and Hayden had kind of thought about this as well and it's basically this idea of flash swaps which has been around for a bit now but we we had this really nice design of this really nice way to add it into v2 and so that was a call we had to make whether or not we were gonna add that and I was super I was you know I was playing the kind of cautious side of things and Hayden and Dan were kind of pushing pushing me in the other direction and we ended up going with adding it and you know that had that tacked on sometime to our form of verification and you know it did kind of initially add this kind of additional complexity to the kind of underlying mechanics of a swap onion a swap but I think the more that we spent time with the code we actually realized it was like a really natural kind of it kind of fit really naturally into the into the way that we were you know already thinking about you know the invariant and preserving these properties about the contracts and things like that so anyway we did ended up you know we ended up getting it in and I think that it's actually kind of it's a bit it's a bit complicated I think right now for people to use because it's so new but I do think that it offers a lot of really interesting kind of atomic you know abilities to atomically arbitrage and you know loop through kind of other protocols and you know do things upfront that you would otherwise have to do in an iterative way and so I think that and it's you know it's also kind of on the flip side of things it's also forcing projects who might be vulnerable to you know flash loan of governance tokens to kind of be aware of the fact that this is you know we don't you know we don't want to encourage that kind of behavior obviously but you know at the same time if it's possible on some other venue you know we might as well kind of be like acceleration in that regard and kind of force you know this new standard this higher standard of security for all these project and so um you know we made sure to be you know appropriately cautious and you know talk to people who this might impact and such but um at the end of the day we did feel like it was a reasonable teacher to add and we do think think there's a lot of benefits and so yeah that's something I think that's gonna be pretty exciting to see to see where it goes on the security thing to add to that like if you can you know if being able to flash like if you if being able a shabbat some token from us lob impacts the security of your system then you should be aware that you can already flash loan a ton of eat from dy DX and then atomically by any token on you know slop and then attack those same systems like any system that that is broken by flash swaps is already broken by a combination of you know dy/dx m and you know sloppy one essentially so that was like one thing that kind of helped us get comfortable with adding it despite you know some people's initial like concern about it as like you know behind like what some of the implications might be I also had my personal answer to that question would probably be the Oracles I I mean I already mentioned er 220 or C 20 pairs and I think that was a super important i I do think that like you know having Unchained price feeds that are you know very decentralized and also very easy to reason about a lot of like you know on  like on chain Oracle systems kind of depend more on you know people voting on a price feed or various trusted parties kind of coming together and you're averaging across them and all that and this is like very different from any of those it's very much just based on like know what's the cut what's the amount of money you would lose moving the price on unit swap away from the real price and then you know what's the what's the amount of money that I would cost and you would lose to arbitrage if you did that you know every block for a thousand blocks if you know if you're doing the 1,000 block average and so it's a lot more easy it's like a lot easier to reason about and for some use cases I think it's gonna be really really cool and important I'm awesome what about kind of the feature that was me most challenging to build and maybe it would be great to dig into Oh what kind of hurdles do you guys hit when you guys were trying to build this thing up gonna take that one no and what do you think with less challenging that's a good question actually I think so well one I mean I think ok so I'll talk about one really thorny one hayden feel free to like you know maybe do some more broad one but something that's like very technical and specific but actually potentially kind of pretty bad is this issue of like minimum divisibility so in units of p1 the way to determine how much how many pool tokens you know a given amount of ethan a given amount of token would give you is basically it just gave you the amount of pool tokens corresponding to how much eath you sent to the contract which is pretty reasonable right because like eath is you know in d1 at least it was this canonical base pair and it kind of had this idea of enshrined value and you know it was kind of a reasonable like unit of account for v1 pool shares but in v2 we obviously don't have this feature we don't have this property anymore not every pool has a neat you know component and so we had this problem of how to denominator oaken's so you know you might just think that you could pick like the minimum or the maximum or maybe like the average or even you know in yunusov style like the geometric mean which is the square of the root of describing the product try the root of the root of the product you know like if you would send a hundred Y and 10x you know you do you know root thousand um but it turns out that there's actually all these attack ability issues with that so if you meant like the minimum number of pool shares like you send one way of one token in one way of another token that'll give you out you know root 2 or whatever root 2 grounded down which is one way of pool shares but then you can actually send a bunch of value into the pair right you can just send you know because because you know you know swap can't control the the token balances of any arbitrary contract you know so someone could take you know a million way or you know one unit say of this token and another 2 million of this other token send those to the contract and then suddenly one way of pool tokens denominates this incredibly large amount of liquid right and so that's his super it's this kind of really arcane attack like it's not really I mean attack is debatable I guess but it's just really arcane kind of pattern and it's not something you typically do and there's no real reason to do that but it turns out that if you do do that then it kind of is this barrier to entry to new liquidity providers and so you actually have to have above the threshold of you know tokens that were sent to the contract in order to get even one way of pool shares and and kind of contribute to being an LP and so you can get around this obviously by like wrapping or you know doing doing other things but it's kind of frustrating and so um we did actually find a way around this we essentially just enforced that there's this minimum threshold of liquidity tokens in the minting process so you know the first affinity provider kind of has to you know burn this small tiny miniscule fraction of it's typically like you know less than a cent for almost any reasonable pair out there and it kind of ensures that there's always gonna be this kind of very small unit of measurement even the unit of pool tokens that ensure that this divisibility issue can't get that bad right because there's some there's some multiplicative factor on on how bad this this divisibility can get so you know very technical very specific but these are the kinds of things you have to worry about you know even though it's not that realistic and there's really no incentive to do what I was describing like there's no actually benefit well you know there's no real big benefit that we could think of outside of just kind of griefing but you know you do have to be aware of these kind of things in permissionless system so that's that's that's one thing that we plan to do with you know v1 has this griefing attack actually so you could anyway if someone deploys a new pair then like if you're the first liquidity provider you can create like any arbitrary minimum liquidity threshold to become the next to become a liquidity provider for all future users so if you're the first liquidity provider on a parent unit swap you could you could maybe set that to a million dollars and then say anyone else who wants to join the pool has to put in at least a million dollars we didn't really realize that until well into the the v2 design process and it's not like a you know you can't steal people's money who've already put in pools and it can't affect existing pools but if you are if for in any future pools actually if someone's aware and they see they could start deploying they could they could do this great thing my answer the Oracles probably there was there was like this idea of like how do we know when we were like first doing the Oracles it was like you know like we were saying about you know do we store like a built in moving averages like one our average is one day average is kind of built into the contracts and we start to realize that it was really hard to choose like what periods of time to average across and so we kind of we ended up on this this other Oracle system where we're storing these price accumulator is that let anyone else building on top of it kind of choose their own periods they care about they ended up kind of solving the problem really nicely but I think it took a while to kind of get to the the current Oracle design for sure very cool um maybe maybe jumping forward a little bit to maybe what could be a future feature you know I think I remember I think it was at Def Con last year a project called unipeg or you know in general kind of layer to you know swab you know I think we're sort of settling into the new normal that gas prices are quite high and they've been quite high for a while I mean maybe first of all like how do you guys feel about like I you know what gas prices being as high does that affect users does that affect like liquidity pools at all and otherwise like maybe just chat a little bit about like could a layer to you know swab be to exist what could that look like should be send if somebody should have built this this hackathon or maybe the next yeah I I think that that's a good  question so first off it obviously does impact everyone who uses aetherium in that like all users are paying more towards gas fees and it kind of sucks for them and it it's kind of a you know and it's and it sucks further than you know the platform's themselves because it might you know disincentivize future usage if people have to pay a lot of fees so yeah that's not it's not great I the way that I think about layer 2 solutions is I think that like a lot of kind of past layers layer 2 solutions that people have thought about a lot like you know plasma and like a lot of sort of different ideas people had they all had sort of it all felt like a huge sacrifice on like it what it meant to be an application on aetherium so like when you're building on top of aetherium you have like some really really really nice graphics where you have like its kind of ability to kind of interoperate between other applications on a cerium without needing to like you know deposit into an application and withdraw like you can just basically like use tokens on you know swap and then use them and compound and use them in maker and you don't need to like worry about like withdrawals and exits and right and so you know being able to kind of like seamlessly interoperate between applications it is like such a core property and then like another core property is like just like the development experience if it's your names actually like you know some people complain about it and in most like serial killers like say that like it's horrible but like actually building on top of aetherium is pretty great and there's like a ton of tools and there's like a ton of you know it's writing smart contracts it's and isn't too bad and like I think that the layer 2 for like a layer 2 they kind of completely take off and and fill the needs of like you know swap it needs to have these like underlying properties of aetherium which are like general interoperability the ability to write general smart contracts like out of the gate and not need to like be able to like the applications themselves I don't think should be creating these like really really intense complicated things like like you know what some of the past scaling solutions have required and I said like I think optimistic roll up is like the right level of trade-off where you can actually create like a general smart contract platform on optimistic roll-up that like interoperates like out of the gate and so you know I'm a big fan of the you know formerly the plasma group team they're now called optimism and so they're the people we collaborated with on you know pig and you know they're you know they're working on a general smart contract optimistic roll-up chain and you know I expect to see you know a finish like a version from them that's that's may not ready at some point and I'm very excited for it personally and I do think that it would be worth putting Eunice WAP on and Eunice puppy to on if someone didn't know there is that like if for it to be ready for you like it almost for it to be the layer to that like wins or whatever or like gets defy on it like it needs to kind of support you SWAT basically it needs to reply like it needs to be like etherium where we can just like deploy Eunice pop to it we don't need to like build a whole like back-end to it and so you know we're waiting on that to some extent but we're expecting it that it happened fairly quickly as well kinda cool these noms yet neither days nor weeks a period of time than that but I would say that like I wouldn't I wouldn't be surprised if it was less than a year for us to have like a general purpose I wouldn't be surprised I'm not speaking for them first I had like a fully general purpose you know optimistic roll-up chain with with native solidity and all that stuff but we'll see cool awesome and yeah I think the last question from my end so anybody in the chat if you have questions start thinking about them write them in the chat and we'll call on you one by one and you can just kind of ask a live but maybe maybe just to wrap up this section you know as you think back from you know your development of v2 to v1 you know like what are some of the things you notice that you know we're sort of like beginner mistakes that you had made or things that otherwise like just made things more difficult you know as you were like thinking about designing further software you know what are some things that maybe first time developers or even seasoned developers should be thinking about when they're putting together a protocol um I don't know if I'm fairly happy with everyone one but I'll say that like mistakes definitely obviously like informing people of risks you know there have been people who kind of you know like or like sort of seeing things I mean like well no one would ever do that that's really dumb and then like all sudden like hundreds of people start doing that so like I think they're just like being really really really like extremely careful with informing people or you know if the risks of using things and kind of the you know just yeah yeah that is like one thing that I would maybe highlight I don't kind of think no I guess I also like the trade-off I think that the mistakes that a lot of other projects are making or it's just like being aware and probably we've made you know made those mistakes as well like being aware of the trade-offs that you're making like super hyper aware because sometimes people make like what feels to them like a very minor trade-off and it just like very fundamentally changes like the entire like all the security properties of their system we're suddenly like this one small like change that you made like now you're like depended entirely on like some small trusted party for like everything and your system to work so yeah I just think like trade offs are like under under considered sometimes like the implications of them yeah I don't have too much to add I think the one thing that you know just from a sudden or practical perspective that differs between B 1 and B 2 is the V 2 has this kind of core helper separation where the core contracts are kind of very minimalistic very brutal istic and really only exists to kind of verify the the security and safety of yunusov and you know make sure that x times y equals K is preserved more or less and that liquidity providers aren't going to be fleeced in any way and then you know we had this whole constellation of external contracts which are responsible for you know maintaining Oracle's and performing flash swaps and even just doing the very basics of kind of routing between multiple pairs in order for you know in order to support trading for free users and front-end interfaces so I think that this is really nice because it's very extensible and it's very flexible and you know approves can be you know given fairly freely to these kind of helper contracts because they should be extremely simple stateless you know never doing anything that's at all suspect suspect or you know complicated in any way so you know very easy to verify the properties up and so that's something that we're pretty excited about just because you know there's always new new exciting ways to like transfer or see 20 tokens or you know perform different types of swaps that swap to like different you know swap the prices or you know other kinds of things so that's something that we're kind of we want to keep doing going forward and we'd like to see other projects do is kind of you know separate out these core pieces of logic from from helpers yeah great that's a good answer but much better than mine sounds good cool awesome well you know let's let's turn this over to the audience like why we're here so I think the needs had a question mean you don't know if you're if you're able - like unmute and ask it yourself if not I'm happy to repeat it what went into everything that zero point yeah exactly yeah so I'll read it for stream - so yeah so the question from banette who's not able to say it out loud right now is what went into determining the 0.3% fee are there ideas around making that variable I guess basically trying to get a sense for how we arrived at number oh yeah i'll say that like in terms of what so the 0.3% fee and p2 is kind of a continuation of the 0.3% C and the one which came from a discussion between me and metallic where it was very short discussion I was like I had it at 0.25 and then I was like I'm worried that it might be too low and looking for others won't make enough me like you could try 0.3 and then I changed it and then it never changed but like the general thought that went into it was like it should be somewhat competitive with other kind of types of trading platforms and we didn't want too much like active governance in in v1 or env2 even just because it felt like you know the funny thing is that like you know whatever the fee is right if it's 0.3 0.2 5 or 0.35 like there's probably like a different amount of liquidity where the kind of the market might kind of reach some sort of equilibrium there definitely for certain types of pairs it would make sense to have like much lower much higher fees and it's something that we very much want to explore in v3 so we are working on a v3 and I did say that like dynamic fees following the scope of that where that is where we want to explore it more but something that you know has kind of one of the reasons it hasn't sort of it wasn't in v1 and wasn't in v2 is just because they're like no you always kind of have this trade-off when you introduce governance to systems and yeah we want to make sure that if we do implement like a dynamic fee it's done in like the right way where it doesn't kind of create weird incentives between different users of the system cool all right I need it accepts the answer awesome 20% works for like a lot of use cases surprisingly huh for a lot of pairs that actually works fairly well awesome so I think by about I think that's how you pronounce that I'm probably wrong are you able to okay you won't be able to speak as well alright so I'll read out his question as well so what are the solutions presents that would prevent quote-unquote bots to take majority liquidity pool portions of pairs and the majority part of the fees being before a large trade hits the pool leading to bribe / griefing of existing liquid vehicles alright then that was mentioned in the discussion section of our audit report so basically the idea is that like someone is making a swap and then ahead of that swap someone adds a ton of liquidity to the pool and then at the end of that swap they remove that liquidity and so they got like a large portion of the fees for like a single trade I think that's my interpreting that correctly I mean the interesting thing there is basically what you're doing is you're increasing the liquidity for that trade and you're actually improving the trade execution rate for that user it's debatable if this is actually bad behavior um I don't know I'm not actually 100% convinced it is bad behavior because you're you know you're kind of taking on that price movement you're you're giving a better trade a better execution rate and you know maybe it makes sense for you to kind of give yeah it's almost like you know should liquidity providers be actively withdrawing and adding liquidity constantly or not you know based on kind of certain transactions they're based on certain you know periods of time but I don't I'm not convinced it's like bad behavior at all it improves the trade execution rate so I've seen those they're comin in here from miles not sure is that a question from you miles or it's more of a comment no no it's a question I was just kind of like thinking through this problem I don't know if it's a direct question so I agree that it's easy to change to reason about the cost of artificially changing a price for a to op with the defined time but if the attacker holds a large number of pull tokens for the pool at the tea whop is based off of and then pulls them out right before their attack how would you kind of handle that as there is a way to handle that is that being handled in a way I don't fully understand it so um so it's yeah I know canes and they pull out the liquidity right before an attack so okay so you're talking about like you know yeah a little liquidity component of these sort of queue ops right is it like the the costs to to change the price like you're saying okay if the tea WAP has a thousand blocks then pushing down the price by this much cost this much but if the attacker holds pull tokens and it pulls out a bunch of liquidity and then executors attack yeah yeah so that's actually that's a a very interesting point and there have kind of I'd something that we thought about a lot which is like you do have this ability to get these two outs and it's hard to get a to know exactly what the liquidity balances was in the contracts and at every moment in you know in in between right and so you actually it is true that that's a very interesting scenario but there are kind of interesting ways of handling it as well so one thing that I've thought about as like a really interesting mitigation here is for example you could have an Oracle system let's say that you have a project that using a swampy to as an Oracle it's very important for it to have liquidity for the safety of the Oracle itself they could you know one example one thing that they could do is they could direct a fee of you know small like fee stream maybe from their own system and basically pay those fees to liquidity providers who time lock their liquidity tokens and then you could basically have like liquidity that's guaranteed to be in the contract for like the duration that you care about and you can make like stronger guarantees so you can make guarantees by basically like you know locking up liquidity tokens in a smart contract it may be in the Oracle contract itself which can give you like a very very strong like which then what you would be able to say okay well I knew I know for a fact that there was a million dollars in those contracts for this entire period because you know the liquidity tokens were in the contract the entire time that's one interesting way to handle it or if the liquid he's ever withdrawn the Oracle contract would know because it you know it was pulled out of that in the Oracle contract itself Thanks we've got a question from Trent so this is a little less technical but I'm curious how you guys approach branding and memeing and what percent of your sort of product strategy is centered around picking the perfect emoji like how long did it take to pick the unicorn emoji and how important is that to your product strategy just given him given we've like typical financial institutions are like it's very boring like Bloomberg terminals you guys have like pink gradients you've got unicorns you've got emojis this is all great this is the new paradigm of branding but how did you get there a lot of it was very natural I will say that you know Khaleel who's you know the the design lead on our team has been involved in the project actually since over a year before the v1 launch so he was kind of actually working on like the UX design for the original interface and actually even for the initial proof of concept before I you know before I got the theorem foundation grant so he's kind of been involved for a long time and so there's definitely always been that's like design element behind it but I do think that a lot of they're like the memeing and like the unicorn imagery I think a lot of that was just like gnat came naturally out of like the sort of the community and growth and excitement around it I I you know we definitely kind of you know I don't think a lot of it was like planned I would say that like you know maybe the unicorn emoji was like in the original UI you know that was maybe probably from Khaleel but you know the kind of I think that it was really like the excitement and growth of the project itself I kind of fueled a lot of the memes and then the memes kind of you know it became a virtuous cycle where the memes I feel like future excitement and growth and all that we now obviously now it has become like a stronger brand and it is something that we kind of think about more and that's why we like kind of spent more time building out ago know the funny thing is that we were using the Apple emoji for really one time but we can't you can't necessarily just use an apple emoji as as your logo forever and so we know we've been we worked on the kind of the newer branding as it's on you know swapped org and that we spent a lot more time and consideration on but that was kind of after all the community stuff cool mr. will would you like to ask your question yeah so if you were to have just like a bunch of eath that you wanted to like efficiently deploy into a yuna swap pair so say the pair was like a token a token pair like independent of eath and you wanted to swap on like a weak token pair to get the appropriate amount of tokens for for each side is there an efficient way to do this without having a lot of like dust left behind I know you can use like I have an arbitrary amount of eats get exact tokens or like vice versa but you know how do you how do you maximize that amount of eath and still keep the right ratio of the two tokens yeah that's actually an interesting one so we've seen so the kind of one other a similar case to what you're describing is when you want to add to a we--the like token pair and you have we--the or you have the token and it's actually more complicated right because then you have to like figure out which fraction of the amount of 'if for example that you need to convert to tokens in order to like exactly match the ratio in the pair and that actually involves like square roots and math and it's actually never perfect or I mean like there's always almost there's almost always some dust and so okay you're asking a slightly simpler question which is actually pretty interesting yes there is a perfect way to do it without dust you do need some slippage parameters to control the safety the transaction but the way it would work is basically like you know token a in token beam and then there's a weak token a tweet so can be pair so three no three total pairs if you have a some amount of 'if you are gonna want to like first look up what the prices in the token a token B pair and so you know that like the relative ratios you know of a and B and then I've been mean basically what you're gonna want to like look up the price of a weave and B weave and then use the ratio to check how much getting exactly like some unit like let's say the ratio is five one right like check how much ether would require five tokens and then to get one token and then you know swap exactly swap for exactly that amount and then you you know because you've looked up the price already that is the amount that you can add to to the a B pair but actually thinking about it I do think that there's gonna be some routes involved and so I actually don't know if it's possible to do without dust I would want to like think about a little bit more but the one thing to know is that if there's only a tiny amount of dust do two like rounding error math it's typically like a trivial amount and you can actually donate it to the pair so like if you can't deal with this for whatever reason and like you can't send it back to the user or you don't want to or whatever it is possible just like donate small amounts to pairs if it's again due to like rounding error and not like slippage because if it's something you know you do need some parameters to control like if the price changes dramatically between when the transaction is broadcast and confirm you know you need parameter to control that safety margin but yeah I don't know it's a bit complicated but it's probably I also just sent a link to the chat which is our swap to price example contract so that's basically doing I know it was initially saying which is like if you want to buy up to an exact price you know you can you can you basically use that this contract shows you how and that maybe will help a little bit with kind of some of what you're saying you can also ask us in the in the discord it's a little bit hard to do fully live vocally but you know yeah I was I was messing around with it so I it is a little bit complicated to try and like yeah do it efficiently so yeah I'll check on this contract yeah yeah you can check out that contract also in our discord you could also try to ping down arrived Anthony he doesn't spend a lot of time experimenting with you in a swap math a lot of time and so you know you might be able to get some some interesting ideas from him as well awesome thanks any other questions in the chat or in general feel free to just on me yourself at this point I mean I'm also curious to just hear from a didn't know about any anything and everything like something that we haven't brought up about the process of transitioning like I'm sure you guys have like some sort of contingency plan like once you deployed what does that look like what if hits the fan I'm curious to see that side of that it just they're a mutable smart contracts no really that we you know these markets from our country are immutable and non upgradable something that like a unit on v1 that differentiates it a lot from a lot of other projects and you especi to even is there like a lot of prejudice can have these sort of built-in upgradability migration stuff where you can now change the underlying code at the contract or you can like move liquidity out of the contracts to other contracts you swap t1 does not have anything like that you just want to eat you basically doesn't have anything like that either but you know so kind of the process of upgrading you know swap is very much like you know make a better version and convince people to to use it because it's better and the process actually went has gone a lot faster than I was expecting so so far about I think 11 to 12 million dollars I've already moved from v1 to v2 since the since the v2 launch in the pen like three days ago and so that's like about you know now v2 is about 25% so v1 which is which is pretty cool considering it took you know like a year and a half for v1 to build up to that amount so it does seem like a lot of people wanted to migrate over one kind of you know the general thought it is still like somewhat of like a you know you sell like maker but maker had this sort of like longer transition period and I think that unit swap will see a similar thing something well something that gives me a lot of confidence that like v2 will be the one that kind of gets more of the liquidity ultimately is that there's all these things that we too can do that v1 can't and that kind of gives you like a lot of network effects we're like you know if you want Oracle features then you need liquid to be in V in V 2 and not and you can't if you want if you want like you know your she 20 pairs you need in V 2 and if you want to kind of be able to do stuff that these / swaps enable you need to be in V 2 so sort of things like all these like native use cases for V 2 that aren't possible with V 1 and I think that that will kind of lead to like more usage and traction on V 2 but know if people really really hate it they can stay on V 1 because it's an upgradeable smart contract no matter force you use the new one so is that kind of like your logic behind I mean a like the reason why you guys don't do upgradeable smart contracts and like is that mostly because of those like you mentioned earlier like it's much more closer to like the core philosophy of etherium is that like the reason behind kind of I mean it's also just like this like practical thing like if I could migrate all the quiddity on you swap then no one using you know swap would have any guarantee that their money is safe right like right now people can put their money in you swap the entire reason that you know swap I think has so much traction because people can put their money in it and not have to worry about you know if it will be there you know because they you know obviously they're like various you know possible like smart contracts things or smart contract bugs they're like if the token itself has like some issue that like conflicts with like you know small code or something but like in general like you know there's like very high like outside of some smart contract risk and you know that you're you're liquidy on you know swap like itching though the pool tokens are in your wallet they're your pool tokens and like us having the ability to change the code underlying that just like kind of breaks that entire fundamental property in a way that we're not like really comfortable with and I think would like drive away a lot of usage in my mind like I think people like it because it's it doesn't have those properties and it does make it harder to iterate and so that is like the trade-off you're making but I that's you know it's the trade-off that feels worth it to kind of keep these sort of underlying security properties got it cool I guess it also kind of incentivizes you know when you guys do do a new launch like a b2 that you know you make sure that it's it's worth it worth people while right yeah if me - I mean yeah and if the - yeah that's part of it definitely like you know it means like you have to build a better better version of the protocol if you want people to use it but it's also like yeah just yeah I mean if us messing up the v2 deployment like 50 million dollars down the drain from like everyone who's ever you used to be one like that's awful right like we don't want that sort of dangling over the process even though we are a very security-conscious like v2 was fully formally verified it was built in a very security-conscious way you know even more so than v1 but still it's like yeah cool makes sense I think we'll do one or two more questions and then probably look to wrap up there's a question in the chat that says what are some of the things that you would like to have built on top of v2 maybe some like weird yield hacks you can think of I guess just basically anything interesting that maybe you haven't seen have been thinking about or maybe even too busy to build yourself I guess well and there's definitely like more usages of you know just because he said the word yeah there's a lot of things that would equal on top you know swap definitely like Oracle things all that but you know he mentioned yield hacks and so I'll go off of that it's a prompt and like I'd say that like more kind of uses of you know liquidity tokens themselves we've seen that a little bit with Ave they they you know they recently announced that they're planning on adding like you know swap liquidity tokens or the collateral source you know on on Ave and you can you know and then that basically allows you to kind of modify your exposure as a liquidity provider where you know for example if you were to let's say that you like like one of your lackeys basically like if you provide liquidity on earth to die pair and you use the East to die liquidity tokens as your collateral is basically like let's say you put in East and then you borrow let's say if you like yeah if you put in eath into you know swap and you borrow the die and then you use your liquidity tokens as collateral for that entire thing like let's say you almost did that out of order right where the liquidity tokens at the end basically are the collateral used to borrow one of the two underlying tokens that's like a very big fundamental change and like what the position is when you're a liquidity provider on that pair like now you're obviously paying like borrowing fees and but you're also going to make may be earning lending fees these people want to borrow the pool tokens but you basically are able to like reduce or remove your exposure from one of the two underlying assets maybe reduce it or modify your exposure significantly and I think that there's like all sorts of kind of cool yield hacks there when you start using pool tokens as collateral sources very cool I just know a quick one and what point do you think you'll stop maintain your stop hosting the b1 front end I know people hosting their own front ends kind of makes this not really matter but when it gets under a certain threshold or it'll just sort of exists you'll link to it in perpetuity for people who maybe went on vacation for five years or something okay there's hosting hosting is one thing developing is another thing right there's like right these friends are like open source a lot of people are running different Forks of them as well there's also like a lot of different interface 15 the swap I'd say that like you know only a you know I'd say like I think like less than 20% of the volume even would go through you know one interface on you know swap most of the volume is like from other interfaces aggregators on chain integrations arbitrage like spots and like all these like native things you know we're very much like a protocol company and so like that's definitely like even like the core focus there's kind of this like you know idea of like how can we verify that like they're like how can we trust like a specific like URL that we go to which is maybe like a different issue from like hosting directly and we kind of like prefer to kind of have the commutable ipfs like have like deploys and then maybe we kind of like vouch for ipfs deploy saying like oh we know that's like matches like the underlying code that we believe is safe that's like more of like kind of a in terms of like we're not like really actively doing any development on the view version of the interface it you know it's it's kind of we don't have we're a small team we don't really we can't really be maintaining multiple interfaces and also building a protocol so we need honestly like to see more like interface work move to other other projects and other teams anyway so the v1 anima interface will probably be hosted on like a permanent ipfs link or something and other people can have Forks that they if they want to continue to maintain them but it's not something that we want to like actively work on but you know the v1 smart contracts right that's what's important maybe want smart contracts will live on the darién forever and work forever you know they're the code for the v1 interface will always be open source gotcha thanks sweet thang any barring any last-minute questions think we'll wrap it up here yeah yeah for sure yep you say all right cool well I think with that being said thanks so much hating Inoue and everybody else who came intended for your questions answers everything you know really appreciate the chat looking forward to seeing what everybody's built at the end of this week so for everybody who's watching who's part AK money make sure you submit by the end of cider for Sunday night that is the deadline if you miss it there's no back seats so make sure you get that make sure you get something in by Sunday night and yeah thank you so much again and enjoy the rest of your hackathon and then the rest your days thank you thank thank you the we're hosting this and I think thanks guys enough summit at Cerrone awesome hey everybody 
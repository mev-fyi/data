yes okay we can get started now so uh welcome to our last day of workshops um right now we're going to be having a talk from skeletor from urine about build and profit from urine vaults he could take it away now thank you all for joining us hey hey guys thank you for the introduction um okay as the presenter said we are going to go through a few examples of how can you build on top of urine v2 volts so your v2 volts as you know are like the current goals um that we have right now they are not a part of the new eip obviously the aip 4626 that is for yield tokens uh what we're going to do here is go through some examples of how to wrap a v2 volt into for it to be compliant with the new standard and how you can build on top of that or use that to integrate with different type of integrations that you might uh like or build uh so you can get some profit out of that uh this profit being fees uh um et cetera and also as we earn if you basically root funds through us you can enter into a let's say a b2b uh system where you can get kickback out of the funds uh you you deposit or your users deposit through your protocol okay so let's start um so basically you're not sure how familiar are you guys with the video code um but basically what it does it it takes uh a token so this can be let's say die uh so users can deposit that into the world the vote will issue some shares for them depending on the current price per share with those shares are also an erc 20 token users that have these shares can later redeem those shares if their price pressure increases so the vault is profitable uh the amount of underlying or in this case die that they will get out of that will be higher so basically this is what we count as apy so this is a simple wrapper actually most of the code is inside the uh vault code base this is a separate contract from the also whenever you initialize it you need to pass an argument saying okay which vote are you wrapping um then it grabs automatically in the constructor the well it sets the name and symbol because the eip for 626 requires the yield token to also be an erc20 uh so here's a difference i'm not sure if any of you uh watch the previous workshop but in the previous one we had a wrapper that was not actually issuing new shares on top of this so we'll go uh but we're going to detail a little bit later about this um but the thing is this wrapper will hold default shirts and issue like a copy of the of our new shares uh to the to the depositor or the user of this rapper um so yeah that's it's pretty simple you initialize with a certain vault that cannot be changed obviously um and then you have uh some like utility functions uh basically to see what's the total supply so this uh is uh basically your shares uh token uh like all these uh yeah well as he says his ears it's only like talking compatibility um and here comes uh um the fun part so whenever a user wants to deposit into your wrapper uh obviously it will need to approve the underlying uh token in this case uh die so what we would call here uh we have like two separate functions for everything uh so basically uh when you call deposit you are uh like working with the underlying asset uh so in this case uh die so this would be like a hundred i or something like that uh but if you call mint which is also like a kind of deposit type of function uh but you're working with shares so you can say okay give me 100 shares um i don't care how much die you drain from my allowance just i want 100 shares um both of those functions use the same uh like internal function uh but obviously the main function just checks okay if you want 100 shares how much assets uh would you need um so if you if we go to this deposit function here it's like at the almost at the bottom of the file we can see that it receives an amount obviously like 100 i the receiver that can be another account so it doesn't have to be the message sender and the depositor that is uh the message sender so this is where we are going to be taking the the tokens from um so here we save some some stuff to memory just to save some gas um we check if the allowance to the vault uh is correct so because obviously we need the wall to be able to also drain tokens from us this can be done here which is basically we are making the first depositor for pay for this uh allowance assignation into the vault um but but yeah this can also be done in construction or in any other place um so the first thing we do is we take the tokens away uh from the depositor uh into this uh wrapper contract obviously the the amount that the is required um we checked the uh allowance on the off of the vault as well um oh sorry okay this is i messed up okay this is the approval and this is just to know if the because you can pass like the max amount so if you send okay i want to deposit everything i have uh you need to check if everything you have is either the amount of your balance of the token or the max amount of the allowance because a user might have a million die but only allowed 100 to be spent so we will take the allowance so 100 or if you have max allowance but you only have uh 100 tokens obviously we won't try to deposit all your allowance we'll just try we'll deposit the amount the balance you have uh sorry for that um so then we just transfer the tokens this is where the first depositor pays for the approval into the vault um and here uh comes like the interaction with the underlying vote code so since the ball deposit doesn't necessarily take the entire amount you are depositing because it can so the world has a max amount of tokens that it can take so let's say it depends on the on the current depth the volt or the current assets the volts can take this is uh kind of a security measurement we do at the earn so not all votes can take infinite amount of money uh we constantly bump the amount of those uh but let's say a user uh wants to deposit a crazy amount of money they both might not be able to take all the uh all the amount that he wants to deposit but might want to take some of that so we need to check how much it actually took for v2 volts the only way sadly to do this is check the before and after balance uh like we check how much balance of token we have we deposit we check how much balance of token we have uh we we have after that um and then we know how much it actually used so we and also it returns them into shares so this is easier okay these shares that have been uh minted uh from the vault are now uh being held in this contract so in the wrapper um this is like a big difference with the other uh with the other presentation with you a few weeks uh ago uh here you can also avoid uh doing this and just send the shares back to the depositor so you can just use this wrapper as a router uh and obviously this won't be like fully erc 4626 com 26 compatible because you are not behaving as a new rc20 but yeah hookers whatever whatever is easier for you um yeah in that way also users can take their shares out of that and do other stuff but obviously accounting becomes a little bit harder for you as an integrator because you don't know which shares actually came from your uh from your protocol this way all the assures that like all the users are deposited through your protocol you know because you have the shares in this wrapper contract so it's easier also for you to do the accounting um so yeah then uh which is how much was deposited uh this is useful here because we will refund you all the tokens within use in the deposit so let's say you send 100 vote only was able to take 10 so we will refund you 90 tokens and then we mean the new shares so these new shares are actually the vault wrapper shares which if you remember here we assigned uh like the the name for the rc20 so that those will be like you know why die uh 4626 uh tokens um to the receiver so this can be either the message sender or or somebody that the message sender was uh assigning as the the receiver of the new media shares and that's it so then uh if we go back to uh top um so we we went through deposit mint and so withdrawal and redeem is the same basically so on withdrawal you say hey i want uh x amount of uh die i know redeem is hey i want to redeem x amount of shirts shares [Music] so that we draw uh here basically takes the asset so 100 uh i who will be receiving uh yeah we'll be using those uh and who is going to pay for that and redeem is the same the only difference is that we have to call uh first preview redeem to know if to know how much underlying assets those uh those shares that the user is trying to redeem actually worth are worth um then we go to uh withdrawal here at the bottom right uh below deposit and it's practically uh the same so we check actually uh how much um available shares the vault uh can actually basically burn uh yes this repo is public i will share the link afterwards yeah um so yeah so it's either like the minimum so the amount of shirts the user has or the uh amount of shirts the world can take so here's a cool thing which is if you remember uh this wrapper has uh also its own shirts so right now we are redeeming these uh these shirts so this is why these don't balance off because obviously this is this contract is behaving as a near c20 but the thing is the the shirts that this uh contract has are like one two one with the underlying vultures so we actually know that one like ball drop for sure equals one volt share so we can check um so there are two things that uh are fun here we don't need to to have permission for the user to use these shares because it's like in the same contract and also yeah we can map it one-to-one uh with the underlying shares so we don't need to do like approvals for uh the user to be able to root the shares through us so we as the token you remember on deposit we need to basically take the tokens away away from the user and then approve them into the vault and then blah blah blah so here we don't need that we just like boom use the shirts uh because we already have them here um and obviously on the vault it's the same the wall doesn't require you to like uh approve the walls to itself because it's already the the same erc 20 uh contract um so yeah so we check if there are some uh shares available uh to be redeemed uh the world might not have funds uh available uh so this is uh this is also why we need we need to check this um then uh yeah we we kind of estimate uh so this is kind of a back and forth because now here we have the the amount um and here we need to send it back to uh the amount of shares that we can take uh from that another or that amount how much shares is it actually worth so this is why we're using the price per share now so let's say uh price pressure is two so we are trying to uh redeem 200 die so basically we are going to try to be redeeming 100 shares because one sure equals to die um obviously if the vote was profitable if the vote is not profitable and the price pressure is uh 0.5 then 200 i are worth 400 vouchers [Music] and then we do kind of similarly we check on withdrawal as well we need to check how much of the watchers were actually used because the withdrawal function so you say hey i want like to burn this much uh shares or as these matchers but sometimes they all will say okay i will burn you know 50 out of 100 you you try to because i don't have any more uh basically funds to to pull from so i'm not going to give you let's say 100 die and burn all your uh what your shares i'm going to like just born you the ones that um yeah are worth 100 the ones that you used uh this obviously as well uh we only burn the amount of burn shares actually from the user this is the the current vote robber um and if we have any unused uh shares we send them back uh yeah to the user um so yeah that's that's practically it so a few cool things you can build on top here is basically you can add either fees on depositing or on withdrawing for your users you can also do some cool stuff that we have as examples here i will try to quickly go through um so okay so this is the sugar white vault uh basically here you can deposit your watchers or your tokens and you can assign a recipient for the difference in the yield that those shares are going to be generating um so whenever you start showing yield use you set up a receiver and an amount so this can be uh i don't know uh know your netflix or whatever service you you might want to pay if obviously they support or a friend or uh you know a loan uh receiver that you're trying to repay out of the yield of your tokens um [Music] uh and here uh well you do some checks you transfer the underlying amount uh you set some all the balances and stuff afterwards just like take into account that this has not been audited and here we can see uh like an issue um so this line as you remember whenever we deposit into the vault we are not sure that the vault will actually take the entire amount we are sending so the amount we are basically taking away from the user here might not correspond to the amount of shares the volt is giving us back so here you might see that the amount is 100 die but the shares are not equal to 100 live worth of shares because the vodka could only take i know a half of that so basically you're running the users out of half of their uh deposited underlying uh this is the same uh when we do claim yield so on withdrawal uh it's a similar situation so this is also something that you need to take uh into account when interacting uh with v2 volts and and also we interacting with any underlying protocol you need to properly check the code to see like what's uh going on under the hood just that so you don't bubble up issues uh back to your users um so yeah here you set up uh like all the different um variables that need to to the that are needed for the accounting uh you can also call stop sharing yield if you don't want to give free money uh to people anymore um and any uh like like donation recipient or user let's say your friend or whoever can call this function saying hey this is so this would be you uh so your friend will be saying hey claim yield from my good friend that is giving me money uh and it will check the shares it will check here so basically uh let's say when we did the accounting we said okay we deposited 100 shirts these 100 shirts were worth 100 died but right now those 100 shirts are worth 200 died so we check the difference of those balances how much shirts are are worth actually so we say okay then the you uh as a uh like a good friend will only get uh so your remaining shirts will be half because the other those are the ones that are worth the amount of dye you actually deposited and the remaining shares or the remaining die so the extra 100 i that was generating through apy will be converted back into shares and will be sent to uh your friend um yeah i think oh no yeah maybe it will let me check yeah i think it will just send the tokens back but you can sure as well uh you can send the vote shares as well so that your your friend also keeps on uh getting killed out of the the yeah the claim he just did uh if not he would just get the underlying token and it would be but it's okay either way should be good uh unclaimable basically has the similar logic from what is inside here uh the checks like before and after balances of how much those shares are worth and it will return you the amount of uh yes those shares converted to two assets so how much die uh can you claim out of that obviously this only works for uh bolts that are profitable if uh your um the world you are using or the yield token you're using has a negative apy obviously your friend will never be able to claim anything because you just give them give them some lossy tokens and then yeah we have some utility functions to be able to convert back and forth from tokens to shares um so yeah that's it maybe let me check if there is something else that might be able to explain uh here but yeah that's it i think does any anyone of you have any questions let me try to let me get the repo uh so yeah questions just post them in the zoom chat below [Music] so this is a foundry repo um you this is the link for it so storm is uh your contributor uh this is the white star refinery kit we also have uh a repo someone did on hard hat for this thing so this is an external contributor it's also under the storm name we will eventually migrate this uh back so migrate this into the urine uh organization um but obviously as you see as you see we have some like there are these contracts are like examples so they have they are a bit buggy so we don't want to introduce them into our org so um so yeah you can uh use this to shield yield rewards i think is uh what you're saying is okay miss type okay but i think i understand yeah you can basically uh use this uh for any underlying that we support in a vault and you can uh basically have that underlying via yield uh convert that into your token um yes you can yeah you can use this to share the the yield rewards you can also use this let's say you have a ton of funds that are not being used right now you can deposit them into urine uh into a positive uh ipy uh vault and you can get some ap one on that uh while still uh like getting your your underlying um yeah available if you need that for your users um yeah you can also build you know ui iterations on this so basically you can root users to deposit through here because i know you're providing um you know gas savings because what you're doing is you're like getting all the basically the funds into a pool and then depositing all them as one so you are getting the funds in uh a separate chain and then you're reaching them depositing them uh and bridging them back to your users uh and then you see you you can get a cut out of that either through um like the difference between the pps so the the yield when the user deposits and when the user withdraws or just like flat deposit or withdrawal fees either in shares or in underlying you can also do some fun things uh which is uh yeah in a problem um you can you can create a separate token that represents the yield uh because you know i know at all times what's the difference between those so you can also create a separate erc20 uh that is the difference between uh the previous uh pps value and the current pps value and you can also store like a betting market uh on how much apy would that get there there are protocols already doing this um but also you can so pps value is price per share value uh this is what we have let me check where was this uh so here uh the vote has this price pressure so it indicates how much uh one sure is worth uh so let's say um this is and this is expressed in uh like the decimal the same decimals as the underlying asset so in the case of that would be 18 decimals so it will say okay one die is worth x amount of errors or one sure is worth x amount of uh die basically so this might be i know 1.1 so basically what this says is that one share is equals to 1.1 so whenever you want to either mean one share you need to provide one point one die or if you have one sure you can really meet for 1.1 that uh obviously this will hopefully be always an increasing value so this will go 1.1 1.2 1.3 etcetera etcetera so this is 1.4 would be like a 40 increase uh in your token value because now this is uh one point uh for uh that so if you deposited uh when the pps value was 1.1 which was a 10 uh value out of the underlying token and then you are withdrawing at 40 you basically made uh zero point three uh worth of die yes exactly yeah yeah if you deposited when the price so the question was the yield would be one at 1.4 would be 0.4 depends when you deposited obviously because whenever you enter the market is how much you paid for those shares uh so if you paid uh 1.1 dive for one share obviously yeah if yeah if you deposited one yeah except so this is why you need to calculate the difference uh when you deposit and when you withdraws and this is why here on deposit we have all this accounting to know like how much tokens you actually paid for this amount of shares great is there any more questions it doesn't look like it yeah i think we're good if anyone has any more questions you can bring them over to the the discord channel we have a urine sponsor channel uh where you can post all your questions there uh thank you very much skeletor thank you everyone for joining us today we do have another workshop starting in 30 minutes with maker dao on how maker doubt keeps building on die so please tune into that and bring all the questions over to discord if you have any thanks all for joining us thank you so much good day 
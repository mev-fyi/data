off the talk welcome nick awesome can you guys hear me and see me loud and clear you're ready great all right then i'll share my screen okay and this goes to full screen is this full screen or is this am i in semi-full screen it's not a full screen yet but um if you uh if you do that we i'll just give you obviously get this to full screen okay uh what you want to do is uh present instead of uh full screen ah okay okay on the top right okay let's see here the button on the top right there we go great yes awesome all right uh so my name is nick and i am presenting for the fuel team and uh we're doing optimistic roll-up scaling and i'll get into it because it seems like got a half hour so let's do it um so yeah uh today we're just going to be going through our fuel optimistic roll-up sort of what what it brings to the table um what uh utxo models can do in terms of scaling and throughput uh and in sort of our take an approach on where scaling is headed and where we think we can add value to the ecosystem in the space um so just uh to dive right in so fuel is a permissionless trustless layer 2 protocol for ethereum for low-cost high-throughput value transfer and exchange and our main technique that we use is highly optimized optimistic roll-up design and our focus which takes top priority over everything is parallelism so our designs feature uh sort of a an approach where instead of designing for specifically the language down we're designing for where we can get throughput up and uh you know we think we can offer a lot of uh interesting benefits uh with minimal trade-offs using this technique and uh so far we've uh you know we've been doing pretty well uh so before we get into too many details we have one announcement we'd like to make from the fuel team which is that currently with some of our most recent tests uh and thanks to the hubble project and barry whitehat we were able to get 4300 tps for transfers and swaps uh so we think this is a significant uh increase and um it's definitely you know putting us at a a at a high throughput advantage over a lot of different designs um and uh and the main thing to bring home here is that it scales on consumer hardware so uh we even think we might be able to uh validate blocks uh even on mobile phones uh validating these large 4 300 tps blocks uh this is obviously more fun than it is realistic but it's something to to be said and uh just given the way that our validation computation works um so to get into what fuel can do because we i think there's going to be more presentations on optimistic roll-ups and more presentations on layer 2 and the trade-offs so we just thought we'd focus on what fuel brings to the table and what it can do so our current uh design features uh native colored coins so we treat uh eth erc20s and nfts as sort of first-class citizens within the layer two itself um and uh and this also falls into approach that we think layer one is still base settlement layer for all of these assets and base settlement for uh protocol design but we think layer two is a good option to scale these assets and so our focus is to bring you know uh a lot of throughput and scale to these assets and and provide a service that uh that can get you the most efficient scale um the second thing uh that we'd like to focus on is multi-user transactions or partially signed transactions so with fuel we we allow for a trustless uh exchange between two or many parties within a single transaction and you can think of this as offering a way to do non-custodial order book exchange or even other models that don't even feature an order book so it allows for a lot of off-chain settlement and a lot of off-chain exchange that you know you wouldn't normally get if your transactions don't allow for multi-users and multi-tokens so this is one really interesting aspect of using multi-token utxo model um so the next thing that we'd like to go over is a focus on the opera term uh so like uh some protocols like bitcoin we have an open op return for data um and this allows for uh sort of arbitrary data blobs and uh and not only arbitrary in the sense that you can put any data there but also arbitrary in the sense that they can be accessed or validated through our optimistic roll-up contract and deployment ethereum which also means you can build other logic and realities around data posted on fuel so one application you could imagine being used for arbitrary data is something like decentralized twitter where you're getting a sort of signed payload uh you know around uh around data and then that's going on to a uh well eventually into an ethereum block somewhere and uh and what fuel's doing is sort of organizing publishing and making the process smooth and efficient to you know to produce this data so you can imagine a decentralized twitter you could imagine to centralize social networking or just anywhere you're officiating data uh using uh you know ethereum and using um you know our particular technique so this is one really cool uh sort of aspect of what we can get done with with fuel right now the second thing which we think is incredibly important both to the the layer 2 ecosystem and to ethereum more broadly is hash timelock contracts um so ethereum has actually been able to to do these since um you know since mainnet uh was launched and hash timelock contracts are a very simple mechanism uh to allow for cross-chain atomic swaps to allow for immediate withdrawals out of different d5 protocols or different different layer twos and they allow for migrations as well so they're a great tool for migrating from one version to another uh say your own roll-up so to talk about this a little more you know the hash time lock design is quite simple it just allows for parties on both sides of a blockchain reality so say one party on player one and one party on layer two to be able to exchange in a way that allows the party on say layer two to easily exit to layer one and you're doing that with just a hash and release function so it's very simple very simple contracts it can be made relatively efficient and allows for bridging of these different protocols you could also imagine bridging different layer ones so going between um you know say ethereum and going between avalanche or going between ethereum and going between x die hash time locks provide a really great way to do this and you can also imagine going between different optimistic roll-ups so going between say fuel and optimism or optimism and arbitum or arbitum and fuel so hash timelock contracts give us a lot of utility and they allow us to sort of jump chains where liquidity is available so we support those natively and we support them across every token that we have um so the next thing that fuel has a pretty big focus on is mass token air drops so fuel supports pre-signed transaction chains and this allows us to actually form interesting pattern using our eight input in eight output transaction formats so essentially you can start with a single input in say a deposit or a large you know amount of liquidity from a single input or deposit and then effectively we can use that single deposit in a transaction chain um and sort of merklize that or it's like a merkle tree and pre-sign uh trees for dispersal such that you know users in the hundreds of thousands could be dispersed a transaction and and you would only need to pay for the transactions that are getting picked up so this allows for a unique pattern of dispersal and pickup for mass token air drops so we saw something similar with the uni-swap airdrop which was really awesome and this is sort of an extrapolation on that and um you know a more unique or efficient way to to do a similar thing um and per pickup you could imagine with a merkle tree of several depths um a single pickup might cost three or four transactions but in the end everyone gets dispersed their tokens and it's all relatively uh efficient um we've proved this out in our benchmarks which are available in our docs so you can you can check that out there so going on to our next thing so pre-signed transaction chains once again um we also allow for an interesting pattern uh where pre-signed transaction chains can be used to do things like digital uh subscriptions and so effectively you can assign say 12 months of worth of transactions ahead of time using a single output and then only under certain pretenses or under certain circumstances those transactions can be uh triggered on chain and then dispersed to uh whoever you're subscribing to so this use case was referred to in the reddit challenge and it was also something you know we were able to to achieve quite easily with pre-signed transactions um and so this is just another use case for having this kind of this kind of tech inside of our roll-up as well one other interesting aspect to having an eight input in eight output transaction format is that with um if you want to approach something like a privacy mixer you can do all sorts of interesting mixing patterns and we already have a project that's researching experimenting on this um largely because as well uh bitcoin is just so damn limited uh that in order to experiment with the utxo model we're sort of the next best thing for them um and so uh you know you can imagine scenarios where you want some level of privacy and obviously you're not going to guarantee full privacy you're not going to guarantee um you know something like uh like a bulletproof kind of level privacy what you will guarantee is that you know you're making it much more difficult for say your friends or bit local businesses or other things around you to be able to see uh you know into your transaction history easily and i think this is um you know one great aspect of having this as your base transaction layer is that you can kind of get this sort of activity done so in terms of our timeline uh and how much time do i have left do i have 15 minutes left uh yes you do okay okay just uh let's check in on that um so in terms of our timeline right now for fuel and you know our optimistic role of releases right now we're targeting mid q4 for version one mainnet launch um and that includes all of the uh pre-signed transaction tech um some really nice deposit and withdrawal tech as well um lots of all the different features you saw today and and basically we'll give you know it'll open up the field a little bit for our type of execution model and uh and sort of uh yeah add add more to the uh to the roll of space so that's our current mainnet launch and it sits around 500 tps in terms of throughput um which is still pretty good considering you're not using any new key formats um so it's just vanilla ethereum keys um and it really uh it should allow people to to get a taste of you know what fuel is about and why we're taking the approach we're taking um so that's our current current mainnet launch uh timeline is around mid q4 so it's coming up um our next uh major uh major drop will be the end of q4 so this will feature our version 1.5 net so this is where we'll be able to really turn up the heat and kind of achieve our highest throughput that we can think of right now which is 4 300 tps and so you'll see sort of our compressed transaction formats the use of bls um and once again like you know thanks to the the hubble team and barry for uh all the work they've been doing on bls it's been fantastic and um you know i think we're looking to make sure we have some kind of standards around that key format so that every optimistic roll-up can benefit from the same kind of p format and we can kind of get rid of those signatures so that's going to be our end of q4 and then q1 2021 we'll have our specification lined up for um our virtual machine uh which i'll talk about in a second and then and then lastly a test net for our version 2.0 release so that'll feature hopefully we can hit all our targets a new virtual machine specification for fuel which provides some nice abstractions over all the things we want to get done in the optimistic roll-up context as well it'll also feature you know how we get it done in parallel with mass throughput and in a sustainable way so hopefully we'll get to that test net release so long as we hit all our targets and don't have any huge major setbacks um so just a a small uh word on our version two um so currently our version 2.0 is focused on utxo based ethereum style smart contracts so we're still finalizing our specification for a virtual machine here but effectively it'll provide one of if not the most performance options for doing parallel transaction verification and particularly without global state so we've constantly made an effort to avoid global states and global state serialization and so this really gives us you know a lot of opportunities for um you know really efficient really performant design patterns uh and you can look at john's work on strict access lists uh and utxo's uh smart contracts that's the link below there if you want to read more about what we're what we're doing there um you know we really think given that the space has a lot of uh or will have a lot of evm oriented and account oriented options for people to uh you know attempt to scale their work and their their efforts um still using ethereum as a base officiation layer that utxo based utxo based uh transactions will provide you know a huge throughput benefits and and hopefully we'll be able to to really demonstrate that with a full virtual machine basically without losing pretty much most of everything that everything everyone loves about the evm and about ethereum but with also providing uh you know all the benefits of parallelism you know with minor trade-offs so um just to talk about uh you know where to find us so our twitter is fuel labs underscore website fuel.sh github and a discord link there um so yeah we uh we purposefully left i think quite a bit of uh time for some questions and and to go back and forth i think we're we're pretty curious to see if you know what people want to ask in terms of questions and how we're doing things and yeah we can probably start that nick um awesome i think from our side now given uh the slight delay in the stream being looked at our audience right you have uh uh uh do i come in with a question so i'll urge all of our audience to uh send questions um as we are kind of talking uh in the meantime i think what would be super helpful for us is that we'll get wolves is all kind of started on just kind of comparing fuel to uh the other um roll-up approaches kind of how do you think about uh what the trade-offs are and sort of what's good or bad about uh the trade-offs for each of the other solutions out there and we can just do that until we get more questions in yeah for sure so um you know from the beginning we uh decided to go the route of the optimistic roll-ups um you know our expertise is more around uh fraud proofs and optimistic roll-up design uh and that's thanks to john's efforts on the team um and so that's the the first thing is you know we're an optimistic roll up not a zk roll up um and i'd say the main thing we think about there is that um we like the properties of the fraud proofs and the one-week delays uh and we like those trade-offs over um ck related trade-offs um and we think we can really achieve you know high throughput and block production um you know without really losing much uh for security and for user experience and so um you know and thanks to the efforts of barry and you know the foundation we get to you know benefit from aggregate signatures and aggregate signatures allow us to get rid of that troublesome signature data which really is where you're going to get the maximum amount of savings um so for us yeah i think we're you know our main focus versus the zk roll ups is is that we focus on aggregate signatures and we don't mind the trade-offs of fraud proofs we do think they're as or more secure in that sense and once again you can do block creation validation on easy consumer hardware so it's really really accessible and democratized and then in comparison just to quickly touch on it from the other optimistic roll-ups i'd say our main focus is that um you know the other roll-ups right now are focused on servicing what ethereum currently is and i think that's awesome and we we need that kind of work um but for us we're taking sort of a different approach where um we think we can add a lot of benefit by showing people sort of another generation of what's possible and potentially trying to approach the problem from bottom up so approaching it from parallelism up versus you know um code and compiler down uh to to what's possible so that's that's more or less i think the differentiating factor for us um and uh you know it's kind of uh it's a different kind of work and it's a different kind of approach but once again we're really happy with the way the ecosystem is developing and and uh you know we're super excited for all the launches coming up i think the space is really developing and we'll have lots of options awesome um so a couple more questions that have come in so what can i just start asking them until we're at time next question is what other features besides uh tps are most important when designing a world service and sort of what other things should should we be excited about so i think when designing these rollups i think you want to really focus on your use case and what we need from the user perspective down so you know if the user needs cheap transactions and they need to be non-custodial and you know the whatever the user needs we should aim to provide them with and i think you know we have a lot in the ecosystem uh especially if you think about stable coin access that we have um to me stable coins and lending protocols are still uh the hugest value add we have in the space and i love all the fruit coins and everything it's great but if we can really scale and provide a lot of throughput and exchangeability in various formats for users particularly of those stable coins i think that's like one of the greatest benefits we can add to the world so for me i would just say with rollups you should design them around specific use cases and try to target them specifically to what users need um and and and it's that simple and if we're if we're making that process better then we're doing our jobs yeah no it's great um i think this kind of sparks another question and really fits nicely into it is if you're imagining a a world where there are use case-specific roll-up services how do you kind of think about solutions um that help you do cross thereto transfers and kind of anywhere from frameworks to best practices or i should want to think about that and how do you imagine that world hanging out yeah yeah so i think um i think that's going to be one of if not the most important questions uh over the next year or two is what the hell is going to happen with liquidity and where is it going to go and what is it going to do so i think we should look at ethereum layer 1 as still base settlement layer for issuing assets and for creating your protocols i still think it gives you the maximum amount of options but in terms of having liquidity on different systems i think we should be open to once again you know really available hash time lock contract swap systems between these different systems so that we're not too locked into anything this goes for being locked into not only different roll-ups being locked into different versions so we will need easy ways to transit between um different layer twos and layer ones um and so you know htlcs provide basically all we need and i think even state channels might even give us even another level of of speed there if if we can do it right so i think hash time lock contracts are um just a they're they're a way to free us uh from these liquidity questions and we can just get on with experimenting with you know where development's going to go across the different layer twos and layer ones um because right now it's so early that if we lock up a lot of liquidity on anything i i i it'll either want to get off or it'll have to get off eventually so i think we'll just touch and go and we'll see what you know things like hash timelock contracts can bring to the table yeah got it and now we have another one and uh if you like if you don't have enough context i'll ask samuel to uh expand but if you do i think you'll be great for the audience to get some context too and the question is uh what do you make of the capital efficiency argument that was put forth by startware um and kind of what do you think about that and for the audience like if you can also just tell us what that uh argument is livestock where if we're answering that it'll be great as well yeah i i have to say i just briefly skimmed that uh so i don't i don't know if i have a a huge depth yet um i just saw that today i'm currently off twitter so um no worries i'm getting off the hype uh you don't have to uh directly answer that i'm saying we'll follow up with a different question there and the question is how does delayed finality affect possibility and how long would it take for fuel or any other layer to to kind of help solve this right so so not to drag again and i seem to keep talking about htlc's unfortunately um but yeah with the optimistic roll-ups the trade-off is that you can do smart contracts you can aggregate the signatures and you can get all the throughput you want you can do it whatever way you want and you can specif you can do that on consumer hardware generally and without needing zk proofs in any way so you get a lot of benefits the trade-off is is that there's a weak time delay to remove your assets if you don't have regular access to htlc liquidity but the thing is to exit these chains if just you just need any party on ethereum or any party on any other layer one to be sitting with some liquidity and running a liquidity provider which they'll make fees for and that will be able to um you know basically solve that issue uh in my opinion i think it sort of optimistically solves it um but it's a fantastic solvent it sort of gets the job done from what we can see and we'll just have to see how it plays out yeah awesome well nick uh thank you so much for uh your amazing talk and answering all of our questions if you uh i'm sure there's a lot more questions 
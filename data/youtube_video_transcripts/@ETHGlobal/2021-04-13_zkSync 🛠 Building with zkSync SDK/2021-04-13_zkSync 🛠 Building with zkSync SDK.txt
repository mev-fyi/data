all right well welcome to uh are people like yeah hi everybody uh hello welcome to our workshop with angela liu we'll be going over zk singh sdk and i will let angela take it over and go on with the workshop thank you very much hi everybody i'm angela and today i am joined by igor and stoss who are going to be in the chat answering any questions that you might have along the way and today we are going to do a bit of writing and today we are going to do a bit of a zk sync 101 and basically everything you need to know to be able to build on the zk sync sdk but i did not come empty handed i brought you guys first a little surprise kit so in 2021 in may ck sync will be launching swaps on mainnet which means the trading of fungible tokens the atomic swap and limit orders coming with swaps will also be nfts coming to mainnet and we will support the functions mint transfer and atomic swap from layer 2 as well as the withdrawal to mainnet and then lastly we have the ck sync 2.0 coming to testnet in may ck sync 2.0 is our evm compatible zk roll up we built a snark friendly llvm engine so this means portable salinity code and ethereum wallet native support and this will be coming to maina in august we are aiming for virtually no difference between the zk evm and the evm and if you want to know more about how we built the zke evm tune in to the zk summit and hack in this hackathon during week three in october we will also be introducing zk porter to mainnet as part of zk sync 2.0 this is our engine for mass adoption and we are aiming for 20 000 plus transactions per second with even more security guarantees than that of optimistic roll-ups we just released an article on twitter today on our medium but if you want to know more about giving in a presentation form tune in on friday april 16 which is this friday so let's begin today we're going to first take a bird's-eye view of our role of architecture and then we're going to talk a little bit about how our rollup communicates with mainnet and then we're going to go over our initial user file talk about some functions that are available for you in the zk sync sdk and then we're going to talk about a fun topic called transaction patching but before we get started i wanted to introduce to you a few tools that you're going to need to everything that you're going to need to become an sdk sync developer so the first tool that you're going to need is our sdk docs here you can see that there's javascript and typescript libraries as well as request next is going to be rck sync github i have highlighted three folders that you're going to be freaking frequenting the most and are going to be more most important to you the contracts docs and the sdk these two files the zk sync file and the protocol file are going to be most frequent frequently visited for you and the most important as well so let's begin let's talk about the ck role of architecture the zk role of architecture is split into two parts the first one being that of the ethereum and these are our solidity smart contracts deployed on mainnet which are managing your user funds next is going to be the roll-up side and this acts sort of like a side chain that produces roll-up blocks and executes pull-up transactions currently this side chain is secured by the z-casing server but will soon transition to proof-of-stake via the ct sync token next let's talk about how mainnet and the role communicate so we have zk sync servers always including transactions into google blocks and once included these funds from your transaction will be usable in one to two seconds once there are enough transactions to fill a block we call the function commit loss and this is when the smart contract receives a commitment the transactions have been executed in layer 2. so the server is receiving these committed blocks and the server starts generating these proofs right upon receiving the block in parallel so this means that there are 10 committed blocks then the server is generating proofs for 10 of those blocks in parallel and once these zero knowledge proofs are generated we will call proof blocks and here the smart contract receives the proof that all transactions in layer 2 are correct next we'll call the function execute block in this the smart contract updates its internal state with the information received in the commitment step and at this point transactions are considered finalized and these three functions can be found in the z case file that i showed you earlier so next we're going to talk about the initial user the user first has to start by sending funds to the smart contract by calling deposit to sync from ethereum but if you're depositing an erc20 token you have to remember to approve the token by calling approve erc20 token deposits and you can find these two functions in the sdk folder in the wallet side so if this is successful then the smart contract will admit an event called deposit and the zk string server is always monitoring monitoring ethereum for events so when the zk sync server sees this deposit event they'll create the priority operation and we'll talk about what that means a little bit later so now in layer 2 the user balance is increased by the token amount for the specified token but there's a little caveat to this if you're if this is your first time using zk sync player 2 you first have to initialize your account by calling set signing key and you only have to do this once this function can be also found in the sdk folder in the wallet file but as i said this will be decorated in ck sync 2.0 as we come up as we will support ethereum wallets natively with ecdsa signatures so let's talk about functions so as i said we would come back to priority operations and there are two types of priority operations deposit like i talked about and also full exit and full exit withdraws the full balance of one token from the zk rule this function is used in case l2 transactions are being censored by the server and although unlikely this is for the ultimate security and if this still doesn't work and the server is either not working compromised or is creating blocks that are ignoring priority operations such as your full exit the contract will enter exodus mode and here the contract will freeze all funds and all users will be able to withdraw their funds next are the basic operations which are your favorite because they are cheap layered two transactions there are three types of basic operations the first type is transfer and here you can send each or erc 20s from one layer to account to another then there are two types of draws the first type of the jaw is a normal withdrawal right where you can just withdraw your east or your erc20 tokens to mainnet but the second type of draw is called forced exit and this is used when you cannot set the signing key for example if your address is that of a smart contract and here to withdraw you would call forks forced exit rather than withdraw lastly we're going to talk about batching batching transactions means that these transactions will either succeed together or fail together and this can be analogous to flash loans and some creative use cases include paying the transaction fee in your erc 20 token but we're going to focus on the bitcoin grants case study so the user starts by picking the grants and then after the user then it finalizes the grants that they want to donate to they move to zk checkout then behind the scenes all the magic happens bitcoin grants batches all these donation transactions sets the signing key and pays the fee for all the transactions at the end wow so smooth uh do you have a link you can provide on the summit you were talking about um that has not been set yet but it will be set as week three in the hackathon okay thank you hi um i was wondering um so stanslav thank you for asking some questions but i'm a bit confused now um so can we deploy uh smart contracts on to uh zk sync using um your zinc language or do we or is that not possible until uh casing 2.0 yeah so zk sync 2.0 will come with full smart contract support for zinc and solidity so we can't do that jessica and no and i saw on the documentation for zinc that there's something already for um the ring to be uh main there could be a test net right uh yeah i will clarify that uh so basically i think is two uh related uh but very different purp or projects so the first version of sync was during incomplete and uh it had uh a lot of limitations uh and we actually had a separate test net in which you could try to write contracts in sync and deployed to that net but uh it never got to production because uh we found a way to make zinc uh fully during complete and moreover to transpile existing solidity code so we decided to not continue the previous during incomplete version and focus on the turn complete version instead which will be available in may [Music] thank you for your answer and we'll get early access to the smart contract functionality so before um the hackathon ends uh no i don't think so once uh testnet is ready it will be open for everyone but to be a targetingly so we have some questions from youtube one of them asked if exchanges are planning to make direct deposit direct withdrawals to zk rollups and yes we are partnering partnering with many exchanges so that users don't even have to go through l1 they can just directly transact from l2 and you or did you want to answer about gas efficiency from solidity or first question uh let me see um i'm not sure if i understand the question i hope i i i understand so if the question is about if there will be any difference between solidity or zinc on layer two then the short answer is uh either no or it will be very small because the main price from contracting executions comes from public data that is published on zikiro so it will be just this is the same for both literacy and zinc if we understand the question correctly and regarding the starks in the future i believe it is not in the near-term future but maybe it's a very maybe like in the long term future we will transition but the cool thing about how we're able to um support the zke evm is the fact that we figured out recursion in the plot system that we use and then the other another question is currently is it just doing payments and yes so the the creative avenue here is the last slide that i mentioned batch and transactions and you can do up to 50 which is the amount that can fit into a bill um hey can i ask a question sure um so how does how does multi-signature wallets work with zk sync like would it be the exact same way as in ethereum um i think stars can answer i think there are two parts and answers of your question well first part is that uh zk sync actually supports natively multi-six but they're like n off n so you need all the signatures for the multi-stick to send in transaction and still already supported they just send transfers and if the question is about more complex multi-six then i guess they'll be available on they will be available when the zika sync 2.0 launches and they'll be just the same as the ones on layer one because the smart contracts will be supported in just the very same smart contract so cool thanks yeah i asked because i couldn't really find any reference on how to work with multi-sig wallets but i guess it's somewhere that i didn't find cool so there's a question asking is there going to be more native languages for writing smart contracts on zk sync one that might be if more efficient than eb importing and yes so zinc zinc currently is non turn complete but in zk sync 2.0 it will be turn complete and it is designed after rust and it's designed to be a lot more safe and a better user experience than solidity it's also specialized for generalized zero knowledge proof circuits another question from youtube will zk sync 2.0 support l2 contracts calling functions on l1 and vice versa for instance on optimus and l1 can call lt functions immediately but l2 has the delay time to call l1 um just want to take that one uh yes there will be a layer one layer two interoperability uh but not uh in the first version that comes in may uh the first version will come without a layer one layer two interoperability and it will be a bit late the next question is asking where the zksync servers are and if they're secure um i'm not sure where exactly they are uh yeah so right now the casino server is managed by mater labs it's been hosted in a cluster it's pretty secure so and actually the architecture of the casing is kinda indifferent on where server is located and whether it's cured because even if the server becomes compromised uh their knowledge proof uh just will not begin generated or it will be incorrect uh and will be declined by the sync smart contract uh on layer one uh in the future however uh there will be a fully uh distributed uh model with multiple validators and proof of stake algorithm right so we're going to be doing progressive decentralization in respect to the z-casing service the next question is given only the payment sdk is available for the hackathon what kind of tools would the zkc team like to see in particular are there any sdk reference guides you could link us to so first you can check out the prizes link um that maybe catherine could sign in the chat and here we listed some cool tools that you could use that we would like to see built and like i said the the best sdk reference guide is the first link that i said in my presentation and you should be able to find it by going to zksync dot io and going to the docs section it should be developer docs you should be working um another question from youtube what what's the usage of the z casing token so we're going to use the zk sync token to secure our network through proof of stake so the validators in um in the zk roloff side so in the future z casing 2.0 will become split into the zk roll up side in the ck porter side and basically the zk sync token will be used for proof of stake another question from youtube kind of confused what tech we will have access to for the hackathon where should i look at so you should look at the sdk it has very detailed documentation um about the kind of fun learning about how zk sync works and things that you will be able to build on top of ck sync and also i have listed in the prices section some examples of tools that we built such as the zk wallet sdk link which generates payment links um we would really like to see mass a tool for mass payments or multi cigs that would be really cool or we could do integra um we're looking for cool integrations such as what bitcoin grants did another question rck sings bridges similar to optimisms and arbitrage and that in the beginning there will be a centralized bridge but there's a plan to decentralize going forward or does zk sync even need this trusted bridge software um igor do you want to take this moment can you repeat please so they're talking about how zk sync if ck sync will have bridges similar to how optimism in arbitrome has centralized bridges or do we even need this bridge to um that one uh i'm not sure if uh i'm ready right now to provide technical details on that okay cool so we will take a rain check on that question um the next question i want you to say that we will okay so but there are some breaches which only require avm support so if well some bridge wants to you know like uh be created between the key sync and any other system with evm compatibility i think it will it will be possible since zke evm is avm compatible cool so the next question is from youtube it says i think you answered this question but i missed it will there be an official erc 721 contract for zk sync coming soon yes so nfts will be on main net early may and we will be supporting mint transfer and atomic swap on layer one and also withdraw also withdrawals to layer one um i might have missed the book mint transfer atomic swap on layer 2. um is there any concern that open public smart contract publishing on zk sync 2.0 result in unmanageable proof generation time is this a linear or exponential relationship amount of smart contract logic versus generation great question so um what so if you look back at the slides i talked about there's three steps there's commit blocks and then there's proof blocks so once blocks are committed by the zksync server proof generation starts right away and each time a new commitment of a block is received it's going to start right away so these will be in parallel so if there's 20 or 30 role commitments all together they will the proof generation will be in parallel and then they will start so um yes it will be another question from youtube um will our experience playing around with cksync on this stage be useful when evm compatible zkc 2.0 comes out good question so i tried to keep this presentation with as little deprecated things that we're going to remove from zk sync 2.0 and so everything except the set signing key in this presentation will apply great uh so i don't see anything else coming up on youtube if you guys um have any more questions uh please we have a couple more minutes like left so feel free to ask anything take the mic yes and um while questions are trickling in i was just taking a moment to promote our zk porter which is our exponential scaling engine and we just released a medium article detailing it today um you can find on our twitter or our medium and um also we will be having the ck porter talk on friday and then the ck evm talk about how we created generalized smart contract circuits um i'm sorry general zero knowledge proof circuits um called the zke evm on week three of this hackathon during the zk summit and i can also post the discord link but um if you have any questions oh um there's a question um where events emitted by smart contracts posted mainnet or somewhere else right so um smart contract events you should be able to see just like final because they're on mainnet uh let me find rc art discord link i will put it in the chat if you have any questions feel free to join and ask here and also there is a channel in the youth global discord will v2 have a limitation on the size of the code of deployed contracts afterwards and has this limitation um e-ward you want to take this one i uh i'm not sure right now uh it's uh there is like no real uh limitation on the code uh size itself uh other than like the storage capabilities of the node but maybe there will be some technical limit uh just to not allow unlimited code size and prevent the case of abuse but i don't think that it will be uh some kind of limit that will affect a lot of users awesome any more questions before we wrap this up we still have a minute or two left otherwise i'll uh direct you to the to the discord now or never all right seems like oh we actually have one more here do you consider using in clouds t-e-e-s to ensure the contract the correct l2 execution of con contracts um i didn't quite catch what you said all right i'm just reposting it um i do not know what that means you are do you know i'm not sure as well i'm sorry it's all good all right well but um the lth execution of contracts will all be verified through zero knowledge proofs great so i'll just invite everybody who has still questioned or if you want to expand on any of these topics please go to the discord channel there's a specific sponsor channel specific for zk sync and the whole team is there to answer your question and support you through the hack um and i will be more than happy to support you so very huge thanks for everything angela and igor and stanny uh it was it was a really great workshop and uh i really appreciate having you great see you guys on friday for the zookeeper 
no worries um yeah go you can ask your question don't worry i was just asking i was just asking how strict is the time limitation like do i ever one hour strictly or yeah you've got about an hour you got about an hour okay cool um hello and welcome everyone to the ave intro workshop flash loans and credit delegation in depth joining us today is emilio who will be taking us through the session and just a last quick reminder to everyone to join or create a project on your dashboards check in one has been prompted and we will be reminding everybody about their check-in today if you're struggling feel free to reach out to myself or anyone on these global team and with that i'll pass it over on to emilia who can introduce himself and get the session started yeah sure thank you very much emily thanks global okay so guys um very honored to be here talking about other version 2 we are very excited about everything that we released in the last few months and everything that we are going to release in the upcoming months and years and especially because what we built until now is specifically designed for hackers builders and integrators to be able to build new tools for the the this uh new financial primitives that uh essentially are what we what we uh define so uh who i am i am emilio i am one of the core developers of avi um we built uh together with the dev team of both the protocol the on-chain layer and the front-ends and everything the tooling documentation everything that is part of the other ecosystem essentially um that's been quite a ride since we started we started in january it's more or less one year the protocol is already i guess if you guys are participating you already know what abby is and how it works but just to give a quick recap i mean the protocol holds right now more than 3.5 billions of assets it issued almost 2 billions of flash loans and very there are new users coming in every day and it has been very exciting to see how the protocol has grown in this past year so uh what i was thinking for this session is essentially to introduce a little bit like what the functionality is and um specifically the flashlight version 2 and the credit delegations are how you guys can use them to build new stuff that it hasn't been built yet or to improve whatever we have already and on the on the market and as a tooling for the other ecosystem but even for other protocols really and at the end or in the middle we will see like going forward we can think of i prepared a small exercise for for a flashlight to use flashlights version two and the exercise is unfin unfinished so we can think of maybe having a live coding session or i will explain like what the example is how i i i thought it and now i expect more or less to be built so you guys can experiment a little bit with uh the the tool and there is a small price at the end i will i will describe more in detail okay i will start with the does someone have any question just at the beginning i'm asking at the beginning so if someone wants to see something specifically or if they have any question whatever you can already start asking in the meantime we'll start sharing the screen um can you guys see the screen perfect okay amazing okay so uh the whole presentation is about like i was saying before flash loans version 2 and create delegation small integrate is more introduction what are flashlights flash loans they were defined at the beginning when we introduced first introduced it at the at the beginning of last year they were defined as the schrodinger loans it was kind of a fine uh funny definition because essentially they are loans that exist only a when they are actually executed otherwise they don't exist in any way in the sense that there is no trace on chain why this definition is because essentially the liquidity leaves the protocol a at the beginning of one transaction and then it returns the protocol only if the flash run is successful which means that the same amount plus a flashlight premium is returned to the protocol otherwise the transaction is reverted so it's like that particular action never happened essentially um the first iteration of flashlight in the other version one was essentially allowing to flash borrow eth and one asset one asset at time for each flash loan and it saw uh very very interesting usage during uh the course of the year like right now we have more or less 1.8 billions of flash loans generated from other version one we have many integrators uh we have through combo that essentially is a d5 primitive aggregators allows you to aggregate multiple d5 protocols at the same time uh with a very intuitive ui we have the we have d5 saver that essentially allows you to protect and use your defined positions in ways that are often not allowed directly within the protocols for example you can leverage the leverage you can uh repay depending on the price of your collateral to save your position and and so on and it mostly uses other flash loans in the in the background then we have collateral that is on other platforms to aggregate multiple flash loans from different platforms and so on uh you probably guys have seen in the past uh like at the beginning one of the most frequent usage of the flashlights was actually to uh to exploit some protocols uh we have seen like the flashlight exploit on visa decks like one year ago more or less we have seen over the course of the summer many flashlight exploits essentially of protocols that allowed to allowed some particular manipulations with uh liquidity provider shares on different amm for example sushi swap or uniswap there were a lot of integration uh service that were launched during the summer that were exploited this way but at the same time flash loans usage grew a lot like and is right now uh very pervasive in the sense that many tools use the flashlight under the hood we don't even notice that but they are used to actually make our life easier so what we did for flash on version 2 is we built on the great foundation of flashlight v1 and we when we designed them we were thinking of possible ways to improve uh the initial flash loan implementation so one of the most obvious obvious ways for us to improve the functionality was to allow to flash borrow multiple assets at the same time right so instead of a flash borrowing one asset at time like it was happening in flash from version two sorry version one in flashlight version two you can actually flash borrow multiple currencies at the same time so you need to catch for example an arbitrage opportunity that requires i don't know um wth die and ustc at the same time you can use flash one version two uh to build that um emilia are you supposed to be on slide number 10 or are we going through these slides right now with this just a quick i'm moving through the slides i don't know okay the there's the screen's static so um i'm sorry i'm sorry yeah sorry i wasn't sure yeah there we go then there we go actually move it to the slider number three give me one second okay great yeah we're on number three yeah sorry i thought you were giving like an introduction and then um let me try this way okay can you see now like perfect great perfect thank you okay yeah but there wasn't actually written that much on the slides that you don't usually write that much on slides it's just um a few like reference points for the for the discussion so okay so like i was saying uh like ability of flash borrow multiple assets at the same time is one functionality another functionality that kind of required a protocol already a redesign on our side was the that we choose to actually pull the funds from the entity that was receiving the flashroom rather than push in flashlight version one the entity that was receiving that that is a smart contract of course it was pulling the funds uh sorry pushing the funds to the protocol at the end of the transaction so imagine that this particular contract would flash borrow one if it would return by pushing the funds to the protocol the one if so that the product would could check if the funds were actually returned for flash on version 2 we actually moved to a pool approach so instead of adding the the protocol [Music] instead of having the protocol expecting the entity to return the funds the protocol tries to pull the funds from the entity which means that the the entity needs to approve the protocol to be able to pull the funds this also of course has another um uh consequence and the consequence is that in abe version 2 we don't support native eth instead we replaced native eth with wrapped if so that everything is treated as a erc20 and we can safely apply the pool strategy to all the assets deployed supported inaudible why we did this is that this allows the flashlight compared to flightcheck one version one this allows flashlight version two version two to be executed in the other protocol itself this might not be that that of a big change at the beginning but this actually makes for ave makes a huge difference because it gives a lot of different capabilities to the flash loans since within the flash mode itself you can operate within the protocol so for example you can flash borrow from the protocol to liquidate a position in the protocol itself that it's something that it was not possible in other v1 or for example you can flash borrow in flash borrow from other b2 and then use that flashbar add funds to create a leveraged position or redeposit in our version 2 uh all within the same transaction and all using the other protocol this before was not possible you to do something like that you needed to use a flashlight from a different uh protocol for example the ydx or unis whatever and this capability of executing the function the the the flash loan and interact with the protocol in the same transaction goes great with these are not at this other addition that we did is that you can eventually avoid repaying the flash loan in the same transaction but actually create alone on the color of the flashlight which essentially allows you to automatically create a leveraged position you know at the end of the day this is not actually a flashlight it's a normal loan where in instead of uh depositing collateral first and then getting the the money you first get the money and then deposit the collateral and then you open the position at the end right this is the sequence of evidence essentially and this might seem like a small change but it's actually a huge change because it gives to the other protocol a native leverage capabilities which means that with only one transaction you can automatically leverage how how would an automatic leverage work imagine that you want to leverage ezh for example for 1000 die then you can and you want to leverage 2x then you can for example flash borrow another 1000 die using the 1000 die of the user plus the flash borrowed 1000 die to buy 2 000 dive worth of it in the same transaction of the flashlight deposit the 2000 die of it and open it open the 1000 die debt at the end then you have a 1000 dive position debt and 2 000 worth of it in the protocol so you essentially you leverage 2x it's very very straightforward but also also very powerful and the other functionality that we add that kind of connects to what we will discuss afterwards is the the flash loans can also be create delegated so this last capability of not repaying the flash loan at the end of the transaction but actually create a loan you can do on behalf of someone else so you can create a leverage leveraged position on behalf of other of another entity for example a smart country and this creates a creates a whole lot of different possibilities of experimenting with flash loans that we will look in more detail afterwards and also you can ask questions uh later and we can dig in more potential use cases so you guys have more ideas to be able to create something new and interesting for this hackathon so let's see how it works like in detail uh there are essentially two steps to be able to ex to create uh and to execute a flashlight uh you need a smart contract that can be called with that implements a specific interface and that can be called through flash loans and then you need an opportunity okay because of course like a flash loan only makes sense if you have a an opportunity to catch and this opportunity is profitable otherwise the flashlight is i mean can still be used for other other functionalities like we were saying before the of the leveraging but if you want to use a pure flash loan you need an opportunity to to catch essentially it can be a liquidation can be an arbitrage um it can be moving funds between different protocols can be whatever but it needs to be an opportunity to catch that actually makes the flash one profitable so the the first uh requirement for a flash loan is that you write a specific smart contract that implements a specific interface this interface is actually very simple and it's just one function this function is called execute operation execute operation essentially you define this function within this function you write the code to be able to catch this particular opportunity that we were discussing before and at the end of this execute operation you essentially enable the protocol to pull the funds from the smart country the step two is once you have the contract that implements the execute operation at the right moment when the opportunity presents itself then you can call the flashlight function on the other protocol specific specifying the the contract that you would before using the execute operation as a receiver of the funds and when you execute the transaction if everything goes correctly the the opportunity will be taken by your uh contract that you wrote in the implemented execute operation and then you will receive a profit profit that is a the essentially uh the amount that was used for the to take the particular opportunity that we were discussing before minus the amount that was borrowed minus the premium that is your profit so as i was saying before what we can build with uh flash conversion two uh essentially we can build all kind of tools that require funds and that are essentially time sensitive and then and require some specific on-chain opportunity to be to be code so for example liquidation bot we all know more or less what the limitation is is whenever on a protocol like abe that is over collateralized by definition the value of the specific value of a certain collateral drops so that some particular position become a uncollateral undercollateralized sorry so when they become undercollateralized what happens is that there is an opportunity to invoke a specific function on the other protocol but more or less all the lending protocols or protocols that involve lending some way they more or less work all the same so i refer to ave but the same concept works compound works for dydx maker and all the others that in a form or another involved landing so when a particular when the market goes down so the value of a particular collateral drops there will be position of users that are unable to sustain essentially the amount of funds that were borrowed which means their position is under collateralized when it's under collateralized usually protocols give you the possibility of call a cell of calling a certain function to repay the debt of of of the user on behalf of the user and in exchange take up a certain amount of the collateral plus a liquidation bonus so the amount of collateral that you will get that you will get is essentially equivalent to the amount of debt that you are going to repay plus there is a bonus that covers the the costs of selling the collateral for the asset that that was repaid and also the uh covers the profit of the liquidator right so the liquidator is incentivized to call this function and keep the system always always over collateralized now before flashlights to to build a profitable liquidation board you would need capital right because to repay to first be able to repay the debt you need to capital to repay the debt then you are essentially buying the collateral a discount and then you can sell the collateral plus the bonus for a profit right so before the flashlight era if you wanted to write a liquidation board the first requirement that you had was to to add capital okay with the flashlight you don't need capital anymore you just need coding skills so you can go on ave for example create a liquidation bot that essentially receives the funds using a flash loan then repays the the debt receives the collateral sells the collateral on uniswap then takes uh the amount that was uh received from uniswap repays the flash loan and transfer the profit to the liquidate right this all of this happens in one transaction and you don't require any capital which if you think about it is kind of mind-blowing because it allows you anybody to take uh to grab financial opportunities without the need of having any capital which is something that does not exist essentially in traditional finance i think the same uh the same we can say for arbitrage bot if there is a any if there is someone that doesn't know what an arbitrage is is essentially the difference in price between assets between the same assets of uh within different systems okay so imagine for example in in the world of centralized exchanges you have coinbase you have binance you have kraken what happens is that usually on finance btc trades at a certain price on com on coinbase it trades at another price and on kraken it trades on another right when this price is the difference is big enough that moving funds from one exchange to the other actually allows a person to generate profit that is an arbitrage opportunity okay and the same happens on chain of course um uni swap as a certain price for for the if die pair uh sushi swap has another price you can write a transaction that kind of arbitrages the difference between uniswap and sushi's box so that uh both system will have more or less the same price like right arbitrage is essentially what keeps the whole market in equilibrium without arbitrage you will have like huge price difference between exchanges or between different systems that deal with uh in the form of another with trading without any actual possibility of of kind of aligning the market so the arbitrage is something that is very healthy for the city for the ecosystem and keeps everything more or less in place so like for a liquidation if there is a opportunity to be taken of different prices between decentralized exchange at a certain point in time you can use an arbitrage bot that uses flash loans so you don't need capital and with that you can essentially arbitrage the price between different decentralized systems within one transaction and a profit from that and you don't need any capital but you you can use the flashlight flashball with capital to perform these actions so uh you see that is actually very powerful uh to be honest maybe the arbitrage arbitrage case is a little bit less attractive uh because usually arbitrage are not so big or don't don't involve a huge amount of money so the the chance to i mean the arbitrage bots usually require less capital and the chance to profit enough to pay the flashlight premium that is plus profit to cover the the transaction cost is lower than for a alumination bot for example there is much more chance of earning using uh liquidation that arbitrage but there were many there were many arbitrage uh executed with flashlight in in the last year that actually proven to be very profitable so it's still something that is interesting to to do and it's for sure worth to use to extend maybe existing arbitrage both to use both local capital so that you don't need to pay the additional gas cost of flash borrowing plus the flashlight premium and if maybe uh an arbitrage opportunity shows that doesn't not that that requires more capital that the arbitrage bot doesn't have available then you can use flash loans for example another thing that is specific to flashlight version 2 like i was saying before is automated leverage products there are many possibilities here if you any of you guys had for example [Music] confidence with uh leveraged perpetual tokens or leveraged positions uh this is something that ave supports natively and is very very easy to do right now i mean until now with other version one when users wanted to leverage usually they uh what what they did was they they borrowed and deposited multiple times to reach the required level of leveraging for example if i have uh if i have is and i will i want to leverage it then i deposit it in other v1 borrowed i sell the die for it deposit again in uh in abe borrow more die more buy more eath deposit this again borrow more die buy more eat and so on and so forth so it's a loop that allows you at the end of the day to create a leveraged position so you are more exposed to if and if the price of it goes up you profit more from your holdings essentially other flashlights version two allowed to make this uh a a all the o of n operations or multiple borrows and deposits in sequence in a 0 d1 so with one flashlight you can automatically leverage as much as you want as long as the risk parameters of the particular assets that you want to leverage allow you so uh if you want for example to leverage i did an example already before but the fact that of having the the liquidity in advance means that you don't need to borrow multiple times but you can ask for the lipid in advance to the protocol by the asset that when you leverage and deposit all in one transaction at the same time which is a huge uh advantage and for example you can tokenize this kind of uh operations so that essentially what you can do is create a token that represents a leveraged position and then and that and then that particular token is owned by a user and when that user redeems that particular token it their leverage position gets unrolled still using uh again using flash loans and then the person receives the amount that they deposit at the beginning plus whatever he earned or whatever he lost if he lost something if the price of the collateral went down because of the leverage position that he created and this is something that i really advise you guys to explore and maybe try uh maybe like uh try to analyze how other leveraged products work and maybe try to reproduce them using ave flashlights and that would be really really cool and another tool that you can create is tools to move funds from different protocols to have it this actually is this the strategy that we are using to migrate the the funds from abbey v1 to rb2 actually that is interesting i will uh stop for one second the presentation i will show you one transaction you can still see in the screen right yep introduction yeah i will see i will show you one transaction using flash loan that is has been executed by an user to move the funds from abe v1 to other v2 which is really cool okay this is a website that we use to track essentially the state of the other protocol it's accessible by anybody and you guys can see what is the state uh like what is the total liquidity available uh what is the total debt that has been issued and so on and so forth uh yesterday the uh migration tool from version one of the v1 to other v2 uh was released to the public and this specific tool actually uses flashlight version 2 to allow a seamless and completely user controller than the centralized migration from v1 to v2 how does it work i can show you quickly this is probably one migration or no it's not maybe this one this one what the hell there is some problem with my touch okay this one this transaction was actually created using the the ave migration tool from v12v2 you can see that is actually a flashlight here from here yeah it's a flashlight and what did uh deal flashlight this flashlight do it essentially uh the flashlight borrowed for a 540 000 usdc from rv2 repaid they use the depth that the user had on other p1 the etherscan is still not updated to show the other v1 and wv2 actions it shows ave but abe here is a very one so the flashlight was from rb2 it repaid the position of the user of 540 000 usdc on ave v1 then still within the flashlight we draw the whole collateral so 1346 ave and 689 ether from avidv1 and then the v2 actions are not shown but we can see from here he deposited it deposited back in other v2 the aeth and the a are they here so we withdraw from other one redepositing in wv2 which is something that is allowed from the flash version two and at the end of the day of the transaction the flash loan was not repaid but rather a debt position was created on rv2 so the user at the end of the transaction had um 540 000 uh usdc of variable depth as it's the same amount essentially it was flashboard at the beginning and that's it so you can see that this way essentially we did this from abbe but potentially you can do the same to move the funds from compound from maker from dydx or from yearn from wherever you really want to have it so it's really something that helps people that wants more funds between different protocols to do that in a seamless and completely decentralized way and this concept can be extended to really to whatever protocol one can think of essentially okay so i think we covered more or less everything i will go back to too fast yeah so record more or less all the use cases so afterwards there is a live example that i prepared so you guys if you guys have any question before i i went quite fast i think maybe too much so if you guys have any question before we move forward just i don't know please unmute and ask me and i will gladly answer okay i guess there are no questions so let's move forward with i will actually forward you this link here emilia there are a couple questions in the chat i can read them out to you real quick yes i don't see the chat because i'm sharing the screen no that's fine i'll read it out to you so one of the questions was from youtube and it was how can i use the protocols on already deployed erc20 which protocols would you recommend i'm not completely sure of the question can you read it again sorry emily how can i use the protocols on an already deployed erc20 which protocols would you recommend okay i'm not completely sure of the question if uh the u if the person who asked the question meant uh like if for example how is the what is the the way of listing an existing erc20 on ave or if you can use ave on whatever existing gear c20 anyway anyway i will give a generic answer and hoping that i kind of cover what the person is asking so uh you cannot really use ave with any existing year c20 the erc20 needs to be supported on the avi protocol which means that the asset needs to be properly configured and listed on the other protocol itself to be able to use all the functionality of ave with that particular asset so um right now around 18 us different assets are supported all of them are more or less assets that are part of the top 100 tokens i think so they are assets that undergo a specific risk assessment before being listed and also the listing process is a community driven so like potentially any asset can be listed as long as a proposal is created for the governance because it's decentralized and also uh the proposal is supported by the community so the voting for the proposal passes with enough enough yes votes essentially so i hope i answered the the question great um yeah they can always reach out again if the question wasn't answered but the next question is which api should i use to compare price to compare prices yes okay that is a bit of topic but i will answer i will answer anyway um there are many many apis that you can use you can use the coin market cap that i think they are free uh below a certain i don't i don't exactly know right now because i don't i didn't check like um since a long time ago but if i remember they were free for personal use and they were also rate limited so if you stay below a certain threshold of usage you don't need to pay anything and if i remember correctly the coin eco api also were open and where they were free unless they changed also the the requirements for using them so i would recommend one of those two yeah okay great and then how can i locate the transaction displayed in ether scan a few minutes ago uh okay um to locate a transaction on etherscan you essentially need to have the transactional hash if you don't have the transaction hash usually the transaction lashes kept in the history of metamask if you use metamask or in the specific wallet that you have been using if you use another wallet and not metamask if you don't have the transaction hash you can still check from either scan your wallet address and then the pending transactions or the last executed transaction should show there that is that are all the ways that you can find the transaction that you send and you don't know how to track okay yeah i think maybe you can go on with the session and we can answer a few more questions a bit later okay great so uh i will actually stop sharing because i will share this link in the chat then i will go back and sharing again okay once again i'm going through this little youtube yeah i'm going okay there are also some questions on the on the group chart of zoom that i didn't see because i was sharing so i will answer now uh there is barack that asked considering that the borrower doesn't have any major risk the lender doesn't have any risks so then who pays for the profits is the community who pays for this to the price pump and dump not sure to what particular [Music] what particular activity that i discussed before you are referring to if you are referring for to the arbitrage in general to the liquidations or to the flash loans in general uh i can give a okay okay so uh what i can what can i say is if uh usually it really depends on the particular action that the flashlight ronix is executing oh okay but i'm swearing when a flash run arbiter in general hack happens okay when a flashlight in general it really depends on the action that were that the uh that you want to catch for example for a liquidation if and if you want to catch with flushing on liquidation and you earn a bonus on the liquidation then the person that is sustaining the cost of this opportunity is the borrower okay so essentially when the price of the collateral goes down and a borrower can be liquidated what happens is that it usually happens before the the price of the collateral reaches actually the debt so you have a certain margin okay so if you borrow the 1000 die for example you start getting liquidated not when your collateral reach 1000 die in value but when for example it reaches 1500 okay so you have a certain margin between the debt and the the the value of the collateral so when you get liquidated uh you pay essentially for the bonds so for you for you borrower the the liquidation is a penalty okay you will pay the amount of bonus that the liquidator will resize receive as a penalty on your collateral this this always happens when it's uh when we talk about liquidation so is the borrower sustaining the cost of the bonus that the liquidator is getting uh when an arbitrary in the case of a harbinger is a little bit more complex because it kind of involves different systems and uh an arbitrage can be many different ways so usually uh the cost of the arbitrage is sustained by the liquidity providers see if we refer to specifically to amm and decentralized exchanges usually the liquidity providers sustain the cost of the arbitrage so if there is an arbitrage opportunity it means that the arbitrage will extract some some value from the from the pool which is kind of sustained by the by the liquidity providers then it also depends like usually arbitrage in some places incentivized because arbitrage also means more fees so there is a threshold where uh arbitrage is actually not a cost but a benefit for the liquidity providers in the long term okay so it really depends on how and where that particular arbitrage happens from which different systems uh but in general we can either uh refer as the liquidity providers as the one that sustained the cost or the system itself for example there was a problem on maker on liquidations back back in march i think and that could be a kind of simulated to an arbitrage but in that particular case the cost of that particular arbitrage was sustained by the users and in a certain way by the system because the system to be recapitalized [Music] essentially had to make to mint more mkr to be able to repay the debt that it was kind of arbitraged out of the system so really it really in the case of arbitrage and hacks really depends but is usually the user so liquidity providers okay uh okay i will we will go through the because we are already close to the end so i will just share the link here of the example that i created for you guys to test with the flashlight version two uh if you go this is my personal github if you go there you will find uh two different solidity uh smart contracts that i wrote one of them is a incomplete so you guys you will need to complete it to be able to actually execute the flashlight and i will be available for you guys in discord or like you can write me on my personal telegram i will give the link or on twitter to for you guys to help finishing this the one that is not completed and to actually have a working example potentially even in mainnet so let me go quickly through the example we'll show you uh what was built uh so i will share the screen okay so [Music] there are essentially two contracts in there one i'll be showing you quickly i brought essentially two contracts one is called fake arbitrage strategy and the other one is demo flash lunar receiver the demo flash running receiver is the one that is not yet completed so you guys if you want to take the exercise you will need to complete it the fake arbitrage strategy essentially simulates an arbitrage opportunity where when you send ether i will show you the code here yeah it exposes a function that is called arbitrage and when you call this particular arbitrage function uh it will return nine basis points more that than than what you sent so imagine that you sent a one ether to this function you would recite 1.0009 ether which is exactly the same as the premium that you will need to pay if you invoke a flash loan so the idea why i wrote this contract and this function is the idea is to give you the possibility of writing a very simple flash loan that can call this contract you can send the funds to this contract and then it will send you back the funds that you send plus the premium right so you can call a flash loan and execute it successfully on mainnet and eventually uh uh while being also able to repay the flash loan premium and have an actual uh successful transaction okay so my idea was that this contract that is already being deployed to mainnet the address is on the readme here this is the a arbitrage log strategy that i deployed the idea is to write a a flashlight receiver that i partially wrote here you can see the code here the flashlight receiver implements the execute operation function that i was talking before and essentially uh here you will need to write the code that you call the fake arbitrary strategy call the arbitrage method receive the flashlight amount plus premium and repay the flash loan now you will need to take in consideration three aspects is that uh first aspect is that the protocol doesn't deal with if but it deals with weth so whenever you call execute operation in a flash loan you will need to call it with the address of uh w eth and you will also need to uh uh pass an amount the amount i put as a limit on the fake arbitrage strategy 0.01 either so the maximum amount you see there is also the the the requirement here so remember guys when you call the flash loan the amount that you need to pass is needs to be less than 0.01 ether this is done to essentially avoid uh people depleting the whole arbitrary strategy with with one transaction but to have enough funds in the in the fake arbitrary strategy for everyone you can see here that you can call maximum 0.01 either and what you will need to do here is unwrap i already put the reference to with unwrap the if uh that are within the w8 that are received from the flashlight send the east to the arbitrary strategy strategy that will send back the same amount that you send plus the premium drop the amount again and after you grab you will need to approve the landing pool where the address is here to be able to take from this particular contract the amount of uh that was sent here in in amounts so this is uh these are essentially the four steps that you will need to take i will also i have an implemented version that i already did in my own machine i will also add the implement the fully implemented version in the uh in the repo there so you also have the full implemented version remember that you have this so remember that you have these four steps unwrap the w eth uh call the fake arbiter strategy passing the unwrap the if and receiving back the the amount that you sent plus the premium drop back again to be able to send back to the protocol and approve the protocol to be able to approve the protocol to be able to uh take the funds from the this contract so you will be able to repay the flashlight these are the the four steps uh i i will i recommend you guys that use remix if you are not familiar with remix is a tool uh to develop solidity smart contracts you can see here i already have the two smart contracts that i wrote for the for the goal use the the remix you can simulate everything i mean to avoid wasting money in a failed transaction you can simulate everything within the here you can use you are not forced to use the mainnet or a test net but you can also use the a javascript v4 machine so eventually you can use the javascript virtual machine to emulate the the the smart contracts and try that everything works before trying to maintain because unfortunately mainnet is very costly these days so it's hard to build without spending too much money and yeah as an addition i i left a self as a good tradition with flash loans i left a possible exploit on the fake arbitrage strategy so if you guys find the part the the exploit on the fake arbitrary strategy there are 0.28 there so if you find the the you will need to use a flash a or a modified execute operational contract to be able to exploit the fake arbiter strategy and if you manage to find the exploit and to pull it off essentially it's a uh 200 bounty for you guys so uh this i left as a fortune a further incentive for you guys to try the example and experiment with it and get more accustomed to how flashlights work i think we don't have much time left right emily um no you you can continue with your session and um if anybody would like to stay on a little bit longer they're more than welcome to um but yeah i don't want to cut your demo short go ahead okay so there is a question what's the link to the github repo i sent you it's guys it's like free message above yours is github d3d market make yeah emily for word okay so this is the link to the repo and there you find the contracts uh i will add a bit more details i was hoping to be able to do that during the session but i started talking a bit a bit too much like my usual but still i will add more details on the readme on how to actually use these contracts uh i will also add an already implemented version that should work i didn't test in in detail but should work already and i will be available on the different charts on discord or if you want to ping me on twitter on [Music] twitter on telegram you guys feel free to do it uh i see a question here any good and comprehensive resource that you can refer me to understand defy space i would really recommend you guys that on youtube there are a lot of resources to allow you to under better understand the default space i would recommend you guys follow defy that he's a really really good influencer and he creates a lot of very interesting content uh for um i will i will also share the link to the flashlight transaction yeah defy that creates a lot of content specifically for people that wants to start interacting with defy and understanding better the default space so i'm writing here it's defy defy dabbed on twitter yeah okay so let me find the transaction okay from here that's this one okay i'm sharing the transaction uh of the flashlight in the meantime then i will quickly move to the to the create delegation it doesn't work for some reason i will quickly move to the to the create delegation like just to give you an introduction what the trade delegation is and how you oh there is a black box in my in the middle of my screen i don't know why uh maybe it's the chat okay okay this is the this is the etherscan transaction that i showed before yeah yeah it's my zoom window i'll i'll close quickly because i'm reading the chart i shared in the chat the uh address of the transaction that i showed before with the flashlight execution and the migration of the funds between other version one and version two i will again i will provide more details on the on the example that i provided in of the github in the readme of the of the of the github so keep an eye on the readme of the github so you guys can see the details that i will add and then i will go quickly to the great delegation and show you guys what the credit delegation is and how it works and why is important for some reason this doesn't work anymore okay that doesn't work the going from screen doesn't work anymore i will okay i will quickly introduce create delegation and then i can i think we can wrap up with more questions and uh i'm sorry i cannot show on um create delegation example but unfortunately there's not much time anymore okay so uh this is the other functionality that we were supposed to talk about during this uh during this session and it's very very important because it kind of introduces a new concept in d5 that is the possibility of taking uh uncollateralized loans essentially so how does it work is it really uncollateralized and what can i build with it so you can think of credit delegation a little bit like an approval okay uh if you guys have um [Music] are if you guys have a confidence of how year c20 tokens work you know that more or less every time you use or you authorize an application to take your tokens from your wallet and use them in a protocol can be uni swap can be um ave whatever you need to execute on a transaction before to authorize this particular smart contract or protocol to actually take the funds out of your wallet right that particular action is called approval and essentially it says okay i authorized this smart contract but really can also be a classic normal wallet to take the funds out of a certain amount of funds for a specific token out of my wallet with my consent you are essentially giving the allowance to a smart contract to pull the funds and do whatever they want to do with these funds usually in other for example you give the approval so the protocol they can take the funds out of your wallet and deposit them in the protocol so you store you start earning interest okay the credit delegation is essentially is born from the same concept of approval but the what we thought is okay instead of giving approval to take tokens out of my wallet why don't we give approval to another entity to borrow on my behalf so what i can say here is okay i have for example 1 000 if of collateral on abbe and i can i want to use this collateral not only from my wallet but i want to use from another wallet for example i use for everyday expenses okay so this was impossible until uh have a v2 because you could not do that i mean you would need to borrow with the normal wallet and send the funds from the normal wallet to the other wall which seems like not not a big deal right i mean i can just borrow from the from the main wallet and then take the funds and then use them on the second wallet but it's much it's in reality it's much less flexible okay because i need to uh i am forced to do an action and then to provide the funds to another wallet instead of having the freedom of borrowing and repaying and doing whatever i want without any uh requiring any further action so with great delegation you can essentially allow any other wallet or contract which is even more important to borrow on your behalf so what what this means is that an entity that is not you can borrow using your collateral and it doesn't need any collateral so it's actually uncollateralized for the entity that's thinking the loan but is of course in uh for the uh from the perspective of the system the loan is still collateralized okay because it's the collateral of the user delegating that is guaranteeing that the debt will be repaid okay so it's uncollateralized but it's not really uncollateralized but it's really cool why we can build stuff that another without the credit delegation is much more uh complex to build actually the in the interesting fact is that you don't really to evaluate the power of this of this functionality you don't need to even need to build anything think of an entity that for example um create that um issues loans off-chain right uh by validating user identities and credit scores okay then this entity can allow for example users to borrow from ave uh in a completely seamless manner a completely transparent manner so an user can go a user can go to abe and borrow transparently without depositing any any collateral with of course the the constraint that this particular entity is connected by from to the delegator by a off-chain relationship okay so this is already very very powerful and it's something that is not so easy to be to to do with the same flexibility without create delegation but it's even more powerful if you consider that this functionality can be used by contracts so imagine uh for example that you want to create a smart contract that has um for farming strategies okay so imagine you want to create a smart contract that allows users to deposit i don't know wbtc for example in one smart contract and then this product this uh this smart contract under the hood deposits the wbtc in ave and delegates another contract to borrow so this contract can actually now manage a certain amount of funds and can use these funds to deposit incur for example to earn more interest and to earn the difference between the interest that is paid to ave and the effect the interest that is paid to curve plus the crv for example and this is completely straightforward because it really requires only one transaction that is the delegation transaction so this is essentially the heart of the created delegation function and this why is so powerful because you can do a lot of stuff without any friction and on behalf of another entity that is providing you debt and all of this does not require further further interaction from the delegate or that is the person that is giving you the allowance to to borrow i can quickly show um yeah i was putting some links here but it's probably better if i show quickly live how it works by the way um let me send also this in the chat here okay there is a question in the meantime maybe there is a post for quick deletion somebody might someone know since there is time in in this meeting house yeah uh we have some the credit delegation tutorials in the developer docs here i put the link of the the avi developer developer docs this is really the root of the documentation the more maybe for you guys more interesting is this one developers and there should be a section here about credit delegation right yeah there it is yeah okay so if you guys take a look at the this this is a tutorial essentially with uh coding examples on how to use the create delegation so i'm gonna introduce like quickly just because just to give you a heads up but it's very very straightforward oh yeah sorry it's the the chart there you go okay so you can see here developers guys create delegation and you can see uh there are um series of code examples both in solidity and web three so using uh the web free library and interacting with the contracts directly so uh like i was saying before it's a two-step uh two-step uh interaction first you need a delegate delegator that gives you approval uh to borrow and then you need a the the delegate that actually goes on the protocol and borrows on behalf of the user okay so how does the approval or approve the credit works i can show insulated quickly yeah you need you will need [Music] there is this is a concept that was not introduced before but i'm going to introduce quickly essentially other version 2 has also the concept of debt tokens the adept token is whenever a user takes some debt borrows from the platform it gets me into the token right this token tracks actually the depth of the user so uh whenever i go on the platform and i borrow 1000 die for example i get 1000 that died okay this that these lab tokens are essentially what keeps accounting of what each user has borrowed and we have for each asset that is that is listed in our we have two different kind of tokens we have stable debt token and variable they're talking because inaudible you can borrow at two different rates table rate and viable rate okay so to interact with the credit delegation and be able to delegate to a certain to a certain user you will need uh the depth token address of the dev that you want to allow so for example imagine that i want to allow an user to borrow a wbtc at variable okay i go here deploy contracts here there is the list of contracts that have been deployed in a minute actually here you see i go to wbtc and they find their a token disable the token and the variable they're talking so imagine that i want to allow someone to borrow the variable wbtc on my behalf then i take this contract here i can show you quickly actually a prop system i will show you that this contract has a delegate function approved delegation so with this you put the address of the person that you want to delegate the debt and the amount that you want to delegate for example you can delegate maximum of viewing 256 and the guy will be able to borrow forever for example and so you take the address of this contract then you go back to the documentation i will show you here you see it takes the the stable that token address for example is the address that we took before and then it calls approved delegation with the address of the person that you want to delegate and the amount that you want to delete it that's it it's really really simple and it's really really powerful so after that the address of the user that you approved so the borrower is able if you have if you caller of this function have enough collateral the entity that you approved so the borrower in this case is able to go to the protocol and borrow can do using the ui can do using web3 or can do using solidity for example using solidity if you allowed to borrow to a smart contract the smart contract can call this function then input.borrow and it will be able to borrow on behalf of an idiot of another user that is the delegator address here the system will check underneath is the caller of this function have enough approval by this user if yes the user will be allowed to approve and will be allowed to borrow so it will receive the asset even though the user doesn't have any collateral that's it with this functionality really what you can what you can borrow is only limited by your imagination because what you can build is limited by your imagination because there are so many things so many uh yield finding strategies for example migrating migrating uh one position from one wallet to one wallet to another using um an air-gapped or off-chain wallet to borrow so for example imagine i keep my collateral in an air gap machine because i'm i worry that my everyday machine will be hacked but i still want to be allowed to borrow against my collateral then from my air gapped machine i can allow my everyday wallet to borrow so my collateral stays in my air gap machine so it's safe from hacks and i can still borrow and use the funds that i borrow and repay as well by repaying on behalf of the wallet so it's really powerful guys really i gave you some ideas but if you think there are other possible use cases and you have other functionalities that you can build on top really bring us on [Music] discord or stani or me or jordan or whoever you guys find more comfortable to interact with on twitter or on telegram and we will be happy to answer i think we are past the hour so probably you can stop here i think i forwarded all the let me see if there is any question thanks matt for the for the can delegate or repay debt taken by the dragon yes of course so if you are the delegator and the legacy has taken that he can also the debt is factually his debt okay this essentially what happens is that i get the debt and the person and the delegate gets the money so the delegate can repay on behalf of the delegator but also the delegator can repay his debt without any any problem at all yeah i think we can go if you guys twitter handle let me show twitter okay these are the handles of ave ave and the medium and my twitter handle is i don't remember to be honest this one d3d underscore uh if you guys have a will it's light will bolster the hair here on discord i will put in the repo of the github so i will also add the slides to the repo and i will i can also send the slides on discord and again i will i will make sure that i will fill up more information on the readme of the github so i try i will try to cover everything that i plan to cover during this workshop and there was no time unfortunately so if you guys have any other question otherwise we can conclude here i think great thanks so much emilio um that was a really great session and some great questions coming in from the hackers from youtube and from the zoom core and if anybody has any more questions for emilia you can reach out to him in the sponsor rv channel on discord or directly on telegram um and yeah thanks so much emilio that was great thank you very much guys for amy and 
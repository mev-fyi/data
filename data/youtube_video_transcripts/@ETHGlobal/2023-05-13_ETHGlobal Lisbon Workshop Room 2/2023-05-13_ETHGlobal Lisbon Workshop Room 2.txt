[Music] foreign [Music] [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] [Music] [Music] [Music] [Music] foreign foreign [Music] foreign foreign [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] thank you [Music] [Music] foreign [Music] [Music] games [Music] thank you I'm smiling [Music] [Music] [Music] circles [Music] thank you [Music] [Music] [Music] that is okay [Music] thank you [Music] so much [Music] okay okay it's working guys hello good afternoon to you guys my name is Carlo I'm Luis cortezi and today I'm going to try to convince you to use our Cool Tech to do some interesting stuff the name of this is billions of reasons to use cartasi and I hope it becomes clear during the presentation so today we'll be covering basically this a quick overview of what Cortez is and then an issue into the our Tech which is Cortez rubs its interfaces a really simple application of how you can build uh advertising application in in this case in Python and then I'll go through a couple of things that are being built with Cartesian are nice things to inspire others so this is just a preview I'll come back to this later but this is a really simple program in Cortez in this case it's a necro application wherever you've wrote it it froze back at you and if you check the code on the right side which is the the whole application code for the ones that are familiar with python this is just traditional web 2 python code there's nothing in that screening web free you don't have to learn anything new you're just using requests which is a well-known HTTP client so it's really easy for anyone used to want to to get started with Cortez but as I said I'll go back to this layer so let's get started uh so what's the idea behind cortizing so Cortez started in 2017 uh ethereum was blooming at that time and the theory is really nice so we have all these decentralization properties censorship resistance no one can tamper with anything because if they try to it's really hard you have to lie with thousands of nodes in order to get the right and it's awesome but it comes with its disadvantages as well so on ethereum everything is low it's expensive and it's cumbersome why slow because well we are sharing a single VM all the resources with all the applications that are running on it expensive because you're you're always bidding for the resources that are scars available in there so you have to purchase that resources and overbeat artists trying to use it and commerce them because uh ethereum was designed around DVM which is really good for sandboxing make sure that no one's messing with someone else's competition but it's not similar to anything that came before so all the tooling has to be built from the ground up so what's the idea behind Cortez what if we could have much more complex computations still having these really cool guarantees that blockchain gives us but with great selling and that's what we achieve so what's our solution so we have this really cool application specific roll-up solution we basically do this roll up for each application that the deployment cortizing each one of them has their own VM and this VM is based on this risk fiber texture which is an open Hardware processor and uh since everyone's got their own processor the applications are not completed for resources and it's based on this traditional computation platform well we can put Linux and by booting Linux we'll bring all the web to goodies for web pre-development you don't have to learn solidity to have all these realistic curve for doing your decentralized application you can just use what you're used to and want to and in order to make it easier for people to onboard we wrapped all the complexity of the framework on an HTTP interface so how do we achieve this this is achieved by using a very cool dispute resolution protocol that secures this computation it's based on something called verification game uh I'm not gotten gonna get uh really down on the details of how it works anyone interested on that can talk later to me but uh basically what happens is that all these competitions that happen in the Cortez machine the Cortez machine is deterministic so if someone disagrees about the competition they engage on this verification game protocol uh we said what's the first point of the computation you don't agree and that single instruction is arbitrated by the underlying chain on a copy of the Cortez machine implemented in solidity so when you have a dispute it's an entire blockchain you're using under underlying that's actually arbitrating if you're right or wrong so it's uh it's a very safe our security guarantee is that the single party willing to enforce the correct result is enough to guarantee it okay just being a bit graphical here so if you're in touring is really scarce because as I said the AVM is not compatible with anything that came before so everything is being built from growdup and when it comes to Cortez oh well you have everything you used in web 2. so you can use all the libraries all the services other languages that you're used to this is just a quick overview of how you can make your Cortez machine Drive in which contains your application everything you're going to use so when you're building your Cortez machine you can take advantage of a Docker container which uses camo to emulate risk 5. and all the Linux listers that are already built for it and you just use whatever you want to install your environment so in this case here I'm just using I'm just starting from this risk 5 build of Sling Jammy for python which is a Ubuntu distro you can use whatever you want Alpine is there a cup of tea go for it you want to use vanilla Linux go for it as well whatever you want you can start in there see someone Ubuntu and I want to use a sqlite database as well I just apt install it and it's available inside the machine for for my usage then I just copy that directory in there to this optic cortized app because on my direction I'll have the actual python files for this application which actually has my logic and I can just pip install the dependencies like I would do on any Linux machine so for a web to developer this is all very simple if you're used to docker now let's talk a bit about the computational scalability so if you take a look at FIFA scanner or whatever your Source you can take a look that ethereum blocks they generally have like 30 million gas on other transactions within it so considering you have the entire block just for yourself and you're doing the cheapest possible useful computation so if you take a look at the funeral Play codes the cheapest one is adding and that costs figures so that gives you a boundary of about 10 million instructions for the most you can do an interfering block considering you have the entire block for yourself which is something really hard to get okay just as a comparison uh this is hard to read I guess but in here I have a terminal and in this terminal I'm just booting the Cortez machine and holding it doing nothing just booting Linux and just shutting down and this is using along about 37 million risk 5 CPU Cycles which are much more complex than just adding so if you do equivalent operations on the on the evm it's not going to cost uh three uh I guess it's going to cost way more but that's just to give you an idea of the scale of the computation you can do and booting Linux and shutting down which takes about 37 million risk five CPU instructions happens in a laptop in 0.2 seconds so it's pretty fast now just another comparison um I've learned some dumb computation here using a shell script and that took 3.7 billion CPU instructions okay and on us on a regular laptop that took about 13 seconds which is the average block time of ethereum so just to have a perspective of how that is compared to those 30 million instructions you can have in a funeral blog it's this weird so the left top corner is a yellow square and that would be 30 billion instructions and then 3.7 billion instructions will be all this blue grid and that's not the limit of Cortez machine computation I just limited to 30 seconds but you can actually have as large computations as you want remembering that this machine is just for application it's not shared among everyone just like in ethereum so let's get started on curtiserable Ops this is the overview of a Cartesian rollups application so on the client side traditionally you're going to do a web application so you'll probably be using HTML CSS JavaScript some framework you used to like angular reactor vue.js or whatever your capacity is and then you need a couple of libraries to connect to the Cortez framework the Cortez framework has three interfaces you're going to use the first one is the Json RPC one and why is that because our framework is deployed on top of an evm blockchain and in order to provide inputs to cartize machine there's a data availability problem so we force this to go through the blockchain for a special smart content Cloud framework and well to talk to ethereum or any other blockchain you generally do this using engines on RPC interface into an ethereum or polygon orgnosis or whatever you're doing node then we have an HTTP request API that's used for something like ethereum calls so it's a ethereal calls you do to check some machine state that doesn't really do anything it's a really only operation right and finally we have a further interface which is a graphql one in which you can create a Cartesian node for events and things that you emitted on your logic now your decentralized logic actually resides inside a Cortez machine and in order to make it easy for you to program we do have this HTTP dispatcher component that wraps up the entire framework complexity on the simple HTTP interface uh what does it look like well let's go back to that first slide now let's go in details so if you take a look at this code we just start like a traditional Python program we're importing requests which is our HTTP Library we're importing the environment module from OS because we want to read the environment variable in this case it's being used online 4 because we're looking at this roll up HTTP server URL which is an environment variable we set with the address of this HTTP dispatcher okay well once we know it we ask for it what do we have to process so the basic structure of a characteristic program is an iterator in which you call this finish endpoint and when you call it you're doing two things the first thing is you're putting a payload saying what happened with the previous final process is it okay is it invalid if it's okay you return a status except say it's fine the Cortez machine should eventually State it's fine everything is valid if it's something that will corrupt your application or anything like that you can just reject it by returning a payload with status reject once that happens the cart size machine holds and it's waiting for the next input the next input comes these call returns and you get a response with the data of the next thing you should process the payload itself is in a field called data and then you have some useful metadata one of them is messenger address which is the sender address you have the timestamp of the Block in which you received it and a couple of interesting things on line 26 specifically we're looking for this request type this is a pretty simple usage it's just a metadata that can come with Advanced state or a spec state or lens 19 and 20. and that's for you to differentiate when you have an input that came through the blockchain that should Advance your application state or if that's if call a female call in which you just want to generate some state of the application maybe for a front-end to consume or something like this so just an example let's say you have a chess application you move a piece that changes your application State that's going to come on an advanced State now you just open your application you want to know if a game is going on or something like that traditionally you would have to go through the blockchain check all the transactions that you have to rebuild the application state or use something like graphql to index and state and query it with Cortez you can use this inspect State you just provide your address and it's going to return Json maybe with your chest configuration chessboard configuration and the players here right so this is the difference in this really simple example we handle either Advanced and respect States the same way we just pick up the payload of the input we put it on a Json and we meet an event with it in case it's a hello Advanced we use our interface called notice which is equivalent to an ethereum event and in case of Henry spec we use the report which is the wrapper for a for responses for this ephemeral call which is the inspect API now on the left side we're using a really simple front-end application we built in typescript that implements those three interfaces of the other slide so if you call this command yarn start input send Dash payload whatever you put in there and in this case hello there it's the binary pillow that's going to go on this add input framework and it's going to be piped into the Cortez machine so that hello there it's arriving in here this response and after we process this response in line 8 that Json with a notice it's going to be posted with exactly that payload so now if you call this front-end application with yarn start notice list it will go to that graphql interface of the node and it's going to say hey give me the notes and you have a nice gnosis in there with the hello there because this is a cool application just pipes the input back to the output so this is a really really simple crash course on how to use cartesia it's a 27 line python code you can make it even less if you want and it's just using hdp interfaces nothing nothing fancy nothing different cool uh now that you have a crash course on how to make a Cortez application and the interface and stuff let's take a look at some usages and some nice things people are are doing with it so generally people use Cortez either to further decentralize that logic because most apps you do when you go to High computation or something complex you generally put a part of an adap in smart contracts and then you put more sorts of logic centralized that works for games for dollars for a lot of stuff so with partazzi since you have a Linux machine with great tooling and a lot of computational power you can actually decentralize this logic Express more more complex logic because you got all the tooling all the libraries so you can have really complex Max and mathematical functions that you're just import and use you can use numpy you can use data analytics you can use machine learning all this stuff that's already been developed leveraging traditional stacks and it's also way easier to onboard web to developers into web free because after all they're using the tooling they're used to so a first cool use case I want to show is this game is developed by Italian studio called efforts and the game name is Dazzle it's basically a Pokemon Crush mashup so you have your team your attack the other one whenever you want to attack the aerial player you do a combo on this shared puzzle and then there's no problem about anyone needing to trust the server about anyone tampering with the random number that's going to fill the the puzzle so you're in a competitive match you don't know that no one tampered with your board to get a better combo next turn or anything like that the client itself is done in unity it's pretty beautiful it's got some pretty nice effects for the characters that they use as nfcs and the gaming logic they're building rust and it runs inside the cartel machine so each match you can just run your own node check its it checks out nothing was separate with if someone tries to tamper with it you can just prove they're wrong enforce the correct result this is a nice defy application that was done inspired by the mango hack on Solana so there's this D5 protocol Landing in in Solana that's really simple and it was hacked by a guy that checked that they accepted a certain asset as collateral and this asset had a really poor liquidity so this guy got something like 5 million dollars purchased the asset from the price goes to Mango says Hey I want 100 million U.S stable usdt or another stable coin gets it because it just goes to a price Oracle checks out but then if they try to liquidate it it won't hold it's not worth 400 million it's worth those 5 million paid so inspired by this these guys they made this really nice risk analysis protocol called nucleus and uh well they feed the Cortez machine with prices and volumes of assets and then they use numpy to do some sophisticated analysis and come up with some robust metrics about liquidity and volatility and then the recommendations like yeah these assets is not good you cannot liquidate over 10K on it it's gonna hold or no this is a great asset with liquidity low volatility you can liquidate a million bucks and no issues here this one is more machine learning image processing so this guide has this problem of people tampering with fingerprints uh in many places in the world it's used either for Access for clocking in and clocking out of work this kind of stuff and people mess with it so they make fake silicone fingers to go in and go out or to gain access or photocopy and this kind of stuff what this guy did is he made this dapping cartesia which is specialized on defining if a fingerprint was poofed or not how does it work he gets inputs as a fingerprint image then has a first C plus plus program using opencv it processes this image and describes it in the array of features that is fed into a Python program with a really cool machine learning model he trained and this model was trained to differentiate the real fingerprint for something spoofed form silicon or paper or anything like that this one is more on games AI this is from a guy that came from our community and it's called Ultra shots so chassis has displayed that people don't really play chess online they open up a game but you're not playing versus a human they just open a computer game whatever you throw at them before the computer whatever clever move the computer does they throw back at you so this guy said Okay so let's make it part of the game you can play as a human sure but the main focus on Ultra chest is actually you're a trainer of the bot that's gonna play so you do your AI you train it you change its parameters you put it in there and then inside the cartel's machine automated matches happen and your King of the Hill you turn your your butt you you defeat someone that previously defeated you so it becomes a bot automated game and the focus is on your training and improving your Bot since it's happening inside the Cortez machine if you win or you lose a match it's not because someone tamper with the match there's nothing to temper with anyone can reproduce all the matches and check that everything is fine in this case you build it in Python and uh and a web user interface the Bots themselves they use a protocol that is established and they can be developed in in any language you that you want so you can do a binary in simplest Plus or rest or you can do a python script or JavaScript or whatever you want this one is a real complication that came from India so Indians they have a problem with car insurances basically in there you have an accident you activate your insurance and they deny you the payment and why is that they claim you're a bad driver how do you dispute it you go to Justice the the decisions behind closed doors and you cannot really dispute it so what this guy's doing is a decentralized car insurance protocol so most cars today they have this Old bdb2 Port in which you can export all the data from the car computer they fit it into the cartes machine then inside the cartel machine they have this model that analyzes this data and come up with a risk metric saying you're a good driver you're a bad driver you're ever driver and based on that data they deny you or approve your insurance and they make it cheaper or more expensive so if your insurance is expensive or is denied or anything like that you don't have to go behind a court or something well you just check the data is in there the model is in there yeah I'm a better driver or no I'm a good driver they make a false claim you dispute it and you force a correct result this one was also built in Python this is a really nice application that was done in a Harvard hackathon so these guys they got this retro style emulator called ikiming go that those games like Street Fighter they put it inside records machine they make a Python program wrapping it and they created all these crazy nfts for Pikachu Pokemon skunk fugai pizza delivery guy you name it and then this application called Coliseum you'll have a batting phase everyone says I'm thinking this guy's gonna win this guy's gonna win they all put their money it ends then you have the automated match happening inside a Cortez machine and then you have the result and you pay the winners once you have the result they also render the the whole match into old-school Style video so it's interesting you bet then you watch the the match like you're watching anime or something like that and then you get your money in case you want once again nothing to tamper with is someone tamper with a fight you just enforce the correct result by disputing your computation and this is a really cool guy these guys they made this uh for a hackathon in Bogota so nfts have this problem in which nft itself it's not the assets you want it's actually a certificate pointing to the asset so there are a couple of cases in which you purchase is really expensive nft and then the person changes those that beautiful art for a blank canvas on the server or something like that so these guys they actually wanted to generate an nft collection with provable art how do they do it well they generated the art within cartized machine and in this case they use a competition intensive algorithm that generates fructose called meadowbrot they implemented it in Rust so if you have an nft from their collection and someone tries to tamper with the art or anything you just go to the Cortez machine say hey this is not a real art the real artist is one this is a computation that generated anyone can just verify this is the right art this is a more traditional application but still it's a interesting use case so this is from a team of Poland and what it is is they did a decentralized parking app I'm not sure about your personal experience but sometimes you get a fine for not paying your parking but you were on time all the stuff you have to go through the common Justice to dispute it it's a hassle especially if you're not from the place sometimes you don't know how to pay for the parking meter all the stuff so they make this really nice application the front end is webbed in View and they use rust and post sqlite on the back end and they build this nice application which you have the parking zones you have the fees you can just go in there and fill up your meter anyone can go in there and check that you're still on your time and do your thing so it's more traditional webto application made very easily in inside the Cortez machine [Music] all these and many others we have things with carbon credits we have other things really interesting news with machine learning so sentiment analysis all this stuff they're available on this showcase page we have our games we have the yeah uh some really nice projects in there do you ever build winter and just to inspire you guys a bit more on what you can do on Cartesian so we have this this track with a total price of 10K the first winner is going to get a nice price of 7K and then we also have a SharePoint for the runner-ups so three teams share one thousand dollar each okay so uh we had this tweeter on February of this guy asking well if ethereum is really the world computer can someone explain how no one has managed to get doing working in it and we had a very clever engineer in our emulator team we said challenge accepted so yeah he put Doom real time running inside the Cortez machine and uh yeah it's really cool so if you look at his suite I can give you the link later there's a render of him play and there's also GitHub repo for the the courageous to use because he hacked this really fast so it's not really easy to reproduce it but it's in there okay and that's all thank you very very much for your attention I hope you learned something maybe and whatever doubt you have you can shoot at me we're going to be on our stand during the whole hackathon so if you want to exchange an idea if you have something you want to build if you want to brainstorm if you're trying to build with us and you have some problem you need debugging or anything like that where they're available for you thank you guys so I think we have some time for questions if anyone wants to ask something sure how what's it works out Randomness okay so the question is how Randomness work and that's a great question so the the way it works is when you generate a random number on a computer it's not really random it's sort of random right and the source of entropy in the Cortez machine is controlled otherwise it's not deterministic so when you generate a random number in a Cartesian machine it's always going to be the same because other people will produce it and it's the same that doesn't mean you cannot have random numbers within it how do you do it there are multiple techniques and that depends on your application so let's let's get this for example which is a multiplayer game right you need to generate a random number to refuel the the mark the way you do it is you use a seed that's a joint number from both players in order for you to have both players contributing without one mining uh Advantage random number we use a scheme that's well known comes called the committing reveal so basically when players commits to a number maybe the hash of the number the other player submits the actual number and then the first player has to review the first number and then it's a hash so you hash the number he provided if it checks out that's a number if it doesn't you try to tamper with it everything is fine combine both you have a seat for a random number that's a strategy you can use our approaches it depends on your application you can let's say you have a SWOT machine application for instance you can use something that's hard to control like the block hash of the input that's coming requesting number you want to be maybe a little more safe you can use Oracle from chain link you can use a vrf yeah there are many options [Music] yeah because you can always reset the seed on the Linux system so yeah you just set the the seat on the system and that's going to be used Universal yeah cool any other one is got further questions as I said a great hackathon for everyone if you need this you want to trade a word or something we'll be on our booth and happy to talk to you guys have a good evening [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] thank you [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] [Music] [Music] I'm leaving [Music] [Music] thank you [Music] [Music] [Music] thank you [Music] foreign [Music] [Music] [Music] [Music] [Music] [Music] foreign foreign foreign [Applause] tickets rather than this but um hi everyone thank you all for coming um I'm Jess Glover I am the developer relations engineer at the RV companies I've been here for just under a year and I work primarily on Ave and go so um I guess who here actually has minted garlico and who is here for a Ravi ticket [Music] okay um so today we're going to be looking at what go is and how it works and uh looking at looking through some code Snippets and then go through the prizes for the hackathon so um if you haven't heard of go it is an RV native decentralized over collateralized stable coin and it was initially proposed to the RV Dao in July last year and it's now been it's launched on the ethereum girly test net and is also on the sepolia testnet so um firstly to fully understand why go was built we should touch unstable coins briefly just because they Place such an important role in the D5 ecosystem they offer a fast efficient and borderless way to transfer stable value on blockchain so you're probably wondering why they'll go when there are so many stable coins out there so there's been demand from the ecosystem for a decentralized are they need to overclass stable coin just because of the reasons I said before it's it's a great way to transfer stable value across a blockchain so um go contributes to the dial treasure the away dial treasury as well with paid interest directed to the Dow rather than assets suppliers as it normally would be on the RV protocol um with the Army Community Support go has the potential to become a leading decentralized labor so what is go so as I said before the kind of lengthy definition we have um RV protocol native so go fits natively into the existing RV protocol as a new asset so when the team is building go it was clear that there was a lot of functionality already in the existing protocol so this is things such depositing collateral and liquidations um go is decentralized so it does not have one single point of control it will be fully governed by the Ave Dao and this means that they'll make all decisions relating to go so for example go will not be go is not an algorithmic stable coin and the RV Dao will set the interest rates so again on this point um relating back to how go fits natively into the RV protocol it means that go can actually leverage the existing of a governance framework and the access controls so this doesn't only provide transparency but it provides verifiability so you can see the governing rules and policies that will be approved and executed on chain um so go is over collateralized so this just means that users must Supply assets more than the value of go to be minted so in this case as go will be pegged to one-to-one with the US dollar one go will be backed by more than one dollar of collateral and this model has already been proven within the ecosystem and what and this will work as a stability mechanism so basically when you're supplying more go more collateral than the go that you're minting this excess collateral that acts as sort of a buffer like a cushion um in the event that the price of a stable coin will fall below the target value go is also multiculturalized so in terms of the assets that a user might suppliers collateral [Music] um sorry uh as opposed to with other stable coins that you might meant a stable coin using one specific collateral type in a vault users can actually mint go based on their entire set of digital assets across the RV protocol so as we now have this diverse range of assets this mitigates the sort of concentrating on one type of digital asset just back and go so how does go work go as an erc20 token designed to maintain a stable rate pegged to the US dollar despite Market volatility so it follows the same process when you're interacting with the RV protocol you supply collateral then you can borrow go and then repay the go debt and so as goes over collateralize users must as I said must Supply assets more than the value are going to be minted and go is also designed to accrue interest when it is borrowed um so as I mentioned the Rave Dao before they make all the decisions relating to go so this can include the interest rate this is the collateral that you can supply and any changes to it as well [Music] so A New Concept that has been introduced on building go is the concepts of facilitators so a facilitator is uh essentially they have permission from the RV Dao to Mint and burn go and each facilitator is assigned a maximum bucket capacity so how much go they can mint from um and so in the latest Army governance uh development update from the ra companies it's been recommended that the RV ethereum B3 pool will be the first facility to launch go so you'll be able to Mint and burn go through via the RV V3 pool and this is due to the already extensive risk mitigation features that are already through the rv3 pool and so if you are actually hacking and you're not just here for the tickets um how do you integrate with go so if you're looking into the smart contracts you can get started with the go contractors loads of links online so I'll link them later on Discord and on Twitter and um you can make use of the npm packages available so there are two or three packages for the RV protocol and then there's one for go and you can install it into your repository and it doesn't matter if you're using hard hard hat or Foundry you'll have access to all the contracts there if you're building a front end you can use the RV utilities JavaScript SDK so this is a really great way to fetch fetch data and transform it it's really simple to use and you can use it for your front end and then also if you're looking at the data analytics you can use the subgraph for RV and go now to look at the JavaScript some JavaScript examples of how you could use the JavaScript test UK so as I mentioned before you have to Supply collateral before you can borrow minkgo um so here this code uses the the SDK so in this case we're making use of the deposit function in the re protocol we need to pass all the parameters and so for example here we have the user address the user adjust the address of the reserve that we're going to deposit into the protocol the amount you want to and how much that and on behalf of which is sort of a unique variable where it's just who you actually it's applying for and then after you've supplied the collateral you can then borrow a go so as you can see some of the parameters are the same or very similar and it's important to note here that the interest rate mode is a variable so at launch the RV companies is proposing that there'll be a fixed rate but just given the implementation of the go Reserve it's a variable that token here so just to note that that if you are integrating okay and then if you need to repay some of the go debt so if you this allows if you've been using the RV protocol before you'll know about health factors and that if you repay your go debt you will be able to increase your health factor and this helps domesticate any liquidation risk that you might car and so again very similar you just input the correct parameters and should be good to go so if you aren't wanting to use the SDK and you're looking more into the smart contracts and we're going to just do a really quick live demo of um this works so here we have a repository which again I'll link online on in the Discord Channel as well so a lot of it is already we're just going to set this up really quickly oh I've already set this up quickly um and if you want to you can just follow the get started thank you um yeah so you can follow this at this get started a bit here so it just helps to get sped up so we're just going to test we're going to create a test file and um just test mint and go so here we've initialized the contracts already so for we're going to use Dyer's collateral this is the pool contract from the RV protocol which is kind of the main contract that you would interact with and then the go token contract again there's like a setup set up here so you're running the girly for testnet sorry can everyone see that or do you want it bigger [Music] um so sorry so here we're going to test uh test minting go so as I said before you have to supply collateral so we're going to supply die using the RV contract so as you can see here we need the asset and amount who we're supplying on behalf of and then the referral code which will just be zero so we can say that we are supplying to the pool we need the address of the of what we're going to supply so that is going to be die and then sorry you can see all my favorite ones and we're going to say that we are the user sorry I should have said before we we've already initialized our address so we're going to be the user here okay so to use RV pool we will need to approve the the die funds that will go in so diet.proof and then approve the pool okay and then we're going to Mint Tango and as I said before about the variable the variable mode so this is going to be set to two because of the the way that it's implemented in the contract so we want to borrow go so we're just using the same tokens that we initialize above so we want 10 variable mode two and then because we are mincing it as the user and so we want to send 10 to our friend Ronnie um so we can initialize the running address and we will just address and then we're going to transfer the 10 go to Ronnie assume you all know Ferrari that it's running so let's see that and then just test okay yay it worked I didn't think you would actually clap like it's fine okay so as we have sent 10 go to Ronnie Ronnie says thank you bye Rave tickets QR code everyone you're all flakes just to say that's yes yes put him do I have time to test it typescript um it's it's just the JavaScript sck okay anyway oh sorry okay five four three two one okay this also doesn't guarantee tickets just to tell you so you might not get one um but okay so we have so for the actual hackathon we have ten thousand dollars for the best projects on Ave and go with uh first 3500 second two thousand five hundred third one thousand five hundred and then the the five best go Integrations will receive five hundred dollars each um and then also for the best uh best projects that build on RV and go you may also get Robbie tickets so if you've not been successful now build on our way and go and then we can hopefully get you set up so we have some some ideas here these are all Linked In the in the 8th Global um prizes page so it's just some ideas of what you can get started on we really want people to build uh look into payments so like create an app or a plug-in to buy and pay would go anywhere we were really interested in and what you can come up with look and I know a few of you have come over and said about account abstraction so that's really great we're really interested in that and there's so many different things that we Roots you can go down on the RV side again there's so much here we Health fact simulator would be really really good to see because if you use are they regularly you'll definitely know that how important this health factor is um governance visualizations it would be great to see what what aspects you can look at from Ave governance and ZK proofs definitely looking to utilize ZK proofs sorry that was not up here um and so yeah the uh this is not a Runway ticket this is the this is a link to all the resources on the East Global prizes page so um we've got all the links for the prizes the ideas that we have tons of resources for all the docs and I will link everything in this chord as well um so thank you all very much for coming um we we have a big RV Ran's team here so if you want to come to the booth come and see come and grab some swag and we're here to answer any questions we'll also be here tonight as well like uh later on if you want to talk through any project thank you very much [Music] thank you [Music] [Music] foreign foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] thank you thank you foreign foreign are we good not yet okay how is everyone feeling today excited to hack yeah nice we're good okay cool okay so uh today I'm going to be talking about lens protocol and I want to introduce myself I'm natter David I'm the director of developer relations at Ave and lens protocol I've been a developer for about 11 years I've been in the traditional space for about nine years like non-blockchain and I've been in web 3 or blockchain for a little over two years and today I'm really excited to just make a quick announcement we launched the lens SDK which is a really really big deal for us so thank you so the the workshop that I'm going to be giving at the very end is a very short Workshop mainly because the lens SDK it lets me do this in just a couple of lines of code if you want to try it out you can check out some of the links that I'm going to share later you can go to our Twitter and see the blog posts that kind of goes over this huge team effort from everybody at Linds and Ave from designed engineering so we're really proud of what has come out of this and hopefully you'll really kind of like how it allows you to really quickly build and get started without a lot of code or without blockchain knowledge which is the big deal and at the end I'm going to be doing a quick Workshop that is a code along from scratch building a full stack application with next.js server-side rendering routing everything and it's a really great way to get started with lens along with some of the tutorials that we have in our documentation this is all the code that you'll need to build what I'm going to build so example code base is there along with a step-by-step guide so with that being said I want to talk about lens and I want to answer the question of what is lens and I think the most succinct way to to put this for the just general average person is it's the social layer of web3 but here I'm speaking to developers so I want to describe it more from the terms of how you might build with this and with it being a social protocol we offer not only the actual underlying infrastructure at the blockchain level that you might assume would be there with a web 3 product but also a suite of tools and apis that allow you to really easily and quickly build social applications or integrate social features into your applications without a lot of code and without needing to manage the back-end infrastructure and this is a big deal because we talk about Mass adoption in web3 but a lot of the use cases that come out are actually really targeted back at us like we're big blockchain Maxis often and we like dealing with tokens we like doing all the stuff but when we get outside of our bubble we realize people just want to used highly uh like polished applications that bring a big value proposition to them and therefore we need to kind of build for those people and with social there are 4.9 billion people that are using social applications today so when you think of building for the masses you need to think of a use case that will appeal to the masses and this use case obviously resonates but it's one thing to kind of have an idea and another thing to actually build and execute and have a product that allows people to actually use it and for developers to build on it and that's really what lens is and when we think about social applications we're not only talking about Twitter Tick Tock and all these other things that we consider social apps when you start diving into the average application that you use on a daily basis you start realizing that there are social features built into so many of the apps that we use every day GitHub has a way for you to follow your friends and see the feed of the apps that they're building things like stack Overflow again I'm speaking to developers have social features and social components kind of built in and instead of having to kind of build out all of those things from scratch you can easily start integrating these things using a manage infrastructure like lens similar to how you might use alt zero to implement authentication in your traditional web 2 applications or you might use serverless functions to implement some type of custom executable code without running your own servers you can use lens to implement social features without building or maintaining or dealing with any of the back-end infrastructure and that's what I want to talk about now is like how does this actually work and really to kind of dive to make this succinct you could think of the base layer of lens being a set of smart contracts deployed to polygon but the value proposition really comes from all the things that have been built on top of that as well things like a really simple to use API that gives you a lot of flexibility on querying the data and getting different selection sets for the data that you want to present to your users graphql is what we use and this allows you to choose and and filter and do sorting and pigeonation all these things that you need for a polished ux like Twitter when you think of a smart contract you're typically Limited in what you can do there you have a couple of API calls but you can't say give me the last hundred users that have signed up that live in this city that first name starts with P that have all these different characteristics similar to how you might query a database you can't really do that with traditional blocks and applications but with our graphql API you can we also have implemented gasless and signless transactions for users to use our your application without having to pay gas and without having to sign transactions and that is one of those are like the two in my opinion uh biggest barriers along with wallet ux for the average person actually start using these applications when you tell a user hey I launched an app go use it you know you can excite them about it but once they open the app and you're like oh by the way you have to go and buy tokens and then you have to transfer them to this network and they have to be on the right Network and they have to be the right token on the right Network and then you have to like create a wallet this is a massive massive area of entry for most people what if instead we were like you can just go use the app I mean that's that's kind of like where we want to go and in the past this wasn't really possible because transactions cost a dollar or five dollars or even 10 cents per transaction and at scale that just doesn't make sense but with our infrastructure we recently even rolled out a more scalable infrastructure called the mocha the last 65 000 transactions have cost 26 dollars combined Which is less than a single ethereum transaction on a bad day so at that scale you can start thinking of subsidizing transactions the same way that AWS and Google are being used to subsidize transactions on Twitter and Instagram there is a uh there is an infrastructure cost but they're not offsetting it by asking the user to pay for it they're dealing with that themselves and the user gets to use the app for free and everyone wins uh sunless transactions are also a big deal every time you make an interaction you don't want to have to sign a transaction with lens all these actions are covered and handled by a dispatcher which you can enable and disable for non-financial transactions which are things that you shouldn't have to worry about if like you post something it's not a big deal if it's just a comment or something but it's not something that will ever enable a financial transaction on your behalf and then the developer experience as a developer that's focused on devrel for a long time this is the thing that I get the most excited about because we focused a lot around developer experience and we continue shipping new products and updates just like today with a lens SDK and I want to go over some of those things I mentioned the lens API which is just a really really great way to query for your data at the very base level gives you a ton of flexibility pretty much anything you want to do any selection set you want for the most part is available there and then to make that even easier we've recently as of today officially launched the lens SDK and this is kind of how the lens SDK fits into the stack I mentioned the set of smart contracts which is the lens protocol base layer and then we built the graphql API on top of that but to use graphql there is a learning curve for certain developers because you have to actually understand how to query for the data you have to deal with setting up a client things like that and also the queries can sometimes get kind of verbose they can be tens of lines of code or even hundreds of lines of code so the lens SDK sits on top of the graphql API so you don't need to know anything about graphql and you can actually query the data from the lens API with this many lines of code import call it query you have the data coming back and this is what we're going to be using in the tutorial that we do in just a moment we also have the react native lens UI kit some of the most successful apps on lens or mobile apps and we want to make it really simple for people to build mobile apps so also with as few as two lines of code you can start building mobile apps a couple of the apps that have been winning hackathons have started boot shopping their app using the react native lens SDK and have moved on to kind of continue building and iterating and even getting funding and stuff like that so this is a really simple way to kind of bootstrap a mobile app with only a handful of lines of code we also have a way to do Integrations so the lens SDK and the react native lens UI kit and the API are mainly done to actually build uh you know social applications though they can be used for Integrations but the widgets are focused at mainly Integrations so if you want to say I want to add a sign in with lens button to kind of have this digital identity layer without having to build it myself or I want to allow a share to lens button so I can get a large number of people their eyeballs on the thing that I'm building without having to kind of build my own distribution Channel you can do this also with about two lines of code so we have share to lens sign in with lens follow on lens we have Publications that you can kind of drop in similar to how the Twitter have Twitter embeds all types of stuff there you can embed profiles and a lot of things and the the UI for this looks really nice these are actual pictures of like what it actually looks like you know when you render that so there's a lot of pre-built design in but you can actually configure it by passing in props and things like that and then finally what we've been really excited about lately is the lens bigquery API and data set which was released a few months ago that has all of the data from all the transactions and interactions that have happened on lens available in a bigquery data set with over 50 different tables that you can query from so people are building Ai and machine learning and all types of recommendation algorithms on top of lens Now using this and the great thing about this is you don't have to really be an expert at anything to get started with this all you have to do is actually go to chatgpt and say hey how can I create this query on on bigquery it'll literally give you the the code and you can paste it in and people are starting to build some really cool stuff and another thing that we're seeing adopted a lot is direct messages that are encrypted using xmtp this is a really great protocol you don't need a lot of code and the cool thing about this is all the messages are interoperable between between all of the lens apps using a special namespace that we have that has been adopted by most apps in the ecosystem and people are even building like a Unified Inbox so you could think of what if Twitter Instagram and Tick Tock and all of these different apps all share the same messaging protocol so you didn't forget where the message left off every day I meet someone and they're like oh we talked and I'm like where do we talk telegram slack I've forgotten one of us forgot but what if it was all in one place and this is kind of what's happening with xmtp and lens ecosystem I would say um beyond that I'm gonna just talk about composability and extensibility a little bit because these are like a couple of core things that are not really lint specific they're more like web3 or blockchain specific but they shine really well with lens so with with lens you can actually build in custom functionality into the protocol itself almost like if you wanted to send a pull request to Twitter and you knew that you could actually get a feature added or if you wanted to add a featured Instagram that's kind of what's enabled through custom modules so a custom module really is wide open for anything on chain so you can program things like you have to be following my friend to follow me or you have to have collected one of my nfts there's a lot of stuff that you could think of that can go here so an example of what this might look like is this is an app that has implemented a few of these custom modules and you can program and specify all these different functionalities optionally for someone wanting to publish a uh any type of publication to a link app so in this example you can optionally open this window and say hey the person that is collecting this has to be following me and it's going to cost a dollar and I'm going to limit this to 50 of them or with something like waves you can say I'm going to put ten dollars and into a campaign and everyone that mirrors this gets one dollar but they have to have at least a thousand followers there's a lot of things that are happening there that are becoming like really interesting another example is split Revenue so let's say you see someone has built something or you want to do a fundraise for someone and you both have split the work or whatever scenario you could think of you could put all these different addresses into a publication and you can say I'm going to split the revenue from every collect here and all of that Revenue gets split immediately when a collect happens you know because it's on chain it's just all permissionless and there's no middleman and it's really simple so beyond that composability I'm going to speak about composability at the from the developer's perspective but also the user's perspective from the developer perspective I've mentioned um like this idea of managed infrastructure I just want to underscore this this is kind of huge because when you're building a startup it's very expensive to hire devs today and it's also very kind of hard to find high quality debts and most Dev teams need a front end and a back-end team at the at the least and a back-end team often includes infrastructure Engineers devops back-end apis like all of these are often separate skill sets but instead with a managed infrastructure like lens you don't need anything on the back end you only need front end and therefore you're eliminating a large number of devs that you need on your team or if you take that same number of devs you can focus more on building a higher quality polished front end so we have developer teams of one shipping amazing apps like butterfly on lens that are just really really great and you you would be blown away that there's only a single developer on some of these teams um so that's a big thing I wanted to kind of point out there and also you inherit the existing user base and ecosystem of lens so if you are trying to bootstrap an audience that's often kind of hard but with lens when you launch you have that built-in 100 x thousand number of users today and then in the future as we onboard a lot more and scale that up you're starting off with a big number of users instead of having to kind of start from scratch which is a big deal for a lot of developers and not only users sod there's a couple of different things that go that are a big value prop you know not being able to lose your account because some random person decides that you said something wrong or your government shutting it down for whatever reasons but the really cool part is that every single app that comes online you're now Boot shopping that audience across that app a good example of this is if you built a big audience on Twitter or YouTube and then Tick Tock came out you're starting from zero but every time a new app on lens start launches you're starting from X number of followers and you're building upon that and the outcome of this is that every time a new experience comes online you can choose to buy into it or not buy into it and you have a new way to be creative without losing your audience you could just try some of these apps out see how you like them they're around 100 or so apps that are live today that I would consider like somewhat high quality that you can try out um next I'm going to touch on the technology stack and then we're going to jump into a demo and then we'll be done so when I talk about the technology stack I've already talked about that from the protocol level I want to talk about more from the user like if you're a developer what's your Tech stock going to look like it's going to look very similar to what you've probably done in the traditional blockchain space in some aspects but you can also again abstract some of that away with like the react hooks SDK or the react native lens UI kit there is one area that you will need to deal with that isn't built in just yet that I know of it's uploading metadata to store it in a permanent way or to store it however you would like it so if you're posting a publication almost like if you're creating an nft you have to publish the metadata that is on that is for that publication somewhere most of the time we recommend using bundler with are we because it's very fast and it's very it's permanent you could also consider using something like ipfs we have a lot of apps building live video streaming or just video applications using live peer and that's being adopted more and more and that's something I would also recommend if you're looking to build a video application the traditional libraries for making actual contract calls are often used so if you want to use ether's JS wag me rainbow kit all that stuff works great on the front end we're seeing flutter apps we're seeing native iOS apps react native is a big deal there's a lot of people building react native apps so anything that you want to build on the front end is pretty much supportive I don't think we really have a lot of flutter like support on our end but we have a lot of high quality flutter apps that are out there they're just using existing libraries that facilitate API calls so I want to touch over a couple of the major Concepts and then this will be it before we do the demo so who here has used lens by the way okay cool and if you're a developer by the way and you want a lens profile come down to the booth we'll get you set up so one of the the main Cornerstone I would say of lens is kind of this idea of a profile because the profile is what everything you end up doing is attached to and therefore you can kind of take this and move it around and have somewhat ownership over over it so the profile is like your username and then the comments posts and stuff are essentially attached to this profile and then under a profile you will create a publication and a publication is either a post a comment or a mirror this is just data that you're publishing to the network and this is essentially a Content URI that's attached to the publication that has all the content that's associated with that again I recommend something like bundler with our weave because it's permanent and immutable um but you can also use something like ipfs and you can do a lot with Publications one of those things is gated access built directly into lens sdks or this ability to build out a gated publication so you can say all of my posts are public by default but for this one I might say if you're part of developer now you can read this but everyone can't or maybe you've collected my nft and this is for my nft holders all that stuff is optional with the get it access and then collects are kind of how you take a publication and turn it into an on-chain artifact so every publication isn't actually like an nft but if someone collects that then it kind of turns into an nft and therefore you can add a lot of rules around collecting you can say I want someone to pay me a dollar to collect this or I want uh you to be following this person or whatever a couple of examples of really cool things that have happened you know recently on lens an artist that is a musician had an old MP3 or something that he created five years ago he was like hey uh I just want to put this out there if you want to support me this is one of the songs that I made early on it's a dollar to collect he had like 3 500 people collect that it took him five minutes to post he made 3 500 bucks a really great way to connect to his audience in a really great way for the audience to kind of support the Creator and um for the 3500 like users you know at scale you would think oh a dollar collect like that's not a big deal because people are used to like five thousand dollar nfts but at scale you can say something could be 10 cents or 50 cents and you can actually have a reasonable amount of collects that would make up a valuable value proposition for uh an individual so with that being said I want to jump into the demo the GitHub repo for this is at github.com3 Lens protocol Workshop it looks like this and I'm going to just start off with this empty nexjs application and what we want to do is we want to use the lens SDK to build out a social feed oh looks like my thing is off sorry about that oh oh okay that's you okay okay gotcha it looks like I need to just change the display mirroring all right actually I need to do something else all right there we go okay so this is um yes GitHub repo github.com at the very top should be the lens protocol Workshop and this has everything you need to build out an xjs app from scratch with server-side rendering and rallying and everything like that and we're basically starting off from this empty next.js application this is kind of what you might expect and we want to just open this code base and it is what you would expect from a typescript project with nexjs nothing really going on yet I want to start just by importing the react native I'm sorry the react lens SDK one of the different apis from there is called use Explorer profiles this will just return a recommendation algorithm type of preset for you to get a bunch of profiles and by default it will give you a selection set but you can also pass in props to identify and Define like what you want to come back but at the most basic level it's very simple to use you could say const data and then you also have this loading variable that you can use and you can set that as use explore profiles and then we might just log out this data just to kind of get a view of what this data looks like and then one other minor modification I need to make is because next.js recently moved to version 13 you have to define a client-side application by saying use client all right so our app is loaded obviously nothing's changed because we haven't updated our user interface but already with two lines of code we have this data that's coming back we have 10 profiles that have come back from the recommendation algorithm and we can even say Okay I want to actually limit this 225 and now when the app reloads we should have 25 come back let's see if that works maybe there it goes okay so we have 25 profiles coming back now I want to actually render these profiles to the screen and show the metadata associated with each profile so I'm actually going to go back here and like delete a lot of this code and we kind of want to start from scratch so I'm starting over essentially from this empty this empty component here I'm going to go ahead and import a couple of things we're importing that same use explore profiles API we're importing a link which allows us to link to pages from next.js and then this format picture utility which allows us to format an ipfs hash or an R weave hash into an uh Gateway and actually I think it would be nice for us to build this into the SDK at some point but for now we're doing it manually but essentially it'll just say ipfs hash okay we want to say ipfs Gateway slash ipfs hash it's just a very simple function and then once we have all those things we're going to create the body for this and if you look at this entire component it's 38 lines of code including a couple of white spaces but to start off we're just taking the data that we're getting back from the use explore profiles and we're limiting that to 25 and then we're just rendering those in our app by mapping over the data returning the profile image and that's about it so if I save that and I go back to my app and I reload we now have a social app and the data fetching part of this was only three lines of code with including the Imports of the before lines but we already have a very nice selection set of data coming back and there's a lot more data that's with this so you have like the cover image of the user you know a lot of other metadata about that person so that's the simple intro because I don't have a ton of time if you continue with this Workshop you can actually drill down and click on a profile and view the metadata and all those Publications for that user and I think I'm running out of time so I'm not going to go into that if you want to learn more about lens definitely check out the lens documentation at Lens docs.lens.xyz if you want inspiration for other apps that are out there you can go to lens.xyz slash apps if you want even more inspiration about what we want to see built you can go to lens.xyz slash apps and click on lensbursts there's a hackathon entire section there there's a lot of ideas that we'd like to see there and there's even links to things like our grants program and stuff like that if you want to see some of the most recent updates like we made including the lens SDK announcement you can go to mirror.xyz slash linseprotocol.eath and that's it thank you so much for checking out my talk [Applause] [Music] thank you [Music] [Music] foreign [Music] [Music] [Music] thank you [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Applause] okay today I will be talking about subgraphs that are fed by substreams which is a new technology by the graph built by one of the core teams of the graph streaming fast first about me my name is Sarah I am a med student at Wilkins University turkey I'm from Turkey I also work as a developer at graph Ops which is another core team at the graph today we'll be talking about what the graph is and then bounties quickly about subgraphs and then we're going to compare the subclassic substreams and then talk about sub streams and sub graphic by substreams which is the main point of this Workshop about the graph graph is the data layer of pep3 it allows you to index and query blockchain data and we'll see how it does that in detail in a moment about the prices so if you build a sub graph or use an existing subgraph you might be eligible for bounties and also if you use substreams or deploy your subgraph to the subgraph studio you get bonus points for to use substreams you should pay attention because I'll show you half so the subgraphs very quickly there in ETL process extraction transformation and load of blockchain data and the way they do it is I mean they consist of three components the first is sub graffiano is the Manifest file which is the configuration file here we see that we're listening to ethereum you can see it here and sub graphs listen to the contract events so we have to specify which contracts we are listening we have one contract here which is the GRT contract in my example GRT is the token of the graph and then for each event we have a Handler which transforms the event data to the entities we want in the schema in the store of the subgraph here we are seeing a simple Handler it takes the event data and then populates the fields of a entity in the schema we Define the shape of the data we want in the store as I said so okay substream is a new technology and if you know about subgraphs it might be a bit confusing so we're gonna compare them as I said subgraphs is an ETL process the whole thing extraction transformation and load but when it comes to substreams I write it their ET but actually it's the transformation layer but extraction also comes built in if you are developing substreams the extraction happens by firehouse and other technology developed by streaming fast and the transformation is done by substreams but there is not necessarily a load layer so you have to Define where you store your data at the end and we call them syncs in sub streams that's the term that we use and in my case my sync will be a subgraph that's why a subgraph fed by substreams that's the name and another difference is that subgraph handlers the functions that transform the data they're written in a Sam script but in sub streams we write them in Rust also substitutions are composable so substance consist of modules many modules that transform and you know filter data and if you have a module or even the whole substream developed and then processed you can reuse it and other developers can use it as well and substrings are parallelizable which means that let's say you're processing I don't know two millions of blocks you can process the first million in parallel the second million which makes things a lot faster that's why they're faster I mean one of the reasons why they are faster than sub graphs also in subgraph case you can only listen to the events and maybe occasionally make you know contract calls but in sub streams you have the whole block data which is my favorite about substreams you have the calls transfers logs even the store changes so everything that happens the block you can see in your substreams also since you get the whole block and the block comes with ordinals so everything that happens has an ordinal has an order in the block so you get you know what happened before what you know you you know the rank in the block of everything that's another thing now when it comes to substance big subgraph we get rid of the mappings with where the transformation happens we replace it with substreams and we keep the subgraphy ammo and the schema but subgraphy ammo will look a bit different I will show you in a moment because our subgraph no longer listens to the block but it listens to a module from the substreams substreams as I said they consist of many small modules here I will show an example and this is the module graph of a substream we have the black the block is the input of the map map transfers this is a module and this map just you know filters data and feeds the data to downward modules and then the other modules do their own transformation and filtering and then feed it to the downward modules at the end in our example since it's a subgraphic by sub streams we have a special module which is called graph out which will feed the data to sub graph store and I have two more maps map accounts and map warp total Supply change that's just for you know demoing just showing you how to use stores there are functions of stores but we're not going to use it for our subgraph so sub streams we have two types of modules as you can see maps and stores the maps they take bites as input and then output buys and in the meantime they transfer and filter data and these bikes are encoded this product above messages here you can see a product of definitions that you should do if you're a substream developer you should Define what type of output your Handler will have I Define the transfer just to keep it simple and here you can see the input of my module is the block and the output is the transfer protobuf I defined when it comes to stores okay stores are stable but they're not the Final store this isn't this shouldn't be confused because in subgras when we say store we mean the permanent store the database but here we have the stateful um temporary stores where your modules will use so whatever you put in the store will not be credible or anything you're just going to use it in your other modules while your substream is running here we see um this guy has the value type and update policy so the reason is that for the value type every store has a value type because stores consist of key value pairs so you set it in the beginning and you cannot change it every store will have a specific value type update policy comes from the fact that as I said modules can be run like the run time they can be parallelizable so if you don't have an update policy you cannot really merge them so let's say you process the first million block and then second million block now they have to be merged so this is where the update policy comes in if I have an ad here this store is going to be storing balances of GRT for users so the first meeting block will have a balance for a user the second million will have a balance and then we're gonna add it because that's how you calculate the balance so we have different value types you can check this this is from the docs of streaming fast and we also have different update policies you know set set if not exist in the set case the last key wins and the in set if not exists the first key events we have the admin Max and append okay now let's see how a substream looks like so we start with the substreams yaml this is the configuration for the substreams um and here we defined I don't know the file for photo Imports Etc but the important part is the modules this is what I showed you before I have the transfer module store modules other store and transfer modules um sorry map and stores and here as I said you define the valve type update policy input output everything and in the product file I also showed you this you define the input output shape of your data in Deliverance this is where you actually write your modules the handlers the first example of a module is the map transfers that we have seen here the first guy here so what this does is that we have the GRT token contract again GRT is the graphs token and we just look through all the logs coming from the Block as you can see the input of this map is the block the whole block but you know I stick to the events because it's more beginner friendly but if you want to see more advanced stuff about you know the block information there's I like store changes if you want to learn about them I can also show that to you if you come to our booth so we look through logs here and we just skip everything that's not from GRT token contract and whenever we see a transfer event we create a product of transfer that we defined and we output this now where does this go we have seen that here we Define input output so this is where the substream graph is defined here this map transfers output is the input of store balances store balances is where we keep the track keep track of the bounces of you know each user on each transfer we just add like increase the balance of a user if it's to that user and decrease it if it's from that user that's very simple but the reason why I have it here uh is because I want to show how to use the stores in Delta mode so the logic of Delta mode comes from the fact that let's say again you're calculating the balance of a user but a user might be making 10 you know transfers in one block maybe they did a multi call maybe they have about something like that and then the value of their key the account address will be the key the value will be the balance it will be changing 10 times in one block so these are called Deltas the changes in one block so the whole sub streams graph is executed on each bug so that's uh that happens on each box so we have the Deltas of the block if one star changes multiple times even if it's one we're going to have one laptop so in a store one is get the store as an input from another map this map account gets the store balances as an input um you can look through deltas and here just to show you how we do that is like we get for each Delta we create an account product buff this is just for an example you wouldn't really do this but we can run this map account to see what it does I have map transfers let's make map accounts and also we can run it or we can use the GUI which looks a bit cuter so here this is the output of map accounts module as you can see there's apparently only one transfer so far the like this is right now streaming From the Block by the way so there's only one GRT transfer so we use the we see that product buff here so if there is any other I can switch but there is none and also I can switch from uh module to module we can also see map transfers here it's because map transfers was an input to store balances and store balances with an input to map account so all the map is running at the moment as we can see there is another we can just jump here another activity another transfer another transfer another transfer and so on so it's really fun to use the Glee so let's stop it and continue we have another mode that we can get we can use tourism that mode is um the get mode so with the Deltas you can see all the changes with the get mode you can have access do you remember the ordinals you can have access to a specific order the value of a key is a specific ordinal so in this example we are getting um I'm very calculating the total Supply in the first store that's very you know straightforward in the other map in the other module which takes that star as an input we are using the get functions so here I just created let's say let's calculate on each block how how much the total supply of GRT has changed the way we do it is by we have a special function which is get first which give you gives you the value at the beginning of the block the keys value at the beginning of the plug and this is the key we get at the beginning of the block here and we have the get lost we also have get EDS if you know the ordinal let's say you want to know the balance of a user at a specific transfer you would get the ordinal from the transfer and then ask for the value here using get that's another one let's not run that okay from here this is just substream so far we want to actually build a subgraph fed by a substream so we did all these Transformations and I think you can use this project it's in GitHub and I'm gonna show you the Share the link with you you can use this as a template because there are many files that you have to create and you know many things that you have to do I would just clone this and change stuff so from here we actually want this data to be stored in subgraphs how do we do it in a subgraph we have the schema and very simple schema for today's example we have the GRT entity which holds the total Supply transfers maybe I want to list all the GRT transfers in my front end and the account just balances of each account now the subgraph yaml will look simpler and will take graph out as the input as I said no longer it's like it's not interested in the block anymore no handlers nothing and the way we do it is as I said there is this special graph module we use entity changes so entity changes are again proud above definitions which just go and change the store on each entity changes photo buff coming from the graph out so let's say you your transfer entity this is the name of the entity from the subgraph story come there comes the transfer entity you give the ID specify the ID and the ordinal and then there's the operation here it can be update delete create but if the entity doesn't exist it will be created when you use the update operation so I always use the update operation and this change function will just update the field of your entity with the new value this house does it and the other entity change is using the Deltas it's just updating the balances of accounts on each Delta and this guy is updating the total Supply on each Delta and the output will go to the subgraph as I said and eventually we're going to have the subgraphed by substreams now let's run the graph out just to see what it outputs Rapha again I'm using we can also run like use the normal run command let's see okay the graph out we're seeing entity changes what happens in this specific block this is the current number current block number that was the transfer so we are seeing it transfer entity change of course if there's a transfer transfer entity change there will be an account balance entity change and a GRT total Supply entity change so since this is running a bit slow because of the internet I don't have any other activity happening until this block so we can stop this and finally we will be deploying our subgraph to the studio to be eligible for you know not only bounties but you know also get bonus points the way we do it Open subgrass studio from here we connect with our wallet and here I already deployed this but when you create an account collect which connect with your wallet and to create a subgraph you're gonna enter the name and select the network this is not really important because you're not going to publish it you're just going to deploy it those are two different things you come here you if you already built the subgraph and it's running you already have the graph CLI and you don't do this because this is for initializing a usual subgraph you just skip this in it you authoritate the studio and then called gen graph build and deploy then your subgraph this is a subgraph fit by substreams this is the example I showed you I deployed it can be created just like a normal subgraph so to finish we have where is it okay it was here we have a QR code where you can see the prices there are job openings and hacker resources and linked to the repo and to this slides as well thank you thank you okay no not just on ethereum there are also other chains but they're coming like they are being added there's yeah there's Solana I think and Cosmos some of the cosmos chains but the best one so far right now is ethereum the question was that is the substance available on neonatarium I forgot to repeat any more questions okay thank you [Applause] foreign thank you foreign foreign [Music] cool I'm just gonna go ahead and get started does the music still play in the background is it like groovy okay okay cool oh this is very loud okay uh hi guys I am is that is that too loud okay hi guys I am Emily I am the developer advocate for Linea so Linea is a ZK roll up I'll be going literally from Ground Zero all the way to like let's talk about arithmetization what does that mean so uh let's get let's break down the segment right Linea will be a type 2 ZK roll-up what does that mean so starting from the literal base level right so blockchain trilemma is essentially the a pick two situation right so you have scalability decentralization and security um essentially you have to pick two of the three right so in the case of ethereum what they've done is they've chosen decentralization and security what does this mean then if we're sacrificing scalability that is what causes um High transaction fees as well as like uh what do you call it uh slow speed right so how do we fix this um moving forward this is the layer two solution so we've started from the ground we are going one layer up we'll actually I guess one layer off from blockchain trilemma but now we're talking about layer one so layer one is the underlying foundation and base blockchain right so layer ones take care of your node operators The Producers um the transaction data and the consensus mechanism so examples you might have heard of Bitcoin ethereum I hope you've heard of these Avalanche Etc right and so when we go into Layer Two so Linea is a layer two this is a completely separate blockchain right so this is the part where we're solving scalability um one thing to note specifically is this piece of data availability right so the way Roll-Ups work is they're going to roll up a bunch of transactions and the thing that makes them different is they actually post that transaction data back to ethereum so something people often get confused by is like if you've heard of polygon polygon is a side chain so polygon has its own consensus mechanisms that data is not posted back to ethereum so you're not deriving it security obviously this has changed now with polygon ZK EDM that is a layer two but polygon proof of stake is not a layer two um so that is basically the layer two solution there are multiple different implementations of layer twos but right now Roll-Ups are the most popular um so now now that we know what layer twos are let's actually get into the roll-up space right so what exactly is a roll-up what is it made out of so roll up has a few different components the first piece is they have an on-chain contract so this is a roll-up contract that exists on ethereum this stores the roll-up box monitors the state tracks the deposits I'll get into deposits and withdrawals later you have the off chain VM so like I mentioned before roll ups layer twos help with scalability the way they do this is they take the execution layer off of ethereum so they do all of this through the off chain virtual machine and the last piece is like it's a bunch of things operators validators aggregator sequencers but essentially you can think of them as the people who take all the transactions and then publish that block so this is the anatomy of a roll-up um like I said I was going to touch on deposits and withdrawal so this becomes extremely relevant when we start talking about optimistic versus ZK proofs right so asset transfer process the way Roll-Ups essentially work is you basically lock up eth on this roll-up contract and then equivalent amount of eth is minted on the L2 so then that's when you start using Linea eth um or I guess like uh scroll eth or whatever eth on that L2 the other piece is when you go backwards so now it's like I've done all this stuff on Linea I actually want to withdraw it back on ethereum what is that called it's called withdrawal the way that works is it's brought onto the Ethan the L2 is burned and then released to your account this is super key when we start to talk about optimistic versus ZK roll-ups so now let's talk about his optimistic Roll-Ups right so with Roll-Ups we're posting that data back to ethereum what does that mean is before we do that ethereum needs to know whether or not this is true or false right so there's different ways of doing it optimistic proofs are optimistic Roll-Ups to use something called fraud proofs so here specifically they're called optimistic Roll-Ups because they just assume it's valid um that is a less secure trust assumption the way they get around this is they say hey there's a seven day challenge period right and so in seven days someone can post a fraud proof to say hey this doesn't look right let's prove it true or false and if it turns out to be false that will be rolled back if it turns out to be true it will be pushed down so again like this is really problematic for immediate liquidity right because of that challenge period there are existing Solutions like trusted bridges that will do that immediately for you the problem again is like this is a bridge the other pieces they haven't solved the use case for like how do I immediately withdraw like an nft for example um so things you have heard of are like optimism arbitrim based which is like the built on top of optimisms like super stack so now we're talking about zero knowledge roll up so this becomes relevant for linear right so instead of using a fraud proof you're using something called a validity proof specifically when we're talking about zero knowledge Roll-Ups that validity proof is a zero knowledge proof um they don't require a challenge period that information is essentially sent into that proof generated and then submitted down um I want to note when I talk to a lot of people who kind of aren't familiar with the space they hear zero knowledge and they immediately think privacy that's not the case Zero knowledge proofs in this case for Roll-Ups are just helping for compression of the data whereas zero knowledge in other cases that's going to be a privacy thing so don't get the too confused I can talk about that a little bit like offline or you can ask a question later but examples include like obviously Linea but ZK sync polygon ZK ebm scroll and Stark net so now we've covered you know layer twos roll up zero knowledge what do I mean when I say A type 2 ZK roll-up so first off we need to talk about what is a ZK ebm so ZK ebm is that virtual machine that will take that smart contract transaction utilize the ethereum infrastructure and also translate that into a way ZK proofs can understand so this is actually when I talk about arithmetization this is also why ZK like Roll-Ups came out after optimistic Roll-Ups right because ultimately what a ZK proof is a math proof how do you like translate um what do you call it computer programs into polynomials that math can prove that's really hard right and then alongside that like ethereum itself is not very compatible to being able to translate into these math parts so this is where the zkevm comes from this is where we also start to have the different types so I'm going to touch on the different types so at the highest type that's a type four this is high level language equivalent so for those of you who are ethereum devs that's going to be writing in solidity that's writing in Viper this is actually going to be written or compiled down into kind of a different VM right so it's not byte code compatible what this means for you as a developer is your tools will change a little bit so how many of you have deployed a smart contract before okay so most of you right so you might be filming those like hard hat Foundry stuff like that they are not natively able to handle a Type 4 ZK evm the work around there is these people actually have plugins so you might have seen like a ZK sync hard hat plug-in right um that is because they are not bytecode equivalent their thesis is like hey actually ethereum is not great for ZK proofs we're going to be faster because we're changing it right um the next piece is type three is kind of a transitionary stage this is where most of the type 2 Roll-Ups are right now and so by that I mean um Stark or not not Stark net um ZK polygons linear scroll are all going for type 2. so what that means is we are language level equivalent we are also byte code equivalent right so we are the closest to ethereum which is a type one um then I guess if you say as you go farther away so in terms of like I think the thesis of people or the projects that are chasing type 2 ZK edms is you're taking advantage of the existing developer tooling space you can change the fastest as ethereum changes because it is constantly changing right um and yeah that's kind of the different types so um kind of in the sphere of is it still not okay um cool you can pretend that you saw this oh yeah okay whatever it's there nope well hopefully you have good memory so you saw what that meant but it's basically a graph of I guess compatibility versus performance right so the assertion is essentially the less compatible it is the easier it is to make it perform it the more compatible it is it is harder to make it perform it that is true I'm going to say um I think within the ZK space like the tech is changing I don't think the assertion that being farther away will make you faster um so I I mean like if you just take social proof of like people didn't even think ZK Roll-Ups could exist we are at a place where people are building type twos there are projects that are also building type ones and that's not the case anyways uh I'm gonna move to the next slide and you're not gonna see it which is really sad because I have another really cute Kermit GIF but essentially the slide says the same thing from the beginning Linea will be a type 2 ZK roll-up hopefully all of you know know what that means now right um and so now I'm going to talk about exactly like what Linea is specifically right so Linea is the product of four years of research and development at consensus we actually started out just doing like ZK for kind of like uh what do you call payment privacy and then kind of as we were working on that ZK uh research we realized hey actually the tech we're building is really compatible with rollups and that's kind of how we moved into that space like I said we are on the way to zkevm it's really interesting because our approver is powered by an award-winning ZK circuit Library called gun Arc it is open source it's used by other projects as well we went public test net in end of March at this point we have over 11 million transactions uh one million wallet addresses 196 000 deployed contracts so the engagement is huge right um and uh cool so kind of like that's the overview of Linea kind of where you build so I think something I get a lot is like there's so many Roll-Ups how do I choose right so there's a few factors to consider right so the piece I said finality uh how is that transaction when can you withdraw it um that's the optimistic versus ZK kind of question right so challenge periods optimistic Roll-Ups have that that's not the best thing for immediate liquidity when I talk about liquidity it's like how much people have like already bridged onto the roll-up so my users who are on the roll up already how easy is it for them to get stuff and interact Etc now the other piece I said is Network effects so this is a lot more so in the sense of as a builder um how easy it is for you to basically develop adapt there is a really robust ecosystem around ethereum already if you've heard of projects like starknet for example that start off in Cairo that creates a whole new world where someone needs to learn Cairo to do smart contract security auditing so what we're saying right here is like evm equivalence compatibility I think that's the winner of something to think about the last piece is users oh I have two less users users so how large is my addressable audience so as a like entrepreneur like I obviously want to go where the most people are right so that's kind of a thing to consider and the last piece is security I think again leaning back on trust assumptions optimistic Roll-Ups aren't as trustworthy I'm not going to say that I feel like that's really spicy but the next piece is you know when we start to talk about like centralized sequencers versus decentralized sequencers you know where does that fit into the security narrative I'm not not going to dive into that because we're talking about how to build but essentially kind of how does Linea fit into that system those images aren't sitting up exactly but essentially like I said zkbm type 2 you I've covered why that's cool I think the last piece that is really interesting about Linea specifically so when we tie into that part about liquidity and user base right Linea is a consensus product we sit within the same ecosystem as metamask in Fiora like diligence our own like eth clients I think that piece with metamask is incredibly interesting as like an L2 proposition is we are there already being able to take advantage of the benefits of the most popular web3 wallet right so when you think kind of to the Future in that sense I think that's the highest value prop in what we offer please tell me if you guys actually care more about how the prover Works than like how big the audience is because that would be a really interesting conversation but anyways last piece I guess is I kind of wanted to go over what that looks like specifically when we talk about language equivalence by code equivalence and then VM so as you can see the farther you get away the little bit is different ultimately this is kind of where the type twos are living um and the last piece then is like I said um on the linear side um we actually don't think type fours will be the fastest um so circling back right type four is their thesis is we have to depart in order to be fast um I think Linea what do you call it our Tech right now this we're really focusing on the arithmetization part um so the cool thing about ZK proofs especially in comparison to optimistic proofs is you can put a ZK proof on top of a proof on top of a proof on top of a proof and make things smaller and smaller smaller right so you get infinite scale with ZK Roll-Ups recursive ZK roles as compared to like a fraud proof for example so there's really interesting use cases there so our thesis is not necessarily that you have to make that decision between Type 4 and type 2. uh so we're going to get into the section of actually how to build on Linea my Wi-Fi has been kind of funky so I'm not going to do this necessarily live but I'll just show you kind of the different ways to do it um the slide didn't immediately change oh here we go so the first thing you need to do is get Linea East so there's a few ways to do it you can Bridge it over to Linea Gurley East to Linea the other two second method hasn't come out yet but we are building an inferior faucet to drip uh test each directly onto Linea the third method specifically for you eat Lisbon Builders out there is I am a Linea eth whale so please feel free to leverage me as your faucet you can find us on Discord reach out to me afterwards I will literally send it to you right now um Emma's over here he's BD at Linea he also has a lot so take advantage of both of us um yeah yeah but only at Lisbon if you talk to me afterwards I'm just kidding I'll always be nice to you but essentially like when I talk about the ease of use with a type 2z Canadian it's literally just swapping out your RPC right so when we talk about um truffle like that's a smart contract tool if you are starting with truffle I recommend using their next JIS box it's basically a fully full system of smart contracts connected to a front end with tests and everything the only thing you need to do actually maybe I can demo this I'll show you yeah wow okay is this big enough uh okay so uh so this is truffle dashboard um you can use this with hard hat as well uh let me open up code uh Dev slash uh Linea demos is this where it is I don't remember um I'm just gonna say it was here okay don't I don't know where I'm at right now uh so I'm just gonna exit out here do this first because I know where that is okay here's the terminal so I'm gonna do a truffle Dash board here is the thing so this does deployment through your metamask wallet if you wanted to deploy on girly you would just use girly in this case you can just switch the network over to Linea um I need a clip to connect uh and the difference here then would just be CD truffle and then truffle migrate Network dashboard [Music] so this is cool because I didn't have to show you my private key at all to deploy which is really nice this is also usable with hard hat but as you can see the difference between Gurley and Linea was literally just switching your metamask wallet right so when we go back to kind of the different tools the same thing I don't know how many of you guys use scaffold eat it's pretty common I think for hackathon devs literally just changed the default Network oh all the screenshots aren't showing up uh okay I can try and open up the code we'll see if it's working [Music] yeah okay so basically this is the scaffold yeast repo you just change your default Network like girly versus Linea or something you just swap out the RPC URL so if you look at the girly one this is what it is that's a fake inferior API all I did was say hey now let me rename this and that was Deploy on hardcat um so kind of the same thing you can do dashboard with hard hat if you want and the last piece is Foundry download it again wow so easy you just swap it out damn no one clapped with me that's really awkward [Laughter] cool okay so anyway code with my information but that's fine um let me know if you have any questions I can and I don't know if I have time right now okay I have I have like 10 minutes for questions or we can talk privately um but yeah that's my information feel free to message me for Lydia eth if you are hacking uh we have a bounty specifically that says just Deploy on Linea if you're deploying a smart contract swap out the RPC ask me or Emma for some linear Ethan you should be eligible so yeah that is it thank you so much for listening I hope you learned something today are there any questions what's going on no questions okay we are good thank you so much for listening I wish you the best of eat Lisbon I hope I recognize your face during judging okay [Applause] yes hello hello hi thank you foreign [Music] thank you foreign [Music] [Music] thank you foreign [Music] [Music] foreign [Music] [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] thank you foreign [Music] foreign thank you foreign [Music] [Music] thank you foreign [Music] I think we'll get started or anything all right well maybe give it a couple of minutes and see you soon okay yeah like two minutes big audience thank you again [Music] okay I think I'll get started this mic is a bit hard to use but all right um okay so hello everyone my name is Amin I'm a software engineer part of protocol Labs I work on a project called filecoin Saturn and recently we've been using the newly launched fevm and I'm here to present a quick intro to falcoin and fevm and give a quick demo of some of the cool things we've been building with it so here's a quick agenda of the kind of Workshop presentation today I'm going to start with a recap or intro on on filecoin and then going to give an introduction to the feem and what it's about I'm going to give an example use case of how we use it at farcoin Saturn and explain what Falcon Saturn is and then give a short demo okay so before we dive into the intricacies of uh of fvm Let's uh have a quick recap on what falcoin is and the the de facto term that we say is falcoin is a decentralized storage system that is meant to onboard Humanities most important data and you can think of farcoin as an AWS without a central entity or company that owns anything um and how does this work essentially it's a peer-to-peer Network that stores files and has a built-in economic incentive system to incentivize nodes on the network to behave well and the consensus system is essentially proving that you store things reliably for an uh a given period of time and there are some really marvelous cryptography that goes on to make sure that all of this is provable and reliable and basically in falcoin users pay to store their files on what we call Storage providers and storage providers are essentially the the nodes or computer is responsible for storing these files and proving that they're keeping these files on the network so um essentially anyone who wants to store their files or get paid for storing other people's files can join the Far Cry Network so let's implement this with an example let's say you have a lovely cat named Dolores and you love the lawyers so much you think that Dolores should remain with the world forever and you want to upload dolores's picture to the farcoin network to store it forever now you choose a nice compression type PNG is nice because PNG is lossless and you know we want to keep every feature of the Loris there for people to see and what you can do is essentially come to the Falcon Network and kindly ask to store the Lord's picture on there and what will happen is that you'll be contacted by like a storage provider you can make a deal with that storage provider there will be a fee for storing it and you can determine how long you want to store that the the dolores's picture for and you pay the fee and essentially it's on there and from there you can get reliable provable methods that prove to you that dolores's picture will be replicated and you can retrieve it whenever you want as long as your deal is valid and it's a simple is that and hopefully this gives you a better idea of what falcoin is at a network and how it works um this is kind of a more detailed slide of what happens as part of a storage deal so if you're a client you attempt to make like a Time limited deal on the Falcon Network you will make a deal with a storage provider initially the storage provider will give you an initial proof of replication and that essentially improves that your data has been replicated on the file core Network it's it's available and then over time these providers will essentially give you what's called a proof of space-time essentially just proving that they have stored your file and they're storing your file as time moves on and this is all done by some of the marvelous cryptography that's part of the the falcoin network and towards when when the the deal is going to expire you can choose to renew it or if the deal expires you can just let it expire and dolores's picture will disappear so I want to motivate how naturally to come across something like the the fvm like why do we need it how does it help falcoin so Falcon is great we can store things we can retrieve them we can make sure that this storage is reliable but let's think of some use cases now let's say that you you're a user that wants excellent user experience you want to store dolores's picture but you don't want to keep renewing that deal wouldn't it be ideal if you can automate the renewal of your storage deals that way that whenever a deal expires you can have it just like a subscription like a paid subscription and just as long as I have funds let me keep renewing my storage deal another example is that you can think of a developer let's say a developer you're trying to build an application on top of filecoin that's a photo album application um you know a natural feature is part of a photo album application would be to add permissions who can access a certain album who can edit images on the album who can upload images to an album so if you have a storage Network like falcoin and you want to build something on top of that how is that possible with such feature um another example is let's say you're a researcher you wanna you're a researcher in machine learning you want to build a nice model that detects some meerkats in your backyard and you have a nice data set for that that's stored on falcoin and now you want to train that data set so you want to Outsource that computation and pay for whoever does that computation for you how can you do that um so these examples so with these examples what I described the Falcon Network would be um really difficult to implement and the common theme between these examples is that they need what they call programmability over storage and that is exactly what the f evm gives us it enables us to add a programmability layer on top of the things that we store so it enables us to develop applications that have features like this and this makes total sense if you think of major Cloud providers like AWS they have Storage storage solutions like RDS S3 and all that but they also have solutions that complement and supplement these Storage Solutions like like Lambda compute cloudfront which is a CDN Etc companies have realized that there's a lot of value to allowing people to add programmability to their storage and the same applies for the filecoin network and that's why the fvm exists and a good question you might have is not why not use the evm that the ethereum virtual machine and the reason is that the evm doesn't have access to Falcon storage deals Falcon storage deals and that that that aspect of storage is unique and native to the file core Network so that's why you need the fvm and you cannot just not use the the evm um so yeah evm is the answer evm brings programmability to falcoin decentralized storage and this is a nice diagram to kind of display like how it's layered you can think of the l0 as a filecoin network that's all your storage um that that's your data and then on top of that is the fvm which brings compute to um to the state of the data and that enables to build other L2 Solutions on top of um the Falcon Network which do computation over data and that happens off chain all right so now hopefully it's clear what problem the fem is solving and how it naturally comes in into the Falcon ecosystem um so let's explore more about what the fvm is so what is the function of a blockchain VM essentially it should act as a runtime to execute smart contracts and it should allow various smart contracts to interact with each other and additionally an ideal feature of a VM is that it allows you to use Smart contracts that you've written for other blockchains on on that existing VM without having without you having to rewrite that or modify it and these are like the core features of the fvm basically fvm is like a multi-vm runtime for the Falcon Network and it's built on webassembly and what does that mean it means that it's built to support multiple runtimes so you can actually build multiple VMS on top of the fvm and the f evm is one of them I'm just going to describe that in a moment and you can you can bring your own VMS and build on top of that so as I mentioned um you can you can basically this diagram shows like kind of how multiple runtimes can be built on top of the falcoin network and um as long as your VM compiles to awesome you can run it on top of all coin and the evm was the first one that was launching and essentially it uh it's in it's an it's basically it's an ethereum virtual machine that runs on top of the Falcon Virtual Machine it's ethereum compatible means that you can reuse all the features of the evm for falcoin like the addressing the account types Etc and um this is just hopefully one of many and you can build any type of VM as long as it compiles down to awesome so I don't know if you really like your cat Dolores so much and you want to build the Dolores VMS where the account types are just unique pictures of Dolores you can do that as long as it can pass the volume all right so hopefully it gives you a better idea of the Falco Network fvm what fevm is and all that so I'll go into a use case so I mentioned earlier is I work on a project called fog coin Saturn and I wanted to present a production use case for the fvm because we just deployed one of the very big production use cases for uh for it earlier this year and what  when Saturn is it's a basically a decentralized CDN that's meant to accelerate retrievals on the falcoin network and um what that means basically is right now Falcon is really good at storing things and can store things reliably but we want to complete that storage Loop by having really fast retrievals because that's what that's what that's what we expect we expect to deliver the same experience as a web 2 and for web3 which means we need to have really fast retrievals and that's why Falkland Saturn exists and Saturn is an absolute monster we currently have 2000 nodes that's eight times more than cloudflare and we serve around 150 million requests every day and what's what's really cool about Saturn is that actually there are real people running these nodes and what's even cooler is that these people get paid for the retrievals that they make and how do we orchestrate payments for the shutter Network the answer is the fvm so we want to run Saturn as a protocol which means that when you're a node operator in Saturn and you want to serve retrievals you interact with a protocol and you get paid through a protocol because that's trustless and that's decentralized and that's what what three is about and the fem coming to fall coin enabled us to do that and the fem allowed us to deploy smart contracts that Maps the contributions of our Saturn nodes to payouts and eventually these nodes can claim these payouts and the smart contract will distribute the payouts and this is kind of like the level that the fvm can play at from all the way from Tiny applications to doing the accounting for a whole CDN so I'll give you a quick demo for uh um for for our payouts um here's well actually I'll start with the UI um here's the UI for our payouts and this is built with existing um this is all built in this is also open source I'll give the the links for the repos later on but this is built with existing infrastructure that works for the ethereum virtual machine and it's running on the Falco Network so um as a Saturn operator you can um you can go claim your funds from a falcon deployed sorry a VM deployed smart contract and you can still use things like ethereum addressing and all the account types and one sec sorry the internet is a bit slow here all right yeah so this all runs on regular web 3 tool and I would use and this runs on the fvm and the Saturn node operator you can see kind of like what your earnings are you know what transactions you can claim Etc and um what's on Saturn we've been working on some some really cool tools it makes deploying on the fvm really easy and also very flexible if you wanted our our payments contracts repo is open source and it's a really nice uh resource if you want to really dive deep into how evm can work and all that just to demo so we actually built a CLI for Saturn to deploy things on fvm and I was obviously testing it before before the workshop just to make sure I'm clear with the demo gods and if it doesn't work I have a a demo show but yeah like running it is essentially just as easy as like a very simple CLI command that just gives you the the RPC URL and here I'm copying a local secret which you should never do before the sake of the demo I am doing because I don't have my Hardware wallet and you just deploy and as you can see you're seeing all my rust linting errors and this is live stream so no shame clear the block times on the flacoin network is like 30 seconds so it does take a while to deploy uh but yeah the RCL gives you release full tools like what the gas price is um it can convert ethereum style addressing to focal and cell addressing um and it you can edit for example the gas multiplier so you can make it really flexible or you can just use it it is out of the box and as soon as the block times are really long I'll just show you what the deploy contract oh my God I have so many linting errors all right so if so Phil Fox is a falcon blockchain explorer that you can use to check out your contracts and all that and this is the contract that I deployed before the demo and it's a it's essentially exactly the same experience as you would use with an evm smart contract and fall coin it has a falcon address has an ethereum address you can see the the message ID this is like one of the payouts we deployed and here it is live and hopefully and the other one would have deployed right now yep all right there we go so this is the one I just deployed just want to show it's working the demo gods are with me today and I'm very proud about that um but yeah so um all right back to the presentation to wrap things up I've lost my mouse there it is all right so here's some useful resources the fevm team has has a bunch of starter kits for working with with the fevm we had Saturn really like rust so we use The Foundry kit but there is hard hat there is remix there's a ton of other tutorials also that are available there to show you how to deploy how to deploy and work with the fem and it's really useful the testnet hyperspace is a repo dedicated to the hyperspace test net it shows you how to get test fill how to add that hyperspace to your meta mask wallet and it's very very similar to what you would do on ethereum basically if you're familiar with ethereum and development Saturn contracts is our contracts repo so basically um everything like the way we do accounting for Saturn is in that repos public as open source and uh it's uh it's a great it's a great demonstration with how to use the fevm with rust and we've developed some Rust fevm we developed a rust fevm utils library and has very useful things like sending transactions the fem has its own gas calculation model so sometimes when using it with some of the ethereum tooling you run into some annoying bugs in Rust we've completely removed the experience for you from with the utils library other things like converting falcoin to ethereum addresses you can find it all there the library is very new we're developing it and there are some issues so if you feel the web free hard on you to come and contribute feel free to do so and lastly this is the contracts UI so the UI just developed it is shown is also open source and in case anyone wants to look at how to build front-end applications on fevm it's very similar to ethereum in fact like the same exact tooling and we have it out there um so just uh just a reminder so we have some prizes at this hackathon we have a an evm fevm sheet if you want to scan the barcode so we have a grand prize and another Pool prize if anyone is interested to hack on the the fevm that would be really nice and just a reminder to to qualify for the prize if you want to if you want to deploy things on the focware network nft.storage and what three dot storage are really really nice apis abstract the way a lot of the you having to do a storage deal and all that it does that all for you so if you don't want to get too deep in the weeds this is a really nice these are really nice services that offer you apis to store things directly on the the filecoin network and that is it if anyone has any questions happy to take [Applause] sorry sorry I can't hear you uh yeah so you can do it a few ways like um you can encrypt the data before you send it and then decrypt it and some like I'm guessing like nft storage or through that storage do something conversion for you or you can like go through like a smart contract rub so that is what it means like reading programmability is that you can do things also just to repeat the question is how do you ensure that the data is encrypted or not visible to someone or not accessible well so ipfs so okay just so you can access storage deals from the evm itself you can access them from the f evm so and then ipfs is content addressed so you can access yeah okay okay um so the question is is it possible to use Smart contracts on fvm to store data and yes you can make you can make a yeah you make a storage deal with a smart contract yeah yeah so you can make storage deals with a smart contract for sure correct okay so the question is does Falcon store the relationships between different files so um not really like so I don't know if you're familiar with how ipfs store things in like it's a Merkel dag basically so if something is another Merkel dag you like there is no like connection unless like essentially unless it's part of the file you can reference another file in some file and that's fine but unless like it's actually part of the directory you can't just like link it natively you mean like having like versioning for uh yeah yeah you can have that but like a a nice feature that comes baked into Merkle decks is that um like for example um if you have files that are really similar or have the same content like they will share like we don't need to create like a new Miracle deck board they will share that from an existing Miracle deck and just like extend it so does that make sense yeah yeah yeah yeah yeah you can you can Traverse it and query like certain parts you're welcome thank you yep so the question is is there uh some infrastructure ready for uh off chain compute so yeah there's a there's a project that spun out of the pl called bakayal and bakayao is all about computation uh basically compute of your data it's called Cod that's why the name background came out but yeah it's all about that um if you want I can share with you after but yeah it's basically a dedicated project for that and it's an L2 scale later for computation over data on the focore network um does that answer your question okay all right I think we have no more questions thank you very much for coming listening something in the way [Music] [Music] foreign 
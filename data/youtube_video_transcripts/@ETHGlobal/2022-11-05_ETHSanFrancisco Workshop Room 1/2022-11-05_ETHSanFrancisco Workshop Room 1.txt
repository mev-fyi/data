thank you yeah it's got a lot of them she knows how to apply yeah all right it's 3 30 uh let's get started this part of people rolling in but they'll be late it's okay huh yeah yeah lfg that's right uh okay hey everybody uh my name is Eric tang and I'm the co-founder and CTO at live PR um before before I get started I'm just curious um you know show of hands how many people have heard about life here or or know kind of what it does okay about about half okay great so um let me do just like a really high um level introduction of life here and and tell you a little bit about what we're talking about here today right um so life here is a decentralized video streaming infrastructure project and we've been working on it for about five years it um it it allows any web3 developer to build a video streaming application so if you want to build a web 3 version of a YouTube or twitch something like that you can use live PR uh and and it's it a life here itself is a decentralized network and at the same time it also integrates with other decentralized infrastructure that allows you to for example control the video streaming Behavior using the blockchain in in the live pure Network so um but today uh you know The Talk The Talk is not only about live here the talk is really about building the killer web3 consumer app and um and you know personally I've been thinking about this problem for a long time um and so a little bit of background personally um before I got into to web3 I worked on a a company called wildcard uh wildcard was a kind of a social app um a Content application um it was it was one of the top apps in in the App Store back in 2015. and and and wild card was built on top of the open apis on Twitter on Twitter Facebook and all these other app um platforms that were also emerging at the time especially on mobile but over time these uh these platforms started to close up their uh their apis so um that really impacted life impacted wild card as a company and as a business right so um ever since then I've really I've really been thinking about how exactly can we actually build open applications on open infrastructure that helps us solve this Pro this like platform risk as developers right and that was one of the reasons that that really drew me into web3 is because you can now build on top of ethereum and the ethereum API is not going to change and no one is going to tell you not to build anything because you can anybody can build in this permissionless decentralized world and that's what's most exciting for me however we all know that you know we we're still pretty early in the web 3 Journey about in terms of building consumer facing applications right and that are actually really scale like the next Tick Tock however um I have a I have a pretty strong personal conviction that that's going to happen very soon and when we have the web 3 Tick Tock it's going to be 10 times bigger than Tick Tock and it's going to happen 10 times faster than Tick Tock and you know the one of the one of the um one of the one of the biggest reasons is that there is now no centralized party that can be the kind of the gatekeeper for people to adopt these new applications so they'll just emerge very very quickly and grow very quickly as well so so today I want to lay out some thesis and um and kind of tactics on you know how can we actually start to approach building these types of decentralized and consumer facing application that actually have consumer scale and have have like uh consumer appeal right right um and and and to to to talk about that let's let's first look at what's happening web in the web 2 consumer world and um and and this is a graph that often use it shows the growth of online advertising Revenue in the last 20 years and then what we've seen is that in a very short span of time um it's grown by 25x right this is quite astounding back in 20 back into 2000s when it was 8 billion today is 190 billion last year right and and you might think that oh like more revenue must be good but this actually this Revenue actually comes at a cost right and and the cost is that the online advertising model is working too well and and the problem is every um and because of that all of every platform every consumer app that we use is looking at this same model right every consumer app is trying to monetize using the same online advertising model and when that happens we start to get into this problem of the online advertising model actually driving these these consumer applications as business businesses and we start to get into this world of surveillance capitalism right where all of our data every single click on the net online is being is being tracked and bundled up and sold to advertisers for our attention right and in every single consumer platform that we use it's optimizing and optimizing for keeping our attention for as long as possible in order to show more ads and grow and grow the business right and that's how this that and that's how this curve happens right the more attention we as consumer are kept on this platform the more Revenue these these um is there right so so the that becomes the that becomes the uh Challenge and also the opportunity for web3 right which is how do we break that model and and find alternative models to start to to approach at this problem from a different way and still make things very interesting and engaging for for consumers and people have have been trying this since the beginning of web3 right so um I I'm listing out some of some of the some of the old applications that are that have been around how many people have heard of steemit or have used steemit okay um what about ppiff anybody knows people what about pepo okay so so steemit is is kind of the one of the one of the early uh social apps in web3 that's very similar to a Reddit I would say uh ppiff was probably the very first web3 Twitter um or you can um yeah you would pay like 0.25 each to post uh posted tweet on on ethereum um and then um a Peppa was you know the very first experiment around um kind of like a web 3 Tick Tock right built for communities and and these applications all succeeded in different ways and failed in different ways theme is was actually one of the more successful examples um and and you know there were some problems with the incentive mechanism in in the steemit platform where it started to become more of like a echo chamber that that just pumped the steemit token but nevertheless it actually over time had a lot of adoption so um so in order to in order for us to move past um this phase of web3 um this old phase of web3 consumer apps and moving to the new phase um I think what we need to start really looking at is how to stop building the web 3 version of the web 2 app right so like we're not talking about building you know web3 YouTube or web3 uh Twitter or whatever right like that's that's that's going to be that's going to be problematic because you know these existing social applications already have this really strong Network effect and this mode that they've built right so and and they've really optimized to make sure that their competitors are not going to be able to compete with them so so in order to start attacking that problem um we need to look at what are the unique values that web3 actually presents uh and and for me there's really four things that what that has been proven out that in web3 that that is unique and has already adaption right uh the first one is permissionless crowdfunding second one is decentralized financial instruments uh on chain uh being able to do exchanges third one is provable digital ownership and the fourth one is collective Global coordination right so um if we if we kind of change uh put these four um four value propositions into the their their acronyms um you know the first one is really icos right um permissionless crowdfunding we're able to kind of do Capital formation on the blockchain uh decentralized financial instruments is D5 I think we're all pretty familiar with that you can start to build lending protocols or exchanges and things like that provable ownership first uh gives us um this unique building block of nfts right so now they're they're still kind of you know jpegs but really if you look look underneath it's a it's a reference point to any digital link right and and um we're starting now we're starting to see all these different use cases that comes with nft but it all it is all rooted in the fact that you can provably show that you own this nft right right uh and and the Dows uh we're starting to see um they they're Global communities that are forming um they're starting to have their own missions they start to organize themselves differently uh there are many interesting uh experiments like the noun style where um where people the communities are coming together across um to to really go after a specific mission right so um so if we look at if we look at all these different uh these different um unique value propositions um the next question is okay how do we use those prop value propositions to actually compete with a existing web 2 platform right well there's um there's this old Fable in um in Silicon Valley I think it comes from um Chris sticks and from from a16z and and it goes right come for the tools and stay for the network right so so what does that mean it means we first need to build an application that provides some core value for a set of users and then those users come and then you start to be able to build a network effect um some examples may include like um Instagram for example at the very beginning it was a tool for people to add filters on their on their photos right and and that that became a very unique value prop and then as people came in Instagram implemented the follow mechanisms right so people can start following each other and they start to build this social graph right um so come for the tool and stay for the network is an important lesson for for web 3 applications where we think about building something um and the other thing that um that's interesting to think about is using these existing web web 2 platforms as distribution channels uh because there there's already all these users on these on those platforms right so you can actually um build your application in a way that bootstraps your own network effect on top of the existing social networks so we're starting to see applications that really lean into Twitter for example allowing users to allowing their users to post tweets inside Twitter that then drive on that with links that drive to Twitter users over to their application right um so if you look at um if you look at it from in marketing terms you can really treat these web 2 platforms as the top of the funnel and then start to drive your users down to the bottom of the funnel where where you can continue to convert them right an example would be if you are minting if you're minting nfts right you can think of the nfts as the canonical representation of a piece of content in that case um you know people can people say like oh you can like right right click and copy and paste and save the nfts right but that's actually the best thing for the nft because the more people save it the more people copy it around the web the more valuable that that nft becomes and that's that's actually what you want right it's it's using it's having as many people post these nfts on other social platforms as possible so that the canonical representation of the of the image actually becomes more valuable so that so that's a that's a way that's a strategy and tactic to think about um so so you know when we when we talk about Comfort tools and stay for the network right um these tools need to solve a problem what are so so what are some of the problems that that um that are in web 3 today that we can actually solve right um here here are some examples um one is those need a place to to organize their content right we have all these decentralized organizations that are popping up um and and I think it's only going to accelerate because it's just so much easier to to create a doubt and get a get a group of people to start working towards a mission then needing to like form a company right and or former organization um so those are kind of now the quintessential um internet native way to to get a group of people together and work on something but all of these dowels are now very fragmented right that they use Discord for their Community Management uh they use YouTube for for putting their content around right they really need one place to to actually organize their content and I think that I think the first application that cracks that um is going to get a lot of adoption in the web 3 ecosystem um the the second problem I will point out is um the fact that web 3 content today is still living at different places right we have these web um web 3 Publications you know coin desk things like that um there's uh crypto Twitter right and if you think about crypto Twitter it's really kind of like a wild wild west where people are you know selecting the the people that their own people to follow Twitter was not created to be a web 3 tool it just it just happened to kind of like stumble into it right so um so so someone who who solves the problem of curating web 3 content to make sure that um when people people can go to a single place uh to uh to look at the best content for their specific interest um I think is going to have um uh have a lot of adoption in the web 3 space right because it's solving a real problem for for the for the web 3 consumers today that are looking for high quality content but not knowing how to how to get there right um the third thing I want to point out is um incentivizing content creation I think that's something that that what that's really unique for the web3 um you know in the web through ecosystem right because until until now um if you want to if you want to create content if you want to be a content creator you need to do it for free right in fact if you want for example today if you want to start to become a YouTuber um usually you need to you need to create constantly consistently create content um at least on a weekly basis for a year a year and a half until you build up a big enough audience to be able to start monetize that that is a long time that is a long time for someone to work for free to create quality content for YouTube in order to start monetizing any of that web3 actually solves the big solves that problem right because there's this token mechanism so you can you can start to build into your application that starts to draw um draw creators from day one and start to start to um compensate them for for their work from day one um so so to make that more concrete um I think building a web3 zoom um is um is something that's that's unique all of the dials right they're they're they're doing these Zoom calls um Zoom is not created for web3 it's actually a very concrete experience right now there are some applications that are already working on this um and then I'm going to give some examples later um building a web 3 native video CMS so again to solve that um that video fragmentation problem right so people are posting their videos on You Maybe on YouTube channels uh maybe on um you know maybe on a mirror right um being able to having a decentralized organization to be able to kind of organize all of their content into a web 3 native CMS um it can be a really powerful tool um and um and the the other um solution or um the other opportunity um is a curation Dao and the Cure the idea of a curation dial is um to have a group of people who are incentivized not to create content but to put together the best content right you can use different types of metrics to to um to start to track who is performing well in a dow but having a group of people um paying attention and actually contributing to the curation of web3 content uh can be a really powerful thing and if you think about it a lot of web 2 platforms actually behind the scenes use a lot of curators so Spotify is a perfect example where all the playlists the most popular play playlists in Spotify are actually curated by people right Spotify just creates a a standardized interface for you to for people to search between uh search amongst those Creations uh curations um and finally um when when creating uh tools for that that targets creators which a lot of times you know consumer applications really about content Discovery and content consumption right so someone needs to be creating that content there is a there's a big number of creators that are now being underserved in today's prevailing um uh applications like a YouTube or a Twitter right so targeting those those creators who are you know doing their one and a half year content creation without without getting paid but a lot of times having having really good um having really good idea and really high quality content um that's a good way to to kind of pull pull creators into the web for ecosystem so I want to show a couple of examples of of um applications that are already doing this to um to kind of illustrate this point huddle 01 is a kind of a web 3 Zoom um it um they they allow people to use um their metamask wallet or any their crypto identity to link to the application to have their identity as that they can you can link your nfts right you can have your nfts your avatar as nfts um and and you know they use live here to to make those streams um become uh broadcasts and and so a big Community to kind of watch them right uh lens tube is an example that's built on the the lens protocol so they use the lens protocol for uh social kind of social profiles and right now it still you know kind of looks like a YouTube right so it's still kind of in the early phase but we're starting to see uh lens to do uh slightly different things in in the web 3 Sphere for example offering paid content or offering people to have the ability to Mint nfts using using these posts in fact every single Post in lens tube or every single post on lens is by default an nft right so that already just that already captures the ownership of the video to a link that to the Creator much more than what YouTube is able to do right the 402 is a is a pretty good example of a live streaming application uh maybe similar to to your Twitch of the world uh they they they currently focus on musicians some musicians can come to the 402 and and and do live performances um and and sell tickets uh as nfts right they're already seeing really great success where the musicians are able to make hundreds or you know low thousands of dollars per show where you know they would have to do that for a whole month on the Twitch in order to make that much uh beam is another example where um you can um as a Dows or decentralized applications you can you can do real virtual events through uh through beam bonfire is one that um that allows the Creator to to connect directly with their fans so if you're a Creator you you would use bonfire to create your own almost like fan fan club home page uh and fan and bonfire allows you to do things like nft drops or do live streams to their to your community that are token that are token gated using new web3 mechanisms for um for creators to really build their fan uh their fan base and know that the creators can actually own their fan base right because all of that is is on the blockchain and they can they can take their fan base to another application if they wanted to um last example stream Eve this is a really really cool collaboration that lifepair did with the ethereum foundation uh and it's a it's open source and and um project and and public good project where um um Defcon for example was streamed using stream Eve um and uh and devconnect earlier this year Berlin a couple of um kind of real world um web3 events are are all streamed on on this platform right so you might notice all these all these examples are video based um why why do I talk about video based well um you know we're working on live here and and the reason we think videos is important for for the web 3 space is well 80 of the content on the internet in general is is video right so um so at any given time people are are consuming lots of video content and the reason is that video is the most engaging and most powerful medium of Storytelling and communication uh for for any consumer application the most viral the most engaging content type by far is always video so um so um so if you think about the the web 3 Tech stack um we can we can see um you know we have the blockchain base layer and you know we have the scalability layer of of L2 right we have we have our storage layer like ipfs um or our weave we have our index and query layer we have our you know identity layer that you know that our wallets themselves or things like wallet connect and and and we can we can combine all those things together and build applications using uh using video that take advantage of all of those different all of these different um other components to build really powerful video uh to build powerful web3 video applications so I want to give you a couple of um examples of how how this works inside live peer the first thing I want to show you is [Music] um the your the ability to to um to upload videos right so all of this is available um as apis so but but also I'm just going to show you the the dashboard here real quickly so here for example I can upload any asset I'm not going to upload an asset right now because because it takes time but this is an asset that I've already uploaded before right so you know I can play it here um but um but more importantly um more importantly the these video assets can be exported into ipfs right so if you're minting an nft you can use this video asset however um there's a problem right and the problem is if you're minting if you're creating a so this is I'm trying to load the video for my PFS um it might work okay um because I'm I'm on I'm on like high bandwidth connection right but if I'm streaming this video a video file directly on my mobile phone or something um ipfs doesn't really have the ability to make the video streamable at scale right so um so instead I can I can go I can do it through life pure and still use the same ipfs hash and I can just load it into from Life pure and when I do this life here under the hood transcodes the video into hls and it's able to stream that video in many different bit rates and formats so that anybody from from anywhere around the world is able to stream that video on any device right um and so it's a it's an example of using this video layer that plugs into all the all the other blockchain components so that allows you to Mint NF video based nft allows you to make that nft actually streamable across the world right and that's for example this is what lens tube uses to make their um to make their user experience as good as a YouTube right um another example I want to show you quickly is um the the live streaming experience the live streaming API so now I'm going to interact with the API um so what I'm doing here is I just created a live stream right and now what I can do is I can start to to stream I can I can send a video a video live stream in there uh we created this testing tool that a lot uh that will send a send a life uh send a test stream right away because you know in in this in this room there are tons of hackers sharing the same Wi-Fi and and it's it you can always uh get the get get the get the video stream going but you know I just sent a test stream so now I can see that it's live in here uh in fact the other thing that I can do is I can use the um I can use the video life pure video player to directly watch the video now it's a this is a a puppy video so it's about 10 minutes long um now you know anyone can create a live stream right so so this is and this is all working but um to kind of illustrate another point of building your application alongside of a web 2 app now we can you can start to you can start to say um you know what I I want to I want my live stream to also be restreamed into a YouTube right or into a into a Twitter or into a twitch to get more to get more audience to come right in fact this is what this is what the Devcon organizers did in Devcon uh we streamed um the we streamed the live stream on both the uh the Defcon home page and on YouTube um so at the end there was about 40 percent of the people who watched um watch the video on live here and about 60 of the people who watch the video on YouTube so now we have a decentralized infrastructure that can that can stream in a decentralized way but also leverage the existing social platform to to be able to to drive the eyeballs right cool let me go back to the last bit um so for for this hackathon um we have ten thousand dollars of price um first place is five thousand second place is three thousand and third place is two thousand uh we really want to see some interesting applications that use video as a hook for consumers right so uh video based nfts or live streaming based video nfts there's some prior Arts if you if you search the youth Global hackathon you'll find them uh decentralized video messaging applications or or video tools for Dows or web3 communities uh there's some high-level ideas and you know where our team is here and uh so you can come come find us in the booth we have um we have interesting um we have a hacker quick start guide to to help you get started you can join the community here um I want to show I want to specifically point out lifepure.js.org which is a new developer SDK that we created um that's inspired by by wagme if you're familiar with kind of the the ethereum world uh so it's very easy to get started building application using live3.js thank you very much [Applause] if you want to like display it on the screen like maybe I'll I'll do it at the boots where is the people yeah yeah okay sorry um right yeah hey guys I didn't see him yeah okay so there we go I just remember okay hi there guys just give a minute for any late Commerce meanwhile how many of you have heard about Cortez before oh nice are you guys familiar with uh uh optimistic prolapse no a little bit okay sure let's get started so for today I'm gonna be presenting to you a little bit about optimistic relapse and also how critazzi uses it uh for our technology in what it can offer to whoever builds in it and um first uh we're gonna start with a quick overview of Cortez just very briefly and then I'm gonna compare a little bit uh numbers I view the differences between web 2 3 and how it looks when you build on courtesy and then I'm gonna explain a little bit about uh roll ups finally I'm gonna present to you a very simple a small simple code of our cortezid app written in Python so here is a tab written in Python that works right now inside the advertising machine I don't expect you to understand it right now but it's just to show that it's a simple playing Python and you can have libraries and you can have interactions within the machine you can have access to other apis that you develop so it's really a server um used as adapt so cartesi is a foundation that has been working on this since 2018 we've been a while building stuff so it's not just some new company coming up when relapse showed up um and uh the team has been building this machine for a long while and then the relapse technique appeared and it just feel like a glove so we adapted the machine to to be a role of solution and scale ethereum so the main idea behind courtesy but I guess to some extent uh our relapse is that ethereum is awesome uh there is a lot of interesting stuff about it namely like uh it is secure it's a censorship resistant uh it strives to be decentralized and that's really good but that comes out with a lot of consequences and costs uh it is low it gets to be very expensive and that means uh we are always building a process of gentrification of the network so we are evicting depths they are now profitable even though they may be important for the communities and for the newcomer developer is cumbersome because you need to understand about machine architecture you need to learn how the evm works and then a new language like solidity Viper and even low level stuff if you actually need to go that far so it limits you in several ways even though it brings another a lot of new interesting features so the main idea is like what what if we could have complex computation inside a blockchain and maintain security guarantees so the curtising solution is uh transparent VM so instead of being another evm based Network a sidechain or even a lot relapse we have a risk 5 emulator risk 5 is an instruction set for a generous purpose processor just like the ones on your hand for your computer or your phone so you can think of it like a Docker machine of sorts or a virtualbox and uh we made it deterministic so we got something verse 5 is open source open harder to be more specific so uh we got it from the community and we made it deterministic and we applied it to blockchain so um here's things that you get so like any company and person can build on top of risk five it's auditable it's more secure because of that because a lot of people has have been working in this project it's a platform processor like I said so you can run an operational system inside inside it so that's why we were able to Port Linux to the blockchain uh we made a deterministic so that means you can dispute any computation that happens on it and of course because it is a full machine it's very uh able to do massive computation and you can expand on it like you would do in any server or server application uh the main difference between most optimistic relapse and what we do at Cortez is like we have a local consensus so if you think about ethereum the more computers you add to the network you're adding on security decentralization but you're not adding processing power you're not adding throughput however with local consensus or depth specific relapse what you have is adapts that don't fight for the resources they don't fight amongst themselves they have their own sets of validators or what that means is now as the more depths you have out there you're actually increasing the overall capacity of ethereum to process things and that is all really good and possible because of the dispute protocol so whenever you have a problem whenever there isn't a disagreement between validators it is not a majority consensus it's really uh it really goes back to ethereum and uses it as a judge so the same moment later I just talked to you about the one risk five that you can run on a machine for cartesianode is also implemented in solidity for the evm so whatever process you can do I've chain you can do on chain as well but with this verification game dispute you actually go down to the very instructional cycle that you disagree with the other node and you only need to prove one instruction cycle on the ethereum machine and that is possible because the machine is unmertilized so you know exactly what the instruction cycle needs to access like the memory States and you just need to upload this section of the machine in all the worker proofs for it that means that even if there is collusion among validator nodes of a specific tap as long as you have one known as valderram you can go back to ethereum and have the correct settlement so how does optimistic prolapse actually work any Roll-Ups in general but using this specifically so you start with the ethereum blockchain and whatever you do you're always making State transitionings uh inside the domain chain the Roll-Ups it changes a little bit so you go there to a certain block and you basically State the initial state of your computation outside you say hey I'm starting a new machine here and this is the state in people who join your roll up basically they are agreeing with you that the initial stage is correct then you stayed outside for a amount of time that you specify mostly nowadays we've been using seven days because of the security guarantees of it so for seven days you go on doing things off chain uh when the time is up you go back to the main chain you say hey after all that's happened this is the new state of the machine and people have the chance to verify whether or not you're telling the truth if they disagree they can go back into the dispute and uh fight you on exactly where you might have been wrong however if they agree after seven days everything is settled all this computation does not need to happen again inside ethereum so that's why optimistic relapse they expand the main chain they are tied to in computational resources so the overview here's just a baseline so you always have some kind of a UI mostly nowadays browser then you have the software for the browser that you want the UI to to work with then you're gonna have a connection it can be a socket connection you can be https for instance with a set of servers the centralized and they connect to a set of databases that are centralized as well that's how web2 Works mostly we are very familiar with that where three especially with ethereum you change the landscape because now your business logic doesn't leave anywhere physically it's in the blockchain itself supposedly everybody is running their own notes so they can just communicate but there are no local nodes uh Honestly though we know we've been using inferior too much we've been using quick node and why not it is what it is however it's much more secure because whenever there is any issues anybody can just spin up their own full node or even a light node and make sure that the information they're receiving is correct uh with courtesy is very similar here just did a very clean version of it and we're gonna break it down but you still are connecting to notes just like ethereum nodes so supposedly people should be running their own uh validator node a validator slash reader node of their adapt they are connecting to and inside a curtising machine I made a shirt to have this image over here because uh we are used to the evm but how would a Docker like machine work right so there is no access to the internet I need to stress this point a lot so because it's a Linux server it doesn't mean it needs to have internet connection it communicates uh through the blockchain and that communication happens using Linux drives and that's cumbersome and difficult to use so instead of teaching you how to use the operational system to that level we've created this HTTP dispatcher it's an API that's running on cider machine that wraps up all this complexity and just changes it into several four endpoints they are really simple to use so by just doing rest communication with these four endpoints you can receive information and output information back to the blockchain so now it's the blown up version of it so first you still see the Json RPC over there and that's because we have the data availability problem so blockchain is both data and computational power optimistic prolapse they're not solving the data problem they're just solving the computational problem so what it means is if we are playing chess in a Roll-Ups you see they need to be able to prove that the moves happened so if we don't have the base layer as a data availability source for the for the information it means people can cheat by just denying information so let's say I'm playing someone someone here and they are about to lose they can say no I never did this move how am I supposed to prove that they actually did it now you post this information to ethereum and now you have a proof that they actually did the move in the chessboard um so that's why we still have the gsmrpc communication so he's still communicating with ethereal node and people should be posting their transactions eventually if you think about other Solutions uh other projects that have the same solution so like arbitrine or optimism you're gonna see they use sequencers for that but effectively what they're doing is posting the things uh to ethereal Network and then at the very end you see there is a graphical API so this graphical apis is it is useful for you when you're handling the UI what is being sent what is being produced uh from the node so we have three main outputs from the curtising node we have a report which is basically just a log you can still act if you're running the node you can still access the full log of the process but it's really good way of uh having a clear and clean access to the machine when you are using other processes so report for instance is very useful I'm sorry it's very useful uh as a ethereum call for instance so if you're checking a balance of your C20 you don't want to make a transaction you just want the AVM to tell you what is the balance at the current state so you can generate reports for that we're gonna see this um a notice it's like an ethereum event however with a spin you can prove that the event happened so if somebody creates a game and there is like events about winners and losers of the game and suddenly another project shows up and say you know what I want to create a badge for whoever wins 10 games now the person have a pro has a problem because how they are supposed to use the ethereum events to prove they won you can't you can't do that on chain however the notice that you produce here on the criticize machine is a tie tied to the courtesy machine state so you have a marker proof that the notice happened so it's usually useful in that way the voucher is just like they notice in that sense so it's probable but it's also gonna become a transaction so we call it voucher because you still need to wait for the seven day window so it's not truly a transaction until the moment it is so whenever the Rolex is settled you can as a user or as a developer you can automatize that as well you can pick up the voucher for instance a withdrawal request and go to the assistant to develop system and say hey I have a valid voucher I would like to execute it so it becomes a true transaction and ethereum so you can use that to interact with other smash contracts and apps and finally we have the HTTP rest there and that's the your direct communication with the node so the ethereum call was talking about would be actually done through the inspect request so you send a quick um a quick request to the machine it's gonna wake up spin up do whatever you program it to do and die and roll back to the initial state so it doesn't affect the internal state of the machine long term so it's really useful for uh populating UI data is to use it for for you to be debugging the internal state of the of your program um and whatever else you can think that this does not need to transition the state so going back to the code I showed you before you're gonna notice at the very beginning the um I'm sorry one second that we are actually importing python libraries this is not a python-like library this is a python domain specific something for blockchain this is truly python running uh it was just compiled for risk five on the yellow side uh we created a utility for people a CLI that it's based on Hard Hat by the way that helps you send quick uh data to the machine so you don't have to be developing your own scripts just to test things out so here uh we're basically creating a new transaction and sending hello there uh payload and then you can use the same CLI to list any new notices new reports or vouchers that was created since you last call it um so here I have an example of a pythonia code app so it's supposed to send back whatever I send it to it so going back there you're going to notice that I grabbed the information for the HTTP dispatcher I was talking before the the rest API the mix things easier from the environment so you don't need to hard code it anywhere and here I'm um how to say I'm signing up two types of handlers so there's too many uh too high level of handlers inside the criticizing machine when it comes to these requests one is the advanced state so that's those ones I was talking about whenever there is an input you're actually gonna change the state of the machine and the inspect state is those that come from the HTTP inspect request I just talked about the ephemeral stuff and here comes the most important request in this program so whenever you start this program you're actually starting things up right like uh uh registering starting your process heating up the machine in a way so basically uh the very first time your machine wakes up you need to tell the architecture that it is done it's ready it's like deploying a new contract so you call this finish endpoint over here so what it does is tells the wrapper that I told you it gets that information and tells the framework that it's ready to accept new requests so from the perspective of your code the machine went to sleep over here so the line 24 your program dies for a second Whenever there is a new request wakes up exactly at the line 24 and resolves the post request returning to response their new request now we just unwrap the Json request we check what type of requests we have which is the of the type Advance or inspect since it is input that I've sent it's going to be a handle Advanced type so we're gonna go there to the function you're gonna see them grabbing the data from the data the payload from the data I just received and I'm just putting you back into a new notice so I'm creating a notice right now I'm not going to do anything with this data because it's an echo and now I just need to call the notice endpoint to create a new notice with that um I've basically concluded most of the things that this needs to do so line nine is just making sure that I finish with a accept state because if you reject you roll back the machine so you're gonna see that in line 27 I'm sorry go forward yeah lines 27 I'm just refilling the finished status with accept and because we are in a loop I'm gonna go back to the Finish state so I'm gonna go back to the post on one second I'm gonna go back here and cue the machine again I'm just telling the framework I'm done I've done other process that I needed if I was sending an HTTP request you would come here to the handles inspect and in this case I can only produce reports so like I said notices and vouchers they come with proof and because this is gonna be rolled back there is no proof for those so you can create as much as you like it's just not going to do anything the framework doesn't enforce you it does not break your machine just don't do anything so here I'm creating a report and if I were to list the reports later I would see on the other side finish accept now supposedly I would be listing the new notices and you would see the the payload over there um that's it for the workshop I'm open for questions now if you have some so she asked me if I can change the state of a smart contract on chain while the operation system so yes but through the voucher so let's say I need to transfer tokens to somebody uh we create a voucher that will be later executed and the execution of a transaction is actually changing the state of a smart contract right so that's how I would talk back with the native ethereum dabs so uh we saw there that we have inputs being sent to the machine how that that is possible on the Ethereal Network we are actually deploying a set of contracts for the roll-up architecture in the set of contracts are actually an alias for the auction code you see here so this that this characterized adapt actually has a ethereum address whenever you interact with it it's actually an input and whatever vouchers get executed it's executed with the message sender from that address so uh all the other apps understand that it's coming from this address that it doesn't know what it is exactly but it's basically the characterize It app so there is an alias there a proxy and an alias at the same time does it make sense yes sir so it's not private key based so it's a set of validators right so you have a set of validators they're enabled to interact with that and act um as owners so to speak but it's also a voting in a sense that's why you have the seven day window so if anybody has anything um they they see is wrong they can dispute that and you can keep disputing for a while until you get to the correct State and that means nobody's is the owner exactly but they are like responsible people for that does it make sense it's like a voting system in a way in a way but you're ensure that the execution is correct because you have the emulator on chain as well so that's a good question because it is an app specific roll-up as a developer you define what is the requirements so if it needs to run on a calculator just don't use too much resources on your dap but if you needed to do like machine learning or something it can be as beefy as you want your validator node yes yes but you need to be mindful as you are developing like what kind of knows do I want to have do I want to have all my users running it so if I went to my users running it maybe I don't should be putting the node to be so busy right otherwise simple computers won't be running it so it's like owned adapt developer to decide what they want because of the the other slide I showed like this one every uh dap is it's only little networking away so you decide yes yes so if you say that's only gonna be like 12 liters sure maybe like a chess game and that's fine if you want something that is a bit bigger but 10 is fine sure then if you want to have something that everybody is able to at least validate then you need to be mindful of that but there's not like intrinsic limitations just like Docker in a way are we good here so we are here for throughout the whole weekend uh at the table we are you are so well welcome to to visit us and ask us any question so at the very end uh have a link tree for Cortez here if you want to check documentations medium and why not thank you [Applause] I guess the next person is already here oh by the way we have some magazines and stickers for you there but there's more at the booth it is running it again and then I have a lot of trouble about getting on these guys and so Kerry at this point you sign yourself sure I'll just assume it's true but let's see if you actually foreign foreign welcome to running Linux I will start a rap battle with somebody no I'm kidding oh shoot is my ex rander on here okay let's grab his interview are we okay I've dragged it to another desktop give me a moment thank you see there's this are we good are we good to go can I all right um let's have a look all right hello there let me see if I can grab this and there we go I'll hold it I think uh we'll figure it out can everybody hear me sweet okay so good morning afternoon or evening if you're watching this from the recording um but to those of you in the room I suppose it's just afternoon um I am 0x225 f one three seven one two seven d nine zero six seven seven eight eight three one four bc7fcc one F three six seven four if I make a mistake correct me 6a3c3b5 otherwise known as Loop dot computer or looseman study if you want to go the OG ens way and that right there is am I too loud the core premise of ens ens the ethereum name service is simply the ability to convert human readable names like nick.heath I should have probably full screened this huh um into machine readable names such as 0xb8 C2 C2 okay I will I'll cut you the pain all right um this way and obviously backwards sweet so ens allows us to turn the the general dap experience that would look like this right this is my 0x225 f1373 you know the drill to this loop.computer my DNS name I've been clicking on the wrong slide so this one's behind lovely it's going great okay so uh if you're here and you already know ens I hope most of you do you might want to keep watching because I do have some cool stuff to show in no particular order and that is going to be chaotic um let me run you through the agenda first I'm going to talk about what ens actually is and how the core logic works all the fun stuff second I'm going to be talking about resolvers and the DNS integration there we go that went great um the DNS integration for all sorts of fun stuff you can do with that um records and resolvers and essentially how text records Works storing data on chain off chain resolving and all that fun stuff cost changing our operability like I just mentioned um how to implement it and last but not least if you are new here how to register your first DNS sweet um before I do all of that I want to point out some Milestones um we're absolutely thriving we've currently got 2.75 million names registered which is ridiculous over 506 Integrations that I am in group chats with so I think that kind of explains my suffering but there's a ton more and if you do end up building a super cool project and you end up scaling and you end up needing my help Beyond these walls then feel free to send me a message we'll start up a group chat and I'll happily help you out um and 593 000 different people who have their own ens name sweet so let's look at another practical example right because we saw the lovely one I showed earlier and you're probably all familiar with dapps but let's do it anyway um this is tic-tac-toe a stupid dap that I built a hackathon project back in uh two three months ago now uh in Paris I had a bit of time left over and I said screw it I'm gonna build Tic-tac-toe and solidity because I'd like to not sleep tonight and um yeah it might not look good but it works and if you look right there in the top right corner ah this screen is too much brightness um use the v3x study which is back then my ens name ens by the way lets you swap between what currently your primary name is and I'm pretty bipolar so I keep switching between v3x study luke. computer and looseman.heath but all of those will end up at my address so that's me right there in the corner I should have probably zoomed in earlier um so yeah now your your favorite dap obviously has all this cool stuff um and you go okay is that all ens does lame but bear with me here you want to invite your friends so you press create game and then right there you can type the address or you can type their ens name so you type in nick.heath because casual Flex I played a game of tic-tac-toe with the founder and um right there his name his profile picture and his address show up and you can verify it's the right nick.e you're not getting rugged it's a tic-tac-toe game who cares um and then you press an invite and then he accepts and then you can play Tic-Tac-Toe with nick.if and regardless of my shitty tic-tac-toe skills not my strong suit okay I'm a developer um this is the core idea of ens right we have my name there his name there and a profile pictures sweet so what you saw there the simple dap decentralized app um shows just one of the things ens does which is usernames and profile pictures but we do a fair bit more so this is me lizman studyth again lucius.e32x studies all the all the fun stuff um but it stores a whole ton more than just my cool profile picture and my address nick.heath is a better example because I don't have half of these setup uh source's eth address sources BTC address is Doge address his Litecoin address his website his email his Discord his Twitter his Reddit his telegram his GitHub and who he delegates to or at least his his delegation page if you want to know more about him and being part of the Dao and it's just a forum link who cares um and obviously most importantly the Avatar and specifically this is a in a specification to link towards uh his nft that he uses as his profile picture but this could be a simple HTTP URL this could be https this could be on our Weaver this could be on ipfs so how does all of this work ens is pretty simple we have a couple core contracts and they work as follows the core contract this is specifically the dot eth section um stores the following information the name policeman study the registrant the person who is currently in charge of the domain so that is me zero x225 f1373 okay yeah when it expires and the current resolver so a smart contract address that stores the rest of the information the Avatar the telegram the Discord all the other fun stuff and the in this delegate link the only difference between a DOT eth name and a DNS name or a subdomain is simply we don't store the expiration date because it's handled externally um so it stores that for nick.e for vitalik.e those are real records um and and for everybody else so what you do is you you go over there and you're saying hey I'm looking for nick.if and then the smart contract says all right here you go nick.eath registrant expires and resolver and then what you do is you look at the resolver or at least the tooling does this for you you don't have to put any effort into this um it grabs the resolver address it goes to the contract because it's a smart contract and the smart contract then gives us back all of the fun information we were looking for but this is a little cooler than it seems this is the public resolver it's a simple smart contract that has a key value pair and key value pair storage and you can edit your records in there but this could be your own contract which means that you can write your own logic and you can change your profile picture depending on the day of the week the current balance in your accounts happy face sad face very sad face and and whatever else you'd like um and a ton of other cool stuff so this allows us to do all sorts of fancy things I I hear you say like this is cool fun but we're still stuck on each mainnet um I want to find the new stuff the shiny stuff the fancy things right I want to build on all these things I want to have you know I want to play my my hackathon prize uh bingo and I want to take all the boxes um so do we not the hackathon prize thing but the the playing with the fancy things right so I've got good news for you you can right you can play with all of the fancy things we can play with optimism we can play with polygon we can play with gnosis you can play with whatever the hell and off chain um the way we do this is using a spec uh that was written by a combination of people but one of which was nick uh our founder and it's the cross chain interoperability protocol I misspelled protocol shoot this presentation is old oh work me okay well ccip for sure let's just call in ccip and forget about the typo um so the crosstainer operability protocol um allows us to do all sorts of cool stuff it allows us to fetch data on chain whatever chain you'd like off chain um on a roll up on a layer two using zero knowledge using https if you really fancy and you like April Fool's Day jokes from the ietf using HTTP CP the hypertext coffee pot control protocol using your toaster or using anything else which gives you a lot of control um it's pretty cool so so how does it work thank you for photographing my face this is going to haunt me isn't it um so this is ccip I would recommend photographing that one um and essentially this is a simple example of what ethers does when you store something on optimism so the way that it works is the client Library reaches out to eat mainnet grabs the resolver from the ens core contract goes to whatever smart contract is attached to in this case 0x4097 whatever um and the smart contract just throws a cross chain interoperability error or in this case off-chain data um it says this is optimism this is the contract on optimism and this is the call data you should give to optimism and then optimism will tell you where to go next so then it goes back to ethers ether says oh shoot this transaction failed it was an off-chain data error okay and then it reaches out to your HTTP server to your toaster to your coffee pot or to optimism which all scale just as well um it goes to optimism your optimism smart contract then decides what to do with it returns your avatar returns whatever other records you'd like to set and voila it works zero extra effort on your part might I add so all of this is happening behind the scenes all you do is use ens name in your react app and it magically works it's phenomenal it's also half of my nightmares but I make sure that it's phenomenal for you guys so I recently built a cool example of this uh using off chain lookup I'm running an HTTP server it connects to Twitter it simply does some lookups and it has some heavy caching on it because I'd not like my API key I've used it's called twitter.ngo it's a web 2 domain that I ported over using dnssec um and the way that it works is you just go to any Twitter username.twitter.ngo the ensmart contract on Main Nets or previously on Gorly um will then tell you here's off chain here's error off chain data lookup this is Luke's server address this is the data you need to feed it and then my server will start running reach out to Twitter fetch your Twitter data get your username see if there's an ens name in there do resolution there and then return your address your profile picture in your description and then eventually you get something like this so you go to Nick Nick's Nick s d johnson.twitter.ngo and then everything magically loads in the background and then so now we have his address his URL which links to Twitter his Avatar which is his Twitter Avatar in his description cool so you know this is I don't know I thought it was a fun use case um so this works in almost all the libraries out there uh ethers wagme in sjs that was supposed to be on the same slide I don't know what happened here my presentation's going great um either swag me in sjs web3js web3j katherium web3pi go ens whatever library is on this list if your library is not on this list message me and I'll add it next time um but all of these supports ecip and it's super cool so how do you use this right forward resolution super simple this screen doesn't like my cool colors I guess it's too white um contrast but for ethers you simply just say provider.resolve name you give it v3x study and it will output you 0x225 f137 okay you get the drill and with wag me the react Library hooks for ethers you simply do ucns address v3x studies or the actual address and it will return you with the address sweet and you can also do reverse resolution so if you have the address you can turn it into a name and a profile picture using ether's lookup address and wagme's use ens name or using as Avatar and a bunch more um obviously I there's so much cool stuff to cover um I haven't even talked about subdomains but that's a whole other rabbit hole and you can build resolvers to control subdomains and we have a new thing coming out the name wrapper that's essentially a resolver contract that allows you to sell subdomains as nfts and control them that way so you can transfer them to people and make it fully spec compliant um if you'd like to find out more you can check the documentation this is docs.domains I technically maintain these uh they need another cleanup but that's all right if you have any questions outside the docs just come to me and then I'll happily help you out um now if you're sitting here and you're going this is kind of cool uh I don't have an ens name seems pretty cool I'd like one how do I register um you can always come to me I'll happily help you out or I'll even give you one but otherwise you can use the ens manager or any of the other cool things so there's the Enos Ferry it's a application written by one of our community members it allows you to give names at lower gas costs to new users so instead of having to purchase the name then change the records to the other person's address and then transfer the thing and then get them to set it as their primary name you can just do it in one transaction which is super cool still two but cost less gas um and it looks nicer it uses the new design system you can do it directly from rainbow rainbow the mobile app has a built-in coinbase hands out subdomains of cb.id because again any valid DNS name is a valid DNS name and you can verify them using dnssec if you just enter your.com or dot IO or whatever in the ens app it will magically tell you all about it um lens if you have a lens profile at dot XYZ behind it loosemans.lens.xyz and magically it'll work as your EMS name Argent does it with argent.xyz there's a whole bunch more cool stuff there's also some some Alpha I'm going to drop again yay we have the new Alpha manager coming out soon TM it's fully mobile compatible and like we have a whole new design system for it because our current manager is slightly outdated so we've put a ton of effort into this one it has cool animations it does caching it does all sorts of fancy stuff but it also works on desktop and if you want to test it out and you happen to have Gorly eth then you can check out alpha.ens.domains there we go um my slides are also on my website loop.show so can't be that bad uh Alpha ens domains I'll say that one more time so the events manager in its current state uh let me walk you through it real quick so this is the Innis manager I know the alpha one looks cooler um app ens domains right seems pretty self-explanatory what you do is you click the box right there you type find your name alice.eth if that was hypothetically still available and then you go to register your name um so the way your next names are registered is there five USD a year as long as it's five characters or longer um and then there's gas fees Etc depending on the network situation so you might want to register for multiple years because it might save you some gas I think currently it's not too bad but it used to be pretty bad because ethereum so yeah you register your name uh it does it in two transactions the way that it works is it uses a commit reveal system so it hashes your name doesn't really matter but it does sorts of cool stuff so it prevents people from front running you so if there's anybody between you and the ens smart contract whether that is wallet connect whether that is inferior or Alchemy or your fancy RPC provider or JavaScript library or your ISP they're not going to know what name you've registered until you've already gotten the name which is super cool um you wait 60 seconds because of the commit reveal situation and then you do the second transaction send over five USD worth of ethereum and then then you have your name this is the new manager already um it looks super cool I'm too excited about it so it looks cool you sit there you look at this and you go okay how do I set my avatar right um it's not that bad this is the old manager you go over to the the fun add or edit your records button you click it and then you go to the Avatar which is like down here somewhere um you set it in this case I set it to an ipfs link from nft.storage um and then that's it you just set your Bravo picture and you're done sweet one last thing and all of you are probably going to harass me for this one afterwards but that had to be in the presentation um I'm looseman study v3x studies bluetooth computer Loop dot contact whatever loose men's on Twitter um if you have any questions I'm also hacking I'm upstairs at the moment I'm building a whole cool thing or at least planning on working on I don't know we'll we'll figure it out um so yeah keyboard Gober um if you have any questions feel free to reach out to me I'll happily take a slight break walk around and answer any questions you might have um if after this you you go oh my God I really wanted to build something with ens or I didn't get it included in my dap just reach out loop.contact it's a website it's an actual domain um my Twitter's on there my telegram's on there my email my phone number yes my phone number is on the public internet um and my address yeah I have regrets um reach out to me and I'll happily help you out uh Happy hacking that picture's off the screen [Applause] and if you have any questions right now you can ask them as well go for it yep sweet so um the way that it works is if you go to the docs we have a template smart contract also on GitHub available um and essentially there's just a smart contract function and all of the functions get called with the name the person is trying to look up so if I write a smart contract for twitter.ngo or I did it on chain what I'm doing right now for verified.heath um what you can do is the Smart contract will just get called and the function will be called with hello.verified.eth or Foo dot or whatever so the smart contract gets it as a parameter you write your logic on how to reply to that and then the library takes that in hope that sort of answers your question sweet awesome otherwise I'll happily help you out awesome any others speak now or forever no okay you can always ask sweet awesome thank you well there's a lot of people here what am I building I'm building one of my colleague post and I said you might have my girlfriend is it eight dollars a month ly fees for everyone so well hold on thank you very good friends you're so integrated yeah you could just swap out an address what do you see it's like the problem is I'm a Serial Builder I see something I'm going to like hello um but uh Eight dollar a month um but yeah I don't know yeah I appreciate it okay a thousand a thousand projects similar to India has tried right now on every chain what you guys see like this you know so why is that one we are but we have to work together with again because we have the whole opt-in system which all it requires is one lookup on maintenance that simply it says here's where to go oh yeah for example take like 10 years to organize everyone you want yeah I don't want to go back we're working on it I don't want to go out yeah okay I think that's one big picture yeah awesome cool thank you nice talk thank you I'm waiting for you don't forget anything yeah [Music] um so um lens has went to the Phoenix verified in 20 minutes versus offer address customer error that points to the lens API and the Lindsay it went uh if you walk with me in a second I met you was something but because lens have not come up here no but coconut cabinet okay another technical questions yes um you mean the tax records yeah yes uh so technically you can give whatever you want okay um however if you do make something super cool tell me about it yeah happily either help you or do it on my own write a whole Improvement proposal to get it standardized and then we'll build it into the manager and we'll do everything so in a project called the cableman and so but our users just create tables okay and we thought ens would be a really great way because we don't want to deal with naming right inside the collection of names so we're trying to figure out you know basically but the user register a new collection of tables but then they can run SQL queries that join them really so that's pretty cool oh yeah how long have you been working on it uh like nine months or so yeah cool there you go yeah QR code on the back because yeah pretty simple shoot me a message and then we can chat more about it thank you very much uh maybe yeah I have a quick question yeah yeah so a good question you know how some ethereum wallets or yeah I'm wondering because they're basically generate a public encryption currently I'm thinking about it but I can't really change it yeah one thing is okay oh yeah okay yeah so you have a file huh thank you um oh there we go thank you I think so there we go a little vibrating should I just do this one yeah okay I brought my own too because I'm paranoid so oh yeah that's good just in case yeah no problem like School presentation days okay cool thank you foreign hello oh there we go hi um maybe I'll give it like one more minute and then get started but thanks for coming everyone this is the workshop for covalent and the unified API so let's give it like a minute or maybe like 30 seconds okay I think I'm gonna get started um so hi my name is Leilani I'm a product manager at covalent um and I'm going to tell you how to build in web3 using our unified API um so today kind of the topics that we'll cover are a little bit of the current data challenges because there are multiple ways to pull data from the blockchain and it kind of depends on your use case but I think there's definitely some common challenges that everyone's trying to solve what is covalent the unified API how to actually access on-chain data for some of your builds and then just a bunch of resources and our Bounty and demos and just like a whole bunch of stuff to get you started basically um so equivalent we tend to think about the next couple years of the blockchain ecosystem what it's all going to look like particularly how this is all going to scale especially when it comes to data so right now there's a host of different applications multiple blockchains um and pretty soon I think we're going to start seeing use cases like uh Health Data government data a lot more privacy blockchains and in some cases a lot of applications where you might not even know that it's on chain and at that point things require a lot of interoperability if you've kind of interacted in this space or you have different wallets or you build applications on different chains you might already realize some of the frictions and the challenges that happen when you try to do that and especially when it comes to extracting data which is what we focus on it's all like kind of messy and it's in different formats so we think that's a big problem to solve uh so if you have ran your own notes before maybe or built your own transformation engines some of this stuff can be one like pretty time consuming complicated uh dating can be missing and delayed we experience that on a daily basis even as like a decent sized company it's challenging and then there's the question whether to build or buy so this can be an individual level if you're going to pay for like monthly plans for different services or at a company level where you have a use case uh that maybe you want to build your own indexer but you realize that can take like you know six months to a year or something to do it properly so lots of challenges and data that leads us to what is covalent basically we are a solution to access all on-chain data and we do this currently across unofficially 50 different blockchains officially 40. uh but if you want any of the like hidden chain IDs you can just ask me afterwards so what it is is a single API a unified API which basically means that you can use the same tool but just change parameters to switch from chain to chain it's variable from the cloud you actually don't really need to be a developer to use it once I show you the docs and how we've kind of set it up it's pretty user friendly you can try it live and you can pull it in edit list mode which means you get a CSV or like a spreadsheet that you can put into tools like Tableau or power bi if you are an analyst or if you're looking at building something that requires analytics maybe for this hackathon uh and the best thing about this API is that you can pretty much build a multi-chain application in minutes because all you have to do is change that one parameter so types of use cases with covalent today basically we crawl all the small smart contracts on every single blockchain that we index so we fully index the current and historical data which means that the types of use cases are pretty endless you can just kind of use any on-chain data that you want you just have to know how to get it so we have quite a few out of the box endpoints for things like token balances transactions historical transactions nfts but you can always go through the log events and you can get a little more granular and we also have different developer tools like primer that you could use to like specify your queries even more but we see a lot of like D5 dashboards nft galleries crypto wallets some Dow tools so if you are like maybe not decided on what you're building equivalence always a pretty good bet because you know that you'll be able to get some data for your project I don't know if that's the use case or if people already have an idea but just thought I mention it so how does it work basically um we're kind of this data layer in between blockchains and nodes and then the actual applications that people are using so for developers you don't always need to interact directly with the blockchain or a read-only API so basically any data that you want to pull into your project you don't need to necessarily be running your own notes or paying for that to do it you can just use our free API to pull all of that easily into your project and then support your applications so the data layer we think is pretty essential to the crypto stack it's also something that helps everyone scale because you can build applications faster basically and easier so that's the goal and yeah we see this supporting a lot more users on chain and a lot more applications that are interoperable as well because if you've built your own kind of transformation engines in the past then you either need to build that whole thing again for a different chain or you need to make changes maybe in the in the pipeline that cause you to like reload all of that data and with us as instant so it's a lot easier to kind of be creative make some quick changes and build something different so this is how it works basically we run indexing nodes that take in all the data from different blockchains here's like a selection of some of them but I'll show you our API reference which shows you all the supported networks and then we basically format them into a couple different classes of endpoints so the most popular is Class A and points those are basically just queries that you can make on any single chain that's supported so questions like get token balances for this address it returns all the balances for that address instead of querying it like token by token it allows you to do your taxes you can pull like nft data you can pull nft metadata so you can show up the images and the video URLs and all of that stuff and then we have class B endpoints I'll go into these like in the dock so you can actually see it um but claspbian points are basically protocol specific so we have one Suite which is really popular which is for Dex data so basically most decentralized exchanges or a lot of them are clones of uniswap uh so like Spirit swap Stella swap pancake Swap all of the swaps you can pull through those endpoints you just have to change the deck's name in your query and then we have something really exciting which is actually testing internally right now but we're bringing a couple people on that are interested in this uh to basically go through this process of building their own endpoints so we realized our limitations with having these kind of like out of the box easy to use endpoints was that sometimes it's hard for people to make specific queries or support specific use cases or just access the data that we have but it's not packaged so Class C is going to be solving that building those through SQL and then saving your own endpoints and that's going to launch pretty soon but it's working so if anyone's really interested and has like a burning use case talk to me afterwards um yeah here's like some of our users uh currently over 40 000 developers which is a pretty big chunk of the ones in this space I think all of those are active but that's like the history to date um and yeah we're powering a lot of wallet applications some tax use cases currently some like web 2 companies that are more interested in adding crypto features to their project so it's pretty cool and then yeah basically support 50 blockchains again you won't see every single one of those on the reference because some of them aren't qaed but you can unofficially support them if we haven't done a marketing launch we had a hackathon guy from like East New York that built his whole project on a chain that wasn't exposed but he knew that we supported it so if you know the ID then you're all good um okay so here's the Bounty information we're offering five thousand dollars um for any projects that integrate the API in a meaningful way so basically we judge that on three points one is like the feasibility or the quality of your use case if it's actually like you know new and solving something for somebody and it's interesting uh and then two is the like complexity of the endpoints you use so how many um the way that you integrate covalent how much basically instead of just like copy paste although you can use our code templates and copy paste you just want to make some like stylistic changes maybe um and then three is just like the overall quality of the project so things like design often stick out and uh stuff like that so some ideas and I'll show you some past examples as well because I think we have lots of time um nft store friends are great on chain analytics really easy with covalent uh wallets are always an easy use case um anything tax related you can get historical transactions and we do have a pretty new way to like crawl historical transactions if you're looking at doing that at scale across any different chain um so I can walk you through that as well myself and my colleague Kia who's here in the back are going to be just walking around all day tomorrow we're not at a booth but we'll like show where we are in case you want to find us uh okay so I'm going to open up the links there's basically three primary resources one is our knowledge base so that has things like tutorials how-to guides um example projects from past hackathons so you can get like inspiration from that as well as just like General API info and the second is our API reference that's where you can actually try all the endpoints live and see what the response looks like and then three is our code template section so we have a repo on GitHub now that has a bunch of different components codologs or anything that you can basically like fork and make some changes to so it's an easy way to get started on a build as well um I think I'm gonna yeah basically go into those now so here is our knowledge base so this is the first link the API docs when you first go to it yeah okay it looks normal on here um so you get to this from our website covalenthq.com docs uh and then you'll land on like the overview here so it's going to tell you everything that I just did um but you can also scroll further down see some of our launch updates our chain supported networks and this is probably the most relevant section so developer tools you can go into some of the examples how to use websocket connections for like notifications from log events um you can enable covalent and Postman if you're familiar with working with that environment you can learn about primer which is how to like further specify your queries or you can just go into any of the supported networks and learn a little bit more about those blockchains so you can also go to the API reference from here which is that second link where you can actually try uh the endpoints live so I kind of did it before just because I always get really paranoid about Wi-Fi these things but here's the class A endpoints so the categories here we kind of just bucketed them into common use cases so balances like token balances if you want any sort of uh wallet use case and you need erc20 transfers um change in token holders anything like that it's imbalances and then nft use case you can pull in again like all of the assets and the metadata that you need to build cool things um that was General uh transactions so you can get a transaction and get really detailed logs or you can get transactions for address and get all of the transactions for that address um and then base so like at a block get all the chains that we support for instance this will give you all the chain IDs these are just kind of like your building blocks for anything you want to do and then for those decks endpoints that I mentioned um here's a whole bunch of them so you can get all of the liquidity pools uh all of the uh yeah basically all of the like Dex data that you might need token pairs their prices all of that um yeah so this is kind of like a sample response of what balances will give you again I mentioned you put in a wallet address and it just gives you all of the different tokens uh that is held in that address and it'll give you some with a balance of zero as well because we built this basically like a bank account so if you've ever had that asset it shows up you might not have it right now but it'll just give you everything um because it's like a small window I just pulled open the Json and what you would get here but basically you just get all the tokens which is a really efficient way to call it and then now moving on to our web3 resources um so this is our web 3 resources pack I think I have a QR code on this next slide afterwards when I go back so it's easier to find the link but again just feel free to ask me anytime uh also if you like this would love it if you start it but basically this has uh our templates so you can make like a DEX dashboard you can use all of that code and you can stylize it you can make price trackers you can make a mobile app we have code along videos so depends kind of on your level or if you're a beginner these can be really really helpful or if you're referring people into blockchain it's also a good resource and then we also have an integration with third web who are some great partners of ours too and this will link you to the web3 components Library so more things that you can use so basically we have a token balances component a token transfers and then a token holders so these are what they look like basically it works with ens as well which is always what I do because I hate copying addresses so you can just put in like demo.eath for example or whatever your ens name and it'll show you all of your balances as well as the logos the type of the currency the contract address so pretty much build a wallet pretty easily out of that alone and then you can integrate the erc20 transfers that that address has had and also like the token holders for each of those different tokens um yeah so where are we I think whoops there we go oh past submissions um so while we have time just because I thought it was cool we do a lot of Youth Global hackathons uh and sometimes I think it's cool to Showcase what people have built or give others ideas so these are a couple ones from East New York um which was a really great hackathon so we'll just show you some like example projects this one's called Dow Dash so they basically used like our log events endpoint I went through to get really detailed Dao information to see how much people are participating in uh the governance votes for instance and based on that and based on people's on-chain involvement in a dow they could like grow these little trees and grow these little people so it's like kind of like a Tamagotchi but for Dao participation which I thought was really cute uh this one's Brent nft loved the name on this one it's awkward if these people are here and I'm like shouting out their projects but this one basically allowed you to lend an nft um so sometimes events uh are like token gated for instance or there's other perks that you get by being a holder but you might not want to buy that uh specific nft or it might cost you know like a hundred thousand dollars so what you can do is actually like rent them this was an integration using our data to display all the front end and then with gnosis as well uh where you could basically yeah like rent it for 24 hours get into whatever you want to do and then give it back which I thought was cool uh block stories was a really good kind of like uh front end overlay with our data so there's a big problem of like human readable data in blockchain a lot of it's just really confusing the terminology is quite a steep learning curve um so block stories built this using our transactions endpoint where you could go in uh basically like open source add information to a transaction to make that a little bit more meaningful in the chains you could go and search and find that this person sold this to this person and it's written in like words you can see the most traded Punk for instance or other things like that I'm kind of doing them into service by like describing it all very slowly but just thought it was cool and then this one this was awesome this was actually an East New York finalist um oh Wi-Fi there we go so uh they basically built like a simulator that you could add to metamask that would show you whether or not a transaction was fraudulent or dangerous uh which is also a pretty big problem because blockchain transactions are super permanent so you can send money to a burn address for instance and never get it back so safe node basically you just attach it to metamask it simulates the transaction shows you like dangerous addresses that might have interacted with mixers before or anything like that so they used our data to simulate that um I can always go through like other submissions if you want to find me tomorrow but that's our developer resources um hopefully the QR code is big enough I'll also realize I'm not full screen so there we go so that'll take you to um the GitHub library that has all of those components and stuff but from there there's also links to the website um I'll leave it for like a couple more seconds and then thank you that's all if you have any questions let me know or find me walking around afterwards [Applause] Stars yeah um it's a good question there's definitely a lot of indexing services it's kind of more about how they I guess translate the data to the customer so for us the biggest differentiator uh is that we're like a elt data pipeline so instead of others where it's ETL extract transform and then load in that case basically you build your entire project and then you load the data in once you've created that custom query so it means that there's a little more wait time in getting that data and you have to be specific about creating that engine and then you also have to do that separately for each blockchain that you want it to be on whereas our approach is to have an elt framework which basically means we load all of the data from all of the different blockchains everything into a database and then just make that accessible through the API which is the transform level so basically there's never any waiting there's never any like complex code that you need to write and you can switch between chains really easily you can Loop through all the different chains that we support it's also free that's a big differentiator too uh yeah does that answer a question did you have one um good question I'm maybe not the best person to answer that because I wasn't there when they built best uh but yeah I think it's just easier with our setup to use but we do actually have um someone on our team has now built like the API using graphql and they've replicated everything just to like expand to that language I think for us it was more like an addressable demographic there was a lot of people that liked using rest and found it enjoyable so we did that but um yeah there's other options as well in case you want to use graphql uh it's all free right now so we're launching a pricing like a paid tier but we're only going to do that with certain endpoints that can really scale um but it's free it's always been free there will always be free um yeah basically we can support most use cases apart from we kind of hit like a limit from companies that have thousands of users and that's why we're creating a pricing tier but it's not going to affect any other developers that are doing what they're doing today basically yeah yeah um good question yeah typically it's pretty easy to integrate because everything is so like out of the box it takes like a day basically um so there's not a lot of Maintenance costs or anything like that because you don't need to change your queries or like you don't need to reload any data you don't need to pay for anything I mean if you are at that Enterprise level for instance um then we can talk but but yeah the switching cost is typically really easy I mean most people we index blockchains in a matter of a week so if there's something else that you want us to index that we don't and it's evm sorry I should really clarify that it's evm because non-evm takes months but um yeah switching costs are really low so because we have a free API and we've had that for years we have accumulated like quite a fair bit of Bot traffic which is the really kind of the downside which means that we just have to be cautious with our rate limits so for the the whole API is basically Limited at four to five requests per second um so it's enough to do like medium-sized kind of projects and companies but not you know like hammering our system millions of requests at a time from different users but that's again kind of why we're creating that Enterprise tier or that paid tier because we've rebuilt a lot of the endpoints that we've had for years to just be a lot faster and lighter weight so once those launch then some of them already like our new balances endpoint for instance it's not publicly exposed but that just doesn't have a rate limit because we've just built it in a different way that scales so apparently okay if you have any more questions I'll be over there for a bit and then I'll be around uh tomorrow all day so yeah thank you guys for joining all right foreign don't know I'm sorry foreign that's cool yes questions stop it slightly thank you foreign thank you enough all right uh so we're at about time so we're at about time um so I'm just gonna quickly go over how to add a uniswap widget into your site um if you're interested and then afterwards um it'll it it should be very quick and simple and then afterwards if you have any questions about um how to integrate uniswap or how to use any of our other apis I'm happy to answer them or to just go over a few of the docs to show you where to look for answers um yes is this better yeah okay okay so um to make integration with uniswap really easy uh uniswap exposes a big chunk of the swap API in a widget so the widget is just for swapping it's not for lping uh you can find the repo at github.com uniswap slash widgets and it's also on npm um there's initial instructions for using it right here in the repo as well as a branch to use it on create react app and xjs it is a react component and then just to show you how simple it is this is a create react app I'm just grabbing the window that ethereum object if it exists initializing it um initializing it with ethers passing it into the app and then it's really just one line swap widget with the provider um you can add a bunch of other parameters to it you can give it a default token to start on um you can use it as a controlled component instead of an uncontrolled component where you would be able to listen to events like when a token changed and then update the token appropriately but what that gives you I've lost it is here what that gives you is this so uh if you have nothing connected it takes care of wallet connection for you just connect to that um so there's a metamask connection and then it'll read out to you well looks like I'm on cello get out of that that's good I mean it'll give you your bounce and it will let you trade including giving you the current price when it when it fetches um so outside of this uniswap also has a whole doc site to introduce you to its contracts and the sdks to work with them um I can go over them briefly but does anyone have any questions this is this is really more of an FAQ than a directed I started trying to go through the V3 SDK to prep a demo but really what we do on the website isn't following this this V3 SDK quick guide sorry the internet's not very fast um what we do in the in the website is we actually mock trades um through a client-side router um which I believe is a public repo that you could use if you wanted to in your project um so we mock those trades and then use that to give you a price that it's going to run at which is where a price like this will come from is anyone planning on using uniswap sdks in their hacker projects today cool do you guys have any questions about how to use them um I can point you to docs but a lot of the work that I do is around swapping didn't work uh I would recommend using this guide guide providing liquidity over the V3 quick start guide which I I haven't looked through so I don't want to I don't want to just read this from the podium um yeah uh so if you have your own project and you wanna if you have your own project and you want to make it easy to trade tokens into whatever erc20 your project is using um you could use the widget for that if you have your own project and you want to encourage lping you would need to do something more sophisticated use the contracts directly or link out to uniswap to do that so if you want to make it easy to trade a specific token the easiest way to do that would be to grab the widget and just put it on your website and lock it into that one token if you look at like the Friends with Benefits website I believe they do something very similar with our widget where they just let you use it directly if you want to do something different like uh just have a little info blurb where it says the current price that it's trading at that would require you to integrate directly with the contracts and pull that yourself so basically like if if you have a need that's not the swap widget as it is we would love to hear it and maybe meet that need over time um but right now the swap widget is just is just this guy and this works cross chain so we're actually using it on the website itself if you look at tokens this guy on the right side is the widget it's just not too bridging so it can only trade within one chain cool uh this is short and there's not that much else to go over so I'm going to bring up the poap code if you want to grab that before you leave if it loads what um and I'll be at the unified booth for today and tomorrow if you have any questions if you have more specific questions about the docs feel free to flag me down I'm happy to go through any of our interface code and talk about how it works I can't do that you could just open up this conversation here send the message and then we're going to also want to pretty print something um and I have some very helpful render methods here to just give you some very pretty text mmm and so this should be all you need to send a message on the xmtp network so this is built and let's try and send a hello world message to myself so xmtp send this is my wallet address hello world and look at that it's sent and so I could check in the xmtp chat app here it is and I can respond from a any app in the xmtb network so that's great now we want to be able to see all these messages so there's this list messages endpoint uh so I want to not throw an error here and instead we're going to go through the same first couple steps and create a wallet and open up a conversation just like that and we are going to get all the messages so once you have a conversation one function call to get the entire history between the current wallet and uh the address that this conversation is with and give this a nice title since we want this to be a pretty and usable CLI and we have this render method here that is gonna render the message list and so doing that we should be able to see the list of messages in the CLI that's give this a try oh look at that we got a hello world and my response from the chat app so that part totally working so next up we might want to stream messages so you could just type messages into your terminal from uh you know anywhere that they're coming in whether it's uh you know lenster or uh the xmdb chat app or the chat app that you're building maybe it's someone else with the CLI so streaming the messages in a command line application takes a little bit more uh trickery so we are going to get a conversation stream here let's just do that so notice that conversation class has this nice stream all messages which is going to give you every message from every address that might be sending messages this is going to give you an async iterable which we can then pass into a react component to do something with it so we're going to do that and then we'll go into how you might um you know show a stream both in a command line app but also this is very similar to how we would do it in a web app so we have these uh slick little renderers here so this is a renderer for a message stream and it just has some messages but takes a stream as an argument and we want to take that and actually listen continuously for new messages as they come in update the state and then it's going to show this message list with um the updated set of messages and so let's try that so I've written this little use effect hook this would work just the same in a browser as it does in a command line uh application because I'm using Inc which is just a magic library for building uh slick clis using react and so this could go into any sort of react component let's maybe go through what I am blindly copying and pasting in here so it takes a stream which is an async editable and it's just going to do 408 message of stream and it's going to check and see if uh we've already seen this message since it is possible in some of these streaming methods that you get a message twice um we don't guarantee exactly one's delivery so assuming that we haven't already seen this message we're just going to add it to the message list and then we're going to keep track of it so that we don't add it to the list a second time I'm going to call this and it's always very helpful when you're dealing with streams in react if you clean up when the component unmounts so that'll disconnect from the network and make sure this thing doesn't keep going so we should have all the pieces in place maybe not quite all oh or I just forgot to hit save okay so there's no messages here since nothing has come in since we opened up this stream so let me send myself a message and see if it shows up which it did great one more just for fun and we have a stream of all these messages so with these pieces you should be able to you know send receive and stream messages um right over the command line it may be helpful to go into what you know we didn't do in the last 15 minutes one of the big gaping holes here is that I'm just randomly generating a wallet and saving the private key to a file on your computer for both security and practicality reasons that's not how you'd want to go out and build a hackathon winning CLI and so one of the corners that I cut is this key management problem but if someone were to go out and want to you know win Surprises with an xmtp CLI you should be able to just create a web app using rainbow kit or wag me that will get a signature from your wallet and then we have this very nice method in the xmtp a command line interface that is is that is or sorry in the xmtp SDK that is going to let you get the xmtp key pair out of that wallet so you can have this little web map that gets a signature from the wallet and you run client get keys and now you have an xmtp key pair that you could pass back to your CLI that would be a safer thing to maybe store on an individual developer's machine and you could reuse that for both sending and receiving messages um and so how you get that in between the web app and the command line interface that's up to you but should be very possible and would let you make a really nice user experience so I think that is all I have for my talk today does anyone have some questions shoot yeah that's a great question so conversations today are stored indefinitely and are paid for by us as we're running all the nodes in the network as this decentralizes um we're going to have payment for messages and those fees will be distributed to the people who are running the nodes I know around not today but that's clearly something we are very actively working on any other questions yeah it's obviously something we are thinking about a lot uh we can't commit to anything just yet but it's a very important part of making this a self-sustaining Network and so we got um people really studying and trying to figure out how we balance both the user experience and the sustainability of it goal is for this to be so cheap that you know an application developer could subsidize it on behalf of their users that would be the ideal state yeah so the nodes right now are running a waku which is built by the status team as a decentralized messaging protocol uh that we are building on top of they have a storage system which we've written some improvements to to make it uh pretty scalable so we can throw quite a lot of traffic at our nodes and they are holding up just fine um but it is waku with a custom store and you know that may be subject to change but that is the network that we're running right now sure oh yeah uh that is a great question so we have a very flexible content system most of the messages on the network happen to be text but you can write your own uh codec and store anything that can be serialized to bytes and so you know you could store images people are storing images on the network already uh you know you can build application specific content types we also have this xip process where if you have a content type that you think is really special and great and other people should use it um you can put together an xip propose um that this become a standard and get other developers to you know make their apps compatible with your custom content type we also support fallback text which is uh just plain text so if your app encounters a message in a format that it doesn't understand there can be a safe fall back so that we can have some you know consistent user experience when there's people doing experimental new content types latency is quite fast like in the hundreds of milliseconds to get a message to you there is some rate limiting people don't hit it their rates are quite High uh so unless you're a bad actor or trying to really do something abusive to the system rate limits aren't something you probably have to worry about oh sure yeah everything is off chain but it is persisted uh and you know we're committed destroying messages for a long time in our Network and the only time we would you know remove those guarantees is if we had a better solution where the messages could be stored Elsewhere for a long time um but it makes for a really nice user experience to be able to open up any xmtp app and get your entire messaging history shoot yeah so I think we tackle this in a couple ways one is just making sure that you know we're doing everything we can to enable interoperability at the SDK level um you're documenting things very clearly so for example in the case of the lens ecosystem we have this concept of a conversation ID that can be used to group together conversations the lenster app is the first app to use a new spec that we have out for a lens protocol conversation ID and then we're getting other members of the lens ecosystem to adopt that consistent naming for conversation IDs and just with that one little bit of consistency all those apps become compatible with one another if they start introducing content types that's where the xip process comes in um and you know that is a social consensus and we can work with developers that if there's a content type that is really good and feels universally accessible that we can get everyone to adopt it or are you know potentially even included in the SDK if it really feels Central yep oh yeah so there are some people who have um you know built some hacky ways of doing multi-party messaging on top of one-to-one messaging where you would uh just send each individual participant you have some sort of uh uh you know conversation ID and then you can kind of uh hack it together the version the SDK we launched this week would make that hacky solution better but we are thinking about how we can do really great native support for group messaging we certainly wouldn't make that very easy for you like the network just treats messages as bytes and so the nodes don't put any constraints on it because it encrypted piece of content is indistinguishable from noise and so we can't check that it's encrypted um but the default behavior is end-to-end encryption and uh we haven't seen a lot of demand for people asking for anything else yeah so it's become a little more sophisticated in that we actually have conversation scoped keys so me and you we're having a conversation I send you a message that is encrypted using your public key and uh version of signals x3dh but then I send you this invitation it's a totally random key and we'll use that in the scope of this conversation that's also how we could store the messages on a random place in the network and so there's a little pointer in there that says hey when the two of us are talking we will talk on this random topic ID and that's how we get some of the Privacy guarantees out of the protocol foreign exactly and that means that like when us you know someone who can look at all the messages on the network we have really no clue who's talking to who in these messages uh because the topic and is the only thing that we can really see and that's random yeah so you would send one copy of each message to the topic for both parties to be able to read it yeah so we have um you know some researchers working on how we're going to do group chat we have some really cool stuff that I wish we could talk about uh but not just yet so right now all messages are one-to-one sure oh yeah so the way that it works right now is we have an xmtp specific key bundle and your private key and we create an encryption key for that using a signature from your wallet and a nons and then we encrypt your private key and actually store it on the network and so everyone's private keys are on the network they're just encrypted and so when you come in with a new device you can just sign the same message get the decryption key and pull down your encrypted a key bundle and decrypt it on your machine and so makes for really seamless transition between devices because a lot of us you know use web3 in things like mobile wallets where you don't have persistent storage available and so it's the default use case is basically a recovery use case oh I am out of time here I think uh I Gotta Give up the room all right thank you guys so much [Applause] thank you [Music] yes you have without you it would be you know a little fussiest if it's a lower level oh yeah um let's do that whole thing yeah so it's already not there all right yeah but it's a mirror it's mirror too I'm not really sure how it does it on the I'm not sure sure I don't really ever use it I already turned it off yeah look this is less warm though oh that's on you right here only doing it here yeah yeah but it's it's because it's coming out of your external yeah I know and it's because it's mirroring right now so maybe if I uh one second let's try it it's okay we'll we'll figure this out still yeah trying to trick it and tell her not to do it let's try something nice I could I could Google it real quick no worries we got time you're fine someone someone chasing it no one's I just thought someone was like right after me so it's okay it's on custom still right I don't know I'll look it up and tell you after thanks for trying and then do I just start whenever okay about what an active uh foreign hello hello test okay welcome two or or do workshop for you SF sorry the for some reason my computer just decided that it wants to be in the night mode and I want to sleep so we're gonna just go with us today uh so my name is Jackie I work as uh wizard relations so basically developer relations uh for June I go by Agape online um and then I guess a little bit about my background I used to be a developer for Banking and then I decided I want to do more data stuff for traditional finance and then I found out about crypto and I'm just like oh my God I need to be in this field and then I just started doing like when you do web3 data you cannot help but run into Dune basically so that's how I found out about Dune and then here I am working for Dune So today we're gonna go on a journey about how to build the frontier of web 3 data analytics okay so if you want to follow along there's like links and stuff this is the um the link for the slides itself so I put some like reference docs links there um I'll leave it on for like a few more seconds to um for you guys to scan yeah a little lower okay cool looks like we are getting there okay cool okay data right so up till now the data in the old world were like the web 2 world where Harold lives saying right it's like proprietary uh you have to pay for the access and it's very slow um so think about like I don't like JPMorgan these big Banks uh everything for them is like super close they want to make sure that they have the best competitive Advantage so like everything is like Preparatory for them like closed and then you need to pay like Bloomberg it's like very expensive right like if you have a Bloomberg machine for your analytics um and then if you think about like oh there's like always talks about earnings Seasons right like you have quarterly reports so like you don't really have real-time data about like your firm like the industry per se um so as a result of that you're doing a lot of repeated work so that could be like data scientists from like two different big banks that might be working on the same project but they're not really like collaborating which is with each other and like learning from each other um and because it's so expensive right like that you don't really have access to like good good data so it's like high barrier to entry and as a result of all of this it's just like less Innovation for humans for like people who are like interested in web3 data in general crypto though on the other hand we have a shared public back end right and then we are able to have a live view of the chain right so it's like real time you can see like what exactly is happening with all the transactions anyone can analyze it real-time flexible and like it's super collaborative like we're all building towards the same goal so as a result of this a result of like a super open system a collaborative system and like everyone's building on top of each other right real time um I would argue we would argue that the a non crypto Pepe actually has better access to uh data about their system than say Jamie Diamond uh from JP Morgan right because of the crypto ethos and the way data is set so for me personally that was like one of the big reasons like I got into up through data it's just like for me for this first time in history I see because like before it would be like cargo if you're a data scientist would be just like okay kaggle we have like free data and then we can like three models but now it's like we have real data about blockchain it's free and it's real time and we can just like everyone's building toward the same goal and that just really excited me okay so how does Doom fit in with like the whole web3 data thing that we're just kind of talking about so Dune is the leading Community powered crypto data platform and then our mission is to make crypto data accessible to everyone um so kind of assuming like if you're here like you're interested about blockchain like you hear about how blockchains like open and everyone has access but if you actually like look at it from like a node to like when you can actually like produce analytics the journey is like quite a lot right you have to like first harvest the data and then you have to pre-process it to be the format you want and if you like do analytics it's just like quite a lot of work in between actual data and then like the data that's being produced from blockchain so like what do you can provide for you is that so like comply so basically in aligning with the uh web3 ethos it's uh open to everyone it's composable so you can like I'm like building Lego style you can build on each other's work I can show a little bit more later and then it's very Community Driven so like everyone is here to build with everyone else and we're like all here to help each other so that is doing together with like the web 3 ethos and like a bit more specifically the way I think about Dune is like two component so you've got the data component which has like the real tables the decoder tables and the spell book we call them they're like abstractions that are built on top of the Roll tables and decoder tables I'll give you some some examples like later on right after this so that's like the data side and there's the community side so we call our community members Wizards because they're just like making magic to to the data um so they're they're like an essential part because you think about it like when when GitHub become like really popular you got like these open source um coding that's happening so like everyone's like open source software right and that's like how we got to the space to be where we are today and we're like so early in the open source data field right so like it's like tens of thousands people like eventually hopefully like millions of people are just like here I'm like building the data analytics right so before this like people don't really think about engineering we're building data analytics but we can because we have the same shared back-end and like why not um okay so for the rest of the talk just gonna kind of like explain how you can use Dune um to build the frontier about three data through kind of like three different ways they're not very they're not independent they actually feed into each other but just categorically speaking these are the three ways uh and then we're gonna kind of like go into the angle from uh nft Marketplace analysis so we're gonna like try to look at like nft Marketplace um okay so data so just kind of like level setting um data is produced by launching activities right so here we're just going to use the support super simple example because we're talking about nft Marketplace so we're talking about like nft trading so simply put person a just like get person B some money and person B just like transfers the amount of feedback to person a right like in a very very simplify format that's like what happens so when this transfer event happens kind of like the life cycle of it it's just like an externally owned wallet has to sign this transaction right and then the transaction the signed transaction would call like certain functions right let's say like a transfer function um and then also it should also emit an event not not all of them do but like let's just say it compliant with the with the um with the standard and emit events so after this right so from the functions in terms of like how it generates data so the call functions will generate call data uh along with like the same transaction and the data will get reflected in one of the robot tables called like the transactions table right if you're familiar with like ethereum architecture so that's how the data gets mapped to the action and then also uh the surface level transactions will trigger some internal transactions right so the those data in turn goes into like the traces table that we have another Rule table and then for the emit emitted events those are locked in the locks table um so we can kind of like walk through an example so here on um I have an example of just like on openc somebody wanted to buy some uh this kpr token NFD um and this is like the transaction hash for it um and then so in turn if I want to look at kind of like the transaction data associated with it what I can do is like I would grab the transaction hash from it right and then I can make this bigger so you can actually see okay so here uh remember I was kind of talking about like the three types of data actually let me minimize it one more time so on the left hand side you can see that we have like the roll table right the decoded projects and the spouse so the raw tables are just like transactions traces and logs those like raw data that's being like emitted by the chain like broadcasted by the chain the decoder projects come from like let's say you have like uniflap and you have Smart contract and those like produce data but instead of just going straight up to like the transactions like the roll tables you can actually go to the decoded projects to get like better data and it's like really powerful if you know what you're looking for um and then the Spells are just like abstractions built on top of both raw and decoded projects um and let's say like if you want to analyze all the trades and the nft sector um and then you might not know so like us a person who might not have like deep backgrounds about um how is a trade being constituted how how can you read the trade data basically from like the the solidity code level right you can go to we have this is like all Community gathered uh data so we have like these nft da trades table um and then from here you can already see there's like the amount that's being traded right you can also see like the buyer the seller of it so like if you start from like the top we actually have table like this Expo Book Table that you can like start but those are like kind of like uh um diversion from what we're talking here so those are three types of table that we have um so kind of call me back to the role table example we're talking about so we can Quarry from uh ethereum transactions table and then we just like filter for this specific hash we're looking at um putting the block number just to like optimize the performance a little bit um and then we can simply see oh like from from this person to this person like this is like the transactions that's been triggered and then this is like the data associated with it but like as you can see right it's very like gibberish like you can't really read it it's just like blah blah blah blah blah so you need to do more work about this but yeah so that's the transaction stable and then I guess quickly show um literally the same logic about the traces table you just query the ethereum.traces for the transaction hash and then you get all the internal transactions that were triggered by this like top level transactions but again the problem here is just like it's still like not very human readable it requires you to have like a lot of skills to be able to like parse the data here you can because in order to get the higher level tables we talk about like someone has to be equipped with this knowledge but that's like the beauty of like the space only one person needs to like find that and then everyone else can benefit from you so that's like to me that's like the beauty of like open source data um okay I'm gonna like skip the the logs table you kind of get the idea these are like the real tables and then just decode a table like just to give you an idea so with openc right like they release their like C port um contracts and stuff so you can like directly query for the open CC support contract uh this particular event order fulfilled um but again like this requires you to have some skills you have to like know how to parse um these data tables however if you just go to Spellbook um so for nft.trades table that I was just like showing you guys literally like here it's like super clean you can just select the seller the buyer amount original currency symbol and then you get like a really clean results um I don't know so when I started looking at I used to flip nfts and then when I was like looking at the data to support like what nft army charge opportunities I should look at it was like so much to just look at the contract level data but then like once I like once we have this energy trades table it's just like so beautiful you're able to just do analytics so quickly and then it almost like I feel like in a way it's like the community self is like democratizing the community itself right like everyone's like built into a higher level table and then we're just gonna get better and better as a as an ecosystem um but yeah so those are the data tables um and then just like quickly a word the way you get from some like base level tables from transactions traces to nft.trades um we use this thing called like DBT for data transformation um you can read more I'm gonna skip this part that I just want to show you guys like there's like a quite nice lineage Trace from like from like this abstraction table like how do you get from the subtraction from the lower level to abstraction table there's like a lineage graph that you can like go look at um but yeah it's we're I'm going to skip this for today um and if you want to know more about how to contribute to our spell book you can check this link out there's like three different guides depending on your style you can go like digest and um and do it so so yeah that's how you can contribute to open source data from like the data perspective um the second perspective is uh the dashboard which actually like is a tightly coupled with the first one because without data you can't actually like do dashboards uh but just gonna show you guys an example so here we're like talking about how do we do nft Marketplace metrics right um so this goes back to the spell book that I was talking about so what the nfd.trades table we have data for openc on like ethereum and Solana magic edit looks rare I'm not going to read all of them but like literally like someone so one person can go contribute to openc on ethereum and like someone else can do openc on Solana and like together we get like this more complete um system view of like all the nft marketplaces and that's just that's just beautiful amazing right so then with this table what you can do is just like okay we want to see the total volume uh uh in USD in USD term or in Translation account you can just do that and the way you do that is like super simple um if you know SQL um it's just you see like two lines of code select count distinct unique trick ID from nft.trades right so like this really simplifies the process like when we think about aggregating like total value Locked In Like A protocol it's just like such an insurmountable task really right because you have to like know what protocols are out there you have like aggregated blah blah blah but like with a table like nft.trades it's like everyone is trying re trying to reach that like complete picture for nft marketplaces right and that as a result like the par the people who come after like we're all benefiting from the like people before us so we can just write a simple query like this but obviously like the caveat is you have to understand what data you're querying so like you have to understand like the data you're querying only includes these marketplaces that are like listed um but yeah as long as you know like what data story you're telling from um I think that's I guess that's like the trade-off you're you're doing like you have more flexibility but you also have like more responsibility because you gotta know like what data story you're telling from um but yeah so with this data set you can also just do some like visualizations about like the market share from different marketplaces that you can rank them by their total volume and all this is done by just like writing some simple SQL and then once you have the SQL ready let me open one of these uh so let's see with this this pie chart right um with this uh so you write some SQL and then once you finish writing that SQL you can generate a visualization from the uh results table um and then it just and then you can just like add it to your to your dashboards I'm flying through all these just feel free to stop by our booth like if you have any questions uh because there's just like quite a lot to to cover for for our platform um but yeah so another thing I like I quite often do uh feeding into like learning from each other like building in public um we have so I go to this like discover page uh for for Doom and then I just look at like what's trending and like if I like I recently was like really doing a deep dive on uniswap but I want to see like what other people already did for uniswap so I just like came here and I just did oh like you know Swap and then I just search for it and then I see like oh my God like a lot of people already did similar things and I can like go like click into each of them right and then I just see like what other people have done and then I just go clicking to their query and I learn from it so like in this way I feel like we're also building the frontier of web through data through the dashboards you're learning from each other you're sharing it's like all in the public and they're just like you're also having fun together how nice is that um okay so lastly also kind of like feeding to the the data side you can also build a frontier above three data through um just just apps right through apis okay so we are still in the beta uh testing stage of uh API but uh if you want to come by our booth and we'll give you an API key to test it out I'm just going to quickly show you like a demo of how we can do this um let me just pick something let's see what did I pick over here okay so we're gonna just pull data for this one so we're pulling data for the 24 hour volume on all the nft marketplaces that we we have on June um and it's just like uh a number so the way you can use API to pull Dune data is you get this query ID right so the first chunk of number after queries so you copy the query ID and then I'm gonna come back here I'm gonna paste it here okay oh I already did okay so let's see so nothing really hard I'm going to just import the packages that are needed um and then I'm gonna I just wrote like a quick function kind of by calling our endpoints to get the data uh I can walk through that a little bit um but pretty much like just standard call to get the data okay so first like I'm loading my environment right to make sure I can have my Gmail API key cool I do and like make sure okay this is like the query that I want to query for and then cool I'm just like running this function so all it does is just like first okay authentication and then calling out like API Dune endpoint and like putting the query ID and then say okay let's execute right once it execute it's gonna like get the execution ID for this particular query ID um so you grab that and after you grab that execution ID it has to because it hits our back end it's like literally running the query live like in in our like engine so you need to wait till the query finishes so here I just have a simple while loop just waiting for the Quarry to finish executing and once the query finished executing then I basically call another endpoint to get the results for this particular execution ID um and then I just do some simple parsing to get like appendix data frame um but yeah we only have one number here so it's pretty easy we just got ta-da like 24 25.923 um but yeah like a very very simple example but you get the idea so um the way you can like pull data from Dune it's just like you write a quarry about like whatever you want to analyze and then after that um you grab the query ID and then with the do an API key um you just get the result and then you can feed into whatever application that you want to build um so going back to here and then this is like the link to API docs if you want to like actually dive into a little bit more uh so today or this weekend uh we are giving five times two thousand bounties to just kind of like for epic integration with our Doom API um read more details online about this obviously um and then you can fail this form if you want an API key this is the QR code for the form uh uh but yeah so lastly just want to leave with some like inspiration ideas right because like in a hackathon I think sometimes unless you came with an idea it's like quite hard to know what you're building so let's do an API in the past what people have done um they built like sector-specific Market intelligence so like the moon blocks they did like nft sector Marquee intelligence so they were just like pulling data from from June like basically the empty.trades table that I was showing you guys and then they feed that into their own app or someone else did like a no code interface um so they basically used do an API to integrate with like Google sheet functions that's something you can also do um or there's like data transparency tool um so right like uh tornado cache was just like such a Hot Topic so somebody like a team implemented where you can put in your address and like it will tell you like how much uh closer you are to being like kind of like docs uh by the government um but yeah so some other things you can do you can like build trading automation so because you can get like trading data live from from from Dune um you can think about how to like transform up to things into web3 so like the same funnel that web 2 analytics often do you can do the same thing like in web3 um just uh yeah in the same stack um but yeah so the data must flow and uh Happy hugging this weekend thank you [Applause] so feel free to stop oh questions yeah uh yeah so from my own understanding like the difference so so graph will give you like Sub sub graph endpoint right you can call directly but it's like you can't really like customize it so if you have something that you you really want to dig into then it's not really possible so like basically like with with you you're like you have like SQL and you just like build your own query and then you just call that it's like more customizable um and then I think another um not super like totally different thing but just like something else I was mentioning like we have like such a Vibrant Community of wizards so like it's like everyone who's interested in like oh through data who's in our community they're like building these queries and they're building these spell book right like the extraction of showing like nft trades that is something like by one person it's really hard to do but you can like just leverage on on like Doom SQL or like the Doom data set and then you can do that as well so yeah thanks yeah yeah no no it's it's so like we're gonna forever have a free cheer so just like as you demand more performance um like same thing with like on the app or like on the UI so we're gonna like on the app where we're on the API we're gonna like uh charge you basically as you demand more performance but also we believe in like building in public so if you're like trying to do everything for the public goods basically all these dashboards right it's all public then we don't like don't really charge you like if you just like use the community version but like the moment you start like making things private you start like pulling data for your private use then that's when we um start yeah monetization I think I believe it lasts for two weeks yeah two weeks trial I think yeah so when so we're selling beta when it comes out um I believe there will also be like a community tier yeah and then like other higher level page here as you demand more performance okay let's see if I can help answer it yeah that light without having to find their actual program you know what I mean like where's that trash bag s yes I think if I'm understanding correctly the way you can pull data is through calling this query ID right so if you have their query ID you can check like what goes into this query logic by just like just checking the SQL logic so I think I guess like the trust would come from like you checking if you agree with the way they built this query but if you don't check it then I guess you can't so you should you should tuck it I guess based on what I'm saying you should check their logic if you are worried about that yeah uh-huh yeah yeah so are you more talking about like nfd.trades like you don't really know what goes into an ft got trades but I yeah I don't know about stars there's I may start is kind of like a good approximation but okay so first like if you go to like the basic level of like ethereum uh like World tables right like everyone has the same data so if you have like the wrong data I imagine someone just like we'll report that but from there so everything that's like built on top of it it's like open sourced so you can go to our GitHub and see how is that being done so like if you're like really really caring about like your data quality like you can just go check it yourself you guys went up at the same time so to sorry can you decentralize the uh that is a great question I will get back to you I will ask my teammates and get back to you far away yeah what's the difference yes yes so I think when you're talking about like you're just investing data you get you get the raw data so okay we have the same role but um as far as I know we're the only one that decodes every contract that you submit so it's just like if you want decoded data we're like decoded yeah so like so like you see you have the ABI and you have the contract and then instead of like you can let's see so with the unit swap right like there's you know swap has these like paired token like newswe3 pair and then let's see you've got uh the data that's generated by these calls you can query with SQL and like you can see the actual results of it yeah instead of just parsing the roll table yeah yeah yeah so that's the yeah so we have we're the only one like as long as you submit the decoded contract to us we're gonna decode it for you we are working on automatically scanning everything yes we will work on it yeah yeah yeah yeah exactly exactly so that's that so that's like that and then also on top of that we've got the abstraction on top of these two right and then just like the community built towards that and like as a single team or one person it's very difficult to get to a complete picture yeah yes yes not only the yeah yeah so you're basically like looking at like transfer into a particular decks right like yeah yeah you can just track the transfer event and I'm sure there's like already abstraction tables built by the community out there um you can uh contribute to our spell book it's like it's like basically uh public GitHub so you just it's pretty much just like invite more SQL to this yeah visible request to our Spellbook um and that to it yeah this one wrong yes that is a great question I don't actually think our front end is open source I don't think so I don't think so I don't think so but thank you yeah no problem no problem it's not fixed to be able to do that no yeah yeah so as long as you give us a contract with the ABI we'll like decode it for you and the analytics is done by the community so like you yeah yeah yeah yeah yeah yeah I like them I feel like I'm out of time but like I don't know if there's another person after me okay great cool yeah just I was worried to take it away someone else's time um but yeah anyways find me at the booth for more questions yeah it breaks down the skill s 
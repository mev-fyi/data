foreign [Applause] [Music] thanks for uh thanks for tuning in super excited to be here I am Alec Wantagh co-founder and CEO of ballast and we do Universal software deployment and monetization and I'm going to tell you about what that is and uh hopefully we're gonna be able to do a demo here but the internet has been quite shaky so and unfortunately my demo does require internet access but uh we'll go over the uh the overview and I'll show you some Great Links where you can find some resources uh to get started either way but uh yeah let's just jump into it um but uh yeah at the end of the day right now today web 3 is not fully decentralized and even though we're putting massive amounts of energy into decentralization it's pretty much completely centralized at the distribution layer so even though we're building all these web3 protocols we're falling back to web 2 platforms like GitHub and versal netlify uh and app stores and so really at the end of the day these problems these have major problems in that they own all of your products because they have ultimate control over it they actually own all of your users as well and the crazy thing is is that when your users actually buy something they don't actually own it either because it's just a mark in the database somewhere and that they could control that and remove it whenever they feel like it so it's this really crazy situation that we found ourselves in because we're relying on all these centralized companies and Gatekeepers for Distributing our software and at the end of the day also they take often 30 plus percent of your revenue and when you're actually Distributing software you often have to tie multiple different uh SAS products together and everything like that so at the end of the day all we're trying to do is publish and potentially monetize our software and they're making it pretty uh insane but uh it's a good thing that we do have the tools to solve this and that is balanced so Valance is a web 3 native software deployment protocol that is designed to replace all of these traditional Gatekeepers it is an easy way to deploy any type of application you can deploy web apps mobile apps and desktop apps in a super seamless easy way and then we deliver it to every single platform as well and basically what we're doing with Dallas protocol is we're taking the same security that powers these multi-billion dollar blockchain networks and applying that to the software distribution process and so basically getting the security that we get from all these multi-billion dollar networks right out of the box and really let's just save a bunch of time and money from configuring things and reducing the operational costs and the ability to uh avoid these crazy fees as far as the marketplaces go as well because now you can directly monetize things to your users instead of going through a company so valus also securely delivers software to any platform you could take pretty much anything as input you can connect it to a GitHub repo or you could drag and drop your build we support web desktop and mobile platforms which includes of course websites uh Mac apps Windows apps Android apps and Linux apps and then everything is stored on ipfs and filecoin and we use polygon for managing the access control and managing the accounts the projects and then the versions underneath so all the core logic of the protocol is powered by polygon and basically it just ties together all these different protocols and is super easy to use interface and then once it's all deployed there we make it available on regular HTTP so you get an ipfs Gateway URL out of the box as well as a web 2 subdomain for free out of the box and it's of course available on ipfs and our desktop mobile clients as well and then we're rolling out the ability to also publish to the existing app stores so that you can get the best of both worlds and then to avoid the 30 fees you could direct them to the ballast desktop launcher and mobile launcher so uh we can avoid that 30 Marketplace fee and replace it with a five percent protocol fee that protocol fee also covers the gasless transactions so you don't have to actually hold any crypto to get started uh you could just basically publish for free and get it going uh it also covers all of the decentralized storage and everything that surrounds it um and instead of having to tie together multiple SAS products like GitHub versus nullify or fast lane and configuring all these build pipelines which could take weeks to even months to do in a production ready environment it's just one single interface and you could just go ahead and pick your platform pick your targets and click deploy and you should be ready to go in really minutes and uh what does web3 web software distribution really look like so it includes the base fundamental features that you would expect from any software distribution system which includes being able to deploy your application being able to fetch and install it in an easy and secure way as well as auto updating it and then we have this awesome thing called software license nfts so that if you're actually trying to sell an application you could go ahead and create we use ERC 1155 for it basically all you have to do is set pricing for your product and you can accept any types of tokens as a payment mechanism and then we're also adding Fiat Gateway on and off ramp support so that your users can also purchase uh with cards if they want to um and then you could withdraw into fiat currency as well but so basically it's using crypto as the the backbone and and the rails with awesome interfaces on top to make it super super easy even if you've never used web3 before or if you're a web 2 developer and you're not even trying to get into web3 you can definitely still use this and get all the benefits from both and really this looks pretty familiar to existing things like we poured over the the common features from platforms like versal and steam and GitHub which includes the ability to version your software uh publish and auto update your artifacts um and manage both the team level access control and project level access control so you can add any addresses to an account and then they can publish to any projects underneath and then you could also be more specific about the access control and say hey this key can only publish to this project and you could also do really interesting things like multi-sig releases so if you're very security conscious about this or you're a larger organization or if it's a protocol that multiple teams are helping build they can actually come to consensus and coordinate on these builds as well so it's a really interesting uh way that we could sort of escape the web 2 uh version and once reported over again we have a unified interface for publishing web desktop and mobile software and then we're no longer relying on a single entity for distribution and if you're using the native ballast desktop and mobile clients that has its own ipfs node built in so the more people that download and use your software the more resilient it becomes we also host back-end infrastructure and and synchronize and make sure that everything that is uploaded to ballast has a copy on ipfs and filecoin but you could plug in your own infrastructure you could plug in your own ipps nodes you could plug in your own polygon nodes whatever you like or you can even do hybrid deployments and use some ballast.io stuff for some things your own infrastructure for others so it's really up to you however you want to configure it or you could completely self-host and not rely on anyone at all and uh you can basically monetize software like I mentioned with software license nfts and so essentially this is a new way to do digital Rights Management DRM and traditionally we have to go through Apple Google or Steam and basically give them 30 of our revenue for that or we have to tie a bunch of these other crazy apis together and Licensing systems are usually very complex and they're changing a lot but this is the most modern way and it's the the web 3 version of the DRM and this is the future of digital Rights Management and again you're monetizing it directly with your users so you don't have to go through any entity for doing that and uh like I mentioned as well Dallas can coordinate releases organizations can coordinate releases um in various ways and add different levels of security there and then we could do really really cool stuff like creating an auto update system powered by smart contracts and ipfs so for even use cases like critical infrastructure you can imagine that these things could be updated whenever you push an update the rest of the devices can actually pull that update from each other since it's all decentralized storage and CDN from that and so yeah it's again a more advanced way to deploy auto updates to your infrastructure regardless of what uh type of platform it is and how does it work well basically um I'll keep this uh as high level as possible but we use web3 native building blocks to create this secure infrastructure and basically create a new uh software publishing protocol layer for this so from the software developers perspective all you have to do is just publish your software and we use your wallet as a web3 native identity but if you don't have a wallet we have passwordless email login so you could just log in with your email address and get moving no problem and then you can manage pricing via the software license nfts Say Hey I want to if I'm selling a game for 20 usdc I can do that or if I'm selling an app for five usdc something like that or even your own custom token whatever you prefer you could configure that way and multiple options as such and then you could go ahead and withdraw balances in crypto and in the future in Fiat as well uh upcoming pretty soon here and then everything is stored on decentralized file storage so all the software in valves protocol gets stored and archived onto ipfs and filecoin and duplicated on different miners around the world so you're pretty much guaranteed that that software is going to exist um and then the cryptographic hash of your software is then registered in the vallus registry smart contract so all the stuff gets uploaded to decentralized storage and then you take the result of that and then we put it in the smart contract and this basically manages the entire core logic of the protocol so it manages the entire version history across your entire organization um and it also manages the accounts and the projects as well so it's a it's a three layer system so it's the count uh that control the projects that publish releases and so it keeps track of everything there and it coordinates all of the organization members and it manages all the security features as well so super super easy stuff there and then if you're monetizing software we support various software licensed nft networks we're deploying to several others right now as well but the idea is that you could go ahead and create that on any network and then accept payments like I mentioned as well and then from the end user's perspective it should be pretty seamless uh there's there's a few different ways that you can launch it we give you a web 2 URL as well as ipfs Gateway URLs so you could direct your users there you could also embed that stuff into your existing websites and do download links and stuff like that as well but from your the end user's perspective they're launching and uh and downloading things and just as easy as ever but in a super secure and decentralized way and then they can go ahead and purchase the software licenses super easily um and then very soon here they'll be able to also purchase that with credit cards and Fiat as well so that is basically the high level overview of the way that the protocol works but then this creates That Base infrastructure that anyone could build upon as well so how do we use it there's a few different methods so we have a web front end and again the internet is not loading and everything right now apologies for that but uh we have a web front end that is our main dashboard you can manage everything there it's super super easy it looks like virtual uh it's very familiar you can navigate you can see your accounts and all the projects underneath and manage everything in a nice clean UI as well as set up uh automatic deployments with your GitHub repo so that's the main interface most people use and then I'll show you this in a second but the sapphire launcher is our native desktop and mobile client so this is essentially you could think of that as an alternative app store or a steam but for web3 and that has its own built-in ipfs node and its own built-in wallet that passes everything through super transparently so that from your end user's perspective let's say you're building a game right now most of the time if they were to go and pick up an item if you were mincing an nft there it would actually stop your gameplay and you'd have to jump out and sign a message whereas with this it can do it super transparently when you need it and then anything that affects money past a certain threshold it'll do a nice steam-like overlay that's like hey by the way just to confirm this might withdraw like somatic from your wallet just just making sure that you want to do that and then it makes it super super seamless for the user as well and then we also have a CLI so you could publish with the CLI super super easily you could put it in any CI CD system so if you're using GitHub git lab whatever you prefer Circle CI you can put that there as well as publish it from your local machine that also supports Advanced configurations for multi-platform releases so again just like the web front end you could configure hey I want to publish my web my Mac version and my Android version all in the same release and the CLI does that super easily as well and then our GitHub action is basically taking the SDK and making it native for GitHub but you can also tie that in with the uh the automatic deployments as well so if you're already using git of actions all you have to do is add the vallus publish at the end of your workflow and it's super super seamless and then we also have typescript and go sdks so basically the typescript SDK is what powers all of these other things so um it just wraps all the different protocols together and again is basically the core logic of ballast protocol um and then we also have go sdks for depending on your use case as well so if you're doing like you could do cool things like auto update your go binary by fetching the latest release and and doing that so really cool stuff there um the web um so hopefully I'll show you this and hopefully the internet will work but otherwise this is basically what the web front end looks like you have your accounts you have your projects underneath you could create more projects when you go inside of these you could create new releases you could configure uh the project settings as well as uh the different types of platforms that you're targeting and again it's all the logic of the protocol is is available here and a super easy familiar way and then the sapphire launcher is the cross-platform game and app launcher and so you can see here um this is a web 3 game that is launched super natively um it's got a built-in wallet there that passes everything through um and again provides that super easy familiar interface for you so instead of having to rely on the App Stores you could direct your users to this and avoid those 30 fees but it also has its own built-in ipfs node um as well so everything that it's downloading gets cached to local ipfs so it becomes more and more redundant as people use your software and so the more and more people that use it the more and more copies exist and the more and more censorship resistant it becomes as well and so this is available on Mac windows and Linux and Android and iOS we're figuring that out there's definitely a lot of uh restrictions there but um that'll that'll be coming soon but uh the CLI again super easy interface basically you just install it um we use valves basically um we use your native keychain um on Mac OS on Linux we use gnome key ring and on Windows it is the credential Vault I believe it's called um but uh basically these are all super secure ways that are powered by Hardware security on your desktops it stores a fresh ethereum key in there and since it's powered by meta transactions we can add that to the account and then to publish you just publish your account name your project name the version and then the folder that you want to publish you could also do a more advanced configuration by configuring a vallus.yml file and I'll show that to you in a second but this is a really really easy way to get started um and to just super easily publish and then the git of action is something very similar so all you have to do is say Hey whenever I'm pushing to the main branch go ahead and give it a publish and you could you could pre-fill any of the previous steps here uh in this example basically we're publishing to Acme co under the test project and we're publishing the build folder from that and and again do the access control features with this you could generate a fresh key that only has access to that one project or it could have access to multiple if you want you can add it to as many as you like but it allows you to restrict the access for that particular key and you don't have to hold any crypto inside of it so you could basically store that as a GitHub repository secret on your repo and then it will use that as a signer and where we have meta transactions out of the box so you don't have to sign any uh you don't have to pay anything for crypto and it will automatically publish super super easily there and so that's that's really nice if you already have workflows and then we have an automated uh an automated uh deployment system as well so on the web front end you could click the deployments tab and you could choose the GitHub repo and it will automatically generate the keys for you add it as a secret and set up the deployment process and open up a pull request that has this GitHub action on your repo and so you don't have to rely on any third-party infrastructure except for the stuff that you're already using instead of having to trust random build servers that who knows who's running that we could already use the existing stuff there or you could use your local machines or you could use a combination of so um and then we also have an SDK this is just a quick example of fetching the latest release you can generate the project IDs release IDs from there and basically this allows you to interact with the valves protocol programmatically and the valves kit contains all the logic of everything so you could create accounts with this you could create releases or projects you could create releases you can also manage the pricing for your products as well as purchasing the products and you could also use it to write files to ipfs super easily we have really nice helper functions like called Write Json write file and write folder and all you do is just pass in the the file or the array of files and it gets it onto ipfs super easily and then you can use that to programmatically create a release so if you're doing Dynamic assets or things like that you could basically use that for Version Control any type of data that you want so some use cases are for that uh could be like if you're building a game you can upload certain assets programmatically and then load them in um and we have some awesome other use cases too where folks can create other accounts um and even uh universities and stuff like that underneath with with uh with certificates and stuff like like they were mentioning as well but uh but basically you could use that to get access to all the access control features the versioning features for whatever type of use cases you need that aren't necessarily supported by the front end or the CLI out of the box you could also use this to contribute new types of software as well um but yeah where do we find this and how do we get started with it everything you need is on ballast.io right now there's a banner at the very top as well that says hey if you're here at eth India click here and it'll send you the guides and shows all the Bounty information that we have as well you can find everything on the docs as well and then join our Discord we're always super happy to help we have folks from around the world so someone's going to be online if you need help and we're always really excited to to hear what you're building so please send us a DM of what you're building and we're happy to to help you anytime and then like I said as well everything about ballast is open source from the ground up from the smart contracts to the sdks the sub graphs front end everything is open source and you can find it on our GitHub at Val's Dash IO and you can see everything I'm saying here is is actually true so there's that and uh thank you so much I'm going to I really hope this internet is going to work out for us here um it let me just see real quick if it does it looks like it's not going to ah we'll give it a shot all right we'll give it a shot but uh I'm gonna go over the um if you go to the main website you could see this link here if you click that Banner it'll send you the guides that has information for everything that you need so it has the Bounty information for eth India um and it also shows you how to create an account how to create the project and then different ways to publish and so like I mentioned you can use the web dashboard for that we have examples for publishing next JS apps react apps Unity apps other types of binaries and then ways to monetize your apps as well using the software license nfts and then we're also doing social media challenge for uh this actually should be hoodies but um yeah for the hoodies that uh that we're giving away as well um yeah just share a pic with the some of those team members and we'll do that and then we're also doing a ledger giveaway as well so the the top three projects that also participate in these challenges are eligible for that so really exciting stuff there um and uh yeah it looks like this uh this uh Internet isn't gonna work out for us unfortunately here um that's definitely uh apologies for that but uh basically through the web front end um you could configure all the automatic deployments and uh sorry anyone heard that but uh this uh mic over here basically um we just released this new automation piece if you go to your project there's a little rocket icon in the top that's called deployments you click that you pick your GitHub repo um and then you just it'll it'll automatically generate the key for you all you have to do is give it the build and install commands we have out of the box build and install stuff for next.js as well um so if you're building that you should just be able to click continue and then the ability to also publish to different targets uh is coming as well so by default everything is being published over the valves protocol but we're also enabling automatic ways to then publish to these other app stores as well so you basically get the best of both worlds there so you get access to if someone is already using these app stores which we all are right they can download your app from there but if they're more like hardcore web3 then they could use the sapphire launcher and you as well can embed download links on your website and directly use that for the payment flows and everything like that to bypass a lot of these fees so and then if you're downloading the sapphire client form mobile as well it'll do everything super seamlessly so all you have to say is hey just download Sapphire and you can install all my apps from there and yeah again since that all has the built-in stuff the more people that use that the more resilient the software gets and so yeah unfortunately I guess I'm not going to be able to do the demo because it does require internet access and it looks like the Wi-Fi just keeps disconnecting and reconnecting so definitely apologies there but again the guides should have everything that you need but I will show you what at least it looks like to configure the CLI and I'll give you a preview of this Sapphire client as well so um for this basically this is our you could see that uh we we show different featured apps and different featured games uh and again send us your your apps and games we'd love to feature you um you can also see what's featured on testnet I will say uh it does require for the bounties for eth India it does require using the mainnet uh ballast site um but you can see top Publishers I'm sure you might see some familiar faces there you can see recently up the newest stuff from there and then you can also launch these things as well so so we'll roll from there but that is the desktop client um that is available for beta so join our Discord and send us a DM and I will send you a copy of that um and would love to to integrate your apps as well into that and make sure that your app uh gets the perfect uh seamless experience that it deserves um as well and then for the CLI we have an example projects repo on our GitHub as well so you could check that out and we have different examples for multi-platform projects next.js projects react projects using the SDK and node.js examples and pretty much anything you need but I'm going to zoom in here a little bit um hopefully everyone can see that boom um basically what this project is multi-platform Project demonstrates the full capabilities of the valves protocol here so essentially what this is is a combination of a go binary and a website so if your most organizations tend to build cross-platform like we'll have a mobile app and a website or a desktop app and a website or various combinations of so you can include them all in a single release with this so we just have an example for a Hello World Go binary that gets compiled to Mac builds both for Intel and M1 arm64 Linux we have amd64 in here we have a web uh front end here and then as well as Windows and then all you need to do to configure that is basically um you just set up your account you pointed at the account on vallust that you're trying to publish to you set up the project same thing and then you could give it a release here that can come from wherever you like as well but you just basically give it a version and it'll publish from there and then to configure the different platforms all you have to say is which platform it is and where it's at so for the web builds you just say web and then you we have it in the dist web folder um we have Darwin amd64 so Mac Intel builds Darwin arm64 Mac arm builds uh Linux windows and then we have a bunch of other supported stuff as well um and you could also add custom platforms as well so there's no limitations there and again with this SDK if there's a custom platform you have you can always implement it that way but then basically we combine all of this together into a single release and then when you view that on the project page you can actually see a Mac icon a web icon Linux icon depending on what it is the launch button will default to your preference it'll default to the web first and if you don't have that it'll default to the the current running platform um and then same thing for the related install and everything like that and then all you have to do to publish is type vallus publish and basically what it'll do is pull the same keys that are inside of your keychain um that also is shared by the sapphire launcher but it'll use that to sign a message it'll upload everything to ipfs automatically and it'll publish the release in the exact same way that the the website does as well so you can stick this in a CI CD system you can run this on your local machine I just ran this a little bit ago and that's the log that we got so I just published o215 with that and then we get our a couple different URLs here as well so you can access it in various ways and then we also provide automatic sub-demains for you so basically whenever you publish a release you automatically get your project dash dash account name dot on.vals.io so we give you an out of the box URL similar to things like versal as well from there but uh yeah I I really wish I could be uh demoing this right now because it's super cool uh and super seamless but uh yeah again if you go to the website and you view the guides there um and you come reach out to me anyone on the valves team we're super excited to help uh get you published and uh so here I just want to show a quick demo of deploying and setting up the automatic GitHub config uh with the repository as well as the different options that you have available to publish on ballast so right here I'm on just the dashboard here and you can see my list of projects um different types of projects go rust web apps and some Unity apps and here we have an awesome multi-platform build here which you can see you get your own automatic sub domain a Gateway URL for ipfs and then you can go ahead and download the web Mac Linux arm Windows as well as Android versions so it really depends on whichever platform you like to publish and we could do so by just setting up a version here um here let me pick just another version 1.1.1 and then from the web build you can choose your folder which is the output folder you can choose your binaries for the different platform types including your apks and then vows will automatically deliver it to the right platform but for this I'm going to show you taking a next JS repository and deploying it with our GitHub action automatically so I'm going to Fork this next.js repo here and create that and then cool good to go and then I'm going to go ahead and create a new project here I'm going to go ahead and call it next app and give it a display name next.js application and then all we have to do is pick the project type whether it's web native or CLI this is just a hint to the UI it still supports every platform regardless of what you pick here but this is more so what your default preferences are for the rest of the UI signaling here so if we click web we could go there you can also give it some tags as well and you can also add your custom tags if you like and you can go from there so you add the custom tag that way um and then we hit continue uh you could go ahead and give it a short description we could just say next.js application and then you can write markdown here in this description as well and you can say next.js app and then we could see the list of account admins that already have access to this project because there are admins on the account but you can also add project level admins that only have access to this specific project so you can have granular Access Control depending on your preferences I'm just going to hit continue here if you have a YouTube link which you likely will because you're going to be recording one for uh your demo and uh you could paste that here and it'll show up on your project page nice you can also set a header image and some Gallery images as well and then I'll show nicely on your project page so highly recommend you do that definitely add descriptions and um and some screenshots there and then when you hit create this project will uh it's basically going to do a gas station relay here and then it's going to pop up a meta transaction so we don't have to pay any gas to create this project nor do we have to pay any gas to do any releases and then once we create this transaction we could go ahead and see it as being mined this is on polygon mainnet so you could definitely test in prod on this and the protocol fees cover the gas fees there and uh cool cool yeah we're still going on the display here and so whenever this transaction is mined then we can actually go ahead and do the release on the automatic deployment but in the meantime I could show you what it looks like to publish with the CLI with the multi-platform build so this multi-platform build has a web build as well as a Mac for arm Mac for Intel and a Windows build all built in one so if you're building cross cross-platform applications which many of you likely are then you can go ahead and include them all there all you have to do is specify the account specify the project give it a release version and then all you have to do is specify the the architecture and the location of that deployment and then this will be read by the vallust CLI and you can just run ballast publish there um and then that will give you access to which accounts you have stored on your local keychain you just hit enter it does the meta transactions there as well so there's no worries there it uploads everything to ipfs and creates the transaction there and uh while we wait for that I'm gonna go check on the other transaction it looks like that fired off so we could go ahead and get started with connecting this next app to that repository and so I go to the new app that I created here and I could see a couple different configurations I could go back and change the project settings I can also set up pricing for this project and so if I wanted to sell this app or if this was a game I can go ahead and set pricing in any token that I like and basically what this will allow you to do is accept any type of token for payment for your application and then that will generate a license ID which is basically the ERC 1155 token ID that it generates for you you can use that to token get your application in all different types of ways and you could also set license limits and anything else that you'd like and then the actual image that it uses for the nft will match your Project's image so if you set that header image there that's what will show up as the valves project uh product license nft when the user purchases it but I'm going to set up the git deployments here so basically all you have to do is click this rocket icon and it'll walk us through the steps so all we have to do is choose a project and I'm going to choose the next test that I forked here and this is just a basic next.js application um and then all I have to do is from there and so what this does is since valence is a protocol um it can use any types of build servers including my own local machine like I did with the CLI here but we can use GitHub actions as our native CI CD as well but you could also plug the CLI into gitlab um Jenkins whatever CI CD system you're already using but yeah so what this does is it generates a fresh ethereum key with doesn't have any crypto on it and then it adds that to your vows project gives it access and then it puts that in a GitHub secret on your repo so then all you have to do is Click next from here you could configure different types of builds right now the automation is supported by web but we're adding the automation flow for Mac windows and Linux but you could still manually upload those right now or with the CLI and then all you have to do is click the framework that you're using we have some presets depending on what you're using and then just give it the build and install command but you can use the out of the box tooling from there and you just click next and here's where we're adding some more really cool stuff so by default everything is getting published to the valves protocol everything is stored on ipfs filecoin and then indexed with the polygon registry smart contract but we're adding ability to automatically ship your application to every other App Store as well including our native Sapphire launcher which you get automatically out of the box when you publish to the valves protocol so by default you get access to this this launcher here but then we're going to be adding support to get your app in both the web 3 and web 2 app stores super easily so you get the best of both worlds um as well as future integration where it'll post on Twitter and on Discord when you roll a new release but uh all we're going to do is Click next and basically what this does is it generates a GitHub action workflow file for you um and sorry that's not visible here but uh basically it automatically sets up the workflow using our vallus GitHub action and there it goes the screen back okay cool so all we have to do here is it takes in your build and install commands from that previous form and then it there we go we're flashing here okay but anyway uh all we have to do is take the build and install command from there and then it adds the ballast published workflow to the end there and then when we click deploy basically what it'll do is it will generate a new ethereum key for you um sorry this is a kind of dripping up a little bit here with the screen uh but uh one second one second anyway okay so let me go through this again okay cool we're back clear okay so we're gonna generate a new key here and then we're gonna go ahead and hit next there's the valves protocol piece and then we're ready to deploy we hit deploy and this is going to add that signer key to your vallast project and then it's going to add that private key to your GitHub secret so that now your GitHub action will be able to do the publishing and then it's going to open up a pull request on that repository for you with the new workflow file and then all we have to do is merge that and then the get of action will continue to publish from there so when this transaction uh mines will see that um and then it will continue here um but uh really all we have to do is just wait for this to roll it's going to create that pull request and then it's going to re-link that repository back into our ballast account here so um it's going to pull up one more transaction to modify the project and do the final linking and then it has also opened up this pull request if I go back here um I can I could view this ahead of time before here but this will also show us the new pull request after this transaction is mined but since it already made it I could just go directly there and what it'll show you is this new workflow file so if I actually click on this um it generated this for us ing the standard get of action workflow steps so you could see it put in our install command it put in our build and Export commands here it generates a time stamp and then it does a release with the ballast publish gitup action here and then it maps to your ballast account and your project and then uses the timestamp as the release but you can also modify this workflow from here however you like but this is an easy way to get it started and then it also publishes the web platforms out folder so all we have to do to get this working is give it a merge and then from there it will automatically start publishing the next JS app and so I could delete this Old Branch here and then I could go ahead and check out the GitHub action and so this is running um here this should just take a little bit um but uh yeah it's basically going to do the same process that the CLI does the same process that the web front end does only completely automated so we could see each of the steps here and then that will get us wrong so again that's pretty super simple and then again the automations for other types of software are coming soon but you could still use them with the web app and the CLI from there so and then we should see this uh this build here it'll give it a time stamp and it'll run the the GitHub action here as well so all we have to do here is just wait for it to happen it should take another maybe 15 20 seconds or so uh maybe less but uh yeah we could see we do the export here it's doing the meta transactions it's uploading files it's publishing the release and then we should rock and roll from there and again since this is all powered by meta transactions um everything is gas free so this new uh account that we created and added to this repo doesn't have any crypto on it it doesn't there's no risk if it gets stolen except for publishing the new release and if that happens then all you have to do is remove that key from the ballast repo and it will no longer have access to be able to publish so super easy to manage the security around that and you don't have to worry about any other Access Control issues and so boom there we go we just uh refresh that and so if I if I go back to the next projects or the internet is uh hot reload it's a little bit interesting here but if I go back here here to the next app you could see we've got some versions mined here and then that's our that's our version from there and then you could go ahead and access this from the Gateway URL from there but uh yeah that's about it well anyone who has a question uh please feel free to grab a mic and uh yeah we have a couple minutes here uh to go over questions uh yeah exciting stuff so yeah we'll get a we'll get some mics going I don't know if the system there but uh cool cool all right got one coming here cool cool by the way I like this uh this setup as a way to avoid like cross noise and stuff I think that's that's pretty cool definitely very clever uh there yeah so I wondered well is that if I'm hosting my application on that list so uh do I have the option like does it always run on the sapphire launcher uh like if I'm is it if it is running on the sapphire launcher then like you know what are the benefits that I'm getting if it is running on the sapphire launch for sure so you can always run it on the website uh you can access it in all those different ways but the benefits you get out of the sapphire launcher is that it gets cached automatically to the local nodes um as well and then it has a built-in wallet so um instead of having to constantly sign stuff um and uh constantly like pop out of your application to do things it passes it through every app that is is included here so uh basically if I were to launch this um you could see that this is just a regular dap here um really awesome dap uh and then it passes through uh if I were to switch the network to um here let me uh yeah I'll I'll do that but uh basically yeah you could pass through the wallet uh and it'll automatically go from there um and then same thing from here so if I were to launch this um I gotta cache this but uh yeah basically as you're playing the games uh it'll pass through automatically so you won't have to worry about um help having them configure anything this is has everything built in so basically it goes live like it just goes along as a if I'm playing a game it just goes along with it so there's no interruption and nothing else exactly and if you're building a Dap then this is a way to install your dap locally so that you can access it uh without having to rely on another endpoint in the future yeah so it's basically like you know there's uh there's no uh listing uh Hardware or this thing any resistance that I'm facing if I'm just running on this effort launcher got it yep yep and then there's an additional benefit here so that uh yeah all the things that are purchased through this bypass all the App Store fees and everything like that yeah yeah think awesome yeah thanks for your question sweet I think we have time for a couple more cool sounds good sounds good all right well uh anyway yeah I guess um if we don't have any more questions but uh yeah definitely uh again sorry for the technical difficulties you know demo stuff but we roll with it we're in web three we're Scrappy we got this no problem um but uh yeah please find us uh whenever you're you're publishing and uh yeah we're looking forward to seeing your apps and yeah send it to us in the Discord and we'd love to highlight it we'd love to Spotlight you on our Twitter spaces or do a play session um in our Discord as well um we've been doing that as well with our community members for that so really exciting stuff there and uh yeah looking forward to seeing what people build good luck everyone 
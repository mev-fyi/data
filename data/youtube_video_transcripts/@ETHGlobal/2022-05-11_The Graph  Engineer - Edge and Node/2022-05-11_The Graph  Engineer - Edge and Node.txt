okay and we are live thank you everyone for joining us for now we'll be doing a talk about the graph here um if you have any questions please leave them in the chat window below and zoom you can also send them in the discord as well those will be answered after without further ado you can go ahead all right hello everybody today we'll be discussing about how to deploy a sub graph on uh how to deploy a subgraph from the hosted service as in how to index a smart contract and then deploy a subgraph uh we'll be also discussing as to why sub crafts are required uh what's the processes of you know how does it look like and uh why do you need to use a sub graph to index your particulars a decentralized application a particular blockchain uh so i hope you can follow along and at the end what we'll be doing is we'll be using the open zaplin subgraph library to deploy a erc20 smart contract on the hosted service of the graphs uh i hope you're excited uh what i'll try to do is in this particular demo as well as whatever i'm explaining i would want you guys to also follow along with what i'm trying to say and uh by the end of this particular particular 30-40 minutes time that i have i would want you guys also also to deploy a sub graph with me it is that easy and like that quick so let's just get started um okay so all right so indexing blockchains using the graph so like you know basically eva also say who is the uh who's the director of the graph foundation says that if you're uh if you build a dab for a community but you start with a centralized component for the vcs it's no longer a decentralized application so basically what is a decentralized application a decent class application is a tap only if it does not have single point of failures initially if you are like you know not scaling that up and the dap has just let's say 10 has about 100 or thousand a thousand people using it by that time it works fine but when there is a scale that happens you know you normally create softwares for scale you created for millions of people to use it which eventually will be a thing for web3 if millions of people will be using it and if you use centralized components it will start breaking up and you see that many times coming along when you are trying to when there is like you know uh some some kind of a major event that happens that there is break uh breakage in some kind of decent life there's some kind of applications that you centralize stuff in between them and that's why from the beginning of your like you know decent live application journey you should always aim to have applications which don't have central point of failure aka you can also say that you should have a web3 stack while you are deploying your decentralized application you should have our three stack which has decentralized values as well as decentralized infrastructure building so that you can scale it through in the future right what the graph does the graph is a way to actually uh the graph is in a way to uh the graph actually like you know indexes your particular smart contracts and there are certain ways that we'll be discussing it does that but uh why do we need to like you know index the blockchain to get whatever you need in your particular decent application so first of all you have a decentralized application and it has a user interface that interacts with the smart contract right and whenever you interact with the smart contract you are always publishing some kind of information that you want to show to your particular front end how do you show that to the front end one way is to have a centralized server that is whenever you you know you are interacting with the smart contract the server will always have a check as to okay at this particular event was fired on the blockchain and i have to index that first of all this is very very costly second of all this is not scalable vertically as well as horizontally and third of all it's not decentralized then again you know you become an application running on the ethereum networks instead of decentralized application and for that same reason you should not use this kind of an infrastructure the second way which is definitely a little more decent size but it is not great in the user interface way that people might want to use is they start calling the blockchain itself for whatever information that they need and like for example if you are interacting with uni swap how just imagine how many people are interacting with uni swap every day if they use this kind of a mechanism then it's not possible to get the info dot unis webpage that you see every day uh at real time it will take a very long time as well as uh like you know it is super patchy and the code of this particular thing looks like this super shabby and that is the reason why you have to start using uh like you know uh the graph for the same so what happens is that you again have a user interface and a decentralized application which has smart contracts that have events on it right and the how the graph protocol is like you know created is that it is listening to the events in the smart contract listening to all those events listening to call handlers as well in the smart contract and like you know we do all the indexing for you for your particular smart contract so that whenever your decent size application requires it in their particular user interface you it can be easily variable via the graphql api you'll be seeing how it works and stuff like that but this is in general the architecture of how it happens i'm not going to discuss this this in detail because it is out of scope for this particular like you know small talk but in general what happens is that a decentralized application does a transaction on the smart contract which has an event right and the graph node is actually listening to that particular event and stores that particular information so whenever like you know uh stores that particular information via the mapping file so whenever you need that particular information you can query that like you know store desa store data via the graphql api that was created so like you know going from this you come to something so nice looking via graphql api is like this right you never want to deal with this kind of infrastructure and keep on rupturing the rpc or the full node that you're using instead use the graph create a sub graph use the graphs mechanism and directly like you know you have this kind of query available for you at front time to be queried so in general i hope you all understood the graph is indexing and querying protocol for blockchains in general if like you know explaining it to a five-year-old uh the graph does for web3 what google does for web 2 whatever you want to search on the google search bar like if i want to search here uh like you know eat global right here i'll i'll get it over here because all the information that google requires or like you know wants to see is scraped from the web it is indexed and when you search it it is just querying that particular stored information to show in the front end right to your particular thing it is not doing at run time what happens is that the information is stored and it's just like you know when you search it it's just queried uh in the back end and shown it to you on the front end similarly the graph uh has but the google does it in a centralized way of course because it's a web to application but what the graph does in a similar way like what google does is uh all the information of the blockchain is actually indexed and stored in a database and whenever you require to like you know get that information it can be queried via graphql api of course in a decentralized way because the graph does it for web3 and it's called the webkey stack so it does to go through the decentralized format of the same currently there is a graph hosted service and there is a graph network i don't want you guys to be confused with that so the graphs hosted service is uh you can call it a sas product in which there is one indexer that's currently running and it was introduced in 2019 uh so to say a product market fit in eventual like you know decentralization so you deploy you can say the hosted service is when you uh have a subgraph deployed on the hosted subgraph and you know it is being queried and there is this whole thing via a sas model while the graph network is the decentralized version of the graphs hosted servers itself it was launched in june 2021 that is last year and it's working great as well but only operates for ethereum subgraphs right and you can say instead of one indexer that is on the hosted service there are about 160 indexers and here it's like a free service uh while the graph network is definitely decentralized and so you pay per query for the same and eventually uh the graphs like the whole ecosystem that we have has its motive to eventually move towards the graph network itself and you know eventually make decentralized indexing and querying a reality using decentralized infrastructure which includes indexers 160 plus curators uh that are also the uh that are also in a very big number and delegators also in the network uh and like you know we can discuss about their functionalities separately but i would suggest you to go through the graph docs to understand how the graph network works i would really encourage you to do that because uh it's one of the like you know really cool architectural design that's first time created by us in order to make decentralized indexing and querying a reality so yeah suggest you to check that out but for now what we'll be doing is that we will be uh first of all understanding what is a subgraph and then creating a sub graph using the open zaplin library you can like you know opens up in library is for limited type type of sub graphs i wanted to introduce you to that but if you want to create your own subgraph for your particular decentralized application there are other videos that you can check it out so uh what is a sub graph right so you can say that you know a particular block has lots and lots of information i mean there you can see this blue information this uh orange information is of hawaii that red information in that particular block is of let's say uni swap the green information is of open sea and the blue information is of something else right all these are interactions that people do with ethereum blockchain and all of them are coupled and there are multiple blocks that exist how do you make sure that your particular like you know the the graph listens to your particular information stores that in your particular way and gives you the right api so that you can query just this blue adjust this orange information or just this red information or if you have created your own decentralized application just that particular information that is why the subgraph the sub graph is you can say uh the the the sub graph is in a way a way to uh in a way to tell the graph node that hey dude i need this particular information from the blockchain every time an event is fired via a smart contract of this particular address please listen to it and store that in the database so that i can query it in the further use and for the applications i hope it's clear a subgraph you can say uh the graph is a marketplace and a sub graph is your particular like you know way to index uh and store your particular application related to your particular uh dab right i'll also give you a simple example info.com page right every everybody must have seen this so we'll just go to the info dot unit web page this information that you see that comes around in this particular format is also like you know queried via the graph we'll just quickly uh search through it right whatever information you see here see is coming from the graph right this particular information comes from the graph itself so whatever you are seeing in the front end the data is served by the sub graph created by the uni swap team to uh to this info page right and why is it necessary i already told you because without the graph it would be really tough to index and you know get things out in the front i hope this is clear to you guys i'll also show the subgraphs right that the unified team has created also there are other like projects which have created their own subgraphs you can create your own subgraph for your particular application but if you just need to create a dashboard or something like that you can always resort to creating uh you can always resort to like you know uh going to this particular uh guinness web with subgraph right this one you can always resort to like you know just directly going to this particular api and querying whatever you need right whatever information you need from the whole uni swap application which has different different smart contracts either you can create your own subgraph or you can also use the uni swap sub graph that's created by the uni swap team to for your particular dashboard all right i hope this particular thing is informative to you and as i told you what happens is uni swap has smart contracts which have events right they have created a subgraph to be deployed so that they can see all this information right all this information uh in in a very uh and get all this information right so all what they do in the back end is that they have this api right and they just query why the graphql api they just query and they get the results right which they use in the ui to get whatever information if you are creating a if you are creating a dap of your own then you will have to create your own subgraph for the same right and that's what we'll be seeing today we'll be using the open zaplin library to create a erc20 subgraphs i hope you are all set up with your particular you know uh computers i'll just get started with the with the like uh with the setup of our thing okay uh so prerequisites for the same is that i'll just uh you you need to have graph cli and graph ps uh in your local environment installed globally so i'll be doing it for you so first you have to go to this particular link i'll be pasting that in the chat go to the graph we'll be deploying the sub by the way on the hosted service and not on the network all right so this is the hosted service uh i'm on the dashboard let's create a new subgraph and let's name it tak money all right this is a demo erc20 erc20 subgraph okay that's all if you want to hide you can also hide it but right now i'm not all right so as i told you you need to first of all uh install the graph cli and graph ts uh locally uh globally i mean graph cli uh i hope uh you can do that i'll again paste that link in this and i hope you're following along with me i want you guys to really really go ahead and create your own first sub graph today i'm telling you it's not that tough it's rather very easy and that's why you should do it with me right so the second step is graph in it uh i'll be using the example code so for that i'll go for uh let's see i'll be doing graphs in it from dash dash dash example posted right this is uh this the the reason why we have this products uh thing is because you have a studio and the hosting service studio is used for the graph network and the social services for what we are doing all right this looks good for ethereum let's uh first of all you have to give your uh github username minus pronoun all right so it will create a sub graph for me uh this will just be a like you know a really uh copy clone sub graphs this is a gravitas of graph and in that itself i'll explain you what consists inside that particular sub graph and how you can create your own subgraph as well um it's it's not that tough honestly it's just like you know telling the graph note that hey this is my contract this is all the events that i want to know and uh can you please uh please like you know gently index that for me it's that easy all right and again all shout outs to the graph team for making the stack so uh so easy for the developers right so first of all you see there is a graph yaml file you can see this is the introduction to your sub graph to the graph node right telling the graph node that hey dude this is my sub this is my smart contract this is where i want to deploy it it is mainnet you can also do matic for polygon you can also do phantom whatever but you know this one is uh minute then the address right uh the second thing is the contract address uh this is the contract address you can also check it out in the ethereum ether scan this is the contract address this is how it looks like right this is what i'm actually indexing and these are basically the events that i want to index all right uh i hope this makes sense and this is the graph jamal file which tells the graph note that this is the information this is the smart contract this is where i want to do it and these are the events that i want to do it right then you tell what i want to query what at the end i want to see in my particular api right so you define the schema right when you deploy when you have a rest rest api being deployed you also like you know specify the schema similarly here you specify the schema nothing different and the last part which is a little different and you have to spend most of your time is the uh is is basically this mapping.ts5 right this is where you convert the raw data that you get from the events to the schema file this particular schema right this is where you convert that mapping dot ps uh so you get the raw data the un data this is the event right new gravatar is the event you see that event and convert the raw data into a schema of schema format that you want right so this is how you do it today uh we will be deploying erc20 smart contract by the open japan team and for that i will stop sharing my screen and for that what i'll do is first of all install the library terminal npm install at the rate open oh what was the name of forgot let me just yeah open that zaplin subgraph right this is a library that's created by the open japan team you can search more about it here in the docs see this is the docs where you can search that these are the subgraphs that they have created they are pretty standard like they have pretty standard erc20 smart contract they also have pretty standard erc 20 smart contract sub graphs right you can understand the importance of creating a subgraph for your particular queries uh so by the time it is being deployed the next thing that we have to do is uh we'll have to change the yaml file so this particular yaml file will actually you know go ahead and what it will do is it will go ahead and index erc20 smart contract right which has different credentials and everything since i have yes i have less time i'll just go ahead and copy my previous ones that i created so this is how it looks like right there's a start block the erc20 smart contract that you know uh i'm actually indexing the address of that smart contract and you can understand like you know in the erc20 contract there is a approve event there's a transfer event right and for this i don't even need to create a mapping file or a schema file why because openzapplin already creates that for me if it's still like you know downloading so what i'll do is still downloading so yeah we'll have to wait for a minute till then wait till then if there is any questions uh who pays for the graph computation it's paper paper query then uh so it's pay per query you pay uh when you query the apis on the graph network on the hosted service it is currently you know paid by the graph community so that again these uh progressive decentralization we want to make sure people are comfortable with the hosted service and then they move to the network right so yeah now that this is the the the open zapping library is here so you can go ahead and see right previously we had to create the schema file as well as the mapping.ts file right but now we just have to with the with the opens up in library for erc20 smart contract uh we don't need to create the mappings and schema file that is already created by the open zaplink team just like what they do for smart contracts they have also created sub graphs for the erc20 contract right so what i'm doing is you can go to open zaplin no not this one this one open chaplin sub graphs right and uh generated see you will already find this key the mapping file here you will also be able to find the schema file over here right this this has both the things so i don't need to do it right they have already created the template so i'll directly use the template for indexing my erc20 contract by giving the address i don't need to read the schema file i don't need the mapping file all that is already there there are others that has yeah that you know opens up this has already also created that you can look into by going to this particular website all right they have also created for owner's contract erc721 so if you are creating let's say a erc7 product or project you don't need to create your own subgraph you can use them okay so now what i'll do is deploy it on the hosted service let's go back and see the instructions first of all copy this one and go here and access token yeah it's this one all right let's first of all auth again i'll change this so you know in the future i'll go ahead and change this so you you guys cannot use it on my behalf and lastly i'll deploy to the hosting service here we go i'll just copy the information from here so i copy this sub graph name and yeah we are all set so the sub graph will be deployed to the hosted service and i'll be able to query the subgraph however i want it to be just waiting for the sub graph to be deployed yeah it's deployed and you can see that it is deployed now if i want to query the subgraph i can do it like you know accounts id whatever i want to i can just query it and if i want to like you know use it in my react front end i can just go here right go to let's say we can i can also show you right go here and let's let's try to query something meta number let's let's do this one all right let's query the block number using the api and see i can't do it right so you can use this api directly in your react front end or whatever front end and create great dashboards create great like you know whatever you need to index to the front end using the graph i hope you understood the demo as well as uh had an insight as to how to create a sub graph and how easy it is and the opens apple sub graph library as well if you have further questions feel free to tag me on twitter and you know ask whatever questions you have this is my twitter id and i'm quite active there great thank you perfect yeah we do have a question please go ahead so is the hosted version also compatible with the api version 0.07 yeah it is by the way the graph network is compatible with all the api versions above 0.4 that's like 0.5 and above the hosted service is compatible with uh 0.4 above like 0.5 okay because there was like i i don't know but the 0.27 i think maybe it's still an alpha using 0.27 maybe i hit you up on twitter or discord so it's like i think your ap api version on the sub graph right sub graph dot yml file i'm pretty sure it should be 0.07 yeah so i'll i'll hit you up on twitter or yeah if there's any further questions we could take them over to discord we do have a whole channel for that um with that being said we do have one more talk with people developing smart contracts in this way coming soon friends i think we are losing you okay yeah i don't see any more questions in the chat either so yeah we'll love discord for that thank you very very much for the the workshop and thank you all for tuning in we do have another talk with fuel developing smart contracts in sway so feel free to tune into that 
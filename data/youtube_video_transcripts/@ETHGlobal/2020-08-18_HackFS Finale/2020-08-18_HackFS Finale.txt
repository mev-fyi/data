[Music] good morning good morning good afternoon and uh good evening everybody and welcome to the hakka fest finale uh my name is kartik i'm one of the co-founders of youth global and i want to thank all of you for being here so we're wrapping up hack fest today and just before i walk into how the next two hours are going to go i want to make sure that i kind of cover some of the important details for for how we're set up today and this whole event so first of all uh heath global for those of you who don't know each global is an organization with with a very simple mission to onboard thousands of developers into the web3 ecosystem and six weeks ago we kicked off hackfest to bring together hundreds of developers who are interested and curious about decentralized storage and smart contracts and with the help of protocol labs we announced this event in july and our goal was to bring in hundreds of developers into this ecosystem and give them the resources they need to build something of their own choice and want to invite some of the best companies pioneering the technologies in this space and offer them support with any types of problems that our hackers face to see if we can get something incredible out of this experience and at the end of it we got exactly that we had 470 hackers from 50 different countries who worked across 19 different time zones to build a project they were really passionate about we had an amazing set of mentors who were there for these developers and participants to offer their feedback comments and help them unblock with any issues they were facing as they completed their projects and we also had a wonderful roster roster of sponsors who were there the entire time helping our teams by offering them support tools and sdks to make their lives easy and not only that they were also there to help inspire all of our teams by doing talks panels amas and office hours to explain the details and the nuances of how everything works in this ecosystem and at the end of it we got 134 projects that came out of hackafest and this absolutely blew us away so we spent all of last week looking over every hack and by the way uh you can also just head over to hack.deepglobal.com and check out every single project that came from this event and i can tell you that the creativity the technical engineering the amount of problem solving and the diversity of ideas and the challenges everybody faces across the world just blew us away so today in this vanilla we're going to be showcasing some of our favorite projects who we think were really creative and really cool and we want to make sure that everybody else also gets a chance to see these projects so we have our 10 finalists who will be joining us today and going over uh their demos but before we go into these 10 teams and who they are i want to make sure that i really take the time to say and emphasize just because somebody was not part of the top 10 list it does not mean they were not good enough the 124 projects listed here continue to put in the same amount of work effort and focus on learning as they built their projects over the past month and even after judging finished last week a lot of them came to us and told us they'll continue building what they started off over the last few weeks and take this to the next step and really accomplish the goals of what they wanted to be to build at the end even after this event um finishes so i want to really thank you for kind of saying that to us for everybody who reached out and this is exactly the type of energy positivity and the motivation to continue learning and being better that inspires us to continue doing more events like these at youth global and we're super thankful for everybody who was there and who kind of helped make this super successful and also submitted uh their hack so with that i want to go to our 10 finalists and i want to congratulate ipfs recovery block sig pygate web3 api public annotations network sail plane planet flare vallest pulp and decentralized docker hub these are our 10 teams uh that'll be coming on presenting what they did to everybody else at this event and as we look through these 10 teams we notice that they all fall nicely into the developer stack of applications infrastructure and developer tools we have a nice mix of teams that encompass each of these categories and what we'll be doing today is walking through this whole stack from top to bottom and seeing the best of the applications the best of infrastructure and best of developer tools that came out of hack fs and with us we have an awesome set of guests who will be here chatting with these teams after they present and asking questions and giving them feedback on how to actually take this thing to the next level and make this a really successful product and i want to welcome molly mckinley who is the ipfs leader protocol labs i want to welcome pooja shah who is the falcon product lead at protocol labs and welcome juan bonnet who is the founder of protocol labs and lastly ken eng who is the lead for the ecosystem support program at the ethereum foundation they'll be here with us today talking to all of our teams and giving them feedback and with that we're going to be moving on to our first block and seeing the four applications from the finale and we'll have sail plane public annotation network pulp and block set come in one and after one after another back to back and then we'll be joined with all four of these teams again uh where we will where we'll be doing a big q a with all of our teams and our guests will be asking them questions and their feedback so let's kick off hakka fest finale by bringing on sailplane for their demo and uh i'm super excited to see what everybody's done [Music] hi i'm anders and my partner is steve deck and we've been working on sailplane which is a collaborative file manager in the web we're not seeing the screen we're not seeing the screen here we go hi i'm anders and my partner steve jack and we've been working on sailplane which is a collaborative file manager in the browser it's live right now at sailplane.io sale plane is like dropbox but peer-to-peer and every file uploaded is encrypted end-to-end by default what's great about sailplane is users can navigate to the website and immediately start using the app there's no need to make an account or install a browser extension the two primary technologies sailplane uses are ipfs and orbitdb ipfs is used for replicating and transferring data or referencing and transferring data and orbitdb is used for representing a mutable file system and handling concurrent writes both of these run entirely inside of the browser tab when a user uploads a file or photo to the website it's added to the ipfs local store the output from this is added to a custom orbitdb store representing a mutable file system this mutable file system exposes methods for moving around the files and folders and also computing a cid that can be handed to ipfs to download the data later we're going to move into a demo when a user first navigates the website they'll see this intro modal with some information and when they start when they're ready to start using the website they can click on open drive this first thing they see is the filo explorer for the default drive the default drive is private which means that every file that's uploaded is encrypted with a random aes key before being added to ipfs we're going to add a handful of files we can preview multiple different types of file extensions these are image previews we can also upload albums or folders and we can move files in the file explorer into the into the folder we can see that they've been moved into the folder and we can download the uh mutated folder next we want to show collaborative file managing so we're going to simulate another user by opening another browser if we navigate to drives we can see the default drive if we want another person to be able to write and read to this drive we need their user id so we'll go to the drives panel and copy their user id we're going to manage users this user id is also a public key once we've added them to the to the drive editors they'll have read and write access to the drive but we still have to import it so we'll copy the drive address and paste it now that we've joined the drive will begin to sync and we can see that we uh we can move files around and see the changes propagate we can also delete files and we can upload new files we can also preview them from the other side we can download them and we can share these encrypted files directly by encoding the ipfs cid and the aes key for that file into the url fragment what this share link will do is open up a local ipfs node that will grab the data from ipfs and decrypt it with the encoded aes key that's our presentation thanks for watching here's a link to the source code and uh the website if you'd like to try it out thank you awesome well thank you so much for that and we'll move on to our our next demo and uh just to a note for the sailplane team we'll just have you stay here with your videos off and we'll invite everybody else at the end for a q a so next up we have pan network which is public annotation network and i'll have them just kick off with their demo hello everyone welcome to the public annotation network presentation um just a quick overview of our team there are three software developers amongst us and one business developer three of us are based in germany and i'm based in lisbon so about our project we are an open source centership resistance web annotation tool for any web page and our mvp for this hackathon is focused on twitter so we built this because our society is becoming increasingly independent on centrally controlled platforms uh which have a huge amount of power to censor how information is passed around among amongst people um they can delete it they can mutate it or they can just selectively hide it parallel to this web annotations are a very nice way to promote these cores on the web you can add information to any web page and they play very nicely with web3 technologies i'm now going to show you a quick demo of our browser extension working on twitter creating comments using our decentralized infrastructure and then showing on another browser how those comments are propagated in this plate here we go so this is actually a new feature from twitter which plays really nicely with what we built uh now people create a tweet can prevent anyone from replying to it right so our colleague here dominic said that uh we need to prove him wrong that no one can comment on this so i already have my browser here well with the pen extension noticed by this yellow pen uh so if you can come here we can see that the one has commented so far so i can come here and just say your boy you're wrong so go here we sign it with metamask because we are sending the message this is now being sent to our layer 2 which is processing batches of annotations and when you go back we can see that it's already being displayed here now we can go and just do another one saying that it's still wrong we comment that as well we sign it give it a few seconds when you go back it's still here now you may see that the icon the status has changed that's because we are only processing every two comments so every two comments that come we take this put in ipfs and ethereum we can increase the size of this patch obviously so if you come to another browser you can just reload the window here we are in the same tweets no one has replied so far but if we open pen we can see that the comments show up here so that's what we have for our demo so this was just a video backup the way this works is the browser extension is talking to our layer 2 which is a network of publishers which take these annotations arrange them in batches and when a certain threshold is hit it sends the annotation to ipfs and then stores a fingerprint on ethereum then we have a subgraph running on the graph which is then indexing all of those transactions and taking that information sending it back to the clients to be displayed to everyone the web annotations are aw3c standard and they are wrapped into verifiable credentials which are then signed which are also standard and these standard data models are very nice because this can then be displayed on any application um so as far as as our infrastructure choices go we are using ipfs and ethereum to reduce the censorship attack vector uh we use the publishing service to lower to lower the cost for annotation the cost of running the server and for better ux because it's much faster to show the annotation right after it's created to everyone else we use a smart contract to keep track of all the annotations that were created this is very important to make sure it's censorship resistant the only way to ensure this is that you know that you have the exact number that should exist uh and we are using w3c standards to make sure that this can work on any presentation layer so next uh we want to do a mainnet deployments right now we are on robston uh although on mainnet the gas prices are not friendly to try new new stuff out um we also want to implement native interaction from the web extension with ipfs in ethereum we could have done this but out of lack of time we decided to focus on the layer two to create the best user experience possible but it's not a big stretch to implement directly to js ipfs and then using web3.js to use ethereum um we'd like to build a community network of publishers uh we just need to get incentives right because someone needs to pay for the transactions um refine the ux not naturally to target non-technical users and build more clients the web extension is just one way to take this data and show it to everyone uh the sky's the limit in this case so the qa will be at the end uh so that's all from us thank you awesome well thank you so much um this is a really cool demo and uh we'll uh we'll kick off with our third demo for today and that is pulp network so as soon as they are ready to join and share we'll have them kick off with their video or demo hi everyone my name is dan i am one of the members of the pulp network team there are three of us on the team i'm joined by roland and mason we're from boston massachusetts and calgary canada our accomplishments over the last few weeks are twofold we formulated a protocol for the publication and subscription of blog content and we implemented a proof of reference client uh for that protocol pulp network is a web3 blogging platform the artifacts and actors in our system would probably be familiar to you if you've ever used something like medium.com or substack but pulp network is an abstraction on top of a bunch of existing distributed technologies the pulp protocol outlines six procedures each which dictates an interaction between the pulp client the ethereum network and the ipfs and filecoin networks for hackfest we built a reference client that implements the first four it's an angular app and it's deployed by fleeq so the app itself is served in a decentralized manner we're using textile buckets on textile hub to interact with the ipfs network and we're using metamask to broadcast and sign transactions for the ethereum network in the demo i'm going to show how a author can create new blog and update their upload their first blog post i'm going to start by going to robston.pulp.network note we have a main we we have a mainnet contract running in pulp.network but for demo purposes this is faster and cheaper so we're going to start by signing in this is going to prompt metamask to sign a message and using the signature we generate a lib p2p identity and effectively that allows this ethereum address to update ips records and and thus write to ipfs directories and note that we display the ens alias instead of the ethereum address if it's relevant so we're going to start by publishing a or start a new publication i'm going to grab a little bit of test content here we're going to call this the pulp team dev blog i'm going to add a tagline but more importantly we are going to reserve a url so this is going to prompt metamask to sign a transaction which accomplishes two things it's going to reserve this url and it's going to map it to our ipns address that this user controls so we can wait and watch for the transaction in any transaction uh blockchain explorer but um i'm going to fast forward here a little bit so we don't have to wait to an empty blog post that i created a little while ago this is a new blog there are no articles in it yet and we are going to add our first one so again i'm going to grab a little bit of test content add a subtitle and i'm going to grab our readme from our repository to serve as the blog content so we can preview that and our client renders content in markdown but more importantly we can publish it and so publishing it accomplishes two things uh we are persisting this file this this blog post as a ipfs file to the ipfs network and we are taking the ipfs hash and stamping it on the ethereum blockchain in a transaction so that serves both as a proof of existence and as a endorsement by the author so again i'm not going to wait for this transaction to go through and i'm going to fast forward a little bit into a new tab this is a article that i wrote a little bit earlier so this has already been persisted to the network and i'm going to i'm going to zoom out a little bit here to look at the blog itself i've populated this blog with a few sample articles um we've added a little toggle here that shows what's going on under the hood for the demo our blog is just an ips record and all of the articles in the blog are ipfs files so each of these files lives at the ipfs directory that this ipns record points to the result is that we can explore this information in any ips resolver we can look at the ipfs contents in any ipfs explorer we can look at the author and the proof of existence contracts in any blockchain explorer and um i just want to highlight kind of the the uh groundbreaking nature of what ethereum and ipfs are are allowing us to do here um this this is a simple web app in the browser there is no server um our identity mechanism is just metamask the persistence mechanism is just ipfs and all of our business logic is happening on on the ethereum blockchain and the result of that is all of this content is is available in the public domain and that's really important for the both the author and and the readers um they're not they don't need pulp.network specifically they don't need our specific client to kind of intermediate their relationship and and we've talked to a number of of blog authors and and they find this this feature to be quite valuable to them they want to kind of own the the relationship with their their users um and this allows them to do that uniquely so uh we're kind of excited about this we we appreciate you watching and we look forward to answering any questions that you have at the end thank you awesome thank you so much dan and uh with that we'll have our last application demo and that is going to be team block sig i'll have them kick this off and we'll then move into our q a [Music] hey everyone i'm serup and this is my co-founder onomit and we've hacked together block sick blocks blockstick is a notarized document signing solution that's backed by proofs on ethereum and encrypted files on ipfs so to give you a quick overview so as a notary you set out this document which is signed on the smart contract and every party that is supposed to do a web signature is an email oracle sends out an email where they make the signing just like any web 2.0 app and once all of the signatures are propagated through a transaction lifecycle the notification finalizes the document and the final hash is stored on ethereum for proofs so under the hood we have a node.js back in for the email oracle we have a very simple html5 frontend that's open source and is hosted on fleek we use a block original api gateway that uses ethereum mainnet using matic l2 so to reduce gas costs and foster transactions and we also use space daemon that allows us to use textile buckets for encryption so we don't have to publicly put the files on ipfs so let's jump to the demo so i've hosted the file uh the front end here on fleeq so let's load this up the experience is very similar to that of docker sign you simply upload a file a pdf fill out who the notary is so put in the information of each of the signers we can add as many as we want i'm just going to do a very simple one here for a tendency agreement between three people so that's me on amit and enorshi that are going to sign this so let's hit continue we can review it uh since we wanted to monetize a service we've added a very simple stripe integration that allows you to pay using credit card in this case i'm going to do an actual transaction with apple pay and that's processing live demo payments let me just give it 1.5 uh so sorry about this let's see if our free plan actually works okay so at this point uh we've actually stored the pdf on uh ipfs and encrypted it using space stephen and each of the parties have um received a request to um sign it so before that we as you noted there was no sign up or login right so we actually just sent out the first email to the note 3 to sign up and they can confirm the document at this point it's simply oh so sorry i think the problem is because i use the free plan i haven't tested that in yesterday's demo oh it's okay we can we can try the payment thing again if it takes a few years yeah on an issue i swear i ran this five times today and it worked yeah don't worry it's just demo it's all good we all know how and my touch id just says processing for some reason all right actually you know what i can just do this demo using i like how the front end cache has actually not come in on this browser that's okay actually the functionality should work so this one uses google play let the world know my cvc number okay right okay i think that went through all right attempt number two this is the notary receiving another call here so we're going to confirm the document and this time it should go through yeah okay so this time we are actually making the first smart contract call as well so hopefully that transaction comes in there we go so if i actually just show you here that's the first creation in the transaction lifecycle and now each of the signature requests the parties would have received a request so i'm going to check my my inbox there we go there's a signature request and i hope anna methods on the call is also signing on his computer at this moment there we go and the landlord separate my signature this is yet another transaction which should come in here i'm also going to quickly show you the back end as well so we're actually receiving these webhooks and that's what the oracle is constantly managing uh and this is the space daemon it's not very easy to read what's going on but that's actually what's taking care of the file stuff on ipfs and filecoin that makes it really easy for us or not having to maintain a node okay so at this point note 3 should have received a note rise event yes so that means the node she will get a final request serious google so the emails are actually been sent out as i can see here from aws but some reason google isn't so i just hope it's not in they've not decided to market our spam sorry about this there we go oh there you go right so this is the final step uh at this point once the notary signs so this is equivalent of doing this in real world but you know due to covet i realized this was a huge problem that's been happening here in india and many other places so we can see both parties have signed um and each of the signature proofs as well i'm going to show it right at the end so as a note 3 i'm going to finalize the signature and let's actually take a look there should be a transaction coming in for notarization and once all of this has propagated uh what the system does is it actually goes through takes all the signatures puts it on a pdf uh adds some metadata and the final hash is what we actually store on the blockchain right so i should have every everybody should have received a finite email right now uh but um meanwhile let me just quickly show you the what's what i'm about to do right before i sort of show you the demo of this um how do we sort of ensure that no one sort of tampered with the data right so what if this service goes out of business or anything that happens right so this is a page that's actually also hosted on ipfs you can simply put the final pdf and what we do is we using metamask or any web3 provider we're able to extract metadata check against the hash figure out all that information actually through it on this page and that's what this protocol does so let's actually get that final pdf so i can show you this demo so i'm going to download this and let's drag we can drag and drop or we can just call this there we go so it's making a bunch of different calls it's all open sourced on our github so you can actually take a look i wonder if it's just my internet that's having issue there we go so sorry sorry about that so that's the proof so all of this information actually can be verified on the smart contract so when i showed you those transactions so let's just go back quickly before i end the demo the finalization hash that was done through which you can actually go and make a bunch of smart contract calls and check that every information that was submitted which is including when a person signed because a lot of people say i've done the signature and that proof can be verified here but yeah so that's our demo please do check out blockchain.app to see our bitcoin uh grant thank you so much awesome thank you so much and uh that was our last application demo so what i'm going to do is i'll invite all the teams to turn their cameras on and we'll kind of jump into a massive q a we'll just have a pretty big discussion in any direction from anybody and uh just going to go over some of our cool projects i'll kind of start this off one thing kind of we noticed after all these demos was uh swarup ended up paying a lot of money to do these trial runs so it was the most expensive demo uh that's just one comment but just overall the theme is that out of all four of these demos the most interesting part is that uh they all are seamless like they all rely on weaponry technologies we haven't seen the uh the kind of hurdles or bottlenecks that we usually see in what three apps and they are very much ready to go and be used for everybody else so to me that's an amazing accomplishment we saw some lyric twos being used we saw actual payment integrations um and they use the best of storage in in uh smart contracts so let's kind of kick this off and uh i'll see if any one of our guests wants to jump on and ask anybody a question just go for it it's so cool you guys thank you so much for the awesome presentations it's just really really amazing to see what you guys have built um i we definitely have a fun job here which is watching all of your great demos um i had a question for sailplane really amazing app you guys um like super super slick one of the like definitely something where i like okay cool no longer using google drive and dropbox like moving to this thing um i was very curious since you guys are using js ipfs in the browser to kind of do this handshake um what happens if say i've sent my link from one account um to a friend who's gonna you know open up and try and um grab the the data from my drive after my web you know i've closed my web page and maybe my my node or my computer has gone offline because jfj is happening in the browser how do you guys handle that scenario so so right now everything is working peer-to-peer so right now you would need someone that has the browser open with that file already loaded into their ipfs store however we're uh gonna very soon implement uh file coin functionality for pinning so you'll be able to you know if you want use metamath to pay a little bit to have someone else replicate the file but we found that like most of the time when people are sharing files they just want to send it from one person to the other and like with most services like google drive and dropbox you have to store it on a third-party server and you know for someone else to fetch it which you know doesn't make sense if you're just trying to go peer-to-peer so we try to solve that problem thank you i have uh i have a general question for everybody uh again uh just to you know create a rate this is this is so awesome i had so much fun uh watching these um so i think the the the corny thing to ask is like you know what's next what are we what are you guys gonna do uh you know after this but i i have a different question so all of these are you know stark improvements over what we currently have and and you know not just that but also a stock improvements over paid services that are already existing web 2. um do you any of these teams uh plan on monetizing and if so how do you plan on doing so what's the model here and uh yeah i can answer the one with the failed demo that's the way i showed it that's how we want to monetize it so every document that you see so either you pay with a for each document fee or with a subscription i'll answer for us we plan on like i mentioned the pinning service that we want to do we're probably going to implement a proxy contract to be able to take a small amount of revenue for ourselves very small on on the blogging side i think there there are a couple of areas that one could or a company could kind of come in and potentially monetize i think um content discovery is is an interesting area that you know our our blog system did not even touch on right how do you how do you surface interesting content we we if you have the link if the reader has the link they can visit the blog but there's no search or or indexing and so i think there's some room there um where authors want their blog content to be exposed to users and and they would probably pay for it for for that the other area is is sort of just in the in the convenient delivery side if if if a company is facilitating something like um like an rss client or or a an email delivery system where where you're just you're piping this stuff straight to somebody's email inbox um i think readers and and authors would probably split some of their transaction fees with a company on that side as well um on our case for the annotations um we think that we could monetize by running one of the publishing services so uh publishing is great because you can take the transaction cost and make it very small and it can also accompany gas prices so right now gas prices are very high so that's cool let's just make the batch size bigger and you'll take a little bit longer to be filled but you end up paying the same uh so it could almost charge constant pricing for that we ran some tests and if the batch size was like a thousand each annotation would cost like one percent of one cent even with today's gas prices um so if there's a lot of influx we can make the batch size even bigger and make it very very cheap and people pay for services like vpns uh which in a way are also in the interest of uh circumventing censorship so we believe that for some cases it would make sense to to pay for a service like this and if not they can just like pay for their own transaction and they're like 20 bucks right now i don't know thank you a good question um whenever you're building something and you're making something there's a lot that goes into it and you work on a bunch of different parts of this whole system and you design a really large thing and you implement all the parts and so on uh what was your favorite part uh sometimes when you're making a thing there's like a specific thing that either was really hard to do and you accomplished or the design came out really well and so on that really highlights how the entire thing comes together and so i just want to hear from each of you which which part for you as a team was like your favorite and you know maybe you have three different answers or whatever just just give give us one uh one per team thank you when steve implemented the the image previews uh that was awesome because all the files are like full resolution and you can zoom in the viewer is just so nice it's just like a really nice point of the project um on our case it was how we dealt with ethereum so um i sort of thought about this before about how we kept track of all these comments on ethereum and it was a mapping on a contract which is using storage which is incredibly expensive um and then some time later i thought oh maybe we can use transaction logs um and logs are a bit cheaper but now johanna is one of our teammates that we could just use the call data and then index it with the graph and that made it way way cheaper and that was great that was like when we saw that this could really work on on real use case um so yeah super happy with that um for ours i i think it was the moment actually mason mason was the one who who delivered this um we we ended up um in in bridging uh kind of the ethereum private key and and the lib p2p identity um in many ways that kind of bridges kind of ips key space and and ethereum key space and and just allowing that to unfold without kind of a third party let's let's metamask be a pretty powerful kind of identity center across applications and that was kind of a breakthrough moment for us and props to mason for actually accomplishing that so for us was uh when i actually gave this to a friend who you know usually has not tried out any ethereum gap so for them to be able to complete the entire flow without having to set up metamask and stuff so i think that's what actually made our team more confident about being able to ship this for public use i want to add something um one of the one of the coolest things was uh my wife was trying to was having issues using airdrop dropping files from her phone to her computer and vice versa and i was just like you sail plane and she i didn't even have to tell her how to do it she just did it right away and was sharing files so that was awesome my favorite part i'm just sorry yeah i just wanted to say also i thank you so much to all of the teams for these demos i think one thing that's um especially exciting to see is uh that i think all of you invested in really great uis and just having really great ux around what is ordinarily really complicated um web3 concepts and technology and i think you were all really successful at that and and it's just awesome to see that you can create these sorts of experiences um on top of this stack now and i think you these are all really creative applications um and i did have one specific question for the sail plane team um oh sorry for uh the public annotations uh team because i was wondering um especially when um when you think about annotations at scale um it seems to me like it maybe gets into this territory where a lot of um the larger you know social media platforms start to have really large trust and safety teams that are kind of monitoring the the information that exists in these um and these like public uh information networks and so i was curious um how you're thinking about that especially like once a project like this starts to see real scale thank you that's a great question that's a great case to to tell you about our solution um so what we thought was that we would implement some um some method of white listing so you could essentially individually select people that you want to see comments from or better yet you could start subscribing to groups right these groups could be managed by communities uh like last year data structure called tcr was really popular like somehow using a token to create a registry to create to create a list um so you could think about something similar to that groups of people would subscribe to certain interests that they have if one of these annotators became a bad actor you just unsubscribe and not only would this be a good a good way to create the content you were shown it would also be a good way to prevent spam uh because if this is super cheap then people can spam it right so it should be like a twofold solution great well i want to thank all four teams so thank you so much cellplane public annotations network pulp and blockstick for being our application demos and uh this was an incredible start and i'm glad that we all got to chat and see everything that's super seamless so uh with that we're going to be moving on to our next block so i want to just spend a little bit covering what the next block is and that is infrastructure so we have three projects that fall into our infrastructure category and that's valis ipvs recovery and plan flare and we'll be inviting these three teams to uh come on do a demo back to back and we'll have another group q a with all three of these teams so without further ado let's uh welcome vales to kick off with their live demo hello everyone i'm alec i'm here with zach and we are team ballast what we built is a decentralized software slash firmware slash really any arbitrary binary data distribution system and basically our motivation for this was uh secure and simplified software updating is a problem in pretty much every system out there primarily in iot traditional systems and in many new cases now dapps and in many of these cases much like authentication people are rolling their own solutions over and over and over again and they're typically stuck to some centralized process or server so what valus enables is basically developers can use their ethereum wallets as their developer credentials register organizations and create repositories under those organizations and have access control at both levels so what they could do is publish software or firmware binary releases and this will trigger events on contracts that clients can then subscribe to so our original architecture for this was basically we have this core library that abstracts away the communication between ethereum and in the future powergate and ipfs and filecoin and enables a lot of helper functions to build different clients off of particularly a rest relay and a web ui and in the future a cli so what we've currently got now is basically the core library is mostly built out with lots of helper functions um it's talking directly to ipfs it's using ethereum as the source of truth for where everything's at and ipfs is storing all the organization metadata repository data and software releases and the core library abstracts away everything and we use nexjs to build a really easy rest relay for classical http clients and a browser web ui that connects directly to your metamask web3 provider so we have some familiar name spacing with the way we've organized this basically you can pick a relay here and if you don't trust our first party relay you can start your own and you can navigate to slash api slash your organization slug slash the repository slug and then slash the version tag uh pretty similar semantics to things like github try to make it familiar to everyone so the web front end is mostly built out and intends to abstract away all of this functionality for people uh but currently the actual api is functioning uh apologies for the small text here i'm having trouble hearing you man siri's chiming in here okay so um basically uh what we have here is slash api slash akashic tech slash meta and this will give you our organizations metadata that we have uh and then we can do the slash values repository and pull the slash meta uh uri here and fetch the repositories metadata but we can also do here is go slash latest and we can get the latest release available here and if for some reason our first party uh relay goes down we have ipfs.valist.io hosted on fleek um which only provides the front end functionality and does not abstract abstract away the api but you can run your own relays if you so choose and apologies again for the small text here but uh i couldn't find a good way to expand the console size without messing everything else up but basically what i'm doing here is i'm going to publish a new release um ballast 1.03 i'm going to tag it with 1.03 um give it the hash of where this data is stored and a little change log inside of the metadata as well so we hit confirm here and while that's mining we can check out the latest release change whenever that gets confirmed um but effectively what we could do here is we could do something like an npm install and pull that release from a gateway and in the future we could actually abstract away you having to navigate to your own ipfs gateway what we actually want to be able to do is have a drop-in replacement for things like npm pip maven you name it and any other http based package management system to where all you need to do is change your registry to the ballast relay of your choosing and then you can get new releases from there so hopefully this transaction has been mined and yep our latest release has changed and then we can of course go into the different their versions so that's about it um again in the future we want to be able to support more functionality on the front end um and make it we make it really easy to start your own relay and we also have the ability to deploy into serverless environments as well just to make it a little bit easier um but yeah that's about it so i appreciate your time thank you very much thank you so much alec and uh well i have a lot of questions for this one too but we'll save our save it for the q a session and with that we'll move on to the ipfs recovery project that's our second project for for infrastructure category and i'll let govan then leave take it take it away all right um so this is ipfs recovery our submission for hack fest 2020 uh believe you want to hit present yeah and uh coming into this hackathon i had some experience working with error correction in the context of distributed systems i thought ipfs could really benefit from this uh for reasons we'll see shortly uh so first off uh here's the team that brought you guys this hack so there's me govind from toronto sarah from sydney and flee from odessa we all met at hackafest so it's a an international team so the real problem we want to solve is ensuring the integrity and availability of data both data at rest as well as data and motion data at rest can be compromised by things like coffee pouring on your laptop which could be serving vital content somewhere or a power grid shutdown which is a larger scale effect of the same problem and data in motion can be uh hindered by poor network connectivity which can happen for all kinds of reasons further uh censorship uh could cause uh parties that are trying to sensor data can can go to any length to try to bring down data that's on the network so we want to ensure that data is not compromised in any of these situations next slide all right so the solution to this problem is ratio coding canonically which is a method of data protection in which data is broken into fragments expanded and encoded with redundant data pieces and stored across a set of different locations or storage media what this really means is that data on the network becomes kind of a hydra where if you chop off a whole bunch of heads you know it's it's going to still survive unless you chop off most if not all the heads and the the point we're trying to make is that it's worth consuming some extra storage to obtain better data resilience and protection and persistence of data in the network next slide so what we actually built is ipfs recovery which is an abstract erasure coding module that operates over the ipld merkle dag we we did a lot of research on which layer of ipfs to bring redundancy into because there are many possible avenues but since ipld is sort of the essence of the notion of data that's on the ipfs network we decided that ipld would be the perfect place to do it we also have a very good integration with google ipfs with cli utilities as you'll see shortly in our demo and we built two erasure codes one is the read solo element erasure code which is the industry standard where you have a few data blocks and a few parity blocks for one single file and you can use some subset of these total blocks to recover your entire file in the event that some of these blocks are not available and we also built a novel alpha entanglement code so these codes work for where uh data blocks and parity blocks from multiple different files are arranged in a lattice and the lattice can is self-healing in the sense that if data blocks or priority blocks go down you can use the network and figure out how to reconstruct those those blocks and we also have some test plans that we implemented in using test ground uh because we want to battle test the network and see how much resiliency it possesses so please i'll let you take it away for the demo now so hi guys uh first of all we'll start from clean ipfs i'll need a empty repository then i'll add a arbitrary directory that just has a bunch of logos of companies connected to hackfest the next step is to actually encode this directory through our like um [Music] additional comments to ipfs that will produce us a new cid new hash that we can explore through refs and we'll see that this new encoded directory uh has a lot of blocks and to uh show you how we able to recover uh that directory i'll delete some of those blocks so um some of them are just random logs it doesn't matter what logs to delete any of them um like not all of them it depends on parameter named recoverability but it's a separate topic okay so i removed some of them uh and the next thing uh is like the actual magic how we can we still can get this uh directory like as you can see 100 so we're still able to get it while we deleted some of the blogs this is kind of the end of our demo and um there are still a lot of things under the hood how it works how this setup works in not just in onenote or how it works on a network and it works because it's ipld and it's great there and also i'm very really excited about this and i would like to uh like talk about this with the ipfs devs uh to you and maybe like they can like take a little dive from this and to explore some of the technical things behind this because i think there's a lot of great potential in this project that can be upstream to ipfs and uh also uh like added to specifications and maybe then to new uh ipld layer other ipfs implementation so like i'm really excited without him to present you this hack and that's all thank you thank you very much guys awesome so well that was a cool demo um turns out that we have a minor issue with our next m1 that is the building is on fire for the next team so uh this is something we're gonna adjust uh real time so what i'll do is we'll have them move to the end of the group 3 demo and just come back in about 20 to 30 minutes and uh it's unfortunate everybody's safe i think it's a test i'm looking at all that in real time and uh what we'll do is we'll move on to our q a with just these two teams and we'll have planet flare which is our third team come in after group three so uh again this is a thing that we have to kind of handle as as things go along so let's sort of just move into our q a for the infrastructure section we'll move in planet flare at the end of our devtools demo so uh let's welcome ballast and ipfs recovery here and uh let's see our if our judges have any questions [Music] this is super cool thank you guys all so much like my mind is blown like on the ipfs ankle both of these are just like like literally my dreams come true um so i'm super pumped um i have lots of questions so many questions for both of you guys um because i'm really excited to see how uh like how you guys kind of created these and pushing them forward maybe just to start with ballast um you guys are pushing things forward on kind of the package manager side in a way that was you know definitely a top focus for the ipfs team last year um when we were thinking about you know large repositories and and versioning and um you know making it easy to do updates and things like that um one question i had just kind of looking at your um listening to your presentation um you were talking about kind of putting the metadata on ipfs but i wasn't quite clear on how you were doing versioning of content on ipfs is the repository itself um version through ipfs and and downloaded from there and then did you guys think at all about encryption for example there's a couple of teams like literally launching products that are doing um updates using ipfs for firmware and one of the things that they have to think about um is you know encrypting the the updates that they that they put out yeah definitely so uh with the metadata basically everything is logged with events on the contract so anytime an organization updates their metadata you can even go back and potentially see how that's changed over time which could help maybe with some scamming situations or something like that um but and then the repositories also use events to log different releases so you'll always be able to go back to every single previous release um and then we wanted to implement filecoin to kind of make sure that that permanent uh store is there um and as far as encryption goes definitely have that in mind we want to basically do that afterward after we kind of have the whole system kind of figured out and then we can basically use similar styling where you could take the public keys of all the organizations or whoever has access and encrypt it live there um but there's definitely we want to explore the best way to implement that uh before so right now we're just kind of focusing on the public software for now uh but in the future definitely see more enterprise use cases with adding encryption and things like that gotcha but right now you do the firmware itself does get published to ipfs and sorry yeah yeah everything is getting published to ipfs and then the only thing that is being stored in the contracts are the references to those sids so those references could be on filecoin or ipfs and we could handle that we tried to abstract away as much as possible there so you could plug and play different stores as you see fit so um typical we just got the confirmation again the fire alarm was a test and it's over so what i'll do is i'll have uh plan after come on do the last demo and we'll just resume the remaining q a session with all three teams so judgment if you're there i'll just have you turn your video on and uh kick it off with the demo and just in case you're talking i think you're muted so i want to just make sure yes perfect one we're planet flare and we're building a decentralized global cdn we're three students studying computer science at the university of waterloo and this hackathon was our first exposure to web3 technologies to motivate planetflyer let's quickly go over the traditional cdn architecture here we're using the example of a video streaming platform that hires a cdn such as cloudflare to help globally distribute its content there's a few problems with this model first it's a very close market to act as a cdn such as cloudflare you need to own massive data centers all around the world as a result pricing power is concentrated around very few cdn providers second for users in more remote regions where there may not be a cdn data center nearby this could actually lead to sub-optimal performance instead we present plan flare which features an open market anyone with a laptop can easily spin up a planet flare node become a cdn provider and get paid for it for the end user who is receiving the content we feature seamless integration as they don't need any web3 technology and finally the price is a true equilibrium because publishers need to bid to distribute their content on commentary it's also truly global as users in remote regions don't require data centers nearby they just need a planet flare node and fault tolerant by default it's built on these technologies let's quickly dive into the architecture the first step is for the video streaming platform to uploaded files inside a textile bucket once it does that it can create a bid to distribute that bucket on the ethereum plan flare contract we use textile buckets over here so that we can create one bid for many files we'll just just go with it live let's uh unless uh we can play this by year if you think it's going to be over right that was just an announcement for the second time telling us that it was a test i can continue that's fine right um yeah where was i so the video streaming platform to recap upload the files onto textile and we use textile so that we can create one bid on the ethereum planet fire contract for many different files um and this lets us scale easily and so that we're not rate limited by ethereum on the number of files we distribute so once we create the bid on ethereum potential planet flare providers can decide what to host based on the expected reward once they do that they eventually serve the content to the end user via ipfs in return the end user sends back a proof of receipt to the provider over time the provider aggregates these proofs and submits it back to the original publisher via a payment channel once the publisher verifies these proofs it sends the provider an authorization to get paid from the contract to see this in action let's jump into the demo over here we have our publisher ui which lets us upload files to plan flare here let's suppose we want to distribute the following content via planet flare hello planet flare from us so we're just going to upload the file as i do that it's creating a new textile bucket with this file inside of it once it does that it will create a bid on the ethereum planet flare contract to distribute that bucket and now via metamask i can confirm that transaction and the bit has been created you see the bucket let's open it up and check that out yep and so we can see our file and can actually serve it we're going to copy the content id and place it inside this index.html file which is what we will serve to the end user i want you to note that the paragraph tag in here is completely empty and this is just a skeleton file it has no real content inside of it now let's switch to the perspective of the potential provider as a provider i have seen this bid on ethereum and i want to serve this bucket and get paid for it typically this would be done in an automated way where the provider would be streaming data from ethereum and deciding what to post dynamically but for the purposes of the demo i am just going to place the bucket id into the ui over here i can see that the publisher has pinned the bucket and now we're ready to serve it to the end user so let's jump back to the perspective of the end user the end user simply accesses the website and opens an html file we can see that the initially empty paragraph tag gets pop event will eventually get populated by our data that we serve via planet flare this works only right here we're showing it on text but in principle you could use this for images video or practically any content we also see on the provider ui that they received a token from the end user this is their proof of receipt by submitting this token back to the publisher they'll be able to get paid in planet flarecoin and now we can see that the balance in planetsidecoin got incremented by a metamask so that's our whole demo um in the future we plan to package all of this um work via npm so that anyone can create provider nodes or end end users very easily we want to further document our protocols and we want to review some of our key design choices especially around performance and security thank you we look forward to your questions awesome thank you for that great live demo and uh and what we'll do is we're just going to resume our q a session so i'll just have you uh disable the screen share and we'll just have all of you turn your videos on and we'll just kind of resume our q a session so now that i have all three teams uh there's there's a lot of resilient infrastructure that's being built cdns package management and integrity management and recovering data and just having actual data recovery enclosure uh encoding measures so let's just resume back our q a and i'll uh i'll take it away or i'll let the i'll let the just take it away from here that was awesome great job great job guys and uh remaining with composure through all of that that's awesome great work uh hey awesome projects all three of them are really really amazing um and very near and dear to to all of what we've been thinking about for a long time from package management to erasure coding to uh to cdn use cases really great job doing all this stuff folks it's it's awesome to see to see the quality level of the work um i had a question for for uh uh the racial coding folks um really great work with that um curious how how you uh how easy it was for you easy or hard it was for you to kind of wrap your head around all of the ipld data model and model the the data structures with the with the different charts and so on and like that that's a very kind of a tricky area of things and i think your approach to it sounded perfect so yeah just curious how uh if that was easy hard or or if that was easy like maybe talk about another hard part of the project so yeah the short answer is i kind of lucked out because uh i found lieb and i i know the erasure coding stuff i didn't know ipld before coming here uh lib knows the ipld stuff like like the back of his hand pretty much so it was a very very smooth process for us he was just like putting out all the stuff and i was just like okay cool we just need to you know do this here and here and i worked out there if you have anything to add there yeah sure uh so like i had some experience with ipfs and their source closet codes and i really like ipld and how it allows like to make contents uh like like decentralized and everyone can like share it and use it also i'm looking forward for like new ipld version uh so when goblin came with this idea uh i already seen some issues on github about erasure coding and we were thinking about like the overlay service for that but like i i like from the beginning i realized that we need to do this on a pld uh and because this is kind of the way that it can work uh inside the protocol and uh so one uh closing the file adds some like encodes it uh and then that's the content is um distributed on the internet some of blocks are can can be lost and all the other stuff can happen with them but still you're able to restore those blogs like as a hydra heads that's kind of like the best uh comparison and it really works like that we still don't have like a lot of our proofs and like benchmarks for that like how it can uh like give like actual numbers actual percents how this uh like upgrades the ipfs network but like from the first scene it's definitely a good start and it i see that this really helps ipfs and i'm really proud of it kind of this question to you guys you mentioned using test ground to test out your erasure coding which is super cool and awesome i was really curious kind of what what you guys discovered from running past ground tests um i think one of the things that's in the past been like oh should we add more razor coating directly in is like we're very curious what the performance characteristics will look like does this um kind of speed up the accessing data does it actually add um you know significant resilience factors versus every individual node storing their own copy of a file um and so i was curious what if you guys had any early findings from running some of these test ground performance benchmarks um to kind of compare your your changes versus vanilla ipfs ipld uh so yeah that's the part which is kind of ongoing uh because i was like i posted on slack i think a few days before the deadline i'm like does anyone know something that's similar to ganache that we can use for testing out and then why are you sleeping i don't know his real name uh he's like hey try out test ground i'm like okay uh but yeah so it was it was going really smoothly but we encountered some some bugs uh with the with uh the way i think bitswap worked uh that didn't allow us to actually complete the test and that was actually mainly done by the third member of our team who unfortunately couldn't make it uh here um yeah and uh do you wanna talk a little bit more about that uh bit swap uh bug because i think we're still we still have some version this is uh like just uh like current version of ipfs uh when you fail to find the block in your blog store and then you fall back to bitswap to try to get it from the network and from this point you can wait endlessly and by original idea uh we i i was thinking just to make this work fully over dark service and uh this like this worked but really bad because there you were you know i was forced to use timeouts and all of that stuff but like later version uh right now i'll just rewrite some of the like so we have a doc service which works with those uh like uh redundancy blogs and it simulates uh blocks service in some way uh and it recovers blocks all the time so it now it works we haven't had a chance like because not a lot of time to uh make this work on test ground so answering your question molly uh that test ground has shown us this bug but we still haven't like uh got a lot of uh information from it uh from this uh from using test ground but like this is a good start i think um the next step uh would be to upload this latest version which is currently an api in our repository to work it on test ground and to see how it works because like multiple nodes setup now works and we are able to uh i can add a file on onenote remove some blocks and go in here can like uh take this data on the other side like but we didn't have a chance to show it for you to you because we had some connectivity issues and yeah none of us had open ports uh on our ultra we didn't have like a way to do this fast forward probably all well thank you so much um i love that you guys are thinking of using test grounded benchmark performance that's the exact next step of our conversation when it comes to merging this all into uh decor i've got a uh this is this was really cool for me and and this was exciting because you know this is the infrastructure section but i mean like just listening to the projects there's so much more um and and not to uh you know overly anchor on anything but uh to give the other two projects in love and um i was talking to austin griffith in the in the uh side chat right um specifically for valas right i think there's there's something here where we're talking about an infrastructure how we can also you know move and i think you mentioned now that there's there's you know an enterprise play here one thing that austin mentioned was you know what if we did like samsung.e and then now you're pushing out firmware and not only that like what if there's fridges that where you have incentivized upgrade incentivize upgrades where you know you get paid and die to upgrade your refrigerators uh firmware um so same for planet flare as well i was thinking like you know there there's this is this is amazing and i've said this to like other hackers as well because you know this there's there's low hanging fruit where you can start streaming not just videos not just you know toasted we're talking about like hosted content you can also think about ads and then you know with payment channels you can really switch them out you can have a bidding war uh and it gets really exciting to think about you know what else there can be there so i'm i'm very curious for both teams to hear more about you know how what other integration have you thought about like what is the you know next integration we're going to see say i don't know let's just give it a time let's let's say two weeks what can we expect to see from youtube yeah i guess um i'll give it a shot so definitely looking forward to implementing more filecoin features um right now ipfs was our go-to um we're very familiar with it uh and unfortunate time crunches you know let us to not be able to implement all the file coin stuff we'd like but that we definitely want to implement as far as you know keeping the store permanent um and yeah we definitely are interested if we could find some way to incentivize iot updates that would be great because that that could significantly improve the cyber security for lots of different industries so definitely really liking the idea with samsung.eth for example we 100 intended that with um people to be able to spawn their own relays and secure them in their own fashion however they deem fit uh whether they wanted to pin the certificates for their personal uh relays they could do that so that less powerful clients can then trust the relay a little bit more um yeah that's that's definitely what we're trying to go towards of course the encryption aspect is very important for you know private stuff but uh we also want to maybe bundle this in a way to where you can deploy this to other ethereum compatible blockchains like hyperledger bazoo or something like that where if people are having if they already have an enterprise chain and they want to integrate these similar features they could do it in their own private networks without having to you know use the public if they want but of course we're always trying to leverage the public network for all kinds of use cases so yeah hopefully that answers that i don't know if uh ken you're also asking planet for your team as well um i also have a question so but i'll wait yeah sure i can uh answer that question because i think joshua's fire alarm is going off again so i'll take a stab at this um yeah so for for next steps i think that our project itself is um pretty much ready to go to go um we just need we just need to package that into an npm package so that anyone can just npm install and run their node server or even on the client side install it as a script tag as you saw in their html web page um i think the next steps too is just to formalize it make sure that our security and design decisions are all like well thought out um but yeah i think it's it's in a good state we just need to some things more and package it nicer um but yeah very cool i'm just gonna put this out into the world but if ben nolan or anyone from the crypto voxels team is listening maybe we can figure something out where we have hosted you know billboards and crypto boxes of decent land you know just sprinkling their ideas i'm blown away by the yeah that that would be an awesome awesome idea uh and i'm a huge fan of crypto rock souls and in decentral and so on um uh plant fire super blown away by by the awesome work you guys did uh it looks really really really cool um and you got the whole flow working and all the publisher and the publisher pace model and so on like that's that's really awesome uh i'll ask my same question that i asked earlier like what was the what was the part that you know you that your favorite part of building this and and maybe like i don't know where some components came together really nicely or or something was easy but that you thought was gonna be hard or something that just uh like just yeah your favorite part of the project and we'll also ask the same thing to the other um i can um i can answer this um for me personally like i think um because we're all like really new to web3 i think for me it was just like learning the possibilities that this technology can have um and allowing anyone to design custom strategies so i think for me it's the fact that the implement the implementation of custom strategies to allow any provider to figure out like what to host and what to cache and the possibilities are that our endless basically like can be as complex as like you know hosting like a machine learning model on like aws and then querying that in your provider node and then you know serving that model so like and there's a lot of stuff around that and like i think there are other teams too that creating some sort of like you know um uh bounty oracle um stuff like that so um i think that our project is more like um a stepping stone that allows all these integrations from other parties to integrate with this so yeah i think like the for me it's just like the the capabilities of this like technology yeah definitely um so aligning with what rap said um as we mentioned we're kind of like new to the whole web 3 thing so for me i guess like the most interesting part was just being able to piece everything together and see like a functional product out of it so we got to work across like different layers of the stack from ipfs down to creating like a nice front end for everything so it was really cool to both be able to like have an excuse to kind of hack together this project while learning um different things about decentralized systems as well as even content delivery networks which none of us really knew much about but as we were researching and as we were developing the project we kind of got to know like what actually underlies a service like cloudflare so yeah that was um like the whole learning process was really fun for us i can go next um so for us for me personally i think just learning about ipld and this whole new world is just uh it's amazing there's like a one hour long video on youtube somewhere uh by one of the guys i think the ipld developer uh that i was i was just like blown away by it completely so i've been following the ibfs project for like a while i haven't wrote about it in my university article like two years ago so it's just it's so great to actually like you know be as hands-on in this project as possible uh and especially even working with alpha entanglements i think uh novel erasure codes uh offer a lot of possibilities for the future you know pushing our limits for data recovery to the shannon capacity you know uh i think that's that's what's possible and that's what i want to enable uh for especially a project with the scope that ipfs has maybe lastly just we can just hear back from dallas as well and now sure yeah uh for me personally i think building the core lib was the most fun part um and just abstracting away all of the things and which really try to make it developer friendly as far as the library goes and pretty much after the core lib was built it was super easy to take those helper functions and build the rest api off of it and then integrate it into the front end directly um and just yeah exploring the file coin ecosystem was was incredible definitely lots of exciting stuff going on there so yeah that's that's probably my favorite stuff amazing well congrats to uh all three of you and uh we hope you kind of keep building this thing and i want to definitely see a lot of these uh merged into a master for the libraries you're talking about okay sorry to interrupt you just before uh before we uh finish the q a i think puja had a question and she had to run because now her fire alarm is is going it's a crazy day um uh her question was uh curious for the planet flare team what do you think it would take in terms of network growth for planet flair to become as performant as centralized cdn services um yeah that's a kind of difficult question to answer because traditional cdns also tend to have partnerships with isps for priority routing through network requests so we haven't looked into it too deeply but i think that would probably require a thorough dive of ipfs an estimate of how close a nearby node would have to be to the end user to achieve comparable performance with a data center that's a little bit further out given networking constraints and differences in routing um so the short answer is i don't really have a great answer around that and i need to look into it a lot more but we we have thought about it and like benchmarking is probably our next most immediate goal great um so uh with that we'll uh we'll move on to our sponsor section which is our all of our sponsors we'll be announcing which teams won their prizes and uh what i'll do is for our judges if you're not one of the sponsors talking as well you can kind of turn your video off we'll be resuming in like eight to ten minutes and then when we hear uh the sponsors kind of are finished with their demos we'll move on to the group three uh presentations so i want to kick this off uh first by calling up our first sponsor to tell us who won their prize and that'll be uh brett from fleek so please welcome brett to come turn their videos on and let us know the name of the teams that have won the fleet prizes awesome thanks so much uh yeah so i'm brett shearer i'm one of the co-founders and the ceo at fleek uh this has been an amazing month thanks so much to protocol labs and eth global for putting us together and all the hackers involved today has been an awesome call too just seeing all the presentations congrats to all the finalists and it's really exciting to also see all the projects building on fleek as well i think like in the beginning we saw there was about 134 projects from the hackathon and from the ones that we reviewed there was about 80 that built on at least one fleek product um some of them up all the way up to about three like even like all three products so um that's the hosting the fleek hosting product the fleek storage product and this fleek space daemon um yeah just real quick we also gave we put an announcement out during the hackathon uh that we released the space app uh so we're actually been the fleet team is building on top of the space damon ourselves uh using like the encryption and the peer-to-peer and unsensible aspects um so we're releasing the space app that is essentially like a decentralized dropbox uh to start um so yeah but to go to hop into the uh the prizes was a ton of amazing projects took a long time to review and go through them all with a bunch of really good uxes and uis um but yeah congrats to the space uh sorry the fleet winner is specifically um the space doc the space damon prize itself was a three thousand dollar prize to one winner so huge congrats the shop fs team after looking at all of them we were blown away by um well there's a couple really cool aspects here they had like a decentralized dropbox aspect with being able to upload files that are encrypted and share them peer-to-peer um but they also had another super cool aspect which was like a data marketplace um it was a smart contract integration that you could put a dot like a value in the in for those files and have a buyer's marketplace to be able to once you buy those files be able to decrypt that file and look at the image or whatever the file may be they also work super closely with us to provide a bunch of feedback while they're building and helped us debug some of the methods on our on our uh space js client so huge shout out to the shopifs team and the other ones uh the hosting prizes and the storage prizes we had a lot of applicants come in so congrats to the ones that won it was a hundred dollars to each of these teams so the hosting prizes you can see block sig pyr web3 api ipfs fps cadbury wfil parcel public annotation network sale plane pulp network um block sig again for the storage side yeah there's you know a bunch other a few more other ones so you guys can just kind of take a look here but yeah congrats to everyone um for across all the different projects and it was an awesome experience for us thank you so much brad next up we'll have andrew from textile and he'll be telling us who won the textile prizes hi everybody uh yeah thanks uh presentations so far have been awesome uh thank you for putting this all together protocol labs and eth global really cool month and we had a blast helping out all the teams so this is like the hard part is to pick a few winners we spent a ton of time reviewing all the videos and looking at some of the code and as a whole team at textile we've we've seen all the projects so really proud of everything that you've done and built on textile we had a ton of submissions so just a a quick reminder of what we're giving prizes for today we had a few different categories we had a best best browser solution uh we had a best mobile solution and we had a best desktop solution then we had had just um best of threads or buckets and then finally we had the big the big uh best of powergate prizes so all the uh we had one best browser one best mobile one best desktop each of those we'll get 500 um best of threads or buckets we're giving out three prizes there each worth 500 and best of powergate we're giving um two prizes worth a thousand dollars so yeah so right here you can see what we what we selected and it was really hard there were just so many good uh entries so um i guess starting from the bottom right best desktop solution we saw was the decentralized docker hub um it was really great this was uh this is really cool i realized we should have even had a best infrastructure category because there were so many solutions that were that mix of desktop and infrastructure that we really wanted to give prizes to but decentralized docker hub we thought was really promising and uh want to see something uh continue to build there really exciting best browser we awarded open poke assembly we thought that this was just an excellent showcase of threads and really touching on a few different sponsor projects and a really nice uh well thought out application and user experience um best of mobile uh you couldn't beat mobility marketplace they had a really a really great demo and really um had thought out kind of a future market where they could actually build a company and we hope they uh continue to push there then just the open buckets and threads best of um we selected the three news buff uh kazan and uh eduvault we thought that they really played with the idea of using threads or buckets in kind of three different um unique and really interesting ways that we're excited to see them push forward and really expand on those and then the big ones um there were a lot of different ways to use powergate with textile we had the hosted instances we had run it your own and we had um the experimental hub version with powergate access but um so of all the projects that we saw working there we had to just select two and so the two that we were really excited to see um push for well we're excited to see all all of these projects push forward but the two we selected were um pygate uh we really were excited about this uh opening the door for data scientists to use filecoin and uh deploy for java we just saw was a really well thought out and kind of very full kind of complete flow for um deploying packages to java and having it work over ipfs and integrating to filecoin so we were really excited those sort of like um nucleus of future ideas and building um infrastructure on these networks was really exciting to us so thanks to everybody for building on us we learned a ton about how to make our apis and technologies better and we're down to keep helping you build your projects and to the winners congratulations thank you so much andrew so as next up we have unstoppable domains and we'll have sye tell us who won the unstoppable domain prizes awesome thank you um so can you hear me everybody good awesome um okay cool so unstoppable domains i'm zaji great meeting everybody we had a blast during this hackathon um this is one of the most engagement hackathons we've seen in a while we had 77 projects submit for unstoppable domains and we were just so proud to see everybody building so thank you to everybody who was involved and i can go ahead and get started with the winners so the website prizes we had a few winners for our first one it's a 2500 prize and that is going to ipfs fps this is a really fun cool first person shooter game um all of our team had a blast playing it and i highly encourage others to give it a go um so congrats to that team i know they were messaging me curious about what was going on so you guys definitely won so congrats and then we had padlock.crypto which is a file sharing platform where you can buy files with dye we were really impressed with the solution and we were excited to give them the second place prize of a thousand dollars and then our third place prize we actually had to split between four teams because we just really couldn't decide they were all really great solutions so each uh team gets 500 and these go to pygate.crypto which is an information on python development platform um secured finance.crypto and d5hedge.crypto which are both trading platforms and then libretos which is a really cool social network and then finally our winner for the four thousand dollar chat prize is cadbury chat um we were super impressed with this innovation it's a peer-to-peer video and text chat um and you can find it at meet cadbury.crypto um so yeah thank you again to the teams that submitted it was really hard to choose um we're happy to continue chatting with all of you offline and um hope to see more development from everybody involved and thanks to the hack nfs team thank you so much sashi next up we'll have consensus and we'll have gabriel tell us who won the consensus prizes gabriel can you hear us i think he's having technical difficulties maybe let's move to the next one and come back yeah we'll we'll do that and then we'll come back to consensus [Music] so uh next up we have ethereum foundation and i'll have a ken come on and tell us that you have prizes hey hi i'm ken from military foundation um so we had several prizes we had uh the best usage for a live pdp and e2 we had one for differential privacy and one for the best use of our best uh hack for decentralized social media or i guess we had three of them uh for lupita p and eth2 we have secured finance web through api and cadbury uh for decentralized social media we have blue coty uh and um and differential privacy we have koyo i hope i pronounced that right congratulations everybody thank you for uh working with us and uh building great thank you so much ken and uh we'll move on to our next sponsor and that is pinata so we'll have kyle from pinata tell us who won the pinata prizes yeah awesome thanks uh thanks everybody for taking part in this hackathon i loved all the projects that we saw submitted our first winner was actually leon and randy with ipfs fps we loved loved the project because they were bridging the gap between web 2 and web 3 gaming second one would be caramel that was done by kevin and it was pretty simple adding pinata to truffle third one daikons was an icon registry for smart contracts built by yasic maximilian and simon uh and the we reason we like that is because you know there's a lot of dexes that are using um using ipfs so we thought that was a pretty uh pretty neat little project that they created and then the final one was unchained index created by thomas and miriam and basically they're trying to replace apis by delivering data with ipfs and ethereum so congrats to all those teams and thanks for thanks for choosing pinata to build on thanks kyle uh next up we'll move over to ens and i'll have brently come on and uh tell us what the ans prizes hey can you hear me yes we can okay great so we had five uh winners um lots of great um lots of great projects uh submitted for this uh of course it was difficult to choose um our first winner was web 3 api which just made various web 3 apis automatically updated to ens and ipfs the second was parcel so parcel ids were ens names and also made use of reverse resolution uh rick lew this was a great project um uh it's a blogging platform and just in which authors were identified by their ens names uh then decentralized docker hub in which you could load docker images from ipfs via ens and nonce uh which was my ens-ipfest directory um kind of search engine thing uh so thanks to all of them uh it was great this was a great hackathon thanks brandley and now we'll move on to our next sponsors and that is the the graph so martin please take it away thanks kartik hey everyone here martin from the graph super excited to be here um we had two bounties each of one thousand die for new subgraphs on the graph explorer and happy to share we had great submissions and our winners are public annotation network and padlock and thanks to all the team that applied to the bounties and congratulations to winners awesome yeah thank you so much uh so next up we have uh three bucks from ceramic network and i'll have michael tell us who won those prizes thanks uh first one to say congrats to all the hackers um we received i think like over 40 submissions that built on three bucks and a few even on ceramic although it's not even live yet um and we learned so much through both of those experiences and and learned as a team both how we can improve the three box product and the ceramic protocol um and so with that we had a couple prizes we offered three prizes for three bucks and one for ceramic the three box prizes were best overall and then we had two second place winners and for best overall we picked multiverse um it's a complete social network built on three box and also uses textile which we love to see multiverse basically was storing everything from profile data to post metadata for images they used threads for messaging and friend requests and they also used private chat between users and so that was awesome that product also had a really sweet ui so congrats to that team they won the fifteen hundred dollar prize second place uh was a tie between koyo and padlock um koyo is a decentralized organization management platform um these three box for profiles proposal information and commenting on proposals um and it was delivered in a really nice package also had some other cool tech uh regarding vote secrecy and privacy um and for the last three box prize we had padlock um and padlock yeah has already been mentioned but they are a way to sell um data or information um and they stored secret keys and integrated three boxes with secret network um which was awesome to see we've been chatting with secret for a while and doing that so thanks um and for ceramic we had a prize for 500 to create a new doctype uh and doctypes on ceramic are basically ways of creating content they define rule sets and aritenos created a brand new doctype for verifiable claims and so they use ceramic as a way to create and publish verifiable information and perform state management on that information so typically verifiable claims are anchored on they're stored somewhere and then you need a revocation registry but they actually use ceramic documents as an innovative way to manage the state of the claim inherently in the claim itself so you don't need to rely on a third party register to do that um so congrats to all the teams and to all the other sponsors um and to eat global and protocol labs for a great event thank you so much and uh lastly we have uh protocol labs and i'll have molly come on and tell us who won the protocol live prizes awesome there were a lot of ones here so thank you so much to all of the teams there were some really really really amazing submissions here and it made our jobs very hard uh when selecting across them i think there were um over over a hundred proposals using projects using ipfs itself um somewhere i didn't get quite the numbers for for filecoin but a ton of amazing projects and we were just really excited to review them all um for d5 our our selected winner was secured finance there were a couple of different collateralized loan submissions and this one was just phenomenal um i was really really impressed at the way that you guys did look uh falcoin loans backed by ethereum it was really well set up and i had a great demo so thank you so much to this team um for data sets our uh chosen winner was the watchdog dao um the the kind of point of this category was thinking about teams were you know making the mission of storing data in a decentralized um resilient way really accessible and this team did a really great job with that um handling large data sets and really captured the spirit of of this prize category um thinking about critically vulnerable data sets and thinking about reducing friction and user experience as well so huge thanks to that team for devtools chosen winner was kotel and did a really great job here thinking about like trade-offs of managing nodes and had a really nice kubernetes extension which we thought was really slick and something that's gonna be really really useful um and for video winner was ipfs fps um had a really really amazing demo was super fun to play um and just in general pushing ipfs forward for kind of the video game category in a really slick way so we really had a good time playing it i'm terrible at speed runs i always failed but uh but thanks so much for giving us something that was really amazing for audio this one was a really hard choice there were a lot of really amazing um submissions but we ended up going with cadbury um because they did a really good combination of of both having kind of a technical challenge and really great demo um thinking a lot about um the signaling server and the client-side mesh that were also really amazing building blocks that other groups can can build on in the future for networking the chosen winner was uh mile if i'm pronouncing that correctly um this category also just had a ton of awesome submissions within it um but we think the um the networking between nodes and devices and thinking about distributed load and reducing points of friction um was just uh like really really good um and the the whole idea of kind of a faucet architecture uh deploy out retrieval deals was also really a really cool innovation for mining the chosen winner was filecoin pricing mechanism fpm they did a really awesome job solves a really critical problem in falcoin um and thought thought about the solution um really uh really well and really thoroughly um and so we we had a really great time uh looking and learning from from looking at your submission and finally last but not least the smart contract selected winner was web3 api um chose a really important problem to solve looking kind of across the ecosystem and really the you know this problem uh of like easing the development across ecosystems um just is is a really big boon to everyone and you guys did a really good job matching up your project with the ecosystem need in a way that's gonna kind of fit in really nicely um so huge huge thank you to all of these teams um there were amazing amazing things here i imagine we're gonna probably or hopefully at some point hop back and and look at what consensus ended up giving as their prizes but we had an amazing time judging and thank you all for the phenomenal projects it was uh it's just been an amazing experience being part of this entire hackathon we've learned a ton as well and it's been great building relationships with all of the amazing project teams thank you so much molly and uh as as we know consensus is having some technical difficulties so we'll see if they're able to uh come on later at the end of the group three demos if not we'll be announcing them and notifying the teams uh directly on the event slack and over email and it's also just if you're one of these teams who won a prize for many of our sponsors uh we'll be putting you in touch with them directly and a lot of them probably already reached out to you so uh just give them a couple of days and uh we'll make sure that everybody gets the prizes that they uh they just received so congratulations to everybody so next up we have our third group for a demo so we have three more projects to go um with some closing remarks so the next category in the last category in our stack is developer tools and we had an amazing set of three teams that will be uh kind of covering what they did to make the developments on web3 a lot smoother and easier so what we'll do is we'll have web3 api decentralized docker hub and pygit come on and uh just kind of jumping into it directly i'll just let the web3 api team go and share their demo hello my name is jordan ellis and i also worked with roberto henriquez perozzo cesar and ori shimoni all living in the u.s and spain and members of the new york family we're here today to bring you web three api rp3 api is a developer tool chain that brings the ease of web 2 to web3 it enables multi-platform and dynamic web 3 applications integrating web3 into your applications today is difficult and slow app developers and protocol developers need to be in constant coordination to maintain compatibility and support new functionality javascript smart contract sdks limit dapps to just the browser pre-build steps hinder developers ability to build dynamic applications and lastly javascript limits performance and creates attack vectors we can do better we built a web3 wasn't runtime for universally compatible smart contract apis this allows protocols to implement user-friendly wrappers in a language agnostic way these wasa modules paired with a subgraph for historical data querying combined together to create a single graphql schema that defines the entirety of the protocol we call this graphql schema a web 3 api web 3 apis live on ipfs and are addressable using ens they can be queried from any language or platform node browser c sharp c c plus plus rust go python et cetera apps only need to include our lightweight client to query any web3 api here we can see an overview of the architecture at the bottom we have our multi-platform applications that all include their various versions of the web3 api client this client library enables the querying of any web 3 api given its decentralized api endpoint also known as an ipfs hash once the web3 api is downloaded and all necessary wasn't modules are loaded at runtime queries can now be executed these queries may lead to interactions with various peer-to-peer networks such as ethereum ipfs and graph protocol in summary web3 api instantly integrates into your applications runs on all devices and interacts with your favorite peer-to-peer networks and so let's see a demo so here we have an example project we created a simple storage project which is a lot of people's first project they jump into when they start developing on ethereum the first thing we'll do is we use the web3 cli to set up our test environment this is where we have a sub graph graph node we have ipfs and we have ethereum running in the background next what we'll do is we will deploy our contracts to the ethereum network this is using ethers.js you can use any other web3 library you like like web3.js or biblar or truffle and then lastly we'll build the web3 api what this is doing is it's compiling the query and mutation waza modules it's building up the subgraph using the graph cli and then lastly it's uploading the whole project ipfs and so here at the bottom we can see our handy uris for our project and so if we wanted to see what this project looks like we can go ahead and paste in the ipfs hash into a browser and see the contents this is our build folder this is our web3 api manifest which describes the project as a whole we also have our schema which defines our mutations and our queries we have the mutation and querywasm modules and our subgraph as it is normally built and so now that we've talked about the build step let's actually see what using this looks like so normally you would probably be familiar with writing your tests in javascript or some other language we wanted to create something a bit different and simpler which is just a series of graphql queries in a json recipe and so as we execute this json recipe what it will do is it will go ahead and call the get function on the smart contract the set function here's our transaction receipts we can see that the value is changing as we make new sets and then lastly it's querying the subgraph and so all of this is in this little query recipe here which links to these query documents if we look at what these look like this is just a simple graphql query this is all that an application developer needs to understand in order to use your protocol and then the protocol developer who's implementing these mutations would compile them to webassembly this is an example in assembly script where we're interacting with the ethereum network through the wazom runtime of web3 api as you just saw through the magic of wasm and graphql we're able to bring smart contracts into applications with lightning speeds the impact this has in the web 3 space is immense we now have a blazing fast dev loot multi-platform support dynamic adapts and secure and efficient sdks executing inside of a wasm virtual machine here's where we are currently at in development and here is what we're looking to do in the immediate future and here's our current north star the web 3 hub a place for developers and users alike to discover use and fork web3 apis for their specific needs web3hub will allow users to visualize the graphql schema query the api in its entirety and publish user-friendly dashboards at the drop of the hat here we see an example of a d5 protocol which has dashboards for its governance stakeholders liquidity providers and traders if you'd like to join early access or become a governing stakeholder of the project please join the mailing list at web3api.dev if you're interested in joining the development team please contact myself or anyone else at dwork come help evolve web3 with us and hopefully we can make the world a better place thank you thank you so much jordan um it was a really cool demo and we have a bunch of questions so um what we'll do is we'll have virage from decentralized docker represent and uh we'll move into the q a after so take it away i'm bob virat anjin from mumbai india and for the hack fs hackathon i worked on decentralized docker using decentralized docker up uh you can easily push and pull ipfs uh you can easily push and pull docker images from ipfs and filecoin it is powered by powergate it also has support for ens domain names why decentralize docker images can be deleted from centralized docker up and dependencies uh can break in the past a popular package was deleted from npm which broke lot of dependencies the other thing is i also believe that the combination of ipfs and filecoin is very cost effective because it provides a multi-tiered storage where ipfs is a hot storage layer and filecoin is a cold storage layer now how do you use a decentralized docker using uh decentralized docker up is uh really simple you just need to install it and then what you can do is once it's installed you can push docker images to ibfss and filecoin and then you can pull docker images uh from ipfs and filecoin so the first step is to uh pull push the docker image to ipf and file coin for that you will use the command d docker push and the uh docker image name in the next step what you will do is uh you will pull the docker image which was uh pushed to ipfs and file coin for that you will use the command d docker pull and here you will use the ipfs cid which was generated from the previous step and also docker also supports enh domain names so what you can do is uh you can link the ipfs cid to the content hash of your ens domain name and then you can pull the docker image using the docker pull followed by the enh domain name and finally you will then create a container using the docker container run command future work i'll work on the search feature where you will be able to search various docker images and then i'll work on one step and show that installation is really simple and finally i also plan to integrate multiple decentralized naming protocols now the demo step yeah so here you can see that the the command that i'll use is docker push ubuntu as you can see uh that the docker image was successfully added to ipfs and uh this is the cid over here and uh then it was supposed to file coin now let me pull using the cid so here i am using the cid generated from the previous step as you can see that the docker image ubuntu was successfully pulled from ipfs and filecoin now i'll do the same using the ena domain so as you can see that the ens domain name resolved to the ipfs cid and now it's fetching for the docker image and you can see that the docker image undo was successfully pulled now at the final step i'll uh create a docker container using the pulled image uh as you can see the docker container was successfully uh created uh this concludes the demo for decentralized docker [Music] thank you so much for watching this is a really cool drop in replacement for uh the docker hub registry registry so um next up we have our last demo for today and that is peter who will be presenting pygate so i'll let peter show us our final demo this is pygate a python interface and tooling for the filecoin network i am peter van garden a digital archivist from vancouver canada my teammates are we're we're seeing the other desktops so if you could just go back to the powerpoint workspace we'll be all set there we go sorry about that so i'm peter van garder and digital archivist from vancouver canada and my teammates are based in london london berlin and abuja nigeria pygate is built using powergate grpc and the python flask web framework for the hackfest hackathon the pygate project team has two goals the first goal is to bring python into the filecoin community this is a february 2020 stock overflow survey of over 65 000 developers and python is overwhelmingly in focus giving these vast possibilities our team reasoned that there would be an acute need for tooling we identified textiles powergate as a front-running developer tool for application access to the falcoid network we were encouraged by its use of a grpc interface which meant we could use existing protobuf libraries to create a python port pygate now exposes filecoin via powergate to the enormous and influential python developer community machine learning data science web applications digital preservation systems and many other innovative tools rely on the flexibility and consistency of python to help solve problems for people around the world until now the tooling for file code and powergate and the major paradigm shift in online content management that they introduced had only consisted of go in javascript libraries our second goal is to build tools on which pythonistas can build applications and experiences pygate provides these developers a set of tools to build their next project solving big problems on top of the filecoin ecosystem in order to achieve these goals we created three products the first is the pyga grpc interface a python library for power game the second is the pi gate web app a flask reference client for powergate and filecoin and third is the pi gate api also a flash tool that provides an asynchronous http and websocket api for web application clients to manage their long-running network tasks and other complex filecoin interactions building on the grpc definitions provided by the textile team the client library allows for drop-in support for falcoin to any python software we're happy to be able to provide this to the community it has roughly 90 percent feature parity with the powergate interface it's actively powering the reference pi gate clients it has developer quick starts and the best start best part it's available on pip right now the pi gate grpc package makes the endpoints of the powergate api to the filecoin network available as pike python methods we've included a number of example scripts as quick starts for developers here you can see that we now get all the power of the powergate in a python script with a simple import statement powergate uses the concept of a filecoin filesystem or ffs to broker client interactions in this example script we created ffs and use it to push a file to filecoin and then retrieve it back again so i had my terminal running in the other screen i was using two monitors and i'm trying to show you guys my terminal right now and it's completely disappeared okay um well here we go here's something so um here is that ffs script running um in my terminal now as a cli job so that's all pure python code now running interacting with the powergate interface so the um pyga gpc package is also being used in the pi gate web app to demonstrate basic powergate functionality in a python flask application after django flask is the most popular web application framework for python developers it provides the most simple structure from which to present the skeleton framework that others can other python developers can use to kick start their own file code applications users can upload single files batches of files or package a group of files in a tar package to upload as a single tar file these files are all being posted to the filecoin network using the powergrid api by pi gate users can browse and search i was expecting a bigger screen um users can so here's the ability to search on files already uploaded to the to file code via the pi gate interface um users can create new ffss through the reference client um they can edit the configuration for those um edit configurations for existing ffss and push those changes um to the files already on the filecoin network that are using that those configuration settings thereby changing their their deals users can check wallop balances a new one's created for every ffs and the pi gate reference client main maintains logs of all the transactions and any error codes that have happened while using the reference client um we know that pi gate will open filecoin to the influential and ambitious python community and we're very proud to make this contribution thank you thank you so much peter um so what we'll do is we'll move on to our q a for all the dev tools uh groups i'll have just all three teams turn on their cameras and we'll uh let our guests ask any questions hey everyone um also sorry for the background noise i had to move outside due to the fire alarm it's a weird day for fire alarms um but i wanted to say uh excellent work to for all these projects this is so incredible um i reviewed many of these projects too when we were doing our judging and i thought they were all extremely exciting and will contribute a lot of value to the ecosystem um and i specifically had a question for the web3 api team um just first of all just wanted to say props also i think pygate team did this as well just the combination of several different products to make sure um for around this like one problem area to make sure that um developers sort of have all of their whatever they'd want to do with this sort of like tooling um to make sure to support all of those user needs so that's really awesome um for the web3 api team i noticed that you mentioned um you're interested in onboarding more protocols and i was curious um what is kind of the plan for having more protocols onboarded um is that something that you'd want um like protocol developers or teams within the ecosystem to pr these sorts of um like sort of uh interfaces two web three api yourself or is there like some sort of some other plan for that and um also just thinking about the complexity and how heavy this like client is um to run for for projects as well um how to manage that as as this like kind of grows and many more protocols are added yeah uh thank you for those questions so so first off the onboarding of protocols um the nice part is that we can do this pretty permissionlessly because everything's open source in the web3 ecosystem so we don't have to kind of try to sell this to people we can basically say okay these are the most impactful protocols on chain today um picking the ethereum network first um let's go ahead and let's implement a web through api for them and then talk to the developers on that team and show them what the benefits of this are and see if they want to take ownership of this and um so yeah it'll very much be kind of a bootstrapping period where um we'll be you know eating our own dog food by implementing existing protocols that are much needed and you know all of software and then um secondly you brought up a really great point about the bloat of the client so how we're planning on fixing that is to be able to try and implement as much as possible in wasm so that that way we can host these packages remotely and then the client can be as thin as possible and then just download what it needs um and then for the things that we can't try and really harden a simple standard that everyone can use um and but the big thing to note there is that this does require us re-implementing let's say like ether.js or like i uh ipfs.js in wasm so that's a large feat and so a shorter term solution is to just do like modules um that you can include with your client so yeah like i need a client with ipfs and ethereum i just include those packages similar to how you would add like um you know add-ons to your webpack awesome thank you it sounds like a really clever way to address it sweet thank you um i had a really awesome time watching all of these demos um especially the the distributed docker hub um it was really cool to see kind of how you guys took all of the the things that again like we had this focus on ipfs for for package management and you guys have all just like totally leapfrogged all of the things we were working on and thinking on last year which is just amazing to see that you know some of the underlying problems have gotten fixed here and you guys have really been able to push it to the next level especially this isn't so much a question but like using ens for decentralized naming is like a really smart innovation and something that we were definitely struggling with the idea of well in a decentralized network how you how you manage naming um like independent naming of various uh repositories to make sure that you could truly have a decentralized repository system was one of the the challenges that we were facing when thinking about trying to go fully uh fully to central about um about package manager repositories and um you guys did a really great job at that uh curious if you have other other kind of next steps that you would want to augment um distributed docker hub with along those lines so uh the next step that i want to do is uh i want to make the installation steps more simple uh so that any developer can install and you know they can use it in production so basically i work with a lot of containers at scale right so basically the way i and mission is it should be really simple like one step install that will bring the uh a lot of developers to this then i also want to uh indicate other naming protocols as well so because that will uh engage more people to use this and uh the other step is also discovery the search feature so i'm gonna thinking of utilizing say ethereum and the various side chains for the discovery part and uh the other thing what i've realized is if you build simple things you know but if they're very powerful things and if it solves a huge problem right and a lot of developers would come and they would use this at scale so at a huge scale you know this could solve a lot of problems at scale like say where you deploy thousands of containers so there you will see the power of ipfs and filecoin at scale uh my my favorite part of the demo was that uh i just realized that he owns docker.ed so that should be a fun one so uh that's great one quick wreck for for decentralized docker hub um a lot of container images have a lot of duplicate data or or very similar so they have you know it's a big tar file full of a bunch of files that are kind of the same uh you can import though you can import the data smartly by creating kind of some ipl data structures for the docker images themselves and you can duplicate tons of the data so you could actually bring my guess is you could bring down the storage of docker hub by an order of magnitude or so and that's a huge uh storage and balance savings so i recommend you check that out so i i'll uh consider that as a next step uh improvement the duplication of the data yeah and then i would uh ask the question that i asked to the other folks like what was the area what was the thing that um uh of your project that you were you're that you're uh most excited about or what was your favorite part of working on this either a specific part of the design or of a specific challenge that you solved or something like that just tell us a bit about like what what guy you really fired up for everyone yeah yeah so whenever i work on in any project right the core part that i like is ideation like like why i'm connected to that problem and you know if i feel deeply connected to that problem then i'm motivated more to solve that problem and understanding the various pain points so once you do that thing you know then you'll understand those technologies are to solve your problem and then you utilize uh those technologies and you experiment with them and uh whenever you face any roadblock you know then you experiment more and then you work towards it and then finally your solution ready and that is the eureka moment like when everything works as when he thought the first time like during the ideation phase and the feedback plays a key role you know you share the video demo with various people and you get the feedback like uh for my case right i got feedback from karthik i got feedback from andrew i got feedback from you and multiple others on slack like jacob also you know that was really that really helped me like various small improvements you know from building the project to the presentation as well like yeah i i'd like to echo what uh barrage had just said about being deeply connected to the problem because um yeah like for for us like this has been something that um we've been banging our heads against for a long time the the problem of bridging the gap between these web 3 protocols and the applications and so um trying to like over like the past year and a half trying to figure out what that best solution looks like um and so yeah like being deeply connected to it and then seeing it actually come to fruition is the the best feeling for me um i've been working as an analyst in the in nit for a number of years and um just i'm more of a hobbyist coder and i've been following ipfest for a long time since its early days and i was very excited about to see falcom coming to fruition now um and then a few months ago learned about powergate and really want to get my hands on these tools but i really feel comfortable as a python developer as a novice developer and i was fortunate to get two uh very skilled python developers on board on my team and they did the heavy lifting of the protobuf work and my favorite moment was the first hello world when i was able to just import powergate and uh and do create.ffs and uh and push and and whammo i was i was interacting with file coin right and it was like i felt like i just was given the keys to uh to a starship like it's like uh it was a very empowering and uh a beautiful moment for me like now is like the perfect time to start shilling grants programs protocol labs has an amazing uh grants program here and you know i i work on the ecosystem support program um and yeah i think you know these are these are like this is what i love about youtube so much is that you know you come to this and you really start to you know dive head first into the rabbit roll and you there's it's like a bottomless pit right and then the next step is you know what do i do what do i do now um yeah let's start applying for grants to start having this conversation and figuring out what's next let's identify enough how to take this to the next level uh let's get connected yeah and a special shout out to peter for uh taking on an actual client library on for for a four week event and uh and being okay with maintaining it from here on so we hope that this becomes a new standard big props to my teammates and we hope to work closely with textile and hopefully adding it uh formally into their suite amazing so um with that we'll uh we'll end our block three q a i want to give a special shout out to all 10 projects that just demoed today and uh i mean we're super excited that uh you got to share everything with everybody else here and got the feedback and then of course even better to hear that you're going to continue working on these projects and then make them uh go mainstream and have them be used by developers in your your audience so um i have a few closing thoughts that i want to just share with everybody before we wrap this event up but before that we were able to get in touch with consensus and i'll have a gabriel come on and tell us who won the consensus prize so if he's here please feel free to meet yourself and let us know yeah yes i am here oh there we go great yes uh first of all amazing amazing work from everybody uh appreciate the the patience as well i'm working through technical difficulties i guess between fires and desktops dropping off and all kinds of fun stuff it's just the kind of day we're having uh wouldn't be a fun hackathon without uh without the the fun stuff right um our team had uh just so much fun going through these projects i i have to say this is probably i'm extremely impressed with um with the final that demoed and the projects that we saw come out of this i think everybody did just tremendous tremendous work um i mean we were just shocked to see companies already starting to think about their business model and pricing and accepting money so um really uh hats off to everybody within um within the hackathon i think uh we were just really really blown away and and uh really excited about this ecosystem um so as a part of um the prize pool tachyon specifically uh we uh we have partnered with protocol labs as a part of um our next program the file coin launch pad accelerator uh and so uh we're excited to extend a um an invitation to the 10 finalists uh to do an interview with the selection committee um with the full application um just as a reminder i know some of you attended our workshop um applications are open until august 21st uh this accelerator is going to run from mid-september through the end of december um teams will receive 80k in funding in addition to mentorship programming um and uh and just a global network of uh you can visit our website uh labs.consensus.net slash tachyon to see the list of mentors uh we're really excited um and uh and all members uh all teams who get accepted into tachyon will also have uh preferential pricing uh across our entire consensus's entire web3 stack that includes infira um special developer access via slot channels to metamask uh and so um yeah we're really excited about um you know our involvement here with this hackathon i'm excited about our partnership with protocol labs and especially another huge shout out to all the teams that participated in this hackathon and the 10 finalists we're really excited to um for those of you who want to continue uh building in and and seeing your project um scale up we we are really excited about seeing you guys apply to um to the uh follow coin launch pad accelerator amazing thank you uh so much so um we're at the the last kind of few minutes of this event i want to just make sure that we do a really nice wrap-up of everything that's happened over the past six weeks we had all of july to work on our hacks and we had last week dedicated to judging and today was a finale where we got to see a lot of our favorite projects and as we kind of just saw we saw the full stack from developer tools that made it possible to have robust infrastructure and the robust infrastructure made it possible to to get applications at the end that were very seamless and and ready to uh to be used by anybody who may or may not even understand the nuances of web3 so all that said i want to just take a few minutes here to thank everybody here that made all this possible and uh again it's not just the youth global team it takes a massive amount of people to make all these events successful i want to especially thank all of our judges who spent all of last week including weekends talking to all of our teams and over 130 projects giving their feedback looking at their demos and really doing uh kind of the best in the hard work that we like to call in making sure that everybody is in a place where they can be successful especially should they choose to learn more and then continue working on these projects i also want to thank all of our sponsors and mentors they were there not only just helping out with workshops and talks and amas but uh every week when we asked our our attendees to check in with us and let us know where they're stuck or where they need help uh we were able to connect them with all these companies and mentors who were there to just unblock them with any technical difficulties and just kind of really having all of you there available constantly replying to things from 9am to 4am made all of this possible because we saw the amazing results all of last week and also today and of course i want to give a very special shout out to the protocol labs team this has been a pleasure to to work with them over the past six weeks and this is everybody we interacted with over the protocol left side and i want to make sure that everybody's recognized for all the hard work they've put in in making this successful for not just all of you but everybody here uh to to ensure that they have the best experience from being ready for documentation to being available for judging to being available to run workshops and sessions and asking and answering questions and just really opening up their entire team to make this event successful for nearly 500 of you and of course like this would definitely not be possible without all 470 hackers who kind of gave us the last month of their time and stuck with us and shared us their feedback and kind of learned with all of us as we figured out how we can make this thing better for not just the falcon ethereum ecosystem but also eth global and this developer community uh in general this these events are very much catered to uh audiences that are trying to learn what's possible in this space and uh hack fest is an exemplary example of how we were able to accomplish that with your participation and for all the time and love you've given us and of course i want to just give a special shout out to the global team especially trent emily andrew and jacob uh there's eight of us on on this side and the hard work uh that everybody's put into making sure that everybody is uh accounted for everybody's uh not blocked on anything else we get all of your questions and emails answered to anything we can do to make sure each and every one of you whether it's sponsors or hackers or our partners are happy um this would not be possible without the hard work that each global team has done so the finalize so we saw 10 teams present today and they came in and showed their demos we grouped them by by different categories but uh if you've been to any other global hackathon in the past uh you'll realize that the the reason we call them finalists is because these events are designed to be opportunities for everybody to learn these are not set up to be competitions we have no notion of first second third and when we call somebody a finalist we're calling each of them first in the same place by our definitions and as a result the top 10 teams or the 10 teams i presented today are all of our winners and uh to kind of give them uh congratulations uh we're going to be giving a thousand usd to every member on each of these teams as part of being a finalist and also each member will get 250 falcoin tokens after the network launches and just kind of make it even more possible for all these teams to continue building these projects we also have a 30 000 usd pool set up for them to tap into if they wish to continue or if they are going to continue we'll be able to grant some of that capital to ensuring that these projects uh sort of continue uh being worked on so i want to congratulate everybody here who presented uh as the 10 teams and that's not it again the goal for these events is to keep learning and keep building so anybody who submitted a hack if you deploy to falcoin mainnet or testnet uh we'll be giving a 100 file coin tokens to each of these teams and we'll be sending a lot more information on that over email to all the teams so keep an eye out for uh how to actually claim uh your reward after and lastly uh this would not be any global event if we don't tell you what's next so i am super excited to announce that we have just launched our next hackathon eat online and we'll be doing this hackathon in a mix of summits over the course of october and if you're interested in signing up and participating again or just even looking at attending the summit and learning about the best of research and applications in this field please check out ethonline.org and we'll be seeing all of you in two months again so with that i want to thank everybody for making this possible i hope you have a great rest of the week and uh thank you so much for giving us the past six weeks and uh showing us all the love for being part of hack fest i hope you have a great day thank you so much thank you so much to all the hackers and and to the youth global team kartik thank you so much thank you guys for organizing this this has been so much fun and so amazing to see everything that everyone has built it's been phenomenal so congratulations to everyone congrats to all the winners and the finalists and a huge thank you to everyone who was involved in making this successful all the questions answered by everyone participating and all of the mentors is huge 
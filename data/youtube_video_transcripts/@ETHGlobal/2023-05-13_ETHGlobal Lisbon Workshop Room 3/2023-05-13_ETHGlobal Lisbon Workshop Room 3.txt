[Music] foreign [Music] [Music] [Music] foreign [Music] [Music] foreign foreign [Music] foreign [Music] [Music] thank you [Music] thanks for coming I know it's the first talk so it's uh and it's three floors up so it's a lot of work to get here so hopefully uh you'll get something useful out of this um Amelia I'm co-founder of near protocol and the CEO of pagoda and today I want to talk about how to build decentralized composable front ends and kind of really accelerate how fast you build and how fast you can actually ship things to your users so just a little bit about near we started in 18 as a blockchain at layer one we launched in 2020 and since then we've really been trying to empower developers kind of me and kind of all of our group is really believes that developers entrepreneurs makers are ones who actually bring web3 to the users and so we want to give the best tools to everyone who's building and so throughout 2022 we've been building a lot of developer platform kind of data stack and a lot of other things and this year we've kind of positioned this like set of tools that we're building as blockchain operating system right and this is all in the goal of achieving billion users in website project so what is blockchain operating system it's really a common layer to discover and experience all kind of applications and Open Lab and main important thing especially for this is compatible with any blockchain so what problems is it solving first of all we all know like I mean here we are in web 3 because we want to solve a lot of web 2 problems right the censorship of web2 the problems with user retention and Discovery the problems with launching on App Store lack of data ownership lack of privacy at the same time web3 itself comes with a lot of challenges right we have a very fragmented ecosystem right each blockchain has its own kind of set of applications and have very little in interconnectivity discoverability of new applications is extremely hard right finding like what actually apps are launched and like live real not trying to rug pull it's pretty hard um re-engagement right somebody came in started using your app you have no idea how to reach them again you have no idea how to kind of bring them back when a new feature launched or debug that they stumbled upon got fixed and there's a set of common problems right just like the as the systems grow the complexity of building and operating them is growing as well so blockchain operating system is really trying to address all of this in a cohesive way and give you tooling to do this and do it all in decentralized and use your own way so kind of the way it does it by having a set of layers A blockchain layers a middleware user interfaces and kind of onboarding wallets layer so diving in a little bit deeper what this means is you have kind of blockchains on the on the bottom right so this is where your identity your kind of money and ownership the kind of the trust of the whole system we're building web seriously but blockchain is not everything right it's not if it you cannot fit everything into that and there's a whole layer of indexers streamers notifications you know search relayers that needs to exist to really provide the experience that we're all used to from web2 right so this is what we call data platform this is where kind of all of the abstraction of the different blockchain happens and at the same time kind of all the common services for really powering kind of you know normal user experience right you you should be able to type in you know that you want to play a game and find what are the games in that three exist right so that this is where kind of this layer lives now the new layer we introduced we call it Discovery and this is actually a different way of building applications front ends in itself and so the way it works is you actually take the front end and if componentize it right similar how you do it in react or in View and you put each component independently on the blockchain so in a way what we did with front end here is what smart contracts did with services with web services right we put them on a blockchain we made them uncensorable Unstoppable always accessible and very composable right because now each Atomic piece right the swap an nft a feed of social posts can exist on its own and can be embedded anywhere and and I'll show how all of this works but this is just a protocol right all of these are protocols that really Define how data flows and how it shows and you need a place where all of this is being combined and so what we call those things gateways so Gateway is something where it pretty much you go there it's either an app a website a browser um or a wallet and this is where it loads all of this right and shows you exactly as a user what you want and depending on your account allows you to interact with it right so this can be kind of a variety of things and it still works with any of the you know wallets like metamask Squad connect uh it can be wallet itself that does it right you can actually have Rich experiences inside the wall or that are rendered directly from blockchain now I'll show how it all works so conceptually what we're trying to solve here is that when you were choosing to build in web3 you kind of forced yourself into having very little distribution right like in web3 we're all trying to find more users okay and the users in silos across the ecosystem and so what we're doing with blockchain operating system is really removing the straight off right we're saying decentralization actually leads to more distribution because there will be more places where the same experiences the same applications will be accessible now instead of uni swap just being on uniswab.com or dot org it now is accessible on every place on every wallet in any app that supports this blockchain operating system and it's censorship resistant there's like it's you know mobile web you can run it locally on your laptop it's you know data belongs to the user or to developer who built this uh and you have kind of this new layer of discoverability and kind of common user base that spans across all of this applications what does this mean for kind of Enterprises right existing applications well it allows you to grow existing website or an app right you can take existing application or a website that you already have and you can embed all of those website experiences directly into it you don't need to kind of hire you know a huge website team to build this rebuild your website you can just embed that directly into it's easy on boarding for users and it's really like kind of smooth experience that you can integrate with your already existing webtoon and it's multi-chain right so you don't need to choose like oh I'm going to build a near I'm going to build an ethereum but there's a city I'm going to have high fees like you can actually use all of the like the smart contracts from the right chain at the right time right I need an ft that already exists on uh on ethereum I can you know throw for example loyalty points on near and I can use all that with one UI which doesn't really care which smart contracts are used at what time right as a user for developers right for you here in the room it's kind of build once and use everywhere right like you build this component once and now it's accessible everywhere ukonian JavaScript and you can clone from thousands there's like over four thousand components already since we launched this like two months ago that you know you can just really start reusing it's distribution right again the problem in web3 that we have like we all build really cool stuff and then people are not finding not using it so here people can Finance research people can find it through social you can start sharing it and like users already onboard it through whatever Gateway they're using they don't need to like relog in trust again that this website is not trying to steal all my money and no hosting no infrastructure you just launch once and start using and finally for individuals it's it's a place where they can do Commerce they can start earning they can find pla you know people to collaborate with to engage with you know groups Etc so it kind of merges the Commerce the social and kind of all the finance that we've been doing so the main benefit is it's all life right so this is a life and we have launched a featured Gateway which is near.org but there's also already a bunch of other gateways you can access this with um and so the first thing it starts with is if you go right down to near the door and try to create account is the fastest onboarding in the on the web right so it's using this new technology that Google Microsoft and Apple actually launched it's accessible on all the browsers and and it's using undevice cryptography to create your account and you use email to do recovery with NPC and over time you can actually set up Social recovery and any other types of recovery that you need so this takes about five seconds to set up you'd never see any like hashes you never see any seed phrases and it's using your Biometrics or pin code on your phone or on your laptop so it is the fastest as it can be it's faster than like figuring out a password that needs to have you know some characters then you land on kind of this common experience so right now near the door is mostly this social developer environment right again we're focusing on developers and empowering them and so we have kind of a combination of social interactions you know and developers posting updates and kind of some of the projects flusting updates we have uh also featured components which you can think of as App Store you can discover apps and so we can actually switch to the live version of this uh so if you go to discover right you can see all of the components there's over 40 200 already and it's everything from you know nft views trees kind of like Elemental pieces to full-on applications that you know spam games uh chat Financial like liquid staking um kind of developer tooling and many more right so it kind of allows you to have a full thing you can also have so check out developer Hub because this is where uh kind of developers meet social right and and decide what to develop on next and kind of propose ideas and just kind of get funding get grants through a developer hub now the cool thing about it is at any point of time when you looking at something you can look how it's implemented so if you go to develop mode uh you can see the exact source code of the component you're looking at and so that's really powerful because it means you can at any point Fork what you're looking at and start playing with it right so let's say I go to my profile and uh so this is profile page you can also see the dependencies that it has so the different component other components it uses right and so you say like okay cool I like this profile page but you know it's missing something right and so you can go to develop mode and you can see like all right here's the source code I can render it right away by the way there's a there's a visual studio extension if you don't like in browser development um that gives you exactly the same form and as you do this you can save and publish right right away from here so publish actually puts it on the blockchain and publishes it under your name uh all of this is on board right now you actually don't need to pay any fees so the underlying infrastructure covers the fees on the blockchain for that so you see like okay this is cool but I think there's something missing here right I think I want a um I want to have another component here and so you can just add a widget right which is how you link to another component and you just um pretty much need to type in its URL so URL is like when you navigate to uh for example Lido component right how you stake ethereum the URL is this path of a username and the name of the component that you use and so so you can just paste this I want to see lighter here and boom you have a lighter component inside my profile page right so this is how easy it is to start like combining things you know you can like iterate and change things for example for Lido you can again go and check out the source code and uh you know there's a chain ID here Define smart contract that's used Etc you can Fork it you can modify it so you have kind of a whole experience here that you can interact with and the cool thing about it is you know you have search now that indexes all of these applications indexes users and it's kind of expanding this across other blockchains right now that you can start interacting so like if you're looking for something to swap right the sushi swap which actually was probably a fork of Lido component somebody modified with smart contract to use so you have all these experiences really tied in in one place but as I said this is just one Gateway all right so here is another Gateway it's boss.gg and so this runs exactly the same code it just parameterized differently right like you can actually run your own Gateway on your cell in about five minutes which the five minutes it takes for yourself to build everything and if you run it you can specify there's theme the design you can change the home page right so this home page is very different from the home page which you were just looking at which was social this is just apps that build it hackathon but you can open the same Lido component here right it's the same path on the top and you see exactly the same thing right so that's the idea that you build the component once and it's now accessible across every single place this blockchain operating system is installed so that's why partial like one of the reasons we call in operating system because it follows very similar pattern where as a developer now you don't need to think about distribution the distribution is achieved by you know pre-installing this operating system in all those places and you really develop the app and then kind of gain usage from there so another example just to show is uh ZK sync so this is actually a ziki sync example with uh if we switch to it with the Swap and Bridge into error and so you can have kind of if you log in with metamask here you can have a oh if you have Brew stuff uh kind of the full as you can sync experience and so you can keep building right again you can always go view source code see what's going on here and decide that like well actually you know GK VM is cool too maybe I want to build this for gkvm and start iterating from there so really kind of pushing away from a web to we use still front ends in web3 that very much web 2 right running web server need a domain making sure that uh it's like secure that nobody hacked it like what happened was curve they like uh last year where the front end got compromised and so all the transactions were compromised so this actually creates also a level of isolation because every component is isolated uh in the security sense so kind of there's a lot of things here I'll just kind of walk through just to uh we talk through all this what would be like a cool example right that you can build you know this weekend um like imagine you're a fictional hacker that building a fitness project right and so Fitness is uh about you know social engagement and individual it's about kind of how do we re-engage people and bring them back to the interaction it's about motivating them and really creating a business around that as well and so there's four steps to building a business right first to test the hypothesis so first you want like how quickly can you learn if this is the right thing and you can actually like uh find that right thing that people are engaged with and so the cool thing here is as you're kind of navigating through this blockchain operating system you see different interesting things you're like oh there's an nft Mentor here there's a social feed there and you can pull it all together really quickly from these components and just make it your own with this redesigning them right so so you create accounts you see minbase which is nft Marketplace and kind of they have nft Minter called minsta uh and you like bring the take the code you know modify it a little bit to Mint Badges and boom you have you know mentor of badges for your fitness app right so kind of that's ideal like and I showed you you know Fork it you know start start kind of changing the code the API is pretty much react and you have access to all the blockchain tooling you need so it's fastest way to prototype an idea right to get to some hackathon level uh kind of product and then start showing it to people because it's already published it's already on chain everybody's accessing it already you can put put it on on the social feed people will see it you can you know go in like Twitter and other socials to attract attention to this and people can start signing up right uh through you know can discuss this so on every component app right there's a discussion so you can think of it as like feedback form and you can share links right and so uh there's one more component of this called keep on where you can actually share a link that directly contains an nft so as they click on this link they will actually go create account and receive nft from that right so you can start creating a more uh complex onboarding experiences which already include some interactions blockchain and so you can start sharing this you know emailing them and notification so I showed you how the fast dos works it's a really kind of onboarding people extremely quickly very web tool like experience but having all of the cryptography underneath to power that kind of interaction with blockchain and you know you're kind of just building this really engaging experiences uh to land people on it finally I showed you search so like people can find these things you know again search is really powerful there will be recommendations but also nowadays A lot of the interaction are happening through the social right so really important is to continue kind of interacting and posting on social the one thing we're planning to launch is the social feed itself will actually be able to embed components and so you'll be able to embed existing experience like nnft like an active nft like with buttons and things for example into the social feed as you post right this is something that you know Twitter or any other exit like kind of web 2 socials are not able to do so more efficient way to acquire users and kind of you have built-in feedback right people can interact on discussions you can onboard new users right that don't have any crypto and kind of start you know earning first nfts maybe start earning first crypto and loyalty points and there's other ways to discover these applications and finally you want to retain users right so retention is one of the hardest things not just in web 3 but in web 2 as well and so you really want to get people to kind of transact And subscribe so the benefit here is you can kind of again social is already embedded you have all the apis and importantly you can start doing notifications right so you can start pushing doing push notifications to the user user can manage that on their side like what notifications they want to receive but this way uh you can pretty much re-engage user as there's new things happening in your app or with with their account itself the cool thing about this this all works in mobile web and this is first time like pretty much especially on Apple side you can actually do this in mobile web they just launched that last year uh the benefit is Apple allowed it on mobile web and they may not allow all the crypto apps on App Store so you're actually able to build the app level experience inside mobile web now and so this is an example in kind of the toolkit for you to do that I mentioned you can deploy on Gateway so there's actually a link you can just click on it and it will Deploy on Gateway and then you can configure parameters uh with a clone on GitHub but also there's a component for that and so boom you have you know you're now your own fit dot app ifit.app which renders the same thing right you just you just customize the menu and the home page now to be your Fitness kind of app interaction so you went from like I built a component I landed some people on like a full-on flat like page and then boom I built it on my website without actually running any of that code right like writing all of that underlying kind of scaffolding of how to link accounts how to build all the linkage all the data processing that needs to happen underneath so increased retention you know ways to re-engage users and really kind of customize customizations you could do you can also serve it through ipfs on ens domain as well right so you have like a full decentralized stack used as well and so now that you have it fully done and you know how to engage users you want to grow the market right and so here you have abilities to go multi-chain and kind of expand with like partner with other projects build other experiences and geographies right so imagine you have you know for example some of the nfts on ethereum that you can actually engage and like link with your uh with your app and so you can have this cross linkage between multiple chains in one place you can work with other apps right so existing uh existing applications like sweatcoin which has millions of users uh you can pretty much engage with them they can either render it directly in or they can kind of send out to your app as you're partnering with them and you can scale geographically so there will be internationalization added to this right which like really gonna power that as other people running gateways in their local geographies for example customized for that language and for the culture they can actually have your apps directly embedded there so work with any chain extend to an experience and you know a lot of the pieces are reusable and kind of can be scaled from there so this is what we call kind of community Commerce right it's really engaging social digital kind of assets and value and kind of participation in one place right the dollars the kind the marketplaces all the things we're building in web 3 is really powering that and so you can go from hypothesis to kind of a hackathon project to an app to you know engage with users to really start building a business and growing and partnering on this platform and kind of grow it from there and just finally to mention one more thing is we just launched near Horizon so this is actually an app built inside the blockchain operating system as well and if you go to um or just search for it uh it's near.org Horizon you can actually see kind of the platform that's designed to really help startups to find broadly speaking contributors right so this is everything from developers Market agencies legal agency to investors and kind of advisors and supporters right and so the idea really to kind of create one single place where all the people in the ecosystem can meet and start helping each other to grow the uh to grow each other startup and project and so there's like a few features already launched and more launching the important part actually is there'll be credits as well so as you on board you can receive some credits to to get services from like a marketing agency or legal agency to set up the company or have you Market your project so this allows to kind of really bootstrap and this works for any blockchain right again it's not really specific to near ecosystem near blockchain ecosystem so try it out you know try to build a would love to hear your feedback you can leave feedback directly on social there there's actually a support line as well that you can use it's just near the dark sign up it's not that hard um but uh you can pretty much build applications you know use ethereum apps or any layer tools as well right there you can have decentralized front end that's not uh like gonna like be censored or stop running you don't need to pay for hosting to start with and you can really kind of get uh usage and distribution from there so again near started as a blockchain originally but it's not a blockchain not just a blockchain anymore right it's it's a lot of different tooling and pieces that come together to really provide kind of solve developer and like Enterprise use cases and problems and that's why we're calling the blockchain operating system it's a system where you can come in and really rely on to allow you to build your business and your applications thank you and uh yeah uh I'd love to chat with you who's interested to learn more [Applause] amazing [Music] [Music] thank you [Music] [Music] foreign [Music] thank you man all right what's going on everybody we're gonna get started here if you want to find a seat welcome welcome welcome cool so this is going to be a talk this talk is an intro to erc6551 this is an upcoming standard it's an EIP and this kind of talk is going to be a walkthrough of what it is how it works why it's important and most importantly how you can use it to build cool stuff at the hackathon this week um so before we go too much farther obligatory intro slide I'm Jaden I'm one of the founding engineers at Future Primitive we're Adventure Studio we build Crazy crypto stuff I'm also one of the authors of erc6551 um you want to follow me on Twitter uh that's where you can DM me um Peter primitive so we are a on-chain venture Studio we build Crazy crypto experiments and we love everything nfts uh Benny one of our Founders who's sitting here in the front row he was one of the founding team of cryptokitties back at Heath Waterloo an early eat Global hackathon and from there worked at Dapper where they launched cheese wizards and NBA Top Shot so been around the NBA in the mft space for a long time and have launched a lot of crazy nfts since then you can see a couple of the ones we've built here but we believe really deeply that nfts are much more than just a financial commodity or something you buy sell and flip We Believe really strongly in the potential of nfts as an on-chain medium we think every nft should be able to do more than just be an asset that sits in your wallet shouldn't just be a static image a static thing that sits there NFD should be able to own things they should be able to take actions and do things they should be able to change States they should be able to claim things like airdrop they should be able to be used as an ethereum identity because that's the potential of nfts as a token but right now it's not really realized nfts are just a thing that sits in your wallet so how can we change that I mean if you zoom out on the history of media on the internet as a whole you know jpegs kind of brought media onto the internet where you can now see images online and then we built stuff like Facebook and things like that we can start doing things with media you can start liking it you could share it you can send it to your mom you can do all these things with media and then nfts took that even further now not only can you interact with media you can also own it you can buy it sell it trade it you own a piece of it it lives on chain and we think kind of the next evolution of nfts is that you can become your nft you can use your nft you can interact with it it's no longer just a thing that gets passed around it's its own unique identity and that's what ERC 6551 is designed to allow erc6551 or the token bound account standard this is a proposal that gives every single nft a wallet and not just new nfts that you build every nft that's ever existed on any evm compatible chain has a wallet now that it can start using today and you can see up here these are real wallets real talk about accounts for these nfts on ethereum so now every nft is a wallet nfts can do crazy things like own any kind of asset because it's just a wallet you know your nfts can connect to dapps you can trade your favorite meme coin on uniswap using your nft rather than using your wallet your nft is that same ability that used to be only something that wallets could do and entities can have their own transaction history right with their own wallet they can generate their own history outside of the history that your wallet creates so how does that work so erc6551 the standard you go and read it it's live on the EIP page um what it does it defines a single registry that is permissionlessly Deployable nobody owns it it's fully decentralized you can deploy it on your favorite chain this hackathon if it doesn't exist there yet and that registry gives every nft its wallet address and it does so using the magic of create two create two lets you deploy smart contracts to predetermined addresses and so the registry reserves wallet addresses for every nft that's ever existed or ever will exist every nft gets a unique wallet address that only the owner of that nft will be able to use and so when that wallet address is deployed the only person who can use that wallet is the owner of the nft you can think of it kind of like a token gated one-of-one safe the owner of the nft will always own the wallet and all assets inside it and all execution permissions on the wallet and this is all Allowed by having that registry that's open in public the whole source code is in the EIP you you can go and start using it today it's fully decentralized works with every nft it's pretty cool one of the things we get asked a lot since we we started this process of trying to get this standardized as in the IP is well wait isn't this just X you know isn't this just ERC 998 didn't we do this a long time ago isn't this just this just some other ERC isn't this just some other centralized company that I've heard of that does like nft nesting or nft holding things um and we've we've built with all of those Future Primitive we've built a lot of experiments with nfts and we've used all the tooling that's out there and none of the things that we saw really fit our use case because we had some really core beliefs about what nfts should be able to do what rights should an nft have first of all every nft should get a wallet not just some nfts that Implement a certain standard right just because you launched your nft a long time ago doesn't mean your nft shouldn't be able to use all of these cool features and most of the standards out there they only work for new nfts and they only work for a subset of nfts and so that didn't fit our use case we also wanted nfts to be able to own anything they shouldn't just work with some types of assets it's no fun if your nft can only own other nfts in the same collection nfts to be able to own anything erc20 721s 1155s if somebody comes out with a crazy new token standard tomorrow it should work with your nft your nft should be able to own it and the big thing was we wanted all of this to work without any contract wrapping or burning a lot of the other standards if you wanted to use existing nfts with them you'd have to wrap the nft into another nft that could then be used with the standard and you know wrapping nfts is great for some mechanics but in a lot of ways you lose the provenance and the value of the original nft when it gets route so we want to do all of this without any wrapping and we wanted to work with existing platforms right it's cool if your nft can own things it's cool if your nft can own anything but if you can't you know see the things your nft owns anywhere other than some app that somebody builds that's no fun it should just work with existing infrastructure so you can see what your nft owns and finally it should be fully decentralized there's a lot of other projects that do this in like a centralized you've got upgradable contracts everything goes through one place we really think that nft should have their own self-sovereign wallets nobody should be able to control what you do with your nft it's a it's a bear asset it's something you own the shame should be true of the things that your nft owns and so we thought all of this was really really important and we didn't see anything out there that did all of these things and so we started talking to friends of ours about this idea we had about giving nfts wallets and they were like wow this is super cool we would use this for a whole bunch of things and as soon as we heard that we thought you know this is way bigger than just our projects just things we want to work on this should be a standard that every nft should be able to use that every ethereum should be able to use so we launched the rc6551 now you're an NFC developer you're here at a hackathon You're Building cool stuff you kind of have the chance to Choose Your Own Adventure if you're building with nfts there's a couple of options you have first you can just pull like an off-the-shelf open Zeppelin nft spin it up and then you can worry about all the utility for it later if you want to build like a uh you know a staking contract you want to build some game mechanic with your nfts you can launch a really plain nft and then put all the logic in some external contract that you use um that's good and all but you have to build a whole bunch of custom contracts and it's only going to work with some nfts I mean you can make it work with all nfts but um there's just some some necessarily like non-standard things you're going to be able to do to make that work and so it's not going to work with every system out there because a lot of it has to do with like wrapping nfts or burning nfts when they go into a certain circumstance and so you can do it it just gets kind of messy and everybody does their own thing and then if you're going to bring this to production you've got to get an audit you've got to do all of that it could be pretty heavy weight the other alternative you have is to use one of these other standards that have come out you know you could build your nft project on something like ERC 998 and you could write all of the logic about your nft owning things into the core nft contract itself you can do that the problem is with standards like erc998 it only works with nfts and erc20s and I think only nfts and your c20s that also implement the some 998 compatible interface and so you can build all this logic into your nft contract but you're making some trade-offs it might not work with every other token out there your nft might not be able to own every other thing and that's only talking about ownership it's not talking at all about being able to use your nft to interact with dapps or all of those other things so you can build a lot of logic into your nft contract but at the end of the day it'll still be hindered by even if it is using some sort of standard it's not going to have the same level of compatibility that your nft having a wallet is going to have because wallets are universally supported any application on ethereum has some concept of a wallet and some support for the concept of a wallet so your third option with erc6551 is you can launch the most boring nft nothing special about the nft contract you can launch an open Edition or you can launch an open Zeppelin fork and all of a sudden every nft you've launched will have its own wallet and you can start building and putting things in that wallet building at building authentication logic using those wallets and your nft project doesn't have to be anything crazy you don't even have to write very much custom code to support this your nft can just own things and do things out of the box and that's a really powerful mechanism you don't need to make this decision when you're launching your nft you don't need to do crazy Custom Contract development afterwards you can just Bank on the fact that every nft in the collection that you launch has a wallet and you can build applications around that so that's a really powerful medium some cool things you can build with this so this kind of turns every nft into a folder so if you're doing airdrops or if you're having you know if you're collecting poapps or if you've got soulbound tokens in your project all of a sudden nfts can start collecting those poapps and the Soul bound tokens you can start putting assets inside of an nft this opens up some really cool mechanics that you can build inside of a hackathon project and especially for airdrops you know it's really interesting when say you have a big collection of nfts you want to do an airdrop to all of them every nft having a static token bound account address versus the dynamic owner address makes stuff like airdrops really easy because you don't have to do snapshots and you can do some really neat gas hacks to save gas when doing that so your nft being able to have a wallet you being able to put assets into it is a really cool thing that you can use for your hackathon projects this week a couple of other interesting ideas to throw you away down membership a lot of nft a lot of dows have this concept of a membership card or an nft that represents your membership in the Dow you can see in this case this is the FWB membership card nft and the more things you do within the Dow the more stickers you collect to prove that you've done things in the past except as it stands right now all of that just sits in your wallet so every time you do something in the Dow it's your wallet that gets the sticker but what happens if you sell the membership card but keep all the stickers you kind of have this weird out of sync history about your participation in the Dow where you keep the membership card but you sell all your stickers you know what are you supposed to do with that when all of the nfts are supposed to render the card and all the stickers you just get this weird kind of out of sync this because the membership card isn't really your core membership in the Dow your wallet is and trying to represent that as an nft gets difficult but with tokenbound accounts your nft can actually own all of the all of the artifacts from the actions it's taken within the Dow your nft can be the core participant in the Dow rather than your wallet being the core participant and your nft can collect artifacts about its historical contributions to the Dow can collect uh Soul bound tokens it can collect attributions and all of that will go wherever the nft goes if you sell that nft on openc all of that history goes with the nft to the new owner whereas before it's just stuck in your wallet address and finally this is a really cool mechanic for on-chain gaming because um you know it works with every asset so your characters in the games can own eth where they can own meme coins or you can represent items in the game as an 1155 and because every nft has its own wallet you can have your character represented as an nft collecting all of these assets in game and then when you go to sell your character all of the assets it's collected over time go with the character versus right now if you're putting all of those assets into somebody's wallet then they can sell the character but keep all the assets or sell all the assets but keep the character and you have to figure out how to do like bundle orders on openc to make that work it just gets messy but with this characters can be represented as nfts and this forms a really interesting basis for on-chain inventory management inside of an gaming contact so a crazy amount of stuff we can go down many many many deep rabbit holes to share what that's all about but um to start we'll get to a demo eventually but we've got a crazy community of developers who have helped contribute to this standard there's been a ton of folks in our in our DMS in our telegram working group that we've formed if you want an invite to join come see me afterwards we love your contributions because with eip's the biggest thing is getting Community Support is rallying the community to come to consensus about what is the standard that should be there we really think it's important that the concept of nfts having a wallet nfts having an account is something that everybody agrees upon that we can come to consensus on and so all people at all of these companies have been helping us do that we've got a killer group of devs if you want to join so I'll give you a quick demo we built a bunch of tooling around us if you want to build on top of erc6551 at the hackathon we've got some tooling for you um so the first thing we built is an Explorer you can think of it as etherscan for tokenbound accounts for any nft that exists you can find its wallet address and you can interact with the wallet if you're the holder of the nft let me just see if this works here I'm going to pop this open all right does anybody have an ens address I'll just pick someone random in the audience okay what's your ens 0xjacks.eath j-a-c-q-u-e-s dot Eve okay so I'm gonna do an etherscan and I'm going to grab your wallet address so ether scan doesn't think of a bot okay is that the right wallet address okay yeah give me a different one wh ale dot eth okay jocks whales.eth okay I don't say it anyways I'll use mine it would have been super cool to use somebody in the audiences but oh yeah sure yeah Jordan Dash public okay Jordan Dash Dash public dot Eve okay is this the right wall address aac2 perfect okay so let's go and take a look at all of your nfts there Jordan so I'm just going to paste your wallet address in here and so here are some nfts you all right you've got a pregnant nft you've got Jordan public.eath um so let's pick the pragma nft so here's the nft and here's the wallet address your nft is a wallet and you can see it there so if I pop this guy open here in etherscan you can see it's got a wallet address it works just fine um so now what I'm going to do is I'm going to go into a nft that we have this is our nice feature primitive logo here and I'm going to airdrop an nft in into that nft's wallet so let me just send this through yup you got that you got the free airdrop here so if we just wait for that transaction to go through excuse me well the ethereum network takes a little while cool is in there in the metamask oh I air dropped in the metamask oh my bad yeah sorry let me airdrop it in the tokenbound account so now you get two you get one in your metamask too all right popped in there great now we're going to put one in the tokenbound account at the nft so in a second when that happens you'll see that nft just shows up here it shows up in this wallet because this nft's wallet now owns that nft we just use an external tool that knows nothing about token Mount accounts knows nothing about erc6551 and it just works if you want to airdrop nfts to this wallet that's the way we refresh the page bam this nft now owns this token and this works anywhere like you can copy the same address and go see it on openc right if I copy and paste this address in here on openc oops sorry I got a search for a wallet there we go if we go see this address on openc you can see that it's probably gonna be under hidden because we just air dropped it uh sorry openc sometimes hides it when it's a it's an airdrop like that especially when it's an open Edition but it is in there you can go see it on on either scan um if we pop this guy back open you can see that the nft really exists we go into nft transfers you can see we minted this nft end as well so stuff like etherscan stuff like um you know openc all of that it all just works with even despite not knowing about this nft being owned by an nft it knows this nft is owned by a wallet and that's really important because wallets are universities universally supported on ethereum it doesn't matter what you're building you're going to support wallets and if you support wallets you naturally support 6551 out of the box that's part of the power of this and so by giving every nft a wallet we let nfts participate equally in the ethereum ecosystem just like any human just like any wallet ethereum nfts can participate and that's a really really powerful thing there's a ton of stuff we go into that um to start because it's a hackathon we'll dive in mostly into what you can use this weekend so the Explorer is there you can check it out works on mainnet works on Gurley adding polygon support this afternoon for you guys who want to play around on lens because there's some really cool things with lens we're also sponsoring a bounty with lens if you want to build a cool lens x6551 integration but the talking about Explorer is there you can go to tokenbound.org for any nft you own you can see its wallet you can start using its wallet today which we think is pretty cool second thing we built is an SDK so if you want to build deep support for erc6551 accounts into your application you can install the tokenbound SDK it's on GitHub npm and Tall npm install to at tokenbound SDK if you're using VM SDK ethers if you're using ethers if you have issues with that come see me happy to help out but you can just pull this into your applications and start calculating the addresses for any nft right away if you launched ft this weekend you can get the address for that nft within your application and start airdropping stuff into it or start executing transactions from that nfts wallet within your application and you don't have to worry about any of it you can just pull in the nft you can just pull in the SDK and go to town it works really simply the other thing we've launched is they're talking about wallet so it's actually really hard to build a wallet smart a wallet uh smart contract um safe's done a great job that a lot of other teams have but you know for a hackathon or for a product in general you shouldn't be responsible for the security of your nft's wallets with some contract you through together you should do something proven something audited something that you can trust and so we've got a token bound wallet implementation it's live on mainnet it's live on all the testnets for you to play around with if it's not on your favorite chain come see me we'll get it up there together but this is a really extensible erc6551 account implementation that you can start using right out of the box if you use the SDK you don't have to worry about this the SDK takes care of it for you but if you want to use do some crazy custom Smart contract wallet stuff that's your implementation you can feel free to play around with it it's open source and it is 4337 compatible one really powerful part of 6551 is you can think about it as account abstraction for nfts every nft gets an abstract account that the nft owns and that's a really powerful Paradigm means you can use all the crazy cool 4337 tooling that's coming out with your nfts wallets so your nfts wallet gets automatically deployed on the first transaction your nft's wallet can use pay masters so it can use other tokens other than eat the pay gas like all the crazy 4337 stuff you've seen it works out of the box and so you can start using it with token Mount accounts uh it's extensibles if you want to add custom logic to your token Mount account our wallet implementation supports that that's super cool for folks who want to do stuff like overriding receiver methods and stuff uh it's live on mainnet so you can play around with it we have a we do have some audits for it um so this is kind of like out of the box you don't want to do anything crazy you just want to start using this Paradigm feel free to pull in the SDK and the talking about account uh tokenbound wallet implementation uh and if you have any questions about how any of this works docs.tokenbound.org is your friend so that'll cover the SDK cover our wallet implementation uh it's a little sparse forgive me we are working on that but if you have any issues please I'm here all weekend come and see me uh and for anything like ERC specific if you want to dive into the internals of how this works under the hood how 6551 actually gives every NFTA wallet without requiring any interaction from nft creators or nft holders you can look it up on the EIP website just Google eip6551 and it'll come up that's all the crazy nerdy details if you're into like EIP development so that's that uh that's tokenbound accounts that's erc6551 we think it's really cool we think there's a ton of applications you can use uh we've got a few minutes left if anybody has questions would love to answer some of them totally so the question is you know every nft has a wallet that's cool but how do I actually use that wallet right if there's Assets in there how do I pull it out or how do I interact with it and so there's a couple of ways you can do that first every wallet is its own smart contract so every nft gets its own smart contract that is token gated so the owner of the nft is the owner of the smart contract wallet and that means that you can use any tool that interacts with smart contracts to use the wallet so if you want to go in etherscan and manually execute transactions using your tokenbound account you can because it's a smart contract that you control your if your nft is owned by your metamask wallet you can use your metamask wallet to control the tokenbound account smart contract that ownership is transitive so if you own the nft you own the smart contract wallet and if you ever sell the nft you will no longer have access to the nft smart contract wallet the new owner will automatically have asset access the moment that transfer takes place and so you can use either scan you can use the tokenbound.org website there's some you can pull assets in put put them in pull them out on the tokenbound.org site deploy the contract we've got some some tooling around that you can use but really anything that works with smart contracts you can use your wallet with foreign that's a good question so questions what happens if you burn the nft what happens to the stuff in the world uh it's all burned too because nobody's ever going to be able to access that tokenbound account again because the nft changed hands is now the burn address and unless you can somehow figure out how to execute transactions from the burn address which would cause other very significant issues uh all of the nfts in the tokenbound account will be forever burned so if you burn the core nft you also burn the assets in the wallet oh yeah absolutely uh let me see if I can pull up this demo we do have a demo of this it gets crazy quickly but what's it called so token bound and no more versatile yeah so EXC excuse this this was kind of an early uh early iteration of this this concept that we built but yeah nfts can totally own nfts that own nfts that own nfts as deep as you want uh you can create a whole family tree of nfts and this is a real live example of that on chain so you can see this testnet clone X owns these three nfts these three nfts each own nfts themselves and these nfts own other entities you can you can make this as deep as you want uh this will like we you know it's crazy enough that nfts can have their own wallet that's kind of what we're focusing on but if you want to go really off the deep end nfts can own nfts in any depth it creates a graph of nft and token ownership which has some crazy implications and importantly uh with some of the changes we have coming up to the wallet you'll be able to if you own this root nft you can just execute directly against the contract of any sub nft because transitively you're the owner of it and so it creates some really interesting ways that you can build like tree based structures on chain one more go for it you would think but that's actually not the case so the question is isn't it really expensive in gas fees because you have to work out the transitive properties of the graph and yes it's more it will cost more gas if you execute further down in the tree um that's you know it will cost more gas but it's actually not incredibly much more gas because what you can do is you can because all of the talk about accounts their addresses are computable right you can compute the account for any nft without making any external contract calls and so you can pass in a set of data that you can compute the owner addresses all the way down the tree locally within the contract you want to do the the logic so in this case the lower level nft account can do this computation on a proof that verifies that you the caller are calling from the top level nft without having to execute a waterfall of contract calls all the way down so you as the caller can call just into the bottom nft and you can it will cost a little bit more gas because you're like verifying data on chain but it's much much cheaper than if you had to call into the top contract which calls into the next one which calls into the next one um yeah go for it yep totally yeah so that's an important thing the security of wallets in this this concept your wallet is only secure your token Mount account is only as secure as the wallet you hold it in that's true for all nfts but it becomes especially true when your nft can own assets so if your wallet gets rugged and you lose your nfts sorry you lost your nfts that's just you know if you get rugged you get rugged if there's something malicious on the contract where somebody steals your nft from you even though your wallet was still secure uh sorry your wallet will also get stolen wherever the nft goes specifically wherever the nft contract says the owner of the nft is that person will have execution permissions on the smart contract wallet so if you get rugs or if you lose your private keys or something like that not much we can do I'm sorry that's just the nature of self-solverty cool I think we had a question here that's a really interesting thing he yeah you can you can totally have a gnosis safe that has nfts as signers on the nose is safe now because you know the wallet address for any nft so you can have a you know five of five Nosa Sig that the signers are actually nfts and no matter who owns that nft they'll automatically be a signer on the Nosa safe through their talking about account sure yeah yes it would work for every contract the question is where do you draw the lines like where does this become useful because if it's not token bound it's really just contract bound contracts and what does that mean like what are you going to do with contract bound contracts yeah totally and so this importantly this works with 721's the best right so it's kind of a lot of this assumes there's a single owner per token but this can also be extended pretty easily to work with other types of tokens where there's not just one owner so you can make this work with 1155s if there's the cases where 1155s have one owner like ens names are now 1155s this works out of the box because ens supports the owner of method so talking about accounts work with some 1155s out of the box they can also work with some more fungible 1155s with a little bit of tweaking and so you can use this same pattern to support other types of tokens you could I mean you would be very much breaking kind of the spirit and the lines that we've drawn on the standard to do contract bound accounts but theoretically if you put an owner of method on the contract you could make Con like this could be contract bound accounts but we just think that like because of the liquid nature of tokens because tokens change hands that makes this really powerful because we haven't had a way to do wallets that have liquid marketplaces for their contents before and so by tying wallets to tokens you get to take advantage of all the infrastructure that exists around tokens rather than working with custom contracts question the back totally yeah so the question is what are some use cases so we talked about three of them a little bit in the slide so this is really cool for airdrops because you can airdrop to talk about accounts uh it's cool for Dows because nfts can now be members of dows signers on the safe voters on the contract and your entire history of membership in the Dow can be a part of that nft you've got Unchained games which is super cool this is kind of like the perfect inventory management solution for on-chain games but there's lots of cool things beyond that uh like what are some of the things people in the what's that oh digital fashion yeah so for example like one of the projects we're working on I'll demo this real quick because I think it's in my wallets um we're working on a contract called sapiens if I can find the find the nft and the Sea of stuff I've collected here we're working on a project called sapiens that uses this mechanic for digital fashion and so this is a sapiens nft you can see inside the sapiens nft are two other nfts one is an nft that's part of the a previous collection we did that once this all reveals this nft at the beginning is going to turn into a T-shirt and the pfp that's revealed in this artwork is going to be able to wear that T-shirt and then collect future nfts that become t-shirts and hats and other other items equipped onto the nft and if the nft owns the assets the nft has the rights to equip those assets and we think that's super cool the other one is one of the reasons we're here at this hackathon is nfts can own lens profiles so this nft owns a lens profile and that means this nft can post on lens it's got its own social profile that goes wherever the nft owns wherever the nft goes if I sell this nft the new owner automatically gets the lens profile and can keep posting from it so some really cool use cases around nfts can now become identities in a social context they can chat with each other they can use lens they can use other decentralized social protocols and and really by giving an nft a wallet which is the core of all of this you let an nft do all of the same things that you can already do as a web 3 user so if you can do it your nft can do it now and that's pretty powerful I think that's all the time we've got thank you so much you guys [Applause] yes there's gonna be some really cool stuff around what if your nft is powered by AI yeah all right [Music] thank you [Music] [Music] foreign [Music] [Music] [Music] thank you [Music] test whoa hey [Music] I figure I'll just get started so that we can keep the time here um thanks for having me my name is Matt we're going to be talking about building community in web 3 today I guess I don't need to come up on the mic so I want to give you guys a background about me I just want to make sure can everyone hear me cool thanks for having me eth Global and uh hello to everyone at home thanks for uh listening in and tuning in uh my name is Matt K I go by crypto Matt k a little bit of background about me I've been uh in crypto marketing for about two years now I'm a social media manager and a digital Community Builder I'm also an AI nerd and you guys may or may not have seen me around at some of the ethereum events I DJ them sometimes I'm also a core member of the eth Warsaw team I run socials for them and help them with their marketing efforts uh that's my handles right there crypto Mac k um so to give you some background you know my path uh I started working for Forge it used to be called bondly Finance I've taken their Community from about 20 000 followers to sixty thousand Twitter followers uh in the six months that I was there this was during like the 2021 bull market we uh pushed around five million dollars in nft sales that was about 25 000 nfts sold at uh mint so that's before secondary market sales I ran projects for uh Tory Lanez it's a rapper if in case anyone doesn't know Logan Paul and Louis Capaldi uh then I switched over to trufi uh at trufi I joined the company when they had about 20 000 Twitter followers and uh grew the account to about 87 000 Twitter followers um when I joined there was about three thousand Discord members and then by the time my time ended there we were at around 25 000 Discord members uh throughout last year I also helped uh bring over 5 000 people to our in-person events uh that we hosted around the globe so these are kind of the three topics that I want all of you to walk away with understanding um the importance of building community in web 3 one of them being uh Community is a pillar to project success uh Community is web 3 marketing and I'll go into that to kind of give you all an understanding of like how marketing used to be and where we're at now and where we'll be in the future as well as understanding that persistence is key A lot of people think that you know you come in community is just built overnight but the reality is this takes like three to six months nine months to actually like Implement and execute like a proper plan so I want to kind of introduce and start us off with explaining the good so what it what does it look like when a good uh attempt at Community happens so the Logan Paul nft sale is a very great example um does anyone know who Logan Paul is in here do you guys just want to raise their hand let me know do you guys know who Logan Paul is okay so this guy clearly as you guys know has a very active Community online he's a YouTube influencer he is like a super hype on Pokemon so during this time we helped sell nfts around his Pokemon release launch and so like he kind of went in and allowed people to come visit him and open the box with him and they made a bunch of content around that after this sale um so that is what it looks like when Community is good and dialed in and there's you know proper implementation there another one is Tory Lanez if you guys don't know who Tory Lanez is uh he's a rapper independent music artist out of out of the U.S uh helped launch a an nft sale where uh he sold something like a million copies of his digital album as an nft for one dollar so in like 90 seconds he sold over a million copies of his of his digital album generating like a million sales and a million dollars of Revenue so what does that mean he ended up getting like a couple of wards after that um so these are really great examples of what you know proper Community execution looks like ah now this stuff is the bad so this is like the opposite end of the spectrum right so as someone that works in community I've been a community moderator I've been a community manager it really sucks to get messages like this this is during times of low sentiment during times of low volume this is when you are engaging with your community but there's nothing being rolled out from the product and Engineering side this is like when morale is really low and you start to lose faith in what you're doing as folks in community I mean we're all here and whether you guys realize it or not you know each Global ethereum is a community as well and uh we're here to kind of help each other grow through these efforts of the hackathon for instance right so um this is kind of the negative aspects when you know things are down and it's really tough to get out of this situation um I've been here before it's not fun uh and uh you know it takes a lot of like grinding and really being persistent and and present to show the community that you're not going anywhere to kind of like dig yourself out of this hole so this is kind of a slide on you know breaking it down how to build community within web3 um first you want to Define your community I'll show you guys the spaces model in the next slide um and kind of unpackage that before we go into steps two three and four um here's the spaces model uh this is by David Spinks he's one of like the most well-known creators in the community space since it became kind of like a thing in web 2 he kind of put together this spaces model where um if you're someone that works in community and you want to show kpis to Your Business Leaders at your organization this is the direction that you want to take your program in from the exception a lot of companies have um one to three of these in their growth implementation models and you want to kind of prioritize each one of these Avenues once that one at a time because if you do too much you have a team that gets burnt out you can't report proper results and um then it kind of just leaves everyone frustrated and wondering like what went wrong right so if uh you take a look at this slide this is kind of what the current landscape of community looks like within the spaces model as organizations imp Implement each one of those layers you'll see that the top three are pretty much support so that's kind of like customer support external engagement those are folks that are actually empowered and confident and have faith in let's say the protocol or what the technology is internally and they help adapt techniques to um to approach folks that are outside of the organization success is that last kind of important um pillar that that folks lean into from the spaces model and that kind of shows you know you you have tried out certain campaigns you've seen what the results are and you're tweaking them moving forward to kind of um you know reproduce uh better results in the future so we're in web 3 I made this meme you know all of you guys are devs I'm a community guy I'm a marketing guy like none of y'all want to be approached by targeted ads like that doesn't look good no one likes that it's annoying so you guys can read past that right like you can just go and check out those the the code and read through all of the nonsense that the ad is telling you so um you know you want to be part of a group that helps Foster ecosystem growth and you have like-minded folks that you could talk to about the technology versus being hit by the ad right so moving on this is kind of like what it looks like from a business perspective as well as like a user lifestyle perspective on how to implement a community growth plan and you want to start off by cultivating community Through Discord telegram Twitter as you all know everyone loves memes the recent you know Meme coin season has been out of control and you guys see how much engagement that produces on socials that catches your your eye that's a way to kind of sell what you're building as a as a community within your organization right so at once you join you know once you got kind of pulled in by this uh Outreach um and you're and you're within the the system you kind of want to you're like okay what do I do now so people need to educate you uh internally and they can do that through a light paper blogs videos amas are a great way to Foster engagement and education within a community this helps people kind of sit in a room together like we are today and learn about what the technology is what your value add is to the ecosystem um later on as you get educated and empowered you kind of enter this adaption curve where more users and Builders join the protocol and then it kind of starts to like have this like that yield curve where you kind of hockey stick up and that takes time I mean this is like we're talking about months to years now just to get to this adoption curve once you get to credibility you know that's when you start really focusing on press releases Partnerships with bigger uh communities you can bring on influencers during this time as well as like proper team leadership so that means hiring folks from you know web 2 that are veterans and D5 or like you know Wall Street Veterans for a D5 protocol stuff like that uh eventually you get to the build phase which is hey we had V1 that was dope we crushed it lets them to implement V2 and let's execute on this model now and then you kind of start that cycle all over again because more and more people start joining and then you engage with them to uh push them through the life cycle of a of a Community member so circling back to the three topics that I want you all to walk away with ZK sync um I guess I'll start asking who knows ZK sinking here do you guys are you guys aware yeah so ZK sync Layer Two scaling solution uses zero knowledge proofs uh to push faster and cheaper transactions right they've been really really really uh present as leaders in the space for over a year now constantly doing spaces on Twitter constantly doing amas on Discord hosting Town Halls pushing uh product and Engineering updates now they just launched I think it was like a month or two ago that they're on on mainnet I'm pretty sure it was last month and within 30 days I think it was even like 15 days they went from zero to 100 million total value locked within their ZK sync Network and I mean that is without a doubt a tail sign of what it looks like when you've been building for months even years at a time to have this sort of metric to share with uh you know the ethereum ecosystem number two that I wanted to point out here is quite network uh does anyone in here know Qui they're relatively new so I wouldn't be so you do so small dollar percentage of the room knows about Kauai but I'm at the Qui guys at East Denver and they are an L1 that uh claims to be pushing like 50 000 transactions per second so we all know that like L1 competition is very stiff out there we all know that l1s are you know not as popular as they used to be but Qui is all over the place and they're present because in their tokenomics model they've actually built out a portion of their future token airdrop and you know token release to be distributed to folks that help them with the marketing efforts uh for the L1 network uh that is something that Hypes people up it lets people feel you know bounded to and invested in something that um you know is to be in the future and uh I've seen qui's social media engagement as well as you know they have different hashtags for different projects that they're pushing different efforts and it's insane to see how the community is so engaged and so active to pound the pavement and like let the world know that quiet Network exists it's going to be really cool keep your eyes out about quiet Network it's going to be cool to see where they go in like six months to 12 months from now when they uh eventually head over to mainnet so this is the second pillar that I want and in my opinion this is like the most important pillar of this talk because I want you all to leave understanding that like Community is marketing it's Marketing in the sense that you know social media is incorporated into this um press is incorporated into this but also presence and um I I think that when folks think about marketing they initially go to like web 2 marketing and how things were built back in the day where you get hit by targeted ads and newsletters and stuff like that nowadays in web 3 we're doing stuff like what I did for trufi this NFTA Project Help create like 120 000 emails for us we had about 13 000 people mint this nft it took our uh Twitter followers from like 47 40 000 to 87 000 uh Twitter followers and our Discord grew twice um from 12 000 to like 25 000 members and so you know my app what I want to ask you guys to think about is like what did we do with these folks afterwards I guess I'll like pause here like now that I've spoken about you know the the kind of implementation model if you think you meant this nft and now all of a sudden you have it like you're excited about true fight but you don't really know what it is like what do you guys think we did to kind of help Foster them and educate them um does anyone have any ideas take like a break here so it could have been something like doing amas with them pushing blog posts um hosting kind of Live Events digitally so that they can come in and ask us questions about what we were doing um true five by the way is uh decentralized uh lending protocol and so um you know the nft had water flowing in and out of it and that's kind of like what represented um the liquidity that enters and leaves the the protocol um so through amas and spaces we were able to educate them on what we were doing eventually we took them through the life cycle and they became contributing Dow members and token holders so that's kind of another good uh lesson learned around uh Community Building um now this is uh an nft project I know my my guy before me was was covering nfts I think this is a really good example of one of the three kind of legs of a table of of uh community building and web three um persistence is key um these guys that are uh uh in this nft project I see them as like the Builders of web3 right now within the nft space these are folks that you know may not have made their you know Financial gains or whatever in web 3 yet but they're all there tinkering and building and pushing um the ecosystem to grow more I've actually met a lot of other marketing folks and VCS um through this uh community that I'm now doing work with um to help you know build their portfolios out and and kind of scale their marketing efforts up the reason I the reason I add them as the persistence leg here is that they almost died they went you know they had their rise up and then the nft market crashed the crypto Market crashed and they almost went to zero but through folks like literally just showing up every day and grinding and creating different narratives to show like Hey we're still here like just buy a seal you coward is kind of like what they say but um eventually they got the seal of approval from the ethereum nft community and now they're kind of back to like a nice and reasonable sustainable level um this is another thing you know they created this you guys will see I'm sure where a lot of nft folks this is my seal by the way but they have this uh meme generator where it pushes uh use unique user assets so that you can kind of create your own content online um and and these are some examples of what that looks like uh I'm using I want to explain you know what some tools are for building community in web3 um you guys saw that nft by trufi earlier that I was describing uh galaxy is the uh the organization that helped power that effort so what we did was we launched the nft on Galaxy's platform and through uh leveraging the two communities we were able to amplify the noise um that that we uh had during that campaign um zealy is another tool that helps Drive growth and engagement nft inspect if any of you all are in nfts you can use nft inspect to kind of compare and contrast different metrics across uh projects Quest is kind of similar to Galaxy um Quest and Galaxy you kind of need to complete um you know different steps different credentials to earn the experience that's at the end of the road there lens is here they have a table lens this is pretty much web3 social media it's like the Facebook of web3 I like to say then we also have super spaces that help supercharge your Twitter spaces and then you all know Discord Telegram and Twitter I would consider those like your base layer uh tools for building community in web3 that's where your main communication channels are now Food For Thought uh I kind of want you guys to leave here also understanding like we're in the space where we're doing community-based engagement because we're so early people want to feel like they're part of something bigger than themselves and that's another reason why we're all here because we want to build the next best thing and bring that to the ethereum ecosystem to keep expanding this um the plumbing doesn't exist like it does in web 2 if you want to go for instance and change your euro to dollars on your on your revolute or whatever the button that you press to create that exchange to sell off your Euro and buy dollars doesn't exist in web 3 yet and that's why we're really clunky and that's why we haven't really reached Mass adoption yet so I'm curious and I think you guys all can think about this as you leave this talk to think you know what does the future of web3 marketing look like is it going to be focused primarily on this community building aspect or will it grow to shrink into a smaller Community Building aspect where uh we focus more on user-based marketing because we have all of the elements and you know the plumbing required to make it user friendly versus the way it is right now [Music] um wrapping it up commute the three topics that I want you guys to understand from this conversation is community building is a key pillar of growth Community is web 3 marketing it's a it is one of the foundational legs of the table that is web 3 marketing I think without it you don't have a product or a company rather and persistence is key this doesn't happen overnight this takes it's you have to grind to make this a reality and you need to have a plan over a six to nine to twelve month kind of period of time in order to see this growth happen so once again there's my information my Twitter is at crypto Matt K I'm at crypto Mac K on Telegram and uh thanks for having me guys really appreciate the time [Applause] if if anyone has questions uh mine time is at the top of the hour but I'd be happy to take yours sir many of them how beneficial it is versus when people so the question is uh an AI chat bot within your project I guess right so my thoughts on chat Bots are do it they're only getting better uh transparently this whole slideshow was made by AI so like I'm a huge advocate for AI I use chat GPT for my work almost every day I use mid-journey to create all the graphics that you guys have seen here like use the bot you don't have funding like major VC companies do like implement it and use it as a means of like creating a funnel for yourself as folks kind of break through that barrier to uh get to a human you know you're saving a lot of time and resources by doing that so I think in the stage where you're at I would I would highly recommend you you lean into it yep anyone else what's up um so where am I transparently this is my first talk and I've I haven't even spoken the web 2 I haven't even thought of doing that I'd be curious personally to see what that looks like because it's a completely different conversation and I think that just thinking about this in real time like I would focus on kind of what they're doing and then just explaining to them like what this is what I just explained to you guys and why it's important in order to create like a bridge uh there was a talk that I that I sat in on where we're actually like as marketers looking to withdraw from crypto native because eventually you're going to get you're going to hit a wall and then you're gonna be like all right well I have as big of a market share as I can like how do I get more users and that is by going and talking to the web to folks so um consider this the beginning of something and uh it's going to get fine-tuned as we move forward here yeah man uh any other questions sweet thanks guys so much I really appreciate the time and I hope you guys have a great hackathon [Applause] [Music] thank you [Music] foreign [Music] [Music] [Music] thank you [Music] [Music] foreign [Music] [Music] hi sorry for interrupting the break um so my name is Miguel I'm going to talk about developer developer experience something that I've been uh building for the past couple of months has kind of as a side project so first of all even though it started as a side project I need to thank the uh my employee light shift capital and also people from vigil that were helping me along the way and giving me time and resources to to be able to do this kind of thing so with that out of the way uh let me get to it so I come from a web development background uh this is kind of an illustration of one of the most important Concepts I learned there about this red green refactor cycle and about the the feedback loops that you the quick feedback loops that you need to get in order to do good tdd just by show offense who here uh I'm assuming most people here are hackers of some sort either experience Junior seniors doesn't matter okay good so yeah I learned a lot a lot of stuff like this from web developments I used to work in Ruby on Rails Elixir then rest more towards the end and all of those ecosystems had something in common that I don't really find in ethereum about the developer developer experience which is that the tools are usually a lot nicer to use especially for beginners if you're an expert and you can read evm byte codes at breakfast it's probably not not a pain for you but for beginners or for people that are like on the sidelines of ethereum like front-end developers that don't write smart contracts but still need to interact with them there's a lot of things that I found along the way that um small small things that kind of build up and make the experience a bit painful for me to build and for even to teach newcomers in space and the the way it started the way I started this whole research and work was actually something kind of stupid I'm not sure if anyone depending on what you use what what you do for a living if you recognize any of the the issues on either of these screenshots so yeah I use a lot uh yeah metamask for development often I'm writing smart contracts and doing some front-end work at the same time and I use Anvil organizer that sort of thing I already learned from speaking at people here in at hackathon that a lot of people don't use local Nets that just deploy to sepoli or Gourley and so on which just it's just an increase that feedback loop and make it harder to do iterate on stuff but yeah so on the first the first thing is I think the the biggest pain in the butt for me which is when when I'm iterating on Smart contracts and the UI at the same time I'm gonna do some some quick fix on Smart contracts going back to the white testing the transaction again and it doesn't work why because to redeploy the smart contract I needed to restart and will trigger the redeploy metamask doesn't know that it still tries to submit transaction within the nonce from the state it had before it doesn't know that it should go back to zero I need to go to the settings reset that manually that's it's a small thing that's bothered me like every uh 10 times a minute when I'm doing some some quick change and then the other is something that happens if I close my browser on my laptop and then I open it back up and I start metamask but it was connected to Anvil Anvil is not live anymore and metamask doesn't even let me input the password and I sometimes I need to start the Anvil just to get metamask going uh yeah so these are two small things that kind of started me after this I I literally went into the metamask code base I started reading maybe I could fix these things with a small pull request that was kind of naive because the metamaskade base is too big and with a lot of hands involved it's not like I was going to learn how to to touch it to touch on it in a couple days but then I got to learn how metamask works I ended up it was kind of magic for me the way the extension would communicate to the pages and I end up learning a lot about how that worked that's mainly on EIP 1193 which specifies a lot of the how window that ethereum works how the web page connects to to your browser and vice versa there's a lot of other IPS for other parts of the RPC API but this is one of the main ones and through this research and talking with other people and brainstorming we I kind of remember the a few other bigger paints I guess or not paints but things that are kind of technical depth that there's reasons for those things to be the way they are but they still could be improved so for example on metamask you're connected to One account to one chain when I'm developing what I would want ideally is if it's on localhost I want to use my test account or mnemonic if I'm on a on a regular website connected to mainnet maybe I want to use my real wallet but on metamask I need to switch between the two back and forth if I'm developing it switches globally to my development account and same thing for Network I'm either connected to Anvil or to mainnets I can't be connected to both depending on which website I'm working on there's security reasons there's scalability reasons for these things to exist but still they're paying for for our side and the main thing after reading this EIP and noticing and others and noticing how it's a bit not necessarily incomplete but it's old uh maybe a bit updated in some things it was built mostly by metamask for metamask because it was it's what existed at the time and as a result they then iterated and implemented some new endpoints that are actually not part of the RPC and then Raven kit rainbow kit comes in and depends on those endpoints so the spec is no longer being followed uh fully which means that you don't actually get to connect with an EIP compatible wallet you just get the connected metamask button that assumes that window ethereum is metamask when in reality it should just be a generic uh a generic thing so other than metamask just a quick rundown of some of the tooling that I use and this is by no means exhaustive but a lot of the things that I use day-to-day so Foundry does a lot of a lot of great things it allows me to yeah impersonate accounts create Forks snapshots and a lot of cool stuff of course see the scan to maybe browse for live smart contracts and interact with apis tenderly if I want to simulate some transactions then there's this impersonated XYZ which I think a lot of people don't know but it's really cool it creates a fake wallet connect connection and it allows you to see any mainnet websites as the as if you were vitalik or in any other advance in ethereum you are obviously you can sign transactions you still don't have the private key but you can see the UI States and interact with the site as if it were someone else for QA for debugging this is really useful then there's public databases public apis that you can use to feed information like the ethereum database signatures ethereum signatures database sorry uh what are these things have in common so a lot of these things are either CLI tools that you kind of need if you don't if you're not a real actually solidity developer but more of this kind of front-end developer maybe you're not aware of those tools or you don't know how to use them properly others are web tools that exist online and that are connected to live Nets only so if you're running your local stuff on Anvil for fast development Cycles you you don't have access to those like tenderly and impersonator for example and so all this research and all these small frustrations and talking to other people it led me to ironically to this thing where I was I'm frustrated with the current standard so I decided to build my own and right now the the way that that's materialized is that I ended up not fixing metamask but essentially building my own wallet as I was learning how metamask uh was working that communication between the tabs and the extension and so on I noticed a few other things that could be improved at least for developers that's the thing I'm focusing on right now making the development experience a lot better but there are some things that at least in theory could be useful for for users as well so what's this iron wallets so right now it's an attempt at being a drop-in metamask replacement what this means is that there's still an extension the the iron wallet itself is a desktop app but there's still an extension to handle that communication but the extension just is that they're ideally don't interact with it it's dropping in the sense that any site that has a connected metamask button the iron wallet will full it and it the the website will think that it's interacting with metamask because it supports the exact same RPC um RPC API and so on uh so it should it should just work smoothly of course still work in progress no promises uh and the main things I was focusing at the start was just the developer experience so first of all it's anvilaware it knows if you're connected to an anvil node uh if you're just developing something and in that case it does some additional things already first of all that non-reset thing that I was talking about earlier it doesn't happen at least on Anvil because it detects that envelope was restarted it rethinks all the states right away I'm going to show that in a minute uh also because this is right now targeting just developments I don't care about passwords or encryption just using the test mnemonic the one that's usually publicly available of course it's not safe for real private keys but the advantage is that I don't get that annoying pop-up every time I need to do a transaction if I'm testing a smart contract I don't need to worry about checking what the gas fees are or rechecking my transaction I just want to click things fast and and iterate quickly um and then some built-in Dev tooling which is yeah more genetic but these are the things that I'm working on right now I'm going to work in the future and that actually I'm here in the hackathon uh trying to do some some of those uh and yeah and maybe some some of these will materialize into an actual wallet for end users but right now that's not anywhere near my radar so things that I'm thinking about both for developers and for users that could be useful in that I'm uh this these are work in progress not yet supported but in the works so first of all it doesn't have to be restricted to a single chain a single account at a time uh I'm able to keep track of which Tabs are connected to the extension and allow the the user or the developer to configure which tabs he wants connected to to which chain based on maybe the the domain name maybe maybe I want localhost to Anvil and everything else to mainnet something like that some rules around that being able to use multiple mnemonics instead of being restricted to just one or if you're like me you have like five Chrome profiles with five different private keys uh transaction simulation and inspection because I mentioned tenderly and impersonated those things you can do on use on mainnet but locally you have Anvil but you can use anvil on Foundry tests or through the CLI you there's no way to write at least that I'm aware of right now to use its inner wallet as a a non-evm solidity developer I would say uh smart contact interaction so if you're interacting with smart contacts it's usually very useful to have some kind of a built-in the other scan contracts page for reading and writing smart contracts without having to implement the UI for for each one of those yourself because those things are there's an API we can just programmatically build a UI around that and then this may be just my opinion but the fact that it's not sandbox to a browser also makes this a lot more beneficial there's access to a lot a lot of other features of the fact of the the operating system that can be useful uh opens up a lot of doors about where where can we start a private key in what format maybe in multiple formats maybe they're in the cloud or in some some other external device and then this again pet even probably a very Niche thing but I use a tiling window manager and those metamask pop-ups on my computer just just mess up my my entire workspace maybe but maybe that's that's just me so yeah now demo time if it works if I can get to that screen no okay this is very hacky yeah I can't clone the screen here so this is what I'll have to do so what I have here that's a generic uh nft collection thing that I implemented just to implemented a long time ago just to test things out it's running that as a yeah it's an xjs app it's all running locally with Anvil and so on this is the wallet that's also running locally but it's yeah it's a desktop app it's not an extension even though yeah as I said there's an extension so yeah I need to refresh this program okay so there we go so just to prove that it's working this is the current UI for the wallet where you have the same thing as metamask like a account selection Network selection it propagates that to all the tabs but already because you don't on metal mask every time you do that through websites the mathematics pop-up asks you to confirm and etc etc right now I don't care about that so it just switches automatically there's also this connection stab which shows which Tabs are connected to it which you can see it updates in real time the work that's not yet done is to be able to select some of these tabs or by domain or something like that and overrides which network those are connected to um and yeah and I can submit transactions and because this is Anvil and because this is um doesn't have that whole confirmation screen it's still estimating the gas but that's all on Anvil you can see that just the fact that I'm clicking things and I'm literally minting nfts a lot a lot faster than I would with metamask and other wallets and the other nice thing about it is that now if I come here and I restart the the server that's server Foundry all the stack that's powering that website and I restarted now in metamask this would be the moment where the nonce wouldn't allow me to just mince but here that all works right off the bat yeah again we can see transactions here right now no more details we all it's also tracking balances of both its and the rc20 right now that doesn't exist the contracts tab is where that those interactions that I mentioned through the API will be but yeah but this [Music] this is why it's not I'm not married to this it's just your basic Tailwind UI so I'm the initial Focus was to get this to to this state where it's already kind of useful or useful if you're just developing contracts and just need a wallet to submit transactions and none of those none of those fancy features just the speed and now we have this hackathon and in the future it's when I'm going to be working on all those other development nice features that I that I mentioned before and because I think I went pretty fast so I have time for questions I guess yep yep wallet do not always well I don't know about this because yeah and if you repeat the question sorry so you're saying you have to look so you're saying you you have both metamask and wallet connects and sometimes the page you're using gets confused about which of the two it's it's supposed to use okay yeah you sign up with wallet connect and then ethers things it's supposed to go to metamask so I never I never had that use case myself so I don't know what specific bug that is uh uh but I I did come across not in either JS but once in rainbow kit and some other sdks there's some specific nuances about how they connect to to the wallet where they kind of yeah as I said before they assume that if window.etheroom is there then it's metamask and if it's not mathematically we'll get confused about it as well uh about wallet connect yeah I don't know I would have to try it but it's probably something worth checking out and fixing somewhere foreign well I think I know a guy who knows a guy but no promises well so you shouldn't be making a dab for iron wallet you should be making an app for an EIP 1193 compatible wallet in theory so yeah right now uh probably this probably there's some component of the spec that I haven't implemented that I missed it's but the the idea is that this would either completely implement the spec without uh without adding any additional endpoints that you will rely on it's just all the RPC endpoints that are specked out if some if there's some limitation in those that makes makes some feature not work correctly and maybe metamask and wallet connect both to something that is not part of the spec then it should be part of the spec essentially you shouldn't whatever that you create shouldn't be tied to a specific wallet it should be tied to those specs and every wallet should Implement those so yes that's it thank you [Applause] foreign foreign [Music] [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] foreign [Music] [Music] [Music] [Music] foreign foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign foreign [Music] [Music] [Music] [Music] thank you [Music] foreign [Music] thank you [Music] hi my name is Sarah Schwartz and I'm a developer relations engineer at fuel labs and today we're going to do a workshop to walk you through how to build a field stack dab on fuel so really quickly what is fuel fuel is a modular execution layer so that means you can execute on fuel and settle on any other L1 like ethereum and it uses the feel VM instead of the evm and it has a utxo model which allows for a parallel transaction execution some quick terminology about fuel when I say fuel I'm referring to the fuel blockchain or Network sway is our rust-based domain-specific language that we're going to be writing our smart contract with Fork stands for fuel orchestrator and it's essentially like cargo for rest or npm for node fuel up is the tool chain manager that will install fork and the feel node software on your machine and then fuels is the sdks there's a rest in typescript SDK that you can use to interact with fuel so really quickly comparing evm to fvm or fuel VM so evm you're writing your contracts in solidity you're probably using some sort of development framework like hard hat or Foundry you're probably using ethersjs or web3.js for your sdks to interact with your contract and for the indexer you might build your custom indexer you might use something like the graph and basically these are all sort of independently managed tools they have to sort of Plug and Play get them all working together versus fuel everything is built in-house like all the aspects of your application so sway is a language fuel up is sort of like a tool chain manager we have our own rest and typescript sdks and our own indexer system and solidity is really like the OG language for the evm it's been there for us for a lot of cool stuff but it can also be like a Minefield for vulnerabilities it can be really tricky to feel confident that your contract is not like going to get hacked and there's just like sort of a lot of um environmental things that you just have to like know about solidity versus sway it's rust space so if you're familiar with rust at all you'll know that the compiler and rest is really helpful because it will tell you like exactly where all of your errors are and we have the same sort of thing going on with sway we have our own compiler that will give you really detailed error messages and also warn you if you uh possibly have a re-entry vulnerability so it's really built with Lessons Learned From solidity in mind and designed for really good developer experience so the dependencies you'll need to build with fuel is first you'll need the rest tool chain and you also need fuel up so I can show you how to install fuel lib so you can um find this on our GitHub fuel Labs it's our GitHub name fuel up and we also have a book if you go to install.fuel.network.latest you'll find these instructions and basically to install fuel up it's this one really simple command here and it should modify your path for you so it's just one step um and then once you have that installed you can you should be able to use this like fuel up show command to see all of your tool chains installed so right now I have the beta 3 tool chain set is my default and these are essentially like different versions so we have different test Nets that associate to the different versions So Right Now Beta 3 is our latest test net and to develop and Deploy on the beta 3 test net you need to use the beta 3 tool chain so I'm going to make a new project and go to my desktop and let's make a new folder called sway demo oh actually it just called sway oops and go into that folder and we're going to use the fork command to create a new project so it's Fork new and then we can just call this contracts you can call it whatever you want so I'm going to open this up in vs code and here is what the template contract looks like so it's really simple there's getting more file there's this fork.tomel file which is essentially the configuration or manifest file and then here's our contract it's the main dots way and the first line of all uh contracts and sway start with this contract keyword and this is because there's different program types in sway so there's something called predicates which are essentially like functions that evaluate to true or false there are scripts there's libraries and then there's contracts which I'm guessing you're familiar with already and one different thing that sway has that solidity doesn't is you have to Define your own ABI here so this is the name of the contract my contract and we can change this to whatever we want so I can call this game and then we have one function here it's called test function and it returns a Boolean and then below is where we actually implement the logic for the the functions that we have in the Avi so essentially the ABI is like an outline for all the functions and their inputs and outputs and then we implement the logic here so we're going to implement the game API as a contract and we're going to make a really simple game it's not going to be too crazy um but yeah we're going to create a game and this game is going to have players so I'm going to create a struct called player and if you're not familiar with rest destruct is sort of like an object in JavaScript essentially it's just something that has keys and values so our player can have a level and we have to give it a type here so the standard number type and sway is a u64 so you can say the levels you 64 and then we might also want to have something like a player type and we can use an e-num for this so an enum is essentially it stands for enumeration it's essentially just a list of options so we could have let's say like um sorry our enum can be called player type and you can say there's one that's like a superhero and the syntax is a little different than rest if you're familiar with that and then we can have like a super villain or something so these are just sort of unit types they're just basically like a blank type so the player type is either going to be a superhero or a super villain all right so now that we have our players we want to be able to store them persistently in our contract right so we're going to have a function called new player so we're going to change the name here sorry to new player and it can return the player struct and you can see the this is not very happy with me because the ABI here is not matching the functions in the actual implementation so we update that a player there we go and true is not a player okay so we have this new player here and we function and we know that we're going to want to store the players somewhere so we'll just add a comment like store player store player so in solidity you're probably familiar with like persistent you might be familiar with persistent variables and solidity and know that they can sort of be anywhere in the contract um as long as it's outside of the function but in sway we actually have a dedicated storage block so you know as you're reading this okay everything inside the storage block is what's going to be the persistent storage and I don't have to keep track of like you know is this variable persistent is this one not anything outside the storage block is not persistently stored so we're going to have all of our players stored here and the player the type of this is going to be a mapping so we have a special type called storage map and it takes like a generic key and value here and you can initialize it as an empty storage map just like this and so thinking about the key and values we're going to use here we're probably going to want to save their address to the actual player struct so one another thing that's different about solidity and sway is that sway has two different types to distinguish eoas or externally owned accounts and contracts so you can't just use like an address type for contracts so we have another type that's an enum that's called identity and an identity can represent either an address or a contract ID so here we're saying that we don't care if a contract wants to play this game if we did care about that and we only wanted eoas to play the game we could store this as an address but just to keep a simple I'll keep it as identity and we're going to store that to the player so okay how do we get the identity in this function so just like solidity we're going to use a message sender and this is actually going to be um oops a method that we import from our standard Library so like rest there's a standard library and it's sort of like if you're familiar with react at all it's sort of like being able to import use state or use effect from react like it's already there you just have to explicitly import it and call it so we can say use standard library and the message sender function is in this Library called off to say message sender and before we store the player we can say let's sender equals message sender Dot and wrap and why does it say unwrap is because message sender returns a result type which means that there is a small potential that it's unable to detect the sender and that's like for a really specific edge cases so generally you're going to be able to reliably detect the sender but that's why it's there and then we're going to insert it into the storage map so we can say storage and this is a really important part so instead of like in solidity if you want to call or reference a persistent variable you just use the name of that variable and you sort of have to keep track like okay this one's in use already but with sway you use the storage keyword and object to access all this so I can say like let player equals X and then you know storage dot players something else and they won't conflict so storage.players is how we're going to access the players mapping and then we can use this insert method to insert the identity in player so it's going to be the sender and a player which we haven't made yet so there are a couple ways to create a new player one way we could do is just say let player equals and then use this like player strike keyword and sort of like create an object and recreate this right here another way is that we can Implement Associated functions for struct so we can sort of use this like object-oriented programming method here say Implement player and add a function called new that's going to return itself which is sort of like this in JavaScript and essentially we can just say self the level will start at level one and then player type will be a parameter here so layer type I'm sorry oops let your type our variable okay so now we want to decide whether or not to make our player a superhero or a super villain and one thing we can do is decide like okay if you're in eoa you can be a superhero if you're a contract you're a super villain so we can use a match expression to match the type of Center and see whether or not it's an address or an contract ID so sway has exhaustive pattern matching just like rest which means that it will detect um basically all of the possible options for you and let you know if you haven't addressed like some possibility so the sender let's see let's say let the player type equals and it will use this match expression so if the sender is the type identity of an address earth like this sorry address the player type is going to be a superhero and it's a contract ID of a super villain okay Match test player okay this is for the whole function and then to initialize every player we can say player equals player new and then pass in that player type and at the end here we can return the player object and should be happy with us okay let me spell this right all right nice so there's our new player function um let's see what else can we add to this one really cool feature that fuel has or sway has is a native tokens or native assets which means that there's essentially you can mint tokens in your contract and then send them like directly in a call so you don't have to approve and then transfer you can just directly send tokens and we have something in our standard library to make this really easy so we have a token library and you can import this like mint to function and then we can just call that here and mint a bunch of tokens to our player so I think we're going to Mint one token which the units in sway are basically so 1 billion is one token and we'll send that to the player nice all right we have one more function here which is level up so the player starts at level one but how do we increase that level we can add a new function here called level up and we'll have it return a u64 which can be the new level and this will take a parameter of ref mute self and what that means is just a reference to the struct itself and it's mutable so by default all variables are person or constants and sway so we have to declare this as mutable and we can say self dot level plus equals one and then just return the new self dot level all right so we need to add one more function here that can be called to actually level up so we'll have to add it to our ADI so we can say function is level up we'll turn to u64 and then we need to add it down here and I like to just sort of copy and paste to make sure everything matches and the player oops I'm sorry let's send it to the sender not the player there we go all right so to level up we're going to need to grab that player from our storage so just like this we're going to get the sender with the message sender function and then we're going to look into storage.players to see if we can get this sender so you can use this dot get function so let player equals storage.player.getcenter and then we can say player dot level up and then we have this so it's already upset at me right now just because this player should be mutable if we're going to update it and then we're going to reinsert it into the storage mapping to overwrite our previous value so we can just use the same line right here and then this level up function returns our level so level was that and we're turning it at the end here all right so there's a lot more we could do with this contract we could also make this function payable and say like you know are they sending the you know this token that I just minted them and essentially how you can do that is um in so in solidity you can just sort of look at the message amount but in sway you can see the message amount and the message or sorry the asset ID being sent because you can send almost any asset so essentially you could just add like a require statement something like this they require the amount uh you know is greater than zero and require that the asset equals the contract ID that's ID equals the contract ID um and add this add like a payable uh um annotation so this one actually one more thing I forgot here is in sway functions are pure by default and you have to specifically say when you're going to access storage so right now if I try to compile this it shouldn't work let's see yeah okay it should say the field thing a few things here so it's a storage attribute access mismatch oh sorry that's a different thing um so basically yeah essentially yeah Storage storage attribute is this thing right here I'm going to add it to above each function and so our new player function writes to storage our level up function will read and write to storage and we just have to add these here as well oh excuse me Let's see we have to add them to our actual functions down here is that the same name storage read write and storage right okay let's see what this compiles now okay so again I said insert we'll see type player uh okay so I forgot one more thing which is when you're getting something from Storage it returns an option type and an option type is basically it can either have the value that you're looking for it can return none which is sort of like null so we also have to unwrap this as well so awesome it builds the command I'm using is Fork build and it created a build file all right so I don't have enough time to create a front-end for this but I do have an example I can show you [Music] um needs to install basically this is what our typescript front end looks like let me start this so we have our contract ID and you can see the steps to deploy the contract if you go to our developer Quick Start and we have this fuel wallet like window object so we have our own wallet extension and we have this hook to check if it's connected and basically here's our new player function so we can use the fuels or a fuel window object to get the user's account and then we can use these like generated types that we got from our contract to us instantiate connection to our contract with the ID and the wallet as the provider and then here's calling our new player contract so we say oh wait contract.functions.new player dot transaction parameters and add variable outputs is one so this is probably the trickiest thing about this is whenever tokens are sent from the contract to an address that will affect the utxos of the transaction so we have to specify that tokens will be sent out to an address here or else this call will fail and then we just say dot call and our level up function is basically the same I actually added like a payable thing here so we're sending uh you know point one of our tokens with uh in the call parameters and I'm basically just console logging this so I'm going to say make any oops let's see this works I'm on the wrong Network all right so beta 3 test net I have funds in my wallet make a new player and it will show inputs and outputs and I'm going to receive one of these unknown tokens because I don't have this asset in my wallet yet I'm gonna prove that and we should see our player all right so here's our new player it's a Superhero level one and we're going to level up real quick and this is sending point one of our tokens and we should see the new level in the console all right so now we're level two okay so yeah that's basically it for uh how to build a fuel stacked app if you're looking for resources um field.network is our website you can find links to our developer Quickstar and all of our documentation here and then I also have a copy of this contract and front end we just built on my GitHub Sarah schwartz.sway game demo and I'll put up the QR code for that if you want to check out that code yeah any questions so so it's just like ethereum sort of like so whoever deploys the contract basically are like I guess they're you know you have to write in an owner but um correct so yeah sorry yeah the question was if if you're calling a contract and storing it using storage then who's paying for that it's whoever's calling the contract just like ethereum yeah all right well um if you haven't already we have a booth downstairs with a ton of t-shirts please get a free t-shirt you don't have to fill out a survey or anything and yeah come let us know if you have any questions thanks noise [Music] foreign [Music] [Music] foreign [Music] foreign [Music] [Music] thank you [Music] foreign [Music] [Music] [Music] [Music] thank you [Music] foreign [Music] [Music] okay hey guys sweet um thank you for showing up to this Workshop I know there are some Rave tickets going on in the next Workshop so I appreciate you guys uh taking the time to meet me here so today what we're going to go over is a quick introduction into what uniswap is the uniswap foundation specifically and how we're different and teaching you parts of our SDK and how to get started building on uniswap before I get started how many people are familiar with uniswap here okay cool how many people have built on uniswap before okay sweet so a lot of people familiar some new Builders um cool so before we get started a little bit about me my name is Tylan I'm the head of developer relations at uniswap and if you guys have any issues or any you know questions about building on top of uniswap this is my contact information happy to help out with whatever you guys need uh our mission at the unit swap foundation for devrel is to fuel creativity and cultivate a community of empowered and influential developers who are shaping the future of technology we feel like uniswap has pushed crypto and D5 forward and we believe that the people that build on top of uniswap will keep on doing the same thing so we want to empower you to do that and we think we have a great community that enables that now what is the unit swap Foundation do most of you have you guys heard of the uniswot foundation first of all okay sweet so for those of you who haven't we we were created almost a year ago and the foundation passed as a governance vote to create a foundation that would be the Mainstay and the hold for pushing unit Swap and the protocol forward in addition to helping out on the developer Community side we also help provide grants so if you guys are looking to build on top of uniswap if you have a great hackathon idea that you want to keep pushing forward after this is done please connect with me we do provide grants so that we can help support you even afterwards we have tons of rfps as well for things that we're looking for we release them every quarter our teams is here that actually does that as well so you can ask them what we're looking for also and we'd be you know happy to explain some of the workings of the foundation and how we how we go about doing that so to the hackathon we have this really great resource for people that are new to uniswap that are new to building on top of uniswap it's called our hacker home and what we do here is we actually have a page that allows you to go to it and we have some intro resources to building on top of uniswap to learning things from how do you do swaps how do you create liquidity pools how do you go a little bit more advanced and how do you use sub graphs how do you create flash swaps all of these things and if you have any ideas you're thinking about building please go to our hacker homepage and we'd be you know it's a great resource for a ton of hackers and also if you have feedback on how we could improve the hacking experience we would love to have that also um um so with that we you know let's get into for those of you who don't know what uniswap is and how it operates or for even those of you that do know how it operates but maybe don't know the inner workings of you know maybe more than a swap let's take a look at that so what is a uniswap pool well it consists of basically two tokens token a and token B so in order to swap token a for token B you need to have people providing liquidity into this pool so that this pool can have funds to actually execute the swaps so you have accounts that provide liquidity to both sides of the pool and then when this liquidity is provided and when swaps occur the people who are actually providing liquidity collect fees on these swaps so there's a whole mechanism behind unit swap that's not just swapping but it's also a whole liquidity side that's very engaging and enticing for people to build on top of and uniswap has a lot of liquidity and there are a lot of cool projects that can be built using that liquidity now maybe you know you see this and it's a little abstract it's token and token B well what what does that look like in real life well if you're trading ethereum can anyone think of a pretty popular token that people are trading eth4 right now Pepe oh yes of course so to actually have Pepe and to have trades happening on Pepe a lot of people are going through uniswap to do this so you would have accounts depositing both ethereum and pepe at different price ranges and then when that happens you create a pool and now things can be swapped on top of unit swap so now that we've gotten over this kind of cringe meme coin maybe we can go into some code and see how now that you have a pool how you can actually interact with that pool and do something simple like pulling the price of the certain coins in that pool so we're going to be looking at fetching spot prices Live for uniswap pools and to do that we're going to be using uh documentation on the uniswap SDK and how we do that is the first thing in case you're new to crypto you have to create a provider and essentially you're going to be using a tool called ethersjs to interact with the smart contracts and call certain functions on there so that you're able to live pull data that you need on chain um so what we'll do is we're going to get a provider from infero once we get that provider we're going to call ethers Js and we're going to use the pool address of the uniswap pool that we want the spot price for and we're going to use the quota address which is a built-in uh contract that uniswap created to actually get live quotes from the pools so if we're looking at this pool address right here you might be thinking okay you know these are just a random contract number what you know what pool is this actually calling well this is for the eth wrapped BTC pool and a really simple way to get the pool information that you want is you can go to info.uniswap.org for wrap BTC slash eth I can click on this info and in the URL you can see the contract for the pool right here so anytime you want to get you know if it's Pepe and eth if it's usdc die you can just go and click on this website and you can see the contract that you want and then you can plug it in to basically this code to get the live spot pricing so once we get the pool address and once we have the quota address and we've set up our provider variables we can now start the start creating the function to get the live price of the pool so what we do here is we create a constant called pull contract and then we use ethers to initiate the contract and we put in our address we also call in the uniswap V3 pool ABI what an ABI is essentially it dictates all the functions in the smart contract and then you can call these functions and when you're calling these functions you're able to read and write real time on the smart contracts so the unit swap B3 ABI comes with the uniswap V3 SDK so you're going to be using this ABI to pull the addresses to pull basically the addresses of each of these token pairs now once you have the addresses of these token pairs you can use that to call these contracts individually to pull information from each specific token so here we have wrap BTC and eth we're using this code to go and get the actual uh contract information so as we're doing this we're starting to get variables that will help us get the live spot price in the unit swap pool so we'll go here and we're going to use this helper function we just created called git abis we're going to pass this into our get price function when we're getting the abis for these token addresses that we just got from our pool contract we use that to now get information or we use that now to instantiate new ether's contracts for the specific token contracts so now that we have rat BTC individually and eth individually we have abis we can now access in those contracts to get additional information as well so what we're going to do here is we're going to get the symbols for each contract so wbtc and eth and then we're also going to get the decimal information decimal information is pretty important in crypto and it's a good thing to note as you're working with uniswap it really impacts the formatting of how certain tokens look and operate or even field so you would use this token decimal information to uh as you're outputting the information to Output it in a format and the other thing to note is that tokens have varying decimals attached to it I believe like rap BTC may have eight decimals after it and I think uh e eth may have like 16 or something more we go on to that into the code but it makes a difference as you're thinking of how do I like do the swap exactly so we then create another uh helper function that will take in that pool contract that we initiated early on and we will get the actual tokens in that pool contract and then we're going to get the fee of that contract if you've used uniswap before you've probably seen that we have different amounts of fees based on you know what the liquidity provider has provided liquidity at so it can be one basis point three five basis points and based on that fee it dictates the actual price in the pool pairing so or and it dictates how much the liquidity providers will get in return for providing liquidity at those fees and we need to know that as we're calculating the spot pricing so we get the symbols we have the decimals now is the time where we use our quota contract our quota contract is going to be used to get the quotes for the prices and then it'll be used in our calculations as well so we have our helper function that we did earlier which was right here get our pool immutables we're going to be getting our token information and our fees for app BTC and Eve and then what we're going to do is we're going to pass in our pool contract which we initiated right here so we use the pool address for wrap Etc the ABI the providers and now we're going to get all that information and what we're going to do is now that we have all the information we need to actually get the live spot price we're going to use ethers to calculate an amount in and then a quoted amount out and then format that and get our result so here we're putting in an input amount which will be what is uh the price of one BT one wrap BTC to eth and then we're going to also include the decimals for one route BTC so it can be formatted correctly as you can see here one wrap BTC has eight decimals while as one eighth has 18 decimals after it and that will impact what your result looks like after you've actually calculated it so we take in our amount in and then what we're going to do now is create this cons called quoted amount out and we're going to take in our tokens our fees the amount in that we're looking for and then zero is just a constant variable you put in there and then we're going to get an amount out that will be showing us the live spot price of this pool so you can console log your result here you get the price and then boom you run your code and you can see the live price of one rep BTC whether this is live today or not is that it can be swapped for 13.3 wrapped teeth and this is a simple way to just start getting used to the unit swap contract integrating with it and then start building on top of uniswap really seamlessly and easily the more you get familiar and comfortable with the abis the better you can get with doing more advanced things like liquidity providing creating different variable fees or working with fees and building more unique Solutions on top of uniswap with that I do want to go into our bounties that we're having for this hackathon so if it's your first time if you built on uniswap if you've got some kind of idea we have a wide variety of bounties for you to go after we have an ecosystem prize which is essentially any tools that you could build that are unique and help our ecosystem grow this could be expanding the realm in which uniswap even operates anything around decentralized social applications that are integrating unique tokens that you create in these experiences and then helping provide liquidity pools for people to trade on top of these tokens we have a whole governance Suite that's important to us and we we also help lead a lot of governance in the space so we're constantly looking for ways to improve the communication between delegates to improve the voting experience to work on different uh I think even different Chains would be exciting to see how they could help operate and expedite the voting process and again liquidity you're working with a ton of liquidity within uniswap I think there's lots of ample ways to use that liquidity that isn't that isn't being built right now that is very uh very relevant to this hackathon and I would love to see things like that built developer tooling things that will help developers build on top of uniswap we're looking at infrastructure we're looking at things that could help people understand lping understanding different analytics for helping strategies be developed and then we also have an open Innovation prize it's whatever goes anything that is the most exciting and Innovative project on top of uniswap can apply for this prize you're also welcome to apply for all three of them if you think your idea hits all three um but yeah uh that was our intro to uniswap a quick overview open for any questions if you guys have any yes sir yes yeah so he he the gentleman asked the question about uh using we showed how to just do one pool and pick the spot price of the pool but when you're using the actual application it shows you three or so different or it shows you the best route to the best price and then it routes it to the best price for you to execute the swap is that correct and how does it do that and is there an easy way to do that we do have documentation on how to do routes and it is within our SDK so if you go to uh docs.uniswap you'll be able to actually use our routing a swap documentation here and then it will show you how to do that and how to use uh the different tools we've built as well with like the permit2 router cool any other questions I saw a few hands up but sweet well maybe now you guys have time to go get the Rave tickets that this has finished early uh uh I it's a party here so that that's about as much as I know sweet thank you guys for your time hope you guys build on uniswap looking forward to it yeah these days yes yeah yeah we could do it awesome thank you thank you thank you [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] [Music] foreign [Music] foreign foreign [Music] [Music] [Music] [Music] foreign [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] thank you [Music] [Music] [Music] [Music] [Music] [Music] thank you [Music] [Music] [Music] [Music] foreign [Music] [Music] thank you foreign if you're here for air stack we'll be starting in two minutes thank you thank you foreign we'll get going on the air stack Workshop in a minute looks some people are still coming in [Music] [Music] [Music] thank you [Music] welcome everyone welcome all right there's a lot of people coming we're gonna we're gonna give another minute or two [Music] foreign [Music] folks if you can come on in we're gonna get started [Music] thank you [Music] all right let's get going uh hi everyone good afternoon hope everyone's doing well uh I'm Jason founder of airstack and I'm here with my colleague Rishi who's one of our senior developers um hope everyone's enjoying the hackathon thus far uh so I'm going to do a very short introduction to air stack and then Rishi is actually going to show you a demo app that we've built using our sdks and then talk through the apis um really quick for those who are unfamiliar at all with airstack web3 developer API platform that enables you to very easily integrate both on-chain and related off-chain data into your applications with airstack you can run a single query across chains so across both ethereum and polygon and also across dapps as well so we have an identity API that cuts across a forecaster lens ens and then also we have on the nft marketplace side Open Sea blur and wearable and you can query all of that in a single query and response using our apis you should if you have any questions we have a telegram chat that is very active with developers and we encourage everyone to ask questions in the telegram chat you can come up to us afterwards if you don't have access to the chat we have a team of 16 people working on airstack there's two of us here today the other 14 are all standing by answering questions as you have them if you go to airstack.xyz where I am now you can see you can access by launching the app you can go to the app homepage here and from here you can sign in and when you sign in you will get your API key it is entirely free we don't plan to charge for air stack for several several months now our focus is just on working with developers helping you build good use cases so it's entirely free just one thing I'll point out you'll get an API key provisioned when you sign in if you want to get a higher rate limit so all you need to do is go to manage your plan and request a rate limit increase and our team will receive it and it just asks you to explain why they need the rate limit increase and we'll give it to you don't worry we want you to build great applications so we have other plans that we can upgrade you to no problem and there will be no charge at all I promise you um last thing I just want to point out is if you go to the airstack app you've probably seen that we have the AI assistant um it's kind of like cheat codes in the end if you're a developer you're going to need to you know use the sdks or use the graphql your need or you know write access the apis directly the AI assistant is just you know like cheat codes a great way to help help you get started and to learn the product so you can you know write a query using the the AI and it'll create the graphql query and then it's a great way for you to learn the syntax so I'll just show you a quick example I can say you know show all nfts owned by betashop.e and if the images along with his web 3 social profiles and the AI assistant will create this query where am I missing the where's the actual you know what we're the actual explorers sorry no worries it's there though yeah there we go okay sorry so I can say you know show all nfts owned by Beta shop dot Eve and the nft images and his uh web3 socials just an example and the AI will generate the query so it's essentially the apis that we have are nft collection stats so stats about entity collections uh domains which is ens Marketplace stats um nft sale transactions all transactions happening on openc and blur on wearable socials is forecaster and lens token token balances or balances of a wallet nfts is you can look up a collection and see all the holders all the the metadata about the collection token transfers so the whole transfer history of an address as well as wallet which is everything related to that wallet so you see for the query that is did here it just created basically it opened up the graphql and it created the query one thing you note is the queries can be cross-chain and so this is all nfts owned by betashop which is which is on ethereum and then if the images and here I'll just run this and I can get the Json file here and you can then work with that and you can see we also have images as well that are resized you can ask for different sizes as well I'm going through this really fast because I want to get Richie up here the last thing to show you is the docs are very comprehensive if you go in the docs you'll see the SDK information about the API and then the reference has every detail about each of the apis that we have so you can see exactly what's in the apis and how to call them that was me in this four minutes give me a very high level air stack he's going to show you the real meat go ahead Rishi yeah thank you Jason so hi everyone I'm really excited to demo what we've done and great to see you all so the query with Jason ran we're kind of building a demo similar to that which uses like the underlying the same query on underneath and let me just open up how we're planning to make it look so it's going to be a single react page and how it's going to be is we're just going to enter a wallet address or any other identity it can be an ens name it can be a forecaster handle it can be an address as well and accordingly we'll get a prompt of all the images which are there as well as other data associated with it and alongside that you'll see that we have these buttons below uh next and previous so we support page nation in our apis and uh we'll be demoing how to integrate all of that so anyone can just plug and play so uh for the purposes of the hackathon and in general making developers life easier we thought that let's build an SDK and it's a react-based SDK that would allow users to just take these components take our react Hooks and just plug it into their application and get started right away focus more on the actual app and not how to plug air stack into your service so just quickly walk through how it looks and what are the different uh support available so you just need to run npm install or yarn whatever works for you and we have react hooks so we have uh query Hooks and pagination query hooks on a high level and query just involves running a single query and Page nation is the example which we showed where you may need to iterate over multiple pages of data because we have a limit you can just use these particular Hooks and get started and alongside that we have a lazy version of each query so you don't need to actively handle it like you can just use you can get the particular function and the from the hook and then you can just use that function in any of your handlers and alongside that we also have an asset component so just referencing back to our figma you can see that the nft images that we get they may be of different sizes and it's often difficult to resize and keep everything standard and you know it's a lot of effort to do it by yourself so we decided that you can just use our asset component and get started and everything will be resized the way you'd like it to be we have different sizes and I'll explain further as we get there so yeah uh let's get started I'll we have a demo app uh here it's on our GitHub and it's public I've already cloned it here so uh we can get started first thing I'd suggest is uh just npm install make sure that you have everything and uh now you can just import this uh from our SDK this init function we just need to pass the API key which Jason mentioned and uh this key would basically append itself throughout any API request as a header so you're good to go you don't need to manually add it anymore and I'll just show how we can get the key so let's go back to here you can just click view API keys and copy and you're good to go right so this is the first part done now let's look more into how the actual structure is coming for the reactor so we have as I mentioned like we had these Hooks and this is one of the hooks we're using uh lazy query with pagenation so this will ensure that you can just have a next and previous button and whenever you click it accordingly the page Nation will take place uh we have the hook here and these are how the variables look so just quickly explaining that get data is the actual underlying function which makes the API call and it updates these following four variables so data would be the actual API data and loading an error are just used for error handling and State Management and pagination is uh what we use actually underneath to implement the next and previous buttons and you can see like just using this single page nation is just reduced your code lines really fast like you don't really need to know underneath how we're using pagenation how the API uses cursors you just straight away do this and you're good to go and the argument we pass here is the query so this query here we can get it from the Explorer as well and you just need to use that query and you can build this straight up from the Explorer and you just need to paste it and we're good to go right so uh here we are basically destructing that pagenation variable and we have two Boolean variables and two functions and the Boolean variable is just used to denote whether we can Traverse in that direction or not and the next and previous page does the actual API call implementation here we have a submit Handler that takes the input from the text box here and be alongside that pass the limit and this limit is 50 for us right now so that's why we need to use pagination because you may have thousands of nfts and if you only return 50 at a time we needed a strategy to show everything so we went that way and now this is where the main header and the structure lies and basically from the data response where kind of showing like how the state would look like this is the actual list which comes and here is how we've implemented the next and previous button so you can see it's just have an on click pass the variable that we got from pagination and you can even disable or enable it using the states which were provided and we'll dive in now to how this token list looks like so yeah so here we're using the asset which I uh mentioned before and this asset basically we have uh air stack has all the assets on it so we're not querying externally for any for the data everything's with us so we made this asset component that you can directly plug in with our API and it's it's going to be very seamless we have a the chain uh which is needed like if you want polygon data by default we assume ethereum but if you'd like polygon data you just need to add that as a field the address and token ID of the nft you would require and um yeah we also have preset uh this is what I meant by the size so we've resized uh all these nft images based on uh some Dimensions which is there in our docs and you can just pass it here and everything would be uniform everything would be scaled and yeah I think we're good so let me run this right so you can start with italic.eat so now I just click submit one second oh I think oh let me try it sorry oh this always happens my Internet working okay yes sorry I entered the wrong API key so yeah here we can see um how the images are turning up they're all of the same size even though the original images might be of different sizes we can patronate go to the next page and you can see how it works and you can enter any thing here so we can enter standing out lens you can get lens related data as well you have a forecast ID you can pass that as well so yeah and all this data is available on hashtag yeah I think with this uh we're good with the demo so open to any questions anyone has [Applause] so we have times ask anything to be specific about your build or just overall questions about the API anything go ahead anyone all right um let us you know stop by if you have any questions directly and feel free to ask questions on our Telegram and uh thanks appreciate thank you thanks everyone [Applause] [Music] foreign [Music] [Music] [Music] thank you [Music] [Music] [Music] foreign [Music] [Music] [Music] thank you thank you [Music] thank you foreign [Music] [Music] [Music] thank you [Music] foreign [Music] foreign [Music] [Music] [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] [Music] thank you [Music] thank you [Music] hahaha [Music] [Music] [Music] relax [Music] [Music] [Music] foreign [Music] foreign [Music] foreign [Music] foreign [Music] [Music] foreign foreign [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] [Music] [Music] [Music] foreign [Music] thank you [Music] foreign [Music] foreign [Music] [Music] [Music] foreign [Music] thank you [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] [Music] [Music] [Music] thank you [Music] foreign [Music] foreign [Music] thank you [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] thank you [Music] [Music] foreign [Music] foreign [Music] thank you [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] [Music] [Music] [Music] thank you foreign [Music] [Music] [Music] thank you [Music] [Music] [Music] hello everyone uh thank you for coming and thank you for your patience my name is Herman Martinez you can find me at hermano on Twitter I work at safe and today we're gonna see a workshop about building with the safe course decay so safe course Decay has three words right save core SDK let's start with save save is a smart account protocol we are trying to define a smart account standard safe is used by a lot of dows and companies to manage their thresholds also by individuals lots of billions are stored there so you might be familiarized with it then we have SDK SDK is software development kit a set of tools that facilitate the development of applications and then we have core but what is core at safe we are one team but recently we split our focus into so now we have save core and we have safe wallet in one hand say wallet a is working on everything that is related with our official interfaces namely the website and the mobile applications and on the other hand we have safe core which is focused on infra and account abstraction also safecart is splitted in three different categories the first one is Safeguard protocol that is focused on everything that that happens in the smart contract level so development of the contracts audit audits processes Etc then we have Safeguard API working on the infra we have services that allow us to track safe transactions we also have support for different networks and so on and finally we have the safe course SDK or safe core account abstraction SDK and the team there is working on development developing tools that are focused on account abstraction and make the user experience better or more web to like so uh safe core account abstraction SDK as we are changing our Focus From The Vision where safe is just used by companies and dowels to manage their threshold their treasuries to personal use for individuals we are looking for Integrations that allow us to facilitate or to reduce the complexity that setting up smart accounts have for that we have some Integrations grouped in kids and these kids are these ones so we have four auth kit protocol kit on-ramp kit and relay kit so let's check each of them the off kit for the Earth kit uh it allows us our users to authenticate in-depth to uh from an email or a or a Social account to generate an NPC key that results in a eoa account so imagine in the context of a user that has no crypto no wallet no Wall Street Experience and they want to go to an application where is uh that is an nft Marketplace for example and they want to buy some men of these with the auth kit we would allow them to just log in with their email for example and get an account in this context we will use that account as a signer of a safe that we will deploy later for them kids can be implemented using different providers that are called packs for now we just have the West three hours back for this feature but uh in the future we probably implement more the protocol kit if you are familiar with the Safeco SDK which was available last year and the previous one safe Court the protocol kit uh allows to interact with a safe contract and services in an easy way so you can deploy saves you can propose transactions to the service sign them execute them build transactions Etc in this context of this user in this dot the protocol kit will allow us to craft or to create avat's transaction and this transaction would have multiple ones inside being the first one the deployment of a safe we can predict where the safe address what what the safe address will be because it is done in a deterministic way and as we saw before the the address generated by the auth kit will be the only signer for this safe of course the batch transaction will include all the other transactions that the user wants to make in this case buying this set of this after that because the user has no funds in his signer we need we need a non-ramp solution to pay for the fees and for the assets I know ramp kit will allow the user to buy crypto with Fiat money and also to fund their future safe which is not deployed yet with ERC 20 tokens for example let's say usdc so now the user is logged in has funded the future safe now we just need to execute the transaction for that very like it will help us for the on-ramp kit we have two implementations of it one it is with a stripe a stripe back and the other one is with monarium just let you know that a stripe solution is not production ready yet Underside but it works on test Networks and for the monarium pack we just release it this week and it would allow to connect an Ivan with your safe and to do an on-ramp receiving the electronic Euro they have so when the user wants to execute the transaction we need to use the relay kit and this we like it will execute the transaction so the save will be deployed in the predicted address so now the safe is funded the transactions will be executed with those funds and depending if the transaction is subsidized by the dab or not in case it is not the safe will pay directly the the relay maybe with ERC token or and if the transaction is is subsidized then the adap should have a gas tank where the relay could take the the gas fees from there further we like it we have implemented a solution with gelato relay so that is the pack we have and when transactions are subsidized by dubs we are using one balance service also by gelato so now here we have the four kids the implementation we currently have that will grow in the future and for the roadmap we also are thinking about uh in the coming quarters to implement a recovery kit that will allow to rotate the keys or establish in a recovery mechanism in case you lose some of them also a multi-chain kit that will allow to send transactions to different Networks and some others that we will see with time so uh vsdk you can find it on GitHub in the safe level organization in the safe core SDK repo and as you see there are different kits these ones the first two I didn't talk about before because are not account obstruction related but the first one the same course Decay types has some types that are uh that can be shared in the other kids and the API kit is a client that consumes the transaction service API so now it's time for the demo we have a demo application that the team has been working on the account abstraction demo UI you can find the code here in the freepo it is not a safe Global organization but our develop or our Organization for development stuff things that are not in production and the demo is available on netlify so as we see here we have a few networks we are going to be using Mumbai today and if we start the demo we see that in the menu there are three kids the off kit the on-prem kit and the relay kit so let's start by connecting or by logging in to this dot clicking in Connect now we see the web Trio widget we can log in with my new email sorry that is save list one a at maybe I will need help for this thank you Hotmail .com and we I would try sorry okay okay as you see I'm not a Mac User and I think now there's a new uh window I will need help to switch stops maybe no well uh not no problem I can continue no but uh it didn't pop up okay I tested this in my laptop and it worked no there's no no problem so here uh when you're logged in two different components are shown the first one is the address the account that is generated by what Rio and the other one is the predicted safe that was predicted using the the what's your address as a signer so here we can see a code snippet on how to initialize this so as you see uh we will need the word trios model pack this is our implementation of the auth kit with some parameters these are for example the model config where you can Define the addresses the the wallets you can support because you can log in with a social login or with an existing wallet and then some other [Music] some other objects to configure the the the the the pop-up you need a client ID if you are running this in your in your application and you can Define the chain configuration and some other parameters after that we will need to initialize the safe out kit with this specific pack and to sign in or sign out we can call the sign in and sign out methods also we can get the provider so now uh we can continue with the on-ramp kit and well you will not be able to see it here but you can try this application if you go to this domain and check it on your laptop uh 40 on ramp here we are using a stripe so we can initialize the on-ramp kit with this stripe pack and there you need to create a stripe account and provide your public key of the of your account and also you will be provide you will be given a private key we are using a very simple backend to store this private key and send the the requests from there using it so it is not exposed in the front end also the this small service you can run it locally and it is on GitHub as well after that with the safe on ramp we can open the widget and provide some parameters as well for example the wallet address the wallet that will be funded in this case it is the safe then the saves the networks that are supported also the currencies usdc for example and if you want to allow the users to uh change the destination of the on-ramp or not also some email for the kyc and you can subscribe to some events that will happen at the end the relay kit comes to play and again here you would see that the safe is not deployed and when using this gelato relay pack that we are initializing here we can call the method freely transaction passing the target the encoded transaction and the network we are using and the transaction would be executed remember that it was a batch transaction so the safe would be deployed the funds like now the assigner would have access to the funds and the relay would get the the funds from the safe or from the gas tank so that was the demo not my best one and we can continue with the hackathon bounties so the safe ecosystem Foundation has 10K app for grabs during this weekend and uh those funds will be distributed to the best hacks using safe core if you remember safe core included safe protocol safe SDK and safe API but at least one of the safe core SDK kits must be used to be eligible so these are the prices 2.5 k 2K 1.5 K and 1K for the best projects and then Forerunner apps of 750 dollars for each you can find the documentation here on Save on docs.save.global there are different sections if you want to learn safe core safe account abstraction SDK you will find the different kits with all the documentation on them all the details here also we have now some API references for the kids but you can see more details into the different methods that are available and we have a safe hackathon success guide that includes learning materials that can help you these days past workshops also winners of other editions so you can check them out some project ideas using safe modules transaction guards also safe apps if you want to get those resources you can scan this QR code and there you will find all the interesting links so thank you very much again [Applause] and now if you have any question I can try to answer them otherwise we will be here all the weekend we have the booth and we will be around sorry I cannot hear very well yes yes okay okay okay okay yeah here we had some issues as well yes yes we well foreign okay so we have a question regarding the on-ramp flow and where the the funds or the crypto that is bought is sent to yeah so uh with the protocol kit we can predict the address where a safe will be deployed before we can predict it we need designers list in this context we just have one the one generated by West Rio and for the on-ramp we can specify the address we can send the crypto so we are selecting there the safe address even if the safe is not deployed yet we know where it will be deployed so we send the funds first so when the relay executes the transaction it is a batch transaction the first transaction is the deployment of the safe and the other ones are transactions are safe transactions that were crafted before uh knowing that the safe was going to be there to buy the items so everything happens in a transaction the funds are already there the site is deployed the transactions are executed and the relay gets the transaction fees if that transaction fails for some reason the the [Music] the deployment of the safe is deterministic so the prediction will always be correct you can try again or try out of the batch transaction but the prediction is not related with a batch transaction but how the configuration of the safe is done in this case with assigner yes foreign so we have a question regarding where the keys of the MPC key is stored that really depends on the provider we are using so that will variety depending on the pack we use inside the the old kit for web 3 off there are three key shards and one is in the local storage the other is in in a network of nodes if I'm correct and the other one is related with the oauth um logging but there are other solutions that that are peer-to-peer and you can have multiple devices for example and just establish a connection between them to recover the key do we have another question uh sorry uh right now it is just a typoscript we did some work with polyrup polygraph for example allows to uh store some code logic in ipfs and using the wrappers to use this or to access this logic from their clients and if these clients are implemented in different languages then instantly you would have this same logic available for a bigger range of programming languages so far this is just using typescript yes so regarding support for the eip4337 I forget to mention a very important new we have and it is that the safe contracts version 1.4 have been released and are now available and I do support that EIP then if we have no more questions uh that was it from my side just remember that we will be at the booth this weekend and if you are participating in the hackathon good luck for everyone [Applause] [Music] [Music] thank you [Music] foreign [Music] foreign [Music] thank you [Music] [Music] foreign [Music] [Music] foreign [Music] foreign [Music] thank you thank you [Music] [Music] [Music] foreign [Music] [Music] [Music] foreign [Music] [Music] thank you hey let's start my name is kiril I'm one of the core developers at the ziki Bob protocol and so yeah let's talk about how you can integrate the K-pop privacy into your Devi block followers and everyday life so the challenge we are standing against at ziki Bob is the challenge of uh on chain privacy Financial privacy so the financial privacy is something that we all expect from the traditional finance and banking solution but when it comes to on-chain use cases that's typically liking a bit of behind because the current blockchain architectures do not support the native privacy and well using the financial infrastructure on the blockchain without any Financial privacy May pose a lot of risks to like to all the users basically and we believe also that this lack of privacy on the blockchain is one of the key reasons why we are like liking this Mass adoption and it prevents the future Mass adoption of the blockchain and how it can replace the financial infrastructure we have today in traditional Finance we are building free main products basically right now it's the Bob which is a multi-chain multicolateral stable token we have a bob CDP which is one of the ways how you can obtain Bob by using the over collateralization mechanism and the Ziggy Bob is this privacy application that you can use Bob and in future other tokens as well to use this cool and nice privacy features so yeah Bob is a decentralized multi-chain in capital efficient stable coin and it's very optimized for usage within the ziki ball application for achieving this level of privacy for begin Bob we are using this concept of concentrate stability for now and Bob CDP in the future and so the way it works currently is we are using highly concentrated unit swap V3 and other concentrated liquidity positions to achieve this hard one-to-one Peg with usdc and other stable coins and this way it allows you to make this swaps fourth and back between several coins and Bob with minimal fee swaps and minimal slippage so yeah now let's talk about the Ziggy pop and cool privacy features it offers to you so the Ziggy pop application is an application which preserves privacy for your use cases and allows you to make fast and easy payments in stable coins using uh sticky Pros basically users can perform different types of actions within the Privacy pool they can make completely Costless account obstructed deposits transfers within the Privacy pool and withdrawals back to their Public Accounts and all of this happens in a completely private Manner and so this way only the actual sender and the receiver of each particular operation is physically able to access and decrypt the data and metadata of each transaction so the cable product is currently available only for Bob tokens in polygon and optimism layer tools but with more chains and more tokens coming very soon to the to the product so that's how the UI looks from the brief so as I said you can make the deposits transfers within the pool and then back with travels to your public account yeah we'll see more about the UI applications in the demo time yeah so we are looking forward to multiple use cases with the city Bob application with main beam related to all sorts of peer-to-peer transfers between users anything related to payroll services and salary payments to employees regular employees and independent contractors we are looking how the C keyboard can help you to achieve this privacy within the Nations and different grants how it can help you to achieve private fundraising crowdfunding helping organizing different dial payments how it can be integrated with threadfy and all sorts of other useful possible use cases basically so one of the probably the largest use case for now related with CK Bop and the use case people are actually using it is for this actual salary payments so the way it works is that instead of paying salary is completely publicly from the closest safe multiple something like that where everyone can see your transaction history how much each employee receives and what do they do with this money after they receive their salary you can ask your employer or if you are an employer itself to use the CK Bop instead and basically the how it can work is that our employer Carl which has usdc budget for some monthly salary payments can swap it one to one with minimal fees using one of the taxes we support into Bob then gaslessly deposit Bob into the Privacy pool and then on the salary day easily make this multi-transfer completely private to all of his employees to transfer the salary on their private accounts and then once you as an employee receive your salary you can withdraw it back to your public wallet swap it to any other asset you want or continue using it within defy offram to the Fiat or do whatever you want and the cool thing about this is that everything that happens within the pool remains completely private so that no one has access to accept except of to you nobody knows really how much money you have how much you receive how much you spend what do you do with your own money and salary there are certain other features that the ziki Bob we are focusing our attention a lot one of them is the support for the mobile devices so we believe that the one of the crucial things about the Privacy for everyday transactions for people to actually start using it is also the mobile support so we are making sure that the snark Pros generation and the UI Works responsive enough fast enough and easy enough on the mobile devices in your web browser so that the ux can also be used on on the go from your mobile phone yeah we are looking how we can achieve the different cross chain integration and for that in the Ziggy Bob we don't know that the Privacy pool itself is only available on polygon and optimism layer tools you can also easily swap back and forth tokens on Multi between multiple chains and multiple tokens throughout our application uses in the school integration with the le5 widget yeah and the third important point I want to talk about is the compliance so basically compliance friendly privacy is what we call it at ziki Bob we believe that the only possible way for future and existing privacy solutions to evolve in the current and the crypto space and the compliance regulation is to find this balance the right balance and the compromise between the level of privacy you get by using similar privacy application and the level of compliance and the regulatory requirements you might you might want to fulfill and so at ziki Bob we are trying to build this and find the right balance between the compliance and the level of privacy and yeah so that users can still achieve the level of privacy they require without actually triggering any red flags from The Regulators or other authorities so we are using a complex approach to compliance in CK Bob right one of the building blocks for the compliance we're using is the screening for ML checks of each deposit and withdrawal addresses so that no like obviously malicious and the blacklisted sanctioned entities and accounts can access and make deposits of withdrawals from inside the pool and so that's something that already exists for a long time in the traditional finance and works well and we believe that poor on-chain Solutions and especially on chain privacy Solutions this also must be the case and so the Ziggy Bob should not be an exception and we should also follow this sanctions list and any red ml flags that our solution might raised so right now we are using the integration with the theorem labs for for this ml screening and ml checks so the way it works is then when Alice wants to transfer some funds privately to Bob so to make a deposit and then use it within the pool well all of your transactions with the pool and your interactions with the pool go through the centralized sequencer which are going to be dead centralized in the future and so once the sequencer receives this operation it performs a fast and efficient check with the pros Forest significant cross validation with the trm provider to make sure that your deposit address or your travel address does not violate any ml regulations forays any red flux and so if you're good to go then the sequencer proceeds and includes your transaction then submits it submits it to the pool contract and the third approach we are using to the compliance is called the optional kyc as we use so basically currently we are integrated with this opium kyc know your CAD solution provider so the way it works is that you can get verified on the Opium website and mint solvent nft on your wallet which has some specific traits for the ckpub application and then you're able to use this verified address from the Opium kyc to actually access the ziki Bob and use the extended deposit and withdrawal limits to your account and So currently the underlying kyc solution the Opium kyc is using for us is the binance Bob tokens which is also this separately issued solvent nfts by Bunnings basically if you have a kyc python binance chain binance exchange you can mean this binance pop token on your wallet and then proceed to the Opium kyc registration so now let's talk about the bounties we have for the hackathon so yeah one of the features we're asking you to integrate during the hackathon is another way of simpler making the deposits to the pool so basically it's a solution for achieving fast and easy private payment integration within partner products and other Solutions and the school feature is that it minimizes the required effort coding skills and the time for the integration to between Z K-pop in any other third party or open source wallet the app D5 based protocol and anything else and The crucial point in the direct deposit feature is that no CK snark proof generation is actually required from the user submitting this deposit which is different from all other operations which require the active participation from the user in this snack proof generation so the way it works is that any protocol smart contract open source wallet or any other tooling May connect to our simple direct deposit smart contract interface and call a few solidity functions to submit this deposit basically you just need to specify a specially included CK address of the receiver or your own if you're depositing Advanced to your own account and then after some time you also need to specify the deposit amount of course and then after some time the necessary SDK proofs and all other metadata will be generated for a batch of such deposits by the sequencer in a completed trustless Manner and submitted again to the pool contract for further purchasing and once the transaction from the sequencer is bind the receiver which is yourself your employee or somebody else you send your money to you can easily access these funds from the ziki pop pool and to see them in their UI so for this best use and the best integration of the zikipob direct deposits feature we have a pool of prices totaling of six thousand USD paid in pop tokens so the first place receive 3K 2K for the second price and 1K for the third place and so if you have any place in your protocol for payments in stable coins especially and you might you might want to make them a bit more private you can try to replace your payments infrastructure with the zikipob direct deposits feature and be eligible for best use of the Ziggy pop direct deposits Bounty and for everyone else we have this open track price pool basically for all hackathon projects that you're willing to spend five to ten minutes to get familiar with the ckpub application sign up and onboard on our website create SDK account generate your ZK address and then either you just can include your SDK address somewhere on your application for accepting donations so something like that near to ethereum or PTC addresses or you can just show us and share some feedback with the you got of using the ziki Bob application during the live sponsor judging session on the last day so just a few ideas yeah once time one more time I want to mention how you can integrate direct deposits and what you may build using that infrastructure that can be an integration with any open source wallets or other similar software and can be integrated with the tpe protocols like taxes breaches or their meta aggregators can be integrated with anything related to fundraising or donations payrolls or any other awesome ideas you might come up on yourself so it's now time for a short demo of the of the UI we have so yeah that's the screen we are seeing right after we plug in into the this keyboard UI now we want to log into our account so I will just start from scratch I will click that I already have a CK account I use the free wallet to sign up into the CK account choose the metamask uh interesting I'm going to sign a message to generate the entropy for my for my account wait some time until the account is loading all the history synchronized and after a few seconds I will see all the history of operation I performed on this account so yeah I'll see that my ZK balance is now 10 Bob which is then USD I have some balance on my public wallet yeah I performed a bunch of deposits transfers within the pool and with troubles I also did a couple of direct deposits to this account and yeah probably can just right now submit one more deposit from this address so we're gonna just go to the deposit tab select the amount you want to deposit let's say three Bob tokens click deposit so as I had before all the deposits are completely gustless so the only thing I need to sign is the token approval which is a pyramid format basically I signed this message then wait a few seconds on the desktop it takes like seven to eight seconds to generate a soundproof then this proof has been submitted to the sequencer we will gonna wait a few more seconds until the sequencer generates the snark proofs on his side and submits this transaction actually on chain then we'll see how this transaction is being processed by the polygon Network so as I said the pool itself is deployed on multiple chains so for now it's polygon and optimism you can easily switch between the networks in the UI so yeah we already see that free Bob already subtracted from our account now we'll have to wait a few more seconds until this popper actually accured in our CK account balance yeah it's completed now if you go on the history we'll see that 30 seconds ago we made this completely private deposit and now as for the direct deposits integration so the simplest way you can try to make a direct deposites from the polygons can UI or etherscan UI so we're gonna just go to the specials you keep up direct deposit contract select the direct deposit function and yeah basically as I said it just accepts a few arguments from your site you're gonna pass our public address here we're gonna pick an amount we want to deposit let's say we want to deposit five Bob tokens so we're gonna type in that and for the CK address we just need to specify the especially for my SDK address so in the UI we can generate this receiving address random receiving address by clicking the button in our account tab we're gonna copy that past it here remove this prefix and that's it you're gonna have to okay something is not working with the polygon Skype for polygon scan for some reason but yeah that's basically all is required from your site to submit the direct deposit from userscan UI and so it's even simpler than that to integrate it on the smart contract level within your protocol or any other user interface you're using so I guess that's it for the demo for most part yeah so a few helpful links to our website subscribe to our Twitter yeah we have a quite cool documentation pages regarding this hackathon and direct deposit functionality and if you have any questions please come by our sponsor Booth grab some mirror chess comes questions or contact us at the Discord Channel if you are not on site yeah thank you very much [Applause] I'm not sure if we have time for a short q a but uh yeah guys if you have yeah one or two questions yeah we can try to yeah so the question was what are deposit limits in the numbers so we have a theory system to limits so basically like the default tier limits to like a single deposit cannot exceed 10K Bob tokens about 10K USD basically then we have a same 10K limit for the daily operations you may deposit from a single wallet and like also the deposits and withdrawals are limited globally to the pool from all accounts all together also on a daily basis let's right now extending somewhere around 300K per day so of course list limits can be adjusted over time depending on how active the pool users are probably these limits would be increased and then so if you pass this opium kyc which is optional using the binance path tokens the limits are doubled for you and even if this is not sufficient and for example your large employer and you want to pay salaries to your employees with large amounts you want to make large deposits then there is also a like a special deal for such people so basically you just can contact us pass some internal kyc procedures with us and we'll waitlist to your address so that you can make deposits on a large amounts and to use them on salary payments for whatever amounts you want to have any other questions okay then I guess that's it thank you very much for attending this Workshop good luck with your bills [Music] [Music] thank you [Music] thank you [Music] [Music] [Music] [Music] come on [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] [Music] foreign [Music] so hello I'm draw I walk with the ethereum foundation on erc4337 account abstraction and this lecture is how what is account abstraction what we are abstracting what is it good for so it's going to be an overview and then some deep dive or an example of how to use trampoline which is a sample project for building on account of traction uh so first of all before we talk what we abstract let's think what is an account so we have an account account has an address this is the address you hold tokens and nfts and whatever it has an authentication mechanism you have your private key these 12 words that you copy all over to all the to the different wallet applications that you need to protect Etc once you create a transaction you execute a transaction that is send the transaction to some specific destination and of course you have to pay some gas to the network which is basically the security mechanism that makes sure that nobody sends too many transaction and try to perform a denial servers on the network and all of these is defined by the ethereum protocol this is the ethereum protocol for accounts so we come to abstract all of this so what we abstract and how uh the account the account becomes a contract so the address is the contract address the smart account address it keeps still the same address hold the token and everything you need the authentic communication the authentication mechanism is a we abstracted by it is a method on this contract there is a method we will see it later we called it a validate user user operation is our term for a transaction so the account is asked do you accept this transaction do you accept these signatures do you accept this what what you like this specific method you call it can decide what it accepted what not usually basically it's the signature but it can be more than that uh execution again it's a method it's a method called on the account the but it is fully abstracted in that it can decide not only what the method is named but also what it does yes it can execute on a target with the data but it can do other things it can do validation of the Target and the data if it likes it can do execute for batch like a single user operation that a can you please be quiet to move outside thank you so it can be a batch of multiple transactions if you like or a combination of both and then we abstract the the Gas payment each transaction or user operation has to pay for its execution but we abstract it to a contract it could be that the account itself pays for the user operation but it is possible to delegate it to an external contract we call this contract a pay Master it pays for all the transactions and it can decide what logic it performs to pay basic examples for that it can be sponsoring paymaster something that a contract that would like you to use this system without paying for gas someone else pays for it of course it could be a token paymaster that doesn't pay for itself but it takes your token and makes you pay the system with token and there are other options now all of these with erc4337 we've done without uh modifying the existing protocol so it is live on mainnet and many many other networks and test Networks what use cases we have for account obstruction this is a very short list and there are very many other examples a for authentication it can be as simple as a gaming with gaming you don't want to accept each transaction you make it's annoying you want maybe do it once so for gaming you could create with account obstruction we don't have it but you can create with account obstruction an account that supports session Keys you approve once and then a transaction that are targeted at specific contract at the specific time frame will be accepted automatically so you wouldn't care to have this key in your browser for example On The Other Extreme think of a corporate account a corporate account has the people who can say and out salaries the people who can send the amounts over a larger values or the legal department which is not allowed to make any transfer but allowed to vote on some doubt I don't know the contract can decide what it likes to do and again the system doesn't the account abstraction framework doesn't Define what your account do you the developer decide what features you want in your account this is what we abstract regarding payment I already described this to a scenario sponsoring for onboarding and pay with tokens other possibilities exist s in the recovery since the account is a verifying itself it means that it is no longer bound to a specific a private key or something so you could have some sophisticated recovery mechanism the first recovery mechanism the simplest one is a change key you know something you can't do you can't change a private key with account abstraction you could start you can start with the browser use your browser metamask like a key to protect it and later on after you gain some money you don't want to lose your address so okay you will change the key and now your signer will be I don't know Ledger it is the same account you didn't change the account uh if you take out your metamask on a metamask a normal metamask you take out the private key and put it into a ledger you didn't increase your security it was exposed it was written on some paper it is not secured anymore so you have to move assets to a different address with account obstruction you don't have to you can even change the implementation of your account you start with a simple account later on you want to switch to a glossy safe based account obstruction go ahead just fine there are many other examples we had a very long lecture back in Bogota and the others I there was also several hackathon projects some of which won prizes in the previous hackathons so you can look at them too okay let's dive a bit deeper what is account abstraction what the components we have the first layer are contracts the first component is our account is our account contract a smart account contract it's the contract that represents the account the next entity is the entry point since we didn't change the framework they didn't change the protocol we added a Singleton contract we call the entry point all the traffic go through heat through it and it runs the protocol runs the validation make sure that your account can't be gripped and can be nobody can perform any operation on your account without your permission and we'll see it in a moment and and the last transaction user operation may contain a paymaster a paymaster the contract that is willing to pay for this specific transaction a user operation user operation is the name we have for transaction you could name it a a transaction account abstraction transaction it is named user operation but basically it's a transaction different fields but it is a transaction a bundler a bundle is the component that put the transaction on chain if you think of a normal transaction you have the nodes or the block Builders or the miners the pending which take transaction and put them on chain with account abstraction we name this component the bundler because it bundles multiple user operation a there is some confusion about this component but basically it is a node it's just like a block Builder that supports account obstruction uh lastly we can see the mempool account abstraction or esc-4367 try to use the exact same model security model of ethereum and that is transaction go into a public mempool and then nodes pick them up to put them on chain in order to censorship resistant so we copy the same mechanism so we have a mempool obviously it's a mempool of user operation a lot of transactions let's see the life cycle of use operation how it goes and compare it with a noble transaction the green one with this is this is a wallet a software wallet I'm as a user you want to create a transaction it could be an Android device it can be a browser extension I don't care using wallet connect or whatever so it creates a user operation these are just few of the fields of it yeah 10 of them a little bit more than a normal transaction it creates a user operation a just like a normal Wallet create a transaction a and then after filling the user operation it sent them a into the mempool through an RPC node again just like normal transaction except that this is the user operation a bundler picks up user questions from dismant pool that he decides that are worthy enough for him they pay enough that he wants to put them on chain if you think of a block Builder a block builder takes a transaction and performs a very simple validation you check the signature he checks that it the user the nons is the next non-store including the balance is enough very very simple they check a bundler performs a view call into our entry point in order to validate the user operation before putting it on chain it performs a simulation of the transaction it calls the entry point a simulation function which in turn calls the two methods in the account itself it's called the validate user app which would revert if it is wrong the signature phase or some other fields are wrong and then it asks the paymaster again validate permacy user up do you agree to pay if there is a paymaster otherwise it is the account to pay this is the validation the transaction is okay now it's ready to put it on chain so it creates the execution phase it creates a transaction and put it on chain usually within a bundle of multiple user operation but it can be a bundle of one operation it calls the method called handle Ops Handler first perform the validation it's not enough to do it of chain of course it repeats the validation it validates indeed on chain that the account agreed that this is a valid transaction and payments agreed to paid and after validation it performed the execution it executes the user operation and gives the paymaster some time to do cleanup very useful if you are a token pain Master because during validation you charge the user for the max token needed and in the post-op you refund it with the access of the tokens you didn't use this way the user will have to pay and it can't get away without paying this is a flow transaction again this is basically repeating what I said about comparing a an account with an account of the eoa account in a counter section account secured instead of by protocol it's secured by code validates we can do whatever validation we like it's not only accept or reject a single transaction a memory pool quite similar for different entities and the block Builder instead of Performing this protocol specific code it it runs the validation code one level deeper I want to create an account I have to implement a method this is the only method I actually need to implement for an account which is defined by the protocol validate user operation I get as an input the user operation itself I get the hash of the user operation it's a hash of all the fields but since it used in the protocol there is no need for the account if it needs the sash to calculate it again so we pass it in and how much this user present the max possible cost of this user version how much the account needs to pay what the account has to do with it it has to validate that it's called from the entry point this is very important is about to send money to this address so you don't want to pay anyone it has to validate this user operation someone told me it's a misnomer it's not validate signature it's validate user operation you validate the entire user operation and finally it pays the amount it made this is the code of the base account accounts usually will inherit uh so that because usually it validate is the only function they need to operate uh if you looked at previous talks I gave there was also another check of the nons because we did let the past abstracted nonce and let each account do its own nonce management but we found out that it does cause problems to some actually nothing on chain it will cause problem to block explorers with in some other tools that might want to look at the blockchain so we decided to not less abstract the nonsense and nonsense are handled and managed by the entry point itself still the account has to manage a to validate its own signature this is the validation of this our sample simple account simple account is an accounted attempt to mimic an eoa it performs the same signature check so it used to say open Zeppelin to add the ethereum signed message prefix to the hash and validate that the signature is a valid over that one thing you notice that and it it returns an error in case of a signature failed it could revert but there are many reasons for a validation to fail like signature could be of a wrong length wrong type some other validations you would like to check here but for a signature validation check we add a return value the reason we added here against is a ux because the ux issue because you want to be able and I can't want to be able to uh to the estimate gas or to do a the equivalent of each call with the user operation and you don't want to be able to do it before signing so if you with if you would revert then some of the checks will not be able to be checked so what we did is that the account returns zero if everything is okay in return and error saying okay this signature is failed and during a gas estimation for example we ignore this signature check and of course on chain we check that the return value is valid zero and the execution uh this is again the execution of a simple account again it can only be called from an entry point obviously you want to make sure that execution is done only if you validate it and the entry point assures the account that only after calling validation it would call execution this way the account this is the only check it needs that the sender is the entry point and there's also the basic implementation of a batch and someone will say that the execute batch doesn't pass value and you can go ahead create your own execute batch this is not part of the protocol an account needs to have some execution method we don't mandate what they are the validation is the only thing that the protocol the of the with the end from Define you can put whatever method to call and you can call other methods like method in the account itself you don't have to go through execute and call your account if you can support other methods um sorry this is the logic of the account uh I'm now going into a pay Master what the payment says to do again the paymaster has his validation function the the base pay Master again wraps it just to make sure that it is called only from the entry point if there is a pay Master the payment will pay for the transaction the user who will be told you are paying zero you don't need to pay anything and the paymaster will pay as I said it will be called first to validate and after the operation is completed the payment is called again with the actual gas cost that was used it the actual name is the actual gas cost except the post-op we are unable to calculate how if you want to create a token paymaster and you want to pay for this post operation we are unable to estimate how much gas it will take a contract a paymaster has to have its own constant how much to charge for this post-op uh now I will go over a trampoline trampoline is a browser extension we created it inspired by Tallyho or by a he made a mask it is not based on their code and it is used to create a an account there are many several projects were already created the using this in previous hackathon uh and yes we would like to have to see projects that go with the account obstruction I'm sure that the first thing people want to say yes I will create an account but yes there are many of them try to think or even approach me with it try to something innovate something new not only create yet another account but add something on top of that there are many examples we can show as I said of what account can do we want to see something new but this is a template of how you can create an account so the account the trampoline is built first you have the account API it's a wrapper contract that it's a wrapper a JavaScript code we'll see around the API you need to implement a for your for your contract account and then the three UI components react component that they you can use one of them is the onboarding component that is called once when you create an account the other is a react component that is executed every time you do a crazy transaction and the third is a component when the account attempt to do a sign [Music] so um first of all okay I have an account API what is an account API this is the wrapper you you have to implement to create a contract and we created a simple account we created a simple account API which gives JavaScript functions for each of the [Music] JavaScript function in order for the account to be able to work with it the first function is a a get init code get init code is the Constructor code if you like that is called to create this a account it's a call to a contract and what data to pass to it usually this data contains the signer information to create this account this the factory contract is on chain and this is data to create it the second method is how to call the nons usually accounts have a get nones function the simple account has a get nonce function this is the JavaScript function to call it we need it of course to pull the field fill the fields in the next transaction and the third one is the encode execute as I said the execution method we call by default we use the name execute but again it's a default it's not defined by the protocol you can have a different method and when you work with the nurses save the a different signature everything is okay it doesn't have to be anything specific it should contain the target the call data and the gas if you like doing batching any kind if you like and lastly of course a sign it's the method that is called in order to sign the transaction which should pop up something to the user to sign or if you do it silently it can also be done boarding component is a react component with a single method react callback on board incomplete it returns some context I didn't show it before when you create this simple account it gets this onboarding context so onboarding can ask the user for some information and use it to create the account and when you send a transaction when the user calls send transaction then a we call the transaction component you display a the transaction and then call the it should call the uncomplete transaction which in turn called the simple account API to use that information to create a the user operation out of it now I want to show how it looks so okay first I have this extension here the this is the the trampoline a contract on GitHub I cloned it here now just I will start it actually it's already compiled I think I can load it from a previously compiled so I go into extension I need I need to disable metamask it doesn't work in poorly with the metamask this one I loaded earlier so I reload it I will go into this project the project compiles this is the trampoline projects are going to the build I reloaded as a component and now it will ask me to create an account this is a sample page we started and I create an account a if you like to encrypt the local data it's possible metamask does it and ask you for a password yes you can use it but if you create an account that saves all the private key elsewhere and then you don't need to I wanted to demonstrate I don't have it right here the web of them an implementation that use web authentication that is the authentication API inside the Chrome or on Android devices but I'm unable to demonstrate it right now sorry so this we created here you we pop up a customizable component whatever you want to put in front of it uh it created a simple account created the account by creating an account I mean it created a private key it's everything memory it created the The Constructor code how to call it and I have an address but it's not deployed and it doesn't have an eth so I will send from my own account some if to it why does it say fail that's new okay I'm sending some if to this account now if you you can click on a deploy and then it will in the escrow transfer fund soon it will notice that I transfer and filed it they can deploy contract uh but okay I find I don't want to deploy it I want to create a transaction directly with this account even before it is deployed um so here I open etherscan this is a nice contract a sample from open Zeppelin actually the old sample they have the greater sample and I will use it as an application I will connect my browser extension to it it says a metamask it meant it means whatever account you have deployed a it will pop up the the ux the connection weeks of our account okay now I'm connecting them can call this a set greeting function and they send a transaction again it pop-ups a dummy component the basic sample doesn't do anything in it so now it estimate the gas that it will take and we see the transaction that will be sent to the account if you want to this page again it's fully customizable in the code you can put whatever you like like custom Logic for paymaster if you add one I'm sending this transaction we wait a while a moment until the polio will agree to accept it I thought the polio is faster than girly okay we completed this our transaction if we look at it we see the transaction from an address it is some bundler a and it is sent to our entry point if you go to a greeter and look at its transaction of course we will not see anything we didn't call it directly it is called this as an internal function [Music] and our account if we now go to our account sorry if I look at my account now it is deployed it paid for its transaction and if I go to ethoscan I can see it the contract itself this is this is the contract code it is the it was deployed by this it it paid for its deployment deployed and executed on chain uh one thing I found some if you want to look at the transaction itself tenderly log is very nice and detailed to understand how transaction goes on chain why this transaction doesn't open I just think no this is not a strong transaction now this is deployment transaction it's not the great for samples this is our transaction the latest transaction that was submitted to the entry point uh here we can see the flow of the transaction we called a bundle of handelope we can see the method called the validations here it creates this it creates the center this is the code that runs the factory that creates the sender and the it calls the account validation this is the account called the entry point to pay for itself and the account called this the greeter function and change the greeting message even the the log inside it and finally the bundler that I paid for the transaction I get refunded eh okay this is the account now a yes building all this is not a sole project of us there are many where are they there are many projects that they did a lot of work to help the several bundlers out there right now I think this one is using candidate bundler or stack up I'm not sure the Alchemy also created the bundle severally companies created wallets or toolkits a like the third toolkit that can allow an application to deploy a accounts on chain create initial account to let an onboarding deployment so that you can deploy an account even before you install a wallet um okay so that's it if you have any questions I'll be able to answer if you have a question here if you want any help and you can contact me later yes the validation is the validate user let's say you want to create an account with a different signature scheme so instead of a or multi-sync you want to check two signatures so the place to check is the validate user the validate user app takes the signature field and decide that it's not a single signature it's two signatures to verify one very phase two this is what you do in a contract now in the ux you need to pop up the user whatever it needs to collect those two signatures and put them into the signature field when when okay when the ux asks you to sign you perform a different logic what it has to be done in order to send a transaction so you change the contract and you change the ux to match it uh okay I'll repeat the question you want to add the rule I don't want to be able to send more than 500 if from a usdc so uh what you what you need to do is they probably create a different execution method because you Pro okay in the execution method you can limit that you don't want to call the usdca account with a more with a value more than something usually this is not what you want you want to be able to to let the user decide I want to transfer this from the to limit this specific token for this specific value that so okay oh you have a logic on chain to do it so I'd create a method like a transfer a transfer with limits or something it checks the and it performs this let me check and during this is during execution validation will make first a check the what is the method that is called right now validation accept any method because every single one execute a validation can check that the method seek you are now calling is called limited if it's called limited validation to enforce this limit you're right it's a sample that is better to be added to a to the demo to write it a yeah we can talk afterwards it's something that a nice to be added into the presentation any more questions yes how the guys compared with a normal wallet and execution okay it's more expensive of course we are calling an account we're doing a gas calculation on chain a so roughly it's a 30 or 40 000 K gas of added the overhead on mainnet yes might say it is expensive and uh on side chains on a on l2s there are ways to get the guys a lower okay we're creating a bundle some of the overhead of accounts is split between a different user operation within the same bundle for example there is a 21 000 stipend that you have to pay this is for the entire bundle not for each user operation yes there is an overhead for each user operation uh if you compare it to AI if you compare it to eoa if you compare it to other smart contracts you might call okay let's say I'm calling ignosis safe it will be slightly cheaper yes we have an extra overhead it is not only a smart account it also has some overalls of gas and the goal with the eoc437 is not staying as a contract but at some point to be able to add it into the framework to add it into the network to enshrine it into the protocol to be part of the protocol one of the benefits then will be reduced gas costs reduce overheads because one of the use case again theoretical one it's not implemented yet is that on l2s there is a it's possible to a there is a gap between the how much you pay for CPU and how much you pay for call data most of the cost on l2s is for call data for putting the data on chain so idea if you could compress a bundle to put less data on chain even if it costs you more gas to process it still be beneficial so the most not cost effective most expensive component in a transaction that you can't compress is a signature because all the rest of the data you can compress but signature you can't you have 32 bytes that you can't compress if you are doing what is called Signature aggregation you can have a single signature for an entire batch and we did some calculation there's the BLS wallet who has done it not on top of account obstruction erc437 but they are planning to a edit support see Zach here so uh it will be able for turn while you use bundles larger than I don't know 5 10 you will actually reduce the gas cost when running on L2 the gas cost for the client so this is something that will be able to be done on a l2s okay enough okay thank you thank you very much [Applause] ah oh it's eight okay [Music] [Music] foreign 
or you can detox them towards the end and um prata and michael will be happy to get back to you uh as we're doing a live workshop prata i'll let you take it away and michael please introduce yourself hi i'm michael i'm ceo of pilla and you please introduce yourself hi i'm partha i work in pillar along with michael and today we will be talking to you about it the sport sdk before i do that where does it dispute come from if the sport is brought to you by pillar pillar is a project that has been going for nearly four years we were one of the early icos in 2017 we had a participation of around close to 9000 people and we are an open source software and with a foundation based in switzerland zug and we've also got an operating company most of the development has been done in london however we've got a decentralized team which is a global team everywhere you name the city we've got it so one of our ethos was to create a personalized a personal data local what we've called it basically to aggregate services and give people control over their data but what we have embarked on is we have created a wallet initially to be able to do that and with this wallet um it was released in 2018 and with that release we had it was a keyword key based wallet and it had close to over 50 000 downloads and we realized once we were going through the wallet infrastructure we realized and how hard it is from user feedback when you lose your keys when having spending limits etc within the world the key base well it was not dynamic enough hence we created a smart bullet smart contract-based bullet and that was a very good invention a very good approach for us however when we did this the price the the gas price was so low it was about too great then suddenly went to the moon now the proposition of having a smart bullet become became question why did we go there and even worse why did we deprecate our keyboard and go with the smart wallet which is becoming a barrier to adoption then when we were grappling with this we started looking into scaling solutions so in collaboration with the development team called the bridge we create we started working on a specialized state channel which is a payment channel to be implemented within the pillar ecosystem and we call it ppn pillar payment network now with this um stage state channel approach one has pillar wallet and all they have to do is they send another person with a pillar wallet through our payment channel without paying any gas gas piece but with this again only the two people or individuals that were on the pillar wallet can do that and it was a hub and spock system where they do not need to have a state channel per every individual they dealt with again we found shortcomings with this this taking side and the fact that people were limited to our um wallet only and also things such as when we were doing the state channel there were limits as to how many transactions we can batch how often does one have to cash out or to commit to the mainnet in order to be able to uh to make use of the state channel that we have created so it was limitations but it was a learning curve for us so while this was going on both with the key wallet and the smart wallet we were creating bringing services um throughout the the ethereum ecosystem what i mean by that is we had what we called an office engine what it meant was if say for instance someone wanted to exchange a specific token we go and hit older centralized and decentralized exchange that we have uh we interfaced with and bring the offers to the people so we had all the d5 players on the exchange quite a lot of the players within the eco the ethereum ecosystem were integrated with our office engine again this was a main net and we also then at this point started looking at how to involve those people that contributed to our project in terms of being able to make decisions so we came up with one approaches creating a down where the community can govern not only a world of pillar talkers in this case 100 million pillar tokens but at the same time they can make decisions on which features that they would like to be implemented from the project perspective we saw this an opportunity to get viable market feedback as well in terms of the way we approached the development so with all these experiences we put together in terms of the scaling engaging with the users etc we created ethersport which is a smart contract based approach where not only is it used in our wallet but it can be offered as a service infrastructure as a service the blockchain space whereby other projects dabs other wallet providers can take advantage of all the infrastructure we have created using smart wallet technologies so that they can use it as a building block to have an easier seamless user experience that they want to be in but instead of me taking giving you the business side the rationale for it part of our head of technologies we'll delve into more details and give you the explanation please take it away path up thanks michael so uh to elaborate on what michael was saying earlier what are the current challenges uh users or apps face at the moment when there are several evm or ethereum compatible chains available user onboarding on a side chain is a real pain um to give you an example uh let's say uh there are several i mean kickback is one uh site which probably you would have been familiar with where it lets you i mean register yourself for an event and stake some uh funds to attend the event and you get back funds in case you uh attend it or um and if you haven't attended the amount you've staked uh goes is evenly distributed among other participants and then you have a very popular say exchange on egg style like honey swap now let's assume i'm accessing honey swap from the browser i use metamask and right now my metamask is on uh ethereum mainnet i um so if i were to connect to this website using connect wallet i choose metamask it says that i'm not connected to the appropriate network now ideally we cannot expect a user to have a configuration for any of the side chains on metamask before defined so what you would expect the user to do they would have to go customize add a custom rpc add an entry for xti choose the network i mean rpc url chain id etc etc etc now all of these are barriers to uh a user to onboard um to web3 now once we do that i uh once i have done all these and then i have to choose the x type chain after i do that i uh the connection works and then i can proceed uh with whatever now it doesn't stop with this uh most of my funds are are on mainnet and uh if i need to use this app on xdi i would need die to be available on x-style right so what i do i have to use any of their the open source bridges available or i could use to transfer uh funds from uh mainnet to die wait for it to complete and then uh i could start interacting with the gap so there you have it you have several such uh onboarding panes so user on boarding to side chains is a real pain and then you i would need to select and insert custom rpc which i was explaining earlier and you would have a scenario where the address that you used to interact with the dap would be different across different chains for example say you have uh you're interacting on binance smart chain you might have a wallet on binance uh which might be different to a wallet address that you use in metamask uh now how would you ensure that the funds i mean uh the overhead there when you transfer funds from one wallet address to another on a different chain uh you would have to ensure that you have the addresses uh correctly otherwise you might end up losing funds there as well uh the other uh aspect or other pain with the current approach as such is you'd have to manually switch back and forth between ethereum mainnet and your sidechain and as i was describing earlier you would also have to move your assets from your main net to the side chain or vice versa and uh one of the main barriers that we see at the moment is high very high deployment costs uh as michael was explaining earlier when we built the smart wallet solution back in 2020 uh the gas price uh to deploy a contract was probably around two gui and then somewhere uh down the year it shot up to probably 200 300 degree and um the exchange rate of ethereum shot up as well so uh it was becoming totally unfeasible for anyone to use smart wallets as such who would want to spend say 68 or 80 to deploy a smart wallet um when that is another barrier and that would stop people from using um smart wallets as such so this is when we came up with either spot so what is ethyl swap etherspot is a framework that works with any evm compatible chain we provide you with a set of smart control [Music] packs and services that we expose via an sdk all of our contracts have been audited by consensus diligence uh our sdk easily helps you onboard users to any evm compatible chain so at the moment a moment we support polygon finance smart chain phantom x die uh we are adding support for avalanche as we speak and for that matter if your uh network is evm compatible you can use etherspot sdk to interact with this particular chain right um etherspot also provides you the ability to create a direct state channel bridges and which provides dapps a seamless ability to transfer funds from one network to another so adapt can leverage ether spots direct exchange state channel bridges and achieve this themselves and uh you wouldn't need any point of time um to manually switch networks etherspot automatically handles this uh it also uh the sdk also is available with several helper functions like you could generate transactions you could read transactions read your balances across different chains it also provides you with the ability to create p2p bridges similar to or an extension or an improvement of the pillar payment network that michael was describing earlier and there are other utility functions available as well now why ethersport how how is this different so uh for this i would uh need to explain to you uh how we strictly interpret the meta transaction pattern i mean uh those of you who worked with meta transactions are uh would have uh would know what meta transaction patterns are so in order to explain uh so if i when i were when i was connecting to this particular wallet they're two tr they had two transactions involved right so um i uh first i sign into this particular website using my metamask and when i perform a particular transaction uh the transaction gets propagated to the blockchain using the same wallet address now what we have achieved with metamask is we have segregated this or separated this to two separate things so the signer wallet is not the same wallet that trans transmits or broadcasts uh the transaction to the blockchain because we have strictly followed this pattern you could abstract the rpc endpoint the wallet is interacting with or to broad propagating the transaction to so with this what we do uh is that you are required um to sign a particular message the first time using your particular wallet it could be through meta mask if you could connect it through wallet connect or any other signing feature and the actual transaction is broadcasted in internally by the etherspot sdk to the appropriate chain so because we have split this uh separate uh into two separate uh aspects uh we are able to abstract the the need to switch networks manually uh so you bet you achieve better user experience um the other aspect of ethersport is that we use uh create2 to counter factually generate addresses and these addresses are the same across different chain so because we do this you could receive assets on different chains without the wallet being deployed itself so um let me explain so the other uh to explain on the wallet not being deployed i'll i'll revisit that later uh one major aspect that we're really proud of at uh in pillar is we've significantly reduced the deployment cost of for us smart wallets you would have come across different uh smart wallets that are already available each have their own approach uh to the deployment and the way their contracts are modularized or built uh our approach is slightly different here and uh we have a an account registry contract that does majority of the bulk of the work the actual smart wallet that we deploy has only one um function a solidity function which is execute contract um execute transaction majority of our work is handled by the account registry which we deploy uh on each of the supported chains as a result of which we have significantly reduced the actual deployment cost of our wallets so i could tell you that uh we uh the amount of gas units that we spend for deploying a smart wallet is around 450 000 um which has reduced the amount of gas fees with transactions and uh the other uh main aspect that we provide within etherspot is we allow you to batch transactions now um if you had interacted with any uh decentralized exchange uh you would notice that you there's always a need to perform two separate transactions right first you would have to say uh supposing i'm changing uh i'm exchanging eth to die or say die to usdc first i would need to perform an approved transaction and once that approved transaction goes through i then have to do the actual transfer now what ethersport lets you do is you could batch all of these transactions all of these steps and execute them as the single step so this facility is provided you by eat spot so this greatly improves your user experience when you use either spot so you could approve achieve um so for let's take an example you could probably uh take out a flash loan um then use that flash loan amount to say exchange one token to another token through an approve function and then do the actual transfer and uh pocket uh your profits and then pay out the transfer um payout for the fees for the flash loan and all of these you could also include that with the actual smart wallet deployment so if you know uh if you remember earlier i was referring to uh the actual deployment of a smart wallet uh when we built uh our original uh smart wallet platform uh we were forcing users to deploy their wallet initially before uh they could interact with it right now what we've done is we've pushed this to the or delete this uh to the very last moment uh you can continue to use your wallet addresses across different networks to receive funds but your actual wallet smart wallet is deployed only when you only when you perform a transaction on that particular chain so because we have uh delayed this deployment to the very last moment we've achieved a better user experience with this aspect so this slide gives you a link to various resources that you would need to perform your hacks during this hackathon we have provided you link to our ethos github address you have the npm package available uh we've also provided you with uh several sdk example codes that you could use um i'll link to our heatherspot website and we also have a playground which you could use to play around with various features that we have i'll probably show you an example of how to use this as well and we also have provided you with a link to our um i mean our audit report by consensus diligence um right so uh let me show you probably a couple of examples of uh how uh a code works uh is my uh thing viewable probably i'll increase it in case you have difficulty hopefully yeah so i uh all of this code is available on github the links have been provided in our discord channel as well but i'm just giving you a demonstration of how it works so uh in order to use the etherspot sdk you would need to add it to your package.json and then you initialize the sdk with a private key uh here we are using a clicky function that generates a random private key but you could inject your metamask wallet or uh wallet connect provider or you could hard code your um private key here as well and then uh this tells you that we are currently connecting to test net and uh you could choose the correct network you're connecting to so you programmatically do that right now we have support for all the networks you have so you have support for bse the test network of bina binance phantom um several of ethereum test nets uh then you have support for polygon and matec yeah so you also have support for x-tie and so-called so all these so i i right now i choose coven um and then i uh this code demonstrates so when after i initialize the sdk if i were to say called sync account this creates the counter factual address and then reports you what would be the address a smart wallet address corresponding to mine so if i were to say npm run one create wallet so this gives me the smart wallet address name associated to uh my uh and this is what uh you would be uh would be using in order to perform your transactions so there are code examples available to um how do how do you batch transactions this is an example of a code that tells you how to transfer each or the native currency uh that you're using so if you if i were to say change that to mumbai i would be using matic uh if right now with because it's on koan you're using uh eat and then other examples of how you go about transferring tokens as well uh you could take a look at our example code basis that i've shared in the link and go through there um and the other aspect of his referring to was your uh the spot playground uh this is a website that you could use you can access it by going to try.ethersport.dev uh the very first thing it lets you initialize your sdk so you have uh several different options that you could choose to initialize your sdk so as i was explaining earlier in the code uh you could initialize it with a private key or if say you want to initialize it based on a keyboard key wallet provider or injected by a meta mask you choose metamask here and if you notice down it tells you the code that you need to add in order to use metamask so uh ether spot bytes um itself uh wraps several of these uh providers so you could just reuse them in order to create um this so this uh would uh if i were to just say create sdk and execute run so there is an sdk already created so it's not letting me go so let if i were to come back here so i choose uh metamask yeah and that generates the code i could choose which network i would need to connect to or you could uh let it auto detect auto detect would automatically detect the network based on which uh network metamask is currently connected to yeah and then i click on run this would by automatically generate a wallet address for me and you would be able to view the um the wallet address i mean because i have on so if i were to say go into accounts then sync account so i'm i'm i'm generating uh the account by a key wallet provider and then you can view the balance that you have available here and then you go into uh you can try out different uh functions here available in order to run so if i run sync account it would generate uh the smart wallet address corresponding to my key based wallet and uh it would generate uh show you that so compute contract account generates the computer the contract account address corresponding to my key based wallet address so if you see these two addresses are different this is the key based address that you use to interact with your smart wallet and this happens to be the actual smart wallet that you use um ethersport sdk provides you with two separate uh smart wallet addresses one is to perform your regular transactions on different side chains and it also provides you with a separate uh wallet address that you could use for our p2p solution that we've developed uh this p2p solution also comes up provides you with an ability to create cross-chain bridges so if you want to transfer your tokens from say ethereum mainnet to x-tie or polygon using our cross chain bridge you would uh first have to transfer your uh funds to this p2p payment address and from here you create a hub and transfer those to the corresponding uh chain id you want to proceed with so uh yeah a piece fee to play around with this you have other utility functions that help you to search for different token list you could check whether a token is available or as part of a particular token list we also have enos support and then yeah we provide you with transaction history associated to an address so yeah it's pretty much all in one sdk that you could use for all of your uh functions um yeah uh going back to uh now coming to the hackathon um for this particular price uh we have uh the first price for anyone who uses i mean a good solution that builds using etherspot sdk is 3000 usd which is split equally 1500 usdc and 1500 worth pillar tokens uh second price 2000 usd again spread equally between usdc and pillar tokens the third price would uh win um 1000 usd 500 each and we have also contributed thousand dollars worth of pillar tokens uh to be shared amongst all participants who are building using the etherspot sdk finally etherspot helps you reduce cost increase speed and simple user experience uh thanks are there any questions as such so thank you so much well someone is asking if you can do a demo migrating tokens from one chain to the other to another you have two minutes left uh i'm afraid that would take a bit longer so what i could do is i will post you a link of our poc that we have created uh in our discord channel and uh with along with the source code which you could uh use to uh to uh get that done awesome yeah any uh short question welcome uh otherwise yeah feel free everyone to join the discord channel for pillar they will be there during the hackathon especially after this workshop i'm sure they'll hop over to see if you guys have more questions and want to chat there um that's really the place to connect with the pilot team thank you everyone and we look forward to connecting with you in the coming events and hopefully you will find it useful what we are producing here thank you someone is asking from youtube if you guys have a diagram any diagrams i'm not sure all of the diagrams are available on our etherspot website as well as our github links feel free to explore there and all of them are available for you to view wonderful thank you so much uh thank you thank you michael um on this note we'll wrap it up we'll see you on discord and uh thank you everybody for joining for joining thanks bye-bye 
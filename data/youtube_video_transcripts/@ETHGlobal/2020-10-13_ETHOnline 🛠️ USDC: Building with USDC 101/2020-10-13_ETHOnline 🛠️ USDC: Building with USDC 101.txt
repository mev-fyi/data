we have pete from coinbase who's going to give us a talk uh titled usdc building with usdc 101 excited for this take it away pete uh welcome everyone uh thanks for joining today i'm going to talk about how you can build with usc usd coin also more commonly known as uscc so uh what is usd coin well i would say it is the most trusted fiat-backed stablecoin available on ethereum today so what does it mean by fiat-backed well it means that each and every uscc token minted at ethereum is backed by a real us dollar we keep safely in the bank and it's fully audited by one of the largest accounting firms so and the audit reports are publicly available in the url shown below so each uscc is equivalent to one dollar so who is behind this uh uscc is brought to you by center consortium of which the two most uh of which the two most trusted crypto brands in the us coinbase and circle are the founding members uscc was first launched in october of 2018 and we've been growing exponentially ever since we exceeded 100 million dollars in market cap in december of 2018 just two months after the launch 500 million dollars in december of 2019 1 billion in july of 2020 2 billion in september and we are now fast approaching 3 billion thanks to all of you the growth is uh is largely attributable to the explosive growth of d5 these are some of the most popular d5 applications out there that utilize uscc compound and off where you can borrow and lend crypto and earn an interest curve where you can swap stable coins with minimal slippage urine that helps you yield farm very easily and balancer where you can have automatically rebalanced portfolio of assets and and some of those uh the company companies mentioned are also sponsors and i think they're also sponsoring hackathon prices for east online for this hackathon we are sponsoring a total of eight thousand dollars worth of uscc in prizes i would especially love to see the use of meta transactions and the use of layer 2 scaling solutions but those aren't required check out the prices page for more information and additional resources so let's learn about how you can integrate with uscc smart contract on ethereum we first of all we recommend the user goalie test net for development to make it easy for you to obtain uscc tokens on the goli test net we created a faucet contract you have to call the claim function in the contract to claim 100 usc uh which you can do every hour and you can do that very easily in either scan so uh navigate to the contract page on either scan by entering that contract address you see over there which you can find in the uh the prizes page as well under additional resources section and then you can click on contract click on write contract and you're going to find a claim function there you know if you click on the the right button that would call the function and you'll get your 100 uscc but you can only do it once every hour and this is a contract address on the mainnet unfortunately there is no faucet on the mainnet for obvious reasons but you can buy uscc on coinbase or on other exchanges including decentralized ones such as unit swap usac is for the most part a standard erc20 token but it also includes some extra features such as eip-29612 which is also known as permit and efp3009 which is called transfer with authorization which we'll talk about uh later and those are used for meta transactions which lets you send uscc without requiring eth one thing that's uh peculiar let's say about uscc when compared to other erc20 tokens is that it has six decimal places as opposed to 18 used by eth and most other tokens the smallest unit is called a micro dollar which is uh 10 to the power of negative six uh and not way which is 10 to the power of negative 18. why is it six um you know we it we kind of regret uh having it be six instead of 18 but you know we we knew that uscc is going to be on multiple blockchains and indeed we are currently adding support for new teams uh and six was chosen because when uscc was first being developed 6 was the lowest common denominator among the most popular chains out there so i'm sorry that it's it's 6 and not 18 which is another thing that you have to remember when using uscc but please blame xrp for that um to use uscc with your dap you're going to need you're going to first need the api json if you've opened uscc page on interscan before you might have noticed that you see a proxy contract but not a token contract and that's because we wanted to make uscc upgradeable using the delegate call upgrade pattern and we actually upgraded uscc before to v2 a few months ago to add support for meta transactions and it went really well uh and only in ethereum i think you can um upgrade an asset uh i think at that time we had 2 billion market cap a 2 billion market cap asset without downtime with zero down time uh and that was really cool um anyways if you want to see the actual underlying implementation contract you can click on the uh read proxy read ask proxy button on either scan it will reveal the actual implementation contract address and when you go to the contract the implementation contract you'll be able to see the source code for uscc as well as the api json i think i saw some questions come in uh was there a question we have fox raymond who's asked do you have a faucet on matic mumbai testnet uh yes we do um i'll show you uh how you can get your cc tokens on on automatic mumbai testnet okay um yeah so this is how you would uh get to the actual implementation contract and see the avr json once you have the abi json you can instantiate a contract object with web to js or ethersjs as shown in the slide uh so uh the api here i you know put dot dot but this is where you would paste the this data in there and this would be the contract address and that depends on which network you're on and once you have that you can instantiate the uh the web3 object or ethers signal objects and the uscc contract object which is then used to call all of the the methods on uscc contracts with the uscc object instantiated you can begin calling the methods on the usccp contract so let's take a look at some basic operations to check the current uscc balance of an address you can use the balance off method and this is the same in all other us erc20 tokens so you can reuse the things that you learn in this session for other usc 20 tokens including dye which is another popular stable coin and many others so balance off call method can be called in web3 this way so you have the uscc object that you instantiated earlier so you do dot methods and dot balance off and then the account is the the account you want to query and then dot call to actually make the call uh and either it's a little bit simpler just do usc that balance off and then the address and uh the the balance return by the bounce off method uh is in microdollar in other words it has uh six zeros at the end uh so if you want to display dollar amounts you'll have to do a conversion uh and you can do that using web3 by calling but through the utils uh from way method with megaway uh as the second argument make a way just means six zeroes at the end or in ethers you can use the format units method with six as a second argument and this will convert the micro dollar amount to a dollar amount so instead of uh for example uh 3.5 million micro dollar you can have 3.50 cents to transfer tokens you use the transfer method and two arguments to this method the first argument is the the recipient's address and the second argument is the the amount that you want to transfer and again this is in micro dollar amount so um you can you'll have to convert from dollar amount to the micro dollar amount by calling the two-way method on web3 or the parse units method in in ether.js and once you have that micro dollar amount you can just call transfer method with the two arguments to end value and it's very similar for interstates as well so checking the balance and transferring tokens from one to another was really easy but what about more complex use cases say you want to make a smart contract that accepts uscc and perform some action with the uscc received so this is your smart contract and you want users to send their uscc and you're going to do something with it something really cool i guess and i don't know profit right now intuitively you might think that you can use a transfer method we talked about earlier to send money to the smart contract however the transfer method will actually just update the smart contracts uscc balance but not execute any code that you have on your smart contract and that's because transfer method doesn't have a callback mechanism there are some other token standards like erc 777 that aims at that callback functionality but erc 777 hasn't been able to gain much traction and uscc is also a standard erc20 token so uh this is not going to work um you could uh you know after making a transfer call you could also make another transaction to call a function on your smart contract to execute the custom code you have on there but smart contract will not actually be able to determine accurately who sent how much so that's not how you should do it so what do we do um the established pattern with erc20 tokens is to first ask the user to allow your smart contract to pull to pull funds from their account using the approve method and in your smart contract function you can then call the uh transfer from method on uscc to actually pull the funds and then do things with it and this is typically called the approved transfer from pattern or the allowance pattern uh so in the deposit function you'll be calling transfer from inside and that can be called once user has already given the approval or the allowance one thing to note is that allowance once it's uh once it's given to the smart contract and the smart contract actually calls ds transfer from it actually gets used up so uh you'll have to call a proof again uh if it's depleted to zero uh there is a there's an anti-pattern but uh nevertheless something that's really popular is to ask the user to excuse me grant permission for a really high number such as the maximum unsigned integer which is essentially unlimited so that the application doesn't have to ask for permission ever again which can get expensive at times because guest prices can be really high sometimes and you know almost every d5 app actually does that but the downside is that the user will have to then trust the application or the smart contract not to do not to pull funds beyond what it what it needs because you are basically giving the smart contract [Music] a perpetual permission to pull funds from your account anytime in the future uh but uh because the uh the approve call is a transaction and it requires guess a lot of dapps just ask for you know the permission to spend unlimited amount of funds in your account and that's unfortunate but that's one deficiency of of the usc 20 spec this is a dialogue that that is shown to the user when the approve method is called um if you've used d5 apps before this must be very familiar to you like this is the first thing that you have to do before you can actually deposit or do anything on most d5 apps not just c5x but other apps that require you to send tokens once the allowance is granted by the user a second transactions a second transaction can then be made to call the function uh that you have on your smart contract they will pull the funds from the user's account and then you can then do things with it so here you can see uh this is a erc 20 interface that you can you can find this using open zeppelin um so this can be used to interact with any efc20 token you give it the uscc contract address and then you can call the transfer from function on uscc to send money from to pull funds from the user's account to the contract itself and once that's successful you can do things with it this is solidity code by the way so this is uh this is what you would add in your smart contract uh now let's talk about uh meta transactions that was added to uscc in v2 so every transaction on ethereum including uscc transactions require eth for gas this isn't very good ux because this means the user needs to have both eth and uscc to be able to transfer uscc but it's a very strange concept right like if you say you know go to you are visiting europe or something and you're paying for things in euro if they ask you uh okay you can pay for this in europe but uh the tax you're gonna have to pay for that in usd like if they do that that's gonna be super weird um so this is not very good uh ux um if you want to build something like uh like a mobile app that's kind of like a crypto version of vemmo that works globally and maybe you wanna use uscc because uscc is stable and and doesn't fluctuate in value as much as uh you know other currencies like bitcoin or ethereum and uh you know if you're building that app and if the user has to own both eth and uscc to be able to use that app that exclusively deals with uscc again that's going to be very you know poor user experience um so uh so a meta transaction technology can be used to actually get around that it doesn't actually eliminate the the payment of gas but it allows you to it allows the user to delegate the payment of gas to somebody else and that could be the uh the app itself the provider of the app itself that could be the wallet app you know or it could be it could really be anybody uh so better transactions solve this problem by uh letting the user authorize an action so in this example you know alice has uh transfer you know authorizing transfer of 10 usc to charlie not pictured here and in addition to that maybe pay bob who is a real layer who will be paying gas on behalf want uscc to compensate bob for uh spending uh his eth to pay for gas so that's the uh the the instruction and then alice can sign it cryptographically with her private key and that can then be sent to the relayer in this case bob and bob can then submit that transaction to ethereum network and pay for gas for alice and that eliminates basically the need for alice to also own eve in addition to usdc to be able to transact in uscc and as you can see here it's also allowing us to pay for transaction fee in uscc as opposed to ethe so uscc allows two different types of meta transactions one is eip2612 permit in another is eip30.9 transfer for the authorization the eip 2612 permit is is a basically a meta transaction version of vrc20 approved function that you saw you saw earlier as you can see the approve function has the spender and value but no owner right because the owner is actually implicitly given because the center of this transaction the caller of this function basically is the owner but with permit which is a meta transaction version you have to specify owner because this permit call will be made by somebody else you know uh in the previous previous example it would be bob um now uh if it's called by bob then how do you know that you know the owner actually wants this to happen allow this you know for this to happen right and uh that's done by verifying the signature so the the owner will have to basically um hash all of this information and then sign it with their private key and the v r and s are actually the components to the signature that you have to submit to prove that you know the owner of the tokens actually allowed you know authorize this for for this to happen um permit also introduces something called nuns which you'll have to also sign along with the rest of the parameters and that is used to ensure that this action can only be processed by the blockchain once and can't be reused again and ep 2612 and also ep30.9 which we'll see later um both use eip 712 its sign type data spec to request a human readable signature request and also to prevent replay attacks please note that there have been multiple revisions to the spec and you should be using either v3 or v4 and this is how the signature request would look like making a signature request with eip 712 is a little bit complicated but this is how you would do it first you need to prepare the data you need for example a chain id the name which is the name of token uh in on the main net you'll be usd coin on on the test net it would be gold usc coin for example uh and those are used as part of the eip 712 domain which actually makes the replay attack not possible so that's there just to ensure that this the signature that's generated will be valid only for usc coin running on this specific chain uh whether it's a goalie test net or mainnet or broadstand or renkobe or whatever that might be um and then you have to prepare the data the parameters for the the the approve call which is the sender and the amount that you want to prove or allow the other contract or the spender to pull from your account and the nonce which is which is a sequential number and you can call you can call the nonsense function to get the next nonce that uh that needs to be used and once you have all those parameters you have to create this uh giant json and you know um nobody can really memorize this so i you know i just recommend you to just copy and paste this whole thing and uh once it's done you can serialize it called east side type data in this case i'm using v4 but v3 will work as well but not any of the previous versions and once the signature is uh is is created by the user so if they if they click on sign button that is then you'll return the signature and you can then extract vr and s from it which you'll have to send along with the rest of parameters to the real layer for real layer to be able to submit this to the network so those are the parameters and then you have the vr and s which are components to the signature you can then send that to the relayer the real layer then calls permit function with those parameters and it gets sent to the ethereum and bob will then pay uh the transaction fee and even though alice didn't actually make a transaction by herself uh the allowance update will actually happen okay uscc also implements eip389 which is our own contribution it's mostly similar to eip-2612 permit but the main difference is that it uses a random nonce as opposed to sequential nouns and that is to make it easier to support multiple simultaneous transactions from multiple apps also this is uh used to authorize a token transfer a simple token transfer instead of just updating the allowance which would require a second call um to um to call the method transfer from um but um this can actually be used for both simple guest lists uh transfers between accounts or as part of another smart contract function call in other words it can be used to either push like the regular transfer function or to pull like the proof transfer function funds to to both push and pull the funds as mentioned earlier eip389 also uses eip 712 and making a signature request for erp389 is also very similar to that of erp 2612. as you can see uh here we use a random theory to bite nuns uh here as opposed to fetching the next unused nonce from the blockchain and uh that's that's what allows uh uh the ef-309 uh base transfers um to uh that's what allows multiple simultaneous transactions to happen uh because with permit uh if you're using if you end up using a nonce that is either too low too high it will revert and fail so if you make multiple transactions at once you know the miner can reorder them as as they desire and you have no control over like which one gets processed first and that might cause the permit call to fail and also if you're using multiple deaths until the previous permit call is confirmed you won't actually know like the second dap will not know what's the next unused nonce so you might end up using the same nons twice and that will also cause one of those two calls to fail so that's the main difference and i guess that's the main benefit of using um transfer with authorization but this also you know actually leads to slightly higher gas usage so depending on your use case uh you should you know use eip2612 or 30.9 depending on what you what you want so uh by making the eip712 requests uh as shown in the previous slide you'll be able to obtain the vrns of the signature and you also have all the parameters uh that can then be you know sent to bob the real layer and bob can then call transfer reauthorization with those parameters to have the transfer actually be processed on the network and if you want to make the transfer with authorization call as part of another smart contract call say you have a custom smart contract that needs to take in usac and it will then do additional things with it you can then you can you can either try to take in all of the parameters separately but uh you know the transfer with the authorization call requires a lot of parameters which is you know it's a lot so you can actually condense it down to a single parameter by taking in a single byte array and then just extracting what you need from it using abi.d code and you can then forward the the call to the usc contract by using uh called method in solidity and that way the transfer with authorization can can be processed and then once the tokens are transferred you can do things with it uh and that's uh that's basically it for the uh for you know working with uscc there's a there's nothing too special about it i mean it's it's very simple to use uh if you're if you're new to ethereum you know maybe this is overwhelming but if you actually try you know building an app with it once or twice uh you realize that you know it looks harder than it actually is um so you know i would highly encourage you uh y'all to try you know integrating with uscc and most of the stuff that are here are also applicable to other tokens as well uh dye also has a permit function but it's the implementation is slightly different from the actual 2612 spec it's an earlier version so but it's fairly similar um i think uni swaps the erc20 token standard also uses 2012 data once actually uh the submitted efb2612 uh standard so it's going to apply to all of the uh the pull tokens that you end up creating with unity swap v2 so just to try it out yeah now i also want to show you a usccl2 demo and this is something that i'm personally really excited about and uh part of the reason why i'm super excited about layer two there are a bunch of layer two scaling solutions out there and i think ether online is also sponsoring a few uh or rather a few of them are also sponsoring youth online uh and um the reason why i'm super excited about layer two scaling solutions is uh well first of all we all know that ethereum has limited transaction throughput right and it can only handle about you know 15 to 20 transactions per second and that's  across all depths and smart contracts so you know if you're building something that you know realistically you can really uh you can't really expect a transaction throughput of more than like one transaction per second um that's problematic because visa for example can handle about 2 000 transactions per second which is a lot greater but we are trying to displace visa and all the other legacy financial systems right so scalability is really important and the ethereum foundation is slowly but surely making progress there but it will take a while before the l1 of ethereum start to scale and with layer 2 scaling solutions actually you can have scalable you can build scalable applications today so that's why i'm why i'm excited about it the d5 craze actually pushed the gas price really high uh it's come down lately as the default yields fell but uh you know at some point uh you needed to uh pay like 600 to 800 gigaway for for gas um as guest price and that basically meant to transfer uscc you needed to pay about ten dollars in transaction fees which is crazy uh you can't buy coffee with uscc if your coffee costs uh four dollars and the transaction fee costs ten dollars right and that's not what we want um and also uh i think uscc and not just uscc but crypto in general can provide a really great opportunity for less developed and under privileged countries around the world to to modernize their financial system and uh that is also a core mission of coinbase as well uh to build an open financial system and that can't be done if transaction fees are super expensive um it will cost ten dollars to transport uscc regardless of the amount like if you're gonna transfer one dollar you'll have to pay ten dollars in transaction fee if the gas gas price is really high uh if you're transferring a million dollars you would also pay ten dollars into another fee and we obviously don't want to build a financial system that's only for the rich and only for the whales who can afford to use it right and that's why i'm personally really excited about l2 and you know i would really love to see you all build things with l2 and also guess the transactions often on layer two the transaction fees are so cheap that the dap can just you know pay for it for the user um i can show you the demo later but it's so so cheap that the you know the users can just ignore transaction fees altogether and uh that's a kind of uh a financial system that i want to create uh something more inclusive something that can be used by everybody regardless of their background regardless of where they are regardless regardless of their socioeconomic status and um and and so um you know the hackathon prizes that we have if you build something with gasless transactions uh the meta transaction functionality in uscc and l2 scaling solution will definitely you know love you and give you um extra credit so let me show you an usccl2 demo that i created just just to show you some uh so uh show you like what it looks like and what the potential is okay okay um see here okay so you can uh it's publicly available you can navigate to uscc dash l2 dash demo dot kim to to check out this demo so i'm going to connect to my meta mask here okay so i'm connected for this demo i'm using matic but you can build this with any other l2 scaling solution as well i believe um that's evm based uh it'd be really easy for you to do that uh there are also non-evm based uh solutions out there uh like uh like zq roll up it'll be a little bit different but you know for simple transfers you can also build something like this very very easily so uh i'm on l2 right now and you can go between l1 and l2 so in l2 um there is a button called gimme some that and that's that's the faucet i think somebody was asking earlier if there's a faucet on matic mumbai test net um take a look at the code it's all open source and you know there's a function on the the contract that allows you to get some uscc tokens on on layer two but uh i clicked on that button and because i'm in full screen it's opening in the full screen but let me just minimize it so it doesn't look so crazy okay so i clicked on that function and it shows the signature request i'm using ef712 again for the faucet function and that alignment allows me to get the tokens uh without having to worry about gas and also using the eip 712 allowed me to cross cross sign across chains so even though i'm currently on goalie test net uh my metamask window is not up here for some reason okay even though i'm on goalie test net i was able to sign a transaction that happens on layer two which is on a different network um okay so now i've received some additional uscc uh token i think i received ten and now i can send it so i'm gonna put another address here i'm gonna you know try to transfer 10 ufcc send again the esc eip 712 uh popup appears and this will use uh efe 30.9 transferable authorization spec to to make the transfer happen guestlessly so i'm going to click on sign and now it's uh submitting the transaction to the relayer and the relayer then submits it to the network and within like two seconds it's uh it's complete uh it took a little longer just because i'm running this on a seven dollar instance on heroku but it can obviously be made much faster if you have a beefier machine for the relayer but uh you know you didn't have to wait you know 15 to minutes or even hours to for that transaction to to to complete and i didn't have to pay gas you know i don't have any eat on l2 but you know i could still make the transaction and you can see the transaction here um yeah the uh the transaction fee was 0.0001 usc and because it was so cheap the dap could just pay for it for for the user and the user doesn't have to worry about it and that's such a good user experience not to mention it was a lot faster so that's l2 you can move between l2 and l1 so i'm going to go to l1 here and l1 is goalie testnet here i'm going to try to get some some additional uscc [Music] and this calls the claim function that i was talking about earlier confirm and because this is happening on l1 it's going to take a lot longer for this complete it's going to be it's going to it's not going to take as long as you would on the main net just because the test net is not as congested but you can see that it's still taking a lot longer and you can see the block height between l1 and l2 as well and on l2 you can see the block height increasing much faster at a much faster rate than l1 which is really nice so i'm still waiting it's an l1 so that's kind of slow but now it's done so i have additional uscc now and i'm going to try to try to try to transfer some tokens on l1 and 10. pete there's a question here from um liteclient why would coinbase use a trusta ck l2 system coinbase seems to be one of the few crypto companies that is actually oriented to operate a trusted l2 eg assembly yeah so uh all i can say is that there have been multiple discussions uh i've also suggested multiple times of possible side chain solution that we we can we can build ourselves uh but uh you know um obviously we can't really reveal our plans and coinbase is yeah sure it's just trusted so if you operate a sidechain you know that could be popular but then you know there are so many projects out there um they're doing it and you know for those companies it's literally the the uh the point of their you know very existence right whereas a side chain by coinbase might just become like a side project or a or or one of many projects and uh i think uh you know supporting um uh the projects that are out there and there are multiple there's uh there's magic there's optimism you know there's x die uh a lot of them out there and uh i think we just want to support as many of them as possible and help them grow instead of trying to build our own uh but you know building our own is obviously not you know out of you know completely out of the question great uh please make a okay i'm seeing another question please make a customer or consumer custody solution that allows us to sign messages with keys that coinbase holds uh okay um yeah so i think that what the question is asking is if there's a way for people to spend uh crypto in coinbase wallets and uh i think the user i think the person like client uh they're referring to the um uh the coinbase.com wallet not the non-custodial coinbase wallet which is a separate product that we have similar to metamask like if there's a way to sign transactions from that then you can uh you'll be able to use d5 products directly right not via metamask but uh directly from coinbase account and uh that's actually a really cool idea and that's something else that we are looking into as well i i can't make promises but uh all i can say is that you know we've actually you know definitely talked about it discussed it and uh that may or may not may not happen um but uh but i agree that that they'll be you know good user experience but at the same time you know i want to say that uh you know non-custodial wallets do have value uh you might have heard the phrase uh not your keys not your coins uh and i'm saying that even though i'm uh you know i'm employed at point base there's value in like learning to you know hold uh crypto on your own then you know being your own bank because uh you know after all you know decentralization is it's what we want to see and uh that's what's gonna really disrupt uh the financial system um so uh so do look into a non-custodial solution you know metamask is great but also check out coinbase wallet uh which is a product that we have there's also none custodial and uh it's really great so and that's something that i've been you know working on myself uh for two years when i first joined coinbase so do check it out uh anyways um i'm going to try to make a transaction on l1 and here uh i'm not doing a gasless transaction so this is going to consume a little bit of my um gorlay gorelaith and it's going to be a lot slower as well and that's the the difference between l1 and l2 and you can go between l1 and l2 for example by you know depositing um by locking up some amount of uscc in a smart contract and you know the l2 you will see that token appear now too and you can try that by this section over here by using this function over here and the active depositing funds to l2 just takes uh about eight minutes to complete and exiting you know takes slightly longer about 30 minutes but you know you can go between l1 and l2 fairly easily so that's uh that's a small demo i think i see another question if you could change anything about l1 ethereum what would you change okay if i could change anything about l1 ethereum there are two things that i would love to change one is i want the meta transactions thing to be basically built into uh ethereum and i think account abstraction is something that they're looking into and doing i don't know the exact details but you know meta transactions are currently implemented at the contract level but uh if it's if it's implemented at the uh the protocol level uh then then basically anything that can uh that you can do on ethereum uh can be done guestlessly and they'll be really sick but uh in addition to that i think scalability needs to happen right like l1 needs to scale um that would i think that's uh i'm not sure exactly when that would happen i think uh the the the foundation is um you know uh is leaning towards leveraging l2 solutions as much as as possible such as you know roll ups side chains etc but i would still like to see uh l1 scale because composability is a lot easier to leverage on l1 than l2 because l2 you're going to see some fragmentation and i think i'm starting to see some fragmentation already a bunch of games and nft solutions tend to prefer side chains um and a lot of d5 apps tend to prefer wall ups i think um but but if the l1 if ethereum scales at l1 at layer one then uh then we won't lose any composability so see yeah pete if there's a time for it maybe we could just unmute um everyone and and like client if you wanted to jump in you guys could jam on this idea yeah we can do that so that that's actually the end of the demo and you can check it out yourself uh that's the end of my talk so we can uh you know do questions and answers awesome uh if you have a question for pete jump in unmute yourself um your time is now like client you could talk about um what you're working on there if you wanted to yeah you're gonna meet yourself if you want try here i'll try you should be good hello there you go hello oh great thank you thank you for that talk pete that was insightful that players work on you know eip 2009 i think it's awesome but people from coinbase are in like community changes and stan awesome um thank you you guys specifically mentioned account abstraction that was interesting i didn't know like what your experience was account abstraction use cases that you guys are excited about in that front because that's something that my team has been working on since about february of here cool that's and so i mean obviously like your experience like working with a wallet these are you've probably thought about ways that this you know experience could be better top of your head that you wanted to share uh are you talking about account abstraction specifically yeah i think that like a meta transactions is you know very clear like that's critical to have it layer one and you know we're working really hard to make that happen within the next 12 months like yep to bigger change and we're trying to understand in terms of the kind of attraction because like we can think of great things to do with it but i think that it's going to provide is going to allow for a lot of other people to come with us with even greater things that we could have never thought ourselves but i don't know if that you got a coinbase or yourself i thought it would be i see cool yeah so obviously meta transactions would be great but i think they'll be great as uh some kind of account recovery mechanism right there are a lot of smart country wallets out there argent being one of them that has more um you know there's really cool account recovery mechanisms uh like social recovery for example uh but that does require a spark contract wallet uh if there's a way to somehow um add some of that functionality maybe even you know something as simple as a multi-sig um uh to to the uh basically you know uh you know if there's a way to um add things like social security social recovery to eoa accounts that'd be really cool um uh i personally do know of a lot of people uh because i was building wallet apps uh for the past three plus years um uh that lost tons of money because they forgot the recovery phrase or they lost their phone and didn't write it down and uh it's it's it makes me really you know feel really sad sometimes you know sometimes people would lose like tens of thousands of dollars because of a small mistake or they they did write down the back of the recovery phrase but they misplaced it or dog ate it or something i'm not sure exactly how this this problem can be assault solved in account abstraction but something that i think we should definitely think about recoverability do you have any like preferred mechanisms for recoverability yeah um yeah it's tricky um social recovery seems to be popular at the same time you know it's it's funny but uh i'm not sure if i if i have enough people if i it's not that i don't know enough people that i can trust but it's uh you know i don't know if i know enough people who are sophisticated enough to uh you know be uh i think arjun calls a guardian for example right uh to be to be um holding like a fragment of the key that will help me with recovery so um some kind of uh obviously like you know companies like coinbase can provide that functionality as well right like we are trusted uh so we could you know hold a fragment of it that will help uh you with the recovery process but but maybe it can be built in such a way that we can never touch the funds ourselves i'm not sure exactly how the implementation is going to look like but uh uh but yeah um yeah it's it's hard um maybe some kind of uh yeah another thing is uh if an account uh remains untouched for a long time maybe you can mark an account uh in in such a way that if it has some flag set and if the account you know uh doesn't uh like if the funds don't move uh for a long time maybe there's a way to somehow challenge and claim the account but then who can do that that's gonna be again complicated um yeah it's hard yeah yeah but it's an interesting idea i think it's been a long time at waltz but i think something like that where you have like a heartbeat where if you don't have a transaction to that account for a period of time and what you could do is maybe fall back to like a long like they don't have to be as you know secure they could just be something you've written down put in a glove box a mobile phone somewhere a friend if dozen of the able to find one of those allows you to your funds and it also doesn't put you into a situation where you're trying to compete against you know one of the right paying a thousand way for for the gas that's that's an interesting idea and you could also put something like you know coinbase deposit address right uh if you put coinbase deposit address as sort of the fallback address uh to where the assets will be transferred if you don't use the account for a long time uh that way you know as long as you are continuing to use your account you know coinbase will never have access to your funds uh but uh if you forget uh you know your cup you know if you if you if you lose your private key or something and if you you know can't make transactions from that account for a long time and they can be maybe you know conf that's uh that can be configured by the user uh then the funds will just be deposited automatically uh or you can make a you know transaction to allow that for that to happen to say a coinbase deposit address that that could be an idea so coinbase will basically receive the the funds only if the account remains unused for a long time so the coinbase deposit addresses these like mapped for you know from generation to time to a certain coinbase accounts because like whenever i use coinbase and i tried to deposit like i'll get a different address every time does that mean that there's like an address associated with my account that i'm depositing to yes uh so i you know uh at least the last time i checked the addresses will change but all of your previous addresses that were shown will continue to work so every time you click on deposit button the address you might you see might change but if you used an address before then that address will continue to work and you can still send funds to it gotcha i hope that was helpful that was that was cool terrific on walled ideas i feel like anytime i have a chance to talk to you know any anybody who's working at coin base i you know i i hope that coinbase contributes more on the front of being a custodian of private keys rather than just assets because to me that's the greatest barrier to you know reaching a lot of consumers who are technical enough to have the thousands of dollars on a hardware wallet or a phone or it doesn't matter what the smart contract is they're always a little bit more traditional about crypto is that we have the opportunity to choose if we want to have control or if we want to give the control to someone you know even today in 2020 there aren't great solutions who are interested in crypto and want to use applications on the blockchain um because it's about storing assets rather than storing keys i feel like if i tell enough people coinbase this like essential i mean you guys obviously think about this every day i'm sure these are conversations that you guys have but that's something that i would love to see yeah so i uh you know wholeheartedly agree with what you said and uh you can expect to see us uh do more uh native integrations uh with uh with popular defy defy contracts and applications in the new year excited to it thank you awesome um oh patrick would you like to uh yeah did you want to ask a question go ahead and you could can you admit yourself or let me make sure you do that um weird oh zoom you should be good now hey can you hear me yes yes hey pete i really enjoyed your tutorial um as a experienced defy and dap coder and whatnot like that was that was like the best like intro that you could have given so really good job with that and um thank you i just i just wanted to ask about like plans for the wallet because uh specifically like the mobile wallet itself i just noticed like it kind of stagnating is there like something that's like gonna get released soon that that you guys are kind of keeping under wraps or like because i i have a couple of github issues there and i have some things i've tried to like kind of push that forward and i'd really like to be able to um you know use use that wallet more gotcha and uh by wallet are you referring to coinbase wallet uh the the you know the separate non-custodial wallet product or coinbase.com uh wallet the non-custodial one non-custodial one yeah so i actually um i transitioned to uh to a different team so as of april i'm not uh working on the wallet uh myself uh you know i used to be leading that team now i'm working on different projects but uh i do know that they are working on some you know big launches soon um i think you're gonna see um a native uh swap functionality very soon uh i guess i'm leaking uh here but yeah you're going to see like a native swap functionality very soon they launched lent function functionality recently so you can you can you can land on compound for example and earn interest um but uh but yeah they're working really hard and i think they're working on a bunch of new features uh uh obviously i can't leak anymore or else uh they'll try to kill me uh but uh but yeah i don't think they're stagnating they're just uh working on really complex features and it's just taking a little longer but you know it's not abandoned or anything okay yeah i appreciate that thank you thank you awesome uh yeah i agree this has been the as i say gold standard workshop well done kim repeat sorry thank you thank you so much uh unless there's any more questions we could probably um wrap up with how we can reach you if we have questions where's the best place yeah if you have if you have yeah if you have questions i think the best way to reach me is actually via twitter so i'm pete j kim uh let me just type that out here as well it's at pete j kim um yeah so reach out to me on twitter you can also mail me uh but i'm not very good at checking my mail and i get a lot of spam too but so it's a little harder and i might not respond to him you know uh quickly enough but uh but pete at coinbase.com is my email address and you can also find me on discord awesome thank you so much uh there's one um one last question if you feel like hanging around for one more minute what are the more institutional use cases of usdc that you've seen the okay so that's a really great question and uh the coolest use case that i've been seeing lately a lot uh is actually um investment as in like like angel investment or you know vc investment in startups are increasingly done in uscc so you know instead of the investor writing a check they would you know acquire say i don't know like a million dollars in uscc and send it and and it's a lot faster you know the recipients can get it instantly and start using it instantly and that i thought that was really cool um but uh but uscc is also a great uh gateway to d5 right d5 yields uh you know some of the protocols are giving yields that are like in the tens in the hundreds even or even the thousands some of the uh more sketchy ones i would say but uh you know that's actually really attractive to a lot of investors um you know it's much better than uh what you would get you know in with the with a typical savings account right or a treasury bond um so you know investors are using it not only to invest in companies but also using it to get the yield themselves and also if you receive investment in uscc you could also keep your uscc in say uh urine or something and uh and get cold like a cool 10 percent apy so you know you're not you know screwed by uh by inflation and and that's that's really cool i think nice awesome way to end thank you so much pete have a great day and 
introduce herself and kick the session off great thanks emily um i'm also emily and i am a developer at uniswap um i do a lot of smart contract work there and um kind of recently i was working on our nft metadata for the univ three positions um yeah so i'm gonna give like a fun little talk about that today um yeah and then i guess i'll be kind of questions at the end so that's me and um i guess we can start okay yeah so um on chain generative nfts um this is kind of like been a new thing that's happening um and maybe a lot of people uh might be confused and wondering well our nfts on chain their non-fungible tokens on the blockchain um and that is true however the bulk of the logic for nfts that is on chain all kind of pertains to ownership what address owns the nft who has transfer rights um and access and that's the biggest on-chain component however um kind of all the fun stuff that we've come to know and love recently with nfts like the art um and all the things you see on openc like the title and the description um for the most part that is off chain for 99.9999 projects like you know people's art it isn't on chain um and for good reason you know pictures are you know taking up a lot of data especially videos um and storing things on chain is extremely expensive and for good reason that has to be replicated across all nodes it just it's not very um it's not entirely reasonable to be putting all that data on chain um however lately um a lot of projects have been coming up with ways to get their nft metadata completely on chain um and not depend on web apis so um yeah all this stuff like the art um and the images is actually um a part of the um the optional metadata extension of erc 721 um so you know technically doesn't even need to have the metadata but of course most do and this metadata extension um which is optional is the name of the token the symbol and then also the token uri and um the token uri is really what we're what we're talking about here which is like the name of the the the individual nft like punk 1230 whatever and the description and then the image um and so this token uri will return a link or a uri which then will point to json um and despite being on the eip website this json is actually a little dated and i'll have a better um i'll show a better representation of that but you know we'll have the name the description and the um and for the most part um these this url that's going to be returned is pointing to like a run-of-the-mill web 2 um api server that someone's hosting um and so technically like with all this art and stuff um it remains unchanged but if those like web apis go down that art's just not there anymore um and so here's some code from open zeppelin um so with this metadata extension name symbol but the token uri um so what a lot of projects will do is they'll have a base uri which is actually just like their you know their link to their api and then you'll append something like the token id to the end to then get some pretty json describing um what is you know all the all the stuff surrounding your nft um and so for example coap is a popular nft um proof of attendance protocol if you've ever attended a hackathon or maybe you might have gotten a co-app um and so this is what um the token metadata looks like and for projects like poep you'll go to their server and you'll you'll get all this information um including most importantly the name the description and then the image which is also then another link um however with unison v3 we thought it'd be fun to make everything on chain it's fun it's cool and it also means we don't need to run an extra service so for us like it's even um you know cheaper as well um and so instead of returning like uh when we call token uri which is part of that ufc metadata standard instead of returning a link an http link we return sorry we return a data url um a data url prefixed with data colon and then the scheme provides the way to inline data in a document and it's commonly used to embed images in html css like that's the most common use case however we've used them in our token uri schema as well and so a couple examples of data uris um here's two hello world ones you know the data hello world and these are urls so they you know urls don't have spaces so um you do need percent coding and then um and this is just um you can also encode basics to four that's what we did in uniswap so these are these two would render the same way in the browser if you copy and paste this into your url search bar this is also hello world but b64 encoded um so some of our code this is the code that constructs our token uri so our erc721 token will call into this separate contract that we have and we'll construct the token uri um and so you can see down here right here is where we construct our data url and we are returning json not plain text or anything um and you have to kind of like sort of messily uh you know you'll see later kind of doing this in solidity was super tedious solidity was not made for parsing text which is what the majority of this project was but you can see we um return the data our url with the name the descriptions and the image um [Music] and also um we're kind of like injecting a lot of dynamic data in here about our nfts the uniswap v3 nft which i won't get into too much but you know it it defines the liquidity provider position inside of a pool so not only on change we have like ownership rights but also a lot of financial information about the position um the range that this position covers in the uni swap pool and also the principle and the fees it's returns there's a lot going on with these nfts um but we're just talking about the fun metadata aspect um so we kind of you know had to take a lot of that information on that on-chain information which is not necessarily in a human readable format solidity is like one of the furthest things away from being like a human readable type storage situation um so we kind of do a lot of parsing work to get this information in a human presentable way um for things like open c and stuff so you can see we're shaping quotes addresses into strings etc um yeah and then also our image is also a data url but um instead of json it's going to be an svg image in the base64 encode cool um yeah so if you when when you get what you return when you get our huge data url um returned um and you plug that into the browser the browser will display this for you which is like all of the information is kind of ugly but mostly because then we have this huge um uri for our big svg image um which then will also be um decoded um let me see and and the reason we did svgs um to store on chain so like i said earlier it's so expensive to store huge something like a huge jpeg um on unchain where like you need to save every single pixel like the bytes for every single pixel but in svg format um svg is formatted as like html css styling so you save it as an http string and um and i think like some people are unmuted but um you save it as an svg string and um and then the browser can run it from the html and it's so much it's more compact to store an image that way so um a lot of the on-chain images are actually going to be an svg format um but anyway so yeah this is the metadata you can see um we have like information about the position and that will be rendered on open c looking something like this and so our metadata consists of our title our image and our description um cool so what's next okay generating the svg image um yeah so then we after we do the json we also want to get this image stored and the way that we did that is first of all we kind of um some of the parameters for this are all the financial aspects of what we want to show you we want to show you your token symbols and addresses we want to show you your tick range um so we have all of that kind of crazy information but also some of the funner stuff that we needed to do is make it cool and pretty um so we wanted the images to be colorful obviously so one way that we did that was um we took colors straight from the token addresses the erc720 token addresses um so it's pretty convenient you know ethereum addresses are represented in hexadecimal and same with colors and html and css are usually represented in uh three right hexadecimal um so i just sort of um took little snippets of the token addresses and then made those the colors for svg images um and then also um what we did is what we did with these colors was kind of make like a faded tie-dye background um and so these let's see well this is what it looks like um these are what our svgs look like and this is kind of like the tie-dye image background i'm talking about um so another thing we did was um all of these are kind of like little circles like faded and spread across the background um but we wanted each individual card to be somewhat unique um even if some two people kind of minted the same sort of position um so what we did here is to get sort of like a randomness uh well not really random but unique um your randomness is really hard on chain we did try and inject some randomness into our svg as well which i'll talk about a little bit later but to make them unique what i did is um to come up with the coordinate for where these colors are located in the background um i generated a coordinate using the token id um with a lot of nfts and with hours um your token id is um declared consecutively so the first one uh minted is one two three four five and so on um so to kind of like get these all unique we use the token id to move the coordinates around um so basically this coordinate right here was had to be between um 1 and 255 so what i did is i got a number by slope um by um taking some hexadecimal out of the token address again um and then multiplying that by the token id which is unique and then modulus 255 so we are between 1 and 255 to get each nf2 unique kind of color coordination across the background um and so as you can see kind of like mix and match and everyone has like a little unique image for their position nft um yeah so um putting these svgs into solidity was super tedious it was super wild it was a little frustrating at times but as you can see it's kind of ugly um solidity was not made for this type of thing and as you can see in my editor the syntax highlighting is very confused it has no idea what's going on it you know it it doesn't realize that these are like isolated strings um so yeah and and even i had to even get in touch with like the solidity prettier linting team because the linter was getting very confused it had no idea what was going on and it was limping the code incorrectly and actually making it i'm not compilable um so it was definitely i definitely feel like i was in like new territory and it was um yeah it was it was tedious um and so this is kind of like a string interpolation like getting our dynamic factors like the token id the tick lower the tick upper into our svg string um and even with the numbers you have to um you know transform them all into strings that doesn't happen automatically with abi and code it won't encode the number as string so open zap one has tools for that but one of the hardest things to get into a presentable format for these svgs was um these prices getting this in a human readable format on chain was so difficult because the um solidity doesn't the edm does not know it has no notion of what a decimal is right and we store these numbers as um we store these numbers as um fixed point numbers so you know like just like when you're writing to the ethereum blockchain and for a token like ether you kind of have to times it by 10 to the 18 so it gets stored on chains and you wind um in unisoft we use fixed point number format so there was really no library for me to get a fixed point number into a nice decimal string um and that was definitely one of the most intense functions i've personally ever written so there's a lot of like a lot of work going on behind the scenes to get some like solidity storage values into nice human readable um text for these um for this on-chain metadata it's definitely a huge challenge it was fun but um yeah um [Music] and then another element that we put into the um our svgs um and i haven't really talked about all what's going on but i'll do that next but for now i'll talk about the super rare special sparkle it was another little just cool easter egg that we decided to put in there um and this is kind of like the randomness that we tried to inject into um into our svgs basically we wanted there to be some some notion of like a rare um swap and a heat um and the way we did this was kind of like people might randomly get a special sparkle in their nft and um the lower the the lower the token idea is so the first people that knit it's easier to get a rare one but as minting continues it gets harder and harder to get our rare special sparkle um and so the way that we kind of try to make this a little bit random um is similar to proof of work works in a way you know on bitcoiner ethereum when a miner is trying to mine an x block they have to hash the block data against the nonce repeatedly until finally the hash begins with six zeros or something um and when that happens yeah you're the winner and you get to mine the next block um and so something similar with like winning a super rare special sparkle is the rant like the pseudo-randomness right not random but pseudorandom comes from we hash your token id with the pool address of your position to come up with a pseudo random number and then we compare that number against um you and 256 and then really this is kind of the most important figure here you went 256 over the most significant bit of the token id um and if it's less than that number you win a super rare special sparkle however this number is going to get bigger and bigger over time because it's inversely correlated to the most significant you know having the most significant bit of the token id so the token id gets bigger it's going to have more bits and the most significant bit is going to be a larger number so this is going to get bigger and bigger over time um and yeah so we hash this kind of pseudo random number against an ever increasing number and if it's smaller you get the super rare special sparkle um fun story uh we are really pushing to get this out um you know last second that you know as the univ3 um deadline was approaching and we wanted to do our release i wasn't even sure if i was going to get the super rare special sparkle in but finally um you know the day before and i was like okay i have time to do this and um we wanted the distribution to be a little bit better and so i wanted to multiply this whole number times two so more people will get special stars but due to the nature of being this outfast and the rush this too it was supposed to be outside the parentheses but i put it inside the parentheses so i actually divided by two and made it even rarer so they are super super rare so if you have one like that's really cool you should appreciate it um i'm sure most of the people that have them don't even realize because they're more concerned just like lp and you swap and probably do not even look at this metadata but yeah so that's a fun little easter egg um yeah so let's talk about i'm going to quickly talk about kind of like the design work behind what's going on here um so in this position you know we have our token addresses here and our token symbols here we want to add the addresses because anyone can deploy um you know erc20 and say the symbols weave right so uh making sure that we're super specific and people can verify um and then we have the fee percentage um because there can be different few tiers for univ3 pool so this really defines which pool it's in then we show the curve um and this position that i'm showing right here is actually out of range meaning you know there's a price and hope ideally your position surrounds the price so your liquidity is being active as the price moves however if it is not included you're out of range and so in this svg your image um this is kind of representing that your range is above the price right it fades kind of signifying something important you know what's going on down here the price is down here but you're about the price um we have the token id and the min tick of your range the max tick of your range and kind of like where your position falls on the curve um so here's a few different ones um so yeah we were just looking at this one um and you can see this one's above the range i mean above the price the range is above the price uh if we look at this one this range is below the price and this one's also out of range and the price is up here um these three are all in range positions um and you can kind of see the curve has a different you know some are a lot more concave and some are a lot flatter so that kind of represents um how concentrated your range is so if you have a really tight range um like this one has a very tight range um that this is signifying um it's kind of like zoomed in on the curve right so it's like kind of flatter because we're only showing a very short portion of the curve however this one you can tell has is a very wide range and you can talk more like zoomed out and you can sort of see um more of the curve um yeah what else i think i think i mean i think that's the majority of it you can see um a lot of them have different color schemes depending on the tokens i think it's kind of cool that usdc dye came out super green since they're on super uh you know represent dollar values um yeah what are we doing on time i think i think they might be done let's write any other slides okay cool and then we're not the only on chain generative art nft there's a few other cool projects to check out if this is something that interests you mandalas also does the data url i think actually all of these projects do there's mandalas there's animal coloring book hotel frontier um yeah and a lot of newer projects are starting to do this so it'll be really cool to see how people kind of take on chain data and and use it to generate these presentable images um it was pretty hard for me so i'm looking forward to seeing you know other people's ideas and how they how they tackle these issues i also post this cool blog post that simon wrote about um all different projects that have attempted some sort of on-chain generation of the image or the metadata so that's super informative if it's something you want to dive into deeper and um this is my last slide yeah it's my last slide that's the end thank you thanks so much emily um yeah that was a really great session um we do have uh two questions in the chat and colin if you feel comfortable unmuting yourself and asking these questions live please feel free to otherwise i can read it out for you sure uh this seemed like pretty cool technology and i'm interested in what projects are using it outside of images and uh yeah nft images which products are are using outside like like just using this way to do a lot of computationally complex stuff yeah um so i think i think if i understand like besides us who else is doing this um and i mean this slide's perfect for that because these are three other projects that i think are are the closest to what we've done this blog post has a lot of other projects that have also done it and a lot of the projects that came before ours um kind of had an armed a way to generate images on chain that was separate from the metadata so they'll in the token uri they return a link to ipfs or their web server and you'd still go and freshen up open c but because that's not always super um trustworthy because servers do go down they do disappear they're not immutable um in fact there's an nft project where everyone got rugged because it was like a fun new nft project and people bought the nfts and then they changed all the images to rugs which was kind of funny i forget what project that was um but before on this project and before mandalas there were a lot of um projects or a few projects mentioned in this blog post that would actually have a way to generate the image on chain if you really wanted to but it was kind of separate from also what they had on the server so that there was at least some on chain um evidence of the initial like intention of the image um so you'll see a lot of those techniques in this blog post but i think more and more people are kind of gravitating towards potentially using this data uri and just getting all the metadata on chain instead of using a web server if that answers the question great colin says cool um cool um has anyone else maybe got a question for emily while she's on the call feel free to unmute yourself and ask the question live or you can drop your question in the chat yeah okay if there's no questions um or any more questions for emily um we can close out the session here i guess michael b is just asking for a github link um yeah um i can i post that how can i post that in the chat or i should have put like twitter handles and github links at the end but i forgot i mean you can always um add it to this presentation and share the slides with me um because yeah they love it when um i link these in the chat afterwards and they can just refer back to it um so if there's no further questions for emily i just want to say a big thank you for joining us today and taking us through um the unchained generative nfts um if you have any questions for emily or anyone else on the uni swap team they are in the sponsor uni swap channel in discord and they are more than i'm happy to answer any questions that you have um thanks so much for joining and we'll see you soon thank you 
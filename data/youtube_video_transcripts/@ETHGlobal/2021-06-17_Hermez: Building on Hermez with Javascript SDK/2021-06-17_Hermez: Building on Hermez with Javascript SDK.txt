building on him is with javascript fdk hi everyone thank you i'm going to share my screen in order to perform this this workshop okay this workshop will be about interacting with network as you may know network is a layer to solution basically secure a lab okay so in order to interact with this hermet network we built an sdk in javascript and what we're going to do in this workshop is to learn how to set the environment of the sdk how to create a wallet how to make a deposit in neural network and at the very end how to do a layer to transfer a standard transfer in layer two okay so i assume here that you have a very basic knowledge uh about node.js about npm which is the package management package manager of note so the first thing to note the first thing to note is that we are going to import some standard libraries of of node which is path and ethers it is a very well known library user in order to interact with ethereum and at the very last we are going to import our packet you can find our packaging in npm and you just have to install it with npm install requirement network that's live and maxius okay so first of all what do we need in order to start this workshop but in order to interact with with the ernest network okay so here what i'm going to show is the variables that i'm going to use in my workshop okay and probably it will be the variables that in case that you perform some script or you perform some interaction with the notebook you will need to set up so here this is just an example i have obviously i have my own hidden dot environment file and here what i'm going to go into setup is the film node url um i will use an infurial one here in this workshop uh you need to set up your specific private key which token do you want to deposit and transfer uh afterwards in innermost network and regarding the token you will find there are several tokens available that you can deposit and transfer in later we will do uh we will see later all the targets available when we perform the deposit action then here we're going to set up the body that we want to insert into the layer 2 and afterwards how much are we going to transfer into year 2 also you can perform in this workshop i will perform four different actions but of course there are so many much actions to perform um i will share a link to a repository in github with several more actions besides the ones that i'm going to present here and one of them is perform an exit and afterwards the exit you can perform the withdrawal it's in order to get out of layer 2 and recover your front your phones in the level also when performing a transfer of course you need a receiver and here we are just setting the stereo modules of the receiver that we want to transfer our phones into so let's start um with setting the environment okay so when you just download you just download the repository the hermes network and mazda sdk it is one set up which is by default which is that which is the default environment okay and the default environment is set to localhost so now what we're going to see here is which is the default environment that is set up i want to run the script and you can see here that the following vitamin uh points to uh air math charcot smart contract without the latest smart contract which i'm not going into details here but this is regarding when you perform the withdrawal function and also the base api url which is the coordinator the batch explorer which is like the ether scan the base api url is the url of the coordinator and the coordinator is the forger of batches on layer two okay just to do a similarity the coordinator is a the coordinator is for layer two as the miner is for layer one okay the patch explorer will be our own ether scan okay in order to find transactions in order to find your account and so on so here i want to show you the file that is inside okay which is called environment.js so here you can find that all the data are already available so what do you need in order to set the environment what you need is just only the chain id and if you set up the provider in our case i will be interacting with infura in rinkeby okay with just that variable i would set up the whole hermet sdk okay so here we can find all the correct urls regarding a main ring kv and local of the coordinator ether scan the contracts are already here because they are already deployed on drink kv and mainnet and so on okay so it's important to notice that just with a single uh parameter which is the chain id we are going to set up then the binder so here what i'm going to do is to get the chain id from my provider okay here i'm just loading uh my provider with the library of field search here i'm getting the network information from the network information and getting the chain id so er messages provides you a single function in order to set up the environment okay that's all that i need in order to set up the environment when i'm going and let's see now is how this so let's run it you can see you can notice the difference from the previous one it was a localhost and local deployment and here you already have the smart contracts that have deployed on printkb and the all the urls regarding the coordinator the last point and the e3 scan are pointing to green cable as well okay another important thing in order this is just in order to save time for further script is to set the provider like the library of ethers does you can connect smart contracts you can connect some designers but in order to use them you need to connect a provider in order to sign the transactions and perform interactions with the blockchain so in this case we perform the same in earnest so we are able to set the provider globally okay you can set the provider in each function if you want but it's more comfortable for the developer experience in order to set the provider globally in the whole sdk and every time that you will use a contract interaction this provider will be already set up okay so here we are just basically setting up the environment with just a single parameter which is the 1080 and setting up the provider global intensity okay so let's move forward to the next one which is the create wall okay what we're going to do here what we're going to do is to create the private keys of of the baby chapter private keys the bbw private keys will be used in layer 2 because are the keys necessary in order to sign l2 transactions and this private key will be generated from your ethereum private key and this generation is deterministic okay so you will be always available to create if you have your ethereum private key you will generate your baby jab jab private keys deterministically so here i will just copy paste the previous example which is load environment files and setup environment provider but this time it's more packet in in the code with just the four lines of code that just adopted by domain of the provider and here also i load the private key of the of the feeding so what i'm going to do now is to create reward and that it how do we create the wallet well what we implement here there's several ways in order to to load your private key one of them is through directly your private key is a signer okay we use this kind of login to call wallet because it's very similar to the one that is used in ethers so developers are used to work with this kind of code and also it's very important that you can load your wallet in such a way with a private key but also you can load a wallet with your json rpc provider okay in that way the sdk that we provide not just only work in order to do some scripting but it only it also works with browsers okay in fact with metamask in fact this sdk that i'm presenting in this workshop is used in our web app application exactly the same but instead of loading a private key you are you are loading the provider of the metamask for example okay so um we are loading here designer okay and we use a method from hermet in karma the wallet section create wallet from easter account okay and we are just passing and we're just passing the provider and the sign okay and inside that method there is a way to generate the baby jab jab private key and public key okay the i'm not going into the details you can ask me in discord about the details about the specific details of materials how to generate these principle private keys but just a single point is that we are just signing a message and then hash it in order to get the baby jab jab private key which is basically this lines of code here okay so i'm just going to show which are the values of this account and this okay i will run the script create wallet perfect so here you can see that i created the wallet okay and i repeat when i created wallet i took the ethereum private key i generate the baby shop private key and of course i also have the the public ethereum key and the babies are public so here i just want to show you which are the different types of baby jab jabs okay this is the public key baby jab jab point in the elective cue curve x point y point this is the x y by point in compressive way this is the pitch object expression in excitational string this is the bib jab jab express it in base 64 encoding okay and this finally is the hermet video reminders if you just play around with our web app and you just play around with the batch explorer you will notice that we use for user interface we use the baby jab jab and code it in base 64. this is very helpful for the user because it helps to differ and shape ethereum addresses and baby chat chat balances one is presented in excitation string and the other one is preset in basics default code okay let's move forward and perform a deposit okay you will notice that i will just again copy and paste all the code that i shared previously and i also load two more variables and i'm here i'm just in six lines of code i'm just setting up the environment of the provider and creating a world okay so what i'm going to do now i want to perform a deposit so the first question is which token do we want to use okay in order to do that first i'm going to show you which tokens are available in ermest network and rinkery okay so you just call there is an api public api that you can call and get all the public tokens that you can deposit and for that purpose i will show you which tokens are available so for example we have the first place we have ether the second place we have hermet usdt usdt die uni and link okay just for clarity in order to not show some information again i'm here in this two lines of code i'm just grabbing the token that we set up in the environment variables okay so i'm just filtering their variables so here we have all the token information that we need in order to perform a deposit afterwards of the token that we want to deposit okay so which is the next thing uh to do when you want to perform a deposit so of course you will need how much i will go to the bot so um you probably may notice that this how much we already took it from the vitamin variables and there is an important thing to mention here that this is not straightforward because um we are not using 256 bits in order to represent a big integral we are using a custom floating point code encoding which we call flow 40 and this has been done in order to save space when we publish all the data availability in the smart contract as you may know the catalapse we must publish all the data in order to rebuild the state tree from from zero from scratch on chain okay so in order to do that we need to publish all the data of all the transfers that the users made unchained and in order to save space we are using a custom encoding the coding beacon table okay in that case uh in the sdk we've wrapped all this coding calling and we call it airmeth compressed amount so at the very end you just need to insert the big integer into this hermet complex amount complex amount and the amount that you will receive is the amount that you will send to the smart contract in order to perform a deposit okay so we have an output token we have now the amount so nothing left so what we are going to do is to perform finally the deposit okay what is uh action what it will do this action what will do is to send a transaction to the smart contract okay and the smart contract will handle these transactions and after a few times okay your account will be created in layer 2 okay that's it and in order to see that your account is already created in layer 2 we need to wait some time for the purpose of being faster i already made this action yesterday and i also create an account so the account is very creative but as you can see it's just only a very smooth interaction with blockchain because insist this um this function here sends a transaction to ethereum to the smart contract commandment and creates for you an account so once your account is created we are going to perform a transfer a layer to transfer so in order to do that i will just copy paste again the code that i used before but this time okay setting the environment provider setting the wallet and i'm going to initialize the transaction pool okay i'm not going into the details here but you can imagine that this transaction pool works as the transaction pool of metamask okay so if you perform two transfers in a row the nonce will be handled automatically by this transaction pool you will send lunch one and once two okay like it happens with metamask when you perform some transaction the transaction is the in the ethereum pool it's pending but if you perform a second transaction the second transaction will have a non plus one so the nonce is not repeated so in order to perform the transactions related to we need to initialize the transaction okay which is basically to handle nones properly okay the following lines you will see that are very straightforward because are the same that we use in the deposit section which is basically set up the token information and set up the amount to transfer okay and here what i'm going to see we're going to look at the account that we have just created in the previous step okay and here we can see our information regarding the account that we have created in the deposit script okay so my account has been created well i have this account index i have this balance my baby jab jab address public address is this one my ethereum address inside layer 2 is this one i already performed a transaction yesterday for example okay and this is the token that my account has this for example is ether okay so what do we need in order to perform a layer 2 transaction as in probably all blockchain the most common fields in order to perform a transaction are just from to i mean sender receiver amount and fee and that's it that's the only things that we need in order to perform a transaction okay so what we have already we have the from which is me which is this account and here i'm just grabbing the fee as it happens with ethereum i will ask to the coordinator like you will ask to ethereum network which is the current fee you will ask the coordinator on layer 2 which is the currency so the coordinator will answer you which is the the expected fee in order that your transaction will be inserted in layer two and we are just uh computing here which is the fee that i need in order to perform this uh transaction i'm going to run the script in order here and then you will see which is the fee for example this is the fee in ether that i'm going to pay that i need to pay in order for my transaction to be inserted okay and there is one more step but there is a one thing important to mention that um the protocol that we use in layer two the fees are paid in the same amount that you perform the construction so if you perform a transaction with e3 you will pay your fees in ether if you perform your transaction and die you will pay the fees and die okay that's a different approach rather than ethereum for example but i think it's better because it's allowed to you to pay in whatever currency that you want whatever token that you want because you can link transactions and pay transactions in the token that you want okay as i said before what do we need in order to perform a transfer we need who is going to perform a transfer who is going to use a transfer the amount and the fee so here this is my account this is the sender the receiver i set it up in the environment variables the amount i have just compute the comp descent amount in float40 remember and the last variable is how much i'm going to pay okay so here uh when you send a transaction ethereum you send a transaction to the ethereum pool and here in layer 2 it happens exactly the same so we are going to send the transaction into the coordinated pool and then the coordinator pool which gives us a result if this transaction has been correctly inserted into the layer 2 pool of the coordinator so i'm going to run the screen and this will be the last step this will be this script will send to the coordinator delay of the transaction perfect so what happened here happens that we send the transaction to the coordinator and the coordinator verifies of course the if the signature is okay if you have enough balance and so on in order to accept this transaction if the nonce is correctly segmented if the nonsense that your account needs in order to perform this transaction and this transaction has been inserted into the pool and it will be processed in in a few in a few minutes okay but it's important that the coordinator has responses that the status is uh okay and this is the transaction id so with this transaction id you can go to the batch explorer or just directly to the api of the coordinator and see which is the status okay of the transaction if it's pending if it's forging if it's already forget it's like the status of an ethereum transaction when it's pending or mine okay um that would be all these are three minutes left if you want to ask anything um thanks so much carlos that was great um and you packed in a lot there in just under 30 minutes um there is one question that came in which is how is the fee calculated it seems like it's pre-defined how's the fee calculated basically we are asking to the coordinator which is the fee that the coordinator needs okay it's like when you're asking to the ethereum network which is the fee in order that your transaction will be processed in this case the coordinator as you can see here okay we just to the coordinator of the their global state and inside the global state there is this recommended fee okay in order to perform a transaction and basically i'm just grabbing this recommended fee um i'm dividing the recommended fee by the token price of the film in order to know how much ethereum i need to pay in order to send the layer to transaction great thanks so much carlos we on time here that was a great session and any questions for carlos you are more than welcome to drop them in the sponsor hermes channel and discord and with that yeah we'll close out the session thanks so much carlos thank you very much and thank you very much for everyone i will be in this school in order to answer all your possible questions thank you great cheers everyone bye 
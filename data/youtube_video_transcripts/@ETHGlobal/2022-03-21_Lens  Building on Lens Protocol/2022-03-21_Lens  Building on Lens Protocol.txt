great so welcome again uh here i have david zerodat and josh with me from the lens protocol team i'll let you guys take the stage and in the meantime if you have any questions feel free to pop them in the chat and we can take them as we go or towards the end thanks awesome well gm everyone and uh i hope everyone had a great weekend and is having a happy monday uh i'm david i'm the product manager for social products here at ave including lens protocol and i'm joined today by josh one of our lead back in developers author of the lens api and xerodot um one of our lead smart contract developers uh the lead developer behind the lens contracts um we're going to do a quick session today kind of recapping i think a previous presentation we gave on on how lens works and what it does um peter will then jump in and give us a little bit on the lens contracts in particular and how to build with them specifically looking at modules and then josh will jump in and talk a little bit about building on lens using the lens api from afe companies um so if you have any questions please drop in the chat we're gonna do our best to answer them live um if not we'll do them at the end of each perspective session section um with that let's jump into it um so uh we'll do a quick overview of lens um you know i think it goes without saying web 2 social media is pretty broken um you know not a day goes by that we're not uh constantly railing at meta and twitter and all of these names that i legally probably shouldn't be saying but we're going to say anyway you know networks are selling your data as part of the deal where you get free access to facebook in return they're going to monetize your content turn you into ad sales the user data is not portable i really wish that i could post a singular video to both tick tock and youtube and vimeo at the same time but good ux is definitely the antithesis of web 2. uh and user data is centralized i love when facebook gets hacked and all of a sudden my email's full of spam my mailbox is full of spam and my identity is probably being sold somewhere on the internet um so we're set out to build lens protocol to change all of this and bring power back you know we say in web 2 that uh you know web 2 you know the game theory of social is zero sum everyone needs to compete against each other absolutely because you only get data when they're on your app that's it uh with web3 we're changing it to make it collaborative some uh we're doing that by building an open composable and decentralized social graph lens is not a social media network it is a social graph that allows you to build social apps or social experiences as a creator you own the links between you and your community you own your content all using nft technology you form this fully composable decentralized social graph you know continue to kind of go through this overview we have kind of three key nfts that under undermine uh underpin the entire system the first being a profile nft if you've ever worked with ens or unstoppable this is going to look very similar right it's just a an nft representing a handle uh i'm at david um and uh it looks the same it's got a little bit of metadata um where you can say it's my bio is my profile picture that will resolve when i go look at this in openc um but but the key thing we have there's we've two kind of additional things we have this uh publications array and append only array where you can add publications these are posts mirrors which are what we call um you know retweets or comments which are a reference to another publication plus additional content um you know publications refer to all of these posts single post share or a mirror that's just a simple reference another publication comment reference with additional content um and that's your publications array additionally you have this thing called a follow module which includes your follow logic to issue follow nfts the next key nft the follow nft is the result of the follow process my wallet wallets follow profiles davidev.eth wants to follow at josh i will go ahead i'm going to call a transaction to try to follow him it's going to hit his follow module set on a profile basis and some arbitrary logic will get run before deciding whether or not to issue me a follow nft for example it could be you have to pay me five eth at one time in order to follow me um is it possible for a profile to have different fraudulent modules follow modules at the same time or just one just one but again arbitrary logic can be included so you could do some kind of like compound follow module that implemented two different logics it could be you have to have a certain uh nft in your collection you know representing like a creator pass or you have to pay me 5-matic to follow um so you could do that kind of compound logic inside a singular module but only one module can be active on a profile um this module at follow nft also has a token id and that's based on the order of following so the first follower of that josh will have id1 so on and so on uh and also some built-in governance including you know including delegation and so this allows the creation of what we call like social dows think of social tokens remove the rc20 and we could do a lot more powerful things with them uh so i could use snapshot to say i want to go uh you know i want to pull my audience to say uh you know i want to pull my audience josh who does a lot of great tutorials should you keep making slimmity tutorials focusing on ib3 v3 or should we do uh alcomix v2 and you can say actually i only want my first 500 followers to be able to vote on this you can do all kinds of different things um that's the follow nft so let's go back to the profile profile on the key and we said it contains this publications array well let's kind of look into a publication a little bit a publication um is pretty much just a a blob of metadata right lens uh protocol does not care about where you're actually storing um just publication right you're gonna reference a content uri and that can reference you know are we ipfs ceramic uh it can also reference um a centralized address like something started on s3 or any arbitrary url you could also try to address and say this lives somewhere in ethereum state or polygon state it's going to be some on-chain reference so you know we don't care where storage is going to be so that's part of it in addition you can set two additional modules a reference module and another thing called a collect module we're going to start with collect modules so collects is the process by which a publication get minted into a standalone nft whose content will be the same as a uh the same as the original publication so uh the collect module describes this logic it is the mint function um again arbitrary logic that results in a boolean answer true or false if true a collect nft gets issued so a sample could be i just took a great recent trip to london uh and me and josh took a great photo together and i might want to publish that on my publications and i may say hey they're going to be 50 copies of nft that could be minted and they're going to start at one matic each i can make it even more complex and i could say you know start at one matic and then every time it gets minted at an additional mattic we've had the community build really complex ones that say take thematic that's generated by these sales deposit it into ave and send the a tokens back to the creator in addition all of these collect modules have additional logic that allows a referral fee so if i do a publication on my feed and then josh mirrors it again putting a publication into his feed via the mirror type um and then somebody collects based off of joss's josh's mirror as the creator can set a certain percentage of the fee to go to josh the curator and so we now have curation incentives um etc last thing we have is this reference module so when i said mirror and i said comments how they contain a reference to another piece of content comments obviously have additional original content that is decided by a reference module so i can set i can set this kind of right um you know write protection on it think of this in twitter when you make a publication or a post and you say only my friends can comment or retweet this is the exact same logic if i want to comment on side of on josh's uh a particular post of josh right before that comment goes through it's going to have to pass through his reference module which again arbitrary logic coming down to a boolean answer so you could say things like you can only comment on this post if you are a follower of mine or you pay me five manic you can only come on to come up comment on this post if you hold a board ape or pay one each or hold i don't know in avogady you could do any kind of arbitrary logic um it could be community based you can only comment or share this post if you have at least 32 fwb so you know to kind of recap on the extensibility side there are three key areas to look at we have three modules a follow module which decides arbitrary logic giving a boolean answer saying whether or not you mint follow nft the example i give here is you can only follow me if you hold a board ape or pay me 5e reference module whether or not you're able to comment or mirror which is our version of retweet on a given piece of content set on a per publication basis the example here is you can't comment or retweet this if you don't have 32 fwb and lastly collect module arbitrary logic deciding whether or not an nft collect nft gets minted from a publication so in this case it could be you have to pay me 5e in order to get this nft and it can be very complex as much as complex as you want i'm going to run through some of the questions in the chat before handing this off to peter to take us a kind of a walk through the contracts and a little bit of uh publications um you know can can dao's own profiles does the profile have to be a wallet address no in fact that's something that we're seeing a lot of cool development on is what happens when profile and follow nfps are held by smart contracts you could do something where a smart contract holds a profile nft you have an admin that can add posters and different people can post on behalf of a dow let's say um or you know we could have accounts that have parental controls done that way um private postings can you do kind of encryption mechanisms there's a ton of great sponsors of this hackathon such as lit protocol that allow you to do kind of encryption using ceramic as a storage solution so right my content uri inside a publication can reference a piece of encrypted content uh between lit protocol and ceramic and then an individual trying to read um a specific publication will have to have the ability to get the decryption key through that external protocol lens just defines how things are defined on chain the feed is represented well the feed is is a bit more um right currently you just have an append only list of publications on a per profile basis a feed is a more generalized higher level um you know structure and uh josh can touch on that when he does uh the api um see can somebody create a profile without setting up the full protocol you can on testnet uh using the api or using the mock create profile proxy contract i believe that's what it's called josh has me in the comments there um yeah so with that i'm going to hand it off to peter i think peter should have shared ability peter if you want to uh jump in yeah yeah so i'm on windows so i don't have my my code here but i do have uh github and i'm gonna walk you guys through a little bit how uh that kind of thing works so let me quickly share uh this i just made you a co-host here okay can you guys see the github yeah we can okay cool so basically i'm gonna take a quick rundown i'm not gonna go deep into the contracts because i know we don't have infinite time but basically the main entry point if you're building on the lens protocol you're going to want to get familiar with the lens hub okay now we use a proxy pattern but you don't need to care about that this is the interface that you need to abide by if you're going to build on the contract layer and this is also where all the different events and the different functions that you need to care about are located basically now uh the main functionality obviously is down here when you see profile owner functionality functions here you've got create profile this is how you create your profile etc there's a few additional features that are not included in the documentation yet like setting a default profile etc but you don't need to worry too much about this kind of stuff because you're unlimited time just make sure that you're at least familiar with how nfts work erc721 standard etc and uh yeah so like david mentioned we have three different kinds of modules we have follow modules collect modules and reference modules right oh you want to link to the github sure let me send a link to the github yeah it's all public and all that oh thanks david anyway so i want to dig a little bit into how modules work so we know that the lens hub is the entry point it's where you create your publications it's where you do basically everything that you want to do now if you go to the core directory and you click on modules you'll see a whole bunch of modules that we've already created here now you can ignore these ish these are the base modules which will use an inheritance to simplify the code feel free to inherit from them as well if they include functionality you need let's start with collect modules because i think this is the most interesting one for hackathon builders this is actually the this is where the logic is when you create a publication and somebody's trying to collect it right so for example if i'm an artist and i want to create um a new work of art and i want people to be able to buy it and receive it as an nft including digital rights et cetera maybe i can include i can use the fee collect module here and this will basically allow me to charge a fee of an amount that i've decided for anybody to collect my my publication i can also choose to limit it to only my followers originally this was always the the um well right now it's not pushed on this branch but we're changing is that you're allow you're allowed to uh to allow non-followers to collect as well but currently it's only followers so yeah basically you're able to charge a fee on a given currency as long as it's whitelisted etc the dial does get a treasury fee if it's enabled right now it's not enabled but the functionality is there and we also have um the process collect with with referral function which allows mirrors to be um to be used as basically a content curation platform and just to give a quick recap of how that would work there are three different kinds of publications we have posts which are your standard content we have comments which are standard content that points to another piece of content like a comment right typically and we have mirrors which are our equivalent of shares which are basically just pointers to another piece of content and are which are typically used to expand the reach of another content like a retweet right on twitter so the thing is if you collect a mirror for example if david shared my my work of art from previously and somebody tries to collect that it would be unfair if david didn't get any credit because he's the one that that got me you know that got you to see my my work of art so modules allow a referral function which basically implies that david can get a cut of the fees right now me as the creator i'm able to set these different parameters so i can say yeah david gets small fear a large fear you know whatever i want but only when i create that publication so you can imagine there's a lot of interesting things that could happen here one thing that i'd really like to see is a collect module that is like connected to a dao in some way right a profile on dao that allows certain criteria for for example governance participants only to collect or people that have contributed in some symbol resistant way to the advancement of the protocol for example you can include any logic you want you can like david mentioned you can make it so only holders of a specific nft only these addresses you can even make it so so the fee is different for different people it doesn't matter anything that you want to do let your let your creativity flow so you can always take a look at these modules and get inspired and see all the things that we've got and uh yeah so these are the basic collect modules that we've got built here there's a lot of pull requests with a lot of new ones that we had a bunch of bounties for i think we might still have some bounties so feel free to take a look at that after the hackathon um next up we got follow modules which like we like we mentioned earlier right are there to include arbitrary logic the moment somebody tries to follow you so for example i can charge a fee unfollow it's very simple or i may have to approve you to follow for example this means that this is actually quite interesting because if you think outside the box you can imagine again a dow owning the profile and the only time that it actually approves a follow is when you satisfy a certain condition and then and that would execute a contract call that approves your your address as a follower right so then so then you create quite an interesting exclusive uh down right and the most interesting thing about this is that the follower nfts themselves actually have built-in governance functionality including snapshotting so you can create votes and with very little effort you can you can basically have a self-sustaining community right or at least the infrastructure to maintain this world to have a self-sustaining community which i think is pretty cool so anyway um now you've got also the the base modules like we mentioned earlier some that are unique to follow for example some that are unique to collect i think and yeah i just want to show you guys a little bit what a base module looks like and and why we we do this kind of inheritance pattern because i know that when i started solidity and when i started smart contracts inheritance was kind of confusing to me and i was trying to figure out why we did it this way basically anything that inherits from module base you'll see that you actually have a any time based or location-based logic possible maybe with an oracle sure if you have a trusted oracle that can provide that sure you probably have something that only allows you to collect if it's not rainy in seattle anyway so yeah basically anything that inherits that inherits from module base will be able to use this modifier only hub which everything is open source guys inherit from it have fun and this would basically allow only the the uh lens hub to call this contract for example which is important because you don't want your your modules to be called by anyone or else you could have a you could have a vulnerability so you can see that we use that modifier all over only hub only help you know and uh yeah so let's look at a couple of questions before i look at the last kind of module i know i'm kind of rambling all over the place but let's see where we're at so i was interested in creating a friends mechanism or like two-way follower word would i need to create a new module i'm not sure what you mean are you saying that if i follow you it automatically follows me back or something like that if you can specify what you mean by your question and i'll give it an answer does this allow us to extend the social graph yeah absolutely i mean you can extend it however you want right like a follow doesn't have to be just one one thing it can be anything that you want it to be right that's the beauty of the modules if we're both following each other we get reward yeah sure why not it's very it's very possible to do that you can check uh if a user is following another user as simply as checking the bounds of their follow nfts right if it's greater than zero then for sure they're following the appropriate profile all this stuff is exposed from the view functions that we've got in the lens hub so if you scroll all the way down you'll be able to see the view function section here and there's a lot of it so it's a bit bloated but basically yeah basically we're at um we're at over here you can see that there's a lot of different ways to access specific information or general information so i think it's quite it's quite uh practical if you guys are interested this is a good way a good place to start okay lastly like we mentioned before we've got reference modules which are the newest kind of module that we came up with and so there aren't that many of them but basically reference modules allow for uh specific logic to be executed when somebody tries to comment or mirror one of your publications so uh this could mean that i like for example if you're familiar with twitter that prevents you from that you can set it so only your followers can comment for example this is something that we can do here as well so and there's a lot of interesting things here as well i want you guys to go crazy make some interesting logic yeah multisig light control for sure you're working on a new reference module that's awesome we're building an application on lens that requires the minting of profiles who's the right person to contact on the discord so if you're talking about the test net we have actually deployed a profile creation proxy so profile creation has to be whitelisted to prevent spam obviously but on testnet we allow anybody to create a profile via the profile creation proxy and that's that's totally open source and verified even on polygon scan if you want mumbai dot polygon yeah that's um that's it for the modules if you guys have any questions feel free to uh ping me on discord i'm zero dot capitals at er0dot and you'll see me on the east global discord or you can ask your questions here and while josh is giving his part of the presentation i'll definitely stick around in the chat and answer anything you got that's it for me awesome thank you peter so much um you know tons of different things you can build on module wise as a reminder we do have uh certain rewards in the hackathon explicitly for uh the top uh top of each collect reference and uh follow modules maybe two for collect right now so uh if you want to go down that route it's a great way to go uh just a reminder that do two modules need to be white listed if you create one you have to that local environment it will not be able to be integrated into the test net with that i'm going to hand it over to josh to talk about the lens api so you know tldr we built an api to allow uh non-slippery devs to be able to really easily interact and build front ends on top of lens uh with that josh uh you want to take it away from here hey guys i've got a bit of a cough so i actually got covered but um i'm all good so yes i will start with the docs so we created an api because a lot of the data is um emitted in events and we wanted a way that you could grab this data really quick and really easily let me make sure i keep the zoom chat open i don't know where i can see the questions for that anymore um so i can't see questions so just yeah um so on the api docs you'll see that you've got the api it's got no api keys at the moment it's just beta so some things are broken some things um may not work perfectly so if they um are not please raise in in discord i'm always in discord to fit to fix any issues um the main thing is that we're trying to make this like a web 2 api so with modules with everything like that it's super complicated with how you have to emit them how you have to like um construct the data to redeem them and all that kind of stuff so the api is here to kind of help you do that um it's got authentication and to kind of log in you just create a challenge you then sign the challenge and then you get access code back and then you can use on some of the authenticated endpoints um the main thing here is like publications for example so we have our metadata standards which we ask everyone to conform to the server won't index it if it doesn't conform to this standard so there's stuff in there like content content is like your post like hello world um you have media media is like your attachments you have the image which is the nft itself um so it can display on openc um so this is the kind of met this is the metadata that you conform to um to create a publication you can go through the normal contract calls which are like create publication or i forgot what it's completely called or you can use the type data approach now the type data approach kind of abstracts all the complex stuff away from you so like if you're setting up a publication all you need to do is pass in the profile id the content and then kind of define what collect module that you want so like here it's as easy to turn on a reference module as a um with a boolean and then when it returns back um like when it returns back it will be all in your type date for you so if you look down here we have a full working example where you create the post request for example i'm saying this publication is a time free collect this currency this amount this will be pre-formatted for you on the server um and then you have who it goes to and your referral fee again human readable numbers so it's not you know you're not having the time to buy um the power of 18 or xyz um and then you'll get a um a sign type and then you can sign it and then you can send it like this um you know so it's super easy to kind of create publications and stuff like that um all the other stuff like getting publications and stuff like that again it's just as easy to grab publications you kind of have an endpoint which is called publications you say hey i want to grab all the publications for number one profile id of type post comment and mirror um and then you'll get a response back of all the publications all the metadata itself um is already extracted for you so you don't have to read any http requests you don't need to read anything like that and the modules the collect modules is all decoded or like all ready for you to kind of know what needs to be supplied to it and stuff like that we have like count like tables like how many times have been collected how many times have been mirrored we always include the full profile entity itself which includes like your following modules how many followers they've got who owns it the picture the handle kind of bringing all this information because with graphql it it's really nice how it's schema based so you can really bring like a lot of context on all of these queries so you know the documentation fully shows all of this stuff you've got interesting calls like for example timeline so timeline allows you to say hey um bring me back um all my social graphs post comments mirrors collector by post collected comments so you can build up like a timeline of stuff um which is really cool because like you can you know they can log in they can follow a few people and now i see if i'm following david now now every time david does a publication or does a comment or anything like that i can go and get to um we have stuff like revenue so i think p peter said before where you can set a referral fee for stuff so like here you can work out how much has my profile actually made um we have like follow like everything on the protocol that exists lives in this api so you can literally get all every single person that is following you with a simple request like this and then you get all the information back um so yeah like the api super super useful uh we have four coding examples here um i need to probably ping the repo i don't know if i've got the repo repos already in the chat josh you're good okay cool cool cool um uh so this kind of here you can kind of run all the scripts all the scripts are already there for you so like if you wanted to create a profile you would just do profile create profile and it would create your profile if you want to follow someone you can just run follow it will call the database for you it will do the type date sign it and then it will send the transaction for you here um you know so it's super easy to understand how it all ties together so yeah definitely definitely check it out it's supe it's super cool to be able to build and bootstrap your api your clients really really easily so i've not looked at the chat at all so let's have a look if there's any questions so answer a couple of questions there's some people asking should they deploy lens to mumbai or use the existing deployment you know if you are not building or adding any additional contracts um or you're not adding in new modules uh you know i would say use the deployment um it gives you the api and other another situation and other things um but if you're building additional contracts on top of it um or new modules i would say you may want to whether work locally or you can deploy yourself to to mumbai if you want a more public environment yes and um to the question of like cover pictures and stuff like that there's a few things like if you look at like update profile right there's a few things that are um off chain so for example these fields are off chain name bio location website twitter url cover picture um yeah so they live only on the server um so that's how you can update those kind of stuff just for a service cervical but like 99 of the data is all on chain um there's examples here of like how you create a post as well so like if you wanted to create a post um you can map it all out you see it's really super easy to create a post and then we've got up ipfs up here to upload you some content and it will send it for you and you've got publication so um super super easy to kind of get get up and running with all of this stuff um is there any other questions about the api anything like that i think all the docs have been shared and as we say hit discord we're always on there to help where we can and help debug issues and stuff like that seeing some really cool projects already being built with the api and how how quick they can bootstrap and build is is amazing to see so yeah super exciting awesome thank you josh uh what a quick question is there any way i can query a random date without need of a profile id um profile id isn't mandatory so like for example on uh we have like online publications for example we have oh let me get rid of that um we have stuff like um i think it's random i forgot where it is but like like for example on on profile we have this round um this random profile that will bring you random pictures the the request you you don't need any any input for the request and same for explore we have an explorer here um again you have a sort criterion and limit and that explore is saying hey bring me back the most popular people on the protocol at the moment the post the most popular publication with the top commented and and stuff like that and that top commented could be top commented or i forgot what the other criteria is um it's like top collected i think um so you can grab data like that to kind of bootstrap someone's social graph awesome thank you josh um so real quick uh i know there's a couple questions at the end but um you know we we do have a couple different bounty tracks definitely want to highlight again we've the front ends obviously uh for the top several front ends we have something for as well as the best in various categories um on the protocol side the focus is module so you know collect reference and follow best modules each of those categories uh are gonna get pricing there and then tooling we're looking for people to build tooling such as explorers right looking for a lens scan a really cool build and and we're also i think of a have a bounty out for the the best vampire attack uh on web 2. um last i think this is kind of kind of most importantly i know sani during the summit said this you know when they were building ave they learned that you're not just building for yourselves you're building for a community and uh i think that's something we've learned we're building alongside ecosystem uh and so please if there's things you'd like to see in the contracts either build themselves or please jump in the discord let us know what we can do better same for the api right we have that repo open we want to make sure that we're building things as best as possible um so that's that's really what we're hoping alongside everyone we're here for your feedback we're here for comments and we want to be building alongside a whole community um yeah that's it um yeah thanks david josh and peter um for the great session and feel free to follow up with more questions on the discord we'll see you then and have a good day thanks everybody take care 
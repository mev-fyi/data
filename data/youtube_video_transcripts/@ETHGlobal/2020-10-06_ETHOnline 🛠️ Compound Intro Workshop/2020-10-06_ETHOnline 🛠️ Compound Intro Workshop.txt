all right the stream is up see i'll kick off in one minute oh wait actually stand by jacob i gotta check something on the stream i'm going to back this up just in case sorry this may take a minute i may have to reset it no problem i'm making an announcement anyway it's looking good to me yeah you see it it's good but is it you is it you showing or is it me it's adam and i okay good i was looking at the wrong one we're good all right shall we roll out you good to go adam sweet awesome well i'll do a quick little intro but thanks everybody for joining us uh in the zoom on on youtube um you know we're really excited to have uh be working with compound um as a sponsor you know once again uh they've been an awesome supporter of ours um and they've got awesome tech that they bring to every event so uh you know really looking forward to having them here um yeah i mean with that being said you know a reminder to check out the ethonline.org prizes page which will list the prize that uh the prizes that compound are hosting among all the other prizes but i guess with that being said i'll turn it over to adam as this is his workshop to give hey thanks jacob uh yeah i'm really excited to be participating in youth online i'm going to share my screen [Music] all right get my presentation going sweet so yeah i'm adam and i work at compound i will uh give you a little workshop that includes javascript and compound.js [Music] so yeah my name is adam and i am the developer relations lead at compound um you can find me on twitter i'm adam on twitter and i'll be on discord uh you can ping me anytime i'm available and also email me adam at compound.finance so today we're going to talk about the hackathon bounties that compound is putting up for grabs i'll tell you a little bit about the compound protocol in case you're not familiar with it and i'll show you some developer resources so you can get going working and i'll present a little workshop to show you what you can do with things like compound.js [Music] so compound has three bounties of cusdc the first one is for compound js and second one is for building governance tools and third is best protocol improvement i will explain the boundaries a little bit more in detail in a few minutes so yeah you'll hear more so what is the compound protocol it's a interest rate protocol so developers can build applications where users supply crypto assets like erc20 tokens or plain old ether and uh suppliers can earn a varying interest income and borrowers can borrow crypto assets when they supply collateral so there are several assets supported and it's supplying and borrowing on the ethereum blockchain so as of today these are the supported assets the new one is uni uh there was a governance proposal to support uni and the protocol that was added um it succeeded today so uh it's not quite in the protocol it still needs to go through the time lock which takes two days i think and so yeah after that you'll see uh c uni uh contract so yeah so yeah those are all the assets that are combined to make the compound protocol and this this collection of assets uh can be checked out on the markets page on compound.finance so the first bounty is for building a project with compound.js compound.js is a javascript sdk it works in the web browser and also node.js it's it's really cool it's brand new it's still in beta you can use it to build whatever you like and we'll give fifteen hundred dollars of cusdc to the project that uh has the most original use of the sdk so the documentation has code examples to get you started and also this workshop i'll show you how to use it [Music] the second bounty is for the best compound governance tool so compound the protocol is updated through governance which is a community-run governance system it's fairly new it came out this year so there's definitely room to innovate there so you can build tools like applications sdks apis there's lots of information in the docs including code examples and that also has a 1500 cus dc prize and the third bounty with the biggest prize is a protocol patch so the community can develop changes for the compound protocol and propose those updates and the community votes on it using governance and you can create your own patch that's the biggest bounty prize so we're actually building a developer guide for this it's almost done i will share it in discord once it's done so you can see how you can make improvements to the compound protocol and that's the 2500 cosdc prize so governance uh compound protocol is decentralized it's not updated by the compound labs team it's updated by the greater community and there are two contracts in uh the the compound protocol repository that you can check out and you can read about them in the documentation and i'll give a little explanation on how they work so there's a comp token which is currently being distributed to all users of the protocol so if you're supplying assets or borrowing assets you earn com token for each block that you have an open supply open borrow and with this comp token you carry voting weight when it comes to voting on proposals so if somebody uh proposes a change you can vote yes or no uh and you could do that using the voting weight that you have so uh what's cool about the governance token is that you can uh vote yourself or you can delegate your voting rights to a different address so that way somebody with zero comp but like a lot of voting weight can make it make a big vote in proposals so that's a little bit about the token this is the proposal process so if you have a greater than 100 000 voting weight you can create a proposal which is a change to the dawn chain protocol and the phases are creating the proposal which is the code changes you deploy contracts and then during the voting everyone decides whether or not they like this change uh choose the included or not once the voting ends if there is a successful vote uh the proposal gets queued into the time lock which is currently where the c uni proposal is it's it's queued and after that it gets executed and the protocol treats those new contracts as part of the protocol so this is uh the compound [Music] vote page you can go to app.compound.finance vote and check out the governance proposals and also the comp voting weight if you have meta mask and your address hooked up uh so that that's that's one tool for governance that's that's already been made and there's also a leaderboard of voting weight so these are the top voting weight holders of compound governance and you can choose to identify yourself you see some there's dresses there and there's also some people and companies so uh yeah that's the leaderboard that's another cool um governance tool but of course you you can make more we're happy to see people making more and here are governance resources so if you want to build something you can check out the docs check out our governance page come on over to our discord and ask questions like concepts or code we'll help you out you can educate yourself using the medium blog we have guides for every everything about compound and of course we have github where you can check out open source code [Music] oh yeah that's my little presentation next part is the workshop where i'm going to show you how to develop with compound.js and javascript all right [Music] okay so compound gas i'll i'll uh show you guys that real quick [Music] it is a javascript sdk it's on github under the compound organization you can get code snippets here check out the source code clone it build on it do whatever you need to do and of course it's also on npm so you can install it for node.js real quick um but yeah this is the sdk that i'm gonna be showing in my workshop all right so here's my terminal and i have an empty folder and the first thing i'm going to do is i'm going to create a node.js script which will show you some of the sdk's features and in order to use the sdk in my project i have to create a package.json file so i can do that by typing npn y great so now we have a package.json file we can install from the package manager so this will take the sdk from the internet and download it to my machine so i'll do npm install compound finance slash compound yes and the uh sdk is pretty light it is um a wrapper around ether's jazz so if you're familiar with ether's jazz it's uh on top of that it it allows you to use ether.js within it so yeah that's uh what was built um so now we have the sdk on our machine we can create node.js scripts that use it so the first one i'm going to do is is pretty simple i'm going to send ether from one address to another address using the sdk so uh what i'll do is i'll make a script so i'll do touch send heath [Music] so now we have script and i'll open up my text editor so i can write the script [Music] it's actually spelled send wrong let me rename this file real quick [Music] okay so the first thing we want to do is import the sdk variable get the compound class the next thing we'll do is we'll choose an ethereum network to send ether on so uh i don't i don't want to use real ether right now i'm just going to do test ether in my development environment so i'm going to use ganache cli to make a local blockchain that runs on my laptop and i'll send each from one account to another account using that so the ganache cli address for jason rpc is [Music] localhost8545 and i will spin that up right now [Music] so come over here and i'll boot up ganache cli i'll use fork of mainnet and i'll use this mnemonic which i use in all of my demos so don't use this key for anything uh yeah that'll boot up uh instance of ganache so we have 10 accounts where we get the the address and the private key and each of the accounts has a 100 eth on my local machine so i can do whatever i want to test out transactions so i'm going to grab the private key which corresponds to the first address here i'm going to grab that private key i'm actually going to use it so [Music] string of it's that's that's the key where i'm going to send ether from and i'm going to send it to another address so i'm actually going to grab the two addresses that were the first two here so [Music] address one string and make this address number two [Music] cool so i'm going to send ether from address one to address two i'm able to do that because i have the private key for address one so what we need to do is we need to make a function so i'm going to make a iffy function i'm going to do [Music] async do an arrow function and also because uh it's a sync we need to do a catch so i'm gonna do a console here so in case there's any errors i'll be able to see them logged um yeah so first thing we'll do is we'll check the account balance of our accounts that we have so i can do that using the sdk i'll do find the balance [Music] and we'll do [Music] let val one equal so this will get the balance for the first address we're providing the address and also a provider for a network that we want to get the amount for so if i did this on mainnet it would be zero because there's no ether in that but i'm using my local host which we saw in the console it has a hundred each so we should see a hundred each come out of this and i'll do a second one and i'll use address two so you can see both of the accounts we'll log this uh but it's ethereum so my balance is scaled up by 18 decimal places so i'm going to divide that by 1 times 10 to the 18. do that with that javascript so that will show us the integer number of eth and also do number two okay so that's the first part we'll see how much each each account has and then we will send east from account one to account two so i'll send i'll just shove this in the console real quick we'll do sending heath this part will make a transaction so there's a way to send a transaction without initializing any compound object you can do it directly on the compound class so this is our transaction object we'll do awaits [Music] dot trx so this does under the hood it does json rpc send transaction and we're going to send each from address 1 to address 2 so that's our address that we're sending the transaction to and we're going to do an inline abi of a string so i'm going to say function send journal payable so this is basically telling the sdk i'm sending eth to a contract address with the uh function send which actually doesn't exist it's just an address so we're going to be sending heath to that address so uh there are no parameters for our fake function uh and the last parameter is our uh call options so you can think of like an ethers.js you have transaction options you can pass them in this object here so for value that's the number of each we're to send so again i can do compound dot ethers this is actually the ethers class you can access it like this since the sdk is a wrapper around ethers and i can say how much ether i'm going to send i'm feeling generous today i'm going to send 5e [Music] and no semicolon comma okay the provider is this provider up here my local host uh and our private key we're gonna use is this you can also pass the mnemonic if you want but i'm doing it this way and that's that's the transaction object so when you use ethers you can do the transaction object dot wait and you can tell the sdk to wait for one confirmation so the the code will stop here until the the confirmation happens [Music] so that's that's just one confirmation and the last thing we'll do is we'll log the balances again so yeah i'll just copy this code same [Music] thing [Music] okay so yeah that's our whole script basically what it does is it says what are the balances of these two accounts should be a hundred and then it sends five ether from account one to account two and then the last thing it does is it logs the uh balance of ethers so that should be 95 and 105. check my math uh all right let's run the script so we're going to call it send e okay node send heath [Music] yeah it worked we got uh initially we have 100 each in each account account one sends five to account two and it spent a little bit of ether on gas that's why this is not 95 exactly and the other guy got 5e so yeah that's how you send ether with compound js uh the most important thing here is the trx function you can literally uh do any transaction uh you can supply a one line abi like this or you could just name the function on a contract and then down here do abi and then provide like the the generated abi that comes out of soul c the json you can put that here so you could do that instead you can put a mnemonic down here if you want but uh yeah that's that's how you uh create a transaction you alternatively you can do read which would call each call under the hood for jason rpc so that wouldn't spend any gas that would just uh call a function and you could return a value so yeah those are two cool parts of compound js you can do regular ethereum calls or sending of transactions i will put this code on github after the stream so you can reference it if you'd like but yeah that's the first demo i'm going to do three more uh compound js demos so that's the first one uh next we'll do one in the web browser and that will be a little different we're going to supply assets to the compound protocol i'm going to supply ether and i'll show you how to do it in the web browser with metamask and compound.js so let me make sure this file is not all messed up okay cool so new file i'm going to do supply dot html yeah so i'm going to do a little html um sublime auto completes that for me it's kind of nice i'll do supply to compound [Music] and here we'll make label uh this is just going to be a little bit of simple html for a little user interface for supply [Music] i'm gonna line break [Music] and we'll do a text input and this will be like a text box where you can put a number put how many each you want to supply to protocol give this an id so we can grab it with javascript we'll do amount that's the amount of ether we'll do another line break and then we'll do a second input except this time we'll do a button which is submit this one we'll call it supply [Music] the text inside of that button will be supply cool all right i i don't really like writing html that's that's all we have to do today so that's good let's get to the fun part the javascript so when i'm using the web browser it's neat to be able to use a cdn to import the sdk so i can do that using jsdeliver [Music] so head over js deliver i'm going to search for the npm package so i'll do compound yes there it is first result [Music] and i'm going to go into the dist folder and i'm going to go into the browser folder and we got a minified version of compound.js here oh that's it yeah so i'm going to grab the url and i'm going to go back to my code and i'll make a script tag i'll do source is that url so that way whenever this web page loads it'll load the sdk from the cdn automatically nice so next we'll do some inline javascript and here we will use the sdk to supply ether to the compound protocol so let's do uh let's first grab our html elements with document get element by id so we'll do supply amount box [Music] and that's all the elements we have to get and next we'll do provider so instead of a json rpc provider we'll do a web 3 provider which is [Music] if the user has meta mask they'll be able to grab this object in javascript [Music] next we could do [Music] writer.enable and that returns promise so that'll say hey we're going to use ethereum on this page and the user can connect their wallet using metamask [Music] this time i'll initialize an actual compound object so last time i just used the class directly and now i'm going to initialize an object this time instead of passing the ganache json rpc i'll use the window.ethereum [Music] and next we should make a function that will do the supplying which is uh what happens when the user clicks the button so first we'll do supply function [Music] and in this function let's make it async so we can do oh wait we'll do const to supply whatever we put in this text box up here so that'll be that dot value and it'll be a string so i'm going to coerce it to an integer using this plus sign uh cool so now we can create a transaction except this one we're we're uh not doing it directly on the the class we're doing it on our object again which is a uh it's initialized so the key that the user selects in metamask it'll use that account to create the transaction so i can do away compound dot supply and uh this method's pretty straightforward you can pass the asset you want to supply like that like eath and then like to eat so it's pretty cool you could do that i'm gonna change this up a bit i'm gonna do compound dot eth which is uh the same it's just a nice variable that already holds that string and instead of two we're gonna choose whatever was in this box which was yeah keep to supply and you can get more exact with this by using a mantissa so if you like scaled up the amount by 18 decimal places you could say so that way you could use a scaled up number uh or with without this it's uh just like one will represent one either instead of one times 10 to the 18. so yeah nice and simple i'm going to log the transaction for us in case something goes wrong we could check it out and again i'm going to do that thing where i wait for it to get mined [Music] so for waiting we could like show on the page we could show a nice uh spinner loading screen on the page for the user and wait until it gets mined and then update the page but i'm gonna do that now i'm just gonna make a to-do show screen the transaction completed something like that yeah not going to do it now do it later uh cool so next we need to have a function event for clicking the button and that will execute this guy so i'm going to do supply slide button dot on click equals do supply so now when the uh supply button gets clicked this function executes nice so yeah we're going to supply some ether to the compound protocol what that does is it sends ether to the c ether contract and in return the address gets c ether tokens so you can hold these c through tokens and redeem them later and get your eth back plus interest so i'm going to go back to my project folder and here i can boot up a http server it's a node package so i can visit that web page in my browser [Music] nice okay so i'm going to go to the supply page and wants me to log in real quick okay let's see if i go to the right account uh i'm gonna go to my localhost jason rpc which is the ganache that i was running earlier um i have i guess there's a bug in metamask i have more eth than anyone on the planet i'm the richest person in the world it's kind of funny um but yeah see i have zero ce uh so that means i haven't supplied anything to the compound protocol yet uh but after i supply some eth you'll see that i'll have some ce so i'm gonna pull up my developer console just so we can see what we logged in case something goes wrong so i'm going to supply um three eth and so c to e the conversion ratio is almost 50. it's like a little bit off from 50. so when i supply i should get about 150 ce so i'm going to hit supply and metamask will pop up a transaction and so i'm going to send three eth to the compound protocol and there's a little bit of gas cost so i'm going to confirm and it looks like there's an error with the transaction and i think i know why metamask doesn't like um doesn't like using ganache cli that much so you have to come over here and reset the account every so often so it fixes the nonce number so i'm going to try that again [Music] this of course works always on on the public networks but it's only with ganache cli it doesn't like it so i'm going to try that again [Music] okay yep that was it this time succeeded so when i look at my c eath balance it should be about 150. yep it's a little less because uh the ratio is a little bit off from 50 to 1. so yeah that's how you supply ether to the compound protocol using compound js we got two of four uh code demos done next one we'll go back to node.js this one switches gears a little bit we'll be doing um governance so remember there's a bounty for building a governance tool maybe you can uh get get to it for one here by using compound.js and making a governance tool at the same time so yeah let's uh let's create a node.js script that does vote delegating so make a new [Music] new script and uh we'll we'll say like my address which is that first address uh from ganache uh we'll say that that address wants to delegate its voting rights to i guess the second address um so that means whenever uh the first address has any comp balance the voting rights will be delegated to the second address so the second address can vote on uh behalf of the first address so if there's a big influencer in the the the compound community and um everyone trusts them to vote the right way on proposals um they can delegate their voting rights to them so i'll show you how to do that with compound.js and i'll show you with a node.js script let's make a new file let's call it tailgate.js and i guess the beginning of this file is going to look similar to the other script we made so i'm just gonna copy code um yeah so we got the sdk we got the same ganache provider the localhost copy of the blockchain and we have the private key of the very first account that ganache uh gave some fake heath to cool so this time we're going to actually initialize an object for sending transactions so say little c compound equals new [Music] compound and this is pretty cool you can actually pass the provider so you could actually do like you do then which would use the ethers js backup json rpc provider you do net you can actually do nothing if you want that'll automatically choose mainnet and uh have no key initializing it but yeah we're gonna do [Music] we're gonna do json rpc with uh ganache and you can actually do some some uh options here i'm gonna pass my private key you can also pass a mnemonic if you want you can pass nothing it's uh it's in the docs i'll actually pull up the docs real quick for you so if you're going to compound finance docs you can find the compound js docs here this will show you how to initialize the sdk code snippets for every function uh that'll help you out anyway back to the code so yeah we have a compound object that can write transactions for this account i'm going to do an iffy again an async one [Music] and uh this time we're going to do the the delegate function on the governor contract so [Music] that has its own built-in method in [Music] compound.js so uh we're gonna delegate from the first address to the second address let me go grab that ganache so this is the guy that's doing delegate and this is the guy that's receiving the vote [Music] so yeah that's the first parameter second parameter is uh call options so you can think of these as ethers jazz call options i'm going to set a gas limit [Music] and of course we could do ethers utils [Music] and this time was 600 000 way that's probably yeah okay uh yeah that's that's the whole function call we'll do a um call this res we'll do uh the same thing we did later wait for it to get mined [Music] and we'll wait for one confirmation and then after that we'll log the events so when you do a delegate action the uh governor contract will log um who the the delegate uh change to there's an event i think it's a comp contract actually um but yeah so do console.log and we'll do res dot events so that way we'll see the events and if if the event fired correctly we'll know that the transaction worked so yeah that i think looks like it okay uh i'm gonna execute this and we'll we'll delegate from the first address to the second address [Music] okay okay so we logged our transaction uh events and down here we can see an event fire that is called delegate changed three parameters which is three addresses the delegate tour from delegate and then to delegate so initially the account was not delegated to anyone so it says zero the first account delegated to the second account yeah that worked out correctly so now if the first account gets some comp uh the second account will be able to vote on its behalf so of course you can actually delegate to yourself and vote on your own behalf if you'd like as well so yeah that's that's the third example i'll go through one more uh code example we'll go back to the browser and this time we'll show how to do the same thing delegating except we'll do it for free so if you have some users that you want to delegate to you say you want to have some voting rights and you're trustworthy you can make your own page and say hey come come delegate to me i'll i'll vote for you uh and uh you can uh have users create a signature for the delegate transaction and then they uh post that to your server using http uh and then you can use your own gas to post that on the blockchain so it's free for the user and um yeah the the person who's receiving the votes can can post on chain with their own gas so that's a way to get people involved and they don't have to spend any gas so that could be appealing as well so yeah well let's make a new web page and do the same thing except we'll do it by signature so yeah this is one of the cool parts of developing compound jazz was making a eip712 module that is able to create these signatures for you with just like one line which is awesome because uh the examples on the internet right now are many lines and they're they're complicated and you have to know how to set it up and uh doing it one line is is better developers know it's a one line better than a lot of lines okay let's make a new html file [Music] we'll call this one um gasless [Music] gate i don't think gasless is a word but it should be [Music] all right this one um yeah we're doing gas list delegation so you just sign a transaction send it over using something like http uh so let's uh let's do [Music] actually you know what i'll just copy the code from the other one [Music] it's pretty much the same we'll call this uh [Music] delegate by signature um great so change up this label [Music] delegate to and the input instead will be an address and this button instead of supplying we're gonna do delegate we'll say i'll get my signature [Music] sdk and we'll change this up we'll say address call this address box delegate button that's the delegate action [Music] same provider same compound object call this instead we'll do do doubt delegate [Music] and do delegate address it's not a number anymore rid of that let's do address box and we're not sending a transaction this time we're we're just calling a function that creates a [Music] signature [Music] signature and we'll pass the address so yeah that's that's the full line for creating a eip712 signature with compound s pretty cool uh let's let's log plug the uh signature [Music] um i guess in in reality you would do like a http post request send this to your server where you would post it on chain for the user so i'll just do a to do again just to uh post this to my the web okay cool and the last thing we'll do is uh when somebody clicks the delegate button execute the do delegate function nice all right so this will create a signature and the user obviously sends it to the back end where somebody else posts it on chain for them all right let's uh let's do the http server again already have that page up yeah okay so go back to my server now we have the gasless delegate page here translate to welsh no [Music] okay so who are we going to delegate to let's delegate to let's go crazy and delegate to um the third address so okay third address down from the mnemonic telling you my signature so when we click that button metamask is going to pop up and ask us to sign something with our private key oh i got an error it says nonces okay we got the same issue we did before gotta reset my account again [Music] okay refresh [Music] oh okay there again maybe my uh ganache seal i got stale i'll reboot it [Music] do that again [Music] okay hopefully works this time there we go okay so this is not a transaction this is signing a transaction so this is totally free no gas [Music] and here's our signature so now the user has uh signed a transaction that another user can post unchained so this obviously would be posted as the web server and you can use the delegate by sig function [Music] so you would uh send those those parameters the vrs parts of the signature into a different compound.js function uh when you're ready to use it so yeah that's uh those are my four compound js demos of course again that's a bounty in the hackathon um yeah so that that's all of my code demos i'm gonna uh take questions now [Music] see we got uh jacob and andre no no questions though anybody have any questions you want to ask me about compound about compound js i'm happy to to help [Music] seems like we're good you may have stunned them i've stunned them you can find me in discord i'll i'll answer your questions question from andre i see yes is this new eip a standard for vote delegation um the eip itself is um for creating signatures uh it's the the the compound contract happens to be using this eip but if you want to read more on it it's uh eip 712. there's lots of articles about it online and you can also check out the source code i made a little module for it called eip712 so you could check out what i'm doing in the code here sweet cool any other questions otherwise we're going to wrap this up yeah let's let's wrap up awesome great well yeah like adam said um adam's gonna be on the discord um under the compound channel so if you have any questions feel free to reach them out there um also like i mentioned at the beginning um and adam talked about there's a ton of prizes on the table um so take a look at that you can just go to youthonline.org prizes um and yeah awesome thank you so much adam for walking through everything and i was like it was a great demo very comprehensive so i really appreciated that thanks everyone thanks jacob yeah catch you guys tomorrow happy hacking 
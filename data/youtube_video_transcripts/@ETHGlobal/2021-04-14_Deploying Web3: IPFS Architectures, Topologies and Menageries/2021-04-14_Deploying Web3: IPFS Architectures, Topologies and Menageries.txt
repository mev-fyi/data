hey everyone thank you so much for joining we have dietrich from protocol labs who's going to give us a walkthrough he's got a talk titled deploying web 3 ipfs architectures topologies and menageries so i'll let you take it away thanks dietrich thank you heather for the intro thanks everybody for joining today let me find the right screen to share and can you see my screen yeah great yep thanks uh so yeah i'm going to in the next 30 minutes to a quick run-through of how i profess being used a little bit of how it works an introduction to the stack some relevant tools that will help you and then a quick walk through the types of deployment decisions options and approaches that exist today feel free to drop any questions ideally in the discord uh sponsor chat room because i can't see them when i'm talking so i will come back and answer them in a bit uh that said uh we've got a short period of time here so let's make the most of it and get going so web 3 today even web 2 sometimes it actually feels a little bit like this uh this talk will do nothing to disabuse you of that notion okay well all right a little a little bit we'll talk about some tools some strategies um uh ways that you can deploy your ipfs nodes for your web3 uh applications so hopefully it won't feel like this as much uh a couple unique characteristics of ipvs a lot of people are using it even uh both inside and outside of blockchain applications uh don't actually have to delve too deep into it often so when they do some things can feel a little bit like a mystery but these are some of the really key pieces i think that makes ipfs unique and different than working with http it addresses things by the contents of those things as opposed to where they sit on which computer in the world next major point is ipvs comes with built-in cryptographic verifiability because the address of something is the hash of that contents you know that what you receive is actually what you asked for uh it's transport agnostic peer-to-peer networking built in for the ground up means that regular types of transports that you are used to in the applications you build today work but also other types of transports such as either tor or bluetooth le are a possibility where maybe they're a little less easy to integrate into your application stuck in traditional application models and then finally whereas http the trust model is the nexus of http dns and ssl with ipfs you can have trust models that are highly contextual to the applications the type of relationships with the nodes or people that you're interacting with and threat models that might be wildly different and need special requirements not a one size fits all trust model that hp brings today people are using ipves for a bunch of different things but at its core the design of the protocol was uh was really around addressing some of these core problems that we have on the web today emerging network needs that might not be well serviced by needing uh transoceanic requests or dns inefficiencies in the network where you a whole bunch of people might requesting be requesting the same data over and over from the same server putting it under undo load a security model that really makes a bunch of assumptions about applications that may have worked that way in the late 90s and even into the 2000s but different models that we have today a major problem around links breaking so 404 is a number that is known globally in households to people technically technical and not uh which is something that really speaks to a problem in the way that we ship and build the web today a web that doesn't really work natively or naturally in offline use cases uh the dependency on dns there means in in the naming system is everything really downstream from that has a hard time and some of the groups that we work with people trying to do work in largely offline scenarios uh really say that the dns ends up and the dependency that hp has on dns in our application stack uh really ends up being the the major bottlenecking problem for them just being able to get basic stuff working uh in places like refugee camps for example with one group they're working with and then finally censorship and this is something that internet shutdowns and censorship generally has been on the rise of the last few years it's been a major problem uh places like turkey where they've been wikipedia for some time and right now where there's internet shutdowns and large amounts of censorship happening in myanmar and a number of other places around the world uh decentralized naming one of the problems the regular web too is that we do have dependencies on uh uh and centralized naming services with uh ipfs you have different options some of these are unstoppable domains or e and s are ways that we're doing this in our stacks today uh but there are other things built in as well and uh really new ways i think that we're going to see coming down the pipe um innovation in this space uh we're seeing ibp is used for for delivering code news in some places where access to information is being restricted or critical health information being available is really important for public health we're working with a couple of groups that you see here to be able to make sure that information is available uh wikipedia we have published wikipedia the localizations for a few different languages and and definitely you know like i said earlier the the situation in myanmar is really dire and access to this information uh is really key and critical uh two people on the ground there we worked with uh folks that that are in the region to be able to make sure that these localizations are are correct and that they're available and they work on on ipfs which means people running uh browsers like uh brave that have ipves built in can still access this information uh e-commerce physical and digital goods uh nfts everyone's heard a lot about it over the last few months especially even though they've been around for years uh this drive in in demand for nfts has really spiked an increase in ipfs uh so we're really doing our best to be able to support those uh new uh both artists but also all kinds of different businesses that are coming into this space and using ipvs and sporting them with best practices and ensuring that that data stays up and available for them uh identity is another place where ipfs has been used a lot ceramic from the folks at three boxes a number of other people uh fission which is um a group based out of vancouver that's doing some really interesting work around investing identity and integrating making really smooth bridges and workflows with the regular web and then ion which is a project with uh microsoft then decentralized identity foundation and a number of other folks there that are using ipfs to be able to store the identity transactions um anchored off the bitcoin blockchain uh and they they uh are now in production that network so you can use it today uh and then d5 so over the last last summer really coming into uh the fall really seeing so many of these blockchain based d5 applications using ipfs4 storage uh be able to uh publish frictionless and serverless front ends which is really fascinating use case and something i think we're going to see a lot more of as well some of the users that we're seeing there's really a lot of groups in in our ecosystem and tracking them all is is used to be something we thought we could do uh now it's becoming harder and harder as it's like imagine tracking people using ipfess but not or http not even close to that level problem yet but definitely more than enough where i'm hearing about new projects all the time that i've never heard of before for some of these users we published on our docs website a series of case studies if you want to dig a little bit deeper into the business cases and the basic architectures of how these organizations have used ipvess be able to meet their needs everything from from music to insurance to basic hosting services there's these stories are in-depth and worth reading if you're building a business or a larger complex application on ipfs ipfs powers filecoin and it's used in it if you're using filecoin you're using ipfs a lot of the same technologies a lot of the same types of metaphors that we use in the design of our apis and the uh developer ergonomics in these systems um and the workflows for moving data between iops and backing it up to file coin pulling out of file coin to be able to serve it for applications today getting easier and easier now that network has finally launched as of last fall which is really exciting we're seeing a lot of innovation there uh falcon ignite happened last fall around that launch time and over a hundred projects involved in there were building on top of ipfs the showcase of these applications is really fascinating to be able to see the diversity of use cases uh and different things that people are doing with this technology stack netflix was experimenting with using ipfs be able to move containers around their global network uh audience maybe you've heard of it is a music based application that empowers both artists and also the people that are playing and sharing music as well really interesting approach ethereum 2 also using the p2p which is part of the ipfs stack and i'll talk about that a little bit later and also browsers so i actually come from browser world i've worked on firefox for uh and related projects in mozilla for over a decade and part of what i do at protocol labs is build these relationships with browser vendors people working on the web today both uh working to get ipfs and related technologies supported in the browsers but also some of the broader papercuts that we have in the web platform in taking decentralized application stacks and integrating them so what are the types of problems that we have and that we hit when we're trying to build decentralized applications using the regular web security model where some of the interoperability challenges where browser compatibility isn't even equal where one browser implements something different than the other and it makes it so the implementation of decentralized um applications is harder working with groups to fix those so opera launched android support uh last year for the ipfs protocol uses a remote ipvs gateway they launched that same functionality in opera touch for ios earlier this year and now you can actually go and download opera developer which is basically our beta desktop application and test that technology there as well we hope to see that launch in the release version of opera really soon again is a consulting organization that's focused on the health of the web today they have they are committers to uh webkit to chromium and to gecko the rendering engine that powers firefox so we were working with them to identify some of the papercuts that we have some of the things we'd love to be able to see fixed on the web uh some additional javascript apis that would make it easier to do things like streaming between client server uh and uh fixing those issues so that not only uh we benefit and what we're trying to do with the web and ipfs but anybody who's trying to build these types of applications benefits and even some of the security model fixes and other things that we fixed with them basically just any web developer will uh benefit from the work that we've been doing there trying to make the web as a whole better in our quest to also make it decentralized uh and one of our uh really important partnerships this year was with brave we worked with them for nearly a year uh on this project which was to ship a full ipfs node inside a desktop browser so brave was the first browser to do this you can download brave today go into uh you go into settings and enable ips or just even open an ipfs address and it will prompt you if you want to enable this functionality it also supports the protocol to gateway functionality as well if you don't want to run a full node but now you could do things like open uh brave two computers on the same local subnet and be able to load uh data from each other which is really really powerful and we're excited to see uh browsers taking this step and integrating real uh decentralized functionality that puts so much power into the hands of users and allows the decentralized application vision and that we all have and share especially in events like scaling ethereum allow that to really come to fruition uh so very exciting moment for ipvs and i think for the web as a whole hopefully we will see more of that so rushing through a couple of different ipfs concepts i talked a little bit earlier about how it was a peer-to-peer approach to building the web uh http today is a request response protocol you request something from a website which ultimately boils down to one or more computers that run by that company or that individual or project that return response ipfess builds on top of a peer-to-peer architecture so that means you ask for an address and anyone holding that content on the network can reply with that data that you asked for what this means practically is some interesting things one if nodes cut are cut off of the network the rest of the network is still operational if you shut your laptop your node goes down but if other people are also hosting that data on the network it can still be served uh if the government a given government tries to shut down a portion of the network you can still access that data if it's being served by other people uh even if somebody actually forgets to renew their ssl certificate or even many of the foot guns of the regular web that actually cause websites to go down or data to not be available even if you rename a file on the regular web that file effectively disappears that problem no longer exists when you're serving your data with ipfs the way that we address data with ipfs is with a whereas the regular web addresses are comprised of a location place on the network where the data lives with ipvs we actually construct a hash a unique identifier for content and uh that unique identifier is the address that you actually use uh that uh for and for example i think one of the best illustrations that we use to describe while this is different from regular web if you change the updates of cat.jpg or cat.png on your regular website uh that any user that requests that file will get the new updated content whereas with ipfs if you change that file that basically the name of that file changes as well if you change the contents so that you know if you request an address you will always get nothing but that data in return uh one of the ways that we also distribute content across the network and create more efficiency and how data is transferred is that we don't work in ipfast in in whole files primarily we chunk the data up the protocol we'll chunk it up according to a default algorithm but also is pluggable you can put your own chunking algorithms into the protocol or your application and then the each block each chunk itself is actually what's transferred at the network layer so that on the regular web you make a request to a server and it responds uh this is location based addressing ipfess we address by the contents uh you can make a request for an address and the publisher can respond but also anybody else who has that data can also reply with it and you can get different parts from different people which gives you new types of efficiencies if you're running a server you also have to make sure that server is up and available and on the regular web but also as load grows you need to add more servers this is a barrier to innovation it makes it hard for small companies or projects to be able to start because they need to have a massive allocation up front for hardware or at least assets of reserve to be able to pay for it the overall complexity ends up centralized in your application infrastructure as opposed to being distributed across the infrastructure itself that you're running with web 2.0 pretty much all of the decision making in these types of application infrastructures exists on the server on the publisher side of things and that's really different than how a distributed application works ipfess this kind of complexity and load is distributed across all of the participating nodes not only the publisher and this means also that if the publisher goes away that that data can still be accessed which is interesting when we talk about what that means for for user control of of the internet or application stack this really diffuses and divides up the control moves a lot of what was traditionally centralized behind the publisher into the user uh the stack that ipfess has built in this sits on a couple different pieces liberta p and multi-formats filecoin is built on a lot of these different technologies uh the different roles that these technologies have from linking data together with ipld uh lib p2p for the transport uh each one of these is you can use independently of ipfs itself uh the fpfs node itself does a number of things from the chunking communication that i talked about verifying cids and the returned data this is configurable to your application and also we can figure out differently depending on if it's running on a mobile phone or a laptop for example this nodes enables that these nodes enable a bunch of different things different capabilities such as communication key management and syncing you can install ipfs in other different ways you can run a daemon you can run ipvs desktop which show in a second uh the uh go iconfest cli is our main node kind of the workhorse of the public network and you can install it through a number of different package managers as well in the ipfs ecosystem there's a number of tools and services uh ibms desktop is really the probably easiest way in the door you can download this for um a bunch of different applications or a bunch of different operating systems linux and mac os and windows and this allows you to run ib fast pretty easily on a regular computer it has a nice user interface that allows you to see the files that you're working with and how much bandwidth you're using and things like that ipvs cli if you are a developer or a systems engineer has a number of different commands that allow you to manage the system to be able to learn more about it see what it's doing and all the things that you need to do to be able to run and deploy ipfs the like i said very few browsers at this point run ips natively so we have an http gateway that we run and there's also a number of other http gateways that other companies run like cloudflare and these gateways allow the access to ipfs network using the tools and protocols that we are most broadly deployed today such as http uh we run one with really gets a lot of traffic and um it's always fascinating to see ipfs gateway uris and urls in the wild ibs companion is a browser extension that does a couple of nice things like you can configure it to automatically use your local node to be able to serve content if it detects it it's available on ipfess this is available for all major browsers uh javascript jsippfest is a implementation of ipfs and javascript that has a lot of functionality allows you to be able to use it inside browser tabs or electron or node.js server-side applications there's a number of different toolkits and frameworks that you can use ipfs textile uh three box orbitdb these are different abstractions on top of ipvs that might provide uh some of the metaphors that you're used to working with today if you're used to working with object oriented database or distributed logs or even some of the identity primitives that you'd be used to in a regular web 2 application framework i talked a little bit about name resolution uh ipns uh is a is a method for a name resolution built into ipfs and on top of that are built in a number of other different services as well we have dns link to connect and integrate with regular dns unstoppable domains and erns in us are ways that people use to be able to encode a name resolution into a blockchain record and now let's talk for the last 10 minutes about deployment it's kind of the thing that we're going to be talking about over the course of this hackathon and one of the number one questions that we get is where is my ipfs node uh i run ipfs on my desktop but if i shut my computer off where does my node live as an application developer uh is there a service that runs my node elsewhere is uh you know the the network does it take care of it uh there are a number of different ways and topologies that you can use ipfs to be able to make sure that your data stays available and one of the things that the secrets of this technology that a lot of people don't know is that ipfest is actually powered by a cabal of benevolent wizards who host all your data infinitely zero cost because magic okay that's not actually the case i'm sorry to say uh you actually need to run a node if you are an application developer if you are a business if you want your ipfs data to stay up and alive you need to think about it the way that you think about deploying web 2 technologies from the standpoint of actually making sure either running a node yourself or paying somebody else to run a node on your behalf to keep your data alive on the network like i showed a few slides ago even if your node goes down if other people are hosting it they can also serve it however that is not a guarantee of the availability of your data on the network now the ipvs uh ips does have a bunch of commands for you to kind of get an idea how many other people are hosting my data on the network that also is not a guarantee though unless you have made a relationship with those with those people who are hosting it so it's definitely part of your responsibility to make sure that your node stays available uh also you know part of the uh not not not sim maybe benevolent sometimes not benevolent elves a lot of ipfs infrastructure runs on names that you would find familiar uh bare metal servers around a couple of these different services also people hosting um on different virtualized solutions and i'll talk about in a few some of the bigger services that do ipfs actually run on top of some of these familiar names so pinning services are services you can engage to host your ipfs data ternum infera and pinata are a few of these where you can create an account and upload your data to their servers and they will keep it alive for you fleeq is a service for hosting publishing iphones websites it allows you to hook into the types of regular web development workflows and ci and integration flows that you're used to today it makes it very easy to be able to deploy your services uh with not nearly as many changes as trying to roll your own pinata is one of the pinning services that that i mentioned briefly before and they describe their their run muscle infrastructure right now on on digitalocean they also use amazon web services uh but they've built a solution that allows them to be cloud agnostic so they can kind of move it between services which is nice they did do some diy stuff where they built their own cluster solution on top of ipfess to be able to sync data between the nodes that they're running uh textile is one of the frameworks uh i noted before they run a bunch of backend services they run on azure um and and kubernetes they use mongodb so uh ipfs while the the protocol itself provides a number of different characteristics that technologies today don't have built-in with hdb a lot of times the backend infrastructure is built on things that you might be familiar with uh if you're on devops or building cloud-based solutions uh and a lot of these companies i've found use a variety of different types of these services so uh you know fleek has shared an architecture diagram with us uh and they use all a bunch of different they do basic region management like you have to do with regular services to be able to ensure that availability of data so um really for you know a sophisticated ipfs application you need to think about the availability across regions you might get some of that from the protocol for free but also there's free and then there's guarantees and as a business you want to be able to guarantee the availability and time of your service as adoption grows i think more and more of that organic part of network health is going to come from participation organic participation in the network but uh these businesses especially as they're providing services to other businesses do everything they can to be able to make sure that the services that your service has application developer is really good uh filecoin actually also has a pinning service api that a lot of these um groups are starting to look at it just recently shipped in ipfs and this is a way for you to be able to have your ipfs node backed by filecoin storage uh you can store data long term in filecoin and it gets pulled up into ipfs to be able to serve uh this api is pretty new um fleek runs has a product called space and space daemon that actually provides some of these same types of services and use these technologies uh textile also has powergate which is very similar it's an all-in-one ipfs and filecoin where it abstracts away some of the complexity of running those multi-node topologies for you uh which is uh really nice and i think we're gonna see a lot more of these types of collapse services uh not just for ipfs and filecoin but for you know full full end and dap application services more and more uh so that's a quick run run-through of who's using ipfs what they're using it for the basics of how ipfs works some of the toolkit services and other application and developer helpers that you can use today a quick speed run through the types of network topologies that some of the service providers have some of the advanced services that you might need as a business that's shipping more sophisticated or complex application on top of ipfs and filecoin and thank you for listening if you want to learn more i'll be hanging out in the uh critical lab sponsor channel on discord for the duration of the hackathon we'll have a couple of other folks hopping in to be able to answer your questions and help you build your applications you can also learn a lot more about the primitives of some of these systems at proto.school where there's a set of structured curriculum available for you to learn and walk through with quizzes and even some coding examples inside there to be able to test your knowledge and be able to get a solid base of understanding of how these systems work you can follow us on ipfess at twitter and i could pound ipfs on freenode and i would love to be able to meet you and talk to you about the things you're building over the next couple of weeks during this hackathon thanks awesome thank you dietrich thanks everyone for joining if you want to chat with dietrich head to the discord channel where you can ask away cheers 
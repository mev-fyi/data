workshop titled integrating any off-chain data into your smart contracts with chain link joining us today is patrick collins developer advocate at chain labs who'll be taking us through the session just a quick reminder to everybody to stake their spot for eat online if you're having any issues don't hesitate to reach out to myself or anyone else on the youth global team and with that i'm going to pass it over to patrick to introduce himself and get the session started awesome thank you so much for having me excited to be here let me go ahead and share my screen so we can get started all right cool so yeah so thank you everybody for being here really excited to be part of the eth online hackathon uh really excited to be presenting and showing you a lot of the different things that you can do with chain link and in your smart contracts so before i go into anything i just want to say we are really at kind of this doorstep right now right we we have this exciting incredible opportunity in front of us uh where the you know the world of smart contracts are are literally teetering on the brink of becoming this mainstream adoption you know we've seen all this adoption from d5 we've seen all these adoption of blockchain technologies and it's really going to be up to us to kind of push it into that next step to push it into the next phase and history will will show you know who the pioneers are you know who pushed us into this fourth industrial revolution so um it's it's not going to happen without projects uh and without events like this hackathon um so just really excited for everyone to be here really excited to see uh what everyone's going to build and yeah with that let's jump right into it so connecting your smart contracts to off chain data apis and traditional payments uh next oh and we also have uh five prizes of a thousand dollars paid in link to the projects that use chain link in the most interesting ways and uh we'll go over what that actually means and what that's involved with right now uh so in this presentation we're going to talk about chain link we're going to go over the smart contract connectivity problem uh how chain link already supports the growth of the d5 ecosystem uh a lot of the untapped potential in the places that uh people haven't been building it and we we don't see mainstream adoption that that's out there for us right now and then we'll go over the tools and resources you have to build um some of these smart contracts that are connected universally we'll go over remix uh we'll also do a truffle demo uh we'll check out the price feeds and um and also being able to access any api so uh with that let's jump into it as i was saying before uh in order to really understand chain link we must first understand that smart contracts can't connect to external data or any off-chain resource on their own right this is this is a huge limiting factor for smart contract adoption because it means the only thing that we can really do is token swaps right uh now this is this is nice but it doesn't allow us to have our these smart contracts to do these more interesting agreements and and be this superior form of agreement because we don't have enough data one of the main questions that gets asked uh is okay well why can't blockchain just make an api call like every other you know programming language has an api call uh and the answer to this is actually really important um really important to understanding the fundamentals of how blockchain works so the blockchain is a deterministic system right smart contracts run on these deterministic systems and this is really important um because every node needs to be able to validate what every other node you know is putting on chain so if we have a system where the validation process comes from apis uh you know one node is gonna say hey the api returned seven another node is gonna say the api returned eight you know even if uh the api well that could happen if the api you know was changed half a second later if it was hacked appreciated whatever it's going to be basically nearly impossible to have this consensus right the blockchain is designed so that if you replayed it from the genesis block at zero all the way through you're going to get your you're going to end up in the exact same state as you did if you replayed it at any time so you always want to end up in the exact same state so this deterministic system is really really important and so blockchains can't themselves make these api calls because of that so to interact with the outside worlds we need to use what's called an oracle so any device that interacts with the off chain world to provide data to smart contracts is is called an oracle they report that data on chain so the blockchain can stay deterministic and they do this in an external transaction so the oracle matrix makes the external transaction post that data on chain and now you have your data on chain to do whatever you want your smart contract which is really exciting and this is actually where chain link comes in so there are thousands of apis out there that are already providing data that people need for their applications so chain link makes it really easy to enable this connectivity between those apis and your smart contracts even if they require any authentication or passwords or or any other bit to get them to actually work so that you can have these decentralized applications powered by the same reliable apis that the rest of the world and current web applications are using today and a single chain link oracle is also called the chain link node i'll be using that a little interchangeably here uh an additional piece here is that a lot of users today still don't understand blockchain and sending payments and cryptocurrencies isn't universally accepted yet when a smart contract has executed people need the ability to get paid in the currency that they want and chain link makes it really easy for off-chain payments to take place based off of on-chain interactions this is this also works for any crosstrain communication and sending payments to other chains so chain link uses something called external adapters and if we have time we'll go into those a little bit too um and they use these external adapters to enable this connectivity to any resource chain external adapters are basically the the customizable functionality uh the customizable piece of chain link nodes that says if you're looking for some very specific data or you want to do some specific computation you can just hook in an external adapter um that can do pretty much whatever you want right so it can access apis or require authentication it can do some off-chain computation uh for your um for your smart contract uh it's really the the piece that makes your the customizability of your smart contracts unlimited so and basically the way that it works is it's a a wrapper around apis or the most popular way to do it is a wrapper around an api and it'll call that other api and then you can add any customized features uh to that as you like so um and the great thing about external adapters too is they can be written in any language uh so you don't need to know anything about solidity or or even ethereum to get them to work now here's where we turn up the heat a little bit more so a centralized oracle or a centralized data point becomes a single point of failure for your entire smart contract and this is actually why we create decentralized orbitals and decentralized networks if you have your data rely on a single point of failure your smart contract is now kind of no better than a regular traditional agreement right the reason that these smart contracts are so interesting is we can make them decentralized well there's a couple other reasons but that's one of the big reasons and if we add this centralized data point or this centralized oracle now we have to trust that they're going to do the right thing and you basically remove any and all decentrality your smart contract has so it's not that much better than a traditional or regular contract so we need to avoid this at all costs um and have a network of decentralized oracles and um this is an important piece to dwell on too because saying a chain-link node by itself is decentralized is sort of like calling a single tree of forest right that doesn't really make that much sense one single entity doesn't make up the whole to make applications that are truly you know never need to rely on one entity you know be it a company landlord government or anything with sort we need this network of chain link nodes or this network of chain like oracles and the reason why i'm stressing this so much is uh it's it's not some hypothetical situation we've seen attacks that have lost projects a lot of money uh and a lot of livelihood and a lot of tears shed uh over some of these these hacks um the oracles that they were using weren't even malicious they were just hijacked uh or flash crashed and um they lost in smart contracts you know they don't care they they just execute whenever the data says execute whenever the code says execute and that's one of the beautiful things about smart contracts but that's also why it's so crucial to have data from a reliable decentralized uh network like like a chain link network so chain link is is designed to be this modular infrastructure though so you can build your own networks and you can build your own custom customization to do whatever you want uh you can build your own decentralized networks uh it's used to connect your smart contracts to any api you can select as many oracles or chain link nodes as you like and use as many data sources as you like in order to trigger the execution of your smart contracts and then again because the external adapters are so flexible and you can make them do whatever you want you know one of the big benefits is you know you can use them to build these off chains payments to occur based off the execution of a smart contract so for example if you know the result of a smart contract says that bob needs to be paid a hundred dollars you can use a chain-link external adapter to send that uh send that transaction as well now to get started with defy the chain-link project has actually already gone ahead and found many of the best blockchain node operators on the planet and combine their prowess to build what's called price feeds these are decentralized on-chain reference points that can be considered source of truth for various currency pairs like the price of eth in terms of usd for example so here's a little visualization of exactly what that looks like you can see uh surrounding this price in the middle being you know 196 there that's the aggregate of all these nodes uh individually grabbing data off chain reporting it on chain and then on chain uh that data being uh aggregated to this decentralized value so now you have this this decentralized price feed and you know that your smart contract is going to be reliable and secure because you have this provably powerful uh decentralized price feed and even if you know it relies on the same uh fundamental concepts that makes blockchain work right if a couple of the nodes go down nobody cares because it's this decentralized network uh making it much harder to hack much harder to attack and and much more robust and again you know if you want to make your own network you absolutely can um so these price feeds though um are are being used by a ton of the top products in the d5 world uh and the proven safety reliability and power of these applications is a testament to the power of these chain link price feeds right uh we've seen across all of d5 you know synthetic assets lending and borrowing trading uh asset management we've seen a ton of adoption because of how powerful and how reliable that they are right now i i think it's actually 35 price feeds are now live i could be wrong um and many of these d5 products are using price feeds as for securing their critical infrastructures and so here's kind of a snapshot of uh of dpi d5 pulse a couple weeks ago and you know d5 pulse changes so quickly uh but d5 pulse is a uh is a website where you can see how much in assets under management is locked into different platforms and so here is a snapshot of the top five and three of them ave synthetics and near dot finance are using chain price feeds to secure their platforms and if you look you can see locked usd ave 1.5 billion uh synthetics 859 million you're no finance 820 million there's literally billions of dollars being secured by chandling price feed so this is just a testament to how powerful they are and how much adoption that they're seeing so we're seeing more and more of these d5 projects using the price feed because they're so powerful because they're so reliable and because they're so easy to integrate as well we'll see that in a bit um so here's just another snapshot of some of these projects you know synthetics actually it's bumped up to 900 million loop ring 20 million set protocol 20 million you know ave 1.5 billion and they might even be more now um so just just a testament to how powerful these these price seeds are so in addition to being able to you know access any api grab these decentralized network of price feeds chain link also has um this method for getting reliable provably random numbers uh and until now getting random numbers on chain has been actually an issue since the conventional way to get a random number you have to rely on the eth miners for a random hash or some type of centralized api that can be hacked miners actually when they produce a block they have the choice of whether or not they want to produce a block and if your random number is dependent on their block cash uh if you're doing like a lottery or something and their block cash would result in them not winning the lottery they are now highly incentivized to not publish that block um so you've now created this unfair system where the miners actually can control who wins these these random numbers that you that you're making so uh you absolutely do not want to have your production systems depend on the block cash for your random numbers so chain link actually has a decentralized provably random system uh for getting these random numbers and the service on these has barely been scratched we're seeing more and more uh people looking to use these these chain-link vrf's at the last chain-link hackathon we saw about 12 projects uh implement these chain-link vrfs because they're they're so easy to use and they're and they're so powerful and it's so um it's it's fantastic to have your problem it's fantastic to have your projects have provably verifiably random numbers uh which is fantastic so we're seeing more and more adoption here as well uh just one note it is on the uh the chain link vrf is on its final round of the security audit um so at the moment uh the docs only have the test net versions um but st you can stay up to date by going to the developer communications piece and we'll get to that in just a second oh it looks like there's a chat feature here i'm actually going to stop in a minute and look at questions so uh anyways this brings me to our next point we have a blog that goes over a list of ideas to power your smart contract so if you're at this hackathon and you're you're racking your brain you haven't been able to brainstorm or anything yet i think there was a brainstorming session yesterday um and if you're looking for some other ideas definitely check out this blog it's got some great pieces for you to look at but i'll just kind of quickly rip through uh some of my favorite ones you know d5 decentralized finances is huge the market is massive right so right now d5 is what 10 billion dollars it changes every day i can't keep track um but traditional finance i think it's 100 trillion uh these are also some massive numbers asset or hedge funds in general uh have a market cap of about 3.2 trillion so there's a ton of space there's a ton of markets we made up here to help people build and lock their assets in this decentralized finance platform where they don't have to you know rely on these centralized traditional uh financial institutions so d5 is huge fantasy sports or any type of gaming uh you know vrf makes a lot of this gaming stuff really really easy and accessing you know sports data off chain uh is really easy because you can access any api and both of these examples are still way cheaper on chain because you don't have to pay these massive fees with this with a ton of overhead um to run these projects tokenized assets you can split up your car plots of land shares of stock you know making it really easy to keep track of who owns what without having to deal with any of the paperwork and since your data is coming from decentralized oracles you know that nobody can actually mess it up and then the last one here is insurance we're seeing more and more projects uh looking to tackle this in different ways in really really creative ways and this one to me is kind of one of the the magical pieces that really show us how powerful smart contracts are you know let's say your crops are all messed up due to the weather excuse me and your insurance doesn't want to pay out because of some pre-existing condition or uh or some loophole that they find right in these traditional agreements they're incentivized to find these loopholes and they're incentivized to figure out ways to not pay out but with a decentralized smart contract since they don't own the agreement they don't have a choice the code automatically executes and they have to pay out so to me this is one of the most powerful um examples of why smart contracts and why chain link is so powerful um so because with these decentralized smart contracts you don't have to trust that the insurance company is going to do the correct thing because the correct thing is infrastructural with chain link so i i hope that inspired us to kind of start thinking a lot about the different pieces that chain the cast and the smart contract has and and get you really excited for this hackathon because honestly these are the stomping grounds of innovation these are the stomping grounds of creativity and pioneering uh you know this fourth industrial revolution here so uh with that i will jump into some of the questions here and then we're gonna go into the technical demo of using chain link and how to use chain link and get that data get that crucial decentralized data into your smart contract so let me just look through these questions right here real quick how is that determined uh i need a little bit more more uh flush that question out a little bit the insurance payout oh so that would be depending on um honestly your whatever the contract says so the question is how is uh this insurance payout determined um and the answer is uh well it depends on how you write the smart contract that's that's really it so if your data says hey if if the weather strikes twice or if um if it's super rainy over third days or it's super hot whether it's not rainy or whatever your insurance policy is pay you know farmer farmer john you know a thousand dollars um you would be the one to figure that out and then your smart contract would get data from this decentralized network of channeling oracles it would get that weather data into the insurance contract so uh to answer your question it's whatever your policy is whatever you decide your policy to be is this aggregation similar to what is done in corn market cap i'm not sure what coin market cap is doing and that looks like that's that's the questions for now i have one question from youtube that i'm just going to quickly post in the chat and i can read out for you you mentioned data coming from decentralized oracles serving many purposes and from many domains besides price feeds what other types of feeds are available good question so right now price feeds are the most popular ones and they're the ones that are are mainly in here you can create a price feed for any type of data though like for example weather data you could absolutely create a price feed for weather data there is a couple of non-priced feed ones although there's still price feed there's like fast gas this is like the current fast gas speed for ethereum i think right now most of them are price feeds uh but you could create your own price feed for literally any type of data create your own network of any type of data as well something important to note too um i going production with centralized oracles absolutely never do um however for just developing if you just want to work with one oracle one api you know that's more than fine just to get your your minimum viable product you know up to speed just to get your your your project you know working you know that's more than fine but uh for decentral for going mainnet and for going live you you absolutely don't want to do that but good question all right cool and with that i'm going to oh unless there's one other question can connectors be developed like connectors to databases um i'm not sure i fully understand the question if we're talking about like connecting we develop like connected connectors to i mean if you're if the question here is can you connect a smart contract to a database uh i mean the answer is absolutely you know the external adapters oh okay perfect yeah the answer is absolutely you know apis are the way the traditional web works to connect um to connect things right to connect um your back end to your front end to connect um you know any piece of of software with with another external piece uh if you make an api for your database um you can just pop it in your smart contract uh if it's a little bit more intense you can just write a quick external adapter to wrap around we have a ton of blogs and docs on making those as well so yes you can absolutely connect your smart contract to a database good question all right cool and with that we're actually going to jump into an example here so i want to start with the docs because the docs is really like i mean when i'm building chain link smart contracts it's really where i live um because it's it's it's really easy just to go to the docs and grab everything you need so we want to see how these price feeds work you know you can go to the introduction to price feeds part read a little bit excuse me more about it here um but we can go to this get latest price feeds and then we have our code for like truffle or build right here and then we also have this link that allows us to pop right into remix um so for those of you who are familiar and i have it super zoomed in which is probably good um for those who are familiar with remix it's a web ide allowing us to to grab um to deploy and see visually uh how a lot of these smart contracts can work so me clicking that link just pop this one in i have a bunch of other stuff because i've been uh playing around with remix for a little bit but yeah pressing this this button pops up remix here and it has all of the code for a smart contract right here so there's there's some comments to help you kind of figure it out but basically what it's doing is it imports this aggregator interface dot soul uh from the chain like github and just an important thing to note if you're working with truffle or buildler uh you can't import through github itself you gotta use you know this kind of mpm package syntax but it works for remix though but anyways so we have our contract we're calling it price consumer v3 we create this this instance of the aggregator v interface we call it price feed we grab the address of the aggregator v interface this is the address of your price feed and you can find this as well in this price feed contracts right here you hit that we can see all the different price feeds addresses for all the different um networks so we're going to be working on cohen and we're going to look for eth usd and it even pre-populates with this unless it unless we're looking at like something else ethious d did i grab the right one whoops yeah i had the right one in here originally nice um so ethioisd uh and what we do is we get the latest price and it's just a view function right so you don't even have to make a transaction do this view functions are just looking at the data looking at data um in a smart contract so it returns this tuple we're interested in the price so we're going to return the price and we're going to set oh yeah and since this is a view function it'll pop up right below so we compile it we're gonna switch to injector web3 metamask is gonna pop up can you guys see that oh this is my fake account so what is my fake password oh i did it right okay so metamask is going to pop up uh we deploy them great we can see can you guys see the uh when metamask pops up or no does that show up in a different window it might show up in a different window it's fine um but we can see the transaction here the transaction is successful and again you know this is looking at that that feeds.chain.link so this is going to look at the eth this etheusd price feed and again you know you can check this page out too it has a ton of interesting data you know like the deviation thresholds how often they're updated and the individual responses from the individual nodes uh which are really cool and you can click on them and learn more uh about them uh there as well so where is so we're back in remix so here's our contract and yeah as we can see it's just a view function we click it we see the price ethiosd here um why is the number so so massive you might ask uh it's because decimals don't work great and solidity um blockchains don't work with uh decimals here so we can see the price of ethereum is 357. how am i doing on time i'm doing really well okay great any questions about price feeds and yeah it's literally that easy like uh any any address that you want you swap it out here um and then you grab the get latest price function and you're you're welcome to work with it there yes it pops up oh awesome thank you any other questions here easy to implement trouble brings it up with methods yeah truffle i will be doing a truffle demo in a little bit how are you nodes added to a price feed um you can check out the docs uh to learn a little bit more about that as well and you can also build your own press feeds so you can do whatever you want to do um cool so let's go let's move on to accessing any api uh and then again you know if you want to learn anything about randomness everything is right here to learn about randomness let's do access any api so this is going to be the code where you can put in any api for example this one this is just a crypto compare api call um which oh did they change this oh right we change this to get a ton of data from here right so you can get the volume get the price whatever you want um and we're actually going to be looking at the volume of of uh ethiosd so we're going to call that api let's look at it in remix let's leave this one i probably didn't need to api consumer yep so here's the code and let me even try to stretch it out a little bit here so we can see a little more and it's the same it's the same format um just with one extra piece so we're importing our chain link client our main contract is inheriting chainlink client we have some some global variables here and i'm actually going to skip the constructor for now but let's let's talk about this request volume data method here so the first thing that we need to do to make a chain link request and um the this is actually exactly what the price feeds are doing just with multiple uh api calls so this is a this is the this is kind of breaking down the price feeds a little bit here this is how you can call any api um and then if you wanted to build your own price fee for example uh you would just do this multiple times and then aggregate it on chain so first thing we need to do is build this um chainlink.request object right and so in this chainlink.request object we call this build chain link request function oh and then you can see in this function uh we're actually not adding any parameters when you're doing a production um project it's uh with a lot of these different oracles it's usually good to add like you know job id and what is job id bytes32 yeah by 32 job id oops um address oracle you know maybe string memory url you know etc so that you can call this um for many oracles and and many different urls and different paths and stuff so so you can call this many times without having to write a new function you know per node um but yeah so we build this chain link request uh object and we just pass it the job id uh which i'll talk about in a second the address that we want to get the data to come back to which is this smart contract and then we define the fulfillment function uh which is actually defined down low so what we're doing here is we're saying okay this is the job id that i want uh this is the smart contract that i want to return to uh so we're actually choosing specific oracles and then even below when we send it send chain link requests we choose the oracle that we want to send it to so when we make these calls we're actually choosing the oracles and we're choosing the jobs um associated with them so the question then becomes okay well how do i choose jobs how do i choose oracle's i mean use what's called a node listing service something like market.link uh is an example of that you can look for like a get um a job that returns to get you in 256. for jobs we see a whole bunch of jobs here right so these are this is on mainnet we would probably want to go to coven but these are all jobs um these are all jobs uh from different oracles that actually return a you in 256 um [Music] returning you in 256 and we can learn more about them and we grab like their job id and the uh oh it's a little bit over here and the oracle address um so we and that's the way we specify this job right so if you want to grab um [Music] if you want to get like a boolean you know there's different jobs that do that or if you want to get like a you know bytes32 or you want to do a post i mean what if i just do post you know these are it's really um you can kind of get lost in here a little bit looking at all the different types of data that these return now these are some of the more generic ones um but we can look at you know some more interesting ones so this is a job that returns data from alpha vantage this is a a job that returns data on from a storm glass api so you can kind of browse through this and see not only are these generic ones but there are these more interesting ones like this best liquidity pool and if you want to build your own adapter build your own job you can absolutely add it in here yourself and we can see you know if we go through adapters these are these customizable functions that people have actually built and added it here on market.link and you can kind of browse through oh this is really cool i think this one must be new um this is a really powerful javascript python uh cryptocurrency exchange um uh package that's really cool um but yeah so iost external adapter oh that's fantastic so there's more and more of these being added to do all these customizable functions but yeah so you grab one of those i got lost a little bit you grab one of those you grab its job id and you put it in here and again the job id is going to be associated with the type of data that it returns you say this is the smart contract i want the data to be returned to and this is the fulfillment function the fulfillment function excuse me the fulfillment function describes what to do once you have that data so we're not going to do anything interesting here uh in our fulfillment function you know this is kind of the boilerplate for what they're going to look like we're just going to set our volume um our volume variable to the volume that we get from our uh requests so we're not gonna do anything really interesting here but you can put in there whatever you want to say hey once i get the data back here's what i would like to do so uh anyways once you create a request then what you're gonna do is you're gonna start adding your adapters and this is also where you could add your external adapter these are the pieces where it says okay once you know once we kick off and we get this data here's what i would like you to do with it so this job id that we specified up here oh yeah we already specified an oracle and a job id here this job id that we specified it's it's just a really simple http get request that's what this job id is going to do however the parameters are left open for us to input the url and everything that we want so we do this request.add we add the get the get adapter the http get adapter and then we add the url string here and then again if you want to learn about more adapters which ones you can use and how to use them uh down here we can go to adapters and all the information is here uh with examples on you know how to build them how to use them uh everything you need to know is in there so we're gonna add that adapter in here then we're going to add the path um so the path is just the and then actually there's that api call yes it is so the path is going to be the json uh key path to get to the um to the value that you want right so we don't want to grab this huge massive piece of data in our smart contract it's going to cost a lot of gas and it's a really big object so we only want this raw eat usd volume 24 hours so if we go in here you know the first key is raw eat usd volume volume 24 hours so we're looking to get this value here so that's what path does it gets the path in the json object and then we are going to multiply as well by this times amount uh and there's a adapter for multiplying it's called times so we're going to multiply it by this big number and again the reason for this is because decimals don't work so great and we want to shift this decimal over then we send the chain link request and this is where we actually input the oracle address that we want to use we add the request and we add the the link fee this is like the oracle gas fee you can find that also on market.link for most of them right now it's point one link for the get uh for the oracle gas for the chain link gas fee so we send it then it comes back and fill let's actually go compile this and let's make a call again this is on the coven network here so injector web3 deploy deploying this contract here and we'll give it just a second to finish populating and it looks like it's here so now i'm going to intentionally do something to get an error because in the beginning you'll probably run in this error a lot so i'm going to request the volume and we're going to see this gas estimation failed uh the reason for this again is because we need the the chain link gas we need the oracle gas added to our smart contract so we actually have to fund it with links so we copy the paste excuse me we copied the address there and let's just send it you know three for overkill um so we're sending our smart contract three link we're funding it with links so it can interact with these chain link oracles it can interact with these off-chain um these off-chain oracles so we funded it with link now when we call this request volume data which again is the function right here um now it's actually going to pop up because it's requested because it's funded with link we can actually confirm and this is going to kick off our request to that smart contract so this is the smart contract here we can see it's funded with link uh we can see this is the contract creation one minute ago and we just sent this request and this is etherscan by the way this is a popular block explorer for those of you who are new and it looks like it just about finished so um so something important to know if we hit this oh never mind it already responded but when you hit it when you hit this volume button and when you kick off this request volume data function you won't actually get an immediate response and the reason for that is we actually when we make this request we actually are omitting an event on chain that the oracle that we specified is looking for so the oracle sees this event grabs the parameters of what you're looking for goes and grabs the api itself and then in an external transaction post that data back on chain so it actually has a second transaction that the chain link oracle itself does to give you that data um and so it looks like it went really fast here but we can see that volume data here and again it's multiplied to push over the uh to push over the decimals so so those are two of the the main features two of the big features those price feeds access any api you'll see that the chainlink vrf has the same request and receive structure where you send a request to get the random number then you receive the random number from the oracle responding so i'm going to pause for a second to look at some questions in the chat and then yeah emily i'm not on youtube right now if there's a couple youtube questions i'm more than happy to answer some of those uh so from derek uh can we add our erc20 and create a link to market i'm not sure what this question means you can absolutely create your own erc20s that's um yeah you can absolutely do that uh if you want to flush that question out and ask again happy to answer it here will you show how um how we do a bridge to banks and visa to pay starting from internal amounts of tokens or cryptos so i won't go over that um but if you look we have a number of these um external adapter blog chain link and then if we google it it should be the first time pops up yeah we even have a video on doing it but external adapters are going to be what you're looking for here uh and this can this is going to be that that easy functionality to interact with your your bank or your visa or you know there's a paypal external adapter whatever you want to do these these payments starting from internal amounts of tokens or cryptos yeah so external adapters are what you're going to look at to do what i think you're trying to do there question from youtube did i see that correctly use continuations in solidity that means you have asynchronous control flow ah yeah so um so yeah so actually pretty much so as far as the control flow terminology i'm not exactly 100 percent of it but yeah so you can think of this as an asynchronous um uh an asynchronous architecture because we we make that call and you can almost think of almost i'm using this very loosely you can almost think of this fulfill uh function as like in a weight right like super super loosely uh because we need to wait for the oracle to make the external transaction back so every single transaction on the ethereum chain is done synchronously in in eth 1.0 need 2.0 this will change uh everything is done synchronously however we can do it asynchronously by sending these requests off chains so that is a great question you did see that correctly and yes this is an example of like an asynchronous control flow do contracts need to hold link in order to request jobs from the oracle's or can the feed be paid in ink nice that answered the question yeah so it's link thanks for the link to the banks yep absolutely so yeah so those are really good questions so you'll you'll see you saw on the price feeds that that one didn't actually need to get funded with link and again the reason for this is because those um contracts they already made the request so so somebody else made the the request already um and it's just on chain for you to see so you can think of the price feeds almost as just this volume button right here right without you having to make the request yourself what happens if there is an error on the oracle and the fulfill is never called back well that is a fantastic question what happens if there is an error on the oracle um i i kind of want somebody else to answer um because i feel like hopefully at this point i i have drilled a concept about the importance of something so what happens if if everyone's brave enough to venture an answer here um how do you protect how do we protect ourselves against oracle's not responding how do we protect ourselves against oracle's you know giving bad data or an accurate data or no data what do we do i'm looking for free to unreach and answer the question what's that what was that i'm just i was just saying the hackers can also mute themselves and answer if they feel comfortable oh well well andre actually got it here yeah by using multiple oracles so that's exactly right andre yeah thank you for for posting that so it's um so decentrality right um visa chain.link decentrality is going to be going to be the answer to a lot of these questions right the reason that blockchain works is decentralized nodes right and it's the same thing for chain link if one or five of these go down or 11 of them go down or excuse me 10 of them go down nobody cares it's fine well okay people care and you're probably going to want to use different nodes moving forward but the the network will continue you know strongly securely so this is why when you're developing using one node is fine but in a production environment you absolutely absolutely absolutely do not want to use one node you know for that exact reason you know what happens if there's an error on the oracle um so really good question any other questions before i move to the to the truffle example all right cool i'm gonna move on these are good questions so far team keep it up really excited to see what you guys build sounds like you guys are really getting it here so let me switch screens so remix is a great tool for for kind of easily uh seeing the two uh contracts visually uh however you know when it comes to testing and maybe um bill having your your development environment a little bit more similar um there's a lot of really popular tools that you can use like truffle like buildler um to do it in like a vs code or whatever text editor that you want so truffle is a really really popular one um you can install it with i think it's npm install i think it's this um i'm not gonna do it because i've already installed it but once you have it installed you can absolutely you know add um actually let me flip back over to the docs real quick oh i switched back yeah you can add these these smart contract pieces with you know mpm or or yarn and then what we're going to do actually is we're going to build our own is we're going to pull a smart contract kit slash box which is a truffle box which is a really easy way to start up a project using truffle so it has just a lot of boilerplate code and we do that with truffle unbox smart contract kit box and what this will do is it'll download and install um it'll excuse me it'll download all this kind of boilerplate code into our into our development environment here so we're just going to give it a second and while it and while it actually populates here we're going to flip back and we can even go and this is an open source box so if anybody wants to look at this or make a pr or update it to something else you know all the code's right here uh the docs are here the readme is here um uh all the commands that we're gonna run are here there's also a blog on this so we absolutely can can do all that let's flip back now to run this and i'm just going to do this in another terminal while that's still on boxes there are two environment variables that we need in order to make this work we need uh mnemonic and we need um rpc url so your mnemonic is going to be the mnemonic phrase of your wallet so this is going to be you know you can run you can put it in like a dot bash profile or something but you can also do export mnemonic equals you know blah blah blah blah blah blah like whatever right uh and that's going to be how our our smart contracts know to deploy from those addresses and then the rpc url is going to be your ethereum node that you connect with you can find these from infura um or other uh node operating services really easily and this will be just like you know www dot excuse me https www.infura you know dot covan or whatever uh test night you're gonna be on dot io slash blah blah blah blah so you can find those on ampera you're going to export both of those you're going to set those as your environment variables so that your code can actually work and great our our um our stuff is unboxed uh i need looks like the code feature is a little weird here oh oh no it's already open well okay got it so so we have all these uh all this boiler plate um unpacked into here so we have a really simple contract in here this is where all our contracts are gonna be this is doing the exact same thing that remix is doing just a little bit more in depth so instead of um you know calling that volume data we just have this crate request 2 which actually just has all the parameters or a whole bunch of parameters in here that we can call so this one's a lot more customizable but it's doing the same thing you know it's making the request here um it's adding the adapters here and then it's sending the channel request and then again we have a fulfill function below so it just has all the same boilerplate pieces just a little bit more in depth so migrations is going to be how to actually deploy um and anytime you add a new contract you got to define how you want to deploy it this makes it really nice because especially when you have a lot of smart contracts that you want to deploy you can define everything here known modules or node modules some interesting helper scripts let's actually look at a simpler one for now like for example read data so this is going to be an easy way to uh read the data off of your contract and uh and then some other you know some testing which is really important and the readme cetera so to compile uh these contracts because this is really what we care about we're gonna run truffle compile and it all gets compiled and the version uh that we're gonna use is 0.0 uh 0.6.6 which is in this truffle config here and this also has a lot of the this is where you're going to define the different networks that you want to use and i have nine minutes left okay cool this is actually where it's grabbing the mnemonic and the rpc url from your environment variable so now we can do some more interesting things so we can run uh we can migrate them or deploy them with this truffle migrate command but we also want to choose the network it actually defaults uh to our dev environment which is like a local ganache we actually want to run it on coven my rpc url right now um is pointing to a coven network so i'm going to do truffle migrate network live it's actually going to migrate this it's going to deploy this um this contract on chain we can see like the transaction hash the account which is my test account here and then the contract address of this newly deployed smart contract so it's actually deploying two it's supporting this migrations contract that we need but it's also deploying my contract which is the interesting one that makes this api call so so cool so once it's deployed we need to kind of follow that same procedure we followed in remix so we actually have some helper scripts fund read request to do all the this for us if you want you can go on the ether scan grab the address or you know pop up grab the address go into truffle console which you can learn more about that in truffle docs um uh but yeah so we want to fund it and i'm actually going to adjust this be a little bit more liberal if we want to make more calls to uh let's just say three link so we can run these we can run these scripts uh with this command truffle exec this is saying hey exactly um execute these commands through truffle we do scripts slash fun contracts fund contract dot js and then we're going to network live and so this is going to be the same thing so we're going to be funding our contract with three link here and we can even see go to ether scan let me switch to etherscan coven we put our contract in here we can see we just created a minigo through truffle we just funded it so it should let's find our our hash it should oh yeah it's fun now it should be funded with three link which it is so so perfect and we can flip back over here clear now is request data and this one's where all these parameters are actually lying i'm going to show you again by flipping back to here real quick we want to make a get request on coven so we could go uh on market.link search for you know get request let's just grab um this oracle and you can't see it but i'm popping these addresses into my vs code the job id and we're going to share back over here to olivia's code so i just added the oracle address and the job id in here we have the url that we want to use the the fee that we're gonna pay the the node the path um the time so this is literally the exact same pieces that we saw in remix and then we call it excuse me with with this code right here so i believe i saved that so now i can do truffle exec scripts and then hopefully i copy pasted the uh um oracle address correctly scripts uh request data network live and now we're creating requests on this contract it's the exact same thing as remix so believe this is the is the hash here and it is and we can see ether scan is populating this request so it's been successful and again if we if we do if we try to read from it right away it won't actually be able to because uh we need to give it a second for the chaining note to actually respond now we're back here and we can do this read contract which is probably the simplest one shuffle exec um recontract network live and hopefully i'm not doing this too quickly but we should get the response here and yep we get the response 357.32 which again you know we we multiplied by 100 uh so the decimal place is two parts over so uh that's how you can work with chain link and truffle an easy way to get started uh if you're looking for um uh other like places to how other people are doing it you know we have a ton of blogs that show you how to build some of these things and each of them have um you know they're the repos in here with all the code that you can you can fork you can do whatever you want um the blogs development page is a great place to grab um coding tutorials and and other projects and if you look into um the chain link docs you can even see example projects from winning hackathons uh you can go into the github you can see kind of all the code that they made if you're looking for some more inspiration on how to use chain link and how other projects use chain link and how some winning products she's channeling so the chain link hackathon projects will go in here very shortly releasing that on friday but um yeah those are the uh that's that's gonna be the pretty much it for the tutorial here and for the getting started to using chain link i know we only have a couple minutes left but happy to take any other questions you can feel feel free to unmute yourselves if you have any questions for patrick otherwise um you can also reach out to him in the chain link sponsor discord channel with questions and queries on anything okay cool thanks so much patrick that was really great and thank you everybody for joining as i mentioned you can reach the chain link team in the discord and yeah we are really excited to kick off youth online this friday awesome thank you so much for having me emily and uh and thank you everybody and like emily said you know we're in the discord uh so if you have questions feel free to jump in there and uh really excited to see what you guys build cool 
everyone thanks for joining we're just gonna wait a couple seconds as the stream goes live onto youtube let's get started hey everyone good evening good afternoon good morning depending on where you are uh we have alex here from badger dao who's going to be doing a workshop on build yield farming strategies with badger dao um questions go in the zoom chat but also feel free to come off mute and ask your questions live alex will love to engage with you live in that way um and with that being said i'll pass the mic off to alex awesome thank you so much for having me and uh it's a pleasure this is actually our second money for badger dao personally it's been like my 10th uh if global event i think if global is awesome and so i'm just going to give mad props to all of the hackers participating i'll do a quick introduction to badger to the prizes we got and then i'll get started into the workshop ultimately we have a bunch of links make sure to check the link at the bottom of the youtube description there's going to be a link to this resource that i'm showing right now as well as a link to the discord we even have a podcast about the badger money sorry akamani and the uh badger technology that you can build uh during the event so i tried to really cram a bunch of stuff and i'll just go over it and feel free to stop at any time if you have questions that are pertinent otherwise if you have other questions that are less fortunate we can do it like a quick q a i'd love to uh make this session as much as interactive as possible so feel free to a mute and just uh ask away ultimately uh badger dow the main mission we got is to bring bitcoin to d5 and the way you you start doing that is by building yield farming strategies so that bitcoin becomes a productive asset it could be by borrowing uh stable coins through bitcoin could be leveling up could be staking it farming you know a curve or creating a locked voting uh uh vaults uh the main goal is to do that in a fully non-custodial and transparent way and uh today uh money 2022 we're bringing you uh some of our newest stack uh which is going to be badger vaults 1.5 as well as the badger rewards manager uh i'm gonna go over the prizes so if you're gonna participate in using any of our technology we got a pool price of two thousand dollar so any valid submission uh basically any submission that uses our tech or that builds a website that uses our tech is going to be valid for the pool price so if you're a web 2 developer this will be your entry level bounty a couple ideas for you would be to create for example a dashboard to track pending rewards from one of our contracts called the badger awards manager which we'll go over during the call otherwise you could track the roi of our badger vaults and i'll give you an example here on the charger ui we have some ideas about how to do that but we love to see how you will do it ideally through an ipfs completely uh permissionless deployment and um we also have ideas about tracking real-time returns of our vaults through our vaults 1.5 technology and then a demo will be the badger ninja so if you can build a badger ninja we'd really love to see your submission you're going to be eligible to the pool price of two thousand dollars and uh we also have a very aggressive hiring policy where any competent developer will at least entertain a future conversation about working with us that's how we find uh the best talent that said our best uh rewards uh so our best prizes this uh akaton are going to be the uh yield farming strategy uh with badger 1.5 mix uh if you submit the best submission you're gonna be eligible to win two thousand dollars and uh the second best issues will bring a thousand dollars a few ideas will be to build a locker for example uh you can check our bv cvx if you've never checked our work at badger just go to app.badger.com and if you go on uh we have multi-chain some of the newest stack is on phantom by the way if you want to go ahead and check uh all of our source code is all the public or contracts are verified but if you go on ethereum you'll see that one of our biggest vaults is bv cvx and so you can literally just go and see how bvc vx locks its token and you can apply a similar ideas to other locking bolts such as dbv aura which is upcoming the bv ball for balancer they literally just launched their uh tokenize lock so that could be interesting other ideas are to lever up the bitcoin pharma compound or use ave some of the coolest stuff you can do and you could also win some connects the uh prizes would be to create an lp strategy for connext where we deposit uh badger tokens uh on the uh mainnet or let's say the arbitrary room or the optimism endpoints of a connects bridge and that we allow to give liquidity to the next uh bridge contract which would be really cool other more advanced ideas are to build hedge strategies uh you uh this is pros only but ultimately we'd really love to see what you can come up with during this event so we uh we give a very broad uh idea of the farming strategy and i'll go over the tech that you can use to make that uh really easy to get started and then obviously you can bring in your own knowledge to uh push that to a world-class level and in terms of the second uh bounty that we're offering is the badger rewards manager bounty uh the rewards manager which we'll go over during the workshop is a tool to uh fairly distribute rewards uh linearly so ultimately addresses uh the issue of uh you know we are we deposited uh in a vault how do we distribute extra rewards in a way that is completely fair completely transparent and completely unchained so no miracle trees no you know no fake trust no trust pure math and uh so we'd love to see how what you can build uh with that uh technology uh some ideas that i got for you are the idea of having a linearly vested equity distributor so let's say you build your own company and you start to building on it and then over time you wanna uh distribute the shares that you're earning over time that could be a cool idea the other one would be to build a tool to beat pull together why don't you all uh deposit on pull together and then you fairly distribute the splits based on how much you contributed so that uh you make it easier to you know to win that could be an idea then you can have a competitor to our own vault bv cvx just build a competitor and use this tool to fairly distribute uh bribes fully transparently fully unchained and lastly you could build a generalized auto compounding strategy basically a strategy that given uh certain uh tokens and a certain vault that gives them uh rewards uh it sells that to get more underlying so if any of that rings a bell i'm gonna start uh going over the technology if there's any question feel free to interrupt me we do have a link about the uh the resource here thank you tritium for sharing that and uh that way feel free to use it my main goal with this uh this conversation is just to inspire you with some ideas we have a 40 minute video that we made only for this hackathon where we talk about all of the ideas of this technology why we built it and what you can build with it so if you're interested in that again check the uh the akamai resources and i've even left you with the past winning submissions so if you're truly interested in winning our prizes you can literally check what uh other people uh wrote last year's in literally last year's arc money and how they won this was a submission by ayush who's a part of a core now in a badger so we fired them for over a year at this point thanks to this event so if you're interested in pursuing a career in web3 or you just want wanna build some cool tech uh this is definitely the right place for you now without further ado let's go over some of the core technology and uh in order to get started you wanna you uh you're gonna want to use the mix 1.5 which you can literally just click or you can go on badger finance badger vaults mix 1.5 i'll just show it to make it easy you just go on badger.finance which you can literally google badger finance github and then just type 1.5 in the find repository and you'll find the badger vaults 1.5 which is the underline code which is audited by quan stump we got top rated for tests and top rated for documentation so go ahead and check the source code and by the way i'll give you a hint if you do search the source code i'll even left you with like a 40 minutes video of me talking about what we did and why we did it but ultimately badger 1.5 is a improvement of the usual yield farming vaults that allows to track apy in real time and it also allows to uh basically um it makes it easy to integrate with the badger tree which is the way in which we emit tokens and ultimately makes a better developer experience and so if you go and check the badger vaults mix 1.5 which is how you will start writing your own strategy you'll see that we have a bunch of folders again we have a demo submission here so you can just check how a valid submission will look like and uh you can also watch a video where i talk about uh in detail about this but in a very short uh what is a vault system you basically are going to have two contracts one contract is called the vault and you'll see that i literally have the file called the vault and funny enough it's basically empty and the reason is because we're using um imports this is the way you import stuff on brownie so we're just importing it through the other repo that i showed you before and tampering with this file would violate the trust of the vault because it breaks the audit right if you change the code it's no longer audited so you can't change that but uh what i'm telling you though is that we really tried our best to abstract away all the complexities to just have you focus on the yield farming so ultimately there's a lot to be talked about the vault and if you want to dig deeper again uh there's tons of links here and you can just poke around on the github and hopefully uh i gave you enough of a curiosity to have you get started but ultimately to write your mix you're gonna go on the my strategy.soul file and uh the my strategy.solve file it's ultimately a yield farming strategy and uh some of the stuff will be familiar some of it may be new but ultimately you're gonna have an initializer that's because most of the contracts you deploy are upgradable uh one day they want but for now we do uh upgradable contracts just to add that extra layer of safety and so this is the equivalent of a constructor you just do your initial one-off uh setups one initial uh configuration etc do we have a question no just random mute okay so uh next up you can set up the name of the strategy really simple just set the name then you can set up the protected tokens this is the list of tokens that your strategy may be holding at any time and that you don't want to allow anybody to sweep away and so adding a list of the tokens you're dealing with here is basically mandatory because it's a security guarantee to the end user and then you're gonna have your let's call in your lifecycle functions one of them is called underscore deposit this is how you uh this is the function that will be called when you need to invest a certain amount of want where want is the token that the vault is receiving and you're going to be investing it in a protocol a simple example i got for you that i was working on here will be the gauge for example let's say you're writing a simple uh curve strategy let me get you that the example for the for investing will be very simple and will be will be to literally just deposit all the tokens in a gauge you can do a similar thing on ave where you will deposit everything with a lending pool if you set up you know the connects router probably there's a function to deposit that is pretty similar to that and so that's what that's what it would look like on a finished strategy then you have a function called withdrawal which is a function used mostly for migrations or for security purposes and when you call withdrawal that's when you need to be able to unlock all the tokens withdraw all of them and make them liquid in this contract so that they can be sweeped away then you have withdraw some this is used for a day-to-day operation of you know withdrawing redeeming shares etc and it's very important that anytime there's a loss let's say you'd have to pay some interest or there's some slippage it's extremely important that the person that is calling this function pays for that loss otherwise you are socializing losses which is a vulnerability and your strategy will end up on direct unused leaderboard so make sure to not do that make sure to uh let this person pay the loss there's an inherent slippage check in our base strategy if you dig deeper in the code you'll you'll find it but ultimately that's the one thing you gotta consider uh this is tendable it's just a check of whether uh we're supposed to attend the function where uh sorry the strategy where attending is just the act of rebalancing it so that you're optimally invested uh you hopefully invest in your token and then we got harvest and we're gonna have a balance of rewards and the reason why i skip a little bit is because you start to see this object here called token amount token amount is just the struct of the token address and an amount and the reason why we return these is that on the function harvest which is the function that is meant to claim some of your crops some of your rewards and how to compound them or emit them or do a bunch of stuff um you want to return the amounts that were handled so that we can if underscore call this and if underscore call is like an advanced concept but you will google for something like if underscore call on the gef node and you'll find that there is actually an operation that allows you to basically simulate the transaction and get the optimistic return value of it and in doing so you can actually compare this harvested value here with the value of the balance of rewards that is uh here which i'll talk about in a moment and in comparing this you can do you can realize this idea that i showed you on badger ninja which is the idea that i can have a vault let's say bvuxd which is our live vault we go out on phantom and you can see whether the ox solid that it's been uh uh harvest uh sorry that's been cropped it's been farmed through depositing will be transforming to the oxd here uh in a way that is fair and in a way that makes sense and that that basically doesn't get wrecked so ultimately that's the point of this system is to allow this entire dashboard to be generated automatically without any input because of this token amount and so that's one of the advancement of votes 1.5 but it's also one of the requirements that when you write your own strategy you want to uh write a balance of rewards that will figure out what depending rewards are not the rewards that are currently in the contract but also the the the rewards that the contract could claim if they were to harvest so that we can have enough chain comparison between the balance of the rewards and the harvest optimistic return value this is optimistic so there's still a risk we still have to you know send the transaction to flashbots protect it etc but ultimately in doing so we can have this elf check in a way that again allows us to scale uh the technology better and once you're uh processing your harvest uh you can make the decision of whether uh you wanna auto compound which is the idea of selling your token uh it could be your reward token for more want and if you want to do that then you will report to vault the amount that you gained that's what you will do so it wouldn't be zero it would be whatever you got or otherwise you could emit the token which is the idea that some tokens you don't want to sell an example will be curve why would you sell curve you know at 10 cents when you believe in the product so instead of selling it you could process extra token which is the idea that you're going to emit it so that the depositors of the vault will be able to claim it later uh through a contract called the badger tree which in our case for our rakatan is going to be called the badger rewards contract which i'll go over momentarily uh if there's any question about the strategy and how to build it let me know otherwise i'll continue but ultimately once you wrote your strategy uh you are uh 33 percent of the way there as you know uh you've got you gotta write your tests and so that's basically the biggest thing you're gonna have the setup folder and the test folder the setup folder is uh made in a way to have two files the config file and the strategy resolver the config is basically where you will put whatever token you're dealing with a account that has a bunch of it so that we can transfer it for testing and then some settings about uh performance fees you can set them to zero if you don't want these are our default ones so we just leave them there unless if you've got the registry you probably will never use it in prod unless you work with us but this is uh for more advanced stuff if you want to check go ahead and look at what the code does the second part of the setup will be the strategy resolver this is where things get a little nuanced but ultimately the strategy resolver is basically a tool that has a bunch of hooks you can see hook after confirm withdraw hook after confirm deposit hook after earn confirm harvest and these are basically books that are called in our testing suite so that instead of asking you to write whatever test you want we already wrote the majority of the tests here in test integration we already wrote them for you so all you gotta do is you gotta customize that a single file so that the tests are done uh automatically for you and you can see that here we got a function called snap dot set deposit and that's because we're going to do the deposit and then we're going to run a bunch of checks and you can uh reverse engineer the code if you're curious about it but ultimately after all the checks that you get for free run you're going to have the hook after confirm deposit fire and that's where you will do a few tests such as verifying that the tokens have been added to the gauge verifying that the you know the balance of the strategy is reduced but the balance of the lp token has increased etc so that you can verify that your strategy is working as intended without having to write a lot of boilerplate code and a lot of setup if you want to dig deeper i left a link to this resource here i'll very briefly show you maybe watch the video again if you need further details or again just poke around on the mix but ultimately the strategy resolver has these uh confirm functions that again are automated tests and the way you would add these checks is by using uh this is given to you actually it's called self.entity but what you will run is you would add a strategy destination which is in the get strategy destination so i'll show you a demo a demo uh that i already built here in um setup and the emitting strategy resolver you basically will see that i got these uh the file which is really similar to the other one but i've added a new destination called gauge that's because as i showed you before in the deposit function i'm depositing in the gauge and so what you would expect is that here in the confirm deposit and for some reason as you can see here i have a comment it's done in earn so it's actually in the hook after earn i'm going to have a test here that says that the balances the after balances of want in the gauge contract needs to be greater than the before balances of want in the gauge contract and so this sounds uh almost like natural language because ultimately what this means is that we are snapshotting the balances of the want token which is the deposit token of the vault in the gauge contract which is the destination that we added up here and we're comparing that it basically was increased from before which is before we call the earn function the which is the function that loads the funds from the vault to the strategy so before we compare it with the after and so with this uh suite you're basically able to construct this set of comparisons that will save you basically having to you know write all of the the stuff and you get all this test by default and the way you will do it you can see it here but ultimately you will just if you need the after balance so after the urn you will just call after the balances of the given token in the given destination address and if you need the b for balance you will do b for the balances etc etc i'm seeing that i got uh maybe another 10 minutes so oh that's basically the most complicated thing you're gonna have to do and the reason why is because all these tests of which you basically only have to write one which is the custom one which is gonna fail by default uh all the other tests are basically already set up for you and all you gotta do is set up the snapshot resolver so that you add uh extra granularity to all these checks so that's basically for the badger volts mix 1.5 we got a second mix uh and the second mix is basically uh meant to be used with the badger badger rewards so i'll just show you what the badger awards looks like um to give you an idea it's basically one contract called the rewards manager which allows to fairly distribute rewards uh over time that have been accrued over time and what you'll see is that it has a specific api that is actually fairly uh intuitive you have a way to start next epoch which is basically um the compromise that we had to do in order to allow for uh infinite types of rewards you can have a million different tokens here and the reason why we can do that is because we subdivide uh reward periods by epochs so that's how that works then you're gonna have your typical accrual functions which are ways in which we calculate the um amount of points that somebody has earned based on uh the time they spent in a vault and uh then obviously we need to know how much time those points have to be accrued for and uh but these are more internal functions ultimately the way you wanna look at it from the end user you're gonna have a function called claim reward and so that's how you get your reward you're going to get a reward for the given epoch id for the given vault and the reward is going to be of a specific token and it's going to be sent to the specific user so this allows you basically to claim on behalf of anybody else and just send them the token to to their own address and there's also there's even like an optimized guess function but you can just poke around and see that the other question would be how do you add a reward well you just have a function called add reward and that's how you add a new reward to a given epoch for a given vault and of that specific token of that specific amount and you can see that it's just a transfer and we add it there and then the other the last piece they would want to figure out is how does this contract become aware that you have a balance that basically you will be entitled to some rewards and that's through the notify transfer function so a vault will have its own deposit life cycle method it will then have a hook that after the deposit was successful it will notify transfer to this rewards manager and then the rewards manager will basically handle the uh uh the operation whether this is a deposit a withdrawal or a transfer etc so that uh this contract can become aware of the fact that the balance was uh changed and so that users can end up accruing their points and as with anything that where there's points involved and the the biggest example would be like a landing protocol anytime there's points involved we need to accrue first so that the balance the internal balances uh and the internal points uh are changed before we change uh you know the total supply or the shares or the uh balances that a end user has uh because otherwise we would uh basically miscalculate the rewards that they're entitled to and again um if you spend uh enough time on this you'll find that uh it's actually generalizable we built it in order to allow fair distribution of rewards but this can actually be used to basically do air drops based on contribution let's say if you spent enough time on a certain uh in a certain vault or you did a certain action enough then we're going to give you a reward it is a way to also fairly distribute uh staking rewards and so it can be used for more than just the base use case that we did and if you go in the tests you'll see that we have like a 70 plus tests that show you a bunch of the use cases that you can go through and you can use it for like we got all this life cycle stuff which again shows you how you could be using it and it also gives you even uh gas reports if you're if you're interested in that so ultimately uh for the badger rewards we're mostly curious about what you guys can come up with uh because uh it actually lends itself to many different uh use cases uh the last piece of technology i'll briefly mention is the fair selling code base we got a way to integrate cow swap uh in smart contracts uh which is uh uh really cool and so uh in uh our use case is to process bribes on a uh for for bv cvx it's basically a way to uh you know limit the power of a multi-sig so that the multi-sig can be used to uh perform swaps but it can't be used to perform transfers to give further security guarantees to uh uh vault depositors and so uh if you're interested in integrating how swap in your uh in your contracts or you just wanna uh check out how we handle bribes non-custodially uh this is also another resource that you can check and that we are very curious about uh seeing uh what you can come up with ultimately akman has been an amazing experience for most of us we have a discord channel set up just for you just uh poke around it's here in the get started resources there's gonna be a link in the youtube video as well so make sure to check that out we're gonna be available 24 7 to answer your questions you can get started with the mix 1.5 and then the last will be the badger rewards mix which uh you can go and poke around but it basically is the evolution of the 1.5 mix and it actually enables two different strategies and a meeting strategy that is uh integrated with the badger rewards contract and it's gonna emit the token so you'll see here in the harvest that it has a report to vault zero but it's gonna process extra token for the amount that was gained and then you're gonna have an auto compounding strategy that this time is unused but if you're interested in selling the underlying then you could write a generalized strategy that deposits into the other vault and then given the outputs from the other vault it auto compounds them for more underlying so if you're interested in uh building your farming strategy in uh in d5 or you want to explore the possibilities of what it means to distribute rewards in a fair way this is your opportunity as we said we got uh two thousand dollars in prizes for the best submission for yield farming the second best mission gets a thousand dollars same deal for the rewards manager two thousand dollars for the best submission one thousand dollar for the second best and we've also got a pool price for any type of technology that you build that uses our tech it could be a website to display data or it could be some exploratory use of the technology we're really curious about what you guys can come up with and hackers we i wish you the best and know that any value submission is something that we're gonna be looking into sending you uh feedback and potentially that can be the start of a long-term relationship where we ultimately on board you to the badger dao thank you for your time if you have any quick question i'm happy to answer it yeah we did share the link in the resource and i believe it's going to be on youtube as well we got the link to the uh discord last thing i'll shill is we do an office hours on friday as well on our own discord so if you're interested in that just feel free to again follow up through the resources giving you i really appreciate the time that if google has given us and i wish you the best of luck in participating in the akaton awesome um thank you so much alex for doing this awesome workshop on badger dao and your involvement in hack money um prizes and resources are super interesting uh and yeah once again thank you for putting in the time for this and for the rest of you thank you so much for tuning in into this workshop we do have um a couple days worth more a couple more days worth of workshops over the next couple days so hope to see all your faces there as well and with that being said i hope you'll have a great rest of your day or evening morning wherever you're from thank you very much have an amazing one 
okay periscope is up standby for YouTube okay YouTube is up we are go awesome now we're gonna give maybe one more minute for people that are just joining and then we'll get started and like always please put your local time in the chat we've got people from everywhere I think even more countries than we had for our last event have applied to PACA fest so it's always cool see vocal time for me 11:00 a.m. let's see who gets the latest local time 8:30 PMS what I'm seeing its latest alright we are gonna get started thank everybody for showing up and like I said this is a hack a press event leading up to the kickoff next week kickoff is Monday at 12 noon Eastern hopefully we can all see you there before we get started just a reminder that if you want to take part in hack efest you do need to stake if there are any issues with that reach out to any global team member if you don't stake we will be kind of trimming out the slack just so we have only hackers that are participating over the next few days yeah so today we are starting off with the solidity and Fiddler's workshop you're not familiar this is the right place to be you're gonna learn a ton from Patricio he's the CTO and co-founder of nomic labs and they've been doing a ton of great work specifically with bid ler and we're really excited to have him here and sharing some of his expertise so without that without further ado I'll let you co take it away and he needs to be on nugget that's it hey I got a problem with zoom well I couldn't undo it myself but hey everyone thanks for being here I'll translate patricio from one side is Argentina this is for sure it's going to be mostly around how to set up anything smart contacts developer environment this is not gonna be like solidity class we are not going to go through the different aspects of the language that would be like free worry this for me like means us here for now we're talking about solidity syntax so instead of that we are going to follow a tutorial now it's going to leave you with a ready to work environment so you can continue your learning by actually writing some smart contacts test them and maybe it will be language for this tutorial we are going to assume like basic knowledge about SQL so words and section is and how the very basic knowledge about how the network works like - and waiting for for transactions to be mine what's a blob chain well if you are not super confident with those concepts I think this workshop is still worthy it won't go very deep into the technicalities of the Seaview so I guess you can still enjoy most of it so the everything that we are gonna do is actually already on the wiggler side inside is built layer that is intentional dot there / tutorial so if you get lost or if you want to go over this again after this workshop you just come come here and everything is written down I'm gonna be using this as a cheat sheet myself probably so we are going to be following these two terribly close very closely so first I hope that you receive notification or message asking you to set up your environment so in business is based on no changes it's a notion use command line application it's common in a few to test your contracts using javascript the reason is that both of humanity are very like domain-specific things that you can do lots of things with them but some of them you can so testing your contracts are interacting with them directly with LED can be pretty cumbersome and some things are impossible like I know accessing the file system so that's the reason that we normally develops my contacts in solidity but text I'm using other languages and in this case it's some script so we use no changes but we do require some specific setup for no she yes because some of the dependencies use C or C++ and you will need AC compiler setup I need text time so I hope you did follow this tutorial this part of the tutorial but if you don't you can do the do it now but as it takes time we just when I advance as if you were already said as if your environment was already set up so I sorry I forgot to share my screen I just noticed that this is a tutorial I was talking about so there is first personnel of you just like an introduction but this section is this one setting up your environment it's gonna tell you how to install node and it's just like a few extra steps it's not just like a plain installation of node if you use Linux you are probably good to go but if you are using Windows you should check that but apart from that once you stole everything this is just a no she just project it's like a common JavaScript project so what we are gonna do is set up the a bead crochet and the first thing that you need to do that it's just setting up an NPM project so you can install builder you're gonna start with an empty folder you can name it whatever you world I just named it car cafes and in that folder you need to initialize an NPM project that's very straightforward you just have to run NPM in it I'm gonna be writing everything myself and doing everything myself so if you want you can follow whatever I do and you are gonna experience this first comp so initialize the project you just run NPM in it and then it's going to ask you a bunch of questions we are going to press ENTER until it's ready and after that you are going to start by blur so you just wit will MPA NPM Nami claps slash builder and this is gonna take some time because it has lots of dependencies but in the meantime let me tell you more about what builder is so we didn't say anything development environment it comes with a bunch of things the main of it or one of the main main things is past funny so with the automates everything all your small context development needs like compiling testing a bunch of extras like the plane you're smart context receive network but apart from that from that Villa comes with what we call builder IBM it's a development development a cilium network it's just like that you network just like main net but focus on development and what does this mean this development network is not like an actual blockchain where money and beliefs things are handled here we shall see nishal eyes like a beautiful blockchain where you can run your place and then that gets discarded so every time you run bit learn a new blockchain almost in an empty one it's gonna be initialized for you you're gonna be able to run your test with a bunch of fake it's you like visitors divvy em money you are gonna use that to pay for gas I think like that so you don't have to worry about there you need to test your contacts but apart from that it's also super fast testing things on magnet will be quite slow because you have to wait for it instructions to be mine here things are like automatically mine like instantly mine so that makes everything much faster but also build a BM is it's like developed specifically to create and debug smart context so it has exceptionality to help you debug yes my contacts and understand what's going on when you are at securing or deploying a contract with a VM doesn't just execute your smart context but understands part of solidity so it can give you like more contextual data whenever things go wrong so now that we have already Stabila a well thus all of you actually install it like does anyone needs more time let me check the chat okay I guess we can continue now otherwise someone is if someone needs more time feel free to ask for it is it is everybody gay just give a thumbs up or a confirmation in the chat oh yeah cool okay so let's keep going by the way this part of these things I am currently explaining are in part 3 of the tutorial so if you get lost or maybe you have just joined you can come here follow these things and you are gonna get to the same point so now let's run Bigler for the first time to do it you have to run oops MPX midler MPX is nothing builder related it's just no GES utility that it's similar to pseudo but instead of telling the system run this as a super user root it means run my local version of video the one that wishes is thought because if we were just doing like builder like this it would be a global installation but that's not what we want so if we run npx fiddler we are going to see this like welcome screen it's going to have a bunch of options but we are going to use the second one creating an empty with the config because we are going to show how to set up the entire thing we don't want to use the sample project here so that's it we have an empty with the config now and it's actually empty it's just like to fight it exports an objet but it's empty Billy works without any specific configuration but it does have a play in base architecture so if you shall be there you are going to get a few things but those things are just like the very basic functionality that planes used to offer like more advanced or more useful things with the valley-fold has this task runner and bid ready aim but if we were going to use anything else using a fume will be pretty cumbersome so we are gonna use a library to connect receive you it's called ether yes it's very popular and it's what we recommend to use a serum to use I mean to use JavaScript a material and apart from that we are also going to be using waffle that it's a testing library it's very handy to pay cos my context so we need to install the those planes and again we can come to the tutorial and my fellow we need you're gonna arrive to the same part where you have to install your place so we are just gonna copy and paste this install NPM install from here and run it this is also gonna take some time it's gonna install the planes and the libraries that they use so let's wait for it so what fill is we are going to be using waffle mostly to extra functionality that is useful for testing and if-else it's like the thing that we are going to use to interact with you okay this is gonna take maybe a minute I'm gonna wait for it to finish before continue I guess does anyone cast an equation right now you do if you talked a little bit about like the background of Bigler and how you guys came on the idea or like what it's typically used for while we're waiting yeah sure so be they're currently being used like pretty much it's gonna it's getting a lot of traction around the defile ecosystem the many the five projects use fiddler to test I mean to build a smile contact like specifically or mostly for testing them like the most like I know the most useful features of fiddler are around the variance my contacts because the issue is that as you run your tests in a few you when you write them with JavaScript you are like executing two different VMs at the same time and it can be very hard to understand what's going on and with you like on JavaScript you have lots of functionality of of things and infrastructure build around it to aid programmers during the development development but helium is a much newer platform and it's a special platform in this way that things get to run on the blockchain there's the IBM it's pretty new it's very it's quite quite different compared to other games and there's not lots of development tools I mean there's I want to claim like Billa but everything is new in this environment like a fume didn't exist five years ago so what we mostly work on on builder is like closing that gap between the transcript development experience and they feel one would like adding functionality to AC room the people are used to use on JavaScript like console.log or solidity stock prices like before be there you weren't able to print messages from with my contacts and with Billy you just import the library and use console.log just like in JavaScript we are going to see this like in a few minutes so does anyone need need more time to install the appliance this is the probably the last thing that we need to install so this is gonna be the last big pause then we can actually start I think there's someone searching the child okay someone is asking what's the advantage of using Billy over a web-based ideas such as remix I think the main advantage is that you can use the tools that you normally use for other languages like if you are used to use Reese's Pieces 2d code you can use it but if you you are a beam fan fan of B I am maybe you can also use that it's like a normal environment whereas web-based one it's like kind of rigid and limited and you lose access to most of your tools okay so let's continue now we are going to create our first contact to do that we need to create a contract directory this is where we are going to place our solidified oops I forgot about this part so we already installed a plug-in but we have to tell Billy that it has to use it and we do this by calling this you spline function that it's already available the name of supplied we are going to here we are telling pitler in its config file use the blind no me gloves with the waffle a puffin that we are just gonna set the version of solidity that it's the one that we are going to be working with this is not actually strictly necessary but we recommend with that to be sure with about which version of solidity you are using okay so now we have your power config ready that's all we need and we can create our first solidified so in this tutorial we are going to be creating a simple token not going to be standard compliant token much as like a very simple one for educational purposes we have to create a solidified to place our token so let's do that and let's call it token dot soil we can use whichever name we want but I think keeping the same name for files and contacts is useful it's like easier to find things if you do that and every every solidified has to start with this brag machine it's just primer space LED and like a version identifier of solidity like which versions of solidity can compile this file here we are telling the compiler that every 0.6 or in something version is fine this is also pretty common on node on NPM so I guess most of you can recognize this and then we are ready to create our contact so to that we use this contact keyword and just explain name of the contact it's pretty much like a class in JavaScript C Java or everywhere and that's it this is our first contact we can compile it we can deploy it I mean it won't do anything it's free boring so let's say the name to this contract and that will be just like a public variable not other contexts and applications can axis so we do it by the Clery needs just like in any language oops public name and it's my token that's it so here what we are doing is declaring declaring a storage variable so in solidity or in a fume you have both memory based variables and storage based ones memory base are normal variables like the ones you use in any programming language but storage ones get saved in the storage so you can access them through different transactions that's like it's similar to the file system in a normal computing environment these values don't get lost and you can access them whenever you want and modify them so that's what we are going to be working with but first let's let's deploy this token contact and paste our name is actually my token so we can do that by creating a folder called test that's a common name of JavaScript to play your test files and these files are actually just JavaScript files they don't necessarily have to do anything with a few you and Billy we shall find these JavaScript files placed on the test folder and random it's gonna random with mocha which is super popular destiny for JavaScript I guess many of you already know about mocha but because it's not a few related its comin on its comin to use mocha for anything transcript related and the way you use it it's why declaring blocks of functionality of related paste that there are gonna taste like a part of the functionality of your program so here for example we are going to taste the mile token contract and we do that by telling mocha with this is a function that you are gonna clear a bunch of pests that are related to my contract this is just the title he doesn't mean anything special and then inside these a callback that you passed the describe function you can define your test and you do that by oops : eat which is a function to the player taste and the idea is to do things like it should have the correct name and then pass it a callback that actually verifies that assumption oops so here we can taste our things but for now let's just print something so does anyone have a question I'm sorry if this is kind of Orion for now because this is just plain JavaScript things but we need to explain a bit of this there any question in the chat just one small question why do we need the eighth he was in front of the function I think okay that's a good question so in JavaScript there are two kinds of functions the common ones or I know known anything ones are such functions like in any language but you sometimes have to do things that that can't be restored immediately like I know doing an HTTP request or connecting to the few Network and send in a transaction those things take some time and JavaScript doesn't block and wait for them to complete it's just continuous executing but and you do that with async functions amazing function instead of returning a value like if I do return one two three here it's going to return an object called a promise this promise encapsulate s-- these synchronous operations in a simple interface that shall skip knows how to handle so if I were to call an async function and I do want to wait for it to complete I just do away I know Frank oops so if this function we're racing the awake keyword force is shutter speed to wait for its promise to complete unless film is like a network that you are going to connect and send request to most of the things are racing so we are going to be using these awake keyword and AC AC function set up so thanks for asking that so let's keep going and run this test so how do you do you do that you just run npx bit layer test and as I mentioned before it's gonna run all your JavaScript paste files one by one and first it's going to compile yours my contact it will only compile it the first time you run it and of course whenever you modify it so yep so this is in use and the EP thing so the first thing that you have to do is declare your license we don't have a license right now so it's just copy and paste that thing from the one in it's unlicensed that's all it means but here after the compilation the tests are run so it's going to first run our describe block my token contract so you can see here and then the different tests that belong to that describe block here we only have this one should have the correct name and this place right and this is where it's going out here just this place right so it's everyone following like should I continue does anyone need more time or does anyone have a question now you let me check the chat so ketchup I asked about how is Billy different from roughly a billion truffle are very similar the main difference is the Builder as a playing base architecture the lets you combine different tools so for example truffle doesn't use ether delivery that I've mentioned before and you can use it with truffle like easily it use it uses another library that it's called wet fish yes but a mid layer you just need to choose what to use you can use ether so you can use wave 3 or both of em at the same time you just instantly play in and those libraries will automatically set up for you and they are ready to be used and this is pretty nice because that way you can choose whichever environment you feel comfortable with he also encourages people to build their own planes to customize their own things or even publish flying for other users to use ok so now let's actually test our our token so to do that we first have to somehow get the the token contact here we are gonna be using ether for that and if I have this concept of contact factory it's like like pretty similar to a class so you do have contact factories and you have instance if instances of the contacts like you have a class and you have objects so the first thing that we are going to do is use ether it with the contact factory of token so here we passed the class name the contact name it's the same as the file of the contact file name and the best file name I think that seizure so you don't have to be thinking all the time which name to use and as I mentioned most things are anything so here we are going to be using this awake keyword for it away for that is incorporation to finish and we and we are gonna store these on token variable okay so now we get this contact fraction what we can do is deploy our token and to do that we just have to call it deploy function that contact factory huh and this is also an async operation you have to send a request to the network so we have to avoid for it okay so what is deeply function does is creating a transaction and signing it and sending it to the theorem network in this case the film network is Bolivian and it's gonna be a mind instantly but that's not always the case so you have to wait for instructions to be mine and you do either this by a waiting for this diploid function that's gonna return a promise which will be resolved already right of the day transaction gets mine so oops something needs something very feminine with soon so after it gets diploid we can check for example it's addressed by I know by doing a counselor here let's do that oops let's see if there's get contra factory it's not a function let's check in the tutorial maybe a heavy typo or something like that yes it would be the section section five so it's if there's get contact factory that's where I have the same name hmm let's see mama gloves with their weapon let's check these sorry about this I follow this tutorial like minutes before starting you have no it didn't let's see here I'm just painting the ether subject to check if that's a chance not included as part of an eternal builder easy and then it stands up is that worth it's like a magic wallet can you repeat yeah where's it getting a wallet from right where's the tittle of the transaction is it just built into the framework that it just magically does it behind the scenes yeah so the VM has a bunch of accounts by default I think it's like 20 accounts or something like that those are like unlock and you are free to use them it will sign your transactions by default with the first account and those also have like I know a lot of fees like maybe I know hello it's fakie it's just like with Libya me and you use it like to pay gas so in a normal Network like in Maine it you should make sure that you do have fans pay for your gas for the transaction so this token dot deploy may be spending you know a hundred K gas and that may cost money I mean that does cost money I don't know how much but you need to fund your account before the per any contact but here in be there as it's designed for testing and development you don't need to do that it's already set up for you so that's that's why it's nice to have like these planes that lets you integrate tools automatically because those kind of things are already taken care for you don't have to be worrying about okay I have to say that my environment like this or like that it's just about a bunch of planes and it and you're good to go okay let's check these Nomi glass waffle this is super strange I think you need to require it to sleep it's the API of ether she is your soil users either say yes before right in your test yeah I mean I can something that I didn't mention is that here when I use ethers from the global environment that's just for convenience like busily in shakes a bunch of things to the global environment but I can import it explicitly I can do that like this requiring the McClouds peadler ethers and that's the same as you seen it globally like i get the same instance of ethers but yes Franco said I probably have an issue with my version of ethers with respect I mean it might change a weap a from the time we published a tutorial it's really sighs finally let's try again [Music] oops okay I know what's going on so this has to do called inserted this import directly automatically I haven't noticed her so yeah I was important another version of ethers that doesn't have this function because it's a helper are they by my blip and it couldn't find it so my best was crushing it should work now okay that's it sorry about that I should have crawled my file my file so let's just use it to from the global environment just to keep things as close as the tutorial possible so to recap what we've done so far we created a token it's a contact only has a public variable called name with a constant value and what we are doing here is getting the contact factory token deploying it waiting for the transaction to be mine in this case this is instantly and then console.log in its token it's added but what we actually want to do here is to check that the name is correct and the name is a public function in solidity public means that other contacts can call it but also that programs outside of the blockchain can access that function and in FS you do that by just treating like you're talking here which is a javascript object as if it were your actual contact so if there is a public function here you are going to have it also in shutter speed here so you called name and you are going to get the name it's just a gator the only difference is that this is also an async operation because it has to call the IBM it has to not send a transaction by the way call like telling the network okay give me the value of this Gator and we can also print this and if you say my token okay so that's fine like the contacts doing what we expect it but like testing like this checking all the time the values may manually it's gonna be very error-prone so as in any programming language we are going to use assertions here to do this double values we get actually much what we expect and do that programmatically in this case we are going to use child it's a super popular library especially when using mocha that has a bunch of assertions our session functions that they are just like candy functions to test things so we are going to import child by doing this require child touches like much of different api's we are going to be using one that it's called expect and expect works like this uses colleague with value and it's gonna repeat and it's gonna return an object that has lots of functions that let you test what you want so here we are going to clean expect passing the name that we get from the network and kollene to be equal here you're gonna put my token and let's try this out okay so the disk pass there's nothing to show more guys only want to show things if you're this fail but we are fine but let's first by how training tests are displayed so here I change the expect we may so as I'm giving my token in my token - it's gonna fail okay so this is it you can see your test in Braille that means that it fail you have a summary of the amount of tests that failed and the amount of past tests here there is like a like a further explanation on how it fail in this case it says that you will expect in my token to equal my token to the expecting one is in green my token - but you got my token and that's it so let's continue so now that we know how to write very simple smart contact tests let's add some functionality it when we're talking for example we can have a symbol it can be empty and it's just another bar variable we are not going to be testing these because it's kind of boring but I guess you get it does anyone have any questions so far when we check the chart okay so let's keep going we believe this token so the main thing that they talking to us is just keeping track of balances like how much money your tokens does any account of person has so to do that we are going to use a mapping that it's a data structure it's already built in into solidity a mapping is just like a craps table it stores values associate associate it to a key and you declare it like this mapping and the type of the key and the type of the value and in this case our value is going to be you in and our keys are gonna be addresses because an address is like an identifier of any fumé account and then it's named balance sis okay so this is not going to be a public variable it's going to be private we don't have to be fine I like a private key war that's automatic and this is going to be stored also on storage so we are not going to be losing the values between transactions we want that to be recorded on the blockchain like forever and to access it public a private variable you need to define some kind of a day of Gator so let's do that we are going to define a function called violence off which receives and others I know owner and returns you in here first helping define its visibility and then we are gonna be clear this function as a function of you here means that it can read the state like storage but it can't modify it and the cool thing about view functions is that you don't need to send it as action to execute you can tell your node to run a set a new function and give you the return value and this is nice cause first it's automatic as you don't need to send it a instant I mean as you don't need to send it a sexual use a happier wait for anything to remind you can get the return value almost immediately and also it's free because you don't have to pay gas as there's no transaction now you have to we have to declare its return type and you do it like that so then implementing this is pretty easy it's just like returning a the balance of the owner and that's it that's our balance of function so let's taste this so let's create another taste it should return the right balance this is an async function tests are normally acing while the scribes are not in a sink here we have to do the same thing right like we are going to be pretty token we then gonna call balance off and compare the result of colonies so here instead of name we are going to use balance off and pass it in other words let's use the other zero it has like forty characters or something like that it's this this there's a constant or knitters that I never remember its name so while you're with relief oops how many that's 28 oops sorry soomi's to be talking weird okay so here I have the other field and let's compare its value to zero because that's what we should be getting you okay it pass so by default mappings are always initializing zero so that's fine because everything should grab Co balanced until someone sense that sends them money but before we continue let's refactor this we'd like this token diplomacy it's getting a bit repetitive so there is a way to do this in in mocha so you can declare something similar to it that it's called before each be for it and pass it a message function this function is going to be executed before running each test so if something gets repetitive you can do it here but what we do need to do is instead of using a local variable here for token we need to declare it outside that function so other functions can access it okay let's run this again okay cool so now let's add a function to transfer tokens that's so so very straightforward it should look something like this transfer the receiver and the amount of tokens it should also be public in this case it this is not a real function because it's going to modify the state of the contract and it doesn't return anything so that's it we don't pass the sender of tokens here because that's gonna be the one who sends the transaction you can access that account by doing message dot sender so we don't need that param but it's a problem so the way I would test this thing is by actually but we need transfer I'm seeing that it was successful but if we don't have any token I mean everyone has filled August who is gonna be the one that transfer this value so what we need to do is to initialize this contract will be an initial supply of tokens there is a bunch of ways of doing thing of doing this thing but we are going to be if we are going to go for the simplest possibility so what we are gonna do is implement a constructor function that it's gonna be executed when we deploy a where our contact and in that constructor function we are just gonna assign a bunch of tokens to whoever that noise this contract and we do it this way constructors have always this name has to be public otherwise we won't be able to employ this contact and we are just going to initialize the balances this mapping and add some value here I know it's also the same we have any questions so far let's check the chart okay so before testing transfer let's actually test that the constructor is initializing this correctly otherwise we are going to have a hard time so should the balance and here what we need to do is just call valence off and they study 1k but the problem is that we need to know who second the diplom intersection here otherwise we won't have access to its others and we needed to to check its balance so what we can do is use ethers again to get those bill ABM accounts that I thought about like few minutes ago so but as I mentioned a bit less and has Billy BM has a bunch of account automatically initialized unfunded for you and transactions by default are sent with the first of those accounts so what we are gonna do is get those accounts and store the first one in a variable and use easy to complete this test so let's do it here in the before each because I suspect that we are going to be using this thing a bunch of times so let's do these 10 the count we can also use in ether scalper here okay this is gonna happen all the time I guess so here I have the gout but I am only interested in the first one and I want to restore it somewhere okay so now that I have the counter its deployed in the contact I can use its others this is socializing I guess this test should be completed now we are checking that the balance of the account that actually deployed in the contract is initialized correctly let's try it out okay cool so now that we have that account and that we have an initial supply of tokens we can actually place the transfer function okay so what we are going to do here is a transfer some tokens let's use this same account like Co I cleric Const just not repeat those Cheers okay let's transfer some tokens from the sender account that it's the same when the deploy deploy the contact to the CEO of account and let's check the balance first you need to pass the receiver and then the amount CEO and what this is gonna send a transaction so it's a sink and once we awaited we can check the balance of the account CEO and also check the balance of the sender proceeds it should have been displaced by one so let's do this the one of sender should be 999 okay let's try this out oops expect it to be equal to oh yeah so I never implemented it so it's finally was failing okay well we are going to do is subtract some balance from the sender and add it to the receiver balances amount and then we lead to the receiver and that's it now I guess this should pass its kind of recompile everything okay now it's possible so this is like a very basic implementation but it does have some problems so let's try a few things like I know let's transfer 2000 tokens like more than we actually have and let's see what happens I'm not going to change this because I not even sure what it should say like to something what something maybe here see oh I don't know it's right okay expected to something to equal once something okay that's already pretty weird because we never created do something tokens but the balance off here it's when it's once to something so case where billiard comes very handy if you were to the back this by just calling your betters here or some intersections you are not have a very good day it's very like you are only gonna be able to debug the contact from an outside perspective and going to the internal execution it's not very easy without Bigler but here we can use a console log library that we created uses that by just importing no meat laughs slash console dot but so it's know me claps laughs fiddler slash concert that's all that's a solidity library it's implemented in a very non-intuitive way but you will need to read its source code but it's as much of solidity that declares a console and you can call things call it like if it works our speed like transferring from something to something and let's release now when I run my test it's gonna print that consular whenever that function executes just like if it were considered from JavaScript this is very handy to debug your things so here we get to know that we are transferring from the sender account it happens to be this one to zero but the problem is that we are transferring most of case that we have so maybe we can do things like that for some amount of tokens and we have amount so here it's Saturday balances message the sender amount and let's see what happens you okay so frustrating when something tokens and we have do something okay that's weird I mean that shouldn't be happening but we can't prevent people from actually fighting to do things like that I mean if it works you're creating money out of nothing so there's always going to be someone trying to do that so the other thing that we want is for the amount amount to be less than or equal the balance and we can verify if this is go if this is enough to here by doing a constant load here it should probably print false you right so this is the problem these like requirement of this function it's being violated by the call that we are trying to run and of course it's gonna ask who our code so what we want to do is to protect our smart contact from these kind of things and we can do this with a solidity function well require that it perceives a boolean expression and a message that it's gonna be printed that it's gonna be used if you if this boolean expression is false so in this case what we want to require is that the amount is less or equal to the balance and we can have a message here like not enough funds and this message is going to be used to make it and some fail but fail with the specific message this is optional you can do such this but I don't recommend that because then debugging is a it's a mess if you don't know why your transactions are failing so here if we rerun our test this will evaluate to false and this require will make this assertion faith okay so here we fail it fell with a message telling you that it's actionability and here is the message that we added to the require here and the quick thing about builder is that it's gonna see that your transaction fail and recreate a solidity stack place so instead of just doing the message of the required fail you are going to also have a stack face of solidity of the of the contract that you are executing this case this typeface is very it's tiny because you are failing on the same on the same function that you are calling but if you were to fail on other such another functions it will be present here like in any stat page from any other language and so this is very handy to debug your transaction so having console.log and stock prices you have like a debugging experience very similar to any other language so finally what we are gonna test is that this requires actually that's what we want it to do so what we can do is use waffle here as I mentioned waffle is testing library for my contacts add some functionality to child that it's very useful to test my contacts actually when they fail they will say helper the adults to child that I don't remember its name so I am trying to find it here okay yeah so it's you seem to equal here we are going to be using reverted with and passing it the message not that we expected that section to fail with and instead of a waiting here we have to await further expect to be able sod I think I modified the bone test sorry about this okay it's here expect NATO content to be Roberti will not in a fat and let's try this actually work okay good so that's it the good thing about this thing for the bad reasons everywhere messages is that you actually get to know that your transaction is fairly for the reasons that you are saying that it's failing failing because you can also do this and test without the message but maybe your transaction is failing for because of something else in that case your test will be kind of lying to you maybe you modify your contact with your require stop work stops working so we strongly recommend using Revere messages in your test so I think that's pretty much it about how to develop test and debug contacts using Biblia you can go to the tutorial complete your token like here we actually implement much more functionality I think or for sure we will implement like a complete test suit for this contract there is much more things maybe I don't know how much time left we have maybe it print yeah if you've got a little bit more content I think we're gonna cut off in maybe ten or so minutes so if you want to for that much time that should be okay okay so let's first see some workers any question you can use the ratio of hand functionality if you want to ask anything or you can also ask in the chat you okay so let me show you how to send instructions from other accounts this is so very useful too for testing for example here we are always deploying and sending transactions from the first account like that we call center here but there's also and other accounts and we should probably test within things with them I let's call this other account well we are going to do is transferring some tokens instead of from the sender from this other account it's pretty straightforward to do that we first you just have to call the function on the token on the contact that you are going to be using let's called connect and passing the account here so in this case we are transferring one token from the account other to the few account and it's going to fail in the same way because we don't have any token in the other account and that's fine the same test pass well let's see if it actually works and to do that let's transfer some money to the account other from the sender I know a handy tokens which as we are such gonna be calling the the contact functions to do this like in these kind of tests you do use JavaScript but you have to think of these ëthey you were actually executing the token that it's really in solidity so if you want to add some balance to an account in order to paste something with it you just transfer it some tokens like there's nothing special of it be in solidity or reconcile it just like a enough shape and that's called transfer together but not from other so let's delete this here and in this case this expect this expect I should fail because now that we have a candy tokens in the other account this traffic from other two zero should pass you okay I can not fail but from another reason good that we were checking the the reason why it failed so it says my name okay I think the term is that here we are passing the account of shape and knowledge salaries like everyone else everywhere else we are going to use the abilities function to get the others so let me explain with what we know here other C's in Hulme are like 20 bytes of data and there's a bunch of ways to represent represent them normally we use hex encoded strings like this others this is like the most common representation of an account with a string of its service but in ethers there's enough shape that represents accounts it's called Sagna and a signer does come in a list but just a bunch of other things like I know other get valise and this is going to return the amount of if not a second trust so when we called transfer here passing the other object instead of the others it failed because it wasn't expecting that that type okay good so now the test fail but for the reasons that we were expecting this section is not being reported it's actually working correctly and what we should do is probably remove this just maybe check that the account CEO does actually have it oh and after this okay quick so it's passing and I think that's pretty much it what you are going to be using to debug and test your spy context there's also softness that you want to do when the plane when developing spinal contacts it's telling them to a light network we don't have enough time to cover this here but there is a section on the tutorial explaining how you can do that basically you have to create a script that it's going to be run with bindler and it's gonna do pretty much the same than we were doing here I guarantee contact factory deploying it are waiting for the token to be deployed and then it prints its address but apart from that there is a bunch of other planes that you may want to take a look at and this one it's specifically for the plane contracts it's called with the deployed it is built by one of our community members and you can learn how to use it here if you want to ultimate your deployments a bit further there's a lot to tell about this plane and we don't have enough time but you can find it if you go to build little DEP and go to the Planning section here I think that's pretty much everything does anyone have any question Thanks yeah that was that was really great glad we had a little bit of extra time to go over a little bit more content I think we're gonna wrap here we went a little bit over time I hope that's all right some really good stuff again thank you Patricio and Franco would seem capable behind behind the scenes chat support so it's always good if you missed anything remember this is recorded and will be available on the eath global youtube channel just after this ends a few logistical things again remember we have three more events one tonight at 4:00 p.m. Eastern that's a file coin getting started with file coin where I have like around 67 people registered so it's going to be a good event - Andrew Hill with textile and then tomorrow there's a lippy - pee session and decentralized messaging with Jacob Hyun file coin and then another brainstorm session in the evening eastern time 8 p.m. with Juan that one's going to be a little bit more open-ended you can show up we're gonna chat about ideas we're gonna be pulling from the 100 hackathon ideas sheet that you may have seen floating around so yeah it's gonna be that one's gonna be a lot of fun and then the other two sessions tonight and tomorrow morning we'll also be I'm assuming they're gonna be as high-quality as the ones we've already had so those are the three that are happening tonight and tomorrow there is the kickoff as I mentioned at the beginning of the session that's Monday 12 noon Eastern again it's going to be sort of setting the stage for the next 30 days I hope everybody attends will be sending out invitations for that as well thank you so much for Tree Co again it's a huge help we appreciate you sharing yeah that's super yeah I think that's it I don't think I missed anything [Music] Oh make sure to stake I mentioned this at the beginning as well but you have to stake you get it back at the end of the event but we want to make sure that people that were supporting are committed to participating fully I think that's it I'll let everybody have a good rest of the day thank you again and we'll see you 
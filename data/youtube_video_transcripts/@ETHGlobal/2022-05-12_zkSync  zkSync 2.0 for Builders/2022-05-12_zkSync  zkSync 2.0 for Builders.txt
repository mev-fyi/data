bear with us while we get the live stream set up we'll start in a few seconds welcome everyone we have stan here who is going to give you a workshop on zk sync for builders 2.0 and if you have any questions in the meantime feel free to pop them in the chat and we can take them towards the end then i'll let you take the stage thanks hi everyone so today we're going to talk about zika sync 2.0 the kissing 2.0 is the first event compatible ck roll-up and we're going to discuss how it feels from the ux from the user perspective and from the developer perspective the casing 2.0 has been live and tested since february and the quick disclaimer here is that this presentation not only shows the features which are already available on test and but also the ones which will be available in the future so what is the kissing 2.0 as already said it's an l2 powered by zkvm uh the main features compared to other zika rollups is that it is programmable in solidity and wiper it has full support for a free api that means that most twin works presumably integrations with various indexers like the graph they will be done very smoothly and also your front end will most often work out of the box and security and censorship resistance are inherited from l1 zka roll-ups and roll-ups in general they solve the problem of ethereum scalability so for instance currently users most often have to choose they either pay high fees and use high decentralized blockchain like ethereum or they should use something like a sidechain like solana or phantom or whatever and while the rollups do solve this issue partially they only offer linear throughput boost that is that means that uh on the casing the transactions can get 10x 20x 100x cheaper than on ethereum but they will always be bounded by the limitations of ethereum even with the new eps like bank sharding and the [Music] block transactions while getting cheaper there's still some limitations imposed by the underlying l1 chain that's why we will also introduce ziki porter ziki porter is basically a second chart of zk sync which will be synchronously interoperable with the key roll up it will have full security bile one as well it will be fully secured by zero knowledge proofs however and it will also have all or none ownership resistance so while rollups inherit fully censorship resistance like from a from the underlying chain ziki porter will allow either everyone to exit or nobody to exit and in return for this small drawback it offers limitless throughput so the fees are comparable to other side chains and as i said these two bars zika roll up and zik porter the synchronous interoperable that means that the retail users and whales they can also exist together in a single big ecosystem all of our code is mit license we use only permissive licensing for our code we want not to govern the community with the community to govern us from the point of user experience the kissing will provide the same with the all the bridging which you would expect from a developed blockchain like native departments from l1 we will we have a lot of partnerships exchanges your partner partnerships to do on-ramps unlike optimistic roll-ups we will support fast withdrawals till one which will take hours not days or weeks and the conventional bridges to all the chains will be supported as well to interact with zika sync you could do use any ethereum wallet so you have your metamask wallet no need to install any new one you can just continue using all your accounts uh we will natively support most of the contract interactions so i will mention it in the developer experience later on but this means that the code base for unless you need to deploy contracts or allow users some the key specific features like pain fees inner c20 tokens all the code base could be reused uh as i said here i will show you later an example of the b712 message and also users have instant confirmation so no need to wait seconds or minutes for the transaction to be accepted for the block the acceptance is almost instant and unlike ethereum users don't need to worry about paying fees in each so if user has only usdc they can directly pay fees with it here is an example of how it looks like how a message an ep712 message for transaction where the fees are to be paid with usdc looks like we'll also support account abstraction currently the most popular wallet on ethereum is madama's but metamask may not offer the best experience especially for the new users i wouldn't recommend very much for my grandma mainly because uh you know like all managing all these seed phrases and uh private keys etc it may be intimidating and uh very confusing for new users argent uh tries to resolve this with social recovery where instead of private key control in your account you still have private key but if you lose it or it gets stolen you can gather your friends and they can recover your account and these wallets uh when they were implemented on ethereum they uh did not work out really well mainly because of the huge fees for smart contracts and also because ethereum only treats eoas as first-class citizens with zika sync smart contract wallets would be first-class citizens as well it will also enable protocols paying for gas for instance imagine you could swap on uni swap without needing to pay any fees and also applications like tornado cache they could use account abstraction to be to allow the users to withdraw funds without using any relay errors who knows what another cache is they know that for to maintain privacy on the cache uses three layers for their users to be able to withdraw the funds with zk sync data cache contract itself could withdraw them from the developer perspective uh our main job was to make migration migrating existing code bases as easy as possible that is to make the changes as minimal as possible most of the dabs which you could use will work out of the box and even though if you only interact with contracts you could still use ether.js most often we still recommend you to migrate to rsdk because it allows some flexibility and most often the migration will look like that you just change the import and that's it the rest of the code will be the same there's still some differences for instance here we did not mention how to instantiate the provider but we are working on reducing differences and minimizing them here's an example on how to pay fees in your c20 token so here's an example of how you a user could do a contract interaction while paying fees with usdc just provide an override and that's it smart contracts come with some permanent changes for instance because the kvm barcode is different from ethereum one create top code address derivation differ create has slightly different reason why it might differ with discussing it internally but for now that's how it is uh currently we do not support uh native ethereum so payable is deprecated you could still use it but message value is always zero anyway self-destruct will be removed but it's uh the same way as ethereum goes and the ethereum learned that supporting ourselves like is a lot of pain and since we are building a new chain we can afford ourselves to not to learn lessons from the past and also the gas pricing will be different we don't currently support solidity before 0.3 uh also on the current test net we only support slot is 0.8 but sooner we will also support older versions of solidity starting from 0.4 some open zeppelin libraries may not work right now because some upcodes are not invaluable and simply needs adaptation that's the biggest part where you have to do some changes uh because of the different deployment procedure that it requires episode messages like here uh the existing tooling like typical hardware plugin windows usk sync you would need to install the casing specific heart head plug-in also some crypto pre-compiles won't work though shutter 5 6 and dc recover will work as well as so the most popular functions are available what will work everything else and also wiper uh from the point of front-end uh most of the code bases can be maintained the same so from for instance uh legacy tax format will be supported uh also on our test net all transaction from us from ethereum was supported but in the future we may change that with three api fully compatible that means that uh again ethers yes works out of box all the tooling most sdks and all other languages will work out of box as well also we will provide our custom sdk it's currently available only for typescript uh but later on we may develop also follow them which is first of all the cross to go python et cetera if you want to get started here's the link to the documentation also i would really like to emphasize regarding account abstraction that in order to allow mass adoption for account abstraction your dabs should not assume that you always interact with an era you should not if your dab or contract requires some signature verification do not use easier cover you could read more about it here i will paste the link is okay i'll answer all the questions in the end of the presentation okay so our main security model is that everything that you write on ethereum will work on the kissing and our job is to make sure that the old audits are not affected also since we use validity proofs the ability is enforced by ethereum so after every engine you block we publish proof on ethereum that indeed all the transactions all fee charging etc in the block was correct [Music] as i already mentioned uh we also plan support for mass exits currently let's say that some l2 becomes malicious doesn't matter what follow-up what happens next uh then most of the users still have to move their funds from 2l1 and then move them to some other l2 this is unsustainable if there are a lot of users it will be too expensive and they will build users who will not be able to migrate to another rollups that's why in our long-term roadmap we will support muslim assets to allow users to migrate to another fork of zika sink or maybe to another roll-up if we ever go malicious as we already said it's not us that controls the community it's a community that should control us and uh that this way will provide and now analog to l1 blockchain for capability that if an involved if an l1 blockchain becomes malicious you can always work away from it uh that's already match we also have partnership within security audit firm so we are both having throw out it for ourselves and we also willing to support our partners to with getting audit for themselves here's our ecosystem as you can see here there is defy project like zigzag curve nft matterhorse tower etc ecosystem grants as already mentioned an example of hard hat tooling which has to be changed adapted to be supported by zika singh we are also supported we also support various ecosystem grants for developers who are willing to adapt existing tooling to the casing like hard hat truffle very mix foundry waffle etc all this tooling should be adapted to the casing the changes are not big but they still need to be made and we would really appreciate any help from the community if you have any other ideas what tooling do you miss from zika sync please let us know and we'll surely consider it thanks everyone i think here's the time for questions um i'll take a look in the chat do you support modex pre-compile no we do not currently the only pre-compiles that we support are sha-256 and the ec recover and also i stand there website pc available yes any oracle available we are partnering with various oracle companies but on the testnet there are no oracles as of now i think that there are likely not be much oracles on the testnet i might get i may be wrong here but i think most of the projects they want to launch in maine no more questions in the zoom maybe there are some in the youtube stan and no more questions and if there's any questions in the meantime we can follow up over discord true well thanks again thanks everyone see at the next workshop thanks everyone thank you 
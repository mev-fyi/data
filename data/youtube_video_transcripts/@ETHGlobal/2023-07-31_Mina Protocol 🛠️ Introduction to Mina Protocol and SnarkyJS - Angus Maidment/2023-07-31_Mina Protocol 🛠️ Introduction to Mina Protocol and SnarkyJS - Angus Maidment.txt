foreign [Music] sorry for the slight delay in starting I'm also holding my charger which I hope I can plug in at some point if uh and law and Battery hi everyone my name is Angus and I'm going to talk to you today about Mino protocol and snarky JS so it's July 21st today there's my name yes my name's Angus I do developer relations and I talk to people about Minor protocol and tell them about building ZK apps with Nike JS I live in Edinburgh in Scotland uh there's a picture of me doing steganography so blending into the sign and also if you see the keynote like main stage presentation tonight you might see me in a pickle costume um so you can follow me on Twitter as well blockchainbeard um and you know send me memes that would be cool today the structure of the talk will be introduction to mina protocol and zero knowledge proofs we're gonna talk about ZK apps how they work with with me now snarky JS that's how you build z-caps that's the typescript library and we had a program called ZK ignite which I'll tell you about but I think the applications have just finished but you can still find out about how you can get involved and some next steps particularly how you can get support for the hackathon this weekend um right my bags arise so yes and I thought it was probably easier than trying to explain to them like where the adapter was in my bag I've got quite like a complex packing system so zero knowledge proofs who here has heard of CK good lots of hands going up for those of you who are watching the Stream so I'm gonna do a kind of Speed Run introduction to zero dollars proof just so everyone has kind of has the requisite knowledge to be able to understand what what zcaps are and how they work so it says here you can use zero knowledge proof to prove and like verify information in in a private trustless and decentralized way so that's good for blockchains if you know anything about blockchains as well um a good way to think about it is um I could be thinking about what you can do with a zero knowledge proof you can prove to someone that you know something without revealing extra information right and so that can diff uh be different in different contexts a good way of thinking about it is the game wears Wally that's what the character Wally looks like he's called Waldo in the American version so there's this giant picture of loads of crazy stuff going on in this kind of big map and you've got to find this character called Wally and so if you want to show someone like prove to someone else that you know where Wally is you can show them the map or like the picture you can just point to the the Wally character but then that person knows where Wally is as well right so then they can go and say to other people look I know where Wally is so the way to think about what you can do with a zero knowledge proof is you get the Wally map you get a a large piece of like white card uh you cut out an exact Wally sized hole in the card and then you lay it over the map so then you can show that to someone and say look there's Wally because you can see the little Wally character but you can't see any of the contextual information around them so you don't if you look to uh the map after that then you wouldn't just be able to pick our Wally because you've not seen where he is relative to anything else um so that's kind of a way that you can think of what zero knowledge proofs can do and so there's actually lots of use cases that you can use zero knowledge proof for um something that people are talking about a lot is you know using them to to increase scalability and and do roll ups and things for various different l2s and so also the idea of having a ZK VM where you can kind of write computation and prove it using terminology post it's also good for things like private transactions voting identities here identity obviously are very important in our digital world right the concept of identity and proving certain things about your identity but they're not revealing all of your information at once um is is something you can do with zero knowledge and just this idea as well of verifying computation right so the this is this is the slide as well we're going to take a look at zero zero knowledge proofs and compare them to some other cryptographic um tools you you might have used and take a look at the kind of um What's called the kind of pro tool tapes I think for how you use them so the uh something you need to to know as well about zero knowledge proofs the proofs that Mina users you can verify in constant time so it's very fast and you don't have to see all the inputs that somebody used to produce the proof so you can choose you can keep inputs private or you can make them public so that's something that's very good for privacy as well if you want to offer your users um privacy and not having to to make all their inputs to to methods public so here you go here's you've probably used a hash function before so in a hash function you put some data in like as a string and then you get out this other string right and hash functions have a number of properties but the main thing that we're considering here is the fact that if you have some data and then you put it through a hash function you can verify someone else right you can you can give somebody else the data then they can use the hash function to and then so when you get the same string out then you know you've got the same data right so you can verify the integrative data with a hash function similarly with a public key signature you can take some data you can sign it with a private key and then other people can use the public key to verify you know this message or data has been signed by some private key right so then zero knowledge proofs right the way that they work at Mina is you write a computer program so you give people some code to do some computation and then they do this kind of compilation step and they generate this string called the verification key now when it comes to people using your code right so you give them the the code that you've written and they run this thing called the prover function so this is here in the middle prove you have a program uh that you're running and then you have some public inputs and some private inputs that generates the proof right the ZK proofs that we're talking about all the time so that generates a string that's the proof and then you can run the verification function which uses the proof that you've generated when you ran the computation the public inputs but not the private inputs and the verification key that you created when you kind of built your ZK app right and that comes out as a Boolean so you can verify that a proof is either valid or not valid Okay so hash function you put data into it but now what we're doing is we're saying using this um cryptography you can let someone prove that they've done some computation right that they've run some program so that's how Mino works right we use zero knowledge proofs to uh verify all the computation that happens all the transactions that happen it uses ZK so that's why the banner downstairs says the world's first CK blockchain it's a layer one built entirely using zkps okay and as I said already right zkps are great for privacy at scalability so Mina has a number of these advantages um verifying the state is very quick so it's it's constant time as I said so you can verify the state um and these proofs stay the same size and Mina has a feature as well called recursion where you can kind of use proofs as input to generate new proofs so the actual blocks in the chain are linked together by um having a kind of proof of their estate and then that gets kind of put into the next when you when you generate the the state proof for the next block you use the previous state as as a kind of input so in that way you can verify all the blocks leading up to the code block and it's very fast to verify so that also you may have heard that it's a 22 kilobyte blockchain so you can verify the state of your account so you need the the safe proof which is like one kilobyte or so and then there's some metadata but with 22 kilobytes you can verify the state of like your account on the media Network um so and you can kind of you can sync a node um with just the that small amount of data so that's pretty cool this isn't just stuff that we're we're kind of telling people about though um there's people doing work the nil Foundation are working on this thing um this kind of way to take Amino proof and then verify it in the evm so then you can imagine doing a bunch of compute using um Mina you create a proof that you've done on this compute and then you can put that you can verify that in the EDM and then take you know make things happen in an evm uh blockchain but do all the compute using meter so that's going on we can link you to uh that it's still in research phase we also have open Mina so this is an actual um blockchain node that runs in a web browser which is pretty cool so then if you want to you know build apps and and you know have users um use your your apps they can spin up a node in a web browser and they don't have to go through some sort of third-party uh service or or you know node provider or something so that's cool um so now that I've told you about ZK proofs and how many uses them you're probably wondering how can I build stuff with zero knowledge proofs as well and that's where we come to ZK apps okay so there is kind of uh the smart contract functionality it lets you build what are called what we're calling ZK apps but they're apps that use zero knowledge proofs if you've heard of ethereum if you've done development using using evm the model that the evm uses is on chain computation so you verify computation by having all the nodes in the network executing the same code and then they all get the same result right so in the diagram here you've got someone a user using this computer they want to use they call some smart contract method and then all the nodes on the ethereum network process does this um they run the the method and they apply the updates or whatever so you're replicating all that computation amongst all these nodes now Mina is different so ZK apps actually use off-chain computation and then on-chain verification so the way it works is you write some code the user runs your code produces the proof that they've run the code and then they mean a network will um take that proof verify the proof and then apply the State updates that the user wants to do by using the ZK app so that's quite different right so all the code is run client-side and then they're passing this proof in a transaction and then the proof gets verified so it's you know very different to the the evm um kind of model that that I I just explained so there are a number of advantages to using off-chain computation mainly privacy so as I said you can choose which of the inputs the users provide to Smart contracts you can choose to make them public or keep them private so that's good for privacy there's there's no gas fees as well in the way that you think of them usually so the the cost of using um the meaner network doesn't scale with computation so you can do as much computation as you want and all you have to pay is the single transaction fee to send the proof to the network so in that way you can do as much compute as you want you just produce this one proof and then you pay a transaction fee for Network so no gas fees that's pretty cool um you can it's there's composability as well so um it allows you to do things you can you can design your apps in a way that is kind of modular but then also you can basically build your own rollups as well so this feature that I mentioned earlier called recursion so you can take a proof and then you can use that to as an input to another proof so there's some cool things you can do with that and I'm going to tell tell you a bit more about it at least on the presentation and then also the idea that because the State proof is small and fast to verify then the idea is that that you can kind of verify that in in different places so you can use Mina to do compute and then verify in in other places or in other blockchains so um just to walk through the kind of process that you need to think about when you're building zika apps um the way that it works is that compile step that I was talking about earlier when you generate the verification key you and you deploy your ZK app you you send this verification key to the network so here there's a box with a key in it that goes to the nodes of the network so this verification key is is public um and that's what you use to verify the proofs that people generate so then when a user uses your z cap here it's it's um hosted at michaelseekap.com so so they use your ZK app they they do they run the code with some inputs and then they generate this proof then what happens is they send that proof in a transaction and then the nodes on the network use your verification key from earlier and they say whether that proof is valid or invalid so if you have a valid proof there might be some State updates to apply but then if it's invalid the transaction gets rejected so Z caps are built of methods so if you want to build secret apps for the hackathon you're going to be writing methods um and there's a kind of diagram here and it it's saying that methods are have have arguments so so inputs you have a smart contract state so you have a very small amount of Unchained storage to store state for your smart contract and you have some values from from like the rest of the world so you know as a database or or server or something and so then when you run a method you the the outputs are you can kind of apply updates to your smart contract state or you can apply updates to the states um externally as well so that's kind of what goes in and out of methods and so if you want to write methods you're going to need to know snarky JS so snacky.js is a typescript library so if you want to petition to have it renamed as an rgts you can argue um with people on GitHub about it so then it's the typescript library for for defining zero knowledge proofs so you can create um oh there's there's the low battery warning you can create uh prove and verify so knowledge proofs so there's tools that you already know and love if you are familiar with typescript so we have good integration with Visual Studio code intellisense which is very useful um and you can use tools like npm and just for testing so the idea of snarky.js is to make your life easier and to make it easy for you to build apps with using ZK this is the five-step kind of quick starter um so so all you have to do is an npm install um there's a CLI tool that is designed to make your life easier as well it can help you um setting up building and deploying your projects and then we've got some flyers with this information on it as well so come to the booth um and you can get some otherwise this is in the docs as well which I'll link you to so you know the idea is here you can kind of get started install the the tools and deploys the cap in just five steps so if you want to write sarkodie smart contracts you need to know about field elements that's the kind of the numbers that you use in zero knowledge cryptography there's this concept of using finite fields to do operations so that's the basic you know of data that you need to to use you can store a number almost up to 256 bits and so we have a type it's nike.js called field and so there's a kind of little example here of how you would um declare this constant sum in a programming language that you're familiar with already you would just use the numbers one and three but it's rkjs you need to say I'm using the field type so then here that's what's here that's saying make a field give it a value one and then it's got a built-in method which is dot add so and then it's saying add this other New Field that I'm um creating here with a value of three so Fields you have to use fields for everything that's just how the ZK cryptography works so we also have other built-in types again to make your license as well for easier so things like um Markle trees public private keys and signatures things like that so these have built-in methods as well so hopefully you should be able to find types of methods to do what you need to do and if you think one is missing you should build it and enter it for the hackathon this is a quick um this is a the kind of the the basic example smart contract that comes with the CLI tool and so I was just going to walk you through it quickly these um at the top here I think if you can see my mouse this is saying so it's using the state decorator that's saying that you're you're storing this on chain so you get eight fields of storage for zcap and so here it's saying we're going to store a number in that state um you declare you kind of create a smart contract um by extending the smart contract class you declare some um state that you want to store uh oops I was trying to uh scroll down so so yeah so that you declare the the um what you want to store on chain in the state and then here is some things where uh uh this is setting up the permissions for who who can do what like what and how how to interact with the zika app uh so you can read more about permissions in the docs so this is uh the init method initializes your z cap so here it's just going to say this um date variable that we've we've declared um we're going to set to one and then there's an update method here that's saying we're gonna get that um field from the state we're going to verify that it actually equals the current state and we're going to add 2 to it so then it's saying um add two and then this sorry equals this is this is kind of this method is is then saying we've added two to it and we're going to check that um the new state equals the Old State plus two so this is kind of thinking about what you're approving and then it's saying here we're going to set that new state so when you call this method then it adds to to the state and then next time when you look at the state there'll be you know number plus two there so that's a very basic example that's what a smart contract looks like um I said you earlier that I was going to tell you more about recursion recursion is a very cool feature of snarky JS so this example has this card game here um nobody ever mentions it but so I thought I should start pointing out that it's probably the worst card game ever because everyone has exactly the same cards and I think isn't that one of the most powerful hands you can have in poker right so everyone's got like one in a million straight flush or something uh so if you imagine a card game a turn-based game you can um because you can take proofs that you've already created and use them as input for making other proofs you can have a player so player one will run the the kind of game logic and produce a proof that says I have taken my turn in a way that is valid according to the the rules like the logic of the game and they can generate a proof that says that they can pass that to player two and player two you can verify the proof so they can verify that player one is taking their turn in a way that is valid they can then take their turn and then when they produce a proof that they've taken their turn they can use the proof that player one handed them and so uh then when they produce a new proof player three can check that player two is taking their turn in a valid way but also that player one is uh uh player one has taken their turn uh in a valid way as well so you can kind of Imagine passing around the proofs around the players um add Infinium or until the game ends and then also you notice as well that there's no blockchain in the middle here so you can kind of do this off chain passing proofs around and verifying things without putting things back on the blockchain until you want to so in that way um the recursion lets you do a lot of cool things but you have to think about things in a slightly different way um here's a couple of examples of things people have been building on Mina for our ZK ignite program so people are doing l2s to enhance privacy of scalability someone's made a keyless wallet so uh things that use social recovery and Shamir secret sharing so that's pretty cool and someone made bio snarks which is to do with sharing data in the Biotech Industry um and verifying things as well without key while keeping sensitive information private so there's actually a whole list of loads of different projects that people have been building for for our ZK ignite program we can link you to this kind of list and you can look at that and see what kind of things people have been doing and how they've been doing it for some inspiration uh next steps with hackathon if you want to build stuff come and talk to us at the booth um we'll be there uh to answer questions and talk to you about your ideas the docs have all the information there obviously that's docs.meanor protocol.com we have um aziki apps q a channel on our Discord server which is full of people who are really responsive knowledgeable and helpful so if you have questions technical questions you can go on to the Discord server it's discord.gg slash media protocol I think that QR code goes to Discord as well um and yes so you can ask your questions on there there's also the each Global Discord server we have like Mina sponsor or sponsor Mina Channel um so you can go on there as well and ask questions of about things you're trying to do or you know um book a slot to kind of meet someone at the booth or something and also you can DM me on Twitter blockchainbeard that's really just something I put in there to try and get more people to follow me so uh thank you for listening and if you have any questions we have about five minutes do we no I've I've got a timer that I so five minutes yes five minutes no so you don't have to you can you can verify the proof off chain um but if you want to change the state of things on chain then you need to send it to the network and one of the nodes needs to verify the proof that use Prodigy cap any other questions yes so I think uh I will answer that question by saying you should come to speak to us afterwards because we have to finish but we can talk to you more about about how to think about recursion and and how you yeah write the code for it and if anyone else is interested come and speak to us as well or see us at the booth thank you very much everyone [Applause] 
thanks for joining us um today's first workshop for web 3 weekend is the fleek nft toolkit and taking the session today is samwell from the fleet team and i'm gonna hand it over to him to introduce himself and kick off the session hey everybody so um like it was said i am samuel i'm from fleet and i'm here to help you develop uh nft applications authentications um work very well with ipfs and we actually deal with ipfs a lot so we have all kinds of tools that are going to be just very useful to you to make those applications so if i go to the next slides there are two main part that can help you leverage ipfs for nfc applications so the first one is um of course when you create an nft you probably have a front-end adapt that you're gonna deploy ipfs and freak can help you with that i'm gonna talk to you uh presented how to do it during this presentation and we'll even deploy an application together and then the second part of this presentation we're going to talk about the storage because of course in fts very often they have files associated with them and we will see why you would want to use ipfs instead of you know awf or google cloud and we'll also use the tools that you can use with fleeq to upload them and interact with them and we'll take the uh an actual energy application example that integrates our storage uh apis so let's get started and talk about hosting so um uh one of our products at fleek is freak hosting and what it does is it allows you to host your site your application on ipfs this is the front-end application on ipfs and there's a kind of interesting features that come with it so um it works is you connect to your github account connect your repository that contains your code and we take care of deploying it to ipfs there's a automatic framework detection i'm going to talk a bit more about this in the next slide but we support all kinds of frameworks and help guide you to help you deploy it and there is continuous deployment so as you know when you create a uh some software you have to take think about how you're going to deploy it as you push new changes and with flick it works is when you push a commit to your github repository we are going to automatically build the site and update it and also uh the third point is there's a built-in cdn so what we mean by that is yes we push to ipfs uh web3 but we understand that you know you you probably also want a web 2 url so if you use flick you're going to have both on ipss and on the web 2 using so why would you actually want to host an ipfs so why not just uh you know create a normal uh centralized website well the first is you want to make your dapps truly centralized so if you create a nft application you know the smart contract is decentralized it's probably on ethereum and anyone can interact with that and maybe you are using metamask or something like that basically this part the blockchain part is decentralized but you probably got a front end an interface that the users will have to use in order to interact with your smart contract your application and if you are not an ipfs the alternatives are to use web to use centralized servers and in that case your your decentralized application is not really decentralized because your interface is not decentralized and that's why if you have an application you should really consider using ipfs also censorship resistance of course if it's decentralized there is some resistance because anyone can host a site on ipfs on fleek also we uh back up on filecoin it's a younger feature that we're going to continue expanding but it's kind of cool and it's there and finally is framework agnostic if it is aesthetic site so just uh mention quickly like what is ipfs right it's a file system it is a file system which means that uh when you have a site on ipfs what actually happened is that you were you talk to the ipfs network and you retrieve files and that works really well with static sites sites that don't rely on a server so on ipfs you can pretty much deploy any static site which means that it works with any framework provided that you have the correct settings so on flick you can use any framework that you want uh you just need to make sure that your settings are so that's a fun plus of pushing to ipfs just using any framework that you want that are setting also on fleek some advantages of using three is you can decentralize the naming the naming by that i mean the domain name so you can use things like ens which is like dns but on ethereum to like decentralize everything you got your smart contracts you got your dap and now you got even the domain name is central lines uh and use ethereum we we also support handshake which is another decentralized naming system uh to talk to your site and what is interesting is that you can use any of them in combination you can also have a normal dns all within your site you can have multiple ways to access your site some decentralized some less decentralized and we also take care of whatever domain system that you want to use we take care of making sure that it is up to date with the latest diploma another thing i want to mention is in the demo that i will show you afterwards i will not use these tools but just note that there are a bunch of tools to like customize your interaction with freak like we got a cli that allows you to um deploy your site locally so that's very very useful if you don't want to use a github we got an api that allows you to interact programmatically with fleet is the same api that we're using in the front end of our application that will show you afterwards so it's like pretty pretty powerful we even have some github actions that gonna allow you to like um customize your deployments if you don't want to use the the deployment option of uh that we're implementing by the photon freak so just a lot of tools a lot of stuff that you can customize if you do the fire but it's all uh optional uh if you just use the frontend fleet it is very powerful and simple here are some resources um i got uh a text file with these verses i can copy them afterwards but we have a documentation we got blog posts and also got a youtube channel where there's all kind of content including how to deploy a react application now let's just do a quick demo i'm gonna move this i'm gonna open a browser what i'm going to do is i want to show you what what application we are going to so i go to docs.flickr.com in example storage we see test is a crypto museum project that is a example project that uses a fleet to create basically an nft application if you go to a crypto museum demo dot on fleet.com you're actually able to interact with the fight i will show you show it to you afterwards but first we'll deploy it i'll show you how to deploy it let me close this oops close the docs examples orange and here this gita.com link is um the repository of what will deploy so if you want to follow the code you can have it here but now what i'm going to do is i'm going to open a tab to to app that's flicker.com so app.flic.com it's how you can access the fleet front end and you can put an account and once you create an account the interface is going to look a little bit like this so what i want to do is deploy this crypto site so i'm going to create click on the add a new site and now there's this uh flow the first part is like i said you connect to github because to use the front end you need a repository where your site will reside in so i click on this select my account and it's called it's loading i think yeah crypto museum and i got this one yeah so i want to so i can select where i want to host it because we also now allow uh hosting an internet computer but by default uh it's ipfs which is uh the point of the the purpose of this uh presentation continue and now we have arrived to the build setting so let me just walk you through what these are so first i select my branch so it's the master branch and here i can select the framework so what is cool is there are some pretty pre-built uh settings if i select a framework so i'm going to select react tab because it is what it is and as you can see it already filled all the fields over here so i'm gonna go one by one the first field is doctor image because um this tag is going to be built within a docker a docker image so you have to make sure that whatever docker image you're using has all the dependencies that you need so if you are in a situation where your site builds locally but then it doesn't build on fleek you might want to look at the docker image also i know that like for example my project is built with node 12. so i can add a tag like this uh it's gonna use a note 12 it's a tag that we're using for all the the flicker that your images the build command that is good yarn and yarn build since it is a react site the built file is going to go in the build directory and i can also select a base directory the base directory is when if you have a repository and there's like all kind of sub projects in it you can select the directory of the project in the case of this application um territory the smart contracts that there is a folder that contains the front end and it is in the app um the app directory so now i can deploy and now it gets this field it is um it is you it is building uh deploy started like image the build command and now it triggers the build and in this little box is going to show you uh the console which is very useful like debug if there is a problem but um this build process will last like a minute or two but uh let's not wait i already have a pre-built version it is right here this one so once it is built it looks like this just becomes blue the deploy here is gets to published if i click here as you can see it says all this console items debug victory we give you like i said by default a web 2 domain but you can use your your own so if you go to the settings um you can change the site name like i can edit change it to um web3 demo 21 confirm and as you can see it's changed the name of my site and also the name of the url that we're giving you you can also uh in the main management add the custom domain like if i i own the vitalik that's c domain i could i could add this at the main and then you would go to your uh domain name provider and add to the to settings and now you are at your site connected to your domain you can add like i said ethereum name system domains over here and handshake uh domain names in our youtube channel we i uh to save day one and shake if you want to learn more about that it's pretty uh pretty interesting oops but that basically it now the site is actually deployed let's go back to the presentation so we just deployed a site so if you have an nfc uh project that's how you deploy it basically it's pretty easy but let's get to the second part of the presentation flick storage because of course ipfs you can host your site but it's really good for hosting all kinds of files like images videos anything um on flick there are two ways to interact with um click storage the first is through the the ui so um on the site i showed you previously appletree.com you could steer sites as you can see over here there's this storage section which allows you to upload files and interact with them or you can use flic storage.js which i will demo afterwards but you can use our javascript api to upload to ipfs get your files etc and it's the same thing as the sites we give you a cdn so your files are going to be on ipfs but we understand that you might want to also have a web 2 solution so there's a cdn that you can use to access your files so what are the use cases for the flick storage uh product the first one is uh distributing your web assets so when you have a website you probably have images you might have videos things like that and if you put all these images in your repository what you will notice is probably it might take a long time to build the site because the framework is gonna like copy the files and things like that and build like the build process is gonna take forever um therefore it's better to um upload it to a cloud platform or in this case the alternative flick storage and the idea is like in your image tags and the source you put the url instead of uh having the the file in your ripple so that's gonna save you like a lot of time in your build process it's the best way to do it but the second uh use case which is the focus of this presentation storing files of nfcs because of course like for example uh like the nft statistic the art the art nft there might be a jpeg or a file like that associated to the nft and you need to store this piece of art somewhere and ipfs is an excellent way to do it so um yeah sexual.js just to mention it it's our javascript uh api to interact with flick storage you can add remove that stuff it's a recommended way to use so like i um art is often a piece of art is very often as fitted with an mft like here on this image a foundation that app it's a site where you can buy and sell nfts but as you can see like uh each nft has a jpeg or an image file as defeated to it it's what gives the value to the nfc is yet that you are the owner of that piece of art but how do you actually store that piece of art is very important and i'm going to make the case right now that you should use ipss so the first case here i i i assure you one alternative is to um store the the art by location which is the traditional where the two way of adding files for example if i was to uh store a file on imgur for example i'm gonna get as the url in gear.com1234 and i could store my nft at that url but that's a problem because first of all it is a centralized server so um the the the file could be lost at any time uh also maybe like in my smart contracts if i put this url what happens if inger changes the url for example or this id over here changes then i lost like the url that's in the uh the smart contract is invalid so like there's all kinds of problems if you use web 2 urls you don't want to you don't want to use that for your nfts because the file can change the the server could disappear and girl could go bankrupt um so you don't have to do that also there's no guarantee that they're giving you the right file that is not a problem it could be updated maybe it changes your pixel maybe it is censored or something so that's not good here we show that ipfs ashes are better because fpfs ashes are based on the content so if so i i upload my my image on a pfs and it spits out a hash this hash is unique because if i change even one pixel of the image the hash is completely different so in effect when you're selling an nft the person can become the owner of a ash also an ipfs with ipfs particularly ash or the cid anyone can pin this file which protects you against censorship for example if you know the government doesn't like the image that you've been propagated they cannot attack the ash anyone could uh have the file so like it's the preferred way to store your nft art you want on the blockchain to save an ipfs so i'm going to show you the demo of the crypto museum the app that we just deployed so i'm gonna open another browser over here uh wait a minute so it is prep to museum so it's it uses metamask so i'm gonna say this put a password so here i got a bunch of images and say uploaded basically what this app does is that you upload an image and it's going to mint and an nft with at uh with that uh cid connected to it so let's let's just upload the an image emit a new nfc so i'm gonna choose an image and i got this big tree i'm gonna click and create nft when i click on create nft it's going to connect to flick storage upload the image to ipfs generate a hash and then create a transaction to ethereum to create a new um nft with that cid so i do this now it's loading is probably uploading to a fleet now it's uploaded this is triggering a transaction uh i'm using robston so it's not real money luckily let me just put a big gas price confirm and now it's minting the new token and it's uh it should appear over here um i want to show you the the smart contracts so here that's the smart contract for the nft all these images are um on ipfs as you can see here the trio just like here i want to show you that this tree is on the blockchain and it's using a tfs so here i have the smart contract i'm going to go in read the contract here i can fetch the cid but it requires a token id so here the token id of this nft is 79 so i'm going to copy that paste query and it does it it spits out an ipfs hash or cid and i can go to fpss that okay i can now see it in the um in a gateway indeed to the the flick gateway i can fetch my my init so that's really cool that's like uh how it works it pushes the the ash to ipfs and indeed on the blockchain on ethereum there was the uh the ash so that's like the the recommended way to upload files on fps i'm gonna now open this um so i want to show you the code real quick uh yeah now i'm gonna make this a little bit bigger okay let's close this so this is a smart contract um i'll show you really quick uh when you mint it this is what it's called you pass in the cid n10 is going to create a new token uh means that the token and we're going to access it the ccid to the token and there's our suited function over here which is the one that we called when we were on interscan previously that if i give it the token id this is going to give me back this it's every single smart contract that the evaluative thing is done by the open septum code but if i go on app i will show you the part where it gets uploaded to a flick storage so here crypto museum so there is the flick storage uh npm package you install this in your app you just search this and then over here is the uploading is done by this line of code so um you call flick storage that upload you pass your api key and your api secret which you can get on the front end you give it a key which is the name of your file and then you pass in the data which is the artwork and that's it just this one called the function you have uploaded your file to flick storage which we pin it 10 to ipfs and it generates a hash it's really that simple uh the um you can you the time is running out but if you go to the documentation there's a fake storage is composed a very simple function like upload get things like that it's not difficult to use you don't need like advanced knowledge of ipfs to use it um so i'm going to conclude the presentation so we saw the demo this is pretty cool here's some resources the docs in the storage section you can get all kinds of information about click storage the npm package we've got the flick blog and again the youtube channel there's all kind of content including there's content content on flick storage so to recap we saw that there's flick of sting you can host your nft site on fpfs click storage to host your web assets and more importantly post the art the piece of art as fitted with your init i'm gonna cancel the presentation so thank you [Music] thanks samuel um yeah in the uh zoom chat there seems to be two or three questions that we can quickly answer before concluding your session um the first one being from shrey you're welcome to unmute yourself and ask a question yourself otherwise i'm also happy to um read it out loud awesome i'm going to go to the question so yeah like to start the tray when you deploy an app an ipfs will flick what exactly gets stored on ipfs so um if i give you the example of a react application for example you got your code you then build your your your site and it goes into a build folder that folder is going to contain your index.html your your compiled javascript and css etc and that build folder is what goes on on ipfs directly um so so like um you don't have to use react you can use any framework all the frameworks generally are going to like compile to a folder like that and it's that folder that will go to ipfs referral pento asks what guarantees us that the file will never be lost if nobody is pinning the ash anymore for example indeed like correctly point out with apfs if no one pins the the file it cannot be accessed if you use fleet we pin everything so on the hosting we pin the site on storage we pin the files and we take care of the pinnings which is always available uh to you uh if of the government decide to uh cancel us then you can just uh anyone who pins can continue like distributing it but we take care of painting it so it never gets lost question from youtube if we build a front-end app to upload an image from from browser directory to rps true fleek storage api within the api key for flicks the expose on the front-end client app that's a really good uh observation uh so this application it was a demo so it's not like a real-life application in the real life you would have a back-end that would have the api keys and the back end that would take care of um doing the calls to flick storage so this demo i wanted to create a firebase back end but i didn't have the time so right now it's like that eventually i will update it with like if firebase backend to create a demo it's gonna be more like it will be in real life but it's true don't make api calls on the front end um question 32 if the keys are exposed on the front end this might open yeah exactly the same the same question good observation uh in the real life don't put your api keys on the front end but for the demo words can we add our own doc images i'm looking to use yogurt extended that is we can go only yes so can you use your own docker images on the docker image field you can type in your docker image and it connects to docker hub so you can create your own custom docker image and use whatever you want it's fully customizable i think that's it for the other questions if there are more great thanks so much samuel um yeah thank you for taking a great workshop and for i'm getting everybody's questions answered if you want to connect with samuel we're going to get him into the web3 discord space and he'll be available to take any further questions um you may have um when working with fleek have a nice day everybody and yeah we've got a full day of workshops planned so look forward to seeing you in the next couple hours awesome thank you for inviting me so i have a nice day everybody 
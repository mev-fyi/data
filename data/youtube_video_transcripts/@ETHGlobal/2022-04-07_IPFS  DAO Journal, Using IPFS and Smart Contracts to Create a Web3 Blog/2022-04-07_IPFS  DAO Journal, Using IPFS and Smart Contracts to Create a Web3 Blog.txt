great so welcome to our session on ipfs and dow journal you're going to learn how you can use ipfs and smart contracts to create a web3 blog with drogo here if you have any questions during the presentation feel free to pop them in the chat and we can take them as we go or towards the end thanks drogo i'll let you take the stage hey uh hello everyone i will share my screen so uh today i'm going to show you how to do an uh sorry uh diy journal with ipfs and what content hydration can bring to you so the first thing i want to go very quickly is what is ipfs so um it's a decentralized file sharing network and the main way it works is by using content addressing so i believe the best way to explain what it does is just by showing you so i have an ipss node running on my computer right now the main thing i can do is add a file so in ipfs you add we will have a different api i will show you another one later but so i basically added the hello world file uh to my ipfs note that gives me this this is a cid or a content identifier and that's the hash of the file so if i go to see so if i go to this website i can see how it breaks down and basically here we have the share 256 hash of the file we are looking for and what we can do is we can go on ipf as the title for example which is a gateway gateway or servers run by people that lets you access the ipfs network we'll see later uh how we can use them in the in the app and basically we see the file hello world and so what has happened in the background is that the gateway contacted my node and downloaded the file and hash the content and since the content is hashed again with the with the hash we can find here and uh we verifies uh the hash we always are certain of the of the integrity and immutability of the content that means that i cannot get something else from this uh this file is hello world and it will never change this hello world and uh if someone tries to send me a me another file the file will the hash will be incorrect and that will reject it so uh what i have prepared for you already is some simple hopefully uh contract so we can ignore most of this this is basically a near c20 and token that we will be able to use for the for the contract and uh the the patch we are mostly interested in so this you could technically just import the erc20 token from open t if you wanted or right or wrong uh the password i'm going to i'm going to teach you today is about how we can use cids in the contract and what can they do for us so i already have a contract deployed here and the main thing it's gonna it's gonna do is allow us to create the block so uh it seems like it's a lot of code we're gonna script to read most of it is just the proposal and management thing so the first thing uh we see how about we uh i use the cids in in the contract why we do that so i want to have a block a blog on the blockchain so i want multiple people to propose article and then i want if enough people vote on the article then the article get passed and it is published on the blog so there are multiple ways you could go about that the one i'm going to use is i have an erc20 token which represents voting rights and i'm going to have i'm going to attach to these itfscids the main reason i'm going to use ipfscids is because as as you can show it's like since they are only the hash they are pretty small they are mostly 32 bytes or so a bit more and what i was going to do is i don't have to store everything on the blockchain if i want to have images or i'm just going to do text right here because it's shorter but we can that allows us to extend the trust we have so we trust the dio on to on the contract and the diy give us the hash of the content and since the hash can be used to verify the integrity of the content we are going to use that to fetch the correct thing from ipfs so i already have it deployed uh the first thing i'm gonna do uh is to create a proposal so i don't i don't know if we are gonna have to the time to find uh to fully get over this uh i will send at the end some code a link to the code you will be able to see it so the first thing i'm which i'm gonna do is i'm gonna add the file to ipfs so uh to do that the i have a basic app setup uh i'm not a javascript developer i'm a backhand one uh so sorry if my code is a bit messy but um what i want is a way for people to upload things to ipfs and since running your ipfs node can be a bit complicated uh just to to be easy and to get started we are going to use web3.storage which is a service that basically they run ipfs node and you can send them content and they will host it on ipfs for you uh there are other services like that pinata and stdot storage infura i'm just going to use this one because it's free it has a one terabyte three and it's done by the same company that i work for so i know it um well so the first thing we want to know is how to uh upload something so uh again like anything we started the docs um you have multiple options so i want to store a file you have multiple options a very good one get me the javascript client library we are not going to use that though because it requires using webpack and i'm using browserify in my setup right now so we are going to use the http client but if you understand the http version the javascript one is the same but either so you should not be feel left out basically yeah so the thing i'm interested in first is yeah so sorry i want to get a text form so i don't actually remember how we do text form uh i'm just gonna do um a basic input so yeah so sorry um the reason i'm doing this is i want for people to be able to write text and upload it to ipfs i think i forgot to say why i'm doing this so i'm just going to create a text block with id text and i'm going to create a function on here so i have a small setup where i can bind things like so i'm just uh for people that use reactives that was an unchained to you sorry uh but i'm i'm doing it that way so so i'm basically getting the text box and i will add it a new function on here on click ok so um basically if i just run which one is it uh yeah okay so if i build this and browse to here f5 okay we have the new textbook right here uh it's not very pretty because i didn't put things i didn't organize thing nicely so i'm just gonna make a div right here okay i also want a button to upload so i'm just gonna steal this button and upload to ipf uh [Music] okay so i will get back to my javascript code and here i want my upload to ipxs button and i just realized it's on the button that i want this so here we can go to the htc to the web free dot storage api and what i want to use is the upload right here upload a point endpoint so to do that we just look um here i will do something simple with a simple a simple a single file um blob file object as body so here i have previously looked up the the mdn for some uh fetch reference so method uh poor post that's good all of this no that i don't i don't want the content blob flash file basically what they said in this um redirect no and no referral yeah fine and the body uh the abilities that i want i basically want my text to text dot value so [Applause] okay so one thing we also need to do is authenticate the request so the way web 3.storage do that is with a json web token so you can see here at the top uh authorization mirror and the token you can get your token on web3d storage so you first login you can do it with github or email and you can copy paste the token here i have it here in my code i'm gonna basically add a new header which is oh uh why am i just let's be lazy here i'm gonna add my api key okay so i will first check that this oh i need a and then point is upload and so i will first check that this works hopefully uh so yawn build okay okay so uh test file how's the console open okay did i forgot yeah i forgot to to link my script uh so just script uh no script cursor yeah uh main.js i believe that the name yeah and if i just no i need to rebuild it okay upload is now what i did something wrong upload to ipfs ah should be good now guitarman by id it has the id upload to ips wait um so uh why i'm curious uh why just if i did this instead absolutely oh i will just check what i did in this no it has mostly the same thing type it on idea but [Music] okay so i will double check what's in the browser inspected id upload to ipfs what documents and it finds it here uh well i'm confused um if anyone has a has a solution it's a free internet point uh so not worth something but oh my i'm surprised i'm uh i i know i'm not the best uh front-end developer but i did not expect it to be stuck on something so it's not really what uh okay i'll just so i had some refresh codes that did something similar and what was the oh no oh okay i know it's just i have to load the script after the button and it will be fine okay well is it doing okay so it seems oh it's doing something from eyes forgot two ways always uh wait responsible jason okay so we successfully uploaded something to ipfs so uh i will repeat what what i just did so basically i simply created some a text uh text input and an upload to ivfs button then it is as easy i just i call the api the api web free storage uh uh the web free storage api um i just passed it my file the right content type the authorization the authorization which is just uh the the keys api key uh you can find on your icons and i pass usbody my text and we get our cid back so then i will try to make a new proposal so just so for the new proposal uh the interface i come up with uh we are gonna see how to interact with the contract but just to fetch the feed because it's gonna be simpler and more visual so i basically have a create proposal function that i can send it to cid and we should see it on azure scan after okay confirmed and so right now if i go to my if i go to my get proposal i can get the proposal number zero and we see my proposal so basically uh get proposal function returns the writer the cid it's about counts as a creation date um i'm gonna have both on the proposal so uh on the different function i have created uh we have the this vote one which is kinda it has a lot of code but that's not very it's actually far simpler than it looks like um so the vote is going to be i want to vote on zero since i have all the tokens uh the way i have configured these contracts which uh basically half of the token uh need to vote yes and i have all the tokens so it will be done so okay new transaction and we will wait on the third scan or i guess no we can look at this so now if i look at my feed if i look at the feed count we see it's one so i have one item in my feed and i can feed the item at index zero and we see that it's zero so basically the way i wrote the contract we have two mappings the mapping of feed which is the actual things in uh that in the block that we need to display and what we will get around doing shortly and the proposals and the proposals the ideas like you can have proposal holding the into proposal ids and that just so feed so the feed points to the id to the proposal so here we see we check feed id 0 it gives us zero so we need to check proposal 0 and we see that purpose of zero uh has a vote count of whatever this is the cid so what we're going to do right now is pheasant feed and fetch the proposal um yeah basically um so i have a function updated uh all of this around this mainly plumbing logic so it gets updated from time to time so i have this feed and for each entry in in the blog i want to fetch it and add it to the feed so the way i'm gonna do this uh okay do i have feed in no i don't have feet so i will create my feed object um so the first thing i want to do is get my on my dr object i want to get the number of feed so the function for this is fit count so i'm using my refree webfree right now uh the web3.js api and to do that uh it's basically i believe it uh just fit m and i just do diy which dr is an object of the contract with the address that method the feed count and i want to call it and i want to await that okay just checking that i'm not getting something easy wrong am i at least getting the number of feed in this so up i really uh oh it's not the right page this one okay i connect to metamask uh no that's my i need to move it here and next next okay so i'm gonna connect to oh i just connected oh my bad the console i want it on the right and perfect so we see the feed so that means the workflow the web3 is working so now we just need to get all the items and to add that to add them to the feed so for our ego oh no so this function is going to be called multiple time every time there is a new block actually so i don't want to refeed refetch things i have already fetched so i'm going to keep track of last feed index zero um [Music] uh while feed why my why the number of items in the feed is last is smaller than what it was last time i'm going to continue doing this and i'm just going to do [Music] let's preset the m so now the function i want to use is a feed one and i want to pass it the currently index so i'm gonna uh proposal id so that's just by the way i've created my contract and it worked that way um so i'm getting now the proposal id from my from the list of it and now from this i want to get the actual proposal and the proposal is going to be get proposal and it's going to be the proposal id to ensure things work as always we are going to log the proposal so i connect to metamask should be working in the background is it well uh am i calling so what am i doing with updates uh okay schedule update should be on um okay so i'm gonna actually just shortcut this because that's gonna be easier to reason about so just update and i want to do an update okay now i'm going to actually comment that line on headers um okay well so now i connect to metamask and it should scatter an update in a few seconds hopefully well uh okay so debugging time again sorry so the first thing i'm going to check is am i actually coming here which should be good because last time we were here so in update feed am i actually getting my proposal so proposal id and the actual proposal i'm already logging in uh oh my bad i got it the wrong way around i was i was checking that basically if i had a new proposal i wouldn't run which is the other thing i wanted to do i wanted to run this loop while i have new uh proposals that i don't know about yet so i'm just gonna return to this because it was working um schedule update so by the way for for those who want to know the scheduled function um is just some race logic some locking logic to prevent that if this function is called multiple time for example in multiple block blocking narrow there is not multiple execution and slides of update fit so i already have one and i just saw like else one would run fetch the update and start to fetch the first feed but then a new block arrive and another one starts and uh yes then you could have two functions in flight that are actually fetching the feeds they're fetching the same thing okay so it works and we have the object right here and what i want to see is the cid so i have this id right here and i'm basically just gonna add it to so i'm gonna fetch it again with fetch and i'm gonna add this content to my list of feeds so uh to do this i'm gonna use a gateway so there are uh reasons uh security concern about using gateway mainly that the hash checking is done on the gateway side and that means that um so since the gateway checks the hashes the gateway can send you wrong data and your browser wouldn't know we have some work in currently uh being done where in the gateway instead of returning you the file you are asked for it actually returns you the ipfs locks and then your browser can check this feature however the like this feature is not yet released in ipfs so uh i couldn't use it with public gateway just because uh probably gateway or not running that code yet uh const body oh wait fetch what i want to fetch now it's a gateway plus the proposal uh one because if i go right here one was my cit uh now again checking that things work a weight body dot um rez i believe or is that fighting ah same thing to save me again so i don't want a response.json i want a response object okay i want to respond that body okay so that's resection whereas is it oh no it's not text i remember right now uh or is it wait yeah it is right here okay well uh this should hopefully work now i have to get back here so now i connect to metamask and we get test file so remember what the code do so the first the first thing we did is we used these add to ipfs function i don't remember where i put it okay so we use this code to upload to refrigerator storage that gives us the hash of the data which is the fingerprint of it and i was to keep the integrity of it then we published that hash on the blockchain in this transaction no this one was about contract and so we publish the hash onto blockchain and uh it's not going to be able to decode it for me but uh oh no if i do uh i can show it so here we have the hash onto blockchain so what's good here is this file is pretty small and i don't really need however if i put a lot of the tag here and i upload it to ipfs it has been sent yeah and i have my cd uh i make a new proposal uh so i create a proposal then i will want to vote on it so i know it's gonna already have the id1 so i'm gonna send the transaction already um the only thing i'm sending on chain is the cid and the cid is very small and so again that allows us to keep this chain of trust so we trust the diy and the diy give us the hash of the content and so we know that the content is good so if i connect to metamask this file and i get my big content while i don't have to store that on ipfs on the blockchain sorry um since installed on the ipfs the so now we should get to display those journal uh yeah so where is my update feed function right here and instead what i want to do so uh don't do that it's unsafe but um so basically what i'm gonna do right here uh open child okay wow okay so i'm going to take my feed betterment and i want to happen child p and it's in our text is gonna be so basically um this isn't safe because i'm just taking the check the the the text from the blockchain and from ipfs story but ipfs gives the blockchain give us the link to ipfs which gives us the content and i'm putting it in our text and that could allow people to execute code on our site because if this contained code in in our text it will see this it will parse the javascript and start executing it if you want to solve this you need to to use an escaping library or use a framework that doesn't have those issue like react then it should be should be fine so oh i have been trying argument is not an object what am i getting wrong uh oh okay so first on okay i create my key on the document document dot create element p then i do p dot okay so that's just whip so now i apply i click connector to ipl to metamask it's going to start fetching from the blockchain to hashes and it's going to start fetching them and adding them to the page it should oh but but i believe is my feet no the fit is not hidden why okay so let's depict this why did i do wrong uh is fit something does fit exist yeah oh um i don't fetch the right thing i need to fetch the feed not the text i was adding i was adding my my post to to the french so connect to metamask and here we have our two posts so this is very ugly as you can guess uh but i will leave users the the work of making that pretty uh we're gonna maybe try to to make that a bit less awful by adding i don't know um from from with the address so we can get this from proposal uh zero i believe then and here we see the different codes so we see that my address has created this post and the post so i will go again on what we are doing uh for for last time because it's really it's important it's like we are creating this this we are keeping the trust from the diy contract which is on the on the blockchain and we use that to we use ipfs as a way to find the content so the dll contract gives you the hash of the content which tells you basically what the integrity of it must be at the end and then we use that to be sure that we fetch the right thing and what's right about that is we can use many different actual uh services for this so right now i'm using redfield.storage because that's very easy but you could use other things so for example webfdot storage is our way to view my files [Music] so what i wanted to show you is just the accounting files okay so i have my file here and um where if it does storage does replication on file coins for example oh well this one has a lot of replication but uh wayfield storage runs their own cluster and run and replicate on firecoin some authors uh think you have lighthouse storage for example which is another thing so they also do on ipfs oh uh wrong link by icon so can i found this for example filecoin so lighthouse storage is a protocol that use filecoin to replicate the files forever and they have their own protocol on top of it and that you can access from the blockchain for example uh you can use pinata you can use infira and so the point of it is icfs doesn't lock you in in a solution so right now the solution i've used to host my file is repeater storage because it's very convenient but i can also just take the cid and pin it to my node and i can use it right here for example so i want to get the the proposal one i see this id right here and i can do ipss pin and here i see that i have pin the cid so now instead of just web video so it's hosting the cid uh i have this id on my node and on refrigerator storage so you would imagine that if you were using this for real um what you will have is uh people on the dial will run some software that automatically pin the different articles that are created um yeah do we have any question or something that people want to see um we're just a bit short on time maybe we can take one question um someone asked is there a good place to refer for real examples uh real example of so a real example of uh ipf's usage or something more particular uh maybe billy you can you can one i cannot mute you to ask yeah so um to do that we have ah some dot ipfs.io which has a bunch of different platforms that use ipfs the best so the main example that comes to mind is nft community for example which use uh ipfs links in to say there is not only ipfs but ipfs is very widely used so they use ipfs to store bigger content because like you cannot pass the a jpeg onto on the blockchain that because just the storage on the blockchain is very very expensive uh you i can send you that link uh you can find multiple one yeah exactly i'm using uh that's why iprs is so good this the the content addressing part allows you to use whatever solution you want and uh it allows you to move from the really expensive place to something that is really cheap like five coin for example or peanut or whatever you want great thanks jerobo uh we do have a few more questions what i can do is pop them in the discord chat and you can answer them async and yeah thank you so much for your workshop well thanks uh good luck on your on your projects everyone uh bye 
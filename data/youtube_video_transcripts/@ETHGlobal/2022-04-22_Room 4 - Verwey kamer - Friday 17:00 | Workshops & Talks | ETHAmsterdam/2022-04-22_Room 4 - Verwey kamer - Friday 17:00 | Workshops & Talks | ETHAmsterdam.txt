okay i'm i don't want to keep you guys waiting obviously we want to try to see if like as more people are arriving so we're going to have like a very slow start to warm you up [Music] thanks again for everyone who has come if you don't know what wall connect is walla connect provides you with the ability of connecting to multiple wallets remotely and not just have the browser extension so if you're familiar with metamask or even with a mobile app that has a little dab browser it allows you to inject a provider that will allow you to have the wallet expose some accounts and then those accounts are used for you to know which addresses the user has and with that you can actually sign transactions and messages right so that's kind of the core concept from it and what wala connect has enabled was basically to make it more interoperable and expand beyond the world of just the desktop browser or even the mobile that browser and just have this remote connection be anywhere the first experience that we created was with a mobile wallet connecting to a desktop computer and you would have complete separation between the wallet and the dab so we basically created an end-to-end crew encrypted channel or end-to-end encrypted chat that allowed you to have to any wallet to connect to an application and that would look like uh for example if you go into our registry we have more than a hundred wallets like you can go through all the pages in here but even if you choose a dab like uni swap you would have the ability of actually connecting your wallet and when you go into the wall connect you actually pop up this qr code and you bring one of your wallets and you scan the qr code you go into the qr code scanner and as you go to the qr code scanner you get prompted to connect your wallet into the application it knows which website is connected to and it's asking you to approve it so when you actually do that from your phone it sends a message back and that message sends the accounts so essentially while connect is a messaging network with a very specific purpose so let's say we wanted to buy like a hundred inch um and then it's gonna fetch the best price and then you confirm that you wanna swap it on my phone i received a message this needs to be approved and it happens immediately and in order for this to happen you have basically a service in the background just relaying encrypted messages and these two parties are talking to each other so in this case i'm actually going to cancel and you see that the swap has failed because i cancelled there's more than a hundreds of dabs and 110 wallets right now supporting wall connect but in order for us to actually reach this adoption we had to make the experience of connecting your dab to your wallet much easier and one of the things that we created is this open source project called webtree model you might have seen this screen before it's i would say a very popular screen nowadays and this drove a lot of the adoption for wall connect because it did one thing that nobody was doing which was how do i allow the user to select which option they want everyone just made the assumption everyone's just going to use metamask or use like a dot browser but then i actually wanted to make it easier for them to actually select wall connect so i created a library called webtrimodal which in a sense says it's a web3 model because it displays the user with a model to select which website provider you want so this will be compatible with either web2js or etherjs depending on your preference personally i would recommend to js nothing about js but etherjs is really really good so it will save you a lot of time and how does it work you go into npm and you install web3 model and when you install web3 model then you have to see the provider options section the reason for this is because when you add to your project you're going to have this library web3 model that you can even con figure which network you want there's some option out for the provider and everything and then this this part here when you say connect it abstracts the user selection it will handle when the user is displayed with the modal it will display that for you it will handle when the user failed for example they went through the process of connect to metamask wall connect but for some reason failed it will throw an error but at the end of the day just say here's your provider and then you could take that provider and inject it into web3 or ether.js so i have actually a example here of a source code that uses web3 module it's literally the react app like boilerplate with the button that says connect can you imagine what it's going to do it's going to display the web to model magic um and so this is interesting right because then you have the option here of actually selecting metamask or you can cancel it then it can go into the wallet connect and you're abstracted from that whole experience and then when it actually is successful it will just replicate and say oh look you're connected and there's this address here and i have this button authenticate which signs a message and then you will see it pop up on my phone which actually shows like this one wants to sign a message and then i actually sign it and it will this is such a simple example that the signature is here like you know and the signatures here so basically i've been able to connect my wallet to this and i can do the same experience on um on metamask as well actually i have to clear storage [Music] all right so we repeat the same experience with metamask sorry because metamask is like unlocked don't look at my password all right meta mask and it's authenticated and then you actually see the message and it signs and webtrip model works exactly the same so how would you go into the process of doing this you the most important thing to consider is that web2 model is an abstraction but then we don't want when you install webtrimodal that all of the 20 providers are in your app then your app would be like 20 megabytes big like you need to actually have some consideration that they need to be installed separately so we made this ability of actually configuring which providers you want and sometimes providers have options of their own that need to be injected so the first step that you need to take is actually import web to model that we saw that you need to install and in this case we're going to support metamask and wall connect the reason metamask doesn't need to be configured is because it's a browser extension so it's already present in the user and it will webshirt model will detect whether meta metamask is there and if it's not there it doesn't even give it the option so watch your model abstracts that logic for you and you don't need to configure anything for wall connect you have to install wall connecting provider and then from the wall connective provider you can create a web3 model object which you can see here and you bypass the network to be mainnet cache provider cache provider is an interesting feature that has become more and more popular where you actually cache the user selection so next time the user comes to your app they don't need to select that model over and over again it will just default to the provider that they used before so for example if you use uh metamask then when you come back it will use metamask because it knows your browser has been to metamask and in the provider options you basically put the provider that you want and you pass it the package so you have to inject the package this is what makes it like a lighter library because you only install webg model and welcome provider side by side and in the case of wall connect you actually have to pass like any of your id and here i actually use like environment variable which is a good practice you guys do it more often and but it's a hackathon so you don't have to do it and one of the things that's really important to do when you actually integrate with this is that you have to listen to events like for example if you're familiar with the eip1193 uh if you're not then i'm gonna actually teach you about it the reason web3 model is actually possible is because there's a standard called 1193 or atm provided javascript api that defines that every wallet provider will follow this api so web3 model was able to support more than 20 providers because we all agreed how the providers are going to look like and these providers have a lot of definitions and everything but you know what in webtrimodal we explain it more easily we just say that you have to use these events these events are very important the first event shows when the accounts has changed like it's a very common pattern for ethereum wallets that the user can select which accounts are available to the application and if that were to change after the connection then you can actually listen to this event and you can see that the data that it's passed is an array of accounts and the second one is the chain change which is very useful especially in the pattern of multi-chain evm and everything because if you want to use a layer 2 you tell the user hey can you switch to optimism or arbitrary or something like that and it will show you the chain id and you can update your app and say okay now we're on this chain and then you have also connect and disconnect in the case of in the case of metamask you don't actually have that but like some wallet providers use remote connections even coinbase wallet has this so in case there is a disconnection you actually have this event happening uh and you can handle that state you can even have like a i don't know like a little red indicator oh your wallet is offline and then your wallet is online so it's a really good pattern to follow there and but the most important um things that you have to consider is that when you get the provider you can just inject it into the the web trade that you want so there's sometimes when you're in a hackathon it's good to just write vanilla javascript and not have a react app we also have an example for that um so you can actually follow the vanilla js example and you can see how it actually handles this in the case we ever have like walking and confortmatic you still pass the provider options here everything and you can see how it's used in web3 where you can get the chain id and then from the chain id we even have this library to get the name of the chain and everything you get the accounts and then you have to listen to the actual changes for the accounts change there we go wow so here see like you have to provide their own accounts change fetch new account data chain change fetch new account data network change network change was deprecated this no longer exists but now you still have to listen to this so these are the most important things when you're connecting to a wallet also another thing to consider that i think not a lot of people consider is like the disconnection um because while while you you can't really disconnect and in meta mask you can actually disconnect on um on wallet connect and other providers like coinbase wallet so from the dap you can actually have the user like block that connection and not have it connected anymore and the way you can do that is by calling provider close and you if you're using the cache provider you actually should clear the cache provider because if you're caching the provider and the that was just a page that reloaded then it's important but if the user specifically disconnected the provider then in that case i would recommend that you clear the cache provider in that point and honestly that i think that pretty much covers all of the basics and i think it's also useful to review the documentation for example on wall connect you can go to docs.wallconnect.com go to quickstart if you're building a dab then you go here you use the webtrip provider for your web gas or gs and we tell you how to install it and we have a setup that can use both infuria or a custom rpc where you can use like for example alchemy nodes or some x-di or some arbitrarium you can use whatever you want with wall connect and you can customize it over here you enable the provider this is what web3 model abstracts you from so you don't need to do this part but then obviously you have to do the events for 1193 and then you have the methods to request um what i was going to say is that like there's some particularities about the eaters js and web3js so a web3.js existed before and worked in a very specific way so they actually have a much cleaner integration here but then when you use etherjs you have to make sure that any web3 model provider needs to be wrapped as a webtrip provider before being passed into one of the contract classes or wallet classes yeah i would love to hear questions how do you know to show the model before the model yes so for the user right so the model is very abstracted so when you actually go into let's go into the documentation web terminal this model is displayed in this part webster model connect so you can have your app you configure your provider options and you instantiate the web3 model object and then whenever you want to get you could assign this to the connect button the connect button that we saw in the react app which called this web 3 model connect and that would open the modal for the user and the user would do the whole process so different providers will have different processes of how they authenticate but once it's finished and complete then it would return you an object and it would just say here's your provider now you can actually go into web2gs or eta gs and just add it in so this process will open and close the modal for you and it will also handle the success and failure states of different providers and you just need to you know build your dab which is your job you know the experience of what your model is really developer focus because we want to make sure that you have to think less about things that don't really matter there's so many webtrip providers out there like literally when you see c provider sections you go into provider section here there's all of these options and then inside for example walk and i go convey as well like you open it and then you have like oh for well connect you install the web gear model and then you have to configure it like this and have to pass the inferior id and then it shows c full options for well can equip your provider in the case you actually want to go to wall connect documentation and configure even further but this is like the basics for the welcoming provider and if you were going to go like with the coinbase wallet it then has like a separate document that actually provides you here with how you would actually do it but they all fold the same pattern off you have to install an extra package inject the package into the provided options of web3 model and then pass some optional or required parameters yes sorry to ask about web3 modal again but uh is metamask the only extension-based wallet that's automatically populated this is a good question because actually it has nothing to do with that it has to do with the fact that it's an injected provider and if you want to dive into source code we're going to do it so there is actually when i say metamask i actually mean injected providers we actually have a here a massive list of injector providers metamask just happens to be the first one that existed gnosis safe back in the day actually had a provider there was a browser extension that would actually inject nifty wallet also exists that is an injector provider so that first option of the injector provider would actually be configurable um automatically displayed sorry mn based on the injection so if you go to i don't know for example status wallet and you open the dap browser the webgear model will detect it and just change the logo to be status but ninety percent of the times it's metamouse that's why i keep saying metamouse because it's easier but actually if you go through there's actually a lot of injected provider wallets out there and it will change the logo based on the one that's available to the user so that's why it's automatically there because you could think of it as like injected wallets are user installed and these are developed and the other ones are developer installed so it's up to you to do the configuration rather than the user have to do it themselves but yeah for example you see brave the browser has their own browser extension and they also have their dedicated logo so when you open this modal over here instead of saying metamask it will say connect to your brave wallet and it will show the little brave logo other questions there is an example up with the list of all providers available as a working app yes do you have something on github or somewhere so to rephrase your question is all the providers options in there configured into the web3 model actually i've never done that it will look crazy it will it will it will start scrolling through it yeah yeah it will scroll it will start scrolling so i i would not recommend that honestly i i think like at the end of the day as a developer you have to think what's your target user and you have to kind of just pick like for example i personally picked this because i found this to be a good combo you have like the desktop users and then you have the mobile users and then you have like the users that don't know what the wallet is so they can just use taurus which now it's called webtree off they're downstairs they renamed i have to rename this um and then you have coin baseball there right like so this is like very popular options so that's the ones i usually configure but i've seen like some of them like eight providers at once you know and honestly that's fine you know it's up to you guys to develop it oh yeah hi do you also have like some option for analytics like tracking which wallet gets connected the most or something we don't but we actually thought about that that would be actually a very cool feature to have uh the reason we don't have that is because this isn't a very open source project there's no back end there's no like even though it was developed by wall connect like this is a completely separate thing that's why it's so popular because it's kind of like free open source libre like nobody owns this nobody's tracking this there's no analytics but honestly you could you could just like after the web 3 model connect you could just like look at which web provider you got and then you just like track it yourself you know in theory you could do that but it's not built in yes does it work so this is a very how do i say isolated library it's technically built in react but it should work anywhere because it's rendered completely separate you could have like a vue.js app with this webtoon model and it would work so yes i would say it works since felt i've never tried personally but i know there's an example in vid there's an example in angular there's an example of you and svelte i never tried but it should work and php would work right yeah any other questions what do you have an injected wallet that is not on your list that's a good question it will show you like a little logo that says web3 and just says connect to web3 wallet so it kind of just like defaulted to web3 wallet it has a it has a fallback weight injector provider but there's a huge list it's very unlikely that happens unless you build your round yeah yeah yeah anything else can you pass the mic yes hi um general question does it have to while it connect does it have to run in a browser or can it run outside the browser no uh yeah because i i was saying if you're chris because we had like some more questions in the booth before uh yes wall connect like webtrim model is for browsers but wallet connect can run anywhere like web3 model it only runs in browsers but while a connect provider you can run it as an electron app as a react native app as ios app android app uh literally anywhere honestly uh we even uh had some people who developed like a flutter plug-in but it wasn't actually developed by us but i we posted on the discord chat if someone wants it yeah so if for example if you want to do like a node.js like i remember there was someone who did the cli uh terminal that would like connect the wallet with wall connect and it would just like display the qr code in terminal and it would work so yes the the javascript library is what's called isomorphic so it will work whatever any other questions oh sorry just the language library is obligatory javascript so talking about wall connect specifically um the library that i showed is a javascript library that will run in react native electron node.js browser but then you have the kotlin library which runs on android and then you have the swift library which runs on ios and there's even a c-sharp library that runs for unity and then there's the flatter one for no the dart one for flutter so if you're thinking about another one no there's no more there was someone who did like a one weekend project and write it in rust but it was not maintained for like three years so i wouldn't recommend it so uh how does the flow differ uh on a mobile app and how can you optimize that part so you're saying like what it would look like if web3 model was on a mobile app i mean it would look like the same and then you would have like the user selected and for example for wallet connect actually i can try to emulate it let's try to emulate that uh give me a sec well yeah it's responsive all right so we have on the left uh uni swap on mobile let's refresh it just make sure it detects on mobile we're gonna like change actually i might need to do a hard reload you know what just go full incognito there you go all right now it's why is it still there we're gonna go safari guys okay it's not there like wala connect is very persistent uh actually this is terrible here i just need to go into here now wipe that actually that's very annoying how do you disconnect from here oh it's this guy because we used metamask before so i kind of wish metamask had the disconnect button you know what i'm not going to use this one i'm going to use this one okay boom there you go all right this is how wallet connect would look on mobile uh wall connect doesn't use a qr code on mobile because it would be impossible so the way it works is that you have these deep links which will redirect you to the specific wallet on ios and on android this would actually look different with just like a one button because android actually has a user prompt to select the app and yeah and then you know like for example if i were to emulate it here the uri actually just shows right on the right and you approve it and you would be able to do all the transactions because the qr code just has like this minimum information to actually establish the connection and that can be represented either as a deep link or as a qr code so yeah that that's how it would look like on that side any other questions well then oh sorry is it easy to use uh wallet providers instead of the alchemy one when you want to after you connected the wallet when you want to go some smart contract functions so the question that you have is specifically compared to like alchemy or like inferior right so and there remember there was this part here where i showed on the documentation for wall connect that you can customize your rpc endpoints that's when you actually have basically web the website provided for wall connect proxing to your favorite rpc wall connect doesn't actually read smart contracts directly you choose who actually reads the smart contracts by default we had infuria always but then we added a custom rpc and you can put like your alchemy endpoints so it will format the transaction reading from alchemy or infuria or quick note and then take that transaction and send it to the wallet so only when the transaction or the message is ready to send to the wallet then it would actually go through wallet connect protocol right so you would have the exact same performance as if you're connecting directly with alchemy because we're just proxy to the wallet before going to sign so i have an app that logs in with wallet connect but uh app apple rejected it because they don't like the flow of the user being taken out into metamask and then coming back in is there like a way to amend that problem well that's actually the first time i heard that actually you know the thing with apple is that they have guidelines but then they kind of just like pick and choose like someone to bully like because honestly i don't think that that should have been a problem because there's literally wallets like trust wallet that they had to remove their dap browser because apple didn't like it and then they just used wall connect instead and then they were like cool with it so i don't know what particularly they were not liking about that but if you go to the openc app on mobile like the native mobile app they use wall connect to connector uh zaryan also uses it zapper uses it uh even twitter with their new twitter blue feature of the nft they use volcanic so if they didn't reject twitter it's because they have favoritism honestly where you just input your wallet and they log them in my guess was that for that reason uh they allowed it because there's another way to log in yeah but then you have other apps that don't do that so i mean add another option for like just adding the address maybe they will pass it sometimes you just kind of have to play ball with them you know to just get it approved past the app store and like you know sometimes they'll leave like a scam map but they don't leave your app like so you know it's not perfect system right guys i think we covered pretty much all of it and thanks a lot for all of your questions i have some stress pulse because it's going to be some very stressed times ahead of you for all the hacking and like late submissions that you guys are going to go through so please take them um yeah and thanks a lot for coming and i hope you guys use welcome if you have any questions please join me at the booth on the other side of the venue and i'll be happy to help you guys thank you everyone and we want to make sure that the transition goes very smoothly so we're aiming for we have some wallets in beta right now and we want to move all the wallets um is uh uh um okay uh um you 
presentation but thank you so much um and i hope everyone uh watching if you have any more questions for michael you can find pocket network uh in the eve global discord um and of course you can ask questions in the chat as well um okay thank you thanks michael all right so next up the last talk of the day uh i'd like to welcome dietrich from protocol labs deirdre is going to talk about participatory infrastructure with ipfs we're very glad to have him here uh to give a great kind of last half of the day uh and wrap it up so dear i'll i'll pass it over to you uh and let you take it away here hello everybody thanks for the intro and thanks for having me here it sounds like a a long day of interesting topics i cut the last bit of michael's there uh it's it it's great to be here talking to ethereum folks uh once again i uh so real quick i'm dietrich ayala i work on the business project the protocol labs uh i actually first i used i used to work at mozilla for many many years and while i was there i worked on a project called libdyweb trying to bring some of these technologies and make them enabled at the at the very edge in the in the user agent itself uh inside browsers and in that little project i ended up going to ethereum the uh devcon 4 in prague i think it was and how to talk there it was really great to be able to get introduced to some of the folks in the community and meet some of the projects that really get a sense of of the values and intent and uh excitement of value all so now i've been at protocol labs for over a year and a half now uh working on ipfs and i'm going to talk to you today uh they said there's a mixed audience some people are new to the space and people not know this space um so a quick introduction to iboofes problems that we're trying to solve uh a bit about the the side effects that i see that this these types of architectures infrastructures uh have on user agency and what it means when we make these types of infrastructure changes uh but first a real quick run through ipfs uh the the web today one of the reasons why a lot of us are here and working on those types of projects is because there are a bunch of problems from centralization which has a bunch of negative side effects on our ability at our user agency on the internet how we interact with each other as individuals as organizations uh um some of the fragility and resiliency of the web and ultimately end up owning our own experiences so much uh some of the problems that we're trying to solve around access from from various different places might not have the same type of access that we have in western countries come from the us uh censorship which is uh a major problem in in many countries and i've spent some time living around different parts of the world where it's more or less of a problem that you really do feel on a regular basis huge uh inefficiencies in in network access uh security models and trust models that don't necessarily match the use cases that we have uh you know developed 30 30 years ago or plus years ago organically grown and now not necessarily being uh growing and adapting to the use cases that we have today and then things that that don't work uh off offline or even in just disconnected networks uh like for for example if uh doing this doing this talk and and uh if i was doing it from uh from a google deck and that that deck went down or that service went down uh everybody following along wouldn't be able to do so so there's no technical reason why we can't have this type of local network collaboration offline collaboration but i'm really interested in seeing those capabilities develop uh things things like internet shutoffs around egypt myanmar and and parts of india right now uh having really severe access issues uh and then and then censorship of course one of the one of the biggest groups of people using ipfess right now uh well in the last couple years were people trying to access wikipedia in turkey i went to istanbul and you can see like there are stencils of wikipedia pages on on the streets there which was kind of fascinating and really shows how much of a public issue was and then we have a really big group of users in china matters matters news um using ipfs as the last mile solution to make sure that they have access to external external news sources information and i lived in thailand for quite some time where you you regularly see wikipedia pages uh that just give you the royal seal of the censorship bureau effect of that country there so it's a real thing that does affect a lot of people uh so an enter enter ipfs a project and a protocol that's used by a lot of um a lot of uh you know project programs and projects in the ethereum community uh because of its immutable addressing and the storage flexibility that that it provides uh one of the kind of some of the hallmarks of this protocol that address addressing things in the in the web today it's done by location where something is which server is it doesn't reside on and which ultimately path on that server often times um and uh whereas ipfs addresses things by the unique signature of the contents of the data that you're asking for uh cryptographic cryptographic verifiability built into the program into the protocol through that address when the address is unique signature of the data you're requesting is uh very very difficult not impossible to fake that something is what it is and that's built into the way that you request something itself so if you trust the source that you got the url from or the address from uh then then you can trust that that data will and and verify that that uh data will not be modified and transport uh and then transport agnostic peer-to-peer networking so built on top of lib b2p uh although you can uh swap out other other trans transport libraries but live pdp providing uh an abstraction layer across whatever transports and you know common transports like tcp udp etc but also some uh groups that we're working with who've done things like develop a pdp transport for uh things like co-op or bluetooth other ones and one of the most important ones that and differentiates ipfs from the the web of of today is the the idea of a contextual trust model so just model that's not not enforced necessarily by tied between this intersection of of of ssl and and dns uh talking really quickly from uh if you're new to these types of architectural network architectures uh the hp today working requesting from the web browser or native application or whatever the client is to to a centralized server uh whereas ipfs this data is being transferred between the different peers that are participating in the network any given time uh and uh that number appears can be determined by the and specific to the application that's being used at the time so the resilience and robustness network travels along with the popularity and uh and the user base itself uh the unique identifiers the way that we create addresses you may be familiar with urls where you have a domain name followed by a file path uh preceded by a scheme in uh ipfs we hash the data of the file that you want to add say cat.png and we get the unique signature of that set of bits create a content identifier that you can use to be able to address or request that data if the data changes thus does the unique identifier so the address itself changes these are called cids uh when transferring data we also that data so we take that cat picture and we split it up into a whole bunch of logical bits and those bits can then be shared by many different participants in the network as opposed to being only requested and received by one the location-based addressing so today we have request something by where it resides you make a you know through dns you find out the ip address where this data that you're looking for resides that request goes to a remote server uh it resolves eventually to a machine that responds with those bytes uh with ipvs when you're requesting something by its content a whole bunch of different peers in the network might actually have that data who are not the publisher but because of the cryptographic verifiability means that you're okay receiving that data from those other those other participants in the network even though they are not the originators of that data and ultimately even if that publisher goes offline uh some of that data might still be available some of those other participants who want to continue or getting utility out of whatever the application or service data was and are keeping it on online so what does this have to do with infrastructure user agency this um infrastructure at a pretty high level uh but one of the things that you see here is that there's a direct relationship between the person requesting the data and the uh person and your project that's serving that data but let's let's be honest it actually looks like in the centralized web a whole lot more like this where you're requesting uh this data from from an entity or project and uh the more the number of requests go up and the more number of users that you actually have in your project the infrastructure complexity increases and increases and increases and this has some interesting side effects raising the barrier to entry for innovators for people who want to enter new markets because we all have to be able to understand what the scales can be to make projections on that and build up a relevant amount of infrastructure themselves to be able to support that with side effect then again of that there are few people as needs user needs increase for a type of service uh there are fewer people who are able to actually provide that service because of the overhead required to actually be able to get into the game which means there's less competition which then means there's less innovation a negative feedback loop of of a vicious nature uh but one of the one of the one of the uh other parts of this dynamic means that the power is in the hands ultimately of the publisher uh with web2 it's a control point over the people that are using a service uh for example if that publisher is uh go goes out of business and uh and the service goes offline the users have have no choice but to migrate to something else or if it gets bought by a bigger fish you're now a user of maybe a company that you don't agree with or you don't like their service or what they're going to do to the service that you previously liked aside from all the types of problems that i mentioned earlier which are still subject to ultimately the publishers hold all the control in in web 2 they're the source of often the business logic uh where your data is stored which opens you up to other problems such as surveillance and tracking that maybe you didn't realize you opted into and they also have the burden of that of that infrastructure but ultimately they have a they pretty much have 100 of the decision making in applications today the centralized web users have only one choice which is to leave to go use a different service if if one exists uh very little choice over how their data is treated uh the the ultimate longevity of the service or product they may be have their own business or livelihood uh it may be dependent upon with ipfs uh you know aside from the the type of things that i talked about before it does change the nature of this to some extent so you are as i said getting this data from uh other sources other than the original publisher and that that publisher goes away that that data still could still be there the infrastructure of the that runs the application can still be there uh the lifetime of these applications and being more dependent on on the user than on the publisher uh in this type of model the a lot of the out the logic app logic is getting pushed out to the edges more out to the clients more and we we start to see these layers collapse as michael was talking about the last talk a little bit that as these layers start to mature they also start to condense a little bit they get more and more obstructed away and more and more of this uh ends up being in the hands of end users the infrastructure both from uh deployment and delivery ends up being more and more uh user participatory as solely being executed on the devices of the publisher uh this is a change in how we think about things like value capture uh how we think about what we invest in what we how we think about what the ultimate impact of uh our business efforts are on on the behalf of our users uh we're seeing more cooperative computing come into play as web three layers start to mature uh and between things like uh one of the things we i'm looking at right now like uh with the advent of ipfs and then file coincide to launch uh how we create cooperative organizations like dials around ensuring that data valuable data and services can stay online um so where's iphos at today uh a quick run through the ipv5 stack is composed of a number of different pieces um from the from the definition of data to name resolution and finding and discovery of data uh the uh addressing of data and then the network infrastructure to be able to support the delivery of this data and these applications between peers uh and that's what libgdp does an ipfs node running node does a number of different things uh if you're running a node right now typically this is a node that runs on your computer or on servers that you're running on behalf of other people uh either a a pending service or you're running it or in order to keep the data for your own application and some users online um or keep it persisted anyway uh right now in a running node we are default pure account is 900 peer connections at a given time uh this is is a transient thing depending on the use case you can turn that up or down obviously on mobile devices keeping 900 uh persistent tcp connections it's not going to be a viable thing to do from a from a device constraints bandwidth usage or battery lifetime uh but so we turn those kinds of things down we're seeing a lot of different applications experiment with the boundaries between what like like what does ippfest like clients kind of mean uh how do you run as as native as possible a node inside of a a mobile app or inside of a a web page as well nodes can vary a lot depending on how much of the ipfs protocol and toolkit that they have implemented uh we have about full nodes as our primary implementation is in go go ipfess uh which has a full direct connection to the to the dht to the the peer-to-peer network um but we also have javascript implementations and a lot of different http clients and partial implementations in a number of different languages like rosten and python and others um that various parts of the community are supporting uh the node deals with a few different things it does things like manage keys for you manage your communication between different peers uh you know doing things like managing the peer book so uh identifying which which appears better or worse connectivity with or used often or less often uh syncing data between those peers uh and then supporting the local apps that are running so in the case of of dapps uh being a node that does the syncing and requesting pulling fetching and publishing of the data that the dap is interacting with uh the easy way to get started downloading ipvs desktop uh this is a uh desktop electron application that spins up a go ipfs node gives you a little bit of a easy way to be able to start stop and see the status of the of the ipfs node the ipfs cli is available in a bunch of different flavors in a bunch of different places pretty pretty easy to install and get started at this point uh the cl has a number of different commands that can give you a way to explore what this uh the various components the tools in this toolbox from a protocol standpoint offer you as a developer for how to integrate with your applications and and be able to understand what type of communication is happening and running on a regular basis uh we we run hdb gateways a way to be able to allow uh http applications to be able to access data publish data on the ipfs pdp network uh but also some uh companies like cloudflare run a large gateway as well and uh they have a we have a public gateway checker page where you can see and register a gateway that you're running um obviously your mileage may vary so we do post things like some capabilities uh level of security verifiability and also performance for some of these gateways but anytime you're not you're not running that node yourself you are delegating a trust that to that other organization or or other node um ipf's companion is a browser extension that allows you ease of access from web applications to your local node that you're running uh something that i didn't add any slides for here but uh we do have a couple of different interesting things with regards to browsers in uh opera on android you can actually uh use ipfess pretty much directly it talks to an hp gateway but you can actually use the ipfs address there and in brave if you install brave nightly browser right now and you go to about flags you can enable native ipfs support which works kind of like their tour support does so you enable ipfs uh you encounter an ipfs address and ask you would you like to run into local node uh and it'll download go ipfs and run and manage that node locally for you directly from within the browser um so this is something that we're hoping uh to to ship with them in a release version of brave sometime later this year so pretty exciting uh javascript ipfs jspfest is uh one of the ways that you can easily access ipvs and use it in your in your web applications or new applications uh so this doesn't have a full connection to the dht but does have a lot of ways to connect to it and be able to connect and to and manage your peers that your applications connect to uh one of the one of the things that we've done recently as applications are starting to use ipfs more and more especially in web applications uh you know if you open up two different tabs and each one uses jspfs right now it would by default create a ips fest node inside each one of those tabs which isn't really sustainable if you have an application where your users open up multiple tabs so we have a way to be able to use shared workers now so that you can have one jsipfest node running in the browser that's shared across multiple tabs of the same origin we're working on making it work across origin as well so you basically have a single fpfs service running inside the browser at the javascript level that different web pages can share so that should make things both more performant and more and less resource intensive uh there's as the ecosystem has grown an adoption of iphone fastest growing their number different toolkits frameworks you might have seen some of these three box is uh built on top of ipfess and it provides things like data storage uh identity abstractions uh textiles a set of developer tools on top of ipves that offer a couple different ways to be able to uh utilize higher application level patterns instead of interacting directly at the lower level protocol and then orbit to be is a database abstraction layer over mpfs that allows you to work with dynamic data more dynamically and also uh have access to uh abstractions like apparently log and uh things like that um in i we've heard a little bit about infera today uh obviously one of the one of the biggest uh services service providers in this space and a group that we work really closely with uh to be able to make sure that they have the latest versions of ipvs and we're meeting the needs of their users uh as well uh pinata and uh temporal or other services that provide ipfs pinning that will keep your data up and available as well as a number of other different things providing management tools and different debugging and data archiving tools as well one thing that we've seen start to emerge is more and more again like uh like michael said in the last talk one of the missing pieces are around ci automation and tooling so how do you make it as easy as possible to be able to deploy these uh our web3 applications how do we make it as easy as possible to be able to manage them and to be able to get the same benefits that we get from a much much more mature web 2 infrastructure uh and fleek is one of the one of the companies that we've been working a bunch with this year who's really done this and made it easy to be able to hook into your existing ci and cd using existing toolkits and frameworks and supporting those as well as a number of different uh source code management systems as well in name resolution is again like as you saw earlier the ipfs cid is not nearly as user friendly to look at as a regular textual name in a language that we understand natively uh however there are ways to approach this we have ips is the interplanetary naming system which is a way to be able to map a key to a ipfs cid and then services like unstoppable domains and ens are innovating in a bunch of different ways providing different services that allow you to resolve your uh resolve human readable names to a ipfess cid and to be able to manage the dynamic updating of that content uh and and and fleek is uh and companies like this are also integrating in a lot of ways some of the enos and unstoppable services to make it easier for developers and businesses to be able to ship so if you're interested in learning more that was a really really fast tour through some introductory ipfest stuff how ipfest works some of the benefits why it matters from a larger user agency perspective one of the things that these transitioning architectures and and changing the paradigm to uh to a more distributed and decentralized architecture how that actually benefits and users in a way that changes both how we do business and both the longevity of the availability of the services that we want to provide actual people so you can follow along we're on on twitter ipfess our forums are a fantastic place to ask questions if you were building your web3 application uh we monitor the farms pretty closely now to be able to ensure that we have a really really fast response um we have folks that are dedicated to answering your questions there we also have automated monitoring of the ipfs tag on stack overflow as well to be able to make sure that we get back to folks uh really really soon to try to close feedback loops so that if you're uh building stuff on top on top of ipfs and you have questions or you've gone off the rails or you have a problem you want to be able to figure out how to move forward that we can get help to you as soon as possible so thanks everybody thank you all for for having me and letting me speak a little at the end of your event uh if you have questions definitely feel free to reach out uh thanks again all right thank you um well actually a couple of questions that came in from chat if you just got a second i can do them right here yeah sure great which one and just stand by we're having a little audio difficulty here with josh just hold on one moment you 
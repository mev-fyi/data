all right we're good stream is up cool can i get started stand by one second thank you everyone who is just joining us now okay okay i'm actually going to jump in our nc luke is having some technical problems i'm andrew with heath global and um i'm here with my colleague luke also from global and this is the aztec workshop private trading with aztec connect we have joe andrews from aztec team he's going to be giving um giving a talk that you guys are encouraged to interact with so this is questions either in the street in the zune chat or we can you can raise your hands and we can try to field questions as we go through but with that i'll let joe take over and uh go from there great thanks everyone uh yeah uh as a as i was saying um we want to make this interactive um there's kind of i'm assuming the audience is fairly fairly technical um so i'm gonna run through some slides um but i think the fun part is getting on to kind of a demo and how to actually ride a bridge bridge contract and be in charge be in with a chance to win our bounty um so let's get started so we're thrilled to be sponsoring uh this week for this two week hackathon um we're sponsoring a 5000 zkdi prize uh for the best bridge contract uh which is built on uni swap v3 and aztec connect and i'll go into a bit more detail on what aztec connect is uh in the following slides ck die is just our shielded die which is on the aztec roll-up um so we'll pay the die out kind of privately uh through aztec which is just a nice nice thing for us so what is aztec connect uh aztec connect is a way of talking to any layer one d5 protocol or smart contract from within the aztec network so if you've got shielded funds on aztec let's say shielded die as you die you can send a transaction on aztec on layer two that transaction uh the intent of that transaction is to talk to a layer one smart contract unisoi are they really any any d5 protocol on their one you're talking to the same liquidity that's on there one um and the benefits are you've got privacy uh as the source of the funds is aztec so everything's shielded and the the great part is that uh if other users are doing the same thing as you your transaction is batched through a process of default aggregation so we can deliver 10 to 30 times gas savings for popular protocols such as swapping and lending all through the simple aztec connect interface i talked about this uh previously a little bit but just a bit more information on how this works we aggregate layer 2 transactions for each bridge id and a bridge id is pretty much just a an ethereum address with some more information around assets and kind of what is expected back so a roll-up provider will kind of aggregate their two transactions which are zero knowledge proofs aggregate them together and uh one large l1 trade will happen on behalf of all of those transactions i'll go into this into more detail on the next slide but some of the high level stats of what's possible using this this flow is it's around 8 000 gas per user for the privacy side of things um and then you split the cost of the l1 transaction so if you're doing a uni swap trade it's around 150 000 gas uh depending on which part you take through the router um worst case scenario you pay 158 000 gas and it's private you don't get any gas savings best case scenario you're batch with 100 other users um and you pay a fraction of the l1 gas cost and you kind of have unisop trades with privacy for around 10 000 gas the system itself can support multiple kind of layer one interactions per roll up and at launch we're targeting 256 transactions per roll up with blocks going every 20 minutes so this should give you an idea of what's actually possible um as we get closer to kind of production right now we're on test network and we're trying to incentivize some really great bridge contracts to be written uh so that we can bring scaling and privacy straight to l1 d5 so as this is a unison hackathon let's go through uh how this can work uh with with a uni sword trade um if anyone's got any questions at any point please stop me and i'll go over stuff in more detail um but i think we want to get through the slides quite quickly to get into the code um so for uni sort trade uh let's say i want to swap e for die uh a user is able to create a transaction using the aztec sdk they take their shielded e and instead of sending it to another user which is the current functionality of aztec they create a proof which effectively sends it to a bridge id um in return for kind of spending the shielded leaf they get what we call claim notes which are really just pieces of encrypted value that represent a claim on the result of a future diva interaction in step two um this transaction arrives at a roll-up provider and our roll-up provider bundles up hundreds of these d5 proofs together into a roll-up proof any uh proofs that are going to the same bridge id will be bundled into kind of one transaction and the whole roll-up is then sent to our layer one smart contract which owns all the funds which are inside aztec so currently the roll-up contract just does payments but as we upgrade it for us to connect it will be able to support all these d5 bridge contracts as well so if the roll-up proof is valid then um the contract effectively has loads of little tiny proofs inside that defy user's device proofs that have been aggregated in a giant roll-up that give it authority to send e on behalf of all those users to an aztec connect bridge contract in this case uh one that's representing uni swap uh so at step four the bridge contract now has a load of eth that it wants to swap for die via uni swap just the standard kind of useful v2 we use what v3 swapping happening directly in a smart contract uh and the bridge contract is then responsible for returning the die in the same transaction to the roll-up contract and the last step in in this is just the the contract recording kind of what happened and the reason we have to do this is because in step one the user didn't know quite what price they were going to get so they weren't able to specify uh the amount of claim notes they were going to actually receive in terms of die they just know their pro utter share of the overall transaction so the interaction result basically lets the roll-up contract record this interaction and it allows us to kind of work in a world where the exchange rate is not known ahead of time uh the next kind of block um is completely this happens automatically and without any interaction from the user uh all the data to do this is already on chain and it's contained in this interaction result but the next block the wallet provider can create these untrusted claim proofs for every user who did a default proof and what the claim proof is actually doing it's proving uh the correct distribution of die for every user who had a claim note for one bridge id so as an example with um i put in one ether and um someone from aztec charlie also put in eat um we're gonna end up with kind of uh a claim note worth one and charlie's gonna have a play night worth one and if we get back four thousand die um exchange rates are quite bad obviously um we both would be entitled to 50 of that so that's kind of what the claim process does but as i said this happens uh automatically um by the roll-up provider and there's no need for the user to do anything the user just waits for another block um this is an ethereum block not a um aztec block and they will receive back effectively notes that are now worth ck die on aztec um in step two those dk die notes are completely fundable they can be sent they can be withdrawn from the roll up back to l1 or they can be used in future defined interactions through other bridges and the best part about all of this is that it's completely private in terms of identities so because the source of funds is shielded beef on aztec the identity of all the users are kept encrypted throughout this entire process all you can see on chain is a lot of d5 proofs were created you can see the value in each d5 proof but you can't see who sent it or who it's going to and if you look at kind of ether scan you just see the aggregate transaction so you see the aztec roll-up contract trading with uni swap directly um and receiving die back uh and this creates a very powerful kind of privacy set for uh private transactions and race basically brings uh very strong privacy guarantees to d5 that was a lot of talking so this is maybe a more pictographic uh representation of uh the same flow um these blocks here are kind of the l1 blocks um and this graphic here is just a representation of two users wanting to send uh eth to uh get die back uh via a uni swap bridge so they both put in five eighth from their shielded dk etherness tech um this is bundled up in a roll-up uh the roll-up smart contract then interacts with uni swap sending tennis out uh unisop sends back ten thousand die and that's automatically distributed pro rata to each user on aztec uh we're going to spoil this in more detail in a second so i think we can do this one quickly but uh the way you interact with kind of the aztec roll-up contracts and a default protocol is by putting a contract in the middle we we call a default bridge this basically just maps a d5 protocol to an interface that the rollout can understand um we think we can hit most d5 protocols uh this way the interface supports up to two input tokens and two output tokens and it can also handle async flows so it can kind of be finalized later on um not in the next block if you want to do something like an lp position or a more complicated flow so ideas for the hackathon um and this is where uh maybe useful to be a bit more interactive and uh take questions before we go into the code um having privacy uh we believe enables uh flows that aren't really possible uh on on layer one today so this simple example is around uh a whale who wants to sell a large amount of beef um for die let's say if they went out and tried to do this uh kind of today their options are go to a centralized exchange or an otc um kind of trader or they can uh go to uni swap um they could try and split it into smaller trades on uni swap but their trading is probably known if you see someone who's got a lot of eve selling units of 10 eats over time it's kind of obvious what they're trying to do um or they can do a big trade on unison directly um and the price impacts uh and kind of available slippage for front running is is is very high uh in this case uh which i put a sad unicorn for because it's uh it's the one case where u-swap is is not able to kind of perform like it does for smaller users with aztec we think we can solve this so you can now do things such as time-weighted average orders that same whale can break down their large trade into hundreds of smaller trades and because their identity is kept hidden and the amount of funds they have in aztec is also kept hidden uh it's now possible for them to average in or out of a position over hours or days um without revealing their trade intent or how much they want to buy or sell we think this is kind of a way of uh massively changing uh the profitability of large trades going through a uni swap and helping to remove uh not all mev but identity based front running so you can't now fire on they trade based on my other positions or kind of how much of an asset i have as you think i'm selling so the first kind of simpler task is to write a british contract we've got a bridge contract at the moment uh which supports units for v2 we'd like to see it updated to unison v3 i would like to see ui kind of that enables someone to come along create a load of aztec transactions uh that allows a trader to kind of split a large trade into lots of small trades that can be drip fed into the market over time uh protecting their privacy one of the kind of key things about this ability to split it into smaller chunks is the the gas price um if each of these trades was kind of costing the same as an l1 transaction um it may not be profitable to do this but because we get batching here the hope is that obviously if this is a liquid asset pair uh other users will also be wanting to swap e for die at the same time so this trader is kind of bundled with those other trades and gets a much cheaper kind of gas price per trade um so you can afford to split it into smaller sizes without having very high gas costs if any questions on that one before i go on to the next one um given this maybe something that someone wants to start packing on there are a couple of uh questions in the chat i can't see the chat i can read them to you if you are oh let's chat this one from olek ah cool so the privacy is not volume dependent so um the privacy set here is depend is basically all the users who've ever deposited the source asset to aztec so um if you're kind of using zk eth in your bridge and you do a transact a user does a transaction that kind of takes as ikif and sends it to uni swap as long as the amount of that transaction um uh is not like astronomically large uh their privacy set is all of the deposits into aztec and those could be deposits for payments could be deposits just for mixing or deposits for other bridges so the more bridge contracts there are the better the privacy set is for everyone but it's not dependent on the number of users in your particular batch or um in that particular bridge interaction um if that's helpful and the second question the whale could split across multiple wallets um i guess the way you would do that is uh either out from coinbase so coinbase is basically the largest centralized mixer so you could set up loads of unique wallets um and from them each from coinbase uh or you could use tornado cache or the current aztec system which is about 50 to 100 times cheaper than tomato cash to kind of make these fresh wallets but it's a bit of a user experience uh nightmare you have to kind of keep track of all these wallets make sure you don't dock yourself or accidentally link them so we think this just provides a much nicer way of doing this through an sdk and completely decentralized it's a good point uh the bulk units or trade would be more susceptible to front running um there's a couple of things so uh you can use flashbots um and uh that's kind of one thing we're looking into you also have kind of a larger collective bargaining power because there's multiple users in the roll-up um you can effectively pay more per unit of gas um you pay more per unit of gas for a transaction because there's more users but it is you're right the roll-up is susceptible to front-running um one advantage um and this is kind of leading on to the next uh idea is that if you have a a bridge contract that does eve die and die eat um the naive way of doing that would be doing two large trades on uni swap but you can now write a bridge contract that nets the two um so uh the only thing that can be front run uh if you front on the roll up is the delta uh so if kind of more ethers being bought and sold on aztec then you can front run the difference um but you can't uh kind of the only way to get in on that transaction is actually to be part of the asset network and have a default transaction anything that is not private is that a specific address is interactive aztec um you could see that a specific address is deposited to aztec correct um you can't see what that address has done in aztec that's that's correct you also can have addresses um that are kind of fresh directly in aztecs so you could potentially do kind of private on-ramps off-ramps if you didn't want to have the kind of layer one deposit um i'll come back to the roadmap question uh later and we can go into the more more exciting kind of uh slightly more difficult uh second idea we have so the second idea kind of uh it basically was we came we came up with it because of some of the uh front-running problems that could happen if if the roll-up is uh incredibly uh successful and there's large uni sort of transactions happening uh and it's taking advantage of limit orders uh with uh unison v3 so useful v3 enables kind of two types of limit orders um which are expressed as single tick uh kind of lp positions so you can uh kind of have a an order where you're taking profit so you've got eth and you want die and you want that to happen kind of above the current price range so say let's say the price is at 1500 um and you want to sell when it gets to 1700 you can kind of provide out liquidity for that range and you can end up with die opposite obviously if you think uh ethan's gonna crash at some point and then uh rebound you could put like a limit order in uh to purchase um eth let's say at 1200 if the price was 1200 to die um so those two um types of limit orders are possible today on uni swap but they have some problems um the main problems are you have to enter into an lp position so it's expensive not really suitable for kind of everyday users the position must also be exited whilst the price is in your target range um so if the price goes on the right up to 1650 but then comes back down to 1500 um you'll receive trading fees but your position will be back in east again which is not what you wanted to do um your trade intent so you need to kind of act quickly and monitor your positions which costs a lot of gas um secondly everyone can see your limit orders um and they can kind of see they can link different strategies together again um which is not ideal uh if you're kind of trying to do hedging or kind of uh any other kind of types of uh orders um so we think that aztec connect can also solve this we you could kind of as a if you were a large whale kind of do these limit orders and it you probably wouldn't mind paying uh the gas fees um to transact uh as an lp and an exit position but if you're trading kind of one to 10k um in usd terms the gas costs really start to eat into the kind of transaction overall transaction price um so the idea here is that you can create uh aztec connect bridge contracts that um for a given asset pair so let's say if die set up these single tick lp positions um for popular kind of uh ranges uh and they do that on all the users uh on behalf of all the users who entered into that particular uh kind of bridge id um so the effect here is that lots of users can club together um and in terms of the roll up they look like a whale it's a very large trade it's a very large kind of lp position uh an example here i give um we have 10 trades of a 10 000 uh and the economics suddenly flip on their head so that you can do very interesting things like incentivizing a keeper to automatically close the position when it's in range so the idea here is to write a bridge contract that helps users effectively like a private limit order exchange where the identities of all of the people in the order book are hidden but you use uniform v3 to process the limit orders and maybe chain link keepers or other keepers to incentivize the closing of the positions with the liquidity fees that you get from being in the position i did some kind of back of the envelope sums down here uh to work out that this is actually including paying chain leak keeper gas costs at a pretty high um gas price uh the trade is still profitable um so it'd be quite nice to kind of have a system where you can set up these limit orders or take profit orders for large amounts over time uh using aztec connect bridges this one's a bit more complicated uh but i have to take some questions on it some more questions here expensive in gas is as to proof checking um so validating a roll-up costs around 400 000 gas and we can fit between 256 and 512 transactions inside that at the moment um we're working to expand that um pretty drastically the important thing here though is you don't need to fill the whole roll up so uh we have payments happening at the same time we have different bridge interactions happening at the same time so at launch we think that we can get the cost of being in the roll-up down to around uh five to eight thousand gas uh for a default interaction um so if you write a bridge contract um the only thing a user has to pay is the cost of the l1 bridge contract and five thousand gas uh for doing the proof um we're going to be running blocks every 20 to 30 minutes launch but there's nothing stopping us kind of if we have the transaction volume running blocks every uh kind of ethereum block it's just a case of getting a flywheel going and making it making there be enough transactions for everyone uh to make those profitable and proof generation uh happens on the client this is private so uh you create a little proof in your browser it takes about 10 seconds 5-10 seconds depending on the device um the roll-up also has a proof generation cost um it's about two to four minutes um but we haven't really paralyzed it right now it's not the bottleneck how long do i have do i have time to go into kind of a demo um and code and that went on a bit longer than expected yeah you can keep going um there's not another workshop right now there there is a quiz night if people want to go but you can keep going cool uh well let's do an example of this working on gurley the test network and then um i'll post a link to this starter kit we set up which is um basically just a solidity contract that you can uh and some test files that you can uh change um and if the tests pass you're kind of your bridge is working uh the goal for the hackathon i think is to submit a slurs contract and by the end of kind of two weeks we'll then get that deployed in girly and working with the test network so cool um this file here is on our github under this is kind of using our sdk um it's using a slightly older version of aztec connect um but basically it's it's using an already deployed unisport v2 bridge um and it runs through kind of some of the flows so i'm what i'm going to do next is take some i'm going to shield it on aztec um end up with zika eth so 0.2 [Music] uh wait for that to settle um and then i'm going to do a default interaction to swap die privately uh using uniform v2 um the way that works is we've got this unit bridge contractor already deployed and i'll just run this and then i'll take a little time for these to actually process uh because the test machine is not our big roll-up server um but we can look at the ether scan output and see what you can see demo gods oh maybe this is not gonna work today what did i do wrong one second sorry [Music] one second i think i uh got my private this demo private key wrong oh we'll switch to the other one and make something that got corrupted on my bs code um i'll come back to that one in a second so we have this repository i'll just post it in the uh chat um so everyone can see this if you find the bug uh it depends where the bug is this is the starter repo for kind of the docks as well if like how how a bridge contract works and it has kind of some test cases um and an example kind of use sort of v2 um contract so i'll go through this on on my vs code but uh yeah i'll just switch of course actually so we've got uh inside here in the source folder um we've got a useful bridge test and what this does um is it simulates the aztec roll up calling a bridge contract it calls it with kind of different assets and different amounts um and it expects the bridge property to receive assets back so it's actually quite a simple interface to write the contract you just need to write stuff in civility um and all of the kind of zero knowledge and roll up um uh roll up cryptography is abstracted away uh the way developers kind of and users actually end up interacting with this is uh via the sdk you create a proof that uh kind of you send to the roll up then that lets the roll up actually call your bridge contract but this kind of starter kit doesn't worry about any of that it just mocks this effectively and so what this looks like is uh in this case we have a uh unison bridge um and this uses uh v2 um but it's quite a simple bridge uh it's basically at the moment only has support for swapping eth to a token and a token back to eth all of the bridge functionality uh happens inside this convert function this function is called um by the asset roll-up contract through our d5 bridge proxy contract and it's before this point you can assume basically that the aztec roll-up contract has sent you uh eth if your input asset is if or tokens if you're input asset uh tokens um and as before you can specify two input assets um and two output assets um and this function should basically do the work of interacting with the default protocol uh and it needs to transfer tokens back to tokens or eth back to aztec and uh tell the call of this function how much you've returned um so in this example um we only have one output asset we only have one input asset so we're taking eth and we're swapping it to die um and i can run that just by doing this so we'll kind of spin up a local ganache um and it's just gonna run the tests um this is kind of the very simple flow um uh there's a few things in the interface which i'll go through in a second which i think are quite useful for um kind of more advanced flows such as private limit orders or other things so uh the main one is uh this this boolean let me go to the interface actually easier to talk through so this boolean down here is async basically tells the rollup contract if it should expect the results back from this interaction now or in the future um it happens in the future effectively what the user's done is it's sent these assets into the bridge contract um and uh the british contract owns them at that point um and it can put them as an lp position in new swap um it could buy an nft it could be lots of things but in this case it's uh uh in the limit order example it's going to open up a single tick range position um how it does that um and how it knows what to do it's got the kind of input asset data and output asset data which tells us kind of if we look at the uh types we can kind of see that these are asset types of kind of the se20 or virtual and we'll come on to what virtual means uh in a second uh but uh go back to the interface um it also has this aux data field so you can use the aux data field to basically specify um kind of your price uh effectively uh and this is all done by the client or the sdk um and ends up in the bridge contract so in this example if we wanted to do the limit order we would uh return async being true which means these values would be zero um and then at some point later on uh when the uh position was in range you could set up a keeper to kind of call can finalize um with the id of this particular interaction um and also called the finalize function uh which actually returns the values back to uh the roll-up so you can think of that as like the actual settlement um so when you when you've exited your um lp position you've got the die back you need to send it back to the roll-up um and you need to effectively disperse it back to all the users who participated in in that particular trade let's say so the goal for the hackathon for us is that people kind of uh take this project and come up with their own uh bridge contracts um and we'll be awarding this 5000 ziki die prize for the best british contract i'm around in the discord and to answer questions uh i've got some ideas on i think how this could be used um i think it's quite a new primitive to bring to kind of uni swap and we're excited to see what people build me take some more questions does this mean a bridge is needed for every unison pair um no it doesn't so um uh i guess like challenge one would be to enhance this uh current bridge contract um to make it uh such that it uh uh you can use reuse the same bridge contract uh for kind of multiple assets at the moment we kind of can do east to any token or any token back to eth we couldn't do kind of token swaps just in this bridge contract the the interface itself supports it you can have any input assets and any output assets in terms of batching um i'm not sure if that was the question but uh your batch will only obviously be batched um uh with kind of your asset pair so um you can share in the same roll-up um as multiple different bridge interactions um but if you're doing kind of if die and i'm doing ebtc uh that's going to result in two bridge interactions in the same roll-up um so you only split the l1 gas cost um with people who are doing your exact bridge interaction um let me try and get this other example working because it's more fun uh i'll take some more questions in the meantime i just have to stare at this for a while it was working five minutes ago does anyone any other questions know what's going on here if it's ah i know what's wrong sorry give me one second forgot to put in my new private key from metamask you can see this one because it's a fresh account yeah there we go cool so this is our sdk spinning up um it has to create this usually runs in the browser um and this is kind of just a typescript sdk this is how your users eventually will interact with your bridge contract by creating a bridge id your kind of address and the first step here is as you can see if this is big enough i'm going to deposit my point to eat so i create a joint split proof um which uh takes my uh point to eat and converts it into eth um so the proof takes a little bit of time to create on the client and then uh it gets sent to the roll-up um the roll-up on testnet is quite slow and it only handles two transactions at a time um but we can kind of wait for this to settle um and at that point we have zke which we can use in future uh joint splits or d5 bridge interactions um so whilst this is settling uh maybe i can take some more questions um how is that testing long term uh yeah so every user pays a fee for their transaction at the moment it's kind of um a break even but the long-term kind of model is that um roll-up providers will earn um kind of fees from from their users um so you can see uh in the code right now every transaction has a fee paid in the assets um that you're transacting in um at the moment it's kind of uh there's no markup on that fee but longer term there would be fees there and as protocol owners we could take some levy it's kind of sustainability long term shhh so this is our roll up on our ether scan um i believe this was my deposit transaction so as someone mentioned earlier you can kind of see that i interacted with this i put point to ethan um but after that point uh it's kind of hard to see what's happened um there's not a very big privacy set obviously around the test network but there's a much larger one around mainnet which is growing every day uh so in a second our roll-up provider will um spit out a roll-up um and i'll get my cke and then we'll kind of be able to use that in a bridge contract um now there's the pending roll-up and once it's settled the sdk kind of automatically decrypts it and you can see here that uh in the logs uh i've got an encrypted value now inside aztec um worth 0.2 eth denominated in the way and now the user is going to do is buy some dye uh by stopping on unison privately um so we created the proof added a new d5 transaction and we have to wait for that to settle as well um uh which will be another roll up um you can see here this is the the roll-up uh one to save time i may just go back to an earlier roll-up i'm not sure how long we've got but uh so we'll see one of these in a minute but what you can see here is um i think this is 4.4 if it was a different uh transaction but we swapped point four e for west uh to interact with the unisop um router this is through the bridge contract i showed you earlier um and then that was swapped uh against test die the terrible exchange rate because i think the pool's not configured correctly so this test die basically came back into the roll-up contract and was dispersed to the users um with a different asset so you can kind of see an end-to-end bridge interaction here the roll-up provider on test net is kind of small so it doesn't do that many of these but you can imagine with the four machines kind of multiple bridge interactions with hundreds of users um this becomes a pretty great hub for kind of private trading and private default uh any more questions uh yes so this is our um this is the test roll-up um that the uh uh sdk is connected to on testnet um will be we've changed the interface slightly uh on this one so if you ride a bridge contract using the s this like starter kit um we'll be deploying a new kind of beefier girly machine that has the new interface um towards the end of next week um so you if you're riding bridge contracts you'll be able to kind of test these things uh a lot quicker um towards the end of next week once we've upgraded the machine um yeah as i think if you're planning on writing a bridge contract that takes advantage of this i'll start this legacy for me it looks like if you encountering underground assets you would dox yourself um can you explain what you mean by that sorry maybe on on voice or um you know in chat um i'll keep going for now whilst okay um i'll switch on discord great uh you can see here that uh the first part of the process just completed so these are the notes that give me my claim on um the output uh in the second uh these will be updated again so here's the latest one that kind of swaps 0.48 0.04 east side for test tokens um and then there'll be a final roll up after this which actually gives the user their encrypted die all right if there's no more questions um feel free to kind of reach out in the and also in the aztec discord i'll be around uh so all some of our team members for kind of questions support if you want me to run through the uh private limit orders idea again or just kind of bounce my ideas around send me a message and i'll be available awesome thank you joe that was good i'm glad we extended it so you get through the demos there also remind everyone that this is uh recorded so it'll be up on the youtube global youtube this event go back to it and i'm also um reminding everybody yeah he could be reaching discord in the aztec sponsor channel uh in the unicode discord as well as they probably have their own discord too alabama twitter i'm here so awesome i'm also linking in the chat um in case you want a little something different going on right now there's a halloween friday quiz night the next 45 minutes i think it goes in 20 minutes i don't know so i just linked it there all right joe thanks for the workshop and we'll see everyone in discord great all right we just finished as well so you can see here uh down the bottom uh i got my uh got my die um uh so yeah thanks everyone for uh listening and uh yeah speech your discord right 
[Music] okay we're good hello hello everyone welcome to week two of hackathons this is the first event and for this session we are excited to have Buju with us she's from the file Queen team and she's gonna be going over the general topic of developing on file point so we're very excited to have her with us it's gonna be a good session it's a quick question who worked on their project over the weekend Mia give me a raise all right karate is like who didn't very cool I think the last event I would point people towards and really encourage you to attend this week's event was the hack feedback session I know some people in this session were there last Friday it was a really really great time to get feedback from Juan there was a couple textile team members the reporting is on our YouTube channel so go to it and see some of the suggestions and discussions I was there was a very very good session today is the first check-in for your team so you're gonna want to go to your hacker dashboard and just write a quick very short check in it it's I think we give a prompt but it's a few bullet points on what you're working on which sponsors you're looking to integrate and any blockers that you're having and this is what we use to help track your progress and and get help to you from any experts who might be even knowledgeable about were you working on so make sure to complete the team checking today today Monday the 13th is the first hackathon check-in if you for some reason don't have any question or if some for some reason you have questions or issues doing it just hit up any of the global team members you should have all been added to a cohort team I'm sorryi cohort channel in slack so that'll be another place for you to relay those updates to eath global team or the rest of your cohort okay that's enough logistics I'm gonna turn it over to pooja and she can get started Trent hello everyone let me see if I can start playing this if I do this can you see the presentation view okay awesome all right well hello everyone it's great to be here today my name is pooja and I'm the file coin product lead and today I'm gonna be talking about developing on file coin so in today's presentation I'll start with a brief introduction kind of a recap of some of the resources that the file coin and ipfs and protocol labs teams like surfaced over the last and textile team as well surfaced last week and then I'll go into a bit of an overview of the various developer pathways that kind of exists to building your application on file point the ecosystem can be a little bit complicated if you're not already deeply embedded in it so this presentation is sort of to help as an orienting function to kind of place all the resources that are available in the file clean ecosystem sort of in context of one another so that's kind of the second part of this presentation we'll be talking about those those high-level pathways and then the third section is sort of I'll dive into a number of different use cases and examples and talk about how some of these applications are integrating file coin into their own application and then lastly I'll talk about how the file coin team is here to support all of you during hak FS and and also beyond the end of the competition and so I do have the chat window open so if you have any questions feel free to definitely drop them into the chat or if there's something super super burnin feel free to just unmute yourself and voice your question as well awesome so we'll get started with the introduction um so I think there were a number of presentations last week that talked a little bit more about what file coin is we're actually in a lot of detail in some cases so I'm assuming today that you at least know kind of the high level of the purpose of file poi and how it generally kind of works and so you know the one sentence summary a file coin is that it's a decentralized storage network that provides data persistence via a decentralized protocol and publicly verifiable storage proofs that make it onto a blockchain and so this is kind of a dense sentence to unpack this a little bit you know file claim is obviously a decentralized storage network we can in some sense think of it as a two sided marketplace where you have clients who are interested in data storage and retrieval services there are miners who are the providers of the data storage and retrieval services to clients on the network and then there's kind of the network the decentralized network protocol which you can think of kind of as the intermediary between the two sides of the marketplace and the way it can actually work to give participants in the in the network guarantees that you know the behavior they're expecting out of everyone else in the network works as intended is one major mechanism for that is the are these like publicly verifiable storage proofs and so if you watch some of the presentations last week this is kind of you know we asked the final coin protocol asks all miners on the network to submit to submit storage proofs at periodic intervals to continually prove that when they say that they're storing your data on the network they actually are and you can trust this because it makes it onto the proofs make it onto a blockchain and anyone in the world who has synced the blockchain can kind of verify these storage groups and and make sure that they are indeed correct and so diving a little bit into some of like the core features that make file coin potentially really valuable for your use case there are five main ones that I wanted to highlight today so the first was that with with file coin you have really granular control over all of the parameters of that you might think about when you're interested in storing data on on any service and so this includes you know in some applications you might want to have really granular control over where you're storing your data like the geographic location some regions of the world have things like data localization laws and they require that certain types of data must be stored in in in their own municipality or in you know certain jurisdictions that follow gdpr regulations or things like that so maybe you care about where your data is stored and the file core network there there is a way to do this to make sure that the miners that you're storing your data with are exactly where you want them to be you can also control replication factors so how many copies of this data of this particular CID or content identifier do you want to be storing on the network and so this is also something if you're maybe using a centralized cloud service you might not have control over this most central floud services do make redundant copies of all data that exists on this on the system but you don't get to really choose how many you like and so this is this is another parameter that file point kind of gives users control over you can also store how long your data is being stored on the network and there are few other parameters that also exist today but many more that will be coming to the to file point over time another core feature of file coin is this idea of storage receipts so I mentioned earlier that file coin asks storage miners to produce these these proofs that you know show that I as a miner and indeed storing your data that you've paid me to store on the file coin network for whatever period of time and you can think of these kind of proofs that make it onto the blockchain as storage receipts and they can actually be used in really interesting ways in applications as well maybe you want to provide your users what some sort of portal where they can see you know like all of the data that they've that they have stored on with your service all of the videos that they've all played uploaded or whatever it is and get some sort of like ticket or receipt that shows them that they can independently verify that shows them that their data has actually been stored on file coin with this particular miner it's the storage she'll started at this particular block and it has and it is continuing to be stored over time this is when we expect the storage to expire and so on so storage receipts are a pretty especially in applications that are kind of targeted towards privacy focused or web three kind of applicate users and applications storage receipts can be really valuable to include in your application as well the third major feature is that file coin is the marketplace so you as a user have control over storage pricing you get to enter into economic contracts that are affordable for you it's not you know like you just you don't have to just take the price that is set by a centralized storage provider you get to kind of choose miners that are selling their storage to you at a price that you can actually afford and so this is another element of control that file out when gets users bio Crean also makes use of content addressing and so again this is this is not unique to file coin a number of other protocols make use of content addressing including IP FS and and various other protocols as well kind of in the space but the idea behind content addressing is that your piece of data is uniquely identified kind of by this hash of of the data and you can use that hash or we call a CID or content identifier to to be you can use that as the piece that as the data address anytime you want to refer to that data from from your application and so file coin uses content addressing and and so this means that you know a couple of benefits of using content addressing or that this the feature that we see sometimes with HTTP which is a local location address protocol is that sometimes we end up with like broken links on the internet and so on with content addressing this is it's not really exactly it's not really possible it could happen in other ways potentially but that's one benefit of using see IDs and then another is that see IDs kind of uniquely identify data that is stored on the network and so it kind of helps you avoid duplication of data you can see if a particular file has already been stored and if it has you don't need to store it again and then the last major feature of file coin is a little bit obvious perhaps but a file coin it's its entire purpose in a sense really is to provide data persistence on a decentralized peer-to-peer network so there are networks like the IP best public storage network which which allow you to store data with its peers and it has a lot of like the same properties file pointers built on top of IP FS and used as many FS protocols but file coin adds this kind of incentive layer with the file point cryptocurrency and this element of like cryptographic proofs and the combination of these mechanisms makes it so that you end up with a PDP network but one that does have data persistence so these are some like the core feature is a file coin and when you're thinking about building your application on file coin you may want to build build on top of the core protocol implementations which are kind of in this box in the bottom right which are you may have heard these names before the Lotus implementation which is in go go file coin it's also a go implementation forest is a rust implementation and fahan which is a C++ implementation or you may choose to use any of the other number of you know a huge number of other services and libraries and products that are being built in the file coin ecosystem and that can make for certain uses use cases can make development on file coin much easier and so today I'm going to talk a little bit about some of these different developer tools and how they can be kind of assembled together to build applications and various use cases last week and the week before we had a number of workshops at through hackathon credible I highly recommend everyone check check these out so last week one gave a talk about kind of an in-depth overview of the file claim protocol and how this system works overall that's I think a great introductory explanation if you kind of want to understand the underpinnings of the whole network and the whole system it's fairly complicated but it was like a really great explanation of it um Andrew from textile gave a great presentation on getting started with file coin and this this kind of talks about one of the technologies I'll dive into today which is the power gate and so I think that I refer to that later as well I think it's this is a great workshop Carson from textile also gave a presentation on getting started with the textile platform the textile platform includes a tool called buckets which I'll talk about today as well it's kind of a hosted solution to store your data on file point Jimmy from the final coin team talks last week about slate which is a full-featured sort of really beautiful kind of application that's being built on on power gate and buckets today and then we have this presentation and then there are two more workshops that are coming up later today one on how do you build an occasion like a chain Explorer using Lotus one of the core falcon implementations and then later today we're gonna have a workshop from two of the folks actually on the Lotus team we'll walk through how to you how to use the Lotus CLI okay so with that overview let me just quickly check and see if there are any questions here okay um I can't actually see my mouse so I can't scroll up but I see one question here which is from unmould which says if I owned a PF s network of private network separated or the public IP FS network okay yeah great question today it is they all all ipfs like go ipfs nodes jsf k FS nodes and all file coy nodes are all ultimately like underneath everything there they all speak with P of P so the technology kind of is there for them all to interoperate on the same network today today they are like the public IP FS and public file coin networks are separate networks and if someone else had a question earlier that I missed feel free to voice it now but okay sounds like we're good I'll move to the next section so yeah so starting to talk about kind of the high level of developer pathways so when we think about when we think about building on this technology stack there kind of four major avenues I would recommend one starts with just looking at core IP FS technology including the ipfs protocol implementations and kind of bridging that to file claim in a number of ways the second is this class of services that it's kind of got a Matthew name but its file point back to ipfs pending services so we call it fps so short these are services that exist in the ecosystem run by companies that will basically take your data pin it to the public IP FS network and then also backup your data to file point and these are hosted services so it makes it really easy to kind of integrate into your application and we recommend this for the vast majority of application developers today the third pathway is power D and again I mentioned this earlier but this is a technology that's being built by the text and it's also it's kind of a local you can think of it as a local version of an FPS it allows you to connect to an IP FS node and add a file coin node and specifically Lotus and run your application kind of connecting to your the notes that are run locally on your machine and it provides a number of like really easy-to-use interfaces on top and abstractions that make it really easy to interact with both networks and then we also have file code protocol implementations so I'm gonna start by diving in a little bit into ipfs protocol implementations and as I'm sure many folks here know ipfs is a free and open source network stack protocol that allows users to store and transfer verifiable data with each other i PFS has been around for a few years and so we've seen a you know huge explosion and the adoption of ipfs especially over the last year and a half you know there are so many projects that have started using ipfs in various ways this is just kind of a subset of the teams that we work pretty closely with and one of the core things about ipfs is that it's you know really a lot of the core file system and like file storage protocol is that ipfs uses file coin uses as well the one missing piece for my PFS and kind of the the whole that final point was aiming to plug is this idea of data persistence so in most cases on ipfs the way that your your data kind of gets and by dated persistence I sort of yeah well so this maybe I'll just describe this first bullet it kind of explains it in an ipfs most of the time when you are adding your your data to the network you're relying on other peers in the network to kind of voluntarily pin your data for you so if someone else you know like I want to store a particular image and I decide to add it to the public IP FS network someone else may find value in that content and that peer may decide say hey like you know I want an IP FS pin this particular C ID and then that that data is now pinned in my PFS Network and it won't be GARP what that means essentially is that it won't be garbage collected the next time your local that local node tries to garbage collect the data story and so pinning is kind of like the key idea for persistence on these networks and and so sometimes this this does happen well where people will voluntarily pin other users data but that doesn't always happen and so if you're thinking about building a production application on ipfs the strategies that that folks off an employee are it looks like you know either you maintain your own local ipfs node or a cluster which kind of is like this orchestration layer which allows you to scale - if it's basically if you're storing like a huge amount of data you might want to instead of using just like a single ipfs node you might want to use cluster which kind of like is an abstraction over multiple ipfs nodes and so you could pin your data to your own local ipfs infrastructure and so for users that are comfortable kind of maintaining their own infrastructure and maintaining you know a certain SLA that you might need for your users to interact with data storage through your application this is a this is like a good solution but this isn't comfortable for for all users right maybe you have way too much data for this to make sense maybe you have less experience but DevOps or infrastructure this is not like something that your your team like kind of wants to get into the business of doing and in those cases teams will sometimes use a centralized ipfs pinning service and so that's kind of related to like the FPS concept that I mentioned before and we'll talk about in more detail but really these are there a number of groups in the ecosystem which run ipfs pinning services and usually these are like long-lived ipfs nodes that are hosted on some sort of cloud service provider like AWS or something and then a company one one company one team that runs an IP FS playing services pinata so pinata for example will make their IP FS storage or like their IP FS know kind of accessible via an HTTP API and then you can send storage requests and retrieval requests to that service and so this is a most teams that you can interact with ipfs and sort of production capacity will use some sort of ipfs pinning service and then the last two options are more relevant to our conversation today and they're newer options so they don't have as much you know as many people using them you won't see as many guides about this one option is you know to just pin your data to a decentralized storage service like or a decentralized search network like bile coin that's you can either do that by using some of the other technologies that I'll talk about later or you can like using directly Lotus api's or something like that or you can do that using a file coin backed ipfs pinning service and so these are you know it's just a variant sort of the centralized ftfs Bank services that I mentioned before they're long-lived ipfs and file COI nodes that that instead of you know pinning everything to AWS well ultimately pin everything to the file coin storage network so ipfs is has a really mature ecosystem today especially compared to file point and so there are a number of really you know really awesome products that have been built for AI to interact with ipfs protocol so you may have heard of go ipfs there's also j/s ipfs and ipfs cluster I talked a little bit about cluster before kind of like orchestrates across multiple ipfs nodes and there are a number of other products here as well so ipfs the ipfs team maintains an HTTP client library which can be used with any JavaScript application and allows you to interact via an HTTP API with any running ipfs node whether it's a go ipfs note or a JSI PFS node or or cluster I believe it works with cluster I can I can double check but it does definitely work with Gohan JSI PFS there's also ipfs desktop that's a local that's the local GUI application basically to interact with all of the IP FS functionality that you can kind of access through the command line and it's really nice it's like a really great starter tool if you're get just getting started with ipfs ipfs companion is a browser extension that allows you to also kind of pin websites and other data to ipfs through your browser and then there are a number of IP FS paying services that are listed here that exist today there are many more than then I've kind of listed on the side but a couple of the ones that are popular ones that we see a lot of people using are in Fira temporal from our trade and pinata okay um so I will take a quick look at the chat okay so Joseph has a question could the file coin fact ipfs appending services be a potential point of failure I mean I guess then it'd be helpful if you want to clarify you can try to answer but I think this question is asking so I mean in the sense that it's a centralized it is kind of a centralized service because you have a third party who's managing your the infrastructure for you in that sense it potentially could be a point of failure but you know oftentimes the teams that are running these sorts of services are really experienced infrastructure and DevOps folks they're building a business that intent that has like guaranteed SLA for for the service and so like they're professionals generally who are running this infrastructure and so it's probably much more robust and reliable and you can have like higher expectations often then if you're running your own note unless you yourself like are really excited about DevOps or in front and want to invest in maintaining high SLA so in a sense yes it could be a point of failure but in most cases it's like the most one of the most reliable ways to kind of interact with these networks and then Alex asks how to connect our ipfs cluster to IPF SEO network how to tell ok so I think so I ipfs cluster is basically so you can go to I think the I'm not sure what the website is for I think it may be clustered ipfs video not sure I can find that like for you but cluster is just you know software that you can kind of download and run and when you run it it automatically connects to the public IP FS network so that's something you wouldn't have to worry about manually ok great so we'll talk next about these file Quinn fact ipfs spinning services ok so this is kind of like one high level architecture diagram of of of an IP FS sorry if I went back to actually first things I was there an FPS um two things I'll just call out really quickly are that filing these types of like pinning services that FPS hang services one of the the key benefits why they can be really valuable your application is that if you want to interact with the file coin network and also have fast retrieval you you need some sort of like intermediate layer either ipfs or some sort of like caching layer or something that will allow you to retrieve data kind of at the sub second performance level today the way that file coin works because of the storage groups that I mentioned before storing and retrieving data takes there's kind of this overhead process that's called like ceiling and unsealing data there are some there are some other solutions that we we have built into the protocol today but there's still a little bit raw so in most cases it ends up taking a bit longer to kind of retrieve data directly from the file point network and so if you want to have sub-second retrieval through the file point network you generally want to interact with something like a file point back depending service the other thing to note is that these these services as I mentioned because they're using file claim kind of as the underlying storage layer all data is being persisted on the decentralized network and it's not in the control server the centralized cloud provider so this is kind of again simplified architecture for what ipfs pinning services tend to look like so you know they they'll run sort of long-lived ipfs node like a go ipfs node in the cloud and then expose that through some sort of ipfs pinning api to users in between there may be some sort of service that does things like user management and it'll kind of manage requests to to the ipfs node that's ultimately interacting with the public IP efest network and and here are some of the some other teams as well as I mentioned three of these but there's also global upload and it turn amor other ping services as well and so how how these architectures are amended when you look at when you include the file Queen piece is that either you know it from the user facing perspective often the service looks exactly the same you kind of still have an IPS pinning API but in the background what's happening is that in addition to an IP FS client you may have a file coin node as well like a lotus node and as your data is kind of being like cached on the public IP FS network the the service is also sending the data for storage on the public file coin Network as well and then when it comes time to retrieve the data it would either you know different services employ different strategies here but one one thing that we've seen a lot of is that if if the data is still cached on the public IP FS network the service would retrieve it directly from from there and if not the service would trigger kind of a retrieval deal through the public file point Network in order to then serve it back to the user we have some documentation on kind of the general structure of FPSs and how they can be used on the file point documentation site and we had a we ran a summit the ipfs spinning summit in earlier this year in May which generated a bunch of really awesome content so if you're curious about these sorts of services and what they do and how they recommend looking at some of the videos that were produced from this event and so when we talk specifically about file point backed F us appending services one of the teams that we've been working super closely with like an awesome team and you may have seen some of their workshops is the textile team and they're building the in the on the textile hosted platform which is called textile hub there is also the ability to interact with this sort of product called buckets and that's essentially you know textiles fps and that allows you to interact with ipfs storage also file wine storage through the public networks I mean and it's all kind of hosted and so it's it's like by far I think the easiest way to to store your application data on these networks and I think there was a workshop that was going on this last week and it's a really great product so I would definitely recommend looking at that there's also the pinata team is also doing a file coin integration and that pinata will also be kind of file coin backed within the next month or so and there's a team that we've been working with called chain safe which is also building an FPS and so you can expect to see these services come online very soon and there should be more options for this in the future all right okay and so then we'll jump a bit into power gate all right so power gate is also a it's a software that's being built by the textile team just like a really powerhouse team and power gate really what it is this is an architecture diagram that the textile team put together but it's essentially a set of libraries essentially a set of like modules that exist on top of an ipfs node go ipfs node specifically and a lotus node and what these modules will do is you know if you if you think about it today like go i've give us and lotus are fairly low-level software if you kind of in try to interact with these protocols through the CLI it's really granular sort of transactional movements like you directly have to add data you delete data like one file at a time and so or one folder at the time in the case of a file coin it's also you know you have to like find the storage miner you have to propose a deal to that storage miner and kind of just like monitor each deal individually over time so there's just a lot of its that there's a lot of power in that because you know it allows you to kind of support infinite use cases but it makes it a little bit difficult to learn and it's not always necessary unless you want to build some sort of like tooling that makes interacting with these nodes easier and so what power gate has done is exactly that so it's built like a bunch of really valuable modules on top of IPF ago at the fs and lotus and these will do sort of that like that management I mentioned before the data flow of from like hot storage to cold storage through this concept called ffs our gate also maintains a reputation module so a power gate node will sort of like index the whole chain understand which miners have been behaving and which have not have been misbehaving and kind of assigned miners reputation scores so when you want to store data on the network on the file coin network it'll know which miners are kind of the best bet for you to store with they're like most likely for to actually store your data correctly and it'll also kind of maintain an index of of deals that exist in the network so that's also kind of just you to interact with it also extracts all of the all of the steps of kind of making a storage deal so you just have to literally run one command like store this ID this many times and I think there are a couple other parameters and it'll handle all of the deal management for you so power gating is an incredibly useful tool it is it is something that you're intended to run locally this is so that you know is maybe a little bit depending on what application you're trying to run you may or may not want your users to be running kind of this whole infrastructure on their machine so they would you know power gate node would spend if you don't have an idea fest node running or a lotus node running it would spin up both of those and also have its own processes and so it can end up being kind of resource and and so it definitely wouldn't work on sort of like a mobile app or something like that but it's a really powerful development tool for sure and there are many ways to kind of integrate paragate like you could run one of these yourself in the cloud and then expose you you have the users kind of like interact with the hosted power gate node through and through its API so there are many ways to use power gate and it's all of its power in your application to the textile team has these really beautiful docs on how to interact with power gate and you can see they've listed the various api's that exist for paragate there's a Jas client and then there's a go clients as well and then there's also the CLI which you can use to kind of explore the different functionality and then there were also a couple of workshops on this there was one last week by Andrew and then also at the ipfs pinning summit Andrew and Aaron from the textile team did a really great presentation of power gate as well so that's like a good introduction to okay and then lastly file claim protocol implementations so I mentioned before we currently in today and active development there are four implementations of eye open protocol and what that means is that you know file coin in in the most basic form is it's a it's a protocol it's not you know even really a piece of software you can kind of think about it like that and the the most lowest level artifact of what that is the PowerPoint spec which is I have a screenshot of it here and protocol implementations all implement the file claim spec so the the most feature complete protocol implementation today is the Lotus implementation and then I've screenshotted here as well we have on the file find documentation site kind of some more information about the various for complementation said how to use them and the Lotus implementation has you know it's really great has a number of api's that are available for developers to use so there's a JSON RPC API there's also a Java Script clients as well and then there are the resources to have mentioned on the file claim documentation site Lotus also has its own documentation what you can its l OT ush and that's you know Lotus is basically what we would recommend for Lotus is an extremely powerful tool it's kind of what run is what is going to run the entire network of course the other implementations full is all but it'll probably one of the more might be one of the widely used implementations and so we recommend this for developers that want to build kind of lower-level tooling or something that requires you to interact with the protocol more closely or developer tooling or things like that it takes a little bit of it's just a little bit more overhead because you kind of have to become more familiar with some of the underlying file point concepts but the api's exists and are pretty easy to use too so also definitely a pathway for developers and so yeah that's kind of the the high-level overview of what are the main technologies and then I'm gonna do this like rapid-fire just going through five use cases and how these use cases in a great file point let me see really quickly okay so I can scroll up but I see this question from karate which says the Falcon minors have commitments and proofs of the availability and storage what about bandwidth and latency that's a really great question so and if I will claim there is a also this concept of retrieval mining or retrieval market and so there in the first version of the file Queen protocol in the core like protocol itself the basic version of retrieval looks like you pay to have a miner kind of serve your data back to you and because they is this transaction the financial value associated with retrieval final point you know there's like inside the economic incentives to make sure that miners retrieve data as quickly as possible there will also be second layer solutions as well like we're working with a couple teams that are building gossip sub based retrieval networks and so on where they're even stronger incentives to kind of like you could build a whole business essentially as a retrieval miner and not have to be a storage miner at all and this will be some like second layer solutions that exist but in the core protocol v1 there is there aren't groups for like bandwidth and latency I think that's the hard challenge but it's definitely something that would be really cool to solve and then the rune asks as power gate is using loads under the hood why don't you know about how we can sign transactions from client side offline and submit sign check actions to our gate awesome okay so Erin is here great and Erin is on the textile team so I think there's there are a number of libraries which I'll talk about in a little bit too that allow you to do message signing remotely they don't currently work to do to do deal to to the world it's Dan she eight storage deals remotely currently but you can do other sorts of transactions without having to run a whole Lotus note or our gate note or something like that so I'll talk about that in a minute okay so just quickly going through a few use cases that integrate file point so the first of these is if you want to store static data such as IP FS such as images or videos how would you do that and so today there a couple of applications one is audience which is kind of like a decentralized sound cloud in a sense there's some really really awesome very talented artists that are using this platform and today audience uses IP FS for kind of end-to-end for for its application I believe audience manages their own IP FS node today and are looking to find a way to integrate file quite as well there's this project called d2 which some of you may have heard of and it's kind of like a decentralized version of YouTube and also uses ipfs under the hood and so for these sorts of projects we'd often recommend that you know whatever your your files are your static your static data you can persist this data kind of by pinning it to some sort of local ipfs node or using a pinning service or a remote IP of s code maybe that you that you manage so your users don't have to put it to their local node and then that will sort of get you know is accessible now from anyone that's connected to the public IP FS network there's a version of this that now you can also just from your application back up all of this static data directly to file point as well and so that would look could potentially look like your your say that you require users to kind of be running a local IP IP FS node for this kind of first step on in the middle and then you could also have them run a local IP Aloka lotus node and then basically manage that every time the data is being stored to the public IP fest Network also persisting it to file point you could also replace this kind of like bottom half of the chart with with a tool like power gate or just completely abstract it away if you want to include the file coin component using a file coin back pinning service and so that would kind of replace this like the right side of the graph with with just like API requests to to ascend to a pinning service like textile hub or textile buckets if you wanted to publish a static website and so these are some examples I just took from our own properties but protocol AI is hosted by IP FS and obviously I progressed iOS as well and generally if you want to public a publish a static website B or any sort of like static web application there number of ways that you can do this so you can use a tool like fleep which will kind of do the whole web it is basically like web hosting that will that uses IP FS under the hood to kind of distribute all the data there are other tools as well like unstoppable domains an DNS and then this data like once once it's been persisted to the ipfs network can be loaded via an IP FS gateway the protocol labs ipfs tank team maintains a gateway as it can resource which you can kind of use for development and testing or you can use one of the others that are maintained I think CloudFlare also has an IP FSK gateway and then ultimately you want some way to kind of link through dns the your domain to the content that's being stored on ipfs and there are some tools that are listed here as well for that you could look into for how to do that and so that's that one is actually kind of more today that's that looks like more just use for the sort of use case we would probably recommend using IP FS with some in some cases we might also recommend that maybe you backup this data to file point if you want it to be if you want some sort of like backup or recovery option from a decentralized storage network but generally ipfs will do a pretty good job here on its own if you wanted to build some sort of infrastructural service yourself like a pinning service and then one example of this is buckets and we actually have you know builds kind of an example application that's a very simple thing service as well so this you can see here it kind of integrates with meta mask and then can show you just some like information about the local network that this application this example is running on and this is kind of the main part here it's like you could see the ability to pin data to to both the public IP FS and file coin networks as well and it shows you kind of like activities so that this is the sort of data that you could that you could get if you were trying to run this on file clean and so so if you wanted to build a service like this one architecture that you could use that's kind of being used in the second example I showed was having some sort of you know JavaScript front-end that runs in the browser and under the hood it's connecting to a local power gate instance which is then you know under under the hood power D kind of connects to a lotus note and ipfs node so you could run a certain kind of a service like this have like a browser application and now it's kind of running and so theoretically your users like you might want to have some user management system and your users could create accounts through like your web app and and it's kind of all pinging your local power gate node or you could directly integrate Lotus and go ipfs under the hood of your application as well and kind of have the same sort of experience where your users are interacting with your pinning service through the UI and then if you so this is kind of the richest bucket is like really dynamic applications we chose there are a couple of examples that we felt that have that the application primarily serves the function of file storage but you can imagine all sorts of applications I do really cool things one another example is this idea of a meme marketplace this one also and all of these examples are on the file claim doc site so you can kind of play around with them yourselves are intended to be kind of code samples for developers who are just getting started and this sort of just shows you how you can upload images as memes and this actually integrates with the NFT standard from the etherium as well so this is one sort of application that you could build and this is just to say you know hey we have a tutorial for this online and the way that this application is architected it uses textile hub as the sort of back-end and uses this kind of as like the authentication server for the browser like the front end which is written in JavaScript and react is it also pings out to the etherium Network I think right now it's kind of running on a test net and it does this because because I mentioned you know it uses the ERC 7:21 the NFT standard and so wants to be able to kind of integrate the entity functionality into the application as well and then it uses as much in here as well uses textile hub for the file storage the image storage on ipfs and file core networks there's also an application called sleep which Jimmy Lee from file Quinn team gave a whole workshop on last week and this is you know like just a really great example I think of very nicely designed sort of like holding itself to at least you know the top of like web to design standards but an application that's built the entire stack is built in like web 3 using about 3 technology and so Jimmy gave a talk on this last week think you should check that out and the way that state works is essentially it's built on power gate um so today slate is an application that you're intended to run locally and I believe the team is also working on building a hosted version of slate and the way that would work is it's going to be built on textile hub or in textile buckets and users will be able to kind of create accounts through the hosted front-end the hosted web app front-end and interact with kind of their files and data through through the bouts through the bro' through the browser and then everything is kind of like stored on the decentralized storage network which is pretty cool um so yeah so they're kind of like you know in this in these types of applications they're generally like two major pathways that we have seen so you either want to use textile hub or any other file in fact depending service to run fully hosted applications this is probably the easiest in terms of lift for your users but in some cases say that you if you're if you want your users to host their own notes maybe because you want them to have full control over over their own private keys and their wallet and and and all of these things that you know people care about a lot within the space that are more privacy oriented features then you might want to think about integrating power gate into your application and then having your users just run the whole the whole thing on their on their desktop and then I think this may be the last or second to last example is just chain explorers so there are a couple of really awesome chain explorers that have been built by community members over the last few months and all of these directly interact with Lotus Notes so the way that these teams have built these applications is they're running a lotus node somewhere on their on their servers and they kind of index the chain State that they're seeing from the lotus node they and then kind of provide they basically serve this data up through this like front-end application and then the last use case here was wallets and this is one web wallet by a team called openwork labs and you have kind of a screen shot here of a test version of this and this web wallet is intended to connect to a ledger Hardware wallet if you have one and the way that this wallet was architected as well so this is kind of I mentioned earlier the remote signing libraries so you have the application front-end they also make use of the remote signing libraries so this allows you to from you know from any sort of other application construct a valid file coin transaction and that ultimately submit it to a remote Lotus node that has that it's being kind of interacted with yeah it's JSON RPC API and and yeah so this are kind of you know some I think it's it's a huge amount of information I recognized this so what I was planning on doing was sharing both the slides and also kind of a cheat sheet which has the links to every every one of the resources and tutorials and libraries that I mentioned so I'll may be sure that today later with the eath global team who can share it with everyone who attended but you know if all of that is like it's a lot of material if you ever need support with developing on file coin there are a number of resources that you might want to check out I'm kind of like the the first places to see if it might answer your question the first is going to the final point documentation site which is Doc's that file Quinn Dada yo you may also want to check out by 0.2 period which is a github organization that we maintain or sorry that's like it's not actually maintained by us it's kind of like you know a bunch of projects that are built by folks in the community and this this contains a lot of really awesome examples of what you can do at file Quinn it's like a bunch of really interesting experiments so I would recommend kinda starting with both of those places slack is where everyone like everyone talks about the five Quinn project so you can go to if I open dot io / slack for hackathon of the three main file Quinn related slack channels that that the protocol has when team will be monitoring really closely and then even beyond hack FS if you're interested in continuing to work on file point there were you know always here to help and there are two channels here that would be useful to to start getting involved in as well and then we also have a discussion forum discussed by Oakland ed oh so there are a number of really great questions that I've already been asked here and you should feel free to use this as far and then the last the last sort of resource earth actually that's the second last one is that we recently started doing file coin developer office hours so you can sign up for one-on-one time with some of the court developers on the file claim team to learn about like what's the best architecture for your application or if you're running into any issues they can help you debug and so we have a forum linked here and also I've been quoted the email address of the person on the protocol labs team who's kind of helping to run these and then last but not least there's the file cleanup Grants Program so this is probably most applicable after hack efest but if you get really excited about building an ecosystem there are often like many many different kinds of grants that are available to two teams who want to continue to contribute and that's everything so thank you so much I think we're we have about five minutes left I mean I'm gonna stop sharing so you can see all the messages cool okay so I think some I'm not sure to pronounce this username but someone asked could you explain how our contracts are used in the file Queen context if it's if it uses solidity and if they're experiments with other blockchains so today in file coin we have this the notion of of actors which is really what we that's kind of like our word for smart contracts and file clean context but today these are all built-in actors so they're unlike core functions of the file and protocol it includes you know the storage market and the storage miner process and so on today there isn't user generated smart contracts or anything that you can natively do in the file claim blockchain but there are a number of bridges to other block chains that are in progress and so those would it would be in whatever you know the programming language is for those block chains the link to the me mark marketplace tutorial I'll put that in the like resources thing that I'll send to to the football team after let's talk let's see okay I think oh maybe I missed one what is the main difference between file Queen and other coins like Co coins so I think you know like the core thing that that we think is really important about the file crime protocol is the fact that it uses the like the fact that you know the what your the whole system is essentially incent it's like we're trying to incent this behavior of storage miners correctly storing data over a long period of time and you as a user being able to like really trust that this is actually what's going on and so file Quinn makes use of these cryptographic storage groups that I've been mentioning that's kind of unique to the Falcon protocol there's been a lot of research that's gone into how these can work reliably and securely and so that's like one thing I'd say it's kind of a differentiating features for filing awesome cool there's no more last-minute questions we can probably wrap up there the people second to 200k this clapping knot and raising okay cool before we wrap completely I'm very curious how people actually heard about this session so we've been doing or just sessions in general so what we've been doing is a couple different things at the beginning of the event we had a public calendar that you could subscribe to we've also been sending calendar invites we sent an email this morning with the list of events for this week and then there's also the haka fest schedule Channel so there's four options so I'm just very curious how people have been keeping track of all the events if there's too many emails for calendar invites people want fewer emails so it looks like okay so public calendar email invite calendar invites seem to be the best way for people oh there's also the hacka fest the schedule unhappy fest calm forgot about that we have five days to get this to people okay this is this is good so it seems like the calendar invites seem to be the best way for people to stay up to date but was him karate still misses them somehow yeah so we'll keep updating all of these places but be aware that we update all of them throughout the week it's available in multiple places and that will keep doing that if that's what works for people I think that's it thank you puja for that session this is really great to have a high level you know overarching summary of all the ways to interact with file point all the tools the projects it's really exciting and I know I learned something because especially last week it was more of the conceptual or project specific things so it's good to see it all together in context with each other all right yeah thank you and thanks so much everyone for thing yeah final reminder again check-ins are starting today so go to your cohort channel go to your hacker dashboard right your team project check in and happy week to everybody will see you in slack 
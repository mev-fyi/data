awesome hello everyone to our third day of hack money workshops i hope you all enjoyed the kickoff and summit that we had we have adam here from compound doing a workshop on building the compound protocol questions go into the zoom chat adam will be leaving them all until the end and with that being said i'll pass the mic off to adam hey thanks excited to be back at another hack money hacked on i'm representing compound and i got a presentation here for developers to show you all how to get started building on the protocol and you can use this code in your hackathon project and try and win that compound bounty so i will explain that a little bit i got a little slide deck for you guys before i go through a little bit of code so i'm adam i'm the developer relations lead at compound labs i'm here to help out with protocol related development projects you can find me in the compound discord and adam b i hang out in the development channel a lot and of course during the hackathon i'll be in the east global discord you can find me in the compound sponsor channel and you can ask technical questions there members of the compound labs team including myself can help you out with that you can also find me on twitter i'm adam vavos on twitter so agenda of my presentation today i will talk about the bounty prices for hack money 2022 what you can win and i'll explain what the protocol is in case you're not familiar with compounds and i'll also show you some developer resources lots of guides documentation quick starts to get you started building a project on top of compound and i'll do a little programming workshop at the end that is related to hack money so the sponsor bounty this year is three thousand dollars of usdc that is the grand prize for the best integration or upgrade to the compound protocol so you must use mainnet or a testnet instance or have a protocol upgrade in progress in your submission to be qualified for the prize and everybody that includes compound on their project but doesn't win the first place prize they are part of the prize pool so that will be divided up by the number of participants that use compound and that's a thousand dollars usdc great so again i work at compound labs we are the creators of the compound protocol and it is a protocol made up of several smart contracts running on ethereum mainnet since 2018 and the mission is to create efficient algorithmic money markets so what gets me excited to work in defy is that we author and continue to steward decentralized free and open crypto tools for everyone with an internet connection and that includes the banked the underbanked and the unbanked and if you think about that that's a huge amount of market share globally so anyone on earth with smartphone and an internet connection can use defy and use compound so historically we've seen rates interest rates for suppliers into compound at 10 and even 15 percent apy on usdc as well as several other supported assets which i'll cover later and i love what we're doing because it's different from traditional finance systems like compound are transparent they're public ledgers code is law and with d5 you instead get decentralization and transparency unlike centralized banking financial systems and that just gets me very excited to work in this space so what is the compound protocol simply put its crypto asset money markets so we refer to it as the compound protocol it runs on ethereum it's decentralized which i'll explain shortly how it's decentralized and the main use case is that it allows users to earn interest on their cryptocurrencies or permissionlessly borrow other cryptocurrencies so instead of an asset like ethereum or usdc or one of the many others just sitting idle in your wallet you can supply supply to compound and you earn a varying interest rate so those are the two basic uses of the protocol everyone can earn interest on crypto or borrow other crypto so that that's that's the main use cases uh it can only support crypto assets that are tokenized on ethereum as erc20 assets so this is something that is a limitation that is uh temporary in the future we're coming out with new versions of compound where perhaps you could supply things like nfts or other assets we'll be seeing what what comes out of development in the community in the future but for now with the version of compound that's on mainnet only erc20s and ether it allows suppliers to earn a variable interest rate on their assets and an individual that uses adapt like the ones on the compound finance website homepage or their own code can use every feature of the protocol so developers can build their own apps use the protocol as interest earning infrastructure and users or organizations can use the interfaces to earn interest borrow or participate in community governance so use cases that we see are crypto wallet applications that use the protocol to offer interest earning for their users again so the assets don't set idle in their wallets and uh businesses that hold wallets for any period of time they can use the protocol as a way to make some money off of that uh money that's just sitting vacant so yeah here's some examples if you're going to supply assets to the protocol you can use one of the many interfaces or your own code that interacts with the blockchain a supplier supplies their asset it moves from their wallet to the protocol contract and in return the user gets c tokens and c tokens are sort of like a code check for your underlying asset and the exchange rate for c tokens increases over time such that you can redeem them for more of the underlying asset as the ethereum block height increases so let's say you supply one ether and you get 20 c tokens in return uh sometime later you can get 1.5 ether for your same amount of c tokens that you have so that is the function by which the the c tokens work you can supply for as little as one ethereum block which is about 13 seconds nowadays and this enables on-demand supplying and redeeming of assets to and from the protocol so there's no need to wait for any lock-up period you can earn interest for supplying for as little as one block so the other use case is borrowing so in order to borrow crypto from the protocol you must first supply another asset that is a valid collateral asset and the concept here is over collateralized borrowing so you need to supply a greater value of crypto than you can borrow so let's say in this example someone is supplying ether as collateral let's say they supply a thousand dollars worth of uh ether they will get those c tokens in return they will still earn interest on this ether but they can borrow another asset like die against this ether but they can't quite borrow a thousand dollars worth of dye they can borrow a bit less depending on the collateral factors for that asset so i believe the collateral factor for ether is something like 80 right now uh it sometimes changes with governance voting changes but i i believe it's about 80 so you can borrow up to 800 worth of die for that ether collateral so that's over collateralized borrowing of course the borrowed asset has interest that increases so you will have to pay back more die than you borrowed initially in order to free up your collateral so those those are the two use cases of compound is flying borrowing one of the dangers of borrowing is that you can get liquidated if the value of your collateral reduces such that it cannot support your borrow anymore or if your borrowed interest accrues so high that your supplied collateral no longer supports the amount of that borrow so the protocol currently uses chain link price feeds to depend on uh the value of assets for collateralization so if the price fit asset changes uh you could get liquidated or you can be freed up for further borrowing uh so that's those are the two use cases and also uh the risk involved with borrowing is uh liquidation so the protocol uh historically it originally supported only a few assets but thanks to governance changes from our community there are now 18 supported crypto assets all of these are ethereum based assets and you can supply and borrow these assets and a handful of them are valid as collateral some of them are not valid collateral and that that is based on community decisions um for risk tolerance uh some some we just don't wanna treat as collateral that's okay they can still be used to earn interest or they can be borrowed so a little bit about the decentralization of the compound protocol if you're not aware the protocol is decentralized through a smart contract governor and also a comp token so the community can create code changes to the solidity code of the protocol and execute those changes on chain and upgrade the protocol in a decentralized trustless manner thanks to the comp token as well as community proposals so let's walk through how that works a little bit first there is the comp token it is an erc20 token it is distributed to the users of the protocol in a slow drip fashion the original distribution was meant to be over a four year period for those that are supplying and borrowing assets to and from the compound protocol the community has changed up the speeds a bit and the direction in which the distribution is occurring so you can follow along with that on the comp.xyz forums there's some discussion right now about turning off the comp distribution but anyway it's an erc20 token and it can be used to propose changes to the protocol which are real code changes and it also can be used to vote yes or no on a protocol upgrade so here is the flow of protocol change proposals say a community member wants to do something like add a new asset or change a collateral factor or an interest rate model they can do those code changes on chain and tell the governor that they want to make these changes live and part of the protocol in order to do that they have to have i believe it's 25 000 comp delegated to their address they can create this proposal in which the proposal is created and there's a two-day period where the community can uh become aware and see the actual changes that will occur if the protocol executes this change and after the two-day waiting period there is a three-day voting period this is where comp holders and delegates can vote on chain yes or no whether or not they like this proposal and uh once voting ends if there are more votes yes then no and also there are enough votes for the quorum to be reached uh the voting will be successful and then there's another period of waiting where applications that depend on the protocol can upgrade their code to make sure that the new changes are not breaking changes in their applications and once that two-day period ends the time lock can have an execute function called by anyone and that will make the changes on chain and that will become the new code of the compound protocol so that's a little bit about community governance and the uses of the compound protocol we got resources for developers if you want to build something that depends on compound or you want to contribute to governance where you make code changes to the code base you can find lots of documentation at compound.finance docs there are smart contract method documentation there are guides to building there are sdk docs for the sdk compound.js which i'll be showing in my code demo coming soon and of course all of our developer guides are on medium as well as use guides if you're you're not a developer yourself you can still learn about the protocol and how to use it using those guides and of course we have two open source organizations on github compound developers which includes lots of code examples for folks like you building and hackathons and of course compound finance organization has all the open source code of the on-chain protocol so here's the opportunity to pull out your phone take a pic real quick or just qr scan here is the repository of the project i'm going to be walking through today for this hackathon it is a continuation of the demo i built last year for hack money uh it's just a little bit more built out application some more features so i'll be going through that next fun stuff great so uh anybody can head over to my github to uh check out the code i'm gonna be walking through i'm going to end my slide deck real quick all right so here is the docs page compound fine and slash docs this is where you can find a lot of the guides we have as well as links to the smart contracts their addresses on mainnet as well as the testnets and of course we have smart contract method documentation here so if you want to do stuff with c tokens which we're going to be doing today you can learn about that over here so here is my repository it is a full stack web application that is adapt it allows users to connect using their metamask wallet and supply assets to the compound protocol the addition here is last year i built the app that allows you to supply and redeem this year there is a chart that is fetching the interest rate from the blockchain and it makes a nice data visualization so you can see the interest rate change over time for uh crypto assets so this is something you could build into a dashboard during the hackathon and that of course is a valid bounty prize winning project uh if you want to check out the project i built last year and the live stream there's a link to it in the readme there's also a link to the youtube playback of last year's hack money so you can follow along with that presentation as well if you want to learn more about uh supplying and redeeming of assets using compound.js all right so i have this cloned to my computer at the moment i'm going to walk through that code so got my terminal pulled up and i got my text editor so this project is a little different from the one we built last year instead of having just a front end we have a back end as well so we're able to have an api as well as a database that caches data and we're able to serve these front-end assets from our back-end application so i'm going to get started by walking through index.js this is our node.js file it runs a web server and this web server serves not only files but data in a rest api fashion uh we've got an express app so if you're familiar with node.js there's a popular framework called express.js and it's popular for making um rest apis as well as web servers so uh the first thing in the application is an instance of an express app uh this is what's gonna serve our our front-end assets as well as our data we're going to run that on local host port 8080 and we'll see a little bit more of how to run the app at the bottom of the file to persist data i'm going to use sqlite which is a small easy to use database system that is usually used for things like proof of concept or small pet projects for more permanent applications and more robust ones you might use something like postgrest or my sql for your database but for this demo application i think in a hackathon sqlite is good we'll be caching our interest rates in a database so that each time a user requests it from our app we won't have to query the blockchain which of course if we're using a provider like infura or alchemy that could end up being expensive if we're uh repeatedly requesting the same data over and over again so i think caching this data is a wise decision for the programmer we'll be using ethers.js to fetch this data from the blockchain this is a popular node.js and frontend.js library for interacting with the ethereum blockchain and i'm also using fetch this is a http request library and it allows us to fetch data from etherscan i'm going to be using etherscan briefly in this app so our connection to the blockchain is going to be this mainnet provider url i have it imported as a environment variable so it's hidden so folks can't see it in your source code excuse me uh this is just for code cleanliness and keeping keys out of the code uh so this line here is how we serve our front-end assets so we have our public folder that's got our our html css javascript and express was able to serve it with just this one line of code and then we have our one rest api route here that our application makes available for uh public consumption so if somebody makes a get request to this rates 30 endpoint with the c token address of which they want to get the uh 30 days of interest rates they can pass that here and we'll get those rates either from the database or the blockchain if we don't have them in the database and we'll send that to the user so i'm going to quickly show what that looks like so i'm going to run this file in my terminal and that makes a web server running at 8080 and i can visit that in my web browser this is what our app looks like uh but we want to check out that endpoint real quick so i'm going to copy this and paste that here and we need the c token address so i can go over to the docs this is the slash docs page click networks and we can copy the second address of any one of the c tokens i'm going to copy c ether come back over here and add that to the url so this is going to make a get request to our web server and what we see is a bunch of json data that's returned so we got an id which is just basically our our database holds an id for every entry not important we got a time stamp in iso format of each day that the interest rate is from so this is whatever the nearest block was at on april 7th of this year we find out that the supply rate per block for c ether was this integer so this way uh we're able to support we're able to uh derive the apy from this supply rate per block uh so i will be doing that in my front end code if you want that example you can head over to the docs and go to protocol math and we have some examples of interpreting exchange rates here as well as calculating the apy using rate per block so there's a little equation here we can turn into javascript and take that supply rate per block from the c token and we can turn that into an apy percentage we can also turn it into an api percentage but for the sake we're doing apy so uh those those numbers here can be turned into an apy and if we take a look at app.js on the front end if you participated last year this file should look familiar we have a function for calculating apys that one's for the interface but this one's for uh the chart so we have a result here we have our number of days in a year approximate number of blocks a year and our ether mantissa we're using that same equation that was in the docs to derive an apy from the rate per block uh so this is what we see in our chart here's an intro instance of chart js we're taking those interest rates that we fetch from the api and we're going to stick them in to our chart here's our x-axis and here's our y-axis so that is the chart we see on this page we can see this c ether interest rate it's been hovering at about .05 uh this is a pretty low interest rate because folks tend to use ether as collateral for borrowing so there's a lot of supplied ether and not a lot of borrowed ether so the interest rate stays fairly low for c ether compared to other assets like the stable coins like dye and usdc great so we're going to go back to the web server file and walk through how we're actually fetching this data so it's a little more generic than to just a compound instance of an application this could be used for getting interest rates of any other protocol depending on the implementation but yeah we got a function here that gets the rates of the 30 days this function either fetches them from the database and if the database doesn't have them it fetches them from the blockchain so i got a function here that uses javascript to find out the current date and what is the date 30 days ago and it gets the midnight time of that date in an iso format string we also get today's date and we try and fetch that from our sqlite database here's our query we try and get the timestamp between 30 days ago and today and get 30 rows sort them by timestamp and the result from the database if we have all that data it'll just be uh 30 rows but if we don't have that data say it's it's uh tomorrow and we run this for the first time we only have 29 instances and we need to get today's interest rate we will fetch that and fill in the missing rate and just fill in that one rate in the database so this fill in missing rates function is the most complicated function here but what it does is it uses ethers.js and gets the supply rate per block from the c token that we pass to the function we are going to use etherscan to find out what the block number is at the time stamp since uh with jsonrpc we can get the the timestamp of a given block we can't get the block of a given timestamp so to go the other way around we have to use an external api we're going to use etherscan we get the oldest block and the timestamp and what we're doing is we're guessing what the block should be on each day in between at midnight so blocks nowadays are about 13 and a half seconds so i'm taking the the delta of time and multiplying that by 13.5 for the number of blocks and then we get each approximate block at midnight uh from for each of the 30 days so then we are fetching that from the blockchain using ether's js here's our our contract instance c token and we're getting the supply rate per block at a specific block tag which is our block at approximately midnight on each day and i'm using um alchemy which has historic uh fetching of functions so you can call this function at a specific block in the past so it has historical access to the blockchain this is available for free at alchemy.com so you can get your api key there and what we do is we try and get all the rates uh we make 30 requests and we wait for all of them to respond using this promise.all function and then we fill those missing rates into a json object and then anybody that is missing from the database gets inserted into the sqlite database and then we merge them so we have our initial rates that we already fetched and any new ones that were merging yep and so the rest are some helper functions for inserting into the sqlite database and of course the very first time we run the server file we create our database table so that is how our back end works and also i showed you the the front end code earlier with our chart and also our http request to our our server and of course when we come to this page we get our chart what happens if i delete the database the error called db rmdb uh so now we have no more data cached so if we run the server and load the the web page the very first time it'll take a little bit longer for the chart to load because we're fetching that data from the blockchain great so it took a few seconds for uh the interest rates to load and we see that interest rate went down today went back down by 0.01 back to 0.04 and if we refresh the page the chart should load instantly great and it loaded instantly our data cached using our sqlite database and of course we have this little widget from last year's hack money workshop you can supply ether to the compound protocol here put input the amount you want to input and you can supply it and redeem it also using this function and this of course uses compound.js and if you want to learn more about that you can watch the playback from last year's hack money hackathon i have that linked in the github repository you can go over here and we got a link to the youtube playback from last year uh yeah so that is my presentation for this year happy to answer any questions in the chat see pulling up my chat window here don't see any messages yet glad to know that i explained things so thoroughly and clearly i don't have any questions yet please don't be afraid to ask questions i'm here to help you out i can also answer questions later in the sponsor channel of the global discord happy to help you out with your technical questions and validate your project make sure you're good to go win some prizes yeah awesome that was great adam thank you so much for doing that workshop yeah i think he did such a great job that everyone simply had no questions um but as adam said he is reachable on the evil blood discord and hashtag um sponsored compounds um for the entirety of the event so definitely feel free to reach out if you do have any questions that come up um but yes once again thank you adam for taking the time to do this workshop with us for a hack money um oh actually it looks like um you got a question just now awesome yes i see it i will pull up my slide so uh the sponsor bounty for compound this year is to create the best integration or upgrade for the protocol so you can create an application that uses any of the instances of the protocol whether that be mainnet or testnet use the protocol for interest earning or borrowing of assets and you can also do uh smart contract upgrades so if you want to uh maybe reduce the gas costs of a c token or the comptroller you can dig in there in smart contracts and create a pull request that would count as a valid uh sponsor bouncy project submission uh and yeah three thousand dollars is up for grabs happy to see your projects coming in and i'll help you out with them for sure thanks victor uh we have a question from narjes uh sorry if i pronounce your name wrong uh how is of a token used in compounds so uh ave is one of the supported assets in compounds so users can supply ave to earn interest they can borrow ave if they have a different asset they want to borrow ave for something and also you can use ave as collateral i believe it has a collateral factor we can check that out in the docs or actually not the docs the markets page so if we scroll down to ave ave has a collateral factor of 70 so if you want to borrow a different asset if you have ave you can supply it to the protocol and you can borrow up to 70 of the value of your ave as another asset but you shouldn't borrow 70 right away because you'll get liquidated in the next block so make sure you borrow much less depending on your personal risk tolerance uh thank you for your question let's see the next one can we please share links to the github repo yes yes we can uh the link is here and here's the qr code if you want to scan that with your phone and the link is also github.com ajb413 compound hackathon money 2022. i'll put that in the chat boom uh you got it hope somebody already posted it awesome uh what is the best way to reach out for help when developing on compound during hack money you can reach us in the uh sponsor discord channel there's a compound sponsor channel i'm hanging out there jared our director of protocol is hanging out there and tori our one of our front end leads is there as well looks like that's all the questions awesome thanks for your questions everyone um and yeah once again thanks alex for or sorry adam for the workshop um and for the rest of you we do have a uh another workshop happening tonight um about half an hour the idea brainstorming session so if you need some um talking through with your ideas or need to get some inspiration definitely um go to go to that luke from our team we'll be facilitating that otherwise this workshop is recorded and available on youtube anytime so feel free to come back to this if you ever need help and with that being said i hope everyone has a great weekend and thanks for joining 
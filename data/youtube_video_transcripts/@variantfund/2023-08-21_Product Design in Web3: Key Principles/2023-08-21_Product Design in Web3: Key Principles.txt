foreign is just going to be about product design in web 3 how we kind of see those intersect and I think in terms of the agenda pretty straightforward I'll give a quick introduction we'll talk a little bit about kind of some Core Concepts that we see being really relevant when it comes to thinking about product design and how it intersects with web3 and then we'll walk through a quick case study and have some time for a q a after um so yeah I think as a quick intro um I'm Jeffrey it's good to meet everybody um I am one of the co-founders of slope uh just for context there slope is an end-to-end creative agency it's hyper focused on working with startups we were started as an agency by Founders for Founders and uh for some background there my co-founder Karina and I have spent our careers both working in-house at a bunch of different tech companies and starting some of our own venture-backed businesses in the past too and so really just wanted to build an agency and a Services business that was highly catered towards working with early and growth stage startups um from a service standpoint we generally work across three larger buckets so the first is brand we do a ton of brand strategy and positioning work a lot of visual identity work so things like logo type color how does all that come together as a brand system um our second kind of bucket that we work a lot on is digital so we do a lot of web design and Dev and then obviously the focus of today's talk a lot of UI ux work there as well and then finally we do a decent amount of retainer work where we're just working on campaigns or ad creatives um things of that nature and then just for some context here we also work with a lot of webview companies I'd say about half of our client base historically is in web3 and we just feel like there's a lot of really great opportunity for a great design to make high business impacts in such a like nascent space and we'll kind of get into some of those principles obviously in a bit but with that being said um let's chat a little bit about product design uh I think for talks like this where I often find it helpful to start is just with definitions um and I think this is obviously a little bit of a traditional definition of product design and probably one that you guys have all heard and are familiar of familiar with but we generally think of product design as you know this intersection or combination between user experience or ux and user interface so UI right um and ux being you know flows how the customer moves to the product and the app and UI being the interface and components that kind of visually um show uh and make up the product itself but I think oftentimes um this definition can be a little bit rigid for the purposes of like a talk like this and I think it's often helpful to think about an alternate definition of product design or at least one that I want to just keep in mind as we kind of chat through the slides today um and that's one that where we think a little bit more about maybe the goals of product design being around creating intuitive delightful user touch points and experiences um and where product design then itself is sort of the practice of creating and systemizing those touch points right and I think the reason why this kind of alternate definition is important is especially in a world like web3 where there's so much inherent complexity it's such a new and nascent space and often one that's even politicized right in many different ways there's many kind of different external sites to what web3 looks like and means to different people having really great simple descent design that distills these inherently beautiful and simple user experiences is especially important in that context and backdrop and so I think kind of with that in mind I I want to talk about a few key principles for design in web3 I think this is sort of the bulk of what we want to focus on for the talk today um so things that we've just learned as an agency from working with web3 products day in day out um and things that we see like are really important from a philosophical standpoint and also kind of tactical things underneath so I think the four themes we really want to talk about today are number one designing for comprehension uh the second is designing for magic so more magical experiences the third is designing in a very open composable world and the fourth is around designing for your user so we'll kind of go through each of these sort of high level Concepts starting with designing for comprehension so I think just to talk about comprehension a little bit um and kind of to kind of reference this a little bit earlier around the fact that what the often encapsulates a lot of complexity right I think that's just the nature of the space in many ways um and this complexity is often both technical so uh you know from like a new technology standpoint Concepts like decentralization cryptography a lot of complex maths oftentimes um and this complexity is also experiential right in the sense that users in the space of web3 are often playing new roles that they haven't before right custing their own funds having ownership and protocols participating in governance these are kind of net new experiences for a lot of users and consumers in the space and so I think the combination of these two and the intersection of the fact that we have both Technical and experiential complexity makes comprehension kind of a really important topic in a space which is kind of naturally the question of how can we design simple delightful experiences when working in such a complex problem space um and so I think a few kind of tactical tips here that when we think about comprehension uh the first is this idea around training your users as being a really key way to drive comprehension when we think about UI ux um and to give a bit of background when we often think about an app or a website or a protocol we think of it as a scoped universe and what we mean by that is that when users are on your app or your website within that Universe of that domain we expect things to behaved similarly and into consistent ways so I think a really simplistic example of this is that like a drop down on one page should probably behave in a very similar way to a drop down that exists on another page on your site um and I think the reason why consistency is so important for comprehension is by creating really consistent systems where the app and the universe that the user is living in behaves in ways that are expected you end up creating really positive impacts around faster onboarding faster education and understanding how these interfaces work and less mental load for the end user and so I think like a really tangible example of this is for example just looking at Abe here um so for as most of you probably know Abe is a lending protocol so you can either Supply tokens or borrow tokens at a certain apy and I think what's really neat is if you go through the actual flows and even looking at the screenshots here even though they're small minor differences between how the supply and borrow side work in terms of information displayed and kind of smaller micro interactions the larger structural system feels very familiar and even looking at these two modals structurally they share a very similar component system in UI library and look and feel and I think this is really important because it would have been very easy to make these clothes completely Divergent feel completely different but the net benefit that they receive by having this kind of consistency is that if you are somebody who has ever supplied on the supply side on Avi you already have become implicitly trained by consistent product design to understand how to borrow as well so there's almost this natural acceleration in the onboarding curve for a user because of how consistent components app wise or across the global scope of Avi as a protocol are um I think then the second thing that we want to think about kind of Beyond consistency is time as a variable I think this is also a really key tactical way to help Drive comprehension and simplicity when there's a lot of complexity at hand and so the way we often think about this is when you're working with complex information right or complex complicated flows it's really easy to just dump all of that information on your end user um and kind of just let them figure it out but I think one kind of access that we uh that we often find either like you know more Junior designers or new Founders kind of not thinking as much about is this idea of time being in Access when it comes to product design and the fact that you can strategically kind of trickle in informations in little bite-sized pieces and packets kind of throughout a flow to create a more digestible easy to understand and kind of more calming experience um I think like just to kind of talk about a tangible example here in a very similar way I think a lot of dexes kind of exemplify this this concept where um if we look at this one here this is Cal swap for example but I think this is just pretty universally true for most dexes um at each step of the flow what you'll notice is that a lot of new information is kind of trickled in very strategically right so we have this initial State here where things are just pretty clear there's an input and output it's clear to me that this module is some sort of swap functionality um as you then start to kind of Select connect your wallet select the tokens they'll start to trick on information right about the balances that you have available and then when you go to actually enter inputs to swap you'll start to see the actual tangible numbers around slippage price fees Etc and I think it would have been very easy I think when designing a deck from scratch like if we forgot what this experience was like to just dump all of this information much earlier in step one or two um but instead I think having kind of that the the relevant information strategically trickled in at the right point in time throughout the flow actually makes this a lot more modular a lot more digestible and a lot more easy to understand for the end user um and so I think that overall leads to more comprehensive and less overwhelming solution um I think the third kind of sub Point around comprehension and the last one that I want to leave everyone with is just this idea around educating your users um this one's probably the most obvious but one that I feel like often we forget about in web3 which is that sometimes it's best to tell people what's happening um and that's kind of the best way to drive Clarity and so uh this example is from matcha uh which is obviously the decks from zero the Xerox team and I think the one moment that I thought was really nice and delightful when playing around with it was this wallet connects slow um I think we've all probably pretty used to while at connectflows just being that classic Model where you just select one of the wallets and there's not really any other information that's available and I think what they've done a really good job with here is just dropping in this really nice educational and informational moment right so there's in this modal a lot of real estate dedicated to hey what is a wallet in the first place right um how do you use it what are the benefits there's even an out so a CTA to get a new wallet if you don't have a wallet already and for users that are more experienced and maybe are more familiar they can kind of have that classic experience on the left-hand side so to me this feels like a very Dynamic much more sophisticated version of a wallet connect module that benefits kind of a wider set of users and provides a lot of education and informational Clarity for a certain subset that might often be a little bit more confused um well so I think in summary when we think about designing for comprehension I feel like the key points that we want to just keep in mind are training your users right so remembering that consistency across UI systems and components leads naturally to um easier onboarding and more expected behavior from users that are the end users of your app I'm considering time as a variable is simplified flows right so just trying to trickle an information strategically and then just education as a really easy go-to that can just simply help clarify a more complicated Concepts um cool so I think uh the second concept that we kind of wanted to talk about is this idea around designing for magic and how that applies to web3 so oftentimes uh this is like a really interesting one for us because um web 3 presents a pretty unique opportunity and moment in time to rebuild a lot of traditional systems right whether they're Financial systems or governance systems or digital art systems whatever it might be um it's it's kind of a modern rethinking with with obviously blockchain technology and infrastructure in the back end on how these systems can be better let's turn it down can you know oh Nina you're up mute oh it's okay that was a question um but yeah I think um in in general when we think about rebuilding some of these traditional systems it's easy to have a simple Baseline and muscle to be like as long as the experience is better than what exists today that's totally fine right as long as we're going somewhere above our web 2 comp then we should feel okay about our UI unit UI and ux and I think this is actually a really big missed opportunity right because when we kind of have this unique opportunity to rebuild traditional systems I think we also inherently have an opportunity to think about how to make them significantly more magical um than they are today and so I think the first kind of sub point when we talk about tactically how to design more magical systems is basically about how to make things simpler right what's the easiest way to take these kind of more convoluted things that have existed historically and simplify them and I think one example that really encapsulated this for me especially during like the beginning and the boom of like not the beginning I guess overall but the boom of D5 summer was uh when it came to yield farming um I think that the lp farming process for example was just unnecessarily complex so you know this the four-step process that you kind of had to go through and and a lot of you guys are probably familiar with is you know you had to acquire first two equal token pair values um so like equal value amounts of two token assets you had to add books to a pool to receive these LP tokens in exchange those LP tokens represented your ownership share in the pool and you had to then deposit those into a farm and then you had to check back regularly and collect your yields right and I think it would have been very easy to say that this was fine right this is a fine experience because hey you can't even do this in web 2 traditional financial institutions are just as complicated and convoluted and net net this is arguably a better experience to to make money um but I think that kind of undercuts the fact that there was this really good opportunity to build something significantly more magical right if we think about that same process and we really consider the End customer goals it could have just been a two-step process right almost no one is just holding those LP tokens and not doing anything with them these intermediate steps are almost completely unnecessary and could have been automated by software at least for a specific subset of users and this could have been a really magical two-step process uh deposit some sort of token amount um the protocol will either split it automatically on its own or you can deposit a pair and then automatically collect yields right and this would have been a really magical experience that felt much much better than you know using traditional Financial systems and bringing in a lot of that magic that web3 allows I think on a kind of related note we also think a little bit about how software is really Dynamic and how that can be kind of a core factor to help Drive these more magical experiences so sometimes it's not just about simplification it's about personalization and so the kind of underlying context here is often when we're working with clients um and and Founders we see this kind of mistake of Designing for beautiful Sigma frames versus designing for beautiful software and what we mean by that it's really easy to basically get lost in this process and try to create kind of the perfect static figma frame that looks really great it looks really great in the flow we're gonna ship it um and I think it's easy to forget that there's this really powerful underlying machine that's driving all of these figma artboards and that there's a lot of really cool stuff we can do with software as a result and uh this metamask example on the right hand side I think is an example of like a really big missed opportunity to kind of have that magic come through via Dynamic software so when you go to select a network on metamask uh for me at least they displayed ethereum and then linear and smart chain and I've never transacted on linear in my life for what it's worth and a lot of the chains that I do transact on are much much further down the list and I think there's a missed software opportunity here to really personalize this list right to actually show much more relevant options for me as a user on an individual level and have software Drive these more magical seamless experiences and so I think the thing we just want to encourage here is don't forget that they're software powering every screen that you're building and try to think about opportunities to let that software create more magical moments for your end user um I think a similar example um of something that was done actually well is I think this is like a really nice data visualization moment uh from like a governance perspective where software allows us to create these really Dynamic visualizations of proposals and voting proposals and um it's a really delightful moment right because it's something that I think you would never see traditionally in web 2. it's this really unique visualization that's really easy to grasp and I think it's something that does take advantage of the fact that hey we can connect the actual vote quantity with like a very tangible beautiful visualization that makes a lot of logical sense to the end user um cool I think the second sub points here around making things magical is just not to be boring um so I feel like uh this is something that we think about a lot which is as the world has sort of evolved in Frameworks and UI systems have become easier to use um for lack of a better word it often feels like much of the world of software design and product starts to look like it was all created with out of the box Tailwind components and that's totally okay but I think we would urge everyone to maybe just think about a world where things can be a bit more interesting and magical right and and our UI itself doesn't have to just be only hyper functional it can also bring in these kind of delightful little moments that bridge the gap between say brand design and product design or maybe bring in little moments of personalization that are really nice for the end user and so two examples here uh that I think do this really well are Phantom obviously did a Rebrand recently and I think they did a great job integrating even into a very functional wallet product a lot of little brand moments this is obviously connect cover screen you see when you first log in but like it's nice just to see the logo the brand moment play a bit more of a zero message and then family on the right hand side again another wallet but for their mobile app you know releasing the ability to customize individual icons so that it feels a little more personal I think these little things are really delightful and I think they often get de-prioritized in a product roadmap because it's hard to assign and attribute business value but as a system if we can build a culture of continuing to integrate these moments into our product we feel like it leads to a lot of really delightful experiences I think just to kind of talk a little bit more about this too for one second because often we also also hear that like maybe this feels like it's only applicable to like consumer products but one thing that we want to know that's really important is that these moments Delight are equally relevant for infrastructure Dev tools kind of larger things that maybe see like they have less consumer touch points as well um tableland on the left hand side is a client that we've worked with on a lot of this Strat and brand of stuff and one of the things that that was really key and interesting for them is basically releasing this nft collection so people land is basically an nft metabase metadata layer and essentially they release this nft collection of basically um these really unique kind of Explorer vehicles and built this whole world and brand world and system around it to kind of benefit their initial community and we felt like this is like a really delightful nice moment where they were able to integrate it pretty closely to the product and also do a lot of World building um for something that would have been really easy to opt out and do something kind of quite boring and vanilla for as a devtools product and I think similarly on the right hand side um sometimes this delightful and magical moments can come also from uh from the product and feature itself so with Alchemy releasing the chat GPT plugin for example um I know early days but it seems like there's something that could be interesting with integrating new software and Technology on the infrastructure infrastructure side to kind of Drive some of this magic cool so I think in summary for Designing for magic I think that the key points that we want to keep in mind are just using software to simplify where possible um using software to personalize where possible as well and remembering that we're building Dynamic systems um and then bringing in Magic delightful moments even if they're not purely functional um cool so I think on to then the third example here um so this is around designing for composability and so I think this is a pretty unique one to web3 and systems that we're building in web3 and obviously this kind of open composable world that we live in presents a lot of interesting opportunities but I think inherently as well uh composability also presents a lot of interesting design challenges and one of the biggest themes that we often see is in a world that's so composable users are often even if I'm like a DEX or I'm building a very specific protocol they're interacting with multiple products throughout the experience some of which are not owned by the company themselves right and I think that it's easy to pretend that that is not the responsibility of your protocol and that you are only responsible for the screens that are native to your app but I think oftentimes that leads to really poor product experiences um I think one really tangible example I think we can show is sort of shown in this video solicit unit swap obviously but the interesting thing is when I go click Buy on uniswap I get kicked out without really any warning or context into a separate flow that's run by Moon paint um and as a new user I might not have any idea what moonpay is it's quite a jarring experience all of a sudden this model pops up with a new logo and different type and colors and it's just a I think very strange experience um and to me this feels like a missed opportunity in the sense that um if a user is using uniswap and the encounter just encounter this flow they're going to be confused and I feel like it is the responsibility in some ways even though we're working with composable protocols if we're composing with moonpay in this instance important to educate that end user about what they're getting kicked into what moonpay does sort of easing them into that experience right um I think a similar example of this too just to kind of go to the next screen and again not trying to pick on unislap here I think just that just the easy easy example to kind of take a look at I think most declares do this but a similar concept kind of applies to when we look at larger token right um if I search each for example I get this huge sort of unsorted unordered list of basically eat various versions of wrapped and steak to eat and it's all kind of diffusing and a little bit overwhelming and hard to find what I'm actually looking for and I think again this is something around where it's easy as a protocol for me to say that it's not my responsibility to order these tokens and that my job as uniswap is to just be an unopinionated Dex uh that you know permissionlessly lets people you know set up any token pair for swapping right and I think that that's fine but I feel like it doesn't lead necessarily to the best user experience and even though maybe it is in some ways that the blame is shared that the tokens could be named in a way that's a bit more logical or grouped in a way that's a bit more logical there is also an opportunity I think some of the unit swap side to group these in a way that makes a lot more sense to the end user and so I think trying not to off put the responsibility of UI ux work just to because we're living in a composable ecosystem is I think an important Point here um well let me see um oops I think it skipped the slide there we go um I think the the other point that I'll make is that when we think about composability too um one thing that we see often happen in such open kind of transparent ecosystems is a lot of commoditization of UI um and this is less a like larger point or a tactical point but something I would just want everyone to kind of ask themselves which is maybe it's not such a good thing that every Dex and lending protocol and governance form Etc all kind of shares the exact same UI and maybe there's an interesting opportunity here to rethink things from a first principles basis and come up with interface and interactions that are really unique to what we're building um and kind of capture the nuances of our individual customers and so in summary I think when we think about designing for composability things to keep in mind are just not assuming that the UI of other protocols is the responsibility of theirs alone and that because if your users touch them you should design with them in mind as well and the second thing is not letting openness be coming out to not think about design from a first principle standpoint um cool I think the last point we'll talk about here is from a principal standpoint is just designing for your end user so a lot of design in web3 at least a lot of bad design I think can be attributed to sort of Designing for the wrong end user if that makes sense um instead I think what we want to think about more deeply is how to create designs from a first principles basis and understand who your unique users are and what do they want and need um so kind of related to that last point that we were making there and so the first kind of sub point to this principle I think is just a design for your user's level of understanding every product is really different I think it's important to optimize design to ensure that it's understandable and effective for your user base specifically right and I think every protocol every company has a very different shape and size of user base um I think a good example of two protocols that I can do a good job with design um or two companies that do a good job with design but in a very different way given their user base is blur and OBC right so if we look at openc on the right hand side it's um obviously more of a place to kind of browse a lot of nfts maybe it's for more casual collectors that are looking to look at collections it's a bit more visual as a result and I think this is effective design for their end customer and I think on the blur side right it's a little bit more Trader focused and so I feel like their design and their product design decisions have led them to be something that's a little bit more gritted a little bit more structured a little bit more data heavy um and I think this kind of Divergence is a good thing right we should think about who our end users are and not just kind of create protocols that look like everyone else in our space but ones that are actually more tailored and specific to who our end user designing for us so challenge those I guess initial assumptions I think this concept also extends Beyond just like visual design but also to copy as well I think very often we see copy that's created without really thinking too much about the end user and it leaks the kind of these jarring um off-putting moments uh so one example here is on the left hand side we have some copy from Abby uh this was interesting I was coming across this as I was putting together this presentation actually but I don't hold any die in my wallet and it gave me this little error at the bottom that just told me my ethereum wallet was empty and I thought I had gotten packed for a second or someone had drained my wallet and it was a really scary moment for me and I think that this feels like an example where copy could have been more considerate of who the end user is the situation they're in when they're reading it and how to design it in a way that's a bit more encompassing I think on the right hand side a little less literal around the copy itself but ether scan I think is also an example of a place where there's a lot of you know wallet addresses contract addresses and I think it ends up creating a very text Heavy design experience um and I would argue that even for you know the most native on-chain crypto users uh it's very hard to look at this and just immediately be like oh yeah that's the usdt contract address right and so I think there's an opportunity to instead turn the alarm text screens into something that's a bit more human readable or into inner thesis that are a bit more usable um I think the second kind of sub Point around designing for your users is uh kind of a Counterpoint to a complaint that we often hear which is um when we're working with companies or protocols that are designing for pro users let's say like Pro Traders or people that are a lot more crypto native um it's often used as an excuse to make things overly complex but I think I would like to just push back against that a little bit um just because someone is interacting with things on chain every day doesn't mean that they can't appreciate good seamless design right and that it doesn't have a big impact on your product at the end of the day um this is something that I created um on on Twitter a long time ago but just as a simple example um this is a little bit out of date because uh I think they've updated their UI since then but this is for synapse which was a bridge back then and then um essentially what I felt like was synapse was probably targeted a little bit more at people that were doing stuff on chain already not necessarily users that were net new to crypto but I think the way they displayed a lot of information the hierarchy the coloring ended up making things more complex and stealing more sophisticated than they needed to be and so I think just wanted to kind of look at on the right hand side the same example of like a UI that could work just as well for pro Traders or people that are have to have a lot of activity on chain it has all the same information but especially around the slippage around the fees um done so in a way that is just a little bit more digestible and Visually clean and simple and so I think in summary when we think about designing for our users the important things to really consider here are a designing for their level of understanding both from like a UI and a copy standpoint um and be not ignoring kind of first principles design principles even if you're designing for a more sophisticated or seasoned user base I will pause here uh and maybe we can go into some questions but hopefully that was helpful just in terms of a high level understanding of how we think about the intersection of product design and web 3. awesome thank you so much Jeffrey that was very very helpful one question I saw was from Frankie and Steph around tips for balancing building delightful moments or focusing on speed um Frankie and stuff do you want to unmute and come ask that question thanks so much um yeah I I think like the moments are something that we talk about a lot as a team but it always kind of comes down to the question of like should we just get this out today instead of spending a couple more days you know adding fun delightful animations or what whatever you need to see so I just would love to know like how you think about it and kind of how you make decisions around that yeah it's a good question obviously I think like to your point in an Ideal World we could just add a lot of those kind of really complex nice front-end moments everywhere throughout the app um I think the way that I think about it if it ends up becoming a prioritization question which naturally is probably the case for most startups um is think about where those where in the app or slow do those delightful moments have the highest impact for your end user right so um maybe it's like a really high touch screen by traffic or maybe it's let's say there's a part in your flow where users get really nervous or things feel really confusing maybe in moments like that adding some more calming and easing the animation starts to contribute a lot more Equity to the business or maybe there's a big milestone that a user accomplishes in your app right investing in I think those psychological Peaks where we feel like we would get a lot more business and brand value from having delightful moments there is probably a good way to prioritize instead of just being like let's linearly run through and add animation to every single screen because I agree that you know that does end up slowing you down so your whole app doesn't have to be kind of quote unquote delightful to the to the extreme in every sense I think think of it more like almost like a symphony right where are those moments where we really Peak where where are the moments in our app and flow where having that Delight actually creates outsized Impact versus being just somewhere that is a bit more standard thank you great let's go to Thomas next Thomas do you want to unmute and ask your question okay just curiously what like signals are like are you looking at her like what would you um advocate for like bifurcating the flow based on your user segments even if they're um you know doing the same end action right so you can use the example of like Pro Traders versus retail Traders um and so I guess when you're thinking about building a new product right you kind of have this um this uh the spectrum of users how knowledgeable they are but their intents are how do you essentially find what are those distinctions across that spectrum of saying okay well one flow even though we're inventory users like I should actually have two flows or maybe you know Advanced and Pro Trader float and Retail tree of those and even not maybe you should have three like explorers I guess yeah um like what they get a point what signals are you looking at inside Drive business decisions yeah that's a it's a really good question I think it's a it's a really hard one to have like a objective answer to if that makes sense that is kind of like a one-size-fits-all answer because in many ways it's very specific to every company their user base the behavior that they're seeing um this is going to be a little bit of a knock answer but hopefully a helpful one to think about like I think in some ways it should be kind of obvious from talking to your users and just spending more time with them over time at least that's what we find which is like um sometimes one standard flow is totally fine right and it's a trade-off decision because having if you if you have like a product that has both Pro Traders and Retail users on it um maybe that consistency is is a really good thing um but I think sometimes when you're talking to users if you find that like hey we have a clearly defined ICP segment that's just constantly getting tripped up and they make up a substantial you know portion of our user base where we're not really willing to just cut them out of the user experience then maybe it starts to make sense to bifurcate right and I think the other thing to note too is this decision can also change over time right as education of your user base evolves is maybe your user base itself evolves as well right like I think a little bit even about like how coinbase had coinbase and coinbase pro that's completely separate experiences and then they kind of ended up merging them back in together over time I think that those were both individually the right decisions at those moments in time if that makes sense probably given how you were seeing their new based change in people use the product so um a little bit of a non-hancer I'm happy to try to shed light on like other angles or ways of thinking about it but I think in some ways it just comes down to who your users are how much they care how much of a percentage of your user base do they make and that kind of naturally leads to sort of a first principle's answer on how much should we prioritize the effort to build out a separate flow for them yeah that's all thank you the other thing I'll add sorry just one other thing to tack on there too is like um sometimes you can get away with having one flow and it doesn't the answer the solution doesn't have to be too completely separate flow so I think a lot about even that matcha example with the decks and the wallet connects flow like I think that's a flow that works equally well for pro users as well as new ones um just in terms of giving some education on the side and giving new users an out to kind of kick into a whole separate path but allowing co-users to kind of connect in the more standard traditional way cool thank you awesome let's go to Nick next my question is about balancing uh customization with consistency so we're building a very very customizable interoperable product um and I guess similar to like a doom dashboard things can live anywhere which makes it very hard on any particular one of those pages for a user to know especially from like a systematic design perspective where the buttons are going to be or the points of interest you have any heuristics or like rules that we could use to sort of design some layout of a very customizable space that would you know make sense for users and have some level of consistency yeah it's a good question sorry just to make sure I'm understanding this correctly too so the main problem that we're trying to figure out is because kind of like doing the dashboards and the pages are very customizable so they could reorder kind of put things where they want um the question is almost how do we create consistency in a world where there's not much customization or let me know that is 100 that's what I'm asking yes yeah um I think maybe some general things to think about if it's helpful one is uh even in Worlds where modules are quite customizable and and interoperable like you could switch the order of things where things kind of live um it becomes increasingly more important for them to share a base design language then in that case if that makes sense um because then visually things will kind of compose in a way where it doesn't really matter the end custom order the user chooses we have a design system that's flexibly not where everything can kind of live harmoniously the other thing to think about here is uh kind of just generally visual hierarchy right so even in a page where users are customizing things they're probably not customizing the entire page right so they're still way finding little moments from like a type hierarchy perspective things that we can do to structure the information uh even though the order itself is more customizable um but yeah I know it's probably more high level advice happy to dive into more specifics if you want to chat later too about ways to kind of make it work for you guys cool thanks the next question that we had was from Kristoff so yeah hi so you said people over and size figma that iPhone actually useful for two things one it actually just allows me to actually uh just visualize the whole thing and how the whole just user flow goes and two if I try to explain people how the whole product yes it's hard to explain and it's hard to actually get feedback from people people only get feedback when they actually see something really that they can actually touch and feel and then yeah my questions like how much answers should yeah uh should we do on figma because iPhone and uh yeah just personally very useful to actually try to get feedback and actually get my thoughts on the whole uh just flow of users it's a great question um I I think maybe to clarify a little bit too um I I love figma I spent half my life in figma um but I think that what what the the larger point that I wanted to kind of emphasize there was not necessarily like don't use figma as a great design so everyone should design in figma if it makes sense for their systems it's a great tool um and people should use stigma to prototype and gather feedback that's awesome I think maybe the the more subtle point that I was trying to kind of Express and and is it's often tempting to design for things to be amazing on figma but forget that there's a lot of opportunity for software to personalize even beyond what you might be able to show in a figma artboard right so that example of like the metamask networks was more around like it's easy to get into pattern of optimizing for the best figma screen um but I think what is important to not forget while designing in figma is that there is opportunity for personalization and for software to add a layer of complexity and dimension beyond what you could express in just an artboard um and keep that in mind as we build things out okay that's a good uh common like I just found an it's useful like okay just users need this and I actually need to make the software to to actually match the figma experience yeah pigma is a great prototype user feedback tool so I would definitely like take advantage of that as much as possible so agreed on agreed on that point for sure awesome okay now let's go to Dan I wrote Jeffrey that um and we talk about or at least you know we talk about like ux being such an issue all the time and visual design and crypto like I think that's a hurdle that keeps a lot of normies or and newbies out of the space um so I'm just curious if you're willing for you to call out like specific apps or projects that you think have actually nailed this I mean there's certainly something across like the D5 defy land is at least that a lot of the best known names have have a visual style that we all recognize and they have all got their cute little animal logo you know but um any that you think like go deeper with design and they've gotten it right for these guys to look to as a model yeah that's a good question um it's always interesting when I get asked like what are specific thing like companies or protocols that have done an amazing job with design um because there's so many but I think it just depends a little bit on what their user internal business goals and needs are so it's hard to say like what has been kind of the most effective um I definitely think like some of the recent players have been spending a lot of time thinking about ux in a way that really shows like I feel like family is a nice example of that from like a wallet perspective of just rethinking how we can make this a more like seamless delightful experience um the other thing that I'll kind of see which is a little bit tangential to this is um often I know the focus of today's talk was more on UI ux but often when it comes to things feeling too technical or too daunting or too alienating in crypto it's actually a brand problem too so it's the fact that we're leaning too heavily into motifs like dark mode or 8-bit when we're really going after retail Traders or something right or like we're branding in a way that feels almost inherently unwelcoming or unfriendly um or maybe it's the opposite right maybe Brandon's brand kind of goes both ways so you can also look too friendly if you're trying to be really serious and institutional and infrastructural right and so I think oftentimes it's actually more due to kind of memetic effects we see in brand of just like every crypto project wanting to look like the previous coolest crypto project before them where I was trying to think about what kind of brand work makes the most sense for them and that's actually where a lot of the alienating effect comes from in our opinion versus like more tactical UI ux stuff sometimes so I think two two kind of angles there if possible thank you looks like we've got another question from Natalie in the chat the general question is how do you think about UI ux in natural language tooling around web3 I mean I think it's a pretty unexplored area right now and so we're just thinking a little bit about symbol which launched yesterday which has some of this and um just with what you see with even Shopify and ways that you can effectively use natural language to enhance an existing UI um just curious if you guys have thought about that at all it's a great question I don't have any like particularly formed thoughts or Theses around this but I I think it's cool right I feel like natural language models and and like llms are undoubtedly a very powerful piece of technology I think a lot of web 2 products have already started to adopt them and integrate in ways that are pretty seamless um I don't know from like a UI ux standpoint I I guess it feels like it could introduce a lot of like more seamless integrating moments like I feel like where I think AI is sometimes used in ways that don't feel like they benefit UI ux too much is like this is the same product that we had before and now we have a chat bot right like that feels like a um like sort of a overly simplistic way to just drop the eye into your product and I feel like from a uix standpoint I would think about like what can AI magically do for users and integrate into workflows that they're already doing in your product and so almost being less about like coming in the form of a chatbot but like even if the underlying technology powering it is a language model helping it actually like take actions or integrate or Surface information in smart and clever ways to your end user at the right point in time in the slow instead of just dropping an intercom like chat on the product um so yeah yeah I don't have too many thoughts but um I think it's exciting for sure I'm excited to see what what kind of happens yeah what's been most interesting to me is the the ways that products are effectively creating their own Integrations that can make a product more usable in complex spaces so I think Shopify is a really good example of this where you know if it works as they say right you can actually edit your website or like a webflow integration would be great if you could be like change this um but anyway just that's where I'm coming from so thanks yeah it'll be cool to see all of it play out um for sure okay it looks like we have time for one to do more questions I know Kristoff you had another question yeah so we have actually made different uh just usable Sonos so how should we all just optimize on that should we just uh uh take one and work on that or should we take like a common value just a cost user personas and try to like yeah because we have like six six different views of persona so like how should we make the choice about optimizing for uh yes Civic user persona I think user personas are are really helpful as like a tool um in terms of like how to use it to make better choices um it or simplifying even the set of user personas um again I think it's going to depend a little bit on what you're building and the specifics there right for some companies maybe it just makes sense to be hyper focused on one Persona and and build for that use case for others maybe having a wider range makes sense um in terms of like how to simplify that set if you guys have like a bunch like six user personas for example um yeah I think you're on the right track I would say like it's like I would just try to think about what psychographically they have in common right you might have six very demographically different personas or you know things that are slightly different about how the like how you might Define them um but undoubtedly there probably is some shared pain point that they have which is why you're using the product and so especially in the early days I think just honing in and really doubling down on that pain point and solving that um is probably a universal enough solution for for all the personas um but yeah I guess hard to say specifically the Tactical thing to do without knowing more about what you guys are building but in general if you feel like you're struggling with too many personas um I would just not let them become like too rigid or structure too much around your decision making in the early days and just try to focus on the commonalities and build around that okay awesome thanks let's do one final question this one is from Bethany Bethany if you want to ask the final question of the day one question that I have is given the peer-to-peer nature of collaboration and the open source mindset in web3 how would you recommend that brand a courage community-led design element to either like the core or sort of like you know sidecar modular components of their product without sort of diluting that brand image too much yeah this is a this is a a very a very difficult question um I don't think anyone's really cracked it yet but like um I I think it's one where um there's a few things that I've thought about and I think would be helpful one example is like a while back we worked with Olympus and we redid the brand work and a new website with all the 3D stuff for them that you see today and one thing that we found that really helped was having a pretty strong set of guidelines around um design work that we do when you're working with like like a dow or anyone that has like a lot of contributors that are coming from all places um is agree upon a very strict centralized set of rules so that anything that gets created can be objectively measured against that centralized set of rules and whether it's on brand or not right I think it's really difficult if there's not guidance around hey here's what our typography system is and here's what our color system is and from a UI perspective here's the main core components we use um if a contributor then kind of brings something that feels off-brand or maybe from a design or UI perspective doesn't feel like it aligns for for a certain part of the protocol right it's difficult because then it turns into a subjective discussion right and it's hard everyone has different opinions is this color better than this color is this UI component good to use versus not so I think it all comes down for us to maybe just building better centralized rules and guidelines which again can be updated and created in a decentralized way but to have that source of Truth maintained somewhere um to basically kind of evaluate and give feedback and ship product in a more decentralized manner is pretty helpful it's really the same thing that happens in a company as even more standard web 2 companies get large the theme effect happens right is they start to look more like decentralized orgs if there's not good centralized um kind of decision making around Frameworks and and how to measure brand and things like that right you start to see fractaling happen and people create things that look off brand and a lot of Cycles spent on like revisions and things of that nature so yeah I don't have a better answer for maybe like how to better like incentivize thousand ways that like you know create work that feels on brand often in a more consistent way but I think for those that are actively contributing it feels like just having good centralized rule sets around guidelines around Brandon UI is is kind of a really helpful thing well Jeffrey and everyone else who's here thank you so much again for coming in um this was a super great presentation I definitely learned a lot so hopefully others on the called it as well um and thank you to the fellows for for asking questions thank you Allie and the whole variant team for putting this together and thanks everyone for coming this was a lot of fun foreign 
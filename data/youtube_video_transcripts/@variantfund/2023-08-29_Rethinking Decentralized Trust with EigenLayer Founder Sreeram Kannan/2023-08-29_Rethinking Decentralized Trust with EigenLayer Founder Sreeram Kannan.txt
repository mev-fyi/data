foreign [Music] I'm super excited about your talk so without further Ado I think it'd be great if you like briefly introduced yourself and then we can go into your talk awesome thank you so much team for uh putting this together uh it's great to be here and talk at the variance Honda Fellowship uh I'm SRI Ram founder of a project called eigenlayer um here eigenlayer is a mechanism to uh for a universal Marketplace for decentralized trust I'll explain what that is in the talk but my interest in blockchains uh goes over the last six years I've been uh professor at the University of Washington Seattle working on blockchain Research consensus scalability Game Theory and my interest in peer-to-peer system States even far back in 2000 from 2006 when I was doing my Master's in PhD in peer-to-peer while assistants uh Delight to be here thanks to maida for uh making this happen yeah of course I'm excited okay let's let's start with your talk and then I'll come back at the end when we do the Q a awesome so uh this is a short talk uh I to kind of introduce uh some of you who may not be that familiar with eigenlayer uh eigen layer is a universal Marketplace for decent Life Trust and uh I'll explain what it is but before we get into it uh I think uh if you asked what is a blockchain solution versus what is not a blockchain solution or what is the crypto solution and what is not a crypto solution you'd find that the dividing line between what is the crypto solution and what's not a crypto solution is decentralized trust something has an element of decent less trust you'd likely call it a blockchain or a crypto solution if it doesn't then you wouldn't call it uh crypto or blockchain solution so decentralized trust is the raw ingredient which makes up pretty much all of the space that we call crypto or blockchains and uh what we're aspiring to build is a universal Marketplace for decent plus Trust um what do we mean by that uh to start with I want to kind of dial back and say that it's not a new idea the idea that you want to create and sell decentralized trust is not a new idea and ethereum was really the first Marketplace for decent Life Trust um why do I say this you if you just zoom back to pre pre-etherium if you had something like Bitcoin then um anytime you need to create a new idea you need to create a new application which doesn't fit into the Bitcoin Square you have to go build your own trust Network and what ethereum did is by uh building the stack where you have the ethereum trust Network at the base originally started the tour work now migrated to proof of stake but there's a consensus protocol on top and then on top of which there is a general purpose programming language the ethereum virtual machine what that did is enable a whole host of different decentralized applications to be built on top of it and you can think of the trust as flowing from the trust Network through the consensus protocol to the virtual machine to the applications another way of thinking about it is it's it's separated who brings Trust so the trust flow is from the ethereum trust Network to the consensus protocol to the virtual machine and the people who create these applications themselves don't need to be trusted in fact if you think about blockchains as enabling a pseudonymous economy this was the key like step function to enable that because now as a Creator you don't need to be trusted if you want to create unit swap or any of these applications on top you're not yourself don't need to be trusted you are riding on the trust that's created by this massive ethereum trust Network and so this is a separation or modularization of who brings Innovation and who brings trust another way of thinking about it is by creating a Marketplace for decentralized trust essentially ethereum sells the decentralized trust by selling block space block space is just a crystallized refined version of the raw ingredient that is decent less for us decent life stress is taken from the ethereum across Network distilled through the consensus protocol the virtual machine a particular gas limits set on top which is whatever 15 million average gas per block and then you get something called block space that's what is being sold to these applications now the applications are basically sharing a portion of their value because decent place trust is such a useful thing for them to consume so that's the uh first Marketplace for decentralized trust ethereum and I think what this did is to enable a massive amount of innovation at the dapped layer and many many people coming and reading these new and interesting services on top of common decentralized trusts so however what we are finding or what we found over the the first three to five years of ethereum is that the marketplace was not flexible enough what do I mean by that um for whatever reason you know whatever you build things on top of the application layer the amount of block space that ethereum kind of sells is fixed so what if you wanted to increase block space what if you wanted to reduce the time to finality what if you wanted to deploy a new virtual machine there is a problem you cannot just borrow trust from the ethereum trust Network it's not flexible enough the marketplace is not selling the raw material the marketplace is selling a finished product a refined product which is block space rather than selling the raw raw material which is decent Life Trust okay so what this did is as soon as basically like if you look at the chart of like daps as soon as crypto kitties came up in 2017 which is which was basically an nft project and the uh it demanded so much of block space the people realized okay it is possible that ethereum block space is not going to be enough for all these apps that need to be built and you saw a whole bunch of like new layer ones which innovated at various different things right the consensus layer the virtual machine all kinds of different ways and okay what we want to do is you know my own journey is as an academic we came up with a bunch of new consensus protocols scaling virtual machines all these kinds of different uh or game theory for uh coordinating all these different things but if any new innovation needed if it's deeper than the DAP layer needed its own new like trust Network and we found this to be an insurmountable challenge that every time you have a new idea you need to go find your own new cross Network so that's why we've built eigen layer eigen in German for your own it's your own layer you can build whatever you want on top of it we call it also the restaking collective the principle is very simple you go to ethereum when you speak in ethereum so the root of trust of ethereum after the merge is taking in staking you put down a bunch of eat and then promise that you're going to not violate a covenant of how you make blocks in ethereum and you restrict that on eigen layer what it means is you're basically saying that I'm setting the withdrawal you when you make an additional promise on the eigen layer system eigen layer is a system of smart contracts on ethereum and then you're basically promising that you're not only going to be good at making ethereum blocks but also good at whatever new things you're promising to do whether that is you know a validating for an oracle or data availability or any other services in the ecosystem so when you're building a new service essentially You're Building two things an off-chain container that uh the ethereum stakers can now download and run this additional service this container can be written in pretty much open semantics you can write this in C C plus plus whatever language that you like and we have some initial specification as to what kind of like apis and rpcs it should have for enabling things like monitoring on the other side you also want to enable um the services to build a smart contract on ethereum and this smart contracts talks to the eigen lab smart contracts and performs some core control functionality which is how do you register to a new service how does the new service pay you as a sticker and what is the negative incentive or slashing condition all of these are programmed into that contract so the simple control functions are programmed in the contract but the actual execution is offloaded into this container which which you can uh then download and run so this enables basically like anybody to come up with arbitrary new distributed systems that can then be deployed on top of this common trust Network so if you want to create your own chain if you want to create your own Oracle if you want to create your own data available if you want to create any new service you can reuse this Paradigm to actually go and do it um you know the vision is basically once you have something like this the marketplace is very generic essentially you can think of eigenlayer as a generic Marketplace for decent less trust because you can come into eigen layer and say I only want these kinds of stakers I want these kinds of participants and as taker can say I can only want to serve these kind of services which pay me this much which pay me in this token which so it is a very very flexible Marketplace for reasonable device trust so that's the core uh Paradigm so and any system can now leverage Economic Security and decentralization from ethereum you don't need to go and build a new trust Network for every new idea that you have and you can start doing all kinds of interesting things with it uh you know we ourselves building eigen da data availability layer on top of eigen layer but you can build Mev management you can build uh you know settlement layer in on ethereum settlement finality takes 12 minutes you may have an idea for how to get finality in one second and you have a super fast protocol for it and then you can actually go build it we're renaming these all eigen X just to show that they're depending on angular but actually these are third-party protocols that anybody can come up and well Mev management I didn't talk about but the core idea is you know you have a freedom as a block proposer and ethereum to like make blocks whichever way you want and uh you can constrain the degree of Freedom yourself for example you can make a promise that I only include uh you know I I'm going to include your encrypted transaction in my blog and if I don't include it I might get slashed so you can start making all kinds of interesting additional promises on top of eigenair which modulates the properties of uh ethereum cells and you know uh I briefly touched upon decentralized sequencing which is uh the idea that as a roll-up for example you want to have a common sequencing layer because you want to have censorship resistance and uh you can borrow decentralization and slashing properties from ethereum and actually build decentralized sequencing on eigen layer you can build Bridges you know moving data in and out of ethereum as well as moving data across uh Roll-Ups inside ethereum uh you know through restaking so these are just some starting uh points we have like some teams already working on some of these different aspects uh the publicly announced ones for example in for decent less sequencing we have espresso uh which is building um a decent like sequencer on top of iron um okay so just briefly I want to mention about ba um we are building eigen da which is a highly scalable data availability layer for Roll-Ups Roll-Ups usually have to publish either the inputs or outputs of the computation that they do on a common layer so that anybody else can double check what they're doing can continue the operations even if that those the role of nodes go down so you want to have a common layer on which data is published and um we're building a data availability system called eigenda which is based on donk sharding which is the ethereum roadmap but already built um that you can run up to 10 megabytes per second of throughput ethereum today is only at 80 kilobytes per second and the reason we're able to do so much better is it's built on the idea of data availability sampling or data availability scaling um and you know you normally have ai throughput you also have very low latency the fundamental cost basis of the data availability system is very low instead of having every node need to download and store the data you actually have every node store only like a very small chunk which is cryptographically Erasure coded and um and then it is also highly customizable so that's that's a brief overview of what we're building with eigenlayer and eigen da and right now um we are on mainnet where we have risk taking over the next you know three quarters we will have not only restaking right now you can only do risk taking and over the next quarter we are onboarding operators so that like Risk Takers can delegate to operators and then after that you know in between Q4 and q1 of next year we'll have a Services Mainland where we can actually people can deploy in your services using some of the formats that I talked about so that's a cute quick overview of what we're doing if you're interested in any of this of course you're welcome to build onto our eigen layer or eigen da if you're interested in coming and joining us uh in in any uh any of the capacities please also feel free to bring us thanks so much Iran okay now we can head into the Fireside part of this so I obviously have a bunch of questions to ask you but again feel free to ask questions fellows um I'll just ask you to unmute when you post just like last time so I guess first I'd love to go back a bit and talk a little bit more about your background so you mentioned your research at University of Washington a bit I'm curious like how did that research eventually lead you to found eigenlayer yeah uh part of it is what I mentioned briefly which is that we were building new consensus protocols and originally uh you know this is around 2017 2018 when I got started you know we were working on how do you scale Bitcoin so that was one of the kind of fundamental questions we were working on and uh you know in that era you know some of you may be new here in that era there was this thing that you know people were calling Prof coins like professors creating new projects and Associated tokens and it took me a little bit of time to realize that Prof coin was a derogatory term and that uh um but you know looking at it actually um you know we ourselves when we came up with new consensus protocols the first natural reaction as an of an academic is to say hey is does anybody want to use this you know it's open source ideas open source projects like anybody wants to we went to scaling Bitcoin and gave a DOT there it took us some time to understand that okay this is pretty much an ossified system it's not going to upgrade to do anything uh remarkably different then we talked to ethereum and then we realized oh this is a very slow moving system for a good reason you know uh it's it has so much of value on it and you know all these principles about things like client diversity which makes sure that not only one client is built to a specification but there are six or ten clients with those specifications very amazing amount of coordination so they're not also going to just randomly change their protocol even if they find something else is a little bit better so this led me to down this path where the question became hey it seems like there's a lot of infrastructure ideas and the only thing I could see people doing was basically starting new albums whenever there's a new idea and that seemed very counter to me to be the right way to do things because each of these new albums would have something really awesome but a lot of other things not very good because it's very difficult to build everything in you know in one platform you know part of modern civilization and specialization and why would it be that like I would just have to build an L1 which is better in you know in community it is better in the token value state it is better in you know ux it is better in Middle as it's just insane to think that that would happen so I you know that became kind of led me into the direction earlier we were like okay you know there's no way we would have to just go start an L1 and thankfully we didn't do that because that that has led me down this direction uh but that that was the natural it was like okay you know if you can't see your idea adopted anywhere and the only way is to go build your own L1 maybe that's what you have to do and we were uh dabbling with that idea for a bit before we realized all these problems that I laid out and thankfully we didn't go down that route and by Quest instead became how to leverage existing cross networks to do more so that we can actually have you know if you look at 1995 internet and you look at uh how you built a web application you got to build your own server rack you'd have to build your own identity infrastructure you would build your own payment and try you have to build your own like DB infra and then you order to build your application at on top of it but in 2023 that's not how you would build a web application and you'd say go to AWS for your like Cloud you would use uh oauth for your authorization stripe for your payments for your database and then just build something on top so that's the same thing we want to replicate here is okay you have ethereum it already has decent Life Trust can you just like stack on these like sas-like layers on top so that anybody who wants to build a web application can then or a crypto application given just like concatenate these together so that's that's where we kind of landed into this uh this vision and we didn't start you know we called this eigenator at the beginning but we didn't have the idea of actually restricting no it was the original white paper was called eigen layer unleashing the Sasa of blockchains we had this Vision that we want to solve this problem we don't have a solution to it and then we can over time landed up with mistaking it being a solution to that problem yeah that's super interesting I think I want to touch back on the restaking but what you said about like the modular stack really interested to me maybe because like I feel like with the conversation around like cap specific Roll-Ups and all of that a lot of what you said really resonates like people don't want to reinvent the wheel they want to like reuse infrastructure and you can do that through like the modular stack so I guess I'm curious like how do you envision eigenlayer fitting into the modular stack thesis and specifically when it comes to these app specific Roll-Ups um and for context like I know that you mentioned eigen Dia a bit but I'm just curious like in general how you're thinking about this I think when people are talking about is modular versus like you know integrated vertically integrated blockchains I think uh people massively underestimate even people who are on the modular side massively underestimate what modular means to give you a sense here like if you look at a typical web application uh there was a study that says it integrates roughly like 15 SAS services so and the total amount of SAS companies that exist and how many of them are unicorns and even bigger you know it's insane like the last 15 20 years of VC shows that a lot of the growth comes from SAS and the reason is SAS is you're choosing one narrow thing that some team is going to execute on and then just go and kill it on that particular Dimension it's a much better calibrated bed to make than something vertical where like you're going to be the next you know of Facebook or something which is very difficult to predict so static like because it's horizontal and you're just solving One Core problem and it's very easy to figure out who's best suited to solve one chord problem and in some sense like the Arc of civilization itself bends towards specialization right so but to answer your question on how we think about the modular economy I think therefore things like SAS are very important in the blockchain era but each SAS service having its own trust model is not something we think is well suited each module right now the way the modular blockchains work is each module has its own security model and if you have like 15 SAS Services Each of which have its own security model you're depending on the worst of all of them because anyone breaks you break your application so what we have figured out I think with eigen layer is common trust modular Innovation trust is the thing that needs to be common if all of these modules rely on a common trust phase and then on top of which people can come up and innovate with Innovative modules that just leverage this common trust and we think this exactly mimics what happens at the AWS layer even though AWS is not very security critical even then there is a lot of different Small Things how do you make sure your upgrades are safe who's keeping the software upgrades you know in intact and all of these things and you know people felt initially when Cloud started there was a question of like which company will be foolish enough to offload their computational operations to Amazon or Google cloud and it's the same thing that people are asking today which is why would I not have my own like trust Network and do everything and I think history has proven again and again that this is where we are going to head is our vision is if you Remains the trust layer we just make it more programmable on top of which people are going to come up and build new SAS light Solutions which are modules and we massively underestimate the number of modules that exist there'll be thousands of modules it's not like data availability consensus and settlement there is a trusted execution environment there are secular multi-party computation there is you know decentralized AI services that is decentralized authentication there's going to be a whole bunch of modules that show up and some of them become very very important to to the crypto economy right I guess on that note like what are you most excited to build on eigenlayer like I know you guys are starting with like eigen da you have like an Mev thing in the works as well but I'm curious like what you want to see the community build I mean the the cold scope of permissionless innovation is that people will what we least expect and I have a first example like that and this is basically a decentralized location Oracle you know one of the problems we see with uh with decentralization decentralization is not objectively measurable right and ethereum protocol doesn't have an incentive for decentralization so and we we call ourselves the marketplace for decentralized trust so imagine you know in 200 years back when you're establishing first Commodities market for potatoes right one of the things you have to do is when you're creating a new commodity Market you have to figure out how to grade the commodity like oh potatoes that are golden potatoes that are like this size and grown in this area and so on you need like ways to quantify and measure aspects of the commodity and if we are saying decent Life Trust is a new commodity how do we measure decentralization itself and you know of course that itself has to be decent like the mechanism by which decentralization is measured itself as we recently otherwise you have a centralized locals to measure decentralization and that doesn't work and so we have a first project you know Spanish Princeton called witness chain building uh an oracle which measures decentralization it's a very interesting concept by using the networking layer by sending pings across and figuring out how to triangulate nodes on their locations this is an example another example that I'm kind of super excited about is AI you know one of the problems that whenever I go into chat GPD and type something I'm double guessing whether anybody is reading this and that's not a good place to be in and uh I don't even have something as simple as a session privacy which is when I open a new session I should be completely Anonymous you know I'm paying the chat gpe subscription so which means like I'm authenticated every time and you know I don't even have session privacy so if you wanted to have like something like fashion privacy on on an AI service if you could have it run on the ethereum trust network with hundreds of different nodes actually being your service providers then every time you open a pseudonymous connection to a new node and just pay fees using some kind of a you know zero knowledge token that's something I'm as a starting point for like decentralizing AI inference something I'm quite excited about and we have uh some initial Partners starting to work on that but that's what I meant when I said the scope of what we think of modules is very very narrow in Boston today like oh who's going to be data availability or who's going to be that's barely scratching the uh tip of the aspect that makes a lot of sense like you can imagine like eigen lyric uh versions of everything like from the graph to like any of these like MPC Solutions like anything related to Identity Etc that's that's super exciting I think nikhil had a really interesting question around how like new projects can use these middlewares within the marketplace so maybe nikhil do you wanna um unmute and ask your question hey Sharon nice to nice to meet you thanks for thanks for this um yeah I was wondering kind of like to make that concrete right so if let's say you're a protocol or project team and you're like okay great so a validator validators have obviously like basically downloaded whatever they need in which they're then restart staking through eigenlayer into ethereum and then have this Marketplace as my understanding so on the project the project side that's building something do they then have to like also basically download some type of client so that way validators in this Marketplace can then go choose or how is that kind of process work exactly yeah Journey thanks nikhil uh the core idea is as a so we call these avs's actively validated Services as the AVS developer what you do is you are basically creating two things you're creating this container which is which might be node software that you have to download and run as uh uh as a service uh provider uh or as a node operator and you also are shipping this smart contract which basically kind of uh talks to the eigen layer contracts and enables people to register into your system uh get payments and get slashing so that's the three things that goes into your AVS contract so as far as this off chain container is concerned you know as a ABS Creator you're just shipping it and node operators will be downloading and running it but of course as a developer you want to test it so you would probably run your own like test node to to actually run your containers in a distributed system and verify that it's doing what you what it is supposed to be doing um so the the journey so if you're asking what is the the customer Journey for an ABS you're just figuring these things out very very early in the project so right now what is happening is we have put out what we call the middleware or AVS specifications which specifies what standard to which an ABS should be built particularly like is there a monitoring interface are there some rpcs that need to be built into the uh program but beyond that actually having uh an SDK or something that you can start with and then go and build on Top This is actively under development inside the project and soon will have a lot more tooling to come and build these new kinds of services but you can imagine that the only new thing happening here is the node software relative to whatever else you may be doing the node software needs to know the ethereum or eigen layer State that's the new thing so you need an inbox to talk to the eigen layer eigen layer slash ethereum we need a node box to communicate some information back to ethereum and ion lab so those are the two like services that either will abstract or have an SDK for but other than that it's all the other things oh how do I arrive at consensus how do I arrive at like an oracle input like all of these things are the complex node node things that you can already start building and then once these two Integrations are ready you can just opt into that great thanks Nico great question so one thing that you had said before this question was um just around how Distributing trust can be a bad thing because I totally agree with you you know you're only as strong as your weakest link however there's also some very clear trade-offs around using ethereum as the only trust layer so there's been a lot of conversations happening recently on crypto Twitter online about what implications restaking has on the security of ethereum as a whole notably sparked from a post that vitalik had made recently and you had a great answer to that so I'm curious like can you speak to what you think are good things to build on a staking platform restarting platforms and maybe not so good things I think the the spirit two which Alex uh statement which I think is actually very good is roughly um the following so italics basically saying don't overload ethereum consensus or ethereum social consensus which we read into it and the core point B you know if you go screw up something with risk taking or a layer to or even you know for that matter just an application or a dab on ethereum don't expect ethereum to Fork because of that and I think this was just if you go back to the Dao uh Dao hack which was one of the early hacks in in the ethereum history where 15 of each was locked into a contract and the contract got hacked there was a lot of pressure to Fork ethereum around the hack to retrieve the money and you know ethereum took a conscious policy there asked her to say that there is no further forking for applications like mistakes and now that there are new deeper things coming up like layer twos and uh risk taking it is necessary to say this so that there is no excessive risk taking I think the analogy I like to give is like which we like a lot in the crypto space to talk about is how Banks take excess risk and then offload or socialize that risk into the government right basically government payloads as a solution to that problem that's basically the same thing that might happen if uh I go around saying or anybody else though goes around saying hey you know you build on all of this if something bad happens we are so big we're too big to fail so ethereum will Fork around us and you know vitalik doesn't want it and I don't want it either and I'm glad that he's saying it because I don't want somebody else to come and say it either because it's a modularity principle about like what needs to be dealt with at what layer the ethereum staking layer is responsible for the basic thing which is uh speaking and making sure that the consensus layer has no safety or liveness Falls and that's all that needs to be handled at that layer everything else needs to be handled at in its own layer that's why we take extra care to make sure that there is a internal social consensus layer on top of eigen layer for example we call the slashing veto and so on but what are good things to be built things that are objectively attributable you can slash for on eigen layer you can impose negative penalties if you're imposing a negative penalty and if it's clearly objectively attributable and provable on chain I think nothing like it it's clear there's no like confusion on on that uh for subjectively attributable things you can still use eigen layer but don't do slashing for very very limited slashing so that's I would say the boundary the other boundary which I we have self-imposed is not to use eigenlayer for basically Financial parameters eigenet is a decent less trust Marketplace and we think of like if you think of the landscape of how you know people are pro fees in in crypto like that is D5 which is you put your money into like a you know uniswap or some other compound or something where you're fundamentally underwriting some kind of a price risk that's why you're gaining some returns whereas the eigen layer is a validation Marketplace you are getting returns for putting your sweat and blood into actually making something work and you're getting paid for it and this is fundamentally a different category of rewards because it you will not lose your money as long as your the contract is objective and you know what you're doing you will never lose money but that's not the case for if you go and put your money into a you know Financial platform there are exogenous factors outside your control how much price volatility exists between Ethan USD you know you can only guess there's no way for you to say that I'm taking zero risk whereas in validation you can take zero risk and still make rewards so we want to preserve that property on Ireland I think this makes me think like just how an AI there's like an Ethics board we need something like this almost for like restaking as a whole which I think is really fascinating um also Doug on do you think you can unmute and ask your question he has a great question around just like how eigenlayer compares to other shared security models in other networks hello sir nice to meet you again and yeah uh like all lunch has subnet subnet technology which enables uh blockchains to uh like have some personal validator set like Cosmos have interchange security and pull code has pair chains I know that they are different but like do you think that they have some synergies or similarities with eigenair and like I know that you cannot build like jet GPT on a top of subnet but still I want to test this question too yeah I I think um uh let me start with Cosmos uh and maybe I'll I'll just explain the history in my own view uh if you look at how ethereum and Cosmos uh started it even started on one extreme which is shot security but Innovation only at the app layer you cannot go on innovate and change anything deeper than that and Cosmos started with no Shad security but full Innovation like you can innovate on anything you can just you have the SDK you're free to change anything that you want right so that's that's where the two things have started and I think they're both converged more or less in my opinion so ethereum with layer tools made Innovation deeper than the uh the application layer by saying oh now you can have roll ups which offload computation so that's like oh I can do new virtual machines and other things that prove against ethereum virtual machine so expanding the scope of innovation but keeping shot security and on the other side Cosmos basically said oh actually we are realizing chat security is the missing element why don't we start interchange security which went live three months back uh or two months back which basically said oh now I can once one chain can share security to another okay so that's that's the uh uh the thing and I think I'm gonna basically perfect this convergence because now with eigen layer you you rest take and then you can basically build anything on top of it so you have full open Innovation with potentially fully shared security it is not given that you will get full chat security because people have to opt in but potentially with full child security people as as it becomes important useful people often perfectly uh so the difference with the cosmos ICS model is ICS is one chain to another chain like one chain uh has to do a governance upgrade to opt-in to another chain to supply security which anytime I hear governance upgrade it gives me like a little bit of a heartburn like dealing with governance problems in blockchain is one of the kind of biggest issues it's political it's difficult it's complicated the only reason we decided we we could go ahead and build eigen layer is it doesn't need any upgrade from ethereum just you just build it um the um other other things that you've mentioned here you know after we developed eigen layer some of the ideas have percolated into Cosmos into what is now called mesh security sunny and others are building uh building this Paradigm which which you also like polka dot had started with actually predates layer tools in the amount of open Innovation that you can give it allows you to only do things like virtual machines which can be proved against the awesome base layer and um Avalanche I would say is the closest in spirit to the amount of opt-in Freedom eigenlayer has you can basically have nodes opt in and like sticker you know services opt-in but Avalanche the original blockchain itself is not designed based on slashing and crypto economics as a type principle and so that of course also reflects itself into the way subnets are designed and orchestrated and we think with ethereum empowering itself to actually be as generic as possible using eigen layer uh the just relative advantages of these systems just based on oh you have open freedom to customize ABCD that differentiation is gone now you can do all of that on ethereum uh so that that's how we think about it and when you have shared security what you want is you want chat security from the largest source of economic value and and you know uh token which is used for uh monetary activities and I think that's that's where ethereum kind of stands a special place free questions around things so that's all the time we have today thanks so much you're on this was incredible and we have a bunch of other unanswered questions so I'm definitely going to send them to you async and maybe we can get them answered but this is wonderful thank you so much thank you Mira on the way into for putting this together great to connect with all of you variant fellows and looking forward to interact in other ways [Applause] 
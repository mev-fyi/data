[Music] thank you [Music] okay can everyone hear me all right okay uh great so I'll be talking about espresso and the role of a decentralized sequencing layer for Roll-Ups and I am Ben Fish I'm a I'm the CEO and co-founder at espresso systems and uh I'm also an assistant professor at Yale so first of all and one way to think about what roll-ups are able to provide for the ecosystem is horizontal scaling and so we can think of this as every application That Couldn't exist on a layer 1 blockchain can actually run its own roll-up you can also have applications that support other applications on top of them like VMS or ZK EVMS being run by companies like cksync or optimism or starkware Etc but we can think of this as as essentially a way of sharding computation across applications so that the layer 1 nodes only need to verify these lightweight do this lightweight verification of either fraud or ZK proofs but the actual execution of transactions for a given application is done by the application itself okay and it's a slightly different way of thinking about the role of approver you can just think of the approvers being associated with the application the approvers of optimism are associated with with with optimism which really is an application that represents a VM that hosts other applications the other key thing about why Roll-Ups actually help scale blockchains is they leverage heterogeneity right Roll-Ups wouldn't help as much if all nodes in the system were of equal uh computational Power they're leveraging the fact that they're actually especially in the case of ZK Roll-Ups increasing even the work of some nodes the powerful nodes that are doing computation and producing the proofs while making it easier for the weakest nodes of the system to verify the results so the layer 1 nodes can be it can be very weak we don't get bottlenecked on the weak nodes whereas at the application layer the nodes that are actually executing transactions for a given application can be very powerful and we don't need to have as many of them they don't need to be as decentralized in fact the problem is that today because roll up servers are playing such a monolithic role they end up controlling too much so the application layer is not just executing transactions but it centralizes the entire process of deciding which transactions to include and in what order and this loses the whole uh set of properties that blockchains were achieving in the first place by virtue of their decentralization so it can lead to censorship lack of neutrality it can feed to a monopolistic pricing um on uh by the by by the servers that are carrying out this entire centralized process essentially uh the way that Roll-Ups look today with centralized uh servers that are doing both the proving and the entire process of deciding which transactions to include uh the L1 is just now auditing the Integrity of what are essentially web 2 applications so we've removed the major role of the decentralized layer one to decide um and manage the process of uh which transactions get included in what order and they're now just verifying and following along what each of these web 2 applications are doing and that's so that's not a good situation to be in so the solution is to separate ordering from execution and uh the simplest way to think about this is that the the the architecture that would save us from the situation is if users would submit transactions directly to a decentralized L1 the L1 would only order and make uh available the transaction data it wouldn't actually do any of the um it would not execute right um and then the application layer would just read from the layer one and every application specific server would uh would execute the transactions for that given application and prove the result and the state update to to the layer one so this has also been called based rollup which is a relatively new term but in in many ways this is sort of the purest of ideas for Roll-Ups where the layer one is still doing most of the job it's just that the roll-up is only doing the execution the users are submitting transactions directly to a consensus Network that in a decentralized way is ordering them and making them available roll up servers just read from this do the computation and produced an update now there could be a reason to separate out this transaction ordering and availability layer into what we might call a layer one and a half which would sit between the layer 1 nodes and the application layer servers that are executing transactions and what might be some reasons to do that well first of all protocol modularity and it just as protocol modularity for data availability makes sense right the the protocol that we designed to optimize for ordering and availability of data may not need to be the same that is running the L1 and handling the smart contracts and the bridges and and verifying the proofs I'll talk about protocol modularity on the next slide too when we can and in light of uh of things like eigenlayer we may not even need to think about this separate layer as a separate physical layer it may just need to be a separate logical layer and second is there's an opportunity to make different design trade-offs from the L1 uh so for example we could design this ordering and availability layer to have higher throughput and lower latency but sacrifice on things like Dynamic availability which in the case of ethereum is one of the main properties that ethereum's consensus protocol achieves at the sacrifice of other properties so as I mentioned we can think of this layer one and a half that's doing transaction ordering and availability as not necessarily even a separate physical layer it could be run through services like eigenlayer that that that that enable this by the same set of physical nodes that are running the layer one or at least you could subsidize the the participation of uh the the physical nodes that are running the layer one but logically it is separate and it could be a separate protocol that operates differently from the layer one's main consensus protocol a second problem of uh the layer two because of the roll-up ecosystem uh which has which which has less to do with the the lack of decentralization and uh more to do with the um sort of a fundamental trade-off that happens when you Shard computation um is that the liquidity or interoperability becomes fragmented too so applications on different Roll-Ups are now isolated from each other uh whereas when they were all running on ethereum they were not isolated from each other and this makes various things like atomicity flash loans Etc very very complex to Impossible so bridging becomes complex certain forms of interoperability are now lost um liquidity is fragmented so we can ask to what degree does sharing a sequencing layer and when I say sequencing since this is an overloaded term that some other people in the industry may use differently but when we talk about sequencing is just the layer that is in charge of determining and finalizing the ordering and availability of data does sharing that layer help with interoperability right so I will discuss three advantages of doing so the first has to do with partially simplifying cross-roll of Bridging anatomicity the second has to do with mitigating systemic security risks of bridges for the role of ecosystem overall and the third has to do with cross-roll of building so let's talk first about partial simplification so in general Bridges require two Atomic legs you have an asset that is locked on some roll-up a and then a representative would be minted on some roll of B so let's consider scenario one where role of a and Roll appear utilizing differencing different sequencing layers okay in other words different consensus protocols for finalizing their transactions in that case in order to implement a bridge roll a b would need to verify both the inclusion of the lock on roll of a and also its validity and verifying inclusion means that role of B needs you will need to implement in roll-up B in the bridge contract enroll a b some way of verifying the consensus of roll up a in scenario two with a shared sequencing layer part of this goes away right so now roll up B only needs to verify the validity uh it needs to verify the validity and that could be not by executing it the transactions itself but more likely by verifying a proof from roll-up a whether it's whether if it's an optimistic roll-up it would be receiving it and waiting for the um the challenge period and then possibly verifying a fraud proof um but if not then it would be if if it's a ZK roll up then it could be verifying the ZK will proof directly uh that still needs to happen but it no longer needs to implement anything to verify the consensus of roll up a because they're sharing a consensus and uh essentially the lock and Min transactions are are just in the same transaction bundle that was processed by this common shared sequencing layer so the second thing I want to talk about are security risks of bridging uh in general we can ask how can what actually goes wrong when consensus Protocols are compromised right how can an attacker profit by attacking a consensus protocol and reversing the finality of transactions of course that's an inconvenience overall but is there a way an attacker can profit which this thus gives it an incentive to attack the protocol often the way in which attackers profit is through some form of taking advantage of a bridge that exists um so Bridges offer the clearest example of profitable attacks an attacker can lock an asset on chain a and then mint on chain B reverse the finality of the lock on chain a and now it has doubled its Holdings uh the the common example of you could send an asset to incentives exchange withdraw Fiat and then reverse descend is actually an example of a bridge it's a bridge between a blockchain and an external system which is part of the centralized world but it's still an external system right sending money to Amazon to purchase a good and then reversing the transaction on the blockchain is another example of taking advantage of a bridge because it's a bridge between Amazon's the system and the blockchain if everything stays within the blockchain it's harder to uh to profit from reversing the finality so uh of course there are always going to be opportunities for profiting by reversing finality but if you have many many Roll-Ups that all have Bridges between each other then it massively increases the profit opportunities for the uh for for for the attackers of consensus protocols that are controlling the uh transaction orderings in these different Roll-Ups and when Roll-Ups share an ordering finally layer the attacker cannot profit in this way reversing the lock on one side of a bridge will also reverse the mint on the other and finally uh I want to talk about the advantages of cross uh to cross-roll a building so when Roll-Ups use different sequencing layers then a builder who's trying to build blocks simultaneously for multiple Roll-Ups faces complications high risk and generally slim chances of of success for example it would be difficult for a robe to make some kind of economic commitment to its user that it would get slashed if it doesn't includes both legs of some kind of Arbitrage transaction because it's always possible that one of those uh one of the blocks that it proposes gets accepted and the other one does not because it's dealing with two different consensus protocols now with a shared sequencing layer because the consensus simultaneously proposes and finalizes without executing but proposes and finalizes a super block for all the rollups running on it and through proposer Builder separation a leader in consensus May accept from a builder simultaneous blocks for one or more roll-ups and therefore a cross-roller builder can guarantee any user desired atomicity from flash loans to Arbitrage and it can post bonds that you know which which would get slashed if it violated its promise of some form of atomicity to the user and shared sequencing enables an honest Builder to be certain that if it behaves correctly it won't get slashed so finally I want to conclude with some open questions and challenges of shared roll-up sequencing one challenge that arises is around Revenue sharing so how is revenue shared among Roll-Ups that share the same sequencing layer it's very straightforward for basic fees uh all the fees that our users are paying on transactions destined for a particular roll-up can be attributed to that role it's very easy to attribute what the marginal contribution of a roll-up is to the profit generated from basic fees and in fact the fees can even just be directly encoded and paid directly in each roll up itself it doesn't even need to go necessarily through the sequencing layer and the Roll-Ups can pay a commission to the sequencing layer there's many different ways that that could be handled that's not a hard problem the much harder problem is figuring out how Mev gets shared this may be less of a concern for Roll-Ups that wants to mitigate Mev and I'm going to talk about Mev mitigation on the next slide but setting that aside let's say that Roll-Ups do want to profit in some way from Mev or get a share of the profit from Mev well the marginal contribution of each roll up to Mev is not transparent in fact Mev there is no real public deterministic function that you can just run on a given ordering to determine what the Mev is rather Mev is typically based on private information available to various actors in the system and is only discovered by running auctions and figuring out what different actors will bid it's very hard to you might think we could simulate the auction with each roll up independently but it's very hard to simulate an auction truthfully if it's not being run for real so this is a hard problem and uh I and leaving it as an open question that needs to be solved the second open question that I think is very important and interesting is whether shared sequencing layers can be any mechanism independent so there are many different approaches to addressing Mev from uh and it can be a matter of philosophy right from optimizing it and democratizing access to Mev to preventing it entirely whether you believe that's possible or not so there are many examples of approaches from auctions to first come first serve ordering protocols threshold encryption protocols time delayed permutations Etc some involved various assumptions such as honest majority assumptions so the question here is whether a sequencing layer that is shared by multiple Roll-Ups can be agnostic to the med mechanism favored by each Roloff uh it could be quite simple I think for threshold encryption because the rollup could introduce its own separate threshold encryption set and all the inputs that come to the shared sequencing layer are threshold encrypted but it may get more complicated when we start considering other types of Mev mitigation approaches so I leave it as an open question whether shared sequencing layers can truly be mechanism agnostic in any case this these are all problems that we are working on in espresso systems espresso is developing a shared sequencing layer for the rollup ecosystem specifically focusing on ethereum today so thank you very much that concludes my talk thank you [Music] 
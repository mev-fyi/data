foreign [Music] GM GM how is everyone doing I know last night have been plenty of events of and parties so thank you for joining me so early in the morning today's presentation will be on the role of developer relations in shaping developer tooling before we start I have two questions for you the first one is who wants more Developers for your project please raise your hand all right now who wants more applications built on top of your project raise your hands again okay so you all agree with me the reason why I'm asking these questions is because they are related to the flywheel effect let me explain it to you I'm sure those of you that studied telecommunications are familiar with melkap's law what malkov's law says is that within a network the more connected users you have the more valuable that Network becomes this is not only applicable for telecommunications networks where it originated but also this is very applicable for blockchains so if you think about the blockchain you have the blockchain the platform and then on top of that platform you have different applications built now the more applications we have built on top of your blockchain the more valuable your blockchain becomes now a few words about myself my name is Bianca Busa I'm head of developer relations at Luxo Luxo is an L1 for Creative economies I'm also the founder of devrel uni at devrel Uni we teach people how to start in developer relations now I think he I know what you're thinking what you're asking yourselves yes that is a birthday hat indeed today is my birthday so I'm super happy to be here today and thank you so I'm super happy to be here today with you and talk about developer relations a topic I'm really passionate about now back to that flywheel effect I was uh talking earlier I think it would help here to come with this comparison between web 2 and web free so in web 2 we have different marketplaces Google Play is such of a Marketplace and the success of Google Play depends basically on all the applications and developers that are building on top of Google Play so if you think about it the third-party developers are expanding the product offering of Google Play The fewer their success now in a similar fashion we have different blockchain platforms and those also depend on third-party developers to come and build applications and those third-party developers expand the product offering the reach and the volume now I think by now we agree that we need developers we also need that those developers build applications but you're gonna ask me okay how do we get these developers what do what do we need to do how do we nourish this developer community and my answer to that is through developer relations I'm sure if I'm starting to ask now around the room what's your definition for developer relations each of us will come up with a slightly different version however how I like to explain developer relations Is by looking at the intersection of marketing product and engineer so let me explain to you from a marketing point of view you need awareness people need to know about your product now from a product point of view you need to be talking about the existing developers and take their feedback and once you take their feedback you need to integrate that feedback back into your roadmap now the third one the engineering part it's important that you understand the technicalities of your product and not only that after you understand that you need to be able to communicate that into a simple language for the wider audience now devrel is a channel why I'm saying it's a channel because I see it as a two-way communication those of you working in developer relations know that if you are to be successful in developer relations it's all about ensuring that developers in your community are successful so going back to the channel on one way we have external Outreach you need to spread the news you need that people are aware about your product on the other way when you're closing the loop you need internal advocacy so when you're spreading the news and talking to different developers out there it's important that you learn about their pain points you learn about the what they would like to see in the future in your product roadmap and it's important that you represent them you be their voice now back to the title about this representation we'll be talking about developer Tooling in the context of developer relations so what are some developer tooling that you can find out there you can find sdks you can find apis debuggers libraries Ides you name it my point with this and how they are similar is through their adoption factors so whenever you're building a tool for your developer Community you need to consider and to put yourself in the shoes of the developer so from a compatibility point of view think about how the tool you're building is compatible with this Tech stack that developers are using to give you an example here so if you're on team Viper and similar to vitalik you like you prefer Viper and not solidity probably you're gonna end up using brownie if you prefer solidity probably you're gonna end up using hard hat similarly you need to think about education you need to make sure that there are enough education resources available for your developer community also it's important that you ensure that there is a way for people to ask questions and to get answers to those questions next there is adoption it's one funny way with developers they like using tools that other developers are using now I know this might sound sound a bit like a chicken and egg problem especially if you're building out a new tool but there are ways around it next there is developer experience you need to ensure a smooth developer experience and this is especially relevant when it comes to onboarding when you're taking developers from zero to one with your tool this onboarding experience needs to be as smooth as possible because if you're losing them here then you're losing them forever and last but not least you need to think about advantages so again put yourself in the shoes of the developer does your tool make their life easier does it save them time what are the advantages that your tool is offering to these people now a few words about the importance of developer tooling this is a survey from jetbrains from 2022 as you can see developer likes working with tools they like collaborating with tools and using those the most widely spread tools are around collaboration and also here maybe a very important note when you're designing your tools always focus on the business problems so don't try to to solve a take problem but a business problem now I want to talk a bit about the pillars of devrel the first one is awareness so people need to discover your product awareness is also called developer evangelist or developer marketing you might see that I put in codes developer marketing that's because developers don't like to be marketed too instead what you should be doing you need to inspire the developers you need to basically present them what's the art of possible when it comes to your tool and your product and this awareness happens through a set of Outreach activities so you're informing people about your product your use cases and your roadmap to give you an example what we're doing right now we're giving a talk at the presentation at HCC this is a form of awareness next there is education people need to learn how to use your product and this is essential for adoption that's because developers like to try before they commit so you need to ensure for them a comprehensive set of learning resources start with documentation this has to be top knock and then add other things such as guides you can even have a course around your Tech or if you want to go the extra mile in the later phases you can even build an accelerator now the third pillar is feedback this is also called developer success as I was mentioned earlier you need to collect feedback from existing users learn about their pain points learn about any improvements that they think you might do for the dogs or any desirable features that they want and then once you have that feedback go back to the core team and advocate for them now to exemplify this I want to talk a bit about Luxo so with Luxo the most essential part and the most interesting one is universal profiles Universal profiles are basically your identity on chain however to build these Universal profiles you need to interact and build with various building blocks called LSPs now the feedback from the community was that the community wanted a streamlined way to build with those LSPs based on that feedback the team developed two libraries lspfactory.js and erc725.js with those two factories developers have the tools to basically focused on the product and don't worry about the heavy lifting so to to be more specific about this now to set up a universal profiles the Builder can do this with one line of code instead of doing six manual transactions quite powerful right now finally I want to talk a bit about community I consider this to be the backbone of developer relations so you need to build a developer Community around your product or service you need to help those people solve problems you need to celebrate with them their successes and also give recognition and help them accelerate their Journeys so when it comes to how you can nourish your developer communities I have for you free action points to take away from this presentation the first one is prioritize Developers always think about their needs and take that into consideration with your product roadmap second one is nurturing your developer Community think about dogs think about the developer experience and give them a great set of tools to interact with your product and last but not least give the community the chance to get involved and celebrate their success that's it from my side if you are interested about developer relations feel free to scan the QR code it's a link tree with all my socials and I wish you a great rest of HCC [Applause] any questions or something we still have some questions I have a question regarding how do you sorry how do you at work um decide that your work was done good sorry could you repeat again please yeah how how do how you can decide that your work was done good so any metrics can you recommend you work with was done good was done that your success succeeds oh like success metrics how do you decide that you are successful again it's all about taking feedback from the community and basically iterating on that feedback so you get the initial feedback you see what are the pain points and then you work on that and you go again to the community and you ask them how is now how is the process and in an iterative fashion uh you're building upon that and of course you can have like internal metrics where you track for example uh the adoption of a different tools how many people are onboarding your ecosystem these are the internal part any other questions okay thank you [Music] 
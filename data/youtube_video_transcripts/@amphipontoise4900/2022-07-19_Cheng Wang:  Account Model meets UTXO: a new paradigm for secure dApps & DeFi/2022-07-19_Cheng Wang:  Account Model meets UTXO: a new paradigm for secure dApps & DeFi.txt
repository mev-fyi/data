okay great um hi everyone sorry for the delay today i'm gonna talk something about security from a different angle normally you don't see probably such topics it's going to be a bit technical but please feel free to ask late for questions topic is about the count mode of meets utxo model we [Music] we as engineer we're probably very familiar with these two models in the blockchain world but today i'm gonna do how to leverage both to forbid security um first a bit about myself i'm the founder and core developer of rfu review is a new sharded blockchain combining account modern utex model the shutting museum is operational in production uh many launched since last year and is working uh really well in in production and my background is in 2015 i proposed the first leading time um i think respecting consensus algorithm and i researched about number three and the consensus algorithm in the universities so my background seems to be very relevant to to blockchain now let's get back to the topic uh security security is one of the most interesting topic for right now for all all of the applications on blockchain especially for d5 we have seen almost like big big hikes almost every month it has it has been like uh like people have tried to kind of solve this uh problem for a long time but still right now uh solidity auditing is time consuming and uh expensive even though that's we kind of recommend every project to do to do auditing but you see on the list the rights on the right like a lot of projects is not audited yeah the effort people have tried to improve the situation there are a lot of such kind of efforts the first the first very natural movement is to improve the tool chain and to recommend basic practice for all the apps but this comes with some cost the first thing is the learning curve is really getting much much deeper especially right now a lot of projects they use assembly language to optimize the gas gas fee it's getting chicken chicken and it's very hard to scale the development of of the apps because yeah you need to learn a lot to write a secure the app there are some approaches more more solo approaches to improve the situation like introducing new transaction model new virtual machine new contract languages i i'm sure that you have seen a lot of these trials in the past this approach is sounds like more uh kind of try to solve the rule cause of the issue but it comes with a cost as well like bootstrapping is hard you need to educate people about the new new infrastructure new stack [Music] but for the for longer is great because if you see the evolution of programming language we start with assembly we start with c but after uh you know 30 years probably we have lost yeah and it took many years to to make russ the mature enough for production i i think it's going to be the same for uh blockchain we're going to see base transaction model better vm and bet languages especially i want to mention in this in this huge category there's one thing i really think is very promising is to leverage the utex model for security reasons first a bit recall of account mode and the utex amount account model is basically if you see the blockchain as a like huge state machine the transactions actually have direct access to the states they the transaction can modify the state of the for example the oracle modify the state of uni swap contracts to to uh to store the information of the price of the pair and you take someone is completely different model is you you can you can see somehow like the the pure function in programming language each each function each transaction is a function that consumes input and generates output and there is no side effect which means uh usually base security in this case side effects is usually very hard to deal with so like this is no perfect perfect model in in the world here is a short list of the comparison of boss models so account model is the biggest advantages as we have seen from the the evm echo season is that it's very friendly for developers because it's very close to how we write codes in general it's expressive and flexible you can build very very powerful applications on top of it it has a small change in exercise but the problem is uh the state is very mutable you know right mutability is is a big issue a very challenging issue in general for programming um especially uh for crypto uh even if one like one of the uh operation doesn't mute the states it's not really tasty or it's not really [Music] like taken care of it can be really a problem by default the security is lower and another issue is account mode is hard to execute in parallel but on the other hand you take some has some advantages the utxo like bitcoin although all of the output they are owned directly by the users it's more kind of decentralized can if if you compare to account model is basically your token is controlled by the contracts for example the erc20 token all of the the states are in the contract so you also by default have this security advantage and another thing is the model is very kind of explicit about the input and output of the transaction this enables a lot of room for verification for example you can check directly the input and output balance of the of the utex utxo transaction without executing it and you can double check it you can check it in execution you can check it [Music] just for the transaction and it enables uh basic parallelism and basically scalability this is because it's immutable but this this song is about security so i'm not going to define that topic but utso has some other issues like the most well known is the concurrency issue of you take some other probably you guys have heard about it a lot about [Music] this issue about utxo model another issue is like you need to learn a new programming model it's it's a bit like if you programming with c or or even rust and then and now you kind of need to learn husker a little bit so that's a huge paradigm shift it's a bit tricky so to simply speaking account model is really convenient for com for computation it's uh very close to the model we uh we use every day and the utx model is good for securing digital assets um as we have seen on bitcoin there's a there's no on-chain attack on this model so our view as a new blockchain we try to combine the strengths of both models try to improve the by default security of the the blockchain how do we do it it's actually the idea is it's simple is we basically decompose the account model into two parts uh the first part is acid the second part is contract states right now for example if you see the erc20 token implementation like both the assets and the contract states they are based on the storage of the evm we we when we went a step further we tried to uh use utexl model to model the assets or the just or other token in the blockchain so token is first class citizen in our protocol uh you don't need to introduce any extra like standards for it and it's utxo basically means users have full control of the of all of the outputs even though if the contract is exploited you still own the token because it's lucky by by your wallet and because we combine both together we don't have the concurrency issues that uh that happen to other utex model blockchain and also still deaf friendly we try we focus we submit a lot of effort to focus on the dev experience on our blockchain now um let's dive a bit more deeper into the execution of the virtual machine this is usually the most tricky part we built uh for you know to execute this new transaction model we build a brand new virtual machine with a lot of security considerations first why a new virtual machine not evm i think that there are two important reasons the first thing is we are really a new model is it's a bit hard to you know just modify evm and use it for for for for all the apps the second reason is we we totally believe that a new virtual machine can provide much more like security security benefits our virtual machine is a stack-based virtual machine like gm and wasn't for safety rugby and performance because it's based on utx model so execution is follows the input output paradigm this grades greatly mitigate the risk of unsafe external costs why it is like this if you if you are a little bit familiar with the attacks on defy usually you see like attacks they kind of use the composibility crazy right they wrap a lot of a lot of operations from contract costs in one single transaction but usually for for normal users you don't you never see this normal users is always like do some simple operations so here actually the the transaction model or execution model gives a lot of advantages for the attackers but with this input and output paradigm is basically the room the advantage for attacks is much lesser and uh basically we try to make the attacks on the like normal users they are kind of uh stand at the same time uh and because of input output paradigm flash loan is not available by design and this is a very controversial design you know fashion is not totally bad it has some good use cases as well but at the same time is used for almost all the other attacks uh on chair attacks so in our case it's not available this is going to mitigate a lot of the attacks probably this could encourage a lot of more like white hikers instead of people use flashlight to you know just to attack the protocol and we introduced a built-in asset permission system for contract cores so you you you all i guess you are familiar with yancey when talking that's you can kind of approve tokens but it's not really user friendly because you need to kind of have one transaction do that in advance and then uh and usually for the sake of user experience you just you just approve unlimited amount of uh token for for for the applications and that is a kind of um very dangerous in some cases but in our case we have more uh we have a built-in access permission system for it it's more fine-grained we also have a lot of typical improvements like type checking overflow and overall checking stuff so by default you have all all of these security guarantees you don't need to kind of import libraries for it it's going to kind of make it make the def experience much much more much nicer lastly it's very important thing is we don't have low level support for map data structure with sub contracts instead this is some vertical details i'm not going to dub divinity but i want to mention here is uh here with this because uh my data structure is usually usually used to store a lot of personalized data for example for um for the erc 20 token you have the balance of all of the the holders or the owners of the token if the contract is can be compromised it might have direct access to the to the balances right they can modify they can steal the coins in some cases but in our case is it is not possible by default so that's the overview of like the design we have a lot of security considerations and next a great topic i want to to talk about is my next travel value on on our protocol this has been like very hot topic in the past past year or since the defined boom there is no ideal solution for it but it's it's very different uh on other fields this mev search space is very different from evm so first the transaction model is based on input and output so the execution is more fine ground as i explained earlier this means the same is attack on chain oracle manipulation is not possible in a single transaction uh as you all know like in eastern as long as you have enough gas you can do almost everything on uvm this is how typically like attacks [Music] try to attack a protocol and because of this uh fingering transaction execution model the arbitrator usually requires multiple transactions it means in the past you do it in one transaction to attack the protocol but here you need to do multiple transactions and this means you might compete with others for example if you need two transactions to finish your attack you prepare the first one and submit the first one and then for the second one the other attacks or mba researchers they made seats they were they would like to con to compete with you so this makes the attacks like a bit more risky and and is good the third thing is flashlight is not available so it means mbub is going to be tricky here yeah makes basically like kind of make the the searches kind of don't have enough advantage over the normal users and we also introduce random execution into the virtual machine so it means the uh people submit the transactions based on the gas fee if your gas fee is higher your transaction will be including the block with high priority but uh there's no guarantee that your transaction will be executed before others the execution is uh uh the auction is based on gas fee but the execution is not is one is a pseudo-random of course the miners they have the the the power to manipulate it um but for normal like people uh attacks it's going to be tricky yeah we don't solve it as we all know mbv is a tricky question you cannot really solve its own chain as far as i know unless you try to put a lot of very heavy primitives into the protocol um yeah so so far we have been talking about very low level details now let's go to a bit high level and to see how developers can leverage this new protocol new platform to write secure contracts about efforts we we propose a new domain dsl language for for this purpose why we introduce a new language because first as as i mentioned that the model and the virtual machine is different it's hard to to use the existing ones and we also want to make the language make sure the language to be as simple as possible and people don't need to learn a lot of things or actually for the apps a lot of features of a language is not really useful yeah so yeah well the language try to head the low-level vm details and try to enforce good practice by default yeah but this is just trivial stuff and also we have the built-in syntax for access permission this is very unique to us so on the right side of the slides we have the a simple smart contractor for dex [Music] it's very very simple but it has something very unique here you can you can see the rotation and this part is the the is our iso permission system so here it is uh how do we kind of integrate asset permission system into the language or if you on this first cell of the table you can use annotations to specify if your if your function will use success or not or what kind of houses you're going to use and on the second cell is uh about uh is a user that tries to invoke the function with pre-defender uh with with with isis with tokens so the virtual machine will check if it's allowed a lot if it's not then it will just exit we also have some functions for this so in the last cell i want to mention that because of this i said permission system the reagency is not possible for it's not possible by default if you want to re-en re-enter the same contract in the same transaction it's not allowed by default so here uh here's a like a very well-known thing like uh security issues or at least for solidity uh by security borrower it's a bit outdated but it's the best i can find so first re-engineer as i said that this is solved by our sap uh permission system the the input output paradigm it solved very nicely with other new new new features the second one uncheck it external call this we terminate on exception and this yeah the rest is basically solved directly with the virtual machine given the time limits i'm not going to dive into the details but you can you can take picture if you want so here's the summary of the security we propose a new paradigm that combines an icon model and the utex model the new paradigm creates a lot more room for verification for defense and the by default security is much higher and especially by default the default asset security is much higher because everything is in every token is in utex so and we have some improvements on the account model as well on side note i want to mention that our virtual machine is really very efficient lightweight here's an example of a wormhole bridge contract on our virtual our virtual machine is like 1 kilobytes and on evm is 10 kilobytes and our own sonar is one megabyte and this this is a great for virtual machine execution and it's also used a lot of a lot less computation the less io so even if we just use this new virtual machine it's going to do to improve the scalability by a lot uh yeah so that's basically the the the main part of the talk uh about security and last i wanted to talk a little bit about our project we started in 2017 we want to build a new charity blockchain based on a new algorithm called block flow it was founded before the d5 bomb we did not expect this model to be a really a great model for for better security on gm but after several years research we we found that actually our new model and new version machine actually improves a lot of things scalability security decentralization etc yeah we are right now focusing on improving the protocol so if you are interested in uh in the work and especially if you are developers please feel free to check out our github uh try yeah try to look at the codes and try to read some of the articles on our blog i'm pretty sure that cpr engineer going to be very interesting in it thank you [Applause] thank you chang for for this great presentation uh we have time for one or two questions yeah um i have a question like in the classic utxo model uh you have an issue where like on each transaction you have to put all your assets in the transaction so as you have more assets your your transaction is like uses more and more energy like is it like uh does this paradigm solve it or do you have tell me here the class yeah like if you have i don't know like a thousand nfts like do you need to like put them in all the inputs every time or yeah so here is we have some constraints on the number of inputs so it's a design that you try to be uh it's a tradeoff here if you want to support a lot of inputs in one transaction or if you don't want to support it we want to be more conservative on this so we have a limit on the number of inputs i think is around the 128 but you can you can do things in parallel in utx model you if you want to distribute like a 10k more than 10k utxo you just prepare the transaction pair and submit to the network in parallel so the latency is not [Music] it's not an issue and you still get the high throughputs yeah okay that's it thank you thanks so i think i think we're done thanks uh thanks again watching [Applause] 
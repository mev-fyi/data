[Music] foreign [Music] so first we'll cover what hyper Bridges actually are and then we'll look at this different ecosystem architectures that are possible using copper chains so the first one is proof aggregation the second one is layer freeze so fractal scaling when you put layers on top of other layers and then we'll cover layer degradation this is actually a combination of simple proof aggregation and layer freeze and has the benefits of both and then we'll look at a simple add-on which is allows instantaneous messaging between different hyper chains but in a trusted manner so this last solution will not be trustless so but let's first cover hyper Bridges so scaling has always been a problem with blockchains Bitcoin just around 70ps ethereum that's 12 Visa does 2000 and if we truly want to bring crypto to the whole world we'll need to do hundreds of thousands maybe millions of TPS and the only way to achieve this is horizontal scalability horizontal scalability means that you should be able to spin up new chains to serve new traffic and connect with other existing chains in the ecosystem similarly to how you can spin up new servers to serve new traffic to your websites now both Cosmos and polka dot have been attempts at horizontal scalability But ultimately they do not scale as their bridging Solutions are not trustless and it is very hard to do to build actually trustless Bridges but using ZK Roll-Ups this is possible to using ZK roll-ups just as big as our possible because ZK will obvious verify execution using cryptography the bridges are governed alongside the chains so there's no possibility of an external Bridge hack the governance mechanism of the chain takes care of it and ultimately the chains cannot hard Fork if the proof is settled on layer 1 then the chain is the then the state of the chain is settled and other chains can now use that state to verify the transactions that they receive from that other chain and this is where hyper bridges come in so hyper Bridges allow value transfer and messaging between different hyper chain in this ecosystem so how does hyper bridging work there will be a layer one shared bridge and two hyper chains which do the messaging the transaction is initiated on the sending chain if you are sending assets to another chain then these assets are burned then the sending chains proof settles down to L1 here a root of all messages is updated this route corresponds to all the transactions sent in the ecosystem so updating this route is not expensive after this the destination hyper chain can import this message route via its consensus mechanism and a relayer will have to relay the transaction from the sending chain to the destination chain this rear layer will also relay a miracle proof connecting the transaction to the message route and this miracle proof verify is verified on the destination chain once the transaction is verified it can be executed in our case this means that uh the asset is minted on the destination chain and in this way the asset is passed from the destination from the ascending chain to the destination chain without going through L1 and finally the destination change settled it settles its proved down to L1 and settles its imported message route and this is when this imported message route is verified so that's hyper bridging and using hyper bridging it is possible to connect this ecosystem of hyper chains and horizontal scalability is finally achieved anybody will be able to spin up their hyperbridge using the ZK stack join this ecosystem and trustlessly message with other hyper chains in the ecosystem and messaging will be cheap as it does not go through L1 but it is ultimately verified by it so that's those are the basics now let's get into the bit more complicated part about different ecosystem architectures so vitalik wrote a great post about this what kind of layer freeze makes sense and from it I quote there's clearly an important role to be played by layers of some kind clearly an important function of proof aggregation that needs to be filled somehow I suspect more sophisticated and simpler construction such as those described in this post they'll start to have a bigger role to play as a layer 2 scale and ecosystem matures so he mentions three things layers layers are great because you can settle on a higher layer quickly and cheaply and this allows fast messaging proof aggregation proof aggregation allows scale because multiple proofs can be aggregated and settled in a single proof on layer 1 or Layer Two and also more sophisticated constructions are also possible but before we look into these constructions I'll just warn that for all constructions sovereignty is preserved for example for if you launch your layer 3 it will always be possible to quit the layer 2 that you're settling on and become your own independent player too so we think that this is particularly important for the community for hyper chains for each Community to have its preserve its sovereignty and of course the proofers and everything is open source so each hyper chain will be able to prove and settle to our one independently so the first construction is proof aggregation proof fabrication is each hyper chain creates its proofs independently and these proofs are aggregated into a single proof and settled on L1 together this is great because this is truly scalable any number of hyper chain proofs can be aggregated but the downside of this is that it doesn't allow fast messaging to save costs this common proof will be settled on L1 maybe every 30 minutes to an hour this is different in different ecosystems and messaging is only possible after the proof is settled so until the proof is settled in that 30 minute time frame it will not be possible to import the message route on the destination chain so and this is where layering and layer freeze come in layer freeze do allow fast messaging because you can settle your layer Freeze Proof on the layer two and this is the same higher publishing process that we saw before but it's on a layer two now and this makes fast messaging possible this also uses a proof aggregation in the background because the layer twos blocks are proved first independently and these are aggregated into a single proof and settled on now one together now the downside of this is there are two downside the first is that because all transactions go through the layer two this is not scalable the layer 2 is also a virtual machine that needs to process the proofs so in itself it's not scalable and the second is that the layer 2 will also have its normal users it will also need a mempool it will need long-term storage so it will ultimately need its own consensus mechanism and validator set and currently an ethereum all roll ups are centralized so we validators only exist for ethereum itself but in the long term when we'll have multiple hyper chains although there will be considerable validator fragmentation between the different hyper genes and this will cause security risks so layer freeze also cause validator fragmentation so can these two problems be solved scalability and validator fragmentation while still preserving fast messaging and the answer is yes using layer degradation we simply have to remove the virtual machine from the layer 2 and create a specialized layer too that is only used for the layer settling of the layer freeze and for messaging the message route should still be imported from here and settle the different hyper chains should still settle here and this specialized proof will still need its consensus mechanism because the different hyper chains will need to settle here before they settle to L1 and and this will have fast messaging it is scalable because a specialized proof can settle any number of hyper chains and because it will not process user transactions and it will not need its own long-term storage it will only need a lightweight consensus mechanism that does not need lead to validator fragmentation so if we compare the free Solutions simple aggregation does not allow fast messaging it does scale it does not need a full consensus mechanism and it does not lead to security fragmentation of these do allow fast messaging they do not scale the L2 needs a full consensus mechanism and it does lead to security fragmentation and layered aggregation does allow fast messaging it does scale it only needs a lightweight consensus and so it does not lead to security fragmentation so that was the core of my talk now we'll talk about a few more add-ons for example instantaneous messaging instantaneous messaging is also possible between roll ups but for this the message route has to be imported before it is proven now proving proving times are coming down so using our new proof system boojon which only requires 16 gigabytes of GPU and these will be very quick even a couple of seconds but to save costs settlement time is the main consideration for importing the message route but the message route can be imported before but it needs to be calculated correctly and this will require some sort of economic guarantees such as some sort of staking mechanism by the validators ultimately however this solution is not secure because if a message route is incorrected then the destination hyper chains will have to revert so this will not be used by a very large number of follow-ups only by smaller community of Roll-Ups that really trust each other so in conclusion we'll have the layer one this will hold who's the shared bridge where all the hyper genes will saturated proofs and the shared proofs and the layered aggregator will settle the layered aggregatory over settle the proofs of the hyper chains and smaller communities of hyper chains can have trust zones between them that can have instantaneous messaging thank you very much and I'd love to answer your questions that are not related to our airdrops thank you foreign thank you very much [Music] 
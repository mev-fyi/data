foreign not that tall uh cool um so hello everyone my name is Scott um founder and chief intern our August laps and today I'm going to talk about something we haven't really quite talked about for quite some time now now that like kind of roll ups is in the Zeitgeist we don't really talk about like execution is sharding as much we talk about data sharding and so on and so forth we kind of like forget this like kind of like troubled child that is exclusion sharding that people just like forget um so like yeah here's a calming sand slide to just kind of set the tone for a talk um this is going to be a very chill talk everyone's has been spending the entire day listening to Giga brain stuff uh I'm I'm just gonna say I'm pretty dumb and so like this is not gonna be like super complicated constructions and it's just gonna be as practical as I tried it to be um so like yeah I rug you guys I actually have like a proper slide design so um so like yeah so um here it is um so like yeah so quick introduction by myself for those of you who don't know me um fun fact it's like I'm an anime girl on Twitter um and so and I also miss my college graduation to be here my parents are very angry and they're like calling me like even two hours ago and like why I'm not in Berkeley um but like yeah I'm currently founder at Argus slaps um like we are basically we identify as a gaming company we don't identify as an infrastructure company we don't identify as a can travel company this is actually one of like my biggest gripe is that everyone in crypto games wants to build these pick and shovels but no one wants to build the content or like applications um and that we just like have like no like applications that the user can use and so we very much identify as like you know a game company uh we built infrastructures to like you know do mean CNN that we want to kind of like build awesome games on chain um previously I was the co-creator of Dark Forest um with like my very Galaxy brain friends Brian goo and Alan Lowe Brian is right now running Zurich spark and many many times smarter than me and I like kind of the dumbest person in the room back then as well um but like yeah um for today's talk we're going to be talking about execution charting obviously but we're going to be talking about execution sharding in a context that is like unfamiliar to most of the discourse that we have about execution chart in the past um in the past we will talk about execution sharding the context of like a layer one um we would be talking like context of like okay like ethereum sharding or maybe near sharding but today I want to kind of like shift the context a little like we let's kind of think like how would sharding look like in a roll-up environment um and that's really kind of like today's kind of main topic but I think most importantly I think like you know like what underlies the question here is like why is a game company architecting their own role up and like what can we learn from World of Warcraft in designing Roll-Ups and last but not least is which I think is like really interesting is like the fact that the design space Roll-Ups can expand Way Beyond that haha op stack for goober which seems to be kind of like the reality right now um and to answer these questions I want to kind of take you back in time back in time like you know just closed your eyes like you know and then we'll go back to uh 2020 right this is like when Dark Forest the idea was first concepted we kind of asked ourselves like you know what if we created a game where every single game action is an on-chain transaction um it was an absolutely absurd premise back in the days still an absurd premise to a lot of people today um but it was an interesting kind of like hypothesis that we had and so we sat on to build it and this is like how dark force was born so dark Forest is a fully on chain space exploration mrfjs game on ethereum powered by ZK snarks um ZK is like the coolest thing that everyone wants to do these days but trust me in 2020 like no one really wants to be in ZK because documentation is pretty much non-existent um like you know like I remember when we were building dark forests like you know the only documentation for circon that is available is Jordi bellina and Jordi balina's Google Docs um and so that is like an amazing experience and we learn a lot from that process and Dark Forest is the manifestation of that and so with dark forests we it's an experiment gone like bigger than we thought it's going to be we had like 10K plus players trillions of gas spend and time of Angie and Chaos with people backstabbing each other on chain and like it's all like you know publicly treasonable so people know who's backstabbing who um but the most fascinating thing about Dark Forest and like what we learn or like why on chain games are interesting is this like nature of platformization like in a traditional game you would see kind of like you know if you build a game um the developers tell you that this is a gameplay you're gonna have we're pretty much stuck with that right but by having an on-chain game you open up the design space for emergent behavior and you allow people to build smart contracts and like friends like that composed with the game so for instance people would create like player corporations information marketplaces and so on and so forth all without having to ask for the permissions of like a game developer um this is like one of one of the benefits of building a fully engine game and like people would also build things like alternate clients people would Fork our kind of like help base or smart contracts to build alternate game modes one of them being a dark force Arena which is like a more like a MOBA Style game instead of like mmor TS and even people like wrote GPU miners to like kind of play the game which is like absolutely insane um and just like kind of like completely overwhelms Us in terms of like you know kind of demand and excitement and with great power comes great responsibility um when we launched dark forests in exodai which is now known as genosis chain which is like an evm sidechain which is supposed to be high troop but uh we ended up filling the entire block space of like the chain um and like of course like you know starts happening like a bunch of like protocols that want to do like things like liquidations the D5 protocols they can't liquidate stuff because there's a bunch of these in-game transactions um fighting the chain um and like that essentially for every week the Dark Forest round was running um like the exodite chain is pretty much unusable for anything else including like D5 nfts or even like the bunch of like die stuff uh that they have there and so the question is like what now are we on a dead end that like you know anching games will just never be a reality it's just like too crazy of an experiment um and like yeah the answer is if you just give up um we go back to making games where the only thing on chain is jpegs and convince people that money grow on trees disclaimer this game asset is not ours if you're an investor it is your portfolio company I'm sorry but like yeah I think like tlr JK uh the solution here we make software do things I think like a lot of us really think about blockchains and Roll-Ups in a very like okay this is like how blockchains have always been designed it's like how Roll-Ups have always work and therefore there's not really much room for improvements um but I just like disagree and like we just around and find out and we kind of like create this like um post-modern of Dark Forest right we asked ourselves the question of like if you are to design a blockchain from the bottom up for for gaming and gaming only uh how would it look like right there is kind of like a very kind of like high level like requirements that we have first and foremost is so we need high throughput so things needs to scale both reads and writes um so the one off one not this thing is here is that like most blockchains are designed to like write like do a lot of Rights like you know you transaction per second is the metric that people tout but the reality here rights are not the only thing you also need reads for people to build blockchains like how do you how would you know where to play your locations are if you can't read from a blockchain node um and this is actually the first bottleneck that we found within blockchain constructions like Dark Forest had a problem with like you know just get full notes being kind of like absolutely hammered and this i o exploding um because we just need to read data from the on-chain state um and this ended up racking thousands of dollars of server costs um that um the xdi theme like gladly fronted for us but of course is non-ideal for long term so we need High throughput not only for rights transaction per second but also for reads like getting data from the blockchain itself we also need to have a horizontally scalable blockchain we want to avoid Noisy Neighbor problem we don't want to have like a game that is becoming popular and suddenly just like start falling in a blockchain and like stopping everyone everything from working we also want a flexibility and customizability so we can modify the state machine um to be like designed for games so things like having a game Loop making itself executing and so on and so forth and last but not least and this is like maybe kind of somewhat of a vague requirement for most people who are unfamiliar with like game online game architecture and it's high tech grade right and so what is high tech rate so what tick rates the key thing is like to think about it is like ticks are the unit Atomic unit of time in a game world right in a blockchain context we have like you know blocks as the atomic unit of time in games we have ticks and this is pretty much analogous when you're building a fully on chain game where um the the how fast your blockchain is sticking or like how fast the blocks are produced is equal The Tick of the game itself and so if you have a higher tick or you have a higher block like kind of like block per second the game feels more responsive and on contrary if you have lower tick the games feels more sluggish um and there's also one key thing here to keep in mind if a block production is laid you will visually feel a lack in the game and this is terrible experience and if you have ever dealt with an angry gamer screaming on a computer because they lost a game it's an absolutely terrible Mark like you know like kind of crap to deal with so right now we know that like in our current rollups have like one block per second which is equal to basically one tick rate and if you want to have cooler games we need higher tick rates like you know if we give you an example like Minecraft like which like a shitty Cube like you know pixel art game um have 26 per second and so we have a long way to go to be able to kind of like build games that are like it's like you know responses like Minecraft and this is like what we saw to solve with kind of our construction as well and it's clear to us that like you know one of the possible solutions is maybe deploying your old roll up right like why don't we just Fork op stack and like you know move on and just like be there the reality here is like it looks like it solves the problem on the service level but it doesn't actually solve the underlying root cause of the problem so for instance you would have like higher throughput than the rights but not quite at the level what the game needs sure if your games have a hundred players it will be enough but if you want to build games that are much higher true but there is like very very strict limitations there because of like how this i o is done in like current get constructions um in the reads like you don't really get the performance boost you still need to rely on indexers like let alone like you know game um like moves like you know even like nfts we need indexers for um and you don't really have horizontal scalability if you try to spin up a new roll up to quote unquote horizontally scale your blockchain your fragmenting your existing smart contract ecosystem like you know marketplaces that the player deploy wouldn't work with the other kind of chain where like you know you like that is like spin up to horizontal scale your game so this opens up a lot of problem and so last but not least is like you know like like high tech grade and block per second is like just not a thing like you know we can try um like you know like try and push it as hard to scan we can get like a two block per second maybe like three but that's really kind of as far as like how these like blockchains are gonna go because there are a bunch of overheads like you know remarkalization and stuff like that there's like very very taxing uh on like you know just like compute cycles and so the way that we kind of like try to fix this is like we go back to the pass back to the early 2000s back to the late 1990s where online games were just first coming up with games like MMOs like ultimate online where they have this concept of sharding like this is not like a novel concept this are things that have existed in the past and so the way that like the funny thing actually here is that like the name sharding itself that we use in database architectures that have actually come from like you know Ultima Online references they were like kind of like one of the first people who came up with the word charting to kind of like really explain like this different servers that they have and so like like the question now is was like how does shardy even work in games right like you know like some people like I don't want to assume that everyone in the audience play online games so like you know I think like just kind of give you an example of like how um sharding works and like the key thing here to note is that sharding is not a one-size-fits-all solution there it's a tool in the toolbox and the way that you fit it in your game um different differs from Context to context so for instance in the first starting construction is like well I like to call the location based sharding a good mental model of like a way to think about it is imagine if you have a Cartesian diagram and then you split it into four quadrants and then each quadrant has its own game shards and every time you want to cross a shark you basically kind of make a communication to the other Charter like hey I want to move there and then you basically get teleported to your Shard and you leave your kind of like previous um kind of like kind of like player body uh behind and you kind of like essentially get teleported different charts so this is the first construct action that is possible by doing this you're essentially Distributing the workload of like the server into multiple kind of like you know like physical instances instead of forcing a single server to do all the computations for the entire game Worlds the second construction is like what is more popular these days it's called The Multiverse sharding um where basically you would have like you know multiple instances of the game that is like um mirrored with each other but you can basically choose whichever short you want to go to and it's like load balance by default and so on and so forth such that like you know each server is not getting too congested and so on and so forth um and like again like with these charts like these are kind of separate instances instead of like a location charts where like it's like an example in the previous slide and so now the kind of like the key question here right like there's a lot of these theorizing a lot of ideas squatting I don't know if you have people familiar with it um but like how do you bring this concept to a role and this is like why we created a world engine um the world engine is our kind of like Flagship infrastructure um which is basically an opinated share sequencer design for starting and like in contrast to like a lot of the shared sequencer design that we've seen um in the past few talks um we are not optimizing for Atomic bundles we are not optimizing for synchronous composability what we are optimizing for is a throughput and b we want to make sure that there's no locks that is blocking the runtime to make sure that the tick rate and the block time is as efficient as possible and so again it's default synchronous and the way that we design a sequencer is such that it's partial order instead of like force total ordering where like you know each transaction needs to happen after the other and the key component here is that we have two main things we have the evm base chart is where it's like a sure evm chain where players can deploy smart contracts to compose with the game create marketplaces with taxes what have you and it's going to be like a normal chain right like you know one block per second or one thing per second just enough for you to go do all your kind of typical device and Marketplace stuff and the key kind of like secret ingredient here is that we use a game shirt which is essentially a mini blockchain designed to serve as a high performance game server um we have to bring your own implementation interface such that you can customize this chart to your liking you can build your own charts to inject to the to the base shark you just need to implement a standard set of interfaces like the same way that like if you're familiar with Cosmos Cosmos smooth half like an ABC interface you can just basically kind of like conform this to this like similar spec to kind of bring your own shards to the world engine stack and the key thing here is that we have a high tick rate that we currently can't achieve with current washing constructions and so this this is like where I want to introduce Cardinal so Cardinal is the world engine's first game shower implementations uh it uses the anti-component system which like have this data oriented oriented architecture which allows us to paralyze the game and have higher throughput for the game computations it has a configurable to create to up to 20 ticks per second so for the blockchain people here that's 20 blocks per second we can also geolocalize this through this latency right now you have sequencers that maybe is based in the US and then like people in Asia every time you want to submit a block they will have to wait like I don't know like 300 millisecond latency before that transaction hits um like you know the sequencer this is a huge problem in games because like you know 300 milliseconds is a long long time if you try to play an FPS game with 200 milliseconds then essentially forever and you're already dead and like the key thing here is also important for us is that it's self-indexing we don't need to have an external indexer anymore uh we don't need like these Frameworks to basically cache the like in game State and this also allows us to build more real-time games um that doesn't have this like latency issues because like you know like the indexer is still trying to catch up with the sequencer blocks we also have a plug-in system that allows people to Catholic and in protocol paralyzed ZK for vacation and so on and so forth and the best like of all at least for me is that you can write your code and go so no more wrangling with solidity trying to kind of make your game work which like I don't know if you've tried to build a launching game in solidity before it's an absolute nightmare um but like Yeah The key thing here with what our charge construction is that you can build anything as sharks you can like they're just like basically an infinite design space of like what a shark can be it can be like let's say like you know like if you let's say you hate the writing your game code and go you can but you know again like we're working on the solidity game chart that allows you to write your game implementation and solidity while preserving the better A lot of the benefits of cardinal um and you can also maybe create an nft minting chart with a Munich mempool and an ordering construction that will solve things like the basic minting Noisy Neighbor problem or you can even have things like game identity chart where you can use nft to represent your game identity and allows you to trade your game identity easily using nfts instead of like having to like you know I don't know give your private key which is like not advisable um I'm like yeah so more or less this is kind of the high level construction I will not dive too deep it's just kind of a concern of time here but the key thing here we kind of like basically allowed evm smart contracts to compose with the game shards by um using custom pick and pass and so this is like basically we kind of create a wrapper around get to allow this to communicate with each other um and that's really kind of like you know the way that we are able to access these different game sharp data um and like this opens up a lot of the design space as well uh bi-directionally and again to retreat we're synchronous by default we have seamless composable interoperably across chartwood.lux and again this is kind of like the key thing of like how our shared sequencer is different is that instead of like using a shared sequence construction that prioritize total ordering Atomic bundles um which requires locking mechanism and which leads to a lot of issues for us like for instance it blocks the main shred which leads to unreliable tick rate and block time which leads to game lags it also imposes restrictions on block time for each chart and require various crypto economics and construction to prevent the amount of service and there's also like one big elephant in the room that I haven't really seen mentioned with like a lot of VCR sequencer construction it's like how do you resolve Deadlocks if you have kind of like these different shards that are dependent on each other and causes a deadlock how do you resolve those those Deadlocks with asynchronous design none of this is a problem because everyone is just like you know doing whatever they want to do and fire and forget the reality is atomic bundles across charts and Roll-Ups are often not necessary for our use cases we don't need anything that requires like Atomic bundles at all and we just like don't think it's like something we should engineer are like in Roll-Ups around to just kind of like you know for just like the sake of like use case Purity and like all of that and so it also leads to a lot of other interesting properties so for instance uh each game charts can have a separate deal here for the base chain um so for example you can use the base sharp use it to like push data to ethereum and then the game shards can push data to slash the hour like a data available committee and you can also use the hardware requirements for running full nodes because you can run base chart get full nodes separately without having to run the GameShark node which kind of like makes it easier for you to integrate with things like Alchemy and so on and so forth and so I think like to just kind of wrap things up I just like want to be uh I'm just like want to be intellectually honest here because I think a lot of people really kind of like want to claim that their like construction solves all like life's problem which is just not the case for us right we think the boxes that is useful for us but maybe it's not for your use case it's just like not realistic at least for like like you know like how we approach things um to assume that our construction will work for every other people's use cases here so it ticks the boxes for us gives us the high throughput gives us the horizontal scalability gives us the flexibility and High trick rates but it is doesn't cure cancer if you need a D5 protocol that requires like you know synchronous composability then like this construction might not be the right one for you and so I guess like to kind of conclude all of this is that I really believe in this concept of a human-centric blockchain architecture this is kind of like a like award cell kind of like in a slide but like but the key thing here is that by designing around a specific user Persona and use case in mind you can reason to argue trade-off space better instead of trying to solve for everyone's problem right they're like you know the role of Renaissance is here and everyone can design their own Roll-Ups to their specific needs instead of like relying on generalized Solutions and what I believe we should do is embrace the camera and explosion right don't build roll ups like one side fits all layer one because it's just like simply not designed to solve the same problem and I'm personally excited to kind of see more people Explore More Rob design spaces like that is kind of like use case or like sector specific so for instance like what is a roll-up designed to add for asset exchange and nothing else look like is it going to be intent base and like what does a roller design for engine Club is going to look like and so with that being said I'll kind of just like you know give the mic back to MJ and like you know thanks for having me [Applause] 
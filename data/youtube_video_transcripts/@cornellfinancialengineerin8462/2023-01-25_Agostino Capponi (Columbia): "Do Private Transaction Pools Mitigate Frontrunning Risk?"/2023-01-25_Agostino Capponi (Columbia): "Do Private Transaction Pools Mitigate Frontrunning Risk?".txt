you can great okay well uh welcome to the first uh seminar of this uh spring semester it's a UBS cfem AI data and analytics seminars series and uh so we're interested in all sorts of topics from um you know uh quantitative Finance as well as uh fintech and uh and you know among these topics that we like are uh the state of cryptocurrencies and uh the microstructure of cryptocurrencies so we have a great speaker for that uh today agustino Capone who is a professor at ieor in Colombia and he's also the director of a new center for digital finance and Technologies and so uh has been running many initiatives uh um and research projects on uh blockchains and today he'll be um talking about decentralized changes front running validation and and all sorts of interesting topics in this area so agustina thanks for uh being the first Speaker of 2023 thank you so much Sasha for the opportunity to speak and for the great introduction let me go ahead and share the slides good and by the way uh if you're watching this and you have some questions please put them not in the chat but in the Q a and I'll I'll try to read them um during the talk so um so yeah without further ado perfect yes as Sasha said if you have any question at least feel free to ask any time I always like when there is interaction during the presentation and um as Sasha mentioned like this talk is about uh defy and the specific aspect of defy which is the front running risk and the objective of the question that we're asking the project is to understand whether the usage of private pools which have been recently introduced to mitigate front running risk are actually achieving the intended purpose are we observing the front ranking risk is going uh lower after this private pools have been implemented and that's trying to work with a girl the student from the IR Department residual and the collaborator from ADHD Rick so what I'm going to do is start with an introduction to the problem then discuss say model this is going to be a game theoretical model to study the problem that generates some testable implication and then we use some data to provide evidence for some of the predictions that the model is generating okay so before I start I would like to remind or introduce the blockchain architecture this might sound familiar to some of you but just to be sure that we are on the same page I would like to focus on what is really relevant to understand front running so when we think about blockchain we think of a large memory pool where all transactions are submitted so every validator and the validators are those entities who are responsible for validating the transactions and for executing them and appending them to the chain so basically blockchain is a chain of blocks these blocks are constructed by these validators and this block contains transactions submitted by users so what the users do is they submit their transactions to the main pool of the validators these validators will also send message to each other to make sure that all the transactions are in the memory pool of all validators like there might be some latency but ideally all the leaders will have access to the entire history of transactions and if a user wants to prioritize this transaction if I want to be sure that I'm included into the block by the next validator will construct a block then I would have to bribe these validators I would have to pay a hike fee so if the fee that is paid is high then my transactions will be put ahead of others in the block for example in this example user 4 is emitting a transaction with say four dollars a bit fee attached to it so this user will get to be executed at the very top of the block because they they are those I mean he's the one who has um of course submitted is Bid And as a validator I'm a profit maximizer entity so I want to keep the transactions which submit iacc because I I get to keep the visas a reward so that's the reward for the service that I'm doing so I I get the fees that are paid by the users okay so the bottom line or what I think is important in slide is that if you want to get on the Block if you want to reduce your execution risk you'd better uh attach a bit big fee to the transaction okay so now uh why what is the main problem that we're studying in this paper is the problem of front running so what that front running attacks I will discuss them in more detail but the reason why we have front running our taxes because this blockchains are public open access blockchains which means that everybody can participate and be a user so you just need a server uh client sorry to connect to the chain and then you can submit your transactions and in addition to being able to submit your transactions you're also able to see the transactions that are being submitted by others because everything is public and Open Access there is no privacy that means that if I see uh some information about a pending transaction so a pending transaction has been the transactions which is spending in the memory pool of a validator before it's actually executed I could take advantage of this information and then try to act on it like this is all actionable information similarly if I want to like take advantage of a transaction which has been appended into the block I can also do that because all the content of the block is publicly visible so that's I think one difference with respect for example a centralized limit order book where you cannot really see the pending transaction right the transaction you only see the transactions one they have been executed uh in the limit order book and the fact that uh exactly these transactions are pending before settlement so the settlement is the time where the transactions are included into the block executed and including the block before that there is a time where the order is resting in the main pool and this is exactly the time where there probably can be a front-running attack so let what is there are several different types of fund running attack like a classical one is the so-called sandwich attack and a sandwich attack is essentially uh implemented by an attacker with sandwiching the transaction of a user so for example suppose a Sasha submits in order to some to to execute a transaction is the green user in this light and is attaching a two dollar fee to his transaction I mean the fee are paid in ethereum but let's for the sake of Simplicity let's say that the the fee is two dollars then uh and this transaction would be for example to swap uh let's say a Bitcoin together for an ethereum token in an automated Market maker so you want to execute this Exchange now I can see transaction and I can say Okay instead of swapping uh I mean instead of him executing transaction and swapping one Bitcoin for an ethereum let me front run let me place a higher fee so that I will execute the transaction at the price that Sasha would have paid like because I'm front running him I'm I'm getting before him on the on the um on the cube so now what happens is that uh after I executed this transaction the price went will go up right because if I'm swapping uh ethereum for a bit for Bitcoin so I'm I'm depositing Bitcoin I'm taking ethereum out then the price of a new swap will be higher so then I will have to deposit more Bitcoins if I want to swap for the same ethereum in the next round which means that when Sasha will execute he will basically have to pay a higher price and then after he has executed I can back running I mean I at this point I can exceed the reverse transaction and sell so what happened is that I've sandwiched him with two transactions and I'm basically gained some profits at the expense of I mean then this profit has been essentially uh granted to me what is going on is there is a wealth transfer from Sasha to myself precisely because I've been able to proceed him in the queue and then background him so that's like a sandwich attack is there a risk that this could fail so let's say if my T back one dollar is not enough to be in that block could it be that I uh that this front running fails that's a very good question yes that could happen uh that uh for example like if there are other transactions with a high gear P which will prevent me prevent Sasha from being executive then uh you will not be front run or back and background yeah that could happen typically this users these attackers are very smart they try to place the order press when at the very end before the block is constructed to be sure that uh the chance that you are included is high and therefore they can still sandwich you in the same block they typically try to time their orders trading for example uh if we know that the block is mined every is validated every 12 seconds press I will submit my transaction like second 10 or second 11 so that I know that by that time you are definitely going to be including the blog even the other fees that have been paid and there is a chance that this or this attack will be successful but as you mentioned there could be a chance where this this attack is not successful okay good point so that's one the example of frontrunic uh there could be another me another front running attack is the so-called suppression attack so what this means is that uh in this case uh I submit uh I basically um try to submit as many transactions as needed in order to suppress the transaction of such so for example yes placed in order again to submit uh to swap again ethereum for Bitcoin with two dollars in this case I submit three transaction with a three dollar bill so that means that the fee is three dollars and if there are only three block three spaces left in the block each transactions will be excluded so in this case I'm basically let me maybe you wanted to exceed this Russia it was really important for you to get this excluded in this current block because it was trading on some let's say private information but that has not happened because uh the attacker currently discussed myself I obviously uh it created three transactions with Hager fee which display which suppresses transaction another example is the so-called displacement attack so this displacement attack means that uh you uh displays a transaction so for example in this specific case Sasha might have identified a very good Arbitrage opportunity between a automated Market maker and the centralized exchange for example both were trade let's say both were trading uh uh we're managing exchange rates uh type of transaction for example in the I could go to the to an automated Market maker and swap an ethereum for a bit ethereum for Bitcoin I can do the same in a centralized limited book let's say on binance but it happens to be the case that the price of Bitcoin for ethereum on balance is higher than if I transact on the uh automated Market maker so in this case I would really want to get the most valuable token from the automated Market maker and then sell it uh on the centralized Exchange now what happens is that uh these Arbitrage opportunities could be valuable only if you execute it first right because think there is like um I'm not the first I mean it's like a first uh uh price option if you get the transaction executed you gain but if you are late then these Arbitrage is no longer profitable and therefore your transaction is really worthless so what could happen in this case that uh uh an attacker could place a transaction before in this case I could place the same arbitrary transaction before such so that basically when it's it's there its transaction will not get executed because uh it could easily implement the smart contract says look if this Arbitrage opportunity is no longer profitable don't do that so in this case I basically displaced him because I've executed before him thanks to my highest speed so these are all different form of front running like these are all possible because I can see what is spending in the public main pool and I can act on it before the validators execute this transactions I know these validators are going to execute this transaction in decreasing order office so that's of course the assumption that they are like profit maximizing invalidadors in the end they have the freedom to do whatever they want but usually they append the transaction in decreasing order office okay so now before I study this uh more systematically I want to ask the question okay is the front running risk really something we should be worried about meaning is it a material risk is it limiting the adoption of blockchain and in this graph I'm basically plotting uh the number of attacks that we have observed for the last 10 000 blocks over time from May 2020 to March 2021 and I'm also plotting the revenue that is being accumulated that is being generated from this front running attack of course that means that if this revenue is revenue for the attackers and ultimately for the miners because these attackers are going to pay high fee in order to get the miners to execute their attack transactions right and who is we subsidizing uh the attackers and the validators are the users that are being front-run all those users were submitting transaction which are from the run and as we can see like the loss uh that we observed uh until I mean March 2021 is on the order of 10 000 ethereum which is about 125 million dollars so it's really a substantial loss it's significant and also the number of attacks that we have seen over time is on the range of three thousand to five thousand right over it has always been uh around that level and this of course is there is both a direct cost I mean the direct cost is the fact that ethereum uh tokens like in general wealth is being transferred from these victims uh users who are front run to attack and validators but there are also a lot of indirect costs because there is a lot of competition between these attackers to get the transaction executed and therefore these are willing to pay hike fee and every other user who is transacting on the same blockchain we'll have to increase this even further if they want to get executed so this congestion is not good for the user who are not is not involved in this arms race for Arbitrage right so they they see the blockchain very congested because there are a lot of arbitration and such and being sent and they I mean but they don't they may not get a chance to execute there is also uh an inefficiency in terms of allocation because we don't want the block space to be used to contain transactions of charge front runner transaction right we want the block space to be used for those users who are executing these transactions because they have a private value because they are benefiting from performing this transaction for example I might need anything token because I want to run at the app and I mean I won't be able to run this the app but if I don't get the chance to see you I will not be able to do that okay so these are all indirect costs which are essentially uh not materialized immediately but they are definitely there okay now because this question with this this front running risk has been one of the main concerns especially in ethereum which is one of the main blockchain apparently the main blockchain which supports smart contracts functionalities and device services then uh there has been a lot of solutions that have been told okay how can we solve this front running problem one of the solution that has been taught is to use private pools so what is a private pool a private pool is essentially a pool a mempool which is not uh visible to everybody so the idea is that instead of sending my transactions to the public pool of a validator I could send these transactions to a private pool which is essentially an off chain parallel channel so it doesn't see it on blockchain but it's off chain and this private pool will only be monitored by some validators who will be able to see my transactions but these are the only parties with immigrants actions so all the attackers will not be able to see any content from the private pool so the idea is that if I submit my transaction through the private pool then I can be sure that I will not be subject to front running because nobody will be able to see my transactions except for the validator right so if validators behave honestly and they are not front-running the users because of course the validator were monitoring the private pool they can see the transactions and before execution they could create a front-running transactions and get it executed I mean at the moment this is forbidden by like the implement the implementation of private pool for example flash Bots which are one of the main firms I mean by blockchain um stuffed up which has created these private channels the explicitly write that if a validator is found to be front running a transactions then it will be kicked off of the pool so you will not be able to stay on the private pool and longer like this is a separate matter okay are they actually able to detect this meaning this is not completely clear but let's say that uh these transactions that are submitted to the right pool will have zero front running risk because the validator will behave honestly so then it seems a very good solution because what if I'm I'm worried about the front run what I will do I will go through this private pool and I will get my transaction executed without being front run so the time of validation is a known it's not a random time it's a known clock time yes that's a good question in the in the latest implementation of ethereum it's a known time so every 12 seconds a new block is validated before before ethereum switch to proof of stake when they were still operating other proof of work it was a random time you would know on average uh how long would take for a block to be but mined but you didn't know you couldn't know exactly the the time so is the main idea of these private pools that you put your transactions in there and just before this validation happens it sort of sneaks in and doesn't give time for these arbit Treasures to to do their uh Magic before the validation happens or actually this is not needed and the reason is that this private pool are only monitored by validators so the attackers will not be able to see anything it's private the information is private and note only to the validators so even if I submit my transaction let's say after the previous block has been validated there is no a way that an attacker will be able to access this private pool so these are off chain and they are only visible to the validators who are who are monitoring this pool because a validator may decide to be on this private pool or may decide to not be on this product pool okay so I mean latency games in this case they are not answered because they will not you you are if you submit through the very pool you will be guaranteed of not being front run because the validators cannot are committed that front running yeah exactly under this yeah exactly that's a several method like are they actually doing that but in principle the rules or the problem is that they shouldn't do that like they if they do that then they will be subject like me they will basically be out of the private pool they will not be able to validate or mine any transaction on the pool so in a way like if we want to draw an analogy with the traditional Market measure structure these private pools are like the dart pools in a way like they are only visible to me they visible to those uh I mean it's not exactly the same as a dark pool but the idea is that it's dark for everybody except for the validators okay and the main question is okay this is a great technological solution but the question is will they be adopted which means will users submit will users will know that they can be front run some it is transaction to the brotherpool and will validators monitor this private pool right because if the technology is there but it's not used then we didn't really solve the problem and the second question is okay suppose that these pools are actually adopted like somebody did it with adopt will monitor them will we be able to actually reduce fund running risk and will you be able to also reduce these priority fees that need to be paid in order to get transaction executed and and finally we asked the question okay how about the entire ego system like if we think about users uh our front validators attackers like is the their value going up once we have this option of the private pool okay there is some literature on this topic I mean not really uh not much uh yet especially this is mostly in the academic in the academic world but some papers have looked at like whether or not pricing functions which have more complexity which means more pricing but make front running attacks more profitable if I know that the Sleep patch is higher then I will basically be willing to submit a transaction with a higher fee because I might gain more from the slippage uh and uh like other papers have looked at whether or not front running might lead to under investment by Arbitrage Bots which means that those who are screening for uh arbitrageable transactions and there is also several literature about the economic analysis of chain with Mining and transactions fees but this is more cyber I mean I would say different from the one that we are writing here so let me now describe the model this is going to be a simple model to generate the main point which is about whether or not adoption would be will be observed and this model has three periods uh and uh there are three agents of three types of Agents I'm assuming that there are n validators which are all identical that are looking to to screen and um validate transactions then there is a user which is front runnable like you could have multiple frontal user but let's for the sake of Simplicity let's assume that there is only one user who can be front run and then there are other users who will not be front drive which means they are not submitting transactions which can be front run and are just transacting because they want to gain some value from using the blockchain for example they might have a need as I mentioned before to get an nft token uh for like for their personal usage or they might need to get some utility token because they need to get um they will extract some ability from using a specific blockchain or they may want to run it the app so they are just transacting to get access to this token but not really to compete or to Arbitrage anybody and then there are two attackers who are competing with each other so they want to compete for execution again the first attacker gets everything the second attacker gets nodding right the competition is really either your first you attack the victim or you gain nothing and there are two possible venues where you can submit your transaction one is the private pool and the other is the public pool okay so you could send your transactions to the right tool you could send the address of the value pool or you could even translate you could even send the transactions to both like if you want you can submit a transaction on the private and the transaction on the public pool so once the transaction is executed by the validator of course the other one will not be but this maximize some of your chances that you get executed okay so now I mean I want to discuss what happens in the different periods of this model so in the first period the validators will decide whether they want to monitor the private pool in addition to monitoring the public pool so all validators are always on the public pool like some of them may decide to also go and monitor the private pool okay suppose that like only two of these validators will adopt the private pool then the adoption rate is 50 which means 50 of these validators have joined the private pool and the remaining 50 percent have decided to only monitor the transactions of the public pool so if you say okay why wouldn't they all monitor the right pool wait for wait a second and I will explain exactly why there might not be an incentive for everybody leaders to go on this private pool now in the second period after the validators have already adopted or decided which pool to monitor the users are going to beat their priority fee and choose where they want to submit transaction and I'm assuming that these users will have some valuation for transaction this is essentially the value that they would extract from the transactions for example if they are doing a swap on any on on an amm this will be the revenue from the swap so how much value this transaction has and I'm assuming that this from these transactions are sorted from the I guess to the smallest so the users who can be front run in this case there is only one user each transaction has the highest valuation right so yes the I guess value for each transaction and then the other users which are those who are not really subject to any front run increase they evaluation V1 V2 and so on until DP plus one and uh the also there is an important point is that if the user who can be front run is front run then it will lose an amount which I'm denoting by C from the transaction so this is essentially the value loss if the user is front run like you might lose the entire value with zero or you might lose less than that who is getting without providing this value is the attacker the attacker was successfully front run is transaction is basically uh getting all the benefit but of course these are pitrage Bots which are the the attackers the attackers typically they mean the way it works right now is that these attackers have very sophisticated Bots that scan the main pool very fast and very efficiently and they are always on the lookout for opportunities of front run and assuming that there is a probability P that they will be able to detect this opportunity on time right sometimes like they might for example leave the Arbitrage but the attacker bot is not super sophisticated they might miss some of the opportunities but let's say that P is the probability that they will be able to to identify this opportunity and if they identify this opportunity they want to to front run it we could be either like a sandwich it could be as displacement it could be a suppression any of them so then like I did I mean after the second period where the user have decided where to submit now it's the time of the attackers to to move so what they are going to do is they are going to first scan for opportunity if they identify an opportunity then they will submit a transaction and this transaction for them is the front running transaction right they want to submit in order to front run a specific transaction for example execute exactly the same transaction in such a but with a larger fee this could be a front running order and I thought they'd be the fee me each transaction is really come with a fee because this determines the priority and also they decide where to submit this transaction would they use the public pool would they use the private pool or would they use both so the idea is that if they use the public pool uh if they use the the public pool only then they could be also front run by the other architectures right because these are like competing with each other so I could be front run by at the other arbitrager if he identifies an opportunity before me if I use the private pool of course I will not be subject to any front running risk because only the validator will append the block will be able to see that and if I'm the first attacker to execute and successfully front-run the user I will get his profit C because I will extract value from the user okay so now the question is why what is the issue why wouldn't uh a user why wouldn't uh an attacker submit always through the private pool suppose that it's free to use this private ports you don't have to pay any feedback at the moment if you slash boss you don't have to pay a fee for the usage on this chart then why not using the private tool and the reason is for exactly the execution risk like it's I mean this is a similar type of risk that you have in dark pools now in dark pools you also face the the probability that you may not get executed whereas in this case the the risk comes from the fact that uh not all validators will be on the private pool like for sure all validators would be on the public pool so if you submit through the web through the public pool any validator who gets the right to update The Ledger will see your transaction if you said you submit your transaction through the private pool for example this user 2 is submitted through the right pool then if the blue validator gets the right to update The Ledger the blockchain is transaction will not be executed because this validator is not on the private pool right it's only if one of those two other validator the black validators are on the private pool then this transaction from user 2 will be executed so in other words if there are very if the number of validators on this private pool is very very small then there is a big execution risk like you there is a risk that your transaction will not be visible to the validator what this block and that's like one of the concerns that is faced by the user like should I submit and if so will I be executed it entirely depends on how many validators are monitoring this private pool okay now what benefit do I get if I use the private pool and here I'm comparing like two situations suppose that on the left there is a block which is constructed by a validator which is only who is only on the public pool so this validator what is going to do is going to sort the transaction from the largest to the smallest and it's going to append the transaction like the disease from the largest to the smallest like in order to maximize the fee the largest to smallest I mean from the transaction with the largest fee to the transaction with the smallest fee until yes field the B blocks suppose that B capital B is the number of spaces block spaces that there is in the block typically on ethereum for example every block has more or less space for 200 transactions so you can only put 200 transaction in the block now on the right instead this is the example of a block constructed by a validator who was monitoring the private pool so if the validator I mean the rule of the game is that the validator one monitor in the right pool they will first have to insert all transactions that have been submitted through the right pool no matter whether the fee of this transaction is larger or smaller than the corresponding fee on the public pool so you always gain priority if you submit through the right pool even suppose that you submit a transaction on the private pool with a fee of one dollar and then you submit a transaction on the right full on the public pool with a fee was to three dollars so the transaction submitted to the right pool with the fear one dollar will be executed before the transaction in the public pool with FP of three dollars so private pool transactions have always a priority over public pool transaction so if a validator who is monitoring the right pool is constructing the block as I mentioned before if it's monitoring the report is always on the public pool but on top in addition is also on the private pool so if one of these validator gets the right updated blockchain then it will first take all transaction submitted to the rally pool will sort those transactions of course from smallest largest from largest to small SV and execute them if there is extra space it will take the transaction submitted through the public pool and it will again sort those transactions from largest fee to small SV and execute them that that is the reason why you see a blue Blossom block and the Yellow Sub block so the blue sub block is the block of all transactions submitted through the private pool the Yellow Block is visually the remaining space filled in with transaction from the public pool okay so then you get execution priority if you submit to that pool you will always be excluded first for example if you are yeah if you are exploiting uh this attacking uh I mean attack opportunity you want to really be the first so you would like to use the provide tool because you will be appended on top of the block okay so now let's think about the attackers they have to decide where to submit their transaction will they do they will use the private will they use the public so the idea is that they will engage in an art race like they want to get their order executed as quickly as possible so there is an armed race for priority or direct solution they want to be the first to be secured and uh they as I mentioned like if they want to gain prioritized execution then they should use the private pool because this transaction will always be placed at the top of the block by by Design By The Sign of the mechanism right first private pool transaction and then public pool transaction so why do why don't they only use the private pool the reason why they don't use only the right pool is because they these attackers are also worried that there are not enough validators on this public pool right some validators may choose not to to adopt this private pool and if this is the case then they are subject to this execution risk though there is a chance that despite they have placed a profitable front running transaction this transaction will not be seen by the validator because the validator is not on this private pool so what the attacker will do they will decide to adopt both the private and the public pool because they want to gain uh prioritize execution and they want to limit execution risk so they will send to both so that if it's picked by validator on the right pool great otherwise like they will be picked by a validator on the public pool okay so now about how about the users the user was this transaction uh which can be front run so the user will basically decide whether or not to send this transaction through to the miner to the validator on the project pool or instead sending it to the validator on the public pool and then what they will do is they will check suppose that are able to observe the fraction of a leaders who have adopted the public pool oh sorry the private pool so this adoption rate is Alpha for example if Alpha is 50 it means that 50 percent of this validator are oats on the private pool in addition to being on the public pool so now if the adoption rate is very large which means that many validators have monitored the private pool then if the user if I'm a user who can be front run I'm going to choose the robot tool because I want to avoid to be fraud run and if I use the private pool I will not be front run but suppose that Alpha is more which means that maybe only five percent of validators have joined the private pool so there is a bit risk there is a 95 probability that the next validator will be a validator who is not monitoring the private pool so if I submit my transaction to the very pool then this transaction will be invisible so in this case I might go and choose the public tool even though I'm subject to the risk of being front run so I can be front run but perhaps what I'm losing from being front run that constant C that I mentioned in previous slide may not be that large so that in that case I might say let me go and use the public pool because although there is a chance I can be front run at least they will be executed right I don't want to wait many blocks before getting married on such an executed because of course if I wait five or six blocks maybe the opportunity cost of waiting might be end up might end up being larger than the loss that they get from being front run and now I'm looking at like we've basically built a game theoretical model look at the equilibrium like what is the nashik level that you would see in this model and there are two regions to consider like it really depends on the front running cost suppose that c is the front running cost like this is the parameter that capture how much loss a user would get would would incur if it's front run so if C is large that means that there is a very high loss that you would incur if the attacker is front running me which happens with this probability P then I will always submit my transaction to the right pool because me if I'm losing a lot from big front run I don't care about the execution risk like the really the the main risk that concerns me is the front running risk so then I will go and submit the right to the private pool but then all the validators say okay if this user is submitting to the right pool I want to observe this transaction because I want to append it into the block and gain from the fees right so all the validators will also go and join this private pool which means that in this case front running risk is completely eliminated right because the user is going to use the private pool and all validators will also go on the right pool because they all want to gain this transaction so I know everybody doesn't want to waste anything right if there is a transaction that I'm not seeing of course it's bad because that means that I will not be able to profit from the fee of this transaction I want to capture the fee from this transaction and therefore they will all join this private pool so that would be so that what what basically is this what this means is that if there is a hike if the front running losses are large then this private pool would solve the problem because all validators will decide to Monitor and as a result the the fund running risk is completely eliminated now what instead is uh what what is going on instead when the front running risk is low suppose that the front running loss is mole which means that uh even if the user is front run is not losing much then there is the then there is a an interesting uh set of actions that is taking place that I want to explain in some detail so I'm basically looking at this line there is a yellow line and there is a Yellow Sub line in in the blue sub line so the Yellow Sub line is basically capturing the situation where the user with frontrun is using the public pool and uh the blue is that is the situation where the user is using the private pool so then the main point is that think about the situation where there is no private pool so if there is no private pool then the fundraunnable user you can only submit to the public pool right because it doesn't have any other option now what me let's think about the situation of the validators so the validators are generating fees are making their profit from the fees that this front running attackers are beating right because they want to get their running attack to be executed therefore they are willing to beat hike fees now if all the valideros would move to the private pool then it means that there is no Arbitrage opportunity anymore right because if not from running opportunity anymore because if all validators go on the private pool then the user who is being front run also goes to the right pool because he faces zero execution risk as a result there is not much revenue that the validators are making from the attackers so if I'm a validator I will not I mean I I will coordinate with the others and it's good that we it's better that we don't do not all go to the right pool because otherwise they will we will lose from the fees of these arbitragers or front running competition and as a result because not all valideros will adopt those private pool then the user who can be front run prefer to submit to the public pool and face from running risk because there is some execution risk like not all validators are on the private pool I'm worried about being from the run but like look in this case the front running glass is small so I would rather bear the possibility that I could be front run but I would like to guarant to be guaranteed execution so this is a situation where a user who is subject to front running risk decides to use the public pool and therefore being exposed to front running risk so that means that in this specific case even if there is a profitable option the front running risk is not being eliminated because not all validators are choosing to monitor this private pool as a result there is execution risk and therefore the Front Range will user who wants to avoid execution risk goes to the public pool because on the public pool there is zero execution risk like if whatever validator is selected it will append my transaction if I append the suspicion of the IC so basically what we argue is that okay is front running risk really eliminated by this by the pool yes only if the loss is large if loss is more then the front running risk is still there like of course this also means that the front running losses will will not be as much as large as before but still you still have losses that you cannot eliminate foreign the other question is whether the I mean I also want to make a comment on this light the I wrote me VMV is a very it's a buzzword like it used to be minor extractable value now I think it stands for maximal extractable value and this means that this is exactly the profit that the validators are making from the fees paid by these competing attackers so the fact that uh there is competition between these attackers these front running attackers that means that uh the ultimate beneficiary of this fee are the validators or the miners for example if me and Sasha are both trying to exploit the front running transaction and suppose this transaction is worth 100 if I bid 90 as a fee it's going to be 91 I'm going to be 92 so in the end we will basically ending up eating all our profit because we compete who is benefiting are these validators because they are the ones who get the feast and that's exactly the so-called minor extractable value or also referred to as the bad Meb bad because it's not really Meb which is like it's not really a good competition like if it was a competition because we there were several different automated market makers scored in different price for Bitcoin versus ethereum then by competition would align the price so it would make the market more efficient right but this is not really contributing to any efficiency in terms of prices this is just like trying to exploit uh users because we can see the content of this transaction so it's not really contributing to Market quality or Price Discovery this is just uh expert I mean a providing losses are providing gains from users uh to to valid to attackers and ultimate validators the next question is okay if we have this private pool option can we reduce the minimal fee needed to get execution right because one of the main concerns behind the adoption before the adoption of private pools was exactly will it be possible to reduce the minimum fee we need to to execute we'll be able to reduce the congestion in the blockchain and um me naively I can at least my first intuition is yeah if a private pool is weekly is reducing the broad space usable using biopital juice because now because there is this private pool the arbitragers will or the attackers will not really be able to front run therefore they are not taking any space in the chain any space in the block because they're not submitting any transaction right so then we should expect a decline the priority fees because there is the arbitrages are not competing but the answer is not quite in fact the opposite happens if you have a profitable option the minimal fee needed the minimal priority if we needed to get execution is going up the reason is that the validators are only going to adopt this private pool if they can earn higher fee right if they are not going to wear Nike priority fee why would they ever adopt a private pool so that means that the Privacy will go up and also and another reason why it should go up is that if we think about the case where there is no private pool then the front runnable user will not submit the transaction if he's worried about being front-run now that there is this private pool this user may decide to submit the transaction because it will be protected right so of course if there are there is one more user there is more demand for Block space if there is more demand for Block space the fee must go up right because the supply is the same it's the size of the block the demand is going up that means that you have to pay more if you need if you want to get executed so the bottom line is that uh this flash boss or this private pools are not always reducing front running risk and they are always increasing the fee that need to be paid to get executed okay so now I want to make some comments about what happens to the efficient allocation of transactions so there is an allocative in inefficiency problem coming from the fact that uh what would be the ideal outcome is that all transactions that are appended to the block are those who are giving value to the user so if let's say the front driver user as the I guess valuation be zero then it is user one then there is user two and so on then we would expect the left block to be the one which has the highest efficiency right because I'm appending all transactions that have uh the I guess valuation but unfortunately because of this front running risk there are two source of inefficiency the first inefficiency comes from the fact that uh if front running risk is large the user who can be front run may decide not to submit because he's worried about being front run and if he doesn't submit that means that the block will contain let's say only the transaction of user one two and three but this is not the optimal allocation because I would have liked to get the transaction from user 0 because it has the I guess valuation right so it's like ideally you would like be zero V1 in video this is the maximum value that can be can be given like to the users but in this case if we think about Ike from the running risk the block will only contain transaction from user one two and three so the total value is D1 plus V2 plus V3 which is molar than v0 plus V1 plus V2 right because the transaction are sorted from the highest to the to the smallest second type of inefficiency is that there is a front-running attack so suppose that the user is from is front run that means that the attacker will basically be executed first so it will be at the top of the block it will gain C but this is nothing else than the loss that uh the front renewable user is getting because instead of getting v0 is getting 0 minus C and then there will be like the the the first user will get the third space in the block so if we sum up the values of the transaction list block the value is v0 plus V1 so this is definitely smaller than v0 plus V1 plus video and the idea is that this block space is being wasted right because if we look at transaction running two that's just a web transfer from the users who is the victim of this front running attack and the Arbitrage bot with doing the front run so there is no value created right there is just value that is being transferred from one user to the other me the old point of using blockchain was basically to have lost space which is efficiently allocated to those users who have some reasons to execute transaction we don't want reality to waste block space to contain these front running attacks foreign like now the me point is that okay because the front runnable user has this private pool option we x mean in general if we compare the situation without the private pool and with the public private pool the total waffle total value of this transaction will go up because simply because this user may not have this who may not have submitted otherwise now there is a chance that they can submit through the right pool because they will be productive against front running risk but the best would be that all validators are adopting the private pool so if this is the case then we will basically get this outcome with zero V1 and V2 because if they're all adopting the private pool then the front driver user will always submit this transaction it will be executed first and appended at the top of the block then the other user will execute so that's really great right we get the most efficient education if all validators adopt the private pool but the question is will this happen and unfortunately this is not always attainable as I mentioned before the reason is the bad Mev if I'm a validator I don't want any if all validators go on this private pool then there is no attack that can be done because as I mentioned before the attackers will not be able to see anything like if all the users are submitting through the private pool to the validators then only the validators will be able to see these transactions and the the attackers will not be able to to see different running opportunities as a result they will not compete right because what they can come what what should they compete upon if there is nothing to to compete on and this is of course Revenue loss for the valuers because the validators LIE to profit from this fees coming from the competition within the arbitrary so it's like as a as a validator I'm getting a lot from the fees when do I have high fees when there is competition but now the competition will be eliminated if all validators are on the private pool as a result uh all validos will never coordinate on all adopting the right tools because this is not good for them they want to retain their Mev so the Mev is exactly the reason why these validators are not um deciding to go on the private pool so I mean I think this is like uh in uh in the in the Contracting type of literature this is also called the older problem the idea is that this problem arises in investment so the sellers typically under invest even though this is actually optimal in this case the validators are not adopting all this or monitoring the private channels because uh even even though this would be the socially optimal thing even if if it's supposed that if the uh the FED could intervene and force them to adult to to to take this action or adopting that this would be the socially optimal outcome but the problem is that this will not be in the interest of validators why because the gains from the adoption are really being attributed by the frontal Revolution who is gaining if the validators are not right poor is the front renewable users because they will not be front run and they will not have execution risk but I'm not gaining anything as a validator if I go on this private pool I lose Mev so if you want me to if you want if you want the validator to be convinced to go then the solution would be that uh these users who are being front run they will have to subsidize the validators for adopting this channel they will have to make a commitment to pay this validator say okay if you go on this private Channel then I will pay you for the service and I'm not sure I'm going to pay you essentially I'm going to pay up to the amount that I would save from being front run so if we want basically this solution to being sending compatible then we need the users the front runnable users to support validators who are going on this private pool because the validator are losing their Med so they want to get something otherwise they will never adopt his private pools so then we basically looked at the data and we have three main implications from this model the first is the private pool will at least be partially adopted by the validator so at least there will be some validators on this private pool maybe not all validator but some will be there the second is that the front runnable user is choosing to go with the right pool if the front running risk is very large because if front running risk is not too high he may be worried about the signature risk and they might decide to use the public pool and also like another possibility is that the value of the attacker is going down with the private pool because there is more competition there is a round Race So if there is a private pool uh then uh basically me and the other attacker are both competing and submitting very high beat to the validators because we all want to be first in exploiting the opportunity right so this private tool actually leads to a first price still bid auction like because you don't see the bid fees only the validators who are monitor is full see that but if I'm committing with the other attacker we are both using the right pool and we are using its private pool as a channel to compete because we all bought we both want to get the first execution that's like what we um we have with the model and then we looked at the data and the left part left graph is the cost Revenue ratio done by like the front run by the the attackers those who exploit this from running transactions uh before the adoption of flashbot before the the flashbot private booths became popular which happened around the middle 2021. instead in the right graph we look at the cost of Revenue ratio by of these attackers after flashbot has been introduced after this profitable option has been made available to to everybody and what we see is that on average the cost of Revenue ratio was 30 percent before these private pools were in place after this private pool have been introduced the customer evaluation went up to about 81 percent like this means that basically they are giving up on average 80 percent of the value of the transaction that their front run precisely because they are competing on these private pools and they are competing very intensely intensively because there is actually only making a like 80 verse I mean they are wasting 80 percent of the value of this front renewable transaction with the fees that they need to Priority Visa they need to pay in order to get a priority on the execution so that means that like for for these attackers actually for a different running Arbitrage Bots this private pool are not really beneficial because they are making their situation worse and then like here we have basically plotted the probability of being front run with the proportion of users who went to the private pool so this probability of being front run basically can be estimated by looking at uh the slippage that you would gain uh when you do this is all based on the amm transactions or swap transaction of the many market makers you look at uh like what would be the slippage that this transaction would incur compared to the price that you need to pay in order to to front run and if you see that this deep edge like the gain that you are making from the increased price impact that you generate when you front run versus the fee that you need to pay is sufficiently large then your front run so there is possibly probably of being from a front run and then we are looking at also like the proportion of users who have chosen the private pool over time so many transactions have been submitted through the flashbot versus the number of transactions that are available in the public pool and what you see by plotting the two lines there you see that there is a very positive correlation right as the probability of in front run goes up there are there is a higher proportion of transactions which are routed through the private pool precisely because if there is more from running risk then you are worried about that and therefore you decide to use the product tool okay I think this brings me to the end um Point main point was to study whether or not private pool can eliminate front running risk and despite there is some mitigation when the front running losses are large because in this case all the validators will adopt right pool and as a result the user with submit that transaction through the right pool removing any front running risk if the front running processes are not too large then the private pools are not really achieving their internet purposes because validators want to preserve their management as capital value and they will decide to stay on the public pool in terms of like uh who is benefiting from the Sprite pool the validators are definitely benefiting because there is more competition by their by the attackers so this is me when there is more competition the valuers are always happy because they gain more priority fees there will the the competitors are willing to be paying a priorities as we have seen before the attackers are losing because there is more there is an intensified competition between them on the private pool they are like bidding high in order to profit and being the first to front run and of course this is leading this is eroding some of their profits in terms of aggregate 12 like if we sound away from everybody we see that like when we have private pool in general like we have a more efficient block space allocation because the front runnable user would be in set device to to submit if his loss is not too large but unfortunately you cannot really achieve the optimal allocation the socially optimal allocation because not all validators will monitor the pool and as a result there might be some inefficiency for example front running risk or block space that is being allocated to a front runnable transaction which is essentially just wasting block space because it's transfer of wealth from the validator from the front runnable user to the attacker and that's uh all what I wanted to say thank you okay thank you agustino um I do have one question in the Q a um this is from Irene Aldridge she asks uh does the same private pool public pool priority hold on all other platforms so she says for example polygon I don't know I'm not familiar with that one but I don't know if you are or in general is this private pool for public pool priority something that uh that is standard yes that's a good question thanks Siri Irene for the question the yeah I think it's true that uh this private pool like for example flashbots these are like private uh off-chain channels so they are not hosted on any blockchain you just submit a transaction directly to validators so any blockchain which implements smart contract functionalities for example like polygon would be one of them uh I mean validated old users there have the option of using this private pool to hide or to to to to to avoid big front run most of the I have to say that lashbots uh are mostly used by ethereum users so in fact the flashbot uh uh people working in flashbot are cooperating or collaborating a lot with the idiom Foundation because ethereum is the largest uh blockchain in terms of smart contracts and that's the one where most of the defy activity is concentrated but polygon is also like a stop decent defy activity so in principle uh is I mean the flashbots are open to all validators so every validator who is on any blockchain can join the flashbots and get that transaction route into them directly um I also had a question uh regarding when you describe this relationship between attackers and validators and that sort of attackers sort of compete with each other until they Fork over all the money to to the validators it reminds me a little bit of the dynamic on ad platforms like Google or Facebook where many companies raise their bids on their ads until they all break even or barely break even and and the reward kind of goes to Google so I it made me curious is is there a healthy competition of validators or do we also have some sort of almost monopolistic entity that's sort of uh you know uh at the end ends up with all these these profits right and and uh Sasha that's a great question so at the moment uh me the the the there is a this monopolistic end in me in the end the valley there are multiple validators so there is only one who will be able to appropriate all this value but these are ultimately the beneficiary of the MEP and because the which is that's why it's called minor extractable value because they're extracting all the value like nobody is gaining except for them now in reality of course the me the the competition may not be really that uh front rival uh from running attackers get zero so they will they will the cost per evolution is 80 so they are still gaining something like but most of the revenue most of the bids are being passed with the validators precisely because of this reason ethereum is thinking about waste of dealing with this MEP for example like one of the solution that they had proposed is to burn Mev so instead of giving this Meb to the miners let's just burn it so nobody gets anything that's one of the the potentials or they are thinking about okay redistribution of the med so there is dmev but instead of giving this Mev only to the validators less distributed through the different participants in the ethereum blockchain so some of these are maybe we'll go back to the user who is being front run some of them will go to other users who are using the blockchain and so on and these are all like Equitable solutions to prevent that uh all the mevs appropriated by the by the validators this is one of the main uh there was like Columbia event and one of the working group was exactly on the how what to do with Mev and one solution was exactly to use it to burn it and I was talking to one of the to the to the researcher from the from the development they'll say another solution for example to use this Meb to fund research that's that would be a more uh beneficial use right instead of giving it to the validators let's give it like to support some like non-profit organization or like some research organizations Etc me I think it was jogging but the idea is that uh I mean this Mev shouldn't be abbreviated by the validators that's it but the current design that's from every time there's a competition these are the ones that benefits yeah yeah I mean in in some ways it also reminds me a little bit of you know this idea of weapons of math destruction that was talked about after the mortgage crisis in other words sort of a battle between people who understand the formula and those who don't and a transfer from those to those who do uh do you think that's something you I mean this is a bit controversial of course and and you know uh but I wonder if you have an opinion on you know this uh sort of the the occurrence of these dynamics of uh people who understand what's going on and people who are who if you don't understand you're probably the sucker in the system yeah in a way that's uh that's also what is going on here now because the user can be front run he's not that sophisticated technological yes the Arbitrage bot or the front running bot with scanning for this opportunity yeah and uh the question is of course what can be done to to prevent this from happening right uh me dead I I agree that at the moment that's one of the the main concerns because if you if you are a sophistic I mean what are those users like if if this is a sophisticated uh age fund then they will probably not be the ones who are front run because they know the risk that they're taking or they will be careful in submitting that on such and press they will submit the Russians towards the very end if the block is mined every 12 seconds maybe at 11.99 seconds so that they they avoid it from running but if we think about users who are like not as sophisticated let's say some maybe unsophisticated family office which is using that platform then of course they they will be they will be technologically inferior so these are the trash boss and these are the ones who are losing so in order to make the system more Equitable there should be a way to to to educate those users who are front run to time maybe better the time of submitting the transaction especially now that you can predict exactly when the next block will be validated this year will uh would be online Solutions could be done but uh but but you're completely right that these are Bid Raj Bots are extremely sophisticated computer programs that basically look at all the possible like uh all the possible ways of running a transaction by seeing okay let me see how much leapage I will generate if I submit this transaction before him and then how much fee I have to pay to get this prioritized on the Queue and then based on that I will decide whether or not to submit so these are codes and these these codes are extremely sophisticated yeah so it seems like if the time of uh this uh validation is deterministic it would look more like a batch auction basically where exactly where you know exactly that that time that's uh honey you know that is a president action when the when the time comes you will get all the transactions executed and and if you are a user then you can better time the time when you want to submit like if you submit very amid at the very very last second then there is a smaller chance that the bot with frontrun you yeah yeah okay well agustina thank you very much for this uh interesting uh dive into uh the dangers of these uh of crypto um public in in private pools and uh uh thank you thanks again um it for uh for being with us well thank you everybody and thank you Sasha for hosting it was okay we will see each other soon yeah yes great great to see you 
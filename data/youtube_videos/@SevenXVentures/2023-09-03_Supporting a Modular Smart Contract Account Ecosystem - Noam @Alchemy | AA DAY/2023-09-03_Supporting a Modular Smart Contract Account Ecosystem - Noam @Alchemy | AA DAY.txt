sorry guys uh we're about to start okay cool take three fingers crossed yeah thank you thank you thank you um who he was at bass on Sunday by the way okay these might look a little familiar uh but I did tweak some so there's some differences um cool uh so a little bit about me I'm on the engineering team at Alchemy I've been there a little bit over three years now and for the past about like three quarters I've been thinking a little bit about web3 ux we talked to tens of thousands of development teams and like a common theme is hey like it's really hard for me to onboard users like the limited market that I can address is like not sufficient to run my business in like how do I make this easier to onboard more people over time a little bit about alchemy is we're a web 2 developer platform so we try to provide tools and services that developers might need in order to build dapps and other tools on top of web3 so in the same way that kind of operating system let developers build on top of hardware and cloud computing built on top of like Cloud infrastructure we try to build on top of web infrastructure to provide a seamless platform and user developer experience okay so quickly why are we here uh quick show of hands who's read vitalik's three transitions blog posts or is familiar with it cool seems like a good good familiarity but uh he argues essentially there's three main transitions that need to occur to enable onboarding more people blockchain the first is moving to L2 so the l2's healing transition the second is the wall security transition and that is moving users from EOS to contract accounts we'll go into what that means a little bit later and then the third is the Privacy transition and so we're kind of focusing right here on the second piece of how do we migrate more users to contract accounts over time and the reason that that's important is um like as you mentioned earlier wallet ux needs to improve to onboard a billion people and at the same time self-custody matters and and as Antoine pointed out earlier like there's generally a direct trade-off between ux and self-sovereignty and how do we provide a solution that checks both boxes so today's agenda uh y-a-a-y-a-a how a a power a but slightly more Technical and then you can like tie it all a little bit together I like it uh so first let's rewind the 90s uh this might probably honestly I'm like aging myself being in this room but we'll look familiar to some of you guys as like an Internet ux that was around back when you use download modems and everything was super slow and you opened and you got like 30 viruses from pages that look like this so us is poor uh end users kept getting compromised on the internet there were not many security rails it was kind of wild west um and also in the 90s the fame like a Nobel Laureate I don't know again who's familiar with this this is Paul krugerman he's an economic Nobel Laureate he kind of caught the top on the internet and they're leaving the 90s he's like there's not really anywhere to go from here and also in the 90s there was this concept of internet companies as directed directly approached from like real companies so internet companies had unorthodox business models as exciting as they were they were unability unappealing to the biggest consumer spending markets which tended a few older like new technology provided more friction there the ux was difficult in foreign scale and infrastructure was limited and there were unclear legal Frameworks uh and compared to the real companies like GMS they sold cars they were tried and true business models Generations grew up kind of familiar with these products there were years of legal precedence and they were able to create products that served entire countries uh but still there was a little kernel in the internet that got people very excited and today I would argue that every company is an internet company and uh specifically what I mean by that is that all companies provide value to their users via the Internet in some capacity um so even on the list before with Saudi aramco and you're like that's not an internet company but you can go to saudiaramco.com learn about Saudi aramco learn about their business see where as a like vendor you might be able to distribute their products Etc and so they're able to provide some value to their customers and their user base across the internet so internet ux has come a long way in three decades from the screenshot I showed on the left to some that you guys are familiar with on the right which is Amazon like you open it without thinking you can purchase products they show up at your door it's incredible so how do we get from A to B also today ux is interfacing with blockchain is very limited so I think all of you guys are probably familiar with this page uh it's like the problem that we're all kind of trying to solve is like there's no way my mom is ever getting on crypto if she has to do this when she gets set up um so how do we improve this ux also today the same novel Paul Krugman call at the top on cryptocurrencies because it goes exactly in the opposite of long-term trends uh oh for two Paul and like today uh their distinction of like crypto companies versus real companies where again like crypto companies difficult legal Frameworks difficult scale infrastructure uh exciting but I don't like this models and I'm appealing to the biggest consumer study models and the real companies which were like the internet companies of the past have evolved not to just like country scale but like global scale still there's a kernel that people are really excited about blockchains so how do we get to the Future in which every company is also a crypto company and again that doesn't mean they have to be crypto4 but how do they provide value to their users via their applications and that can be predicated on crypto rails so how do we get away from this page to the types of ux flows that developers and end users are more familiar with so going from like a seek recovery phase to you know just recover with Google or uh this metamask checkout flow to something like Apple pay that millions and millions of users are all familiar with so I argue and if there's one thing you guys take away from this is that we can solve a lot of these ux problems with smart contract accounts and that account abstraction enables smart contract accounts it kind of fractions a little bit of a table name we'll dig in specifically into what that definition is later but if you write take away two things let it be these two things smart contract accounts enable better ux and account abstraction is the infrastructure that enables smart contract accounts uh whoops so um quickly we'll dive into the technical underpinnings of a kind of traction we'll dive a little bit later into what Alchemy is doing in this space and then we'll start tying it together back into like some of the high level ideas that we think are really promising here so there are two kinds of accounts as we learned a few times now there are EOS and there are smart contract accounts um EOS are fully controlled by a single key that can never change if you lose the key you lose the account uh has a very hard-coded validation rule so on ethereum that validates a signature valid along the what's called K1 elliptic curve it validates the user's account it validates their balance and that's about it and you can never change that ever and like contract accounts can have like whatever access rules they want so you can use different Olympic curves you can use other cryptography cryptographic schemes you can impose other types of constructs into what defines a user's account such as things like account recovery so in general it'd be really good if you could have contract accounts instead of EOS however on ethereum uh all blockchain activity today must be initiated by an eoa um this is a reason that arjit moved to Stark net so starknet has native account abstraction it's not a limitation there but if you want to address the biggest developer ecosystem you're limited by the evm and the evm requires all transactions initiate via an eoa so maybe as an alternative let's introduce a new action we'll call an Executor and instead of you using your eoa the executor can use their eoa to abstract you away from your smart contract wallet cool so it could work as it follows a user says Hey executor please send this message to my smart contract account that shares okay and then sends the the message the account if you see on the account like happy ending right not quite because in this model the executor is stuck paying for gas so in the ethereum model with an eoa there's always a gasket associated with every transaction and in this model that we proposed earlier that the executor is stuck paying this gas fee for the users that doesn't quite seem right how do we improve that so what if we just say hey I promise that I'll pay gas I'll pay you back for gas if you see this message uh we're in web 3 like it's all about trust but verify we want to rely on cryptographic Primitives and not hey I trust that you do this so how do we enforce this on chain uh in other words the executor quoting Rihanna uh you know wants its money back and we don't want to just rely on on the trust from the user we want some like concrete primitive in the protocol to enforce this interaction So to that point we can introduce the entry points and the new flow now is the user sends a message to the executor the executor sends this message to the entry point which executes the message on the user's wallet and then also make sure there's enough gas left over to pay the executor back for using a COA so autonomically it'll make sure that the message executes on the wallet and pay the exterior back for these gas fees cool so now we have a slightly better flow and as we're moving we realize hey this executor can probably do this flow for more than one user why is it doing it for just one user so why don't we rename it to a bundler and now it can do a lot of these flows for a lot of users and kind of aggregate a lot of these uh 40 set or account abstraction transactions into a single transaction in post later so the new flow is like this these are like hey bundler uh hear all my messages the bundler takes all the user messages and sends them to the entry point the entry point then federates them out across to the user's wallets and make sure that for each user it has enough gas to then pay the bundler back for uh executing this transaction so now we have like kind of a working flow of how do you send um funds to user's wallet and get the bundler reimbursed for these actions it doesn't address a core issue of USM blockchains which is gas so like in this model someone naming the user's wallet still has to pay for gas on every transaction like what if they don't have gas how do they get started um so we're building some of these bundlers we'll talk a little bit about the specifics of that in a little bit um but as mentioned like this gas problem is still a huge problem your users get started they can create an account but then they can't send a transaction until they have gas and they get gas you like go to coinbase you kyc you wait three days you figure out how to bridge you get the network wrong you get super pissed and you have to use crypto again um so what if we can abstract this away entirely um so in the 1437 spec there's an actor called the paymaster and that's exactly what the paymaster does so the paint Master can cover the gas fees instead of the user's wallet so we're writing some of these as well we can go into a little bit about that in more detail but honestly these are less interesting uh and now we have this like full flow as defined in erc4337 so users send all their messages to the bundler the bundler sends it all the entry point the entry point uh wallets and then instead of collecting the gas when users while it Cooks from the paymaster providing The Logical works out and everyone's happy you just can get started with no gas bundler gets reimbursed for its actions and we have kind of a coherent system that works for all users here so that's kind of like a high level of the 4237 flows a couple things to call out so I think this was a question that Antoine feel earlier sorry that the text is a little bit small here but I think there's like a couple different parts of this process that need to be distinguished so when is the actual smart account that's the user's account on chain and that has a bunch of rules around like what do I execute how do I execute it who has this permission to do that and then at the top level there's the key management and like in blockchains every single transaction still needs to originate with assigned I'm message so like there are still Keys living somewhere account obstruction the loan does not solve the key management problem it can help make keys more redundant by giving you multiple keys and giving them scope predictions and even letting them use other signing schemes so as I mentioned ethereum uses the K1 elliptic curve it was barbed from Bitcoin and Bitcoin picked that because they're like tinfoil hat government has a back door can't use can't use anything popularly supported but like there's a lot of really good popular supported curves so like anything nist supported will have support from the hardware on your device and so what you can do with that is if you validate a different update curve like the R1 curve you can use your phone as a hardware wallet and sign transactions with things like face ID instead of relying on like an eoa that is hard to secure because you can't use the secure Enclave you can also use things like post Quantum signers if that are necessary you can use things like BLS signature aggregation to push costs mnl2 won't get too much into that now but I'll have to answer questions about later cool and then I guess this is like intense day so uh back to Dan if you guys were here the other day Dan gave a good talk on uh why intents or psyups so bringing that Meme back um but there's like a very light user intent model here uh where like the user just wants to execute a transaction like they don't care about gas so how do we abstract gas away from that user and give them this like uh this transaction object where like some other actors and send advice to come up against on their behalf and that's kind of this paymaster entity that we covered earlier so the paymaster can enable a gas abstraction for end users enable them to either get like free transactions so they're entirely sponsored or sponsorships in other erc20 tokens so like if your game you can pay for gas with like the token for my game or you can pay for your gas with usdc or some something else cool um so I mentioned earlier that we're building a bundler uh we called it run lyric because we suck at naming it's a rust bundler uh and a super clever naming card um so all my flights up to now were pretty nice after now like no don't don't don't judge me for this um but here we go so what is runler rundler is a rust 457 user operation bundler we're drawing a lot of the design principles from ref which is paradigm's new rust ethereum client it's designed to be highly modular and leveraging the latest and greatest in the rust ethereum ecosystem which in general has been designed from the ground up for performance uh so us at that point there's three core components there is the user operation Med pool it's stateful and then there are two stateless components that can scale horizontally on top of that there is the RPC server and the bundle Builder um and you can run this all in an integrated mode on a single machine with zero copy so it just passes around references you can also run this on different machines for horizontal scaling and using grpcs interface we've been making heavy use of ethers RS we're going to switch to alloy which are like some of the newer projects coming out of the rust ecosystem and we have some pretty novel gas estimation techniques for user operations so we actually Implement binary search and solidity to kind of account for What's called the 164th rule um and then last thing we've spent a lot of time around bundle building to like reduce the gas overhead make it easier for things like BLS and segregation moving forward and handle all the denial Service rules defined in 4337 to protect the bundler so we're going to be open sourcing this pretty soon a little bit more than a second so we're actually currently live for alchemy's managed services so if you guys want to get started building on the bundler you can do so via endpoints um it's across ethereum arbitrim polygon optimism based right now we've powered uh cyber connects airdrop last week which I know is a 7x Port Co so uh awesome to see that um and uh uh where we have a long checklist that I promise you has more check marks at this point of us getting ready to open source it and just making sure that it's like clean and ready for developers to hombre too where under so it's on all the non-native AAA evm chains like starknet as mentioned earlier is awesome you don't actually need a bundler there's actually a lot of things that are bad about the bundler you can talk about that in a second um so stocknet makes like we don't even want to bother with that we're already not even compatible like let's just build it right from the get-go for the evm chains you'll need a bundler if you want a kind of traction or you can use like Legacy systems like uh gelato but the thing with the bundlers it's one standardized so you get some kind of like ecosystem compounding benefits and two once it has a med pool will be more sensitive resistant than anything that is out there today so we're still benchmarks pending but we handle this airdrop pretty well uh we've been load testing over a thousand beats per second and the Live use cases were about 25 right per second but honestly all of this is kind of constrained by the underlying Network so reads mainly fan out to the like nodes that power the bundler and riots are going to be like limited by the amount of gas per block in the underlying Network so we actually had a bug last week two weeks ago where we were creating bundles that use more gas and optimism allow for Block so we have to go and fix that real quick uh it's currently a core Alchemy team of four engineers and we're hoping to get some more open source contributors on soon we've already talked to like a few early interested parties to get like early exposure uh before we full open source if that could be you come talk to me after uh there's a few limitations of bundling in 1437 so it's like a bit idiosyncratic that the block Builder is separate from the bundler a lot of the 4237 rules exist in place to protect the bundler and those wouldn't have to exist if the bundler can guarantee that transactions won't revert on chain which is a power that blockbuilder has so over time we see this moving towards Native AAA where hopefully some of the optimistic ltus can start thinking about what this looks like before we decide to enshrine it in ethereum and probably like a five-year timeline uh cool looking forward so we're cutting the bit public Beta release early in September and it's like the open source cut we've been working on P2P specs with folks like bichonomy as well as other folks writing bundlers and the ethereum foundation to make sure that it's designed thoughtfully and clbly and can handle this ecosystem blood moving forward uh again kind of leveraging all the latest and greatest from rust ethereum so we want to add some like custom simulation tracers straight into the ref binary we want to experiment with things like AA ref we can support both uh non-aa and AAA and have like a top of block user operation bundle transaction as well as a bunch of regular transactions after it uh and like various improvements to the node client itself to better support account abstraction infrastructure we also not on here we've been working a lot with the chain foundation so like arbitrim optimism polygon Etc to better support a metric system so we passed uh aip2 it's an arbitrary Improvement proposal to support conditional transactions on their sequencer which is like another way to better protect these bundlers moving forward cool uh using render so as I mentioned earlier you can get started on it with Alchemy today it's the same API endpoint that you use for any other requests on Alchemy we're going to be open sourcing it soon so if you want to run it yourself or we you want to run on chains that we don't support like that's totally getting an option we're very excited to get this in the hands it'll be a copy left license so feel free to 4K modified as you want any commercial use cases will have to remain open source is the only requirement um and there's generally a lot of complexities all these flows around like free estimation um and like constructing accounts and like knowing how to like there's a constant tell like counter factual so you don't want to deploy account until its first transaction to safer gas the SDK will like abstract all this stuff away from you and just make it a very simple developer experience Okay cool so that was like a bit of a technical deep dive quick lift up and like back into Tech and then out of the tech for Eos so what does this enable um argument is it starts to enable these types of use cases that users are familiar with today um and so oh is there a missing slide oh no I'm missing a gif that's here I've got a gift Ed anyway so we can enable this with what we're calling modular smart contract accounts this is being worked on by a lot of folks not just and we're really excited about this so apparently this is in uh ERC so it's ERC 6900 uh we've been working on it for about two quarters now we really recently added yoa from the ethereum foundation as a co-author he's the one behind we're working to start expanding the audit to other teams too and like the whole idea here is creating a modular smart contract account and the reason that you'd want that is because vitalik said so uh no just kidding um uh but but he did he did say that uh like and the reason that we wanted to do that is to maximize flexibility for adapt developers while optimizing for accessibility composability and security so ideally instead of everyone rolling their own account limitation as a developer you can kind of mix and match which plugins you want to provide the best application experience in the context of your account by defining this user stack on chain and so you both provide developers this like secure composable building block previews and you also reduce developer uh lock-in to specific account limitations so any plugin can work with any account okay and so like defining a modular count is this is a lot of like text uh there's validation functions there's execution functions and there's hooks um validation functions validate authenticity so you can like validate a new signature like the R1 curve execute Keys infections execute any custom logic Allowed by the account so like this might be something like a cross chain transfer and hooks uh execute custom logic before and after exclusion functions so an example might be hey I never want this NFC to leave my account um if it ever leaves my account revert the transaction and you can not use that to like Safeguard your hundred thousand dollar NF Junior account um the overall architecture here is Loosely based on Android's permissioning system uh where this ERC defines a way for the account to know how to install and uninstall plugins there's like an iteration coming out in about two weeks to get the reference implementations that also Define like some of the security concerns around the plugin and how to like properly permission up this interface uh buzzword bingo I guess we already mentioned intense so it's like not that climactic but there's a lot of buzzers in crypto I think we're out of the community very bad at naming things uh so this is just kind of an example of that um but I think long term how I see ERC 6900 checking out is that it facilitates kind of a Marketplace for intents where um right now like for a user to do something on crypto it's very imperative like oh like I want to swap you know one eth for like 1800 usdc on unit swap on arbitrum like this slippage parameter and like the whole concept of intense is like hey I just like want to swap my 1e for as much usdc as possible I don't care about the slippage I don't care about the chain I don't care about the protocol like just give me the most usdc and you can start packaging a lot of these intents into like hardened plug-ins on chains so like with the example I gave earlier with like the hey I want virtual cold storage on my nft under no circumstance should it ever leave my account instead of figuring out to do that yourself you just like go install this like virtual Cold Storage plugin to your account specify the nft and any transaction that tries to the nft will revert you don't really have to care how that works or why that works you just have that guarantee so we start moving towards this more declarative intent based use to the system is it an intent is anything an intent I don't know but it's moving higher up the stack in terms of the abstractions provided cool so in this way like you can start also having dap developers that buy it like uh Define the application experience based off of the plugins they prevent their users so like if a user onboards via an nft Marketplace they might want to provision a stack further signer you might even have like a signer per dap and that signer has permissions to do like account recovery it might like enable social login higher up the stack of the key management layer they might have like roll scope signing so like this one key only has permission to like interact with nft contracts and trade nfts but it can't go like sell everything you have on you as well [Applause] and like similarly like a payment company might like preventive stock for their signer that's like uh you know cross-chain stable coin payments so you can abstract away the the network it might require a like precondition hook that every transaction checks for a kyc credential on the account and it enables things like pay masters for usdc so it creates a closed ecosystem around usdc and they pay for gas with usdc and like gaming companies might want to create a sign up for their stock that enables them to pay for gas with their in-game token and also provide session keys so they don't have to sign transactions on like every single in-game action cool so now taking a step back tying it all together um so what is account abstraction really uh terrible word again what happens is like from the protocol perspective we're extracting away support for Eos and smart contract accounts like ethereum Natalie only supports EOS this abstraction's in place to like make it from the protocols perspective it can now support both Without Really caring or changing the core protocol uh mechanism so looking forward over time we want to wind up in a world like Stark net today where every account is a contract account there's been a lot of exciting updates on that so the EF actually published an EIP for was I think they call like the upgrade transaction it's like a one-time transaction that in place upgrades EOS to contract accounts there's been like a stalled out EIP for Native AAA on ethereum I think realistically that's a few years out but I'm like excited to start working with l2s and governance to like iterate on some of these Concepts on those ecosystems uh and so taking a step back account attraction enables developers to provide values to their end users while also abstracting away the underlying crypto rails so a kind of abstraction is from a protocol level protocol is getting account abstracted and then the users are also getting abstracted in the account so just a kind of abstraction all the way down uh and that kind of gets us to this future where like we saw with the internet three decades ago hopefully on a senior timeline with crypto we'll get to a point where all companies can provide value to their users via crypto in some capacity even if it's not a super crypto Ford experience uh if you guys want to learn more check out our website at alchemy.com account Dash extraction I think that QR code will link to it um I probably know him on Twitter and telegram I'm happy to chat about these things anytime if you guys are building on AAA like and you're here message me tell me you're here we'll get you set up with support teams and credits and stuff like we'd love everyone's feedback um but yeah have you take questions if there's anything else [Applause] I can practice wallet yeah so uh equivalent to deploy a bundler so it's going to be me as a smart contract developer up to you like it's kind of like the ethereum node existing today where you can like we encourage people to deal with it it's supposed to be distributed and decentralized and if you want to do it great we'll also provide managed Services if you want to like get started with less hassle yeah yeah I'm asking because there is like a legal problem here since battling from Financial perspective to this in transaction which requires money service business license and the whole thing creates like a kind of issue so so it's actually not a money I'm not a lawyer don't quote me on this but it's not a money service business in the same way that layer two is another money service business um essentially because all transactions are still signed by the users come outside there's nowhere for any bundler to do anything to impact execution of that transaction it's more of a pipeline than it is like a money service yeah yeah basically you do have like a like legal opinion on somebody who can do this I don't have a legal opinion our lawyer has a legal opinion because it's clients needed because I cannot yeah legal opinion yeah so we're running these services in the US as well say and our lawyer feels comfortable enough about that but I don't want to put them on blast um yeah there's like it's everything encrypted a little bit of a regulatory Aquaria right now so there's no like hard yes hard now we're kind of predicating on this a lot of the ltus operating model too where they also like accept transactions post transactions uh and they're more of a pipeline and so are we yeah the same with being Lester yeah how do you see like the MAV being extracted from the bundler like did you see like the system yeah on it I've seen the big questions with the blood Builder yeah yeah so we're a lot of like a core business is like RPC not infrastructure so we have a good amount of order flow and our stances we don't touch order flow like if you tell you send it to us you either tell us to send it to the flashbots and we'll send the flashbots or you tell us to send to the mempool and send to the mempool but we don't have an opinion on it um that's how we're going to run our infrastructure there's obviously interesting problems with AAA and Mev uh the bundler is essentially a mini block Builder and there are things you can do around extracting value from that we're not entering that space but uh if anyone starts setting up Searchers on the mempool and the bundler space that's like a totally viable thing to do you mentioned something specifically with their aircraft what exactly yeah so they had their token airdrop uh part of it was they deployed everyone a contract account get let them claim cyber and then there's a lot often also a transaction to sell cyber on or like cyber to finance um and so we saw like a huge Spike of activity and a couple hundred thousand new accounts deployed for 437 on optimism uh sorry yeah so what are the their experience they have like if they have the workplace uh I believe they let you use your eoas assigner so they use like their metamask but they got a like a contract account behind the scenes okay so it wasn't like a fully embedded flow they still used metamask it's only embed it to connect with the financing it was not fully embedded no so they used like metamask as the intermediate here I can oh yeah and I need to dive more into that if you want to chat you mentioned the conditional conditions on sequences right in one of the sites can you explain that a bit uh I mentioned what sorry conditional transactions on sequencer oh yeah yeah um so like as you guys are familiar with like if one of the issues is the bundler is like super sensitive it's like a fragile old lady of a software piece um and like essentially there's a lot of ways to attack the bundler where if you get a transaction in before the bundler uh and then it submits its transaction and the transaction then reverts on chain the bundler has to pay for gas fees and because the transaction reverted it's not getting reimbursed for those gases so there's a way to attack the bundler by like front running it essentially and all the simulation rules in 47 are designed to protect the bundler but you can still front run those things and so the conditional transaction endpoint on arbitrum and we're pushing a polygon and optimism too and it's essentially what you get with flashbots is like if this memory state is what I expect it to be so it's like a precondition check if this if this storage hasn't changed execute it if it has changed don't do anything and this way it gives you like an atomic way to like not try the transaction if it's going to revert on chain and how would it work for any other on like Avalanche how would it work for any L1 for example it can't work it can't it only works on sequencers right now polygons running into a lot of weird issues because they're pretty mistaken there's a like some weird dos issues if you explode in the public Maple there's a thread on like the polygon equivalent of Youth magicians to discuss its pip if you look up like a proposal conditional transactions you'll find it but yeah there's like folks calling out the Dos conditions and then there's like in parallel How do we do this sustainably they're landing at using private mempools which is kind of similar to flashbots what has been your biggest challenge while building yeah estimation for 437 is a huge main ass still is uh like uh he's referencing a piece that one of the tech leads on the team row it's 15 pages about gas station 47. the fact that you can write 15 pages on gas estimation is like kind of sad um so there's a lot of problems there big one is like all the ltus do gas fee markets slightly differently so there's a lot of weird nuances the bundles to account for another one is oh like faster moving blockchains like l2s move the fee Market very quick so if you like estimate gas at 0.1 and then submit the transaction at point two like it's very possible that the gas Market's risen and the transaction will be just stuck forever in the mempool OR for a long time in the middle um and then there's just like a lot of weight like essentially the bundler has to predict how much gas you able to spend in order to know how much to charge and there's like a lot of weird things that l2s do in terms of like accounting for there's like the L2 priority fee the L2 base fee and that's derived from the L1 data availability costs and those are like kind of hard to measure from L2 have you taken any measures against frontrunning of your bundles um no we were like I don't know why I don't know it stops it's like a minor problem on polygon um but like on lt's it's very hard because there's no public Temple on ethereum we use flashbots sweet one more question uh what is the incentive to run the London uh so the bundler like accepts user operations at gas price one and that posts user operations at gas price too and then it gets the spread of the gas so it gets like a little bit of gas in the machine to work it's like pretty hard to optimize this honestly like we try to run it near zero but it has a big spread we as alchemy One uh we've used this as a way to 10x the ecosystem so we're just like trying to get people on because we think this new ux will like get more people in crypto and that's just like good for business but then we have like our core like CU based model where like certain requests depending on how computationally expensive they are like reflecting charges for developers we have like a pretty big free tier so like most every application on AAA now can probably just fit in our free tier thank you thanks y'all 
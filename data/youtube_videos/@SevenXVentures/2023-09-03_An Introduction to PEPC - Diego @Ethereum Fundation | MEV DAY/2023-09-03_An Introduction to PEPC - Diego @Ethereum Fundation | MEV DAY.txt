[Applause] okay so hello everyone uh thanks for coming first off um so today I'm going to be talking uh you know a little bit kind of at the introductory level but really emphasizing the intuition behind Pepsi um so yeah Pepsi you know we're gonna take I kind of an agent-based approach to uh starting to think about Pepsi so we have Alice and she's a proposer and we also have another person which is Bob I'm Bob is a transaction originator so he's a person that makes a transaction that is gonna try to enter a contract with Alice so basically they they agree on on this contract and what the contract says is that Alice commits to including Bob's transaction in the next block she proposes so that's a commitment that she's making about a particular property that her next block is going to have and then at the same time she also commits to including Bob's transaction as the first in the block so we have here another property that she's committing to about this Vlog and kind of the idea here is to say that um we can go really regular in terms of what we are committing to so it's not just including the transaction but also about the particular ordering of that transaction uh the particular place in the in the block and then we have the bud uh Bob commits to paying Alice if and only if she does both things so we have that above um since the payment if Alice fulfills her whole side of the contract um so now we have that sometime goes by and eventually we get to Alice's turn to propose a block and what happens here is something really weird which is that um the the transaction sorry the block includes Bob's transaction but it is not included as if does not include the the transaction as the first one in the lock and this is really interesting because we have that she basically um you know fulfill the first kind of part of the commitment but she failed to fulfill the second part so we have here that the contract failed so Alice basically didn't fully fulfill her side of the contract and because she doesn't get paid by Bob but at the same time the issue here is that that does not change the fact that she violated the contract so in other words we have that the payment didn't go through but the blog that violated the commitment still was made canonical and this is really the core of Pepsi that for example in the case where you want to have contracts with the proposer um and this proposer is defining a commitment about some blocks they're gonna you know propose in the future even if you establish some form of punishment you still have that a Blog that violated the commitment still was made canonical and you may want to avoid that uh in every situation and at the same time we have that these things are going to happen in the real world because very often due to Mev rewards and you know there may be more there may be a greater payoff from violating the commitment than actually following through if okay basically this is what I'm explaining now so what just happened and we have yeah that Alice violated the contract and we couldn't do anything about it so we couldn't avoid Alice from violating her contract and the reason for this is that consensus neither enforce nor recognize the commitment that she had entered into so in an Ideal World we would have had that the block was rejected was rejected by the network so the blog did not ever even become canonical and in this case we have that that's not possible because the protocol list is not even aware in the first place that this commitments existed and so even if it can enforce something it's not even it's it's not going to enforce this and so in this case Alice has to be trusted to follow to follow through with her side and she will not do so if the player from cheating is greater than uh Bob's payment and so the consequences of that is that they're going to be high Contracting costs what that means is that basically the costs from in from the contract are going to be higher so parties are going to be less incentivized from entering into this contract in the first place because they only get so much utility but if the costs are high due to these issues then it just defeats the point and so in this case that happens because the contract fails to bind Alice to a particular course of action so unlike with both who can score the payment with a smart contract in this case in the case of Alice there's fundamental uncertainty about whether it's going to follow through or not and so what do we do about this so this is kind of the The Guiding question right what do we do about this and one possibility is to base the change validity of the contract so in other words the block or the chain itself is not valid if it violates a commitment and what this essentially leads to is that commitments are not violated in the first place because the chain is going to keep on growing we're going to have that if for example a block is invalid it's just going to be ignored and at that slot it will be as if no block had been proposed and so this is kind of the guest of the idea conditioning block validity so Ali's commitment to a Blog must be consistent with Alice's existing commitments so in other words we have that she cannot commit to a vlog that violates a commitment she made or in other words committing to the blog is effectively inconsistent with a previous commitments that Alex had entered into and so what we can do is that we enforce this and the alternative which is you know if we get an invalid um and invalid block is that we just ignore it and this effectively means that commitments commitment invalid blocks are never even made canonical and they're not gossip by Honest notes so if I'm an honest now that I receive a Blog I don't and that block turns out to be invalid I don't gossip it further and so this effectively cuts the flow let's say of invalided blocks uh you know at the earliest point of discovery that it wasn't invalid an invalid commitment invalid block um before I talk about the general idea in more detail do you guys have any questions okay perfect um so the general idea so we have that Alice and Bob right right commitments to the evm so the idea here is that we use the evm as a source of Truth really in the sense that um the commitment is stored in the evm and therefore we take it as you know as if it had become common knowledge um and so they write to the ebm to a Smart contract that has standardized address which means that the same that the the same place they write to is going to be the source from uh The Wider Community due to this kind of a standard that we're assuming and so in this case we have that Bob deposits payment amount with an escrow so that effectively removes the counterparty risk for at least and then we also have to define a limit for the gas used to evaluate the commitment uh the basically I'm going to talk about I'm going to talk more about this later but the idea here is that you know uh there can be a fundamental gas grief in Vector if we allow commitments to be arbitrary really complex because basically third parties are going to evaluate this commitment and the person that had made the commitment in the first place is not born that's not bear uh the computational cost that it causes on The Wider Community um but anyway so we have that after this we wait for this uh writing operations to become finalized and you know and at that point we take it as the commitments having become common knowledge and after that we wait for Alice's turn to propose a lock and we have that Alice produces and gossips assigned beacon block so I'm using a sign beacon block because that's the type of basically the type of Gossip blocks anything consensus so you know it's obviously way more consistent but also highlights the fact that she really does make a commitment here she does sign a Blog and then we have to validate it in that validation is when we not just check for the block being valid based on um you know the default rules but additionally we check for the you know for for all the commitments that Ali had entered into so here we have that recipients called a functioning dbm and pass assigned uh pass the sign bigger block and we have that the function terminates successfully if and only if sign become log satisfies The Proposal commitments so in other words we can Define the commitment as a set of assertions that we're defining in some function in the evm and these assertions fail if um you know the block violates that particular commitment and we have here that is a function reverts then the sine beacon block is rejected and not gusset so this is kind of the most basic intuition around this and so now I'm going to talk about implementations and a way of implementing this in ethereum consensus with no changes to the protocol so I'm going to talk now about this idea protocol commitments with no changes to consensus so in other words Pepsi without requiring some kind of hard fork or anything just leveraging the existing infrastructure so the the the basis of this idea is that we use distributed validator technology to enforce uh commitments on whatever thing that validator is signing so basically we have that Alice uh you know analysis validator is controlled by an aggregate BLS key um and then this key is distributed using uh xiaomi uh secret sharing algorithm to basically a group of external nodes and this notes what they do is they only provide their signatures if and only if whatever thing they're providing they're saying actually Four is consistent with the commitments of of Alice so we have here that Alice makes up half of the signature and the rest is controlled by a set of nodes and this notes Rich consensus about this so notes provide the necessary side of a signature if and only if the data in question is consistent with Alice's commitments and so what we have so basically um we have here two cases that are possible from the end of the notes that kind of provide the service which is that the data that they have to sign is consistent with Alice's commitments and in that case the nodes provide their signature and you know the signature necessary for consensus to recognize the validator is successfully produced and we have the consensus effectively uh recognizes the data um and the pro the rest of the protocol follows through normally so basically here we have that the protocol just recognizes the blog and you know everything follows through normally and then the second case is that the data is not consistent with Alice's commitments and this is the the the really tricky case right and this is kind of the worst the worst case scenario sort of uh which is that you know um you know so in this case the nodes do not provide their signature and the signature necessary for consensus to recognize the validator is not produced and so what happens here is that consensus does not even recognize the signature and the protocol gracefully ignores the the block and so this is effectively uh kind of leveraging distributed validated technology in the sense that we kind of build a threshold signature and you know the threshold is only met if um you know the nodes agree that uh the the add-in question is consistent um and then you know here is a really interesting idea which is commitment informant enforcement as a service which is effectively what these nodes would be doing so they would you know they're providing their signature um if and only if so basically the the signature is conditioned in a way that reflects uh kind of commitment enforcement and you know uh that also means that nodes chupra will be paid for their service and you know we they can simultaneously not enforce a choice onto the validator because at least remember that controls half of the signature so this is really important and kind of what I mean here is that yeah you can make a service that is probably you know not exploitative of Alice in the sense that you know the notes are you know there's no easy way in which this thing kind of breaks down um and here is kind of an extra idea which is commitments for erc4337 accounts and basically you know here instead of uh enforcing this using uh threshold signatures we have like simply a solidity contract and in this contract which is you know we have a function so basically in erc4337 uh there's signature aggregators and these signature aggregators can Implement arbitrary logic and so what they can do is they can implement the logic to screen user operations for you know them being consistent with commitments of the author of the operation and basically you can have like accounts in our construction uh be only able to make basically to kind of execute operations if and only if they're consistent with their commitments using just the existing infrastructure so it's a really neat way of implementing commitments for ERC for 337 accounts and yeah and that's all right guys I hope you liked it and if you have any questions I'm happy to go over them thanks Yeah question like in the situation where the the plot does not satisfied commitments um like it's like alternative block suppose or just like empty block or what happens yeah so that would be an empty block yeah because the proposal at that block is effectively already decided and we simply have that at that slot no block is recognized from that proposal so the slot remains empty and like what's the incentive for Alice to pop into the system is it does she get like derived from the that's a great question so it kind of hints at the base of why do people choose to contract in the first place and the reason is that sometimes there's more utility from future interactions from Contracting than there is from say scamming the person in the short term so that effectively means that there are contracts for which Alice has a greater incentive to follow through than not and you know what we can just do is um so so one one explanation for why people choose to contract is that if you have a contract which is enforced by a third party then you can use this to fix incentive and compatibility issues and so Lydia here is that for example um you people can transact with organisms into contracts with Alice having certainty that Alice will follow through if the contract is enforced and sometimes there's a really high utility for doing that from the perspective of Alice so I guess that's why um yeah no but uh yeah just one last question but did you have any idea of what what did you want to ask oh basically I was kind of curious also what the incentive other notes to hold parts of Alice's uh keys are to like out there yeah but I guess like it's like rotating between them then they have basically yeah like there's some like off off like offline consensus or option consensus going on it's not security something that's happening totally so in that case you would need to have some way of minimizing the principal agent problem which is that you know the Notes act in the way they're expected to act uh honestly and so you can do that either by putting incentives or maybe even like a punishment scheme uh where you know you have that notes have to report and you know the ones that do you know uh do not align with the majority uh perhaps get uh punished in some way uh in a way this is I feel like the Uma B3 or I call it a little bit um but yeah yeah do you have as well that's a great question so um in this case I'm using kind of uh solidity I'm defining you know commitments in the evm because uh you know it's a great way of kind of uh treating this as a common uh you know like common software or like a common way of execution so um you know it's really easy for notes or third parties to know what code to run in what way um so first question is what are the limits of that um that's a good question I don't know the answer too but I would say you know since the evm is doing complete you can definitely do a lot of things and then the other question is you can only do as much you know so much as you have say data in the kind of uh in the ABM so you know there's a question of how you know the data availability question of you know you can perhaps only enforce constraints or commitments on things that you can have the data for in the evm for the program to be able to like run on to enforce on so so to answer that perhaps you know you can get a lot of data I mean on the ebm so maybe the question is how can you get reliably get data from the out world to be able to enforce commitments on and perhaps it's an oracle problem exactly yes yeah so one of the questions I was thinking was like depending on the conditions that uh that the contract sets So like um as as mass had us like the boundary of the of the conditions can be let's say uh constrained within the end but then within evm like that the the accessible range of data for example oh yeah right it varies across the board yes and also as you mentioned like this Oracle issues as well as like a gas limit right customers and and so so like then that becomes another question which is like how much latency are we looking at depending on the types of contract that we enter like because I can imagine that some contract that we enter has like a lot more latency constraints than others yeah so what would the select the that kind of a comparison yeah so that's a really interesting question because um you know it touches uh basically uh kind of resource management within the scope of uh commitments and you know I think that um so basically this implementation is um kind of a synchronous uh enforcement of commitment because we have that the validity conditions are atomically enforced in whatever operation we're trying to make so for example in the case of a construction um we have that there's a modifier that checks the commitments and so that atomically enforces you know the execution of the user operation with the checking of the conditions so um I don't think there's a latency problem there but you know there's a question of uh you know I guess another another which is um you know about like the gas usage of this and you know that's a really I would say you know with Barnabas that's a question that we've discussed quite a bit and I think obviously here you have that issue in which the person that defines the commitments uh is not you know the one that verifies them and so the cost of verification is you know like um board by Third parties and you know you have this issue where like the person that's perhaps not internalized the external externality that they they're generating uh so one way is taxing so for example you can have that um you like your tax say you reduce from the balance the gas used from the uh what you know from the validity checks of the commitments every time that you know the network has to validate something and so in that case you have that person would internalize you know Alice would internalize the cost or another option is to just set a fixed total cost and have it you know be spread across all the commitments to check and all the complexity of them um so the second is the one that I went for in a prototype I'm gonna publish soon so you know hopefully that will become more clear um yeah yeah so if you have these types of uh proposal commitments then the builders who are constructing the blocks need to construct blocks that satisfy those and if their commitments are on like an individual proposal level then like every single block there's like new criteria for what you need to uh to build a block to satisfy yes um and so have you thought about how this like changes the block building matter like it seems like it makes the task of being a block Builder significantly more difficult but I think that's a great point and one that I have personally not thought much about um I think you're gonna have definitely uh the case where Builders simulate the the block to see if it violates any commitments but definitely uh oh actually so if you view commitments kind of or you see block proposing asset constraint satisfaction problem which is basically problems where you have a set of constraints and you're looking for the sun uh assignment that you know is compatible with constraints the process of trying to find this data is called uh basically um you know search like constraint satisfaction problem uh search and you know there are like some algorithms from Academia so hopefully you know we can mirror uh the Dynamics of blood proposing in terms of constraint satisfaction problems and that would make it uh more clear for about which algorithms should Builders run yeah could you have relays like have a list of commitments without you yeah so so the the implementation that I was thinking is um you have a kind of a Singleton smart contract which is at a agreed upon address and then anyone can call a function in this contract that you know uh with you know kind of retrieves all the commitments of some some users so you can definitely have relays uh use kind of uh this registry um yeah okay yeah um given checking whether the commitment is consistent with previous I mean there's a constraints that faster problem perhaps we can ask Alice to propose as a kid group you know every country yes absolutely absolutely in fact anoma you know they just published a work about uh kind of framing intents in terms of constraint satisfaction problems and you know they build infrastructure using Halo 2 to effectively create proofs for intents so that's basically uh empirically confirms I guess that idea so yeah you can definitely use proofs for this yes oh okay you oh this this Collision risk increase with the um basically the reward you replace I mean the transaction could replace this transaction country transaction could replace some weak energy transaction that could send reward reward back to the validator right and I guess that could cause collusion incentive for the validators um okay okay I'm just wondering if like the the payment for the one that's doing the contract depends on the basically the upscale value of the I mean yeah uh wait I'm curious about okay the connection between uh or like okay you have that uh there's a payment conditional like a payment condition on say the transaction to be included uh and how that connects to like the collusion would you perhaps explain me further I mean I guess you need to incentivize validator to not good right so and more energy that's expected and what can be paid to the validator the more you need to incentivize okay yes extra money because I'm gonna get it anyway so yeah yeah so it's a good question I don't know the answer to be honest I would need to think about it more yeah sorry last question because we still have two speakers Okay cool so if you have more questions you can uh come to Diego one by one so then let's ask the question okay final question do you want to ask a question yeah yeah um I was gonna ask okay so uh I was just curious like I don't think this is solvable or anything but uh like how you think about this um it seems like you could make commitments that are like really like detrimental to the network like you know sensor uniswap or something and then that affects like the next validators so like yeah how you think like how you think about that trade-off or how proposers yeah so uh that's a really good point and you know you see that those same issues coming say between uh say in the case of like Contracting between AI agents where you can have like AI agents commit uh to like doing you know really bad things um and so I think that that's definitely possible uh at the same time I guess a counter argument is that validators will simply you know validators would probably have done it anyway out of protocol so in this case you know it's just making explicit something that had the incentives been right they would have done anyways so I guess I guess I Counterpoint to that would be that at the same time this perhaps will reduce the costs of Contracting uh for even those detrimental cases so in that case it will effectively uh make them have a greater utility so in I guess you know I'm in no position perhaps to like or rather you know perhaps it's a question of like to what extent can we uh constrain the way people contract and to be honest I think that maybe you know it's too hard of a problem uh maybe you know uh the case is to let them contract for anything even for bad things just to preserve that that freedom to contract um however they want um yeah thank you they don't have a rest between Yuki and Diego because like we can have something to do in the evening so let's welcome Ricky 
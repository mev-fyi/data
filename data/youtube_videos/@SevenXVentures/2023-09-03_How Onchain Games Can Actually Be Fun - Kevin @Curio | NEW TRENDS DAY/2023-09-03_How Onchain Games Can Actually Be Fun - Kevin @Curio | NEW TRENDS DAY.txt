okay um hey guys uh I'm Kevin co-founder for curio um we're a fullstack gaming company and we're building on games and um today I'll be talking about hyperscaling ENT games um cool um yeah so to start we have kind of the era one of on games we have games like axi and also we have dark Forest I think Dark Forest basically kicked off the explosion for fully uning games and this happened in around 2020 to 2021 um and it was the first game that was built fully on Smart contracts on kosis chain using ZK snarks and people thought it was really cool to be able to actually build a game on Smart contracts and people didn't really think this was possible before so this was kind of um I would say like the first era for aing games um but this era created a lot of problems that people said to solve the number one problem is pretty much it was really slow to build these games on evm smart contracts because there's a lot of details but basically you have to write all this custom game logic in your front end back end you have to build your own indexer and there's no kind of standard data structure or standards I would say um to actually build these components for the onch games and a consequent of that is basically game these games have extremely weak composability so even though people thought oh you could build plugins onp on top of Dark Forest and things like this and in in reality no one actually did because it was extremely difficult to actually understand the code and contribute to kind of the code base so I think people you know started to dream about oh what if what if you could have games that interoperate between each other but this was not a reality yet and then we kind of have the era two for launching games so I would say this is probably the past year so um this in this period basically different team started building smart contract based game engines on the evm and also Stark net so the different teams building including us um latus uh Dojo from Stark net and people were building these smart contract based game engin so a set of smart contracts game developers used to build these games um so this kind of solved a lot of the iteration speed problem that I highlighted previously so people now could actually build these games pretty rapidly and all these games were kind of running in the browser like lce had this um Minecraft clone running on optimism and we built these strategy games over the past year or so um so it solved a lot of the problems from the previous de uh year but it also created even more problems and yeah these are some of the the features I just talked about so they're building these onchain ECS based game engines fancy word of saying just a set of smart contracts um and this allowed basically for developers to um kind of solve a lot of these problems um they came with built-in indexer so once you write the logic in the back end in smart contracts you didn't have to write them again in the front end um which is really really nice and then they came with a set of standard data structures so game developers can actually reason through these code and potentially be able to contribute that um but most of these games are built in the browser and pixel art based so they still feel like Indie projects and then um this is like an overview of what an ECS system is it's um it's simply just a set of kind of standard data structures that all kind of game engines use to achieve high performance um and then at this time we also built our own game called treaty launched earlier this year so treaty is a social diplomacy game kind of based on um I would say like Civilization and all these sorts of related games where you play as a nation and you negotiate with other nations to you know achieve dominance and and victory and so we also launched this using our own kind of game engine um built on evm uh we were probably one of the first teams to adopt kind of I guess the app specific chain thesis so we had our own rollup running since like April 2022 I would say which I think that idea is quite popular now with like Zora chain and all these sorts of L2 like base chain um and then the core idea that we had for our game um which is also our attempt to answer the question why onchain games is the idea of using smart contracts as social contracts so in this game treaty different treaties represent social relationships between players so a simple example of this is could be two Nations agree to not attack each other for a certain amount of time so this sort of rule set would be enforced by evm smart contracts um so that would be a really simple relationship a complex relationship would be something like um a different a nation kind of lends different troops to other nations and if the other nation is in debt then this nation can let's say take away a piece of land or um take away some sort of erc20 tokens so we wanted to encode a lot of these relationships in smart contracts and this is actually tangibly solving a problem that um is it happens in web two games like for example Evon line you have like 5 million players playing but there's actually no way for people to kind of Express these relationships and the problem with that is basically whenever somebody is kind of like violating um these these oral agreements there's actually nothing the other players can do to kind of punish them whereas obviously in real life you have authorities that can um can enforce rules and that's what makes a lot of things interesting so this was our idea of kind of using smart contracts in a meaningful way to to build strategy games and this is not our game we based the scheme on civilization um so this is what civilization looks like um and there is still a lot of problems with building aching games and that this is I think this this is I think where we're at now and where a lot of teams are in these problems so to start there's a huge performance issue with actually building complex games even if you run a single node kind of L2 evm rollup um you're going to run into complexity and performance problems if your game is really really complicated like um like Civilization or something even close to that um the second problem is fundamentally blockchain architectures are very different than game engine architectures so blockchains are asynchronous by nature and Game servers are kind of synchronous by Nature so what that means is that for blockchains blockchains cannot update themselves over time so you can't tell the blockchain to Ping a smart contract function every block um so you have to use things like keeper networks like gelato to actually like liquidate positions and things like this whereas Game servers actively need to update itself every 20 30 50 milliseconds so an example of this is if I select a group of armies and I want to move it to certain direction it needs to actually move um over time even if I shut down my browser or my my game so um this is like an architectural difference that's fundamentally incompatible with blockchains that needs to be solved and then there's still a lot of problems with actually writing code in solidity even though we have a lot of kind of great tooling now with things like Foundry um this is still not great uh it it does not enjoy the first class support as other kind of native languages so and and there's also just a lack of game focused developer Tools in general so these are kind of the problems that we discovered I think around um after building aing games since end of 2021 so for almost 2 years now and we've set out to solve a lot of these problems like q1 2023 I would say um and to recap what a game tick is um you can think of game ticks as blocks so this is how like a traditional kind of a game engine will look like where you have clients that are sending these inputs to the server there's a certain amount of lag and then the server is processing these results and then sending all these results back so this slice of time here would be one game tick in blockch blockchain terms this would be one block and usually this slice of time is something like 30 milliseconds in the case of OverWatch but for blockchains even if you run optimistic rollup you can at most get um like two blocks per second because of the underlying constraints of a blockchain um so between 50 milliseconds and and kind of 500 milliseconds is a huge time difference and um simply like web 2 Gamers will not be able to accept that kind of uh difference in visual experience so this is like the kind of goal that we set out to build um we wanted to build an engine that combines the performance of traditional gaming servers with evm smart contracts we think that the most important kind of properties launching games is the ability for players to write smart contracts like modding them um so this is kind of the the I guess mission statement that we have um for architecture so we set out to build Keystone which is our kind of Flagship architecture um and this is fundamentally different from kind of other types of game engines Keystone is an opinionated rollup framework purposely built for high performance onch games um and each game runs on its own rollup so for example now you see there's a lot of different kind of l2s that are popping up like Zora or Basse chain but all of them are basically op stack Forks um we think that fundamentally like you know down the line in the next like six to eight months we're going to see much more differentiated rollups because evm is a great kind of medium for just running anything but it's not specialized for actually anything in particular and for games this is um simply not uh kind of reaching the performance that we need so Keystone is set setting out to be this very opinionated framework that will only work for games and nothing else it will not work for defi or onchain social or anything like that it will only work for onchain games and there's a kind of a fundamental idea shift between smart contract based engines and rollup based engines so previously we were writing smart contracts on top of ethereum to build games that's very easy and very straightforward and then we ran into all these problems now we're interested in building kind of rollup based engine so actually encoding a lot of the logic inside of the node software itself so this is kind of like the I think big shift that we're making and we're one of the few teams that's doing this in this space and I think all teams will need to kind of um adopt to this um thinking if you actually want to approach um the web to audience the mass consumer and there's kind of two parts to your architecture I can show a diagram later so you can think about this um sequencer design as there's two parts there's one ECS core which is the game engine so this looks very similar to a traditional game engine where you have the code written and go and it contains all the game logic and runs native code um in parallel so it becomes really fast and it also has natively built-in game tick so even if you're not touching the chain it updates itself you know like 10 to 20 times per second AKA having 10 to 20 blocks per second so this actually allows us to build like Real Time games that you see in in kind of any know realtime strategy games and it's also like a deterministic sa machine um and to demonstrate this like this is something we build we basically put like World of Warcraft Assets in unity and we ran the game like a very simple game where you could attack each other on this rollup um to demonstrate that you know I think a games need to achieve this kind of sort of performance down the line and then the second part of kind of this the sequencer design is that um we want we still wanted the ability for players to write smart contracts um and this it's a bit I guess complicated to explain but um these two parts kind of interoperate with each other through a lot of kind of like evm hacks so players can still come into the game and write a lot of these treaties in and submit these treaties into the evm part of the the game engine um and um we're still thinking about kind of which framework to use but the two parts kind of interoperate which with each other so when you're writing a smart contract you can actually read a lot of the logic from the game engine part through pre-compiled and the two kind of parts of the stack can kind of trigger each other in asynchronous ways um one way to think about this is that this is basically a shared sequencer design with two different sets of rollups one is the evm rollup and one is the um the um ECS game engine rollup and it's rolled up into Keystone so this is kind of like the high level architecture on what we're trying to build and I think this is like the probably the more interesting slide is like what are the interesting things that you could do once you actually own the the chain and once you actually own the infrastructure itself um so for example what if you could have players you know because we're operating in a setting where anything is in some ways acceptable if it it makes sense to the game for example players could use like time travel spells or spend gas to rewind the chain so a chain doesn't even have to go forward in time it can maybe like you know teleport back in time to reset the chain in some ways or players could vote to pause the chain um smart contracts also don't really have to be um immutable or or kind of stay forever on the train by default um I mean this is a this only makes sense in kind of public blockchains but in a setting of game as part of a Game feature you could have Smart contracts that only last for a certain amount of time and you have to keep on paying for these smart contracts for to live on um maybe you can also have tokens and pay gas to destroy smart contract so this also would not make sense on ethereum but it might make sense in the context of a game so maybe a smart contract represents um some sort of relationship between two players and I can actually like pay some sort of to erc20 tokens to destroy that relationship that could be an interesting feature and maybe you could also have a feature that allows you to steal from other people's EAS so you could have like a socialism chain basically like a communism chain that could be like a quite interesting Game feature where people can vote to you know like Purge other people's accounts but this also just wouldn't be um uh reasonable on ethereum but it would make sense on a very game specific rollup and and I think the conclusion here is that we need to get creative with the evm and then if we're actually building a game that's aimed to be fun um we can rethink a lot of these kind of properties that ethereum has or these rollups has but games don't really have to have yeah and then I I guess I summarized a few um lessons I think or like thoughts after building aing games for almost two years which is pretty crazy um I think first the industry still struggles to answer the question why aing games I mean I think this is like the the most important slide um and I think to us there's kind of two parts I think a lot of ENT game teams kind of shy away from leading into a lot of these like token experiments or they kind of like want to have this very purist view of what aing games and autonomous worlds need to be but I I think like you know we think that tokens are like a great way to actually experiment with distribution with retention and and once you add these high stakes into the game um it becomes a really good kind of um testing ground for new game ideas so we really need to lean lean into the kind of the tokenomics of just blockchain and the affordances it gives and then the second part is like how can onent games actually meaningfully kind of improve the game design of whatever game in our case strategy games so we you know we think that treaties represent one of the more interesting ideas using smart cont contracts or social contracts but there's tons of other kind of um ideas that we could have on on how that would actually solve a lot of the problems for web two strategy games and then I think this is also really important especially for l2s down the line is that I think currently all l2s serve to serve basically a general audience I think this is just simply not sustainable in the future you have to know I think your audience extremely well because l2s are supposed to be actually specialized and built with intention so for for us because we're building for kind of more of the the gaming audience we can make a lot of trade-offs on the decentralization liveliness curve um to to really kind of optimize for performance but this also wouldn't make sense maybe for a def5 specialized chain but I think this is like one of the first questions you need to answer before you build your launch your own L2 which is like who you're actually building for and also and then you can kind of tweak all these parameters to serve the users correctly and everything is a means to an end you're only building an L2 to serve your users not just for the sake of building an L2 so you need to actually do that carefully um and then I think this is also related to the pr previous slide is that you need to use the right tools for the right job so I think ethereum is incredibly powerful as kind of this um neutrality layer and kind of arbitration layer for all sorts of things um but you actually need to kind of pick the right tool sets to use that correctly so for example like one example is that you know I think there's a lot of discourse around decentralizing your sequencers um but it really depends on who you're building for if you're actually building for gaming audience that probably doesn't make any sense to actually decentralize your sequencers um and there's a lot of kind of unanswered technical questions um from from a lot of these like technical discussions that go on on Twitter but they actually don't really make a lot of sense if you think about who you're building for very clearly um and because you will know that you can pick the right technical trade-offs um and you won't get sced into just using new technologies for the sake of using new technologies um so I think this is like extremely important um and then fin I think there's a lot of kind of like open research problems on oning games I think one of the more important kind of value props that people agree with is like uh you can have these mods where people can write smart contracts and contribute to some sort of game Universe in a multiplayer way but one obvious problem is like how do you mods kind of stay compatible with the game when it when it launches and when it goes on you know what are the suitable economy models for launching games so like traditional MMOs rely on basically the game developers issuing like inflationary assets to um for developers to basically buy directly from the game store this probably doesn't make sense um for onent games so we need to rethink that how decentralized or permissionless do we actually need to be so again everything is a means to an end um for whatever audience that you're building for for on train games this is you you have a very very different answer for example if you're building an on train game for 100 whales that will spend $110,000 per month then you probably need to be really decentralized in building on ethereum not an LT to but if you're building for the mass consumer and want to have 10,000 diu with you know um a very little kind of spend per user then you probably don't care about the permissionless or decentralization elements um I think people just need to get honest about what are the actual trade-offs there and who you're actually building for um and also there's a lot of kind of questions around the end user experience for example do we play the game in the browser or do we play the game on the desktop or mobile um do we launch an Android first versus iOS what are the different kind of on and off Rams and how do how can we meaningfully kind of increase the developer experience around aing games so that's that and then about us we've been building oning games for around two years this is like the first ever demo we built for our kind of I guess preed like way back in the day and this is like a strategy game that we launched and then we also had this kind of inperson demo at East San Francisco where people sat around the table and played a game and then um a little bit more about our team um we're about to hit a team of 10 a lot of team members come come from impact um on the art side and engineering and we raised the seed round LED by ban Capital last year um so yeah that's it thanks any questions here could you explain a little bit about this the role of e rolls that she uh explained is that something based on any existing stack yeah so you expain few interesting concept that you can have more rollup than you can have re State you know destroy with smart contracts that's something but want to know that how does work like what do you use from stack completely new yeah so we've tried basically building um this thing on op stack we've I mean I've looked a lot into like evm on Cosmos Polaris fos like all sorts of Frameworks we've examined and I think like probably none of them actually fit what we need um there's a lot of optimizations that you can do on kind of the EDM side to make it go a lot faster um one example would be like you have a state tree under the evm that's being merized every block um because you actually need to submit this block hash to other kind of validators for for um for consensus right but in a sequencer design you probably don't actually need to to do that um so I'm more the EV Ser all an execution envir essentially exec EnV so if you're doing it start using off the shelf medm or you have some adds you want to yeah that's still too slow basically like we've tried running this thing on op stack is I mean there's just a lot of overhead because op stack is basic it's like the standard now so it's like gu plus something else plus like 2,000 lens of code um it's still too slow because of a lot of the underlying constraints um for example like game engines usually hold all your kind of State in in your computer memory so it has very fast retrieval and um and insertion and things like this but for like op stack you're like storing things to dis like every so often and it creates a lot of bottlenecks right so what if we could have an EDM that holds all the state in memory um so if your game is only running for like 2 hours this is actually okay and it won't be very expensive but if you're building like an MMO maybe you need to cach these objects like every one day or two days instead of like every 12 seconds like per block so that's like very that's a very simple optimization that you can do that will probably speed it up by like a couple multiples um and there's a lot of other like uh optimizations you can do you have in there saying that if you're using the and there's an tree that use for the contract States yeah you don't really have to store everything on the Node you can have like par nodes and then you can you know as do this yeah so yeah so for example like one thing that I mean I think parallel evm is hard because in the traditional cases like people really care about Fair ordering so people care about like oh if my transaction is um comes in first then then I can do that um but then for in a game setting like PE uh players probably do not care about like having Atomic composability or things like this in a lot of so you can kind of just fire forget and then paralyze a lot of the transactions um so this is I mean there's a lot of like things that we could do there um for sure yeah yeah um so from a from a market point of view do you think that fully Laing gaming is actually competing with the so-called web 2.5 game or like start a completely new kind of user base for them yeah yeah I think depends on what type of fully ENT game You're Building like if you're building a fully ENT game just for Wales which is like wolf game and all these sort of games then you're going into web 3 like DJ audience or like things like friend. Tech it's kind of like an Onre game um and that's like highly profitable in in that case um but if you're building for more of like a mass consumer audience you're inevitably going to compete with uh I think like web 2.5 audience but I think like for us we're starting with definitely the the the crypto native audience because like that's where I come from and that's where um like we that's like where we know best basically and then once we hit pmf there I think we'll slowly expand um yeah so I think it really depends um but I I think so far most people are more interested in building like forx whales so they're building on like optimism ethereum things like this like so they have very very simple games with very simple Graphics because uh these users do not care about actual experience um they just want to make money but if you actually want to tap into kind of um the the the mass consumer audience then everything has to be right so we're building our game in unity um with probably like some sort of double A experience with 3D Graphics like the whole immersive experience because to that audience it actually matters so yeah 
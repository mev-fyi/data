I'm Brian from racero the CEO and we also have uh Tim Carstens here um and Paul to answer your questions but I'm going to be talking about zeth so this is a type zero ZK evm the type zeros and quotes and we'll get into why that is later but what is that fundamentally so it's a fully open source ethereum block prover that actually does all of the things necessary to construct a block and proves it in ZK supports all the evmop codes um it's 100 built-in rust and you can see it costs about twenty dollars to prove a block now the 12 minutes for a proof that's if you're using I think 3000 gpus so whereas if you scale it down to something more reasonable like 64 gpus it takes about 50 minutes that said there's a ton of room for making the system a lot more performant and all of this is based on this continuations feature so if you're interested in ZK proof systems and how to make ZK proof systems I think more effective and useful that you can you should definitely check out the articles that we've written about continuations because this is really the feature that's made this zeph type zero ZK uh evm possible all right so I guess I'll talk a little bit more just about that particular feature um so continuations actually lets us take a full risk five programs how many people here actually know what um battery zero works should I get a little a little intro so uh it's a ZK VM that interprets risk five code or risk five instructions and proves them in ZK now risk five is a general microarchitecture so it can ZK prove anything that can be compiled for this general purpose micro architecture so when we think about ZK EVMS people usually think about taking the semantics of the evm and then Translating that directly to a set of circuits and then proving execution of evm byte code through these set of circuits and then combining them and aggregating them together so instead of doing that because this involves creating whole you know potentially hundreds of custom circuits and then you have to figure out how to get them to coordinate with each other and then aggregate them all together and then audit all of that instead you might consider just well wouldn't it be great if you could ZK approve an evm that already exists so with this approach you can by actually taking the evm code and then compiling the evm itself to risk five now you effectively can shove evm byte code through and state data through this virtual machine and produce an actual evm proof yes so uh unlike these sort of EVMS that are built on top of all of these circuit libraries this zaevm is based really on the revm code base and utilizes a couple other libraries so interestingly with the performance even as is so going back uh once we got this general purpose uh ZK VM however for parts of it you might imagine you want to accelerate them just like you have a graphics accelerator in your phone or any other number of cryptographic accelerators in various Hardware you can build the same thing in ZK systems so we have the general purpose risk 5 ZK VM and then attached to that we have accelerators for sort of like Poseidon and Shaw 256 and big integers however for this particular for zeth we didn't actually even use any of those accelerators we just use the existing crates so this sort of shows that even for things that are like cryptographically intense this approach of just reusing code that somebody else wrote is entirely effective we wanted to make it faster we could go back and look at how to actually accelerate cat track or Shaw 3 in a more native ZK context which would then improve I think we decided about 60 of the time and minith blocks is currently spent in Ketch act so there's a lot of potential improvements for the overall system so um oh Tim's out there do you want to talk about the Patricia Miracle tree I don't wanna I don't want to butcher it [Laughter] this is what happens when you have uh CEOs talk about professional Market trees so uh one of the critical things that you have to do when you're running in constructing ethereum walks is you want to prove that the state that you're starting with is consistent with the state that you know the chain is actually agreed upon right and so ethereum actually provides a standard way to do this called an eip1186 inclusion proof which you can use to prove that the state of a given the counter storage that such and such block is equal to whatever you would expect so for the purposes of DK construction it's actually very important that before you start running transactions you verify the state of the accounts and storage that you intend to read and then act upon so one of the things that we do is we take the inclusion proofs that are provided to us by RPC providers for example and we essentially take the union of those and we construct from that what we call a partial Merkel Patricia tree so this is a Merkel subset proof If you will that represents the rather that verifies that the state that you're acting upon for your computation is in fact the consensus state for those accounts that's what the structure does excellent thank you Tim thank you Brian do you want to talk about putting it all together as well I think you're going to do more justices to this than I would but um yeah uh yeah sure so uh the process for building an ethereum block of course is that you start from a given State you verify that that state is consistent with the consensus State and then from there you also want to verify that the signatures on the transactions are valid so that you're only doing authorized updates for for eoa accounts uh we do those verifications we apply the transactions in sequence uh updating the data as we go and then at the very end we calculate the new State Route again using this partial vertical Patricia tree so one of the key benefits of doing things this way is that um so if you if you look at the sort of breadth of the existing various type whatever ZK VMS or zkevms because you have to build all these custom circuits you can imagine that the system around it kind of ossifies you have this very complex interconnected set of code so if you want to actually modify the evm to add an EIP or potentially like do things like curio and other teams are doing to actually innovate in the kind of capabilities of your evm you kind of at that point now are looking at a huge amount of engineering and sort of security budget investment in order to bring your zke EVMS to all of these different ecosystems so by building on top of existing code we're making it really easy for everyone else to sort of innovate in the evm space while maintaining the maximal amount of security so rather than re-auditing this entire company ZK system you can just use something like lambda's tool that shows you the diffs between different evm Stacks then you can really focus on only the things that have changed and then yeah so Zappos developed really quickly Tim here and two other people sort of headed up this effort very impressive work um and this is uh something I think we've been talking about on stage for like a year that the best way to build an evm is just to go ahead and use the evm that already exists if you're going to do it in ZK so it's really happy that we were able to actually make this sort of feat work I think it's what four billion cycles ish for uh most blocks yeah typical food yeah so that's basically 4 000 chunks we split this into of a million cycles each and then prove those all in parallel sort of well as the executors exit figures out what's happening in the risk 5 code it produces these little chunks to go or segments that then gets streamed out to a bunch of other notes I guess we could get into the architecture of all of bonsai separately yeah so if you want to actually play around with any of the kinds of things that you might be able to prove from this client um that uh like the stuff Tim mentioned you can do this now without needing to really worry about the ZK at all foreign and yes as as Steven slides here mentioned um we have uh sort of started working with optimism are really excited about that and um I think there's gonna be some really cool hybrids of things like Seth being mixed with uh with fraud proofs so you could think about ZK as a way to if you can produce the correct proof of execution or something you can also produce the incorrect proof so you could imagine even with Seth you could effectively make fraud proofs for ethereum because you could produce a proof that you had uh you know that the agreed upon answer was not the actual appropriate answer based on based on what the clients put out so going to be some really exciting things I think coming out there that uh yeah that's uh that's like the overview um of that I figured there's lots of questions that people might have so um we can get into more stuff about Zappa or more stuff about resero or continuations but yeah like a quick overview I guess now we're open for questions I'm just curiously with that sort of implementation logic like does it also apply to other clients wait I don't know like like polka dot or even just like Solana yes so what uh well it depends it depends on the exact client right like I think we support um something like 1350 out of the top 1500 rust crates at this point and that number goes up over time how do you verify the use of support uh so we have uh CI we actually have uh scripts and GitHub that go download everything build them and then yeah it's actually build it inside the guest code and then I think we have rudimentary support for executing some of the tests so there's some amount of support for all these things so to some extent it depends on how much the actual crate you're using um supports like some of the modifications we had to make for uh zath involved building a different database back end to make sure that it was the serialization across the sort of host guest the thing that's being proven versus the thing that's interacting with the thing being proven is actually efficient we had to like add this custom Miracle Patricia tree code so and you might have to do things like that for particular VMS I know that the Solana I think Parker got the Solano one working the other day he said he said it was gross but um no it's not a judgment on Solana but so continuing on from that um you know it's it's actually one of the really fun things about having a general purpose architecture available to us is that it does give us uh the vast majority of existing Rusty Burns which in this year actually covers a significant amount of the use cases in blockchain and also off chain so in addition to we also have support for wasm not a problem at all uh and I've also heard a rumor that we have support for Cairo as of today oh really oh okay I mean we yeah open source chiropriver uh I think people yeah people have played around with move I don't know if anybody's gotten that at work and sway also and then also of course Linux so if you haven't seen this um it's totally worth checking out um you know I don't know why people need the ZK approved Linux I hear it has something to do with gold bars but um but yeah you can now prove that ZK proved the execution of Linux programs I'm using the exact same approach you can also roll up existing Roll-Ups into risk five quite easily right like if there is a ZK proof verifier for a snark or a stark or anything else if it's written in Rust you can run it inside our system and in this way you can you can make everything in L2 of everything else absolutely yeah how do you decompose the existing words crates into uh you know respite so you don't actually have to do anything for that that's the kind of beauty of this approach so rust has the compiler for rust is built in sort of two layers it has an initial um compiler that sits above level VM and then it like effectively just It Bolts onto love and then everything gets lowered from there so um you know right now our tool chain we support GCC and llvm for production of risk five but Russ pretty much already knows how to because it uses llvm and because they decided to support the sub type of risk 5 that we use rv32im it just works I mean there's a lot of a lot of hard work went into making it just work but from a developer's standpoint you don't need to do anything special you didn't have to like run the latest version of rust but I think we fixed that yesterday too so now you can just use standard rest here so from the comparative perspective there are usually you know Nursery assembly level instructions right so uh how do you guys handle handle it right because it's very expensive in terms of I mean this is the surprising thing right so I think that when we first released our VM a lot of the cryptographers commented to us like with a little bit of skepticism they said how can you possibly compete in performance against virtual machine architectures that were designed specifically for ZK and I have to say I understand where those questions were coming from right like intuitively the more optimized the better and you would think that that would be really important but empirically with the actual data at hand what we have found is that risk 5 is primarily just doing Simple control flow operations which cost exactly the same regardless of what your VM design actually is where the performance really starts to matter is when you want to do expensive cryptographic operations right and we see this exactly in set so zeth actually takes advantage of I should back up the VM that we provide is a risk 5 Core together with accelerated circuits for specific cryptographic operations which incidentally is exactly how real processors work right and so if you were to be producing traditional computer systems you do have the option of building your own A6 for your specific application but you'll notice that nobody does this and they don't do it because if you need control flow there's actually no benefit to it the only benefits come from you know hyper optimized circuits for things like ecdsa which we provide or for shotu which we provide or for ketchak which we will provide or someone will yeah yeah so our architecture is is very much incorporating the lessons learned from the last 100 years of computer architecture and our experience has been that that actually translates very well into ZK uh perhaps you know running against some of the narrative that has been out there I mean if you think about the core philosophy of risk versus like a cisc approach you know risk five is the you know spiritual successor of mips and that was the successor of something else so people really tried to boil these set of op codes down in Risk architectures to really kind of the bare minimum you need so it also means when you translate it to it's hard to do this when you translate it to ZK system you can achieve the necessary sort of efficiency in terms of column layout to actually get and obviously we use Starks so this is this is another thing that um people don't often talk about the difference between Starks and snarks and Starks are just much better for this kind of VM type situation where you actually have a set a known set of registers and you're just running the same effectively circuit over and over and over again which if you could encode an evm in a stark it might be really efficient but I don't think that you can I think it's fundamentally like too complex so you'll end up like having way too much uh like requiring too much memory you certainly could do it but it's not gonna it doesn't work well so having the smaller chip actually uh it's fry based I don't think I don't think it's actually encoded in Starkey yet yeah there's one other performance thing that's also I think really quite relevant and so different EVS yes that one's not released yet so another thing that folks mentioned to us early on so risk five like any kind of conventional processor design assumes that you have a traditional memory architecture together with a collection of general purpose registers and I've heard it suggested that this approach is not ZK optimal because it involves working with registers and as it happens this thesis has also been tested out by traditional computer architectures so if you're going to know your computer history and you look back to the 90s there was an architecture called spark which has nothing to do with zks it's produced by Sun Microsystems whose campus is now occupied by Facebook goes to show how good their ideas were and the spark architecture had this view of oh my gosh register handling must be so expensive what's produced this exotic system where registers behave a lot more like memory and what they found was in fact there were no performance benefits to this because existing compilers are actually extremely efficient at using the registers and don't involve a lot of register changes and sure enough in instrumentation what we have found is that this traditional processor architecture as far as I know actually is not causing any significant overhead over a safe pure memory architecture approach yeah and there are other potentially interesting benefits of using a real sort of microprocessor especially when you look at in order before you prove anything you have to actually simulate the thing you're proving you have to generate the witness so if you're actually basing your ZK proofing system on an actual real architecture there's probably a lot of Hardware opportunities to actually accelerate the witness generation in Hardware in advance and so I think we'll start to see a lot of that really push the performance of the system over time yeah so it sounds like uh is more generic right comparison right so I mean what's the cost of this generality like the lower high well I think it really I don't it depends on yeah it depends on how you construct your proof system but if you think about the evm is also extraordinarily General but it doesn't really have like an lvm pipeline at the top and it's never really been optimized for running large programs but like every energy every energy operation uses 256-bit integers right so that actually has its own like significant amount of cost versus um you know just using risk 5 to 32. you don't necessarily like 32 bits is a is enough for a lot of operations anyway so there's actually like efficiency to be had I think in general so it's really hard to compare outside of the context of a very specific example um I kind of have a question about lasso and Joel implementation um and that's going to work well with risk five um but they talk a lot about kind of making snarks more developer friendly um how do you see the session with your design yeah go for it in the short term but I don't think it's really that clear what the like Perfect story is um like the details around lasso is that the like the verification time is worse compared to fry so like the gains and proofs uh like proverb it's like yeah okay but it's sort of like there's some gaps in the literature I think that we need to see filled in before it makes sense to like make decisions about whether we want to talk about implementing it we're sort of definitely of the opinion that at some point we're going to have to make some changes to the but like lasso makes it easy for you to write circuits because you don't have to write polynomial constraints you can instead use lookups we make it easy because you don't have to write circuits you just write rest so it's like lasso that that ease of developer experience argument for lasso is like non-unique I guess it's like it applies if your model is developers have to write circuits yeah but I think we're all kind of moving beyond the I mean like developers have to write circuits as the that I like yeah even with like powder the stuff powder labs are doing or any other number of projects where people are building these like lurk kind of higher level circuit description languages you can imagine backending any of those to lassos so I imagine there's going to be and we have our own uh sort of circuit construction language we'll be releasing eventually as well um so uh I think that um the additional like Simplicity is really only going to help people uh when they're adapting these languages to the zk's like proving systems but yeah as Paul mentions um we'll we'll use the fastest proving technology that we can get our hands on yeah sure yeah back to that I guess like we are definitely designing some modularity and are certainly living in a world in which we think that fruit systems are going to continue to like improve so totally at some point but yeah I lasso it seems like a more substantial pivot from our design than some of the like other um like there's some low-hanging fruit in terms of speeding up our fruit system but frankly like uh in digging into the details it seems like the log up approach in most practical use cases is offering as good performance as the lasso Pro but actually I actually just I don't know if you saw that paper I just sent out that people are like no like the cool thing about advances in proof systems is that usually like if somebody goes off in a different direction like half of the tricks they took to get in that direction like actually apply to a bunch of other proof system approaches so usually you see a bit of like back and forth between these different proof systems so yeah people just found some way to like apply some of the lasso techniques to fry construction so um who knows obviously we're fry not Maxis but fans yeah sure anybody else yeah yeah as now I introduced to the public Lloyd what does it mean for the builders who want to build on top of it and what's their relationship with you guys uh it doesn't mean like transaction fee or yeah I mean for now um for now you basically in order to get the small snark out that you could actually verify on chain you have to use Bonsai so it has to go through an API key but um that will not be the case like eventually so we just started our security audits we want to make sure that when we're putting something as powerful as like general purpose ZK out into the ecosystem that it's that it's actually you know that we have a strong confidence in it so um yeah so the story for like right now is that you have to you can certainly play around with the code and know that it will be provable in ZK or you can use Bonsai or you can actually you can run it locally it's just going to take a long time and it produces a very large proof that you have to pack it down um also using Bonsai but in the future yeah there'll be multiple ways to prove this for sure and hopefully a decentralized network yeah I hope so yeah I don't think we have I don't think we have like solid plans there yet but we'll definitely I mean we have the core of bonsai and we'll always be offering that to customers who want to you know pay to run a centralized ZK proving service but we will build out this decentralized network that will continue to add new features over time for sure this you can actually commoditize running as you can roll up and that would just no longer become people will have to be opinionated ahead of time yeah definitely yeah all those are as one of our investors you're not supposed to be excited about commoditizing things can we look at the application landscape is only going to get richer from here right historically all data on blockchain is public and in a world where all the data is public decentralized proving systems make a tremendous amount of sense but once you have the ability for people to submit proofs about applications that act on private data to public blockchains yeah you'll start to see that there's significant interest I assume in the development of hybrid systems where the chain itself which maintains the public Ledger will be built by a decentralized permissionless network and where applications that require manipulation of private user data from one or more users will certainly have to be running on some Hardware that has some kind of trust obligation that's enforceable and traditional yeah and maybe maybe people will use local proving for that I think we like our proofer now runs in browsers and lots of other people especially you can geometry just put out their article about uh accelerating uh web Jeep with stuff with web gpus you are seeing like a lot more proving capabilities I think start to come to people's laptops and phones but uh at the eventually I still think people are going to like application developers that are you heavily using ZK will probably want choose a trusted party for many sort of um Cloud for the same reason people use AWS at all yeah if your application requires private data for multiple users which would be the case for instance in an exchange right where you have like not D5 but we'll say like really modern complicated I guess here we would say intent based you know in this kind of context there will be no individual user who has enough data to produce the proof of other interactions and so this is where you'll find centralized proving we'll probably have I think a very strong place though yeah yeah yeah [Applause] so probably I have one last question so um regarding the co-working with optimism I guess um they got education obviously which part of Death Do you believe is most important for them to help them kind of borrow and make decisions you know it's very interesting so when optimism put out their requests for proposals uh their specific asked was for the ability to ZK prove the existing op stack which is written in go so the very first thing that we did is I sat down with uh Jeremy and Stephen and others and we collected a tremendous amount of data based on the stack what its precise execution needs were it began estimating the complexity of going proofs of these programs programs which were not designed to run inside ZK and based on these data you know we were already working on zeph we already knew what a ZK native solution would perform like we estimated that zeph is actually 10x cheaper to prove uh than uh the op program fraud system from Canon and So based on this we proposed to them sort of a radical idea we said never mind these requirements you asked for what you really want is something that's going to be cost and performance optimized so we put forward this idea of using uh zath as the foundation for that right for them what that means is that they'll be able to take their current dispute window of several days and collapse it to minutes right and you can produce the proof within minutes that the block is simply correct and then there's just no need to even worry about any disputes you have an absolute proof that it's in fact yeah you can actually even imagine that there like a fraud window that's determined by people if you want your money out sooner you effectively pay to get a proof of correctness generated sooner and then you could submit that um so you're gonna like I think the fraud proof slash DK proof Hybrid models are going to be really interesting for any kind of um especially these kind of like high-speed game clock chains so I'm excited about the the intersection of yeah that and gaming in particular and even for much more established change like ethereum um you know as Brian mentioned uh our proofs today cost around 20 per block to produce and if you believe the blocks are free then twenty dollars sounds like a lot but in fact blocks are not free to produce ethereum today has over 700 000 validators if you say that each of those represents a computer or even only half of them or a quarter of them do this is a significant amount of redundant complete capacity which does in fact add to the security of the consensus aspect but which otherwise is completely Superfluous for Block Construction so empirically the cost of producing ethereum blocks today outside of ZK is significantly greater than twenty dollars per block uh just because to the like the is it cheap enough already kind of question and yeah so effectively is that to get back to the op question though that this is kind of the basis of like we had we had been kicking Seth around and then as an idea and then when the op when it really came time to like submit the op proposal we decided to actually you know effectively productionize it and then modify it to work with the op stack so so we expect this kind of zethwork to be relevant in the op context soon yeah beautiful thank you yeah so I guess if we have no more questions we'll take a break around 10 minutes and then next up will be well Young from Manta talking about zika Shuffle awesome thank you 
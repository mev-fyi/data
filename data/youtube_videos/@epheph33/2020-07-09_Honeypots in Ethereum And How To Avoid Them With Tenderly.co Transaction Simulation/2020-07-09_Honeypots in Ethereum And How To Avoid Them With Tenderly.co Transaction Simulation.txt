hello my name is Scott Bigelow and today I'd like to talk to you about honey pots and aetherium and how to avoid them using tools such as tenderly Co I'm currently working with the etherium foundation on a program called spot check where we look at contracts that are deployed to main net or nearing main net release and check them for security issues we often work directly with projects but we'll also look at ether scan verified source code in order to to discover things that are being launched to reach out to them and see if we can provide any assistance now in doing so we often find honeypot contracts and have seen people lose money in real time and so I'm hoping to raise awareness of how you can avoid honey pots using pre-flight transaction tooling which we'll be demoing later in this video so let's talk a little bit about what a honeypot actually is in this video as it relates to aetherium specifically how one might fall into one of these honey pots how they might get discovered and how using your understanding of solidity they could trick you into sending it ether when it doesn't do what you might expect it does and then we'll show how you can avoid falling victim to one of these honey pots using both tenderly Co and also some raw JSON RPC calls to really show what's going on under the hood and these tools should work for most honey pots you run into allowing you to check what a transaction does before you actually send it on chain so let's talk about what a honeypot actually is so there's a scammer out in the wild right now and they operates by deploying smart contracts to aetherium and these smart contracts are designed to take your hard-earned eath and in order to encourage you to interact with their smart contract they put a small amount of ether on that contract and verify its source on a thir scan now they will just let this sit there this can sit there for many many days they'll usually refresh these every once in a while so that they appear towards the top of the new verified source code contracts but eventually at some point you as a solidity developer might be reading through verified source code or stumble upon this any number of ways and you'll say you know what hey I I know how to read solidity what does this thing do it's only you know it's not very long contract in the stores value so I'm kind of curious like what is this thing doing and after reading it for a while you noticed like hey you know what I think I understand how this contract works and if I send this contract 1/8 well then I think that I can convince this contract to send me 11 8th back right and all that code is executing on the smart contract and nobody can interfere with this like there's basically 10 eath there for the taking if I just use my solidity knowledge in order to take advantage of this contract and so imagine your surprise when you finally do get around to crafting that right transaction putting the right transaction call data on there and including your 1/8 and sending that you know this curated transaction and instead of it sending you 11 eath it just takes your 1/8 now this will just sit there until the scammer finally comes around and realizes that somebody fell into this trap and then they will send their transaction that actually does withdraw this 11 eath because they registered themselves as the owner of this contract so how might somebody actually discover a honeypot like this like how are you as a solidity developer going to be browsing through ether scan and why might you pick this one out as one to to interact with well let's go to let us go to either scan and there is a function here for viewing recently verified smart contracts this is a list of contracts that people have uploaded the source code to and Ito scan has verified that that source code matches the byte code on the blockchain so just take a look at the first one here there's the address there's its name you know here's here's all the code that powers that smart contract now that one doesn't store any ether so it's probably not that interesting some of these do store quite a decent amount of ether here's one stores you know two million dollars of eath and we can just sit here and you know go through pages and pages and pages of these now I previously looked about where the the most recent one of these these honeypot contracts is it's somewhere around here but you know you can see like lots of contracts are uploaded here most of them don't have ether attached to them so the ones that do usually stand out a bit more so here's one that has 597 here we got one over here it's got see here 0.080 this one's kind of interesting check this one out we have a contract here with 15 eath stored on it a B quiz so let's check this thing out so this is the honeypot contract in question and this contract is is very very short right this contract is only about 50 lines and there's lots of white space there's no includes there's no you know there's no there's no nothing fancy here and it makes reading through it and thinking that you understand what it does really really easy even though there are some subtleties to how this contract behaves so the first thing that we'll notice is there is a function here called try that accepts a string response and anybody can interact with it the only restriction here on message sender is that it cannot come from a smart contract otherwise anybody can interact with it this is the the this is the special code for you know the smart contracts cannot be the one that sends this transaction and what we'll see here is that it's going to take this response that you sent in it's going to hash it and if that hash matches a hash that was previously stored and you sent along more than one ether it could be in a 1.1 then this contract will transfer you its entire balance now that seems like a pretty good deal if we could just understand what this string is so let's explore a little bit more about what this contract is trying to do well we see that there is a question string and a response hash that are stored on the contract if we go over here we can look at the read contract and we can see it says a farmer has 17 sheep and all but nine died how many are left okay so it's some sort of a weird little riddle and you come down here and see oh wait a minute here is the the place where this whole thing was kicked off this is the place where they set this response hash this is the place where they set the question that we recently read and that response that was hashed and stored is was just an argument to this start function call so if we could just find where they called start we should be able to see this response here right I mean this is aetherium nothing is private if we can just find the right bit of data I can't you know and you're thinking to yourself I can't believe that the people who wrote this contract didn't know it was gonna be this easy so let's come over here and let's check out the contracts the the transactions for this contract check out the transaction hash and say here's that that's the contract employment there's only one other one so it's gotta be it right yes sure enough they called start with a question in a response and look that data is right here that data is there for us to just look at so there's a nice little two code input data button here that's where ether scan will actually kind of parse out the arguments for you in a really really nice way and look at that the answer here is nine and look at there's a capital e here so they probably think they're being a little bit tricky and they maybe that's why nobody else has tried because they didn't know how to how to look at this response data okay well we got the answer so all we need to do in order to to take all of this smart contracts eath is just pass in that answer here that's nine with a capital e it will hash it that hash is going to match the response hash that was set here right so it's gonna you're gonna get the exact same value let's go ahead and include 1.1 eath me know does it really matter we're gonna get it all back anyway when this contract sends us its entire balance right so let's give it a shot so we can use ether scan to actually send transactions to the etherium network over in this right contract tab we can say well let's connected to web 3 it's like yes I know bad things can happen and I have meta mask here you'll see a meta mask pop up in a second let's say the amount we're gonna pay here they'll say we'll send one point 1/8 and the response I just copied and pasted from before it's this nine right and so let's go ahead and say yeah let's go ahead and send this transaction pull this over now this account I have here doesn't actually have any eath on it so we don't we're not gonna run the risk of accidentally sending this transaction but if we did if we could click confirm here this is a transaction that would afford 1.1 eath with this call data to the to that contract and what we would find is that plusses contract lands we have lost one point 1/8 we were never going to withdraw that contracts balance and so let's say that instead of sending this colonist transaction directly to the blockchain after we signed it and propagated it let's use a tool that would tell us before we send the transaction what that transaction is likely to do so I rejected that and I want to use I'm gonna copy the address of this this is our a/b quiz right here I'm gonna copy this address and let's pop open a tool over here called tenderly this is a service that offers some pretty nice little blockchain inspection tools allows you to monitor for events it allows you to now just look at a lot of different aspects of etherium in an a fairly deep way including you know analytics and monitoring and it's I find this to be a very very useful tool and one of the things you can do is you can let's see here let's go ahead and create a new project and this project is gonna be like you know quiz check and by the way tenderly has free options so you can just come up here and sign up for a free account and I believe although the functionality I'm going to show you are are freely available so right now we have a brand new crop project this allows you to kind of deeply look at certain smart contracts that you tell this project about so I copied and pasted that the address from that a B quiz and it actually integrates directly with ether scan it knows how to fetch the source code and the API directly from ether scan so ice need to say import and there we go okay now it's showing us transactions that have interacted with this contract already but one of the neat tools that tenderly offers is the ability to simulate a transaction to specify all the attributes of a transaction and say don't send this to the network with the private keys that have signed it just tell me what would happen if I did send this transaction so over here we have a a simulator button and we can run a simulation and we've already given it the address of this a B quiz it knows about the all the functions that are on that contract and the one that we were talking about is try so we can come over here and say well I remember the one thing that we had to do was include a value of over one youth so let's just do one point one eath and this actually uses way so it's 10 to the 18th so this is one point one in the 10 to the 18th signifier and the answer that we had come up with before did we extract it from that that start was 9 right the capital e so let's go ahead and we can set any from address we want here it doesn't really matter which address that we use because we don't actually need to have the private keys to that we'll just see if this address were to send this transaction what would happen but we're at we you know we could put any address in here we want but that zero address is just fine for our purposes so it doesn't have any special logic in there for handling the zero address so I'm gonna click simulate transaction and what we see here is all the attributes of this transaction that is succeeded how much gas it used you know what what we actually called and what we see here is the it is like the call trace stack of the interactions that happened as a result of this transaction now until you get a little more familiar with these tools it could be a little difficult to see what has a failure here but this is supposed to list every unique interaction that happened within this contract and without with external contracts it's not gonna actually step through but it'll tell you when it tries to forward value to somebody it'll tell you when it tries to call functions on other contracts and the fact that this only has the function call itself means that it accepted that ether and did nothing with it it never tried to send you ether to show you an example of what it looks like when something does send ether I have a contract interaction over here with with I'll just go ahead and search here so here is a transaction that happened in just some random with withdrawal and what we can see here this is a transaction that actually did happen and we can see that this thing called withdraw and there's a call here where it actually said you know message to us sender transfer so we can tell it actually reach this line and attempted to send this value and since we don't see that over here on our own simulated transaction right there's no call to our address this thing never actually was going to send the the ether to us because we didn't satisfy this constraint here and what we'll talk a little bit about why about how that was not satisfied now tenderly is a very nice tool provides a really nice user experience around stimulating these transactions but it's not technically magic it's it's a nice slick interface on top of functionality that is also available on JSON RPC and I'll show you that right now this is a curl against a JSON RPC node that I have running and it tells us it instructs the RPC that we would like to trace a call and it provides the full details about who is you know who is sending this transaction where this transaction is going to and the call data in this case it is somebody who holds wet this is just some random account I found out of the account holders this is the wet contract address and this basically says withdraw and then this value over here is how much we would like to withdraw so we're gonna go ahead and hit enter here and we'll see that the trace returned to elements in an array the first one is the is the initial transaction this is the this is the from this is the to write this is the transaction that we ended up sending and what we can see is there's another elements here that the there was another transaction that occurred because of this one and that is that the wet contract itself ended up sending - you know this is to the same address here right - a bunch of value my value in this case is ether so we can see that's when you know if this person let's go look at the same here if this person were to call with with this data with would send them 1/8 and we were able to simulate that transaction even without you know having the private keys - to this person so similarly we could use this same tool to simulate the transaction that we were going to try to withdraw that a be quizzes eath so let's go ahead and do that this off screen a little bit we're going to let's go back to the this contract here now a nice way to come up with the the input data that we need right because input data was one of the one of the fields that we do we need to come up with we can go over here to write contract and use meta mask to pop up this little window here right this is again the one where if I click to confirm I was going to lose all my money but it'll actually tell you what input data was going to use so we can just copy this data pop it on over here and we're going to come up with our own little trace call so again this isn't with anymore so the data in question is the the call data that we pulled out of at a meta mask now who are we sending this transaction to well the the AV quiz contract of course so go here copy this address so you two from I don't mail to keep it same right this is that with holder from before it doesn't really matter what the from here is because there's no caller restrictions and then we should and then one last thing we need to do is that we actually have to include value we have to you know include some ether value so I'll do this over here you can see it better value it gets JSON value now I need to let me do the quick math over here okay so this is the hex value for one point one ether all right this looks good so here we are we are sending a JSON RPC payload to by aetherium RPC node to the ABC kb quiz contract with the data that guesses the value nine as the string that we believe is the answer to this riddle we are saying what would happen if we also included one point one ether to satisfy part of that if conditional let's go and run it and we can see the same output here right we can see that that there was a that first level call right this is us calling that contract with a with the valley this 1.1 ether but remember like in the in the West example there was another one where West sent us ether there is no one here where the where the a B quiz contract sends us ether back based on us getting the right answer so we were able to figure out what this contract would have done with this transaction before we committed to actually sending that transaction okay so now that we've explored how to simulate these transactions let's look a little at how we might and what is causing this transaction to fail like why how did this solidity contract trick us in the way that it worked is actually kind of an abuse of the way that ether scan displays data displays transactions so we assumed that this function was the one that started this this quiz that kind of activated this response hash but it turns out that that's not actually what happened there is another function here which which will also set the response hash but it will set a response hash directly and this is a response hash there's just a random value to which there is no known string that answers it right in here they passed in a string and hashed it here they just passed in this hash directly but we noticed that you know we never saw this new function being called if we come over here to this actually I didn't complete that thought right once this response hash is set this response hash equals 0 will be false and will actually not do anything in this start contract at all even though that was called and so the question is how are they able to call the new function before they called start to and to make this these lines here and Noah and when we look over here transactions we don't see that call to new write new was the one that's is being called first that is preventing start from actually taking any any action and the answer has to do again with internal transactions so even though it doesn't show up here there's an internal transactions tab in an advanced mode and that allows us to see that there was some other interaction right this is a new transaction we hadn't seen before that happened before the start that we were looking at so in a way they have hidden a an interaction they had with this contract that called this new right so here's you can see it's like it's targeting that a B quiz contract here it's passing in this call data but because they made it an internal transaction it didn't show up in the place that we expected it showed up in a different tab and we assume that if start was called we assume something about what it would have done to that response hash variable another way we can we can see that something a little funky was a play here because if you look at this this transaction here right this is the one that called start with the the question response this is the one that didn't actually do anything there's a little tab here for state changes and this tab tells you all the storage slots that were updated on a contract there'll be like a little drop down here notice there's nothing right here basically saying that nothing would changed on this contract right that it that if was false and it never ended up updating any of those storage slots if we instead go back and look at the internal transaction that occurred right here right this is the internal transaction where they called new first in a way that was not apparent based on ether scans interface and we go to state changes this is 0 X you know 72 a right this one there is a down arrow here and we can see all the storage slots that were updated so this transaction over here say this is 7 to a as the a B quiz we've been talking about come back if we look at that transaction the transaction itself was not destined for that 72 a contract it proxied it through another contract I also have some examples here of some previous examples of people kind of falling for this trick so here's a few transaction hashes that I I figured out before we before I started this this video so here we have somebody who deployed one of these contracts you can see it looks you know remarkably similar has a different question but if you if you look here see somebody oh you know what I'm gonna send one ether and get the right answer and they actually realized they made a mistake by not including enough ether and they tried it again with 1.1 and but they still weren't getting that response hash correct and so they end that I ended up losing 2.1 so here the attacker deposited ten eighth and then the attacker up here in this transaction withdrew 12.1 Ethan you know there's there's many many versions of these so here is you know deposited ten somebody took a guess at one here's another one here's you know ten one like these are all different versions of somebody somebody falling for this here's one that I kind of like so again this is been going on for a really long time right this is you know over five hundred days ago somebody ended up losing for eath here they took two different shots at guessing and again you know somebody to pot this hacker deposited five efj and they walked away with nine actually that first one there the comments on that first ones a little a little funny so that I already showed you this one but in this comments tab over here you can see there's like a little discus comment if we look at it ten out of ten would get honeypotted again I don't find it kind of funny so somebody at least saw the humor and you know losing two point 1/8 so yeah but that's what I have for you today if you found this interesting you know you know please feel free to reach out to me I'd love to talk more about aetherium security and again I'm working with the EF to provide free quick checks of security for for various aetherium projects that are nearing or after maintenance employment so you know if you have a project that you think could benefit from that please feel free to reach out to me my email address is here on the slide and I'll also make sure that I include it in the show notes all right talks later bye 
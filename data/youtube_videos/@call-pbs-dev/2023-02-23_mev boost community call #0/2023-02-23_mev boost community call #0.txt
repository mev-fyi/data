okay everybody Welcome uh this seems like a pretty good chunk of people to get started with uh people more people may filter in uh but yeah thanks everyone for coming um this is uh nav boost Community call so we want to talk about my Boost we want to talk about relays we're going to talk about Builders uh there's an agenda I linked in the chat if someone can see that let me know um there's basically a lot to talk about uh and I only claim this will last an hour so we'll see what we can cover um yeah I'll send that again it's just the same Forum post there you go um yeah let's see here um I think we'll just follow the agenda I mean I think we can keep it pretty lightweight um I don't know if we need formal introductions or uh if anyone would like that uh you know just I guess ask um I'm Alex Stokes I research at the F and I've been looking a lot of Med lately um and yeah it became clear I think to all of us that we needed a sort of discussion point for at least the upcoming capella changes and then you know more broadly the future of where all the sudden so I wanted to put this call together and that's why we're here so again thanks everyone for for showing up so to kick us off uh you know let's just run through the agenda we'll talk about uh the Builder specs first so again the main thing here is updating these for capella there is a V3 that was released last week I believe I'll just grab grab a link if I can get my browser to work and yeah I mean the main thing is updating everything for capella again if you don't know this is the like core API that's the business clients use to talk to this Builder Network that we have that map boost helps orchestrate and for capella the main things are just updating the types of uh these apis so that they support the new formats writing withdrawals and capella and uh yeah that means that there are changes along the Builder apis so this is here um what else I don't think there's too much to really talk about specifically for this uh it's pretty straightforward just updating the types like I said there's another repo of relay specs that uh flash plus currently maintains I don't know if Chris or someone wants to give an update about that um I know Justin has been working on Justin troglia but I don't see him on his call Justin isn't here he translated this notion apis back for the Builder into a proper Swagger specs and there is a PR for the really update that it's the only change here is that it submits block pillar submissions in both Bellatrix and capella versions that should be that looks releasable but there may be a issue with how it is played on the display UI so I'm gonna kind of wrap it up soon okay great so the main change was again just uh basically supporting either type of block across the fork uh in the Box submission apis was that right Chris I was yeah all right yes exactly it's only this change okay great um so yeah so we'll get something out there and yeah generally the main implementation of that so far is the flashbots relay which we'll get to uh a little bit later but yeah I mean if if you want to make a conformant relay then uh these relay specs are the place to start while we're here I did want to talk about uh specs generally so there's another PR for denab so this is the eip4844 changes and things like that uh I guess I'll drop a link in the chat here as well um I just want to call these out uh Jimmy Chen has been working on these I also don't see him on the call but that's okay [Music] um yeah generally there'll be a bit more involved changes for uh this upcoming Fork uh with respect to the Builder apis uh just because now we have these blobs and there's still some changes or some some design decisions being made around how the bulbs are being passed back and forth and that has some implications for the Builder API so this PR is you know it could still change but I wanted to call it out just so people are aware of it and that's probably that I don't know if we need to discuss it too much um so yeah so that's sort of the like very high level on the specs uh there's a question yeah go ahead which is I mean I pushed it in chat too but basically and um when beating the Spectrum what expect that to have been updated with respect to or with regard to the change that came out of um sort of the Austria interop event which is um suddenly stronger push to decouple blobs and blocks that feed the blobs PR yeah exactly uh so again I know Jimmy I haven't reviewed this PR in depth because again there's still some some thrash around that part of the 444 spec uh but essentially I know he like Jimmy's been tracking uh those changes and so yeah I think the main thing is you know if we have like one blob versus like many uncoupled blobs then you essentially need to send over like many of these like blinded blobs or blinded Roots you know however that ends up looking like um and I believe this PR reflects those changes um but yeah I need to go I don't know to Terence do you know more so I think it's also coupled with how validators signs the blob which is speaking API uh 302 per request so yeah but I don't think this is like a blocker blocker so I think yeah we can take out time to design this cool yeah I mean I think yeah this will just kind of come Downstream at least with respect to Builder apis it'll just come Downstream from um you know whatever decisions the CL clients make so should be pretty straightforward and yeah this was another uh PR meant to link in the agenda so thank you Terence for dropping us in the chat um this is tangential um not super related but it will have implications like we said for the design so something to keep in mind if you're following this stuff um yeah so I think that was all I had for the specs right now uh if there are no other questions then we can dig into probably the main topic uh which is Capella hard Fork readiness um so there's like a couple things here um right the first one is like implementation of the changes and all the various software that we have out there a big one was getting a lot of like the real relay operators which I believe are on this call and just letting them know like hey you're gonna need to do something for this hard Fork coming up um yeah so I think we can just start with uh maybe Chris if you have a an overview of the capella changes I think you had some documents that described them that was really nice yeah I put them together and posted them in the site to chat um there have been changes needed to a lot of layers including the relay the Builder the validation notes math boost is all wrapped up and then also to the CL client to uh we use our prism Fork both to trigger the block building Pros progress but now we also added a data endpoint to get the withdrawals so they really can validate them when a pillar submits a block to filter out invalid withdrawals so they may have Boost really from our side is dependent now on our prism Fork which is only this additional endpoint and there is work on a SSE subscription reignited hopefully that the pulls through to have an SSE event standardized across all cell clients um that that will provide the withdrawals timestamp preference hour and everything else and then an ecl client with that could be used to to drive a relay that that should be a relatively simple change on the really two all in all on the relay there are enough for open PRS that are one leading into the other to separate out the individual changes they all run on the ssiang network on our really there we've um cutting a few thousand blocks through and and basically all the changes throughout the stack are there they're documented in the site chat and we are just wrapping them up merging them and getting them into main branches uh early next week I think the work on that will be done I think that's a rough overview of where the flashpot stack stands I think all our changes are basically there and pretty complete we don't expect animator changes anymore it's mostly just polishing and merging it in yeah and I think the next steps for us are participating than in the zipoliantically upgrade and it would be great to have as many different relays be part of this tested upgrades as well so I think that's like the rough overview where the flashbot stack is and should be a good reference to implement into any other code basis okay great thanks for that overview um Dustin had a question in the chat so we'll just address that right now yeah so there was this one PR to basically expose the withdrawals because that's like the main change with capella however you know if we just step back a second we say okay with each Fork if we have to like keep adding things for this Builder functionality then like it will be a little silly to like keep adding new endpoints so I think instead we're leaning more towards having this one SSD endpoint that couples everything together uh Chris slick linked this GitHub issue in the chat and yeah again I haven't uh been able to review this yet I've been out of office this week but uh yeah it looks good just from cleansing at it and um yeah this is the place to start in terms of having this information exposed I think the main thing is like having relays have access to this information so like Chris said like right now they'd have like a prism Fork um and obviously that's not great for client diversity and ideally you could plug any clients in and there are essentially you know I'm sure there are other use cases for having this information exposed as well so I think it makes sense standardize the sensitivity endpoints and um yeah hopefully uh that comes together pretty soon right I'll say so far the thing that is at least encouraging about these is that the Rand out and withdrawals are both very cheap for a CL I mean they're to calculate um so there's no bill cost to doing this service bye okay great yeah that's good to hear and yeah I mean hopefully we don't add anything in the future maybe the blobs can get a little hectic if we need to somehow send a bunch of data around but uh yeah hopefully this light with this endpoint remains lightweight and um yeah one question I had was essentially like how this uh Michael Sprout suggestion handles like uh building on multiple heads but uh yeah again that's probably uh something I should just go look at and might be a little a little in the weeds right now um yeah so we talked about uh the flashbot software stack I don't know if any relays want to chime in I don't know exactly yeah what they're what the implement or sorry what the representation is uh with other relay teams but if someone's here and you would be able to like chime in on your Readiness that would be great um if you could also like have a relay ready for sepolia or Gourley like that would be great as well um you know we'd be sure to include you in different testing efforts going on uh with respect to that boost for those hard Forks and the ultrasound relay runs a on girly and I I guess one question is do we have dates for girly already for the fork we do not yet uh so paulia is happening I believe next Monday or Tuesday and yeah that being said um yeah we could aim for gorley for for relays and yeah just coordinate you know asynchronously to make that happen yeah and I guess if sepolia goes well my feeling is Gordy would happen in like the two weeks after that so like mid-march assuming nothing goes wrong on sepolia seems uh realistic got a black native we're also we're not running sympholia so we will be testing on quarterly so we'll definitely be paying a lot of attention to when that date is we'll be ready to to test on on our quarterly relay okay yeah I mean that sounds good I think that makes a lot of sense as well um Supply is a smaller nut and um yeah I think I think we can have a lot of these changes together and then uh you know once there's a fixed quarterly Fork date then we can make the rounds make sure everyone's ready and uh hopefully have like a nice dress rehearsal so to speak uh before I mean that okay I will let me go find the agenda I just lost it because I have too many tabs I've been on my computer it's always dangerous I guess I could just click the link I dropped um what else what else so okay um yeah I don't know Chris if you wanted to give like a really brief update on XI Jang just because uh I know that was like a huge push and uh might be worth calling out just so people are aware uh sure I'm not sure there's much specific to say just that we uh I'm gonna put the whole stack up there and keep deploying and working together with the different CL teams and peritos Tool uh tests the whole stack I I think we are now at the place but there is no errors and everything works post Fork I think that the next interesting point of time will be when when it's actually part from before the upgrade to after the upgrade on the next Testament not really as much as to add for sharing other than yeah this was very useful to test everything yeah that sounds good um definitely I think uh well one thing we can do is hard Fork testing like actually testing the boundary and uh let's see uh sorry I was looking to see if someone else was on the call but they're not um so Mario at the F has been working on hive support and it's pretty new uh so I don't know the extent of the capabilities but um I do know they've been testing like the circuit breaker idea and Hive which for those of you that don't know Hive is like this like automated client testing framework that uh we have and yeah so it's really cool really exciting to see the Builder support and yeah Chris just dropped a link there in the chat um this was looking at these are the results of like all the different clients and then how they behaved uh under the circuit breaker scenario so that's really cool but one thing I would like to move towards is uh you know building out this functionality and for example one thing we could do is then you know essentially have Med boost relays different components uh under these hard Fork scenarios so starting before of work moving through the fork and then you know after the fork I think definitely you know we'll generally have devnets where we can test like you know pre-fork post work all of that uh the hard part are like the part that's we just have fewer shots that is the actual transition um so yeah to the extent that we can have automated testing there I think that's really valuable and yeah it's really exciting to see uh this Foundation start in hive okay uh we talked some about timelines and things uh I did have this in the agenda so I was called out I've been working on uh arrest implementation of essentially the my Boost stack and it's still pretty early um I'm a bit sort of bandwidth constrained on like what I could build out but that being said I have put together this thing I'm calling a mimple builder and the idea is basically to emulate the Builder apis just using the mempool of a local execution clients um dbd to see where this really goes I think some of the clients are already interested in using it for testing so you know one example would be in the future um you know the say the dev changes are like done at a time and then we could actually do a lot of this early testing on the on the CL side um with that stack and basically just uh wanted to call it out if anyone's interested check out uh I guess it would be helped to have a link take on this repo and yeah we can we can go from there so yeah Chris Chris was asking like what do I mean and so basically the idea is there's a conscious client that's like keeping track of consensus there's a execution client right that does all that stuff and then basically there's another component which is this Builder and basically it's just building blocks from the mempool and so you know rather than say like having to have a prism Fork across to like do all of that instead you can just run this one piece of software and it basically like man in the middle is the engine API and does all this stuff um to orchestrate all the right pieces at the right time yeah I should put together more documentation which I'll I'll put in like the readme of that repo uh I haven't done that yet and yeah we talked about timelines a bit so yeah just again relay operators if you're here uh someone New York Chris or someone else will be knocking on your door for the girly Fork so just keep an eye out for that um and it's a question sure yes sorry yeah so um so when the readers say that they won't be able to test um Teo Gordy is because the code is not ready or it's because they don't have any place to test for example they don't have place to run a relayer because um if it's a later if the code is ready I mean I feel like you should just test today right because like EF like devops we do launch devnet every week right and then we can easily plug in your relayer and uh and then test it right so I guess like if I guess there's no reason to wait until growthy unless um unless it's called it's not already because the sooner we can test it the better because directly after growing if this is the test you probably won't do man net in two to three weeks right and then if there's a bug it's gonna be a very stressful two to three weeks if you can test me today right yeah do any of the relays want to chime in to that question I mean for the ultrasound relay it's basically a two two people team with a very limited budget and writing a relay just costs about uh you know one to two thousand dollars if not more uh per month and um we're just very constrained from a come up a kind of Human Resources standpoint the other thing worth mentioning is that in order to be effective as a relay you need the builders to connect um and uh you know I've spent the last two three months trying to convince the builders to connect to the ultrasound relay it's kind of almost a full-time job um I guess we could have dummy Builders um that I spin up but yeah that that also adds to the uh to the complexity of setting things up because now we'd be in charge of setting up both the relays and the builders and then we also need to coordinate with the validators in order to have a meaningful you know connection so we do have those two days so Chris please correct me if I'm wrong last time I checked we do have a mod Builder we do have a mod validators and it's actually very easy to set it up as long as you can provide the relay image then and that's all we need and we'll do the rest so they're ready to get a few different uh go ahead Chris all right just how to say the flashbox Builder can easily run on any test net and you can even send it some fake bundles to make valuable blocks and also this Builder can act as a builder and a really validation node in one instance so so basically if you run really and have a validation node you can just use the Builder to have it fulfill both the validation node and the block building task on testnet in like a single process so that's kind of like as easy as I think it it gets it still as involved as running acaf instance but I think if you have some funds to send it valuable transactions then it should be pretty easy to get uh winning blocks through any test Network okay so I think that's all true I think kind of Justin's bigger point was like just like capacity wise like having someone from each relate team to like go and do all of that right um so that being said what I see is you know if each Relay can say yeah like Chris said in the chat here like speed up Allison for is like a lot of work um anyone who has done it so many of you on this call have you know it's a lot of work so all that being said um you know Terence asked about devnets and we do have a lot of automated tooling uh I say at the EF to like do that and so what seems to make sense to me is to say okay if we can all coordinate with the relays to say okay you know points to like one you know well I don't think all overlays are open source but assuming yours was then you could point to like you know software release that you say hey this is ready then from there um you know we can start including that and all of this relay testing and again I don't know if we need to like take up everyone's time now but definitely I think it warrants happen that probably have more focused call at some points for like relay testing and that strategy broadly where this would fall under yeah yeah it's lucky we'd be happy to we'd be happy to work with that Chestnut to uh to try it out I mean I I would do agree though with Justin that uh there is uh there's a certain amount of resources that we have to spend to uh um you know to spin up an additional relay spin up the Builder spin up uh bundle injection into said Builder um all that stuff you know to spin up the full pipeline to be able to test that so it's not it's not just at least for us it's not just spin up a Death Note and you're good to go I wish it were that easy right and so I think we should like be well okay Chris dropped a question um log native do you want to address that oh yeah uh crazy we're just talking about the block native stack and I just was curious how far along like you have the the Dreamboat implementation right uh are you already working on the upgrades are you how far along is that uh we're working on it internally we're looking at it internally trying to understand everything we need to cover um but we haven't committed any code to our repo yet to uh to accommodate the uh you know capella okay thanks yeah and so just to like be clear I kind of hearing two things here there's like more like okay the relay operators will like have this like software set that they run and I think that's kind of what Terence was getting at was more like you know if there's this like fixed software artifact how can we test that and like I think the things I said follow from that there's also the second thing which is like you know at the end of the day relay operators will have actual deployments and like it would be good to test those um I think given the overhead this is like tricky to ask every real operator to say Hey you know you should be spitting up you know for example like every devnet that we have for for each work that's like a lot um so it seems like a good compromise is to say okay to the extent that we can if you can produce like most of the software that you're going to run then we can put it into this like more automated testing framework and then for the like you know so actual deployments we would test those you know sepolio gorley these other longer standing test Nets that really operators will already support um that would be my take on the testing here Dustin asked the question will there be a way to find the set of real operators supporting support around the fork so other than just going to the different operators pages and seeing the information they put out I don't think so it sounds like just flashbots will be operating a relay for sepulia um someone correct me if I'm wrong well definitely not dream about which is fine I mean I think um for like future hard works it would be nice to like try to push for that um but again I understand people have stuff going on um I think there's a lot we can do around automated testing kind of like I was alluding to um and yeah from there we'll just do our best uh I don't know who iPhone is but uh the thing is you can run a relay on sepulia um it's just okay hello Sam um that's fine you can run a relay on sepulia it's just then you know you would just have to be able to uh you know have people use it um yeah like Chris said you can always unrealize uh the Bel Air set is closed on topolia and that's mainly just to keep it I have you know have this like very stable testing test net compared to say girly where there's like much more open participation um and yeah they're just kind of biasing towards different use cases yeah so validators still do have to connect but the you know the idea is that that's something that relay would then have to go and like do um and yeah that's absolutely I guess if we really want to do to like test on sepulia then yeah I mean that's a fair points like that being said I think you know people on this call know most of the supply validators and so if the relays you know if if it seems like it's worth testing then we can make sure to like do that okay um are there any other relay questions or things like that around the hard Fork um otherwise okay yeah Sam I can DM you and we can chat about uh what you have going on um yeah so are there any other uh sorry coppolia any other capella things and otherwise I'd like to move to like more of an open discussion part of the call a big thing is this optimistic really idea from Justin although I see Terence just to muted yeah so I guess one more thing um is what bringing up that um post capella or chappella that Clans will have this future so this feature is that the clients will essentially compare blood value between the local build block and then the build and build block and then choose whichever one is the highest right so if today my local guest gave me a block of 0.1 each but then the highest speed of block is 0.05 then in that case I I will use my local one I don't think this is going to matter that much in terms of like relayered and then the MVD boost because the validators will not sign it anyway but just letting you know to get your monitoring um your insulated whether it's monitoring the relay may be surprised because if it's the highest paid by cycling insulated and that's probably because the auditor is using the local higher speed so yeah yeah thanks for bringing that up so that's another uh important change we had with capella was changing the engine apis so that when a proposer goes to get a block uh it basically could ask this like local pathway or this remote pathway via my Boost and uh we now return the actual value of the Block in the local pathway and the cool thing about this is now you can put you know your remote bids from different relays and buy extension different Builders uh in comparison with with what you have locally um there's a number of reasons you want to do this a lot of them around like solution resistance but point being is um that's really cool thing we added in Capella and yeah that is a good point that Terence brought up if you're testing or just looking at you know main net performance generally um there there's more into the picture than just like the bids that you sent or the other relay sent um so yeah um cool one thing let's see well yeah so I had the thought to like add that into the hive testing we discussed that a bit on the CL call this morning and yeah that's something that will happen but I don't think we need to go into more details here um that's more of like a CL thing in my view with with that change on getting the local block because you know the effective bit of that block um will the will boost update its Min bid strategy so that it's Dynamic based on that so that the relay boost will no longer give you a block if it's below that Min bid which is determined by your local block yeah um I don't think anyone's thought about changing my Boost to do this the way that it works is that logic actually is pulled in a layer deeper into the beacon note and so the consistency layer client would say okay you know regardless of whatever that boost sent to me I'm going to have like the highest you know best remote bid and then now I have this local bid and I can still say okay if vocal is higher then prefer that one over the remote one um does that answer your question yep make sense thanks yeah I guess separately there's still this mid-bid option going on so that was something we added in that boost that was really cool um I shouldn't really say we but that was added to that boost and uh yeah that was super cool again for like these similar concerns around search and persistence and um yeah that still that still is in play so you would need a remote to bid above that floor to then even get that into your beacon node um and then still separately you have this local comparison happening Upstream so I want to save some time to go into this optimistic relay um Justin was able to join us uh I think maybe Mike as well has been working on it um oh yeah he's here so yeah let's see I'll grab the pr and then yeah maybe Justin or Mike if you want to just give a sort of high-level idea or summary of the idea foreign Mike is the main person working on this so Mike do you want to go ahead uh sure yeah let me um let me drop a few links in here first the actual PR um we made a PR against flashbots um that boost relay and hopefully that's then okay and then also I guess this doc provides a little more context on the reason um the reason we're interested in this so maybe it makes sense to give like a a three minute elevator pitch um and then we can kind of open up the floor for any questions or anything um yeah I think it might just be helpful to run through the flow really quick I'm sharing my screen right now if you're not looking at the zoom call then you can check out the the link I sent but basically the um the high level picture here is to kind of change how the block submission flow works so this uh I guess the sequence diagram shows the current state of these non-optimistic block submissions that's what we're calling kind of the the status quo where the block validation happens before a bid is marked active for the Builder so the relay sends the execution payload to the validation nodes the validation nodes confirm that it's valid and then the bid becomes active to win the auction and that all has to happen before get header is called from The Proposal perspective so the uh oh sorry that has to yeah that has to happen before get header because get header Returns the the max bid from the relay so what we're proposing here with the optimistic relay is to actually Mark the bid active immediately so when the Builder submits the block um kind of immediately we say okay this bit is active it can win the auction and the validation happens asynchronously so we we basically queue up in a in a different go routine the the simulation of the block against the validation nodes and the um that happens kind of post the bid being marked active the reason to do this is because at a lot of the winning bids come in right at the end of the slot and the validation takes some amount of time because it's you know it's a call between the the relay and the validation nodes and there's some amount of time that is involved in just simulating the block against Geth so if we remove those those extra milliseconds from the end of the slot then the bid can the winning bid can come in closer to the to the 12 second Mark and thus contain more Mev both for the Builder and for the proposer so the kind of obvious risk here is that if you serve an invalid block to the proposer and they sign that header and then no valid block is produced then you have a Miss slot this is kind of the the worst case scenario and the way we plan on defending against it is having collateral held for the Builder so any Builder who ends up submitting a block that wins an auction but doesn't actually produce a valid block on the Chain their collateral will be used to repay the proposer who who lost out on them on the slot so yeah that's kind of the high level idea I guess we can talk more specifics about performance we've done some work on actually really understanding how much time this could save for specifically the ultrasound relay um but yeah that's that's the high level picture in this scenario so I understand that the that there's some collateral with the builder but as far as the validator is concerned their interaction is with the relay so how does the relay recover from damage due to uh builders uh you know not providing the block I mean how how does the relay actually is made whole in its sort of reputational damage when um when it's not part of the collateral right Justin so I guess in terms of you know making the refund to the proposal the relay has all the information it needs because it has the fee recipient in the registration message um and uh from from my understanding that there have been some um some refunds that have already been done by various companies including block native maybe blocks route uh uh maybe manifold also where there have been some bugs and you know there have been some refunds that have been given and I don't think there have been kind of issues giving giving refunds one of the things worth worth highlighting is that um you know the the proposal will get will get compensated with a delay so usually they they'll receive the execution rewards like immediately uh and they'll be accessible in the evm but there'll be a small DeLay So you know our our goal with the ultrasound relay will be to make a refund within within 24 hours um in in terms of the reputational damage for the Relay it itself um it should be fairly minimal if there's an understanding basically an education understanding within the community that it was not the relay that was at fault it was uh the the Builder and then the relay did the best which it could which was to refund the The Proposal uh promptly now one of the things that we intend to do as a Relay operator is every time we do such a refund be very transparent about it so we could have for example a log on GitHub which details why we made a refund for example exposing uh the bad block so that everyone can verify that that is invalid and um you know there's various things that you can do as an operator to try and minimize these uh these bad events one of them is if and when there is a bad event um making sure that uh you you ask the the Builder to fix whatever bug caused the the issue um another possible idea is to have some sort of a of a timeout or cooldown period uh for example one day um where in addition to punishing the Builder financially because the Builder is it's a it's a lose it's a pure Financial loss for the Builder they have no incentive to to to really do that in addition to the financial uh incentive um they they they would be disqualified from this optimistic relaying for a whole day and that would lead to further losses because they they wouldn't be winning as many uh auctions and if you want to be even more uh kind of stringent you can have a kind of an additional kind of a refund fee um maybe a fixed fee of for example 0.1 if um but yeah we we don't expect these these things to happen in practice uh very often and one one of the one of the reason is that if and when there is a build a bug over it's overwhelmingly likely that um the the that won't lead to a loss for the proposal and the reason is that uh roughly speaking we're seeing Builders uh provide let's say 50 blocks in a single slot and they're competing with with many other builders so let's say we have on the order of a thousand submissions uh per per slot and if there's even one of them which is detected uh to be invalid even if it's not a winning one that will lead to the the Builder being demoted so if there is a bug it's you know let's say there's a 99 chance that it will be a caught early it will lead to a demotion without actually being the winning block uh that that that requires a refund so in practice we don't expect to be doing uh refunds um and but uh yeah we do want to have all the infrastructure in place especially from a policy standpoint to to discourage bugs on the on the Builder's side to to just to start with okay thanks uh there's a question in the chat who reveals the body and this proposal um which I believe is it still works like it does today uh but yeah maybe Justin or Mike yeah so the relay still gets the full execution body from the Builder before the bid is active um so yeah in this case the the side Beacon blocker will still be published by the relay another optimization that we're thinking about and from our analysis of the performance of the relay we know this will have a lot of impact too is that the actual one of the bottlenecks of the block submission flow is the actual data like the bytes getting um into the relay of the block so the blocks can be kind of big so actually like decoding like both receiving the blocks over the network and decoding those and and um unmarshalling them into a a go object is like part of the slowness So eventually just having the headers come um basically having Builders only submit headers or by parsing the header first before parsing the rest of the body and then marking the bid active immediately we could have some some more performance Improvement but that's kind of a further on down the line thing what we're doing right now is is having the the block be published by the relay just to clarify on that are you suggesting that down the road that the uh relay would deliver the header without actually having the body from the Builder yet and taking on that additional risk you know latency risk with the builder right yeah that that would be kind of the the next Evolution um and then we would have to build in logic that says okay if if the header wins the auction but the body isn't available then we might have to like wait some amount of time and hope that the the rest of the body comes in over the network um so yeah it this is introduces some more complexity so that's why it's it's not what we're proposing in the initial version but it's something we're thinking about this is interesting I guess my only feedback here is like if the panel is involved it right then the block is missed but the block actually contains more objects than a payload for example the Block in his attestations be positive and withdraws right so therefore it kind of impose like a little bit of negative it's it's penalty to the chain because it's today like a lot of blocks are missed then are we gonna refund those certification rewards and Instinct limited rewards and stuff like that so I I think the the point we're trying to make and and hopefully the the design goal here is that we're not going to significantly increase the number of missed slots right like ideally a missed slot should be an extremely rare event and and by by doing this refund thing and by having like a postmortem after every missed slot then hopefully we'll be able to see if this is causing a lot of like network degradation that we can kind of turn it off immediately um do you have anything to add there Justin yeah I guess um you know in the worst case it's One Missed slot per Builder per manual intervention so one that the motion happened it's not like they could be a mass number of Miss slots like we've seen in the past it would just be like a single isolated missed Miss lot we wanna one of the things that we've observed kind of empirically is that you know every day there's on the order of of 10 or um kind of Orphan blocks and in addition to that there's about one percent of blocks that are just empty uh because the validator just didn't show up um and these like provide essentially zero network degradation and optimistic reading would be you know at least an order of magnitude less uh more like several orders of magnitude less degradation than what we already have and not only that but the you know from a designer perspective right we've designed different blockchain to be extremely resilient like world war three great kind of resilience and even if 90 of blocks were empty um that the the the FM chain will still keep on running so in the grand scheme of things it's it's it's it's essentially noise thank you so I have a question around uh rollout strategy so the intent is to merge this into the flashbots relay right um and then from there would it be on by default or would you be able to opt in or maybe we haven't thought about that yet yeah so I guess the way we're doing the development now is we're running it on Gourley with the ultrasound relay we're planning on pushing it to prod and and starting with a very small set of maybe one or two trusted Builders the one nice thing about the patch I guess is that it's it runs the the flashbots relay kind of in non-optimistic mode by default like it takes a manual intervention to to modify the database to say turn this Builder Hub key into an optimistic Builder so kind of the default strategy is is what the status quo is today um we made it a PR against the flashbots repo mainly for I think visibility reasons I don't know if and and you know we can talk to to Chris about if this is something we actually want to Upstream into that or if we want to run it just on ultrasound in prod for a while to to harden it and make sure that everything's working as intended um but yeah it's definitely like opt-in um and we expect that starting with a very small set of of Builders and you know a relatively small amount of collateral we can we can test a lot of the different or we can just see how it runs and and if there's anything we learn from that uh not often professional it's often per Builder so I was I was seeing a chat from Anthony yeah Alex yeah I yeah I just wanted to call it out because I think a lot of the related limitations today are either just directly the flashbots relay or you know sort of minimal Forks of that code base so we should be very careful about what we merge in there for sure I mean our expectation is that you know because we're in the race to zero in a in a few months maybe even weeks if you're not running an optimistic mode then you're just not relevant as a relay um like one of the things I wanted to highlight on the builders is that I posted a message on the flashbot Discord asking if there's any Builders you want to be part of the early testing like we don't want to you know pick favorites and you know on terms of the builders and give them Priority Access to this so if you do want to be in the early batch of testing as a builder please uh DM us and we'll keep the amount of collateral you know low for example on the order of one Eve per per Builder and another thing we we kind of have talked a bit about in the stock um has a has a small section on it is this idea of the fact that small and other other realized b-sides ultrasound you know might want to adopt this um but might be held back by the kind of Financial and legal implications of holding collateral and so one idea we have to address this is we're calling um a guarantor like a builder guarantor and under this model the relay would make it known to the Builder that a slot was missed in in the case that a slot is missed um and the honest I guess the the Builder would be responsible for refunding at least in the base case the the Builder would directly refund the proposal that missed the slot in the case that the Builder either stops responding or kind of denies the to volunteer to to pay back the proposal who missed the slot then the guarantor would be the person who is in charge of refunding the the proposer so in this case you know the I guess the thesis here is that build a reputation for our exceeds a single slot payment so that would hopefully simplify a lot of things and and allow different forms of guarantors to to kind of back the builders who are actually doing the the block submissions one of the things I guess worth highlighting is that um there is a way to run the relay without taking any collateral and uh at least know for that Financial collateral and the way that it works is that you're you're using reputational collateral or maybe legal collateral um and one of the things that we've observed is that as a builder your reputation is worth a lot and part of the reason is worth a lot is because it it gives you access to bundle flow and it also potentially gives you access to proprietary transaction flow both of which you know makes you relevant as a as a builder so we actually believe that the reputation of Builders is you know at least in order of magnitude if not several orders of magnitude higher than one if and so what we're willing to do is to not take collateral from most Builders at least the identifiable builders that have reputation and kind of expect that if and when a bad block is [Music] um isn't is inserted on chain then um they would make the refund directly to the proposal without having to go through any sort of intermediary and um you know I guess you could ask what happens if the Builder just decides to burn their reputation which is worth you know several orders of magnitude more than one if well in that case there will be some sort of guarantor that can step in and make the proposal whole that guarantor potentially being the the Relay operator and so that's one of the models that we're considering at least for the initial testing where there's only one Eve of collateral per Builder where we basically just credit the builders with one if for free um we just trust them with with one Eve of our own um funds um with an understanding that if if there is a book on their site they would make the proposal whole and also an understanding of the proposals with which is that um if the builders don't make them hold and we we would step in as a as a last resort guarantor and one thing that I you know I think we should mention just following up on that is that if a block has a value that's higher than the collateral then we would just pop process it in the non-optimistic way so like the first thing we do is check if the value exceeds the collateral um of either the Builder or of the guarantor so that will never be a situation where a proposer misses out on on a huge Mev opportunity and then there's not sufficient collateral to repay them if they sign an invalid header so in that case is there an opportunity for a builder to have a higher collateral and therefore a a richer Builder can basically get preferential treatment because they will they will not be uh in the pessimistic sort of pipeline because they have a higher collateral right so higher collateral does imply a higher amount of their blocks submitted will be optimistic we think in the long tail um you know those super super high Mev blocks are rare enough that um this doesn't seem like that efficient of I guess that that large of an issue I don't know if you have anything to add there Justin yeah so it is definitely you know the more collateral you have the more of an edge you have and so what we want to do here is basically limit the amount of collateral per Builder and it would be the same limit for every single Builder for example it could be a limit of one Eve now the the really good news here is that if you look at the distribution of Mev over of rewards over the over the blocks it's uh like the vast majority of blocks have less than one if you know we'd have to quantify it exactly but it's on the order of 95 and so uh from our perspective you know what is our mission as the ultrasound relay is we want to improve the the essential resistance of of ethereum and uh and it it's perfectly fine if we if we do so on on 95 of the blocks and then the the five percent tail um would uh would just go through the the status quo pessimistic uh validation but yeah it is important that there is the same limit for every Builder and that this limit be low um and you know if the price of if increases dramatically you know it goes to ten thousand a hundred thousand the million dollars per if well we can just um reduce the the value uh the amount the cap over time and the one possible policy uh would be to cap the amount of collateral to Target for example 95 of of the blocks [Music] um but that's that that's kind of more of a of a policy thing for for relays and we're kind of encouraging relay operators to to have a reasonable policy uh there in terms of the cap so just a timing thing uh this call is on my scheduled for an hour and we're pretty much at the hour um and people want to stay on I'm happy to do that uh it sounds like there are a lot of questions um yeah I don't know maybe Justin or Mike if you have some place to direct this conversation I don't know if it's going to the pr or if they're somewhere else um but it sounds like there might be more async discussion we could have yeah I think the pr um could be a reasonable place I think maybe a forum post would be easier in terms of just if there's a lot of back and forth it'll clutter up the pr I don't have a super strong opinion here though Justin oh I don't have a strong opinion the pr PL is great also DMS if you want to chat and I also a link to another Zoom link which I'll be happy to stay on for half an hour let's say if if you have further questions you want to talk about the optimistic really okay so perhaps we'll do that um if anyone would like to move on to uh sort of an extended q a uh Justin is happy to do that and yeah otherwise are there any um final comments about any of the other things we discussed uh there's a question in the chat when is next called there isn't one right now um I think for now it makes more sense to have these be Supply driven uh in terms of yeah I was thinking kind of monthly um if people feel strongly then yeah um maybe chime in in the The Flash fox forum post where the agenda was and yeah we can figure out how to how to move next may I suggest that we have another call before the squirrely hard Fork as sort of okay from Readiness I I I like the monthly idea but just because of the very interesting hard Fork coming up you might want to be tied to those calendar events yeah that's a great idea I yeah like part of hesitation is I know we all have a lot going on it's not that we need like another standing call whether that's weekly or monthly or whatever um but yeah definitely we should have a call uh before the growling work so everyone keep an eye out uh for details for that I'll find the time um I guess generally does this time on the calendar work for everyone like before PM UTC I mean I guess you're here so I guess it did if it doesn't let me know um otherwise yeah I think we'll go ahead and wrap it up and yeah thanks everyone for uh for coming along thanks for hosting thanks Alex bye everyone thanks everybody cheers bye everyone 
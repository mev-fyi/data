okay everyone uh this is the third Med boost Community call I will drop the agenda in the chat here uh this forum posts and yeah there's not too much on the agenda this time so uh we'll see how things go maybe we can wrap it up a bit early um to get started there was a miscommunication I think on the last call around block native and you know them having some sort of discussions or deals with Builders uh towards funding the relay and uh yeah it turns out I think that was a misstatement um and so yeah I just wanted to call out that uh block native does not have any of this going on um I believe the original comment was said just as like a hypothetical and yeah I don't know Matt if you want to add anything to that no just appreciate the opportunity to clear the air there that uh we have not monetized their relay and that's the current state so just appreciate the opportunity to clear that up great um yeah that was uh that was a comment I made on the last call um I'm sorry I misunderstood what we were talking about at the time I didn't realize it was a hypothetical uh sorry for the confusion there no worries at all Austin it's all good great uh so I just want to clear that up uh the next big thing will be Readiness for capella coming up so we had Corley what maybe like two weeks ago at this point and generally I think it went well I think uh maybe there was some confusion about exactly which software to run uh especially if you're running like the flashboss code and that led to some uh a little difficulty but I think ultimately everyone shifted over to uh the right code on gorley issues resolved and things were looking pretty good um anyone want to share anything else about their gorilla experience yeah I'll jump in for on the Dreamboat side uh we we had an issue with uh an infrastructure misconfiguration that caused conflict between a prism and a lighthouse Beacon but once we resolved that then uh Dreamboat uh handled uh the the change just fine so we're in good shape good to hear um yeah sounds like uh gorilla generally went online for everyone uh the next thing to bring up would be mainnet Readiness so again if you're listening uh if you're a builder you know things will change with the fork so you need to update your infrastructure somehow if you're a relay hopefully you're on this call and it's very important that you have the right code at the right time otherwise yours will stop working and yeah if you're listening to running my Boost you're also going to want the right boost release uh ready for the fork and yeah maybe Chris you could talk a bit about uh the flashbots code okay well he dropped the link here absolutely okay thanks be unhappy are to talk a little bit about the software we just made a clean new list of which software versions to use and we also just got everything pretty much merged into the master branches and releases out math boost itself is ready since two weeks with version 150 so proposers will need to run math boost 150 or later if they updated in the last two weeks then they're already good this specific release has been tested in multiple test net through through girly and sepolier and this is expected to have no have not seen any issues resolvement fine the math boost really there is a new pre-release V1 0 Alpha 2. it's going to be a one zero release once we have it deployed on our minute we tested this release through all the test Nets and this is expected to work without problems this release of the really software also does not need the custom prism Fork anymore so you can run either prism or lighthouse or any other in the future client once they support a certain SSE event subscription so this release for release has everything um yeah that's gonna be there um the for Block validation on the relays we deprecated the block validation Gap Repository and validation is now done through the Builder project it's kind of a similar code base and the API has already been there and we are just focusing our maintenance effort on a single Repository the the rebases to um new Go ethereum versions takes a lot of resources and if you don't have to do that on multiple code bases uh helps a lot so we consolidate on using the Builder project for Block validation and as of today you can just use the main branch the main branch of the Builder project for Block builders you can also use the main branch of the Builder project but you still require the custom prism Fork because we are rubbing only wrapping up the switch to the SSC subscription so if you run the latest Builder code right now you need the custom prism fork and we expect that early next week we are the pr is linked in this document and it's testing and tested successfully and then instead of polling our prism fork for withdrawals the Builder receives it through the SSE event and and more of the block building payload attributes come through it so great work also on the client team so get this done and I'm extremely happy that we don't need to maintain a custom client Fork anymore yeah great great team effort one thing to shout out is that if you run sync proxy in your infrastructure then you also need to update this piece of software it's ready since version O2 that was released two days ago and the sync proxy is a tool that you may run in a really infrastructure where you can have usually once your client drives one Beacon Avon execution layer client and if you can you can put the sync proxy in the middle and have multiple clients and multiple El clients this allows you redundancy in the infrastructure so if one of your clients dies out two others still continue driving the El clients yeah I think that's the rough overview everything is pretty settled in a few days block Builders won't need the custom prism Fork anymore I would love to hear if there's any questions or inputs sure I have a quick question um so in the interest of a CL client diversity um how are the other client teams coming along with their implementation of the SSC changes is there an expectation that they'll be ready by uh main net Chapala uh it is not expected um that all Cloud supported Tech cool has an open issue for it and it's on the radar nimbals they don't have it scheduled and the load store guys we are they are they are in development may be ready but we're still waiting for example payloads to be able to confirm from our site that this is provably a working version so I think I don't know how fast Echo will get a release out and this done I would think it would be either one of prism or Lighthouse that I would recommend planning for going through the fog sounds good thanks yeah it's exciting to see that we have a Zen point so now things could be agnostic to clients and yeah as other teams roll them out then uh presumably the distribution can improve over time uh Chris this was really good um yeah we'll get this uh maybe I should live here but either way uh there's a nice overview here with the different links to the software if you run the flashbots code uh if you're not if you don't then presumably you know uh know how to run your own infrastructure so yeah mainnet is happening what just under two weeks from now so yeah everyone get ready yeah one thing to add are proposed client diversity is that there's also multiple El clients possibly coming up that are supported besides Dev in particular nethermind is working on an implementation of the validation logic for for relays and we are communicating with the the ref team and possibly also with Aragon if they could potentially become alternatives for Block validation and maybe also for Block building there is a lot of performance Gates that are possible this way yeah I think more the merrier for uh the client diversity issues for sure anything anyone else has for the upcoming Fork otherwise I think we can shift to talking about the optimistic relay I'll jump in again with a Dreamboat update in the in the interest of relay diversity Dreamboat on mainnet right now is running you know it's propeller ready um but it does not yet include it it currently includes uh requires using the uh the flashbots prism fork and we expect that to change in the next few days and we will update to support both the bism and Lighthouse clients so that should be then fully fully ready that's great one question here does it mean the main branch and the like which release is the one that you would recommend they're not connected to the document too uh the I believe yeah the main branch um and if if not I hold I will DM you on that but I'm pretty sure it's the main branch all right thanks okay uh there are some autistic relay updates so we'll move to those uh let's see here Mike I think you're here do you want to give us a summary of I think essentially these are two changes that you've been working on uh I believe they're basically just uh extending the apis for this new optimistic Paradigm you want to say a bit about that yeah and um I might preempt that with just a quick um summary of the release of optimistic rollout or optimistic relaying V1 which happened um exactly two weeks ago basically so just kind of quick high level summary we have pretty great Builder adoption we have 12 Builders who are posted [Music] who posted collateral with with the ultrasound relay one each the builders can be seen on this event log here including the transactions and the pub keys that they're submitting blocks to the relay with and if you haven't seen this article we look at some of the data from the initial rollout of optimistic optimistic relay and in general the numbers look pretty great we have you know we've started seeing way more payloads delivered through to the ultrasound relay than than before optimistic relaying and um in general yeah a much higher inclusion rate which is kind of the metric that we're most interested in um additionally we have been working with flashbots Team um in particular with Chris to get this PR in shape um they've talked a little bit about upstreaming it into their main repo I'm not sure whether or not that means flashbots relay itself will turn into optimistic relaying but at least it would be in the kind of canonical code base there so that everyone can can run it if they want and kind of following that vein there are a few other relays that are interested in in running optimistic we've talked to Estes we've talked diagnostic block native and and even Frontier research um has been discussing maybe spitting up their own their own relay so that might happen in the coming weeks and months probably post uh capella but okay cool Chris just said we don't play on trade yeah just having it as an option in our code base cool yeah um I guess the one the one thing we wanted to highlight in terms of the status of the code now that has caused a few um I guess a few issues a few headaches on our end is this issue of um blocks validating block validation failing with an issue that says unknown ancestor and we did a deep dive on this and what we have seen is that if our death nodes fall out of sync then we basically have a a bunch of blocks that are coming in that correctly identify the parent hash but since the Geth nodes are behind they they don't see that parent hash and they fail the validation so we've been working on a fix there but that's kind of the the biggest hurdle if anyone starts running optimistic relaying they might see that error too so that's that's something we're working on um additionally yeah um we wanted to just point out that we've haven't had any missed slots due to optimistic relaying we've we've been running for about two weeks here very smooth there was one optimistic block that was submitted that actually was invalid the issue was an odds announce being reused by two transactions in the block and that hadn't been caught by the Builder they've fixed that bug and um yeah that they're reactivated as optimistic and we haven't seen any more errors there so yeah that's kind of a great Testament to how reliable the builders are in terms of producing valid blocks and and how stable the launch of optimistic relaying has been overall um additionally we wanted to point out we've made one change to the code that makes it even more conservative um and that is we we now demote within a slot so um previously if a builder was submitting invalid blocks we wouldn't know until the end of the slot and and so if they end up winning the auction that invalid block would uh would end up being relayed and and would result in um in a missed slot but now we changed it so that in fact even as soon as they as soon as they submit an invalid block we demote them so even less um you know we haven't had any missed slots yet but we even reduced the probability further for any issues in the future um yeah that's that's kind of the the brief summary again we we don't plan on having um to use the collateral at all the collateral is kind of seen as a last resort for any Rogue Builders um if there is any issues that result in proposers losing losing rewards then we hope that the builders will refund them directly and we're going to kind of lead the communication effort there and the last thing to kind of plug I guess is and this this leads into what is actually on the agenda so thanks for bearing with me through kind of long-winded presentation here but um we're working hard towards V2 which is presented in this um in this roadmap here I've sent this before so yeah the the idea here is that we want to enable header only bids So currently the the big bottleneck for optimistic submissions is actually getting all the bytes from the payload um or the bytes of the payload from the Builder to the relay so these the payload execution um or sorry the execution payload is can be like several kilobytes up to like a few megabytes so that's definitely the big bottleneck in terms of Builders getting their their bids activated on the relay so what we're proposing here and I guess I'll link the The Proposal which is in the relay spec and then also the the exact type that we're suggesting for a new sublip submit block request um is is set up in such a way that the execution payload header which is all that we need for the proposer to sign is actually contained uh within a smaller um basically contained in the beginning part of this message so that the the bid can be fully contained in a single packet uh from the Builder to the relay so the V2 version of of optimistic relay is the Builder starts sending packets with their with their bids the first packet of the submit block request will contain everything we need to mark that bid as valid um and so then it'll be eligible to to win the auction right away the subsequent packets of the of the submit block request will have the full transaction list which is the kind of the the vast majority of the bytes in the in the payload and yeah once once the full body gets decoded then the actual block validation can happen again this will all be kind of off the fast path of of the optimistic submission so yeah this is this is V2 it'll hopefully take the the time it takes for a bid to become active like the submission time of Builders should be dropped by another 100 milliseconds approximately which is about what we saw in terms of reduction in time for moving the block validation off the fast path so we expect another significant uh performance Improvement if you have any kind of questions about the overall roadmap or or this new type and you know how how we plan on implementing it on the relay would be happy to answer those but that's kind of where we're at I'll toss it over to Justin if he has anything to add um no that was that was great Mike um I think we've we've we've received tens of millions of optimistic bids and uh you know really they've been extremely high quality one of the things that we've uh we're incentivizing now is actually Builders to not have errors and you know to just build valid blocks and this is working out the incentives are shaping the outcome which is great um and actually this is very good and healthy uh preparation for when trying PBS where you know Builders really are heavily incentivized even more so than optimistic relaying because they're guaranteed to to to uh yeah well they stand to lose to lose money if they if they put invalid bids in the same way um I'm actually talking about Builder errors it's it's not really related to optimistic relaying but it's it's we're we're kind of considering a new queuing um mechanism so right now I believe the way it works with the the default flashbots code base is that there's two queues there's a low priority queue and a high priority queue and um it's kind of very potentially very inefficient and the reason is that um you know sometimes you you're just spending simulation resources on blocks that will never win uh the auction and the reason is that you've been you've validated a block with a certain a bid with a certain value and you've you've you know that it's a correct bid it's a valid block and so the any any bit that comes in that has a lower value you can just skip the simulation it can just go in this ultra low priority queue which um which doesn't steal simulation resources from bids that are in the race and so basically we we've been thinking of okay what is the optimal design for for building these queues and basically what we're considering doing uh right now is having uh putting everyone in the high priority queue uh by by default and only simulate the blocks that actually stand to win so only if the bid value is increased versus um you know the the best known bid do we do the simulation everything else can go in some sort of virtual ultra low priority queue and then if like the the only like bad thing that could happen here is that there's there's a you know we we start getting spammed with with blocks that are invalid uh from people in the high priority queue and so what we can do here is actually have an automatic demotion of uh of builders that are in the high priority queue to the to the low priority queue um if if there's even a single bad bid and so this incentive that we that we have established for the optimistic Builders we can actually establish it as well for all the other builders that don't want to post collateral um so uh we're kind of going to significantly improve the uh the logic of uh of of of simulation even in the in the non-optimistic case uh so uh you know relays like flashbots that don't want to turn on optimistic relaying uh should uh should dramatically improve uh the the simulation latencies um because most of the time there will be no queue and the the the the reason is that oftentimes what happens is that there's there's one Builder who's like leading the pack they have some sort of special alpha or whatever like special uh private order flow and what happens is that they're the ones that are constantly setting the top bid and those are the only bids that we really need to simulate everything else you know from the 20 other builders all the bits can basically [Music] or at least not compete on in the simulation race okay uh it's very exciting here well yeah Michael workers went down go ahead Chris no you go run it out no I was gonna bring up your comment in the in the chat it sounds very relevant yeah so so wait I have a question though before we because we kind of jumped Beyond uh the the prior point about this block with like to the the nons ReUse and the Builder bug is like how did we identify that and like I presume like the bid just wasn't presented to proposers and then maybe some other you know Downstream we found this issue or what happened yeah so the way the optimistic relay setup is that um once the you know the bid was marked as as active but fortunately it didn't win the auction um so because because other higher bids came in later in the slot um even though the bid was at some point marked as active it it was like it didn't win the auction and the because the simulation happened and the simulation failed the next slot the the Builder was demoted and so they they remained demoted for the next few days um we sent them the full payload we we had kind of a private conversation with them and and they found the issue and and fixed it and then we re-promoted them and we haven't seen there since so yeah you know in some sense we kind of every time a builder bug happens there's some amount of luck around it not winning the auction um that was the first Builder bug we've actually seen and and we kind of got lucky um but we could have missed a slot there if that had been the highest bid for that slot did that answer your question yeah it did yeah thanks yeah um yeah something to keep uh keep an eye on um yeah there was a lot going on in the chat uh did you want to answer Chris's question or maybe Chris had a question yeah let me uh say I really like the transparency of how you present what's happening and what's the plans so Mike and Justin yeah that's great also the Innovation that you bring to the table here and I think the block validation is just a pain like our GIF notes are running hot and and falling behind and being slow like sometimes we have a second validation delay it's it's a pain and I'm totally interested in any type of smarter scheduling that could make the life of good submissions easier and better like yeah let's work on that and I think that's probably ideas there's two points to consider here one is that currently the relay purposefully allows cancellations for Block Builders so block Builders can send lower value blocks and there is an implicit uh promise that they will override previous blocks with higher value so they can run maybe more risky strategies and post High failure blocks and if the situation changes they can override this with a low value block that that's why without changing this mechanic um you can't just ignore lower value be like putting them at a super low priority queue seems incompatible with block cancellations but maybe it's a broader question whether these features actually necessary whether it's actually used and could talk with Builders if we could remove the cancellations functionality by default then it would be easy to de-prioritize lower value bits as a Next Step having everyone starting high priority um I think a flashbacks with the bundle really like years ago we learned that people will just create identities keys and and spam with transactors with blogs that are that that will go into validation and then be just cost resources but are not good blocks so that everybody's starting in high priority seems probably pretty open to spam I'm not sure how to solve that because even if you have a super high priority queue you still need to go into validation um so I think uh some client diversity with I think like ref or Aragon as alternative validation notes that could yield like three times validation performance already as well um and yeah maybe there's some form of pre-validation that gives more insight but in the end you only know after validation if a submission is a a good one but looking forward to to improve this and yeah great job okay yeah these are two great points like on on the cancellations I need to think about it more deeply but maybe we could give you know individual Builders the option you know are you making use of cancellations if yes we can keep the current logic if no we can have the more optimized logic um in terms of the default high priority queue I kind of overstated that a little bit what I meant is that right now we've identified about 20 Builders connected to our to our relay and you know we we have you know a point of communication with all of them we've established some amount of reputation there's some Lindy in the sense that these pup Keys have you know been there for several weeks um and so what I meant is that all of these 20 builders that are currently connected can all be kind of Set uh to the high priority queue but I agree that if if a new build a puppy just just connects us of nowhere uh then we you know that one needs to default to to low priority and only after you know there's some some amount of anti-sibil it could be you know Lindy it could be um you know reputation just you know knowing who it is uh then we can manually set them into the high priority queue I have a question on uh how uh ultrasound handles the um uh when if there's a missed slot um so if that Miss slot is because of uh some kind of bid discrepancy or something like that um I guess that wouldn't be a mislot it would be a filled slot but the promise was not the same as what was delivered what about the case where there's a mislot because of a latency issue that the relay has with the validator how how is that differentiated as far as you know that the Builder is not necessarily have any responsibility there uh it's simply that the that the let's say the uh the proposer waited a little too long or there was some kind of connectivity issue between the validator and the proposer I mean the relay and the proposer right so I mean I'm happy to go ahead Mike but um like basically I don't think there's any change with respect to optimistic and optimistic in this case like bids can be you know slots can be missed just because of latency and actually it happens about uh once a day you know once you become a relay of our size uh these events happen and uh you can you can have a look on infoscan if you go to IFA Scandal IO I think slash you know orphan blocks or something then you know you will see a bunch of open blocks and this is a natural process to happen um what we've seen so far is that [Music] um when people when proposals come to us and say hey I I missed I'm I'm I missed the slot and I was a proposer we do a deep diving investigation and we look at the you know time stamps in the logs and um every single time it's basically so far it's been the proposer who has some sort of bad internet connection and they've confirmed on that aside that it you know it was them or it was some sort of faulties software setup so for example um there was some sort of misconfiguration without on one of the Lido operators and so we did a whole Deep dive there and then we found found out that there was this vouch misconfiguration and then there was a rocket pool um uh validator who was running on the home internet connection and it was it was just a bad internet connection every once in a while it would just have randomly 10 seconds of of this connection and and they just happened to be very unlucky for this for this one block but generally speaking um if there's like an operational issue uh you know we take responsibility for it um you know you know we're we're not for profit we have a very small amount of money so I think what we've said to the to the Lido um team is that you know we'd cover up to 10 if of of liability uh you know for faults that are from the relay um but yeah as you said there could be any any kind of of uh you know connectivity between the relay and the proposer and you know so far it seems that all of the faults have been on the proposal side I mean we're you know we're running on on Google Cloud we have extremely good connectivity um but yeah it is possible that Google Cloud you know goes down or you know adjust the wrong moment and uh we are happy to take on uh reliability up to 10 if very quick follow-up there um so does that does that mean just so I understand that the that ultrasound when there is a potential issue with a proposer regardless of the specifics of it that ultrasound uh sort of proactively triage is that and once ultrasound makes the determination that that this is a builder issue then and only then is the Builder notified that they're that they have to um um they might have to do something like like like pay the the whatever the bid difference was right so um the investigations that we've done uh so far is when the proposal comes to us and complaints now having said that what we've also done is that we we've set up uh we've done two things like one is that we set up an immediate notification uh on we have this telegram bot which tells us immediately when we have a Miss slot and it happens you know every other day that that kind of thing which is the normal kind of rate for for Orphan blocks and I expect all the relays uh to you know that have significant inclusion rate um you know flashbots for example that that relay I expect will have will have my slots now another thing that we've done is that we've looked historically and we've built a spreadsheet looking at all the missed uh slots and we've tried to find patterns and try and understand heuristics as to why this is happening now one of the very interesting things that we found is that about half the Miss slots uh I'll um have a block which maxes out the gas limit so it's like the the gas used is almost 30 million so that suggests kind of one of two things maybe it's a very large block maybe several megabytes or maybe it's a block which takes a very long time to execute and that could be the reason why it gets opened because the attest is you know just don't are not able to download it fast enough and execute it fast enough you know within the few seconds that they're allocated to um to to submit the attestations and then you know the blockchain just keeps on moving to the next slot and then it looks like uh the block never made it but you know it did make it it was just a bit too fat um another thing that we that we're considering doing is um kind of trying to see if these are home validators versus like professional operators um so we're expecting the professional operators who have extremely good connectivity to be in Cloud servers and we're expecting some of the you know home validators to maybe have shakier internet connections and it's a little bit of a you know a project that I want to do which is basically every time you have a Miss slot come up with some sort of heuristic to explain what happened um but you know this is this is for future research we haven't kind of uh done it yet so so far the only time where we've done the very deep investigation looking at the the logs manually is when we've uh we've had a request from the proposal to to to look into them thanks and like one one of the things that we're hoping to do is very similar to the Builder side of things so with optimistic relaying we actually found you know possibly like a dozen bugs build a bugs or even dozens of bugs because we've reported all these simulation errors and we told the builders good you know go fix your simulation errors and I'm hoping that we do something similar with uh with the Miss slots because every time there's a missed lot that suggests that there's some sort of inefficiency somewhere and so maybe you know gef is a little sub-optimal or some other client is sub-optimal and that's what we want to do we want to every time there's a Miss slot we understand okay what was the consensus client what was the execution client what was the internet connection blah blah blah and try and and track down the the source of the of the Miss slot foreign yeah uh thanks Mike and Justin that's all very exciting uh seems like the offensive stuff is moving along and yeah especially I think all of the extra data analysis that you guys are collecting and doing is uh it goes really far to you know give us a better picture of what's going on out there uh there's a question that uh do you want to just uh let's see what you're saying oh yeah I I was curious um it seems like super interesting that now there is this process where like some relays like uh actually looking at these bugs and then communicating with Builders and like also with validators like I was just wondering if this just didn't happen before like these bugs were still there because like the Builder didn't get the feedback before from anyone yeah so I guess the the difference from before is that if they started submitting uh let's say they have an invalid block because that nod's issued um instead of the bid being active the block submission will just fail and return like uh you know a 400 HTTP response to the Builder um so unless the relay operators looked into the logs and tried to evaluate what went wrong the builders would just see the response on their end and they had to decide whether or not they take action on it um the reason we have I guess a more active approach to looking at Builder errors is because if they submit if there's a submission error then we demote their Pub keys and they're not they're no longer optimistic and so we kind of reach out to them and we say Hey you know you have this eth posted but you're in non-optimistic mode because of this error and now they have um you know a stronger reason to to fix the bug because then that's that's what allows us to reactivate them so I guess that's the difference I don't think um I think before probably all the errors kind of just get get washed out with the rest of the with the rest of the requests um and no one looks too deeply at them because there's a ton of submissions and they fail for a host of different reasons yeah it makes sense that's cool but yeah one of the things that I hope will happen eventually is that we have extremely good visibility into the health of you know the the participation rate of of ethereum there's going to be some validators that are offline and we can tell that they're offline because they're not making attestations and so you know we expect to miss a missed slot for those validators whenever they are elected as the proposer but for all the other cases you know really we want to get 100 participation rate if you are online as a validator we you know there should be a block there and so whenever there's a Delta there that that's an opportunity for for improvement oh it's probably also worth bringing up another error we've seen a few times is around length one reorgs so this is kind of like very similar in in spirit to a Miss slot but it can happen for a number of reasons um you know if if the block is late then it might get re-arged out by the next block if they're uh the proposal boost to the next block is okay kind of can can overwhelm any attestations that happened on the previous block so um yeah we're talking and thinking about collecting data on on length one reorgs two um and seeing if there's some similar patterns there as far as blocks that use a lot of gas or blocks that have a lot of extra data or whatever like large transactions um could result in the reorg so yeah I think overall Network Health would be better if there were less length one reords and it would help with our operational coil of running the relay tube I mean I guess one of the things worth mentioning is that you know maybe we can um we can very we can we can largely automate uh the um you know the attribution of oven of a networking issue um and the reason is that we can we can look at IP addresses of the The Proposal that kind of requested the payload with the with their signature and correlate that IP address with when they made the the get header request and so maybe what we should be doing is recording in the database as opposed to recording in the logs which gets kind of rotated rotated out but you know permanently recording in a database the the timestamps of the get header and the get payload um using the IP address as a as a good enough heuristic um and then if it so happens that these timestamps are you know within bounds of what's specified and maybe it's a relay issue but most of the time what we've seen looking at the logs is that you know the the get header the get payload was just made made way too late and that that was the explanation for for why there was a Miss slot yeah and this leads to sorry we're kind of hogging the the call here but um one other thing that we've talked about and I think there's there's a lot of interest especially from the Builder side is making an SSE um Channel basically for the highest bid to get published from the relay side so right now the relays uh get spammed kind of repeatedly with get header calls because everyone wants to know what the current highest bid is but instead we can have an SSE where the relays is communicating outwards what the current highest bid is at every every millisecond or something um and then the get header and the get payload or I guess the get header call we could verify that it only comes from the proposer which would make the data a lot more easy to reason about because currently we get like hundreds and thousands of of get header calls each slot which makes uh the processing a lot harder I guess but that's that's kind of again a future extension so not there yet but talking about it yeah in a sense like with this last thing you're getting closer to like the Mev Oracle thing like that you provide to the current proposer in a sense but yeah I I think this metrical things on the valiator side are pretty cool one final thing to to answer the question is um if uh we know that we messed up something on our side so if for example where we we try to restart a gif node and that led to some you know connections being closed or whatever like if you know ifs there's a known devops uh kind of issue on our site that may have lasted even just one second what we do is that we manually check that that didn't lead to a Miss lot uh on changes as a sanity check so we in that sense we we take responsibility for you know doing a deep manual Deep dive when the proposal asks us but also when we know that there's been like a bit of a operational hiccup um we we also proactively do that but for the like the the natural Baseline often rate of uh of my slots we uh so far we haven't done deep dive investigation cool and it's all very exciting um is there anywhere people could follow up uh asynchronously if they wanted to uh chime in on these designs or the ideas or provide feedback to to to to reach out to um no I'm Justin at ethereum.org but uh you can also I have open DMS on on Twitter I think also the ultrasound account also has open DMS uh we're also easy to find on Telegram and Discord uh sugarneck acts as Stephanie from agnostic is here I don't know if there's a more pointing question okay um anything else anyone uh has otherwise I think we can go ahead and wrap up pretty soon and one one of the things that I I kind of want to bring up as a quick research question is around the cancellations is it seems that enshrine PBS is not compatible with with cancellations I'm just thinking out loud here but um right we're then trying PBS we're kind of expecting the proposal to pick the highest bid that they saw um and so maybe we shouldn't be fostering cancellations because it's somewhat incompatible with Android PBS this is actually my original like Market design issue with cancellations I think it's not an enshrined PBS issue I think it's like a fundamental Mev issue um like we're in an asynchronous Network here with non-attributability of message delivery uh running this option and like the time the proposer receives the message that allows them to take like the higher value action expecting them to like give up that optionality by essentially forgetting they took that when they can easily claim um you know that they just didn't receive it and no one else can tell it does seem like enshrining like uh you know just a sub-optimal market structure from the point of view of Mev um maybe there's other ways to do cancellations like um you know like a like a like a more layered approach where um the commitments like are more granular than those like expressed at like the PBS level itself but I think yeah having it at the PBS level is uh I agree with your analysis it's uh it's hard to hard to kind of enforce on the proposer side and that's a problem right boom something to think more about uh any final comments otherwise I will uh go ahead and end the call I guess I just want to ask really quick if anyone from uh block swap made it here um they've recently released uh their implementation of something that's well it has some parallels to optimistic relaying um proof of neutrality relay um if you have a girly test net up um I mentioned this call to them and wasn't sure if anyone was going to show up to kind of introduce that you have a link or something to uh this project yeah yeah I'll at least uh drop LinkedIn really quick oh that looks like Mike got it yep cool thanks uh maybe we can hit them on the call next time okay well thanks everyone uh let's go ahead and wrap up and I'll see you all on the internet thanks for coordinating Ellen thanks Alex thanks yeah thanks for hosting this is great thank you 